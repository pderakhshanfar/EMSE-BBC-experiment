* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 7200
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2495317221
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 13:03:35.286 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 13:04:17.398 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 13:06:01.992 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 13:06:18.912 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.jstype.TemplateTypeMapReplacer due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 13:06:42.077 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.jstype.UnionType canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 13:08:26.197 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 1991,0,0| Number of FF evals: 684
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 44,0,0| Number of FF evals: 65
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 44,0,0| Number of FF evals: 65
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 26301,24400,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 44,0,0| Number of FF evals: 65
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 44,0,0| Number of FF evals: 65
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 44,0,0| Number of FF evals: 65
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 204,0,0| Number of FF evals: 349
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 424,0,0| Number of FF evals: 765
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 999,0,0| Number of FF evals: 442
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 132,0,0| Number of FF evals: 635
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 132,0,0| Number of FF evals: 622
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 793,406,0| Number of FF evals: 7390
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 427,0,0| Number of FF evals: 451
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 2011,1681,13| Number of FF evals: 15626
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 1473,0,0| Number of FF evals: 640
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 427,0,0| Number of FF evals: 451
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 44,0,0| Number of FF evals: 65
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 427,0,0| Number of FF evals: 451
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 44,0,0| Number of FF evals: 65
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 620,0,0| Number of FF evals: 2082
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 427,0,0| Number of FF evals: 451
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 899,207,0| Number of FF evals: 3105
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 725,0,0| Number of FF evals: 729
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 381,0,0| Number of FF evals: 706
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 17060,12639,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 427,0,0| Number of FF evals: 451
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 44,0,0| Number of FF evals: 1453
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 2612,0,0| Number of FF evals: 848
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 95,0,0| Number of FF evals: 358
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 2445,0,0| Number of FF evals: 1261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 12480,8764,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 11903,9021,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 190,0,0| Number of FF evals: 373
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 2298,0,0| Number of FF evals: 1158
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 999,0,0| Number of FF evals: 1042
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 2983,2537,721| Number of FF evals: 15626
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 44,0,0| Number of FF evals: 63
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 1991,0,0| Number of FF evals: 690
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 238,0,0| Number of FF evals: 1297
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 943,0,0| Number of FF evals: 1938
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 2856,1828,17| Number of FF evals: 10823
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 44,0,0| Number of FF evals: 1017
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 38,0,0| Number of FF evals: 214
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 11956,11040,12| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: Line 1123: 132,0,0| Number of FF evals: 95
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 202,0,0| Number of FF evals: 1175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 1249,383,100| Number of FF evals: 3139
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 114,0,0| Number of FF evals: 350
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 2831,2431,0| Number of FF evals: 12278
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 1715,1494,166| Number of FF evals: 8922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 132,0,0| Number of FF evals: 95
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 179,0,0| Number of FF evals: 228
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: Line 1847: 44,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 7473,3454,0| Number of FF evals: 9548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 3407,806,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 5538,4591,128| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 35,0,0| Number of FF evals: 478
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 1473,0,0| Number of FF evals: 665
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 2136,0,0| Number of FF evals: 1358
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 1133,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 1614,1327,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 518,373,0| Number of FF evals: 7633
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 1733,1425,5| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 1688,0,0| Number of FF evals: 625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 2298,0,0| Number of FF evals: 771
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 9727,8900,0| Number of FF evals: 13265
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 12547,9373,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - false: 44,0,0| Number of FF evals: 796
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 4248,3842,972| Number of FF evals: 15626
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 247,0,0| Number of FF evals: 947
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 65114,56500,0| Number of FF evals: 15366
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: root-Branch: 44,0,0| Number of FF evals: 691
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: root-Branch: 2940,0,0| Number of FF evals: 1293
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 66162,57548,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 13,0,0| Number of FF evals: 601
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 1953,0,0| Number of FF evals: 959
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 725,0,0| Number of FF evals: 1002
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - true: 37,0,0| Number of FF evals: 348
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 4624,0,0| Number of FF evals: 1828
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 1927,1545,22| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 665,0,0| Number of FF evals: 2112
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 604,0,0| Number of FF evals: 298
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 604,0,0| Number of FF evals: 298
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 684,4,0| Number of FF evals: 2270
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 44,0,0| Number of FF evals: 63
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 132,0,0| Number of FF evals: 195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 5523,5253,0| Number of FF evals: 15355
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 9006,7613,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 1966,0,0| Number of FF evals: 946
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 201,0,0| Number of FF evals: 206
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 396,0,0| Number of FF evals: 239
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 396,0,0| Number of FF evals: 653
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 396,0,0| Number of FF evals: 239
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 15418,13607,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 396,0,0| Number of FF evals: 239
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 857,0,0| Number of FF evals: 370
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 1917,0,0| Number of FF evals: 1311
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 311,0,0| Number of FF evals: 441
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 3454,0,0| Number of FF evals: 1385
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 7485,6196,2180| Number of FF evals: 11818
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 1917,0,0| Number of FF evals: 1311
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 8251,6782,0| Number of FF evals: 14601
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 1917,0,0| Number of FF evals: 1311
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 13438,4824,0| Number of FF evals: 3184
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 3941,3237,16| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 495,0,0| Number of FF evals: 785
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 5295,4801,162| Number of FF evals: 15626
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 23507,17998,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 6843,5641,0| Number of FF evals: 11591
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 132,0,0| Number of FF evals: 756
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 66162,57548,47148| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 42505,34068,0| Number of FF evals: 9779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 2298,0,0| Number of FF evals: 771
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 76,0,0| Number of FF evals: 356
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 66162,57548,47145| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 217,0,0| Number of FF evals: 1273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 6549,0,0| Number of FF evals: 1949
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 2005,1690,213| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 1855,1010,0| Number of FF evals: 4988
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 14,0,0| Number of FF evals: 290
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 1992,1613,50| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 1276,0,0| Number of FF evals: 1096
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 9957,5785,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 396,0,0| Number of FF evals: 416
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 1688,0,0| Number of FF evals: 949
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 725,0,0| Number of FF evals: 324
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 223,0,0| Number of FF evals: 229
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 18394,14284,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 13005,12074,0| Number of FF evals: 15582
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 2612,0,0| Number of FF evals: 1068
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 4157,0,0| Number of FF evals: 1185
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 2612,0,0| Number of FF evals: 1027
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 356,0,0| Number of FF evals: 647
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 29265,21767,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 132,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 1122,0,0| Number of FF evals: 574
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 857,0,0| Number of FF evals: 405
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 514,199,2| Number of FF evals: 5158
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 2770,0,0| Number of FF evals: 876
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 1286,983,240| Number of FF evals: 7417
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 2070,1762,6| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 132,0,0| Number of FF evals: 342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 2298,0,0| Number of FF evals: 771
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 1194,891,240| Number of FF evals: 6879
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 45,0,0| Number of FF evals: 213
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 4735,4187,917| Number of FF evals: 15622
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 30234,21620,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 745,468,196| Number of FF evals: 6729
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 238,0,0| Number of FF evals: 1297
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 13438,4824,0| Number of FF evals: 3185
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 4326,2247,0| Number of FF evals: 3696
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 725,0,0| Number of FF evals: 355
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 66162,57548,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 1586,0,0| Number of FF evals: 636
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 6945,6388,317| Number of FF evals: 15621
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 138,0,0| Number of FF evals: 435
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 2612,0,0| Number of FF evals: 848
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 66162,57725,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 1408,0,0| Number of FF evals: 624
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 6186,0,0| Number of FF evals: 1619
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 37,0,0| Number of FF evals: 479
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 2612,0,0| Number of FF evals: 843
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 223,0,0| Number of FF evals: 145
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 223,0,0| Number of FF evals: 145
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 132,0,0| Number of FF evals: 107
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 2770,0,0| Number of FF evals: 1069
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 35348,30979,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 6549,0,0| Number of FF evals: 1705
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 944,640,0| Number of FF evals: 8515
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 1917,0,0| Number of FF evals: 1367
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 9716,4014,0| Number of FF evals: 5480
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 132,0,0| Number of FF evals: 200
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 6310,4202,0| Number of FF evals: 7469
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 11774,9666,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 2612,0,0| Number of FF evals: 823
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 1991,0,0| Number of FF evals: 1092
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 1888,0,0| Number of FF evals: 1404
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 5388,2861,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 35425,31056,77| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 4855,4041,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 26871,18434,0| Number of FF evals: 12977
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 5414,1045,0| Number of FF evals: 2489
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 1917,0,0| Number of FF evals: 1401
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 13438,5001,0| Number of FF evals: 3185
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 2445,0,0| Number of FF evals: 793
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 1917,0,0| Number of FF evals: 1366
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: root-Branch: 223,0,0| Number of FF evals: 677
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 44,0,0| Number of FF evals: 229
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 30234,21797,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 44,0,0| Number of FF evals: 499
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 132,0,0| Number of FF evals: 322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 2136,0,0| Number of FF evals: 790
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - true: 44,0,0| Number of FF evals: 770
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 66162,57548,47127| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 13438,5001,0| Number of FF evals: 3185
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 413,0,0| Number of FF evals: 574
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 1133,0,0| Number of FF evals: 769
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 3979,0,0| Number of FF evals: 1822
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 624,0,0| Number of FF evals: 1440
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 9327,7662,0| Number of FF evals: 13813
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - false: 34,0,0| Number of FF evals: 511
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 223,0,0| Number of FF evals: 141
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 223,0,0| Number of FF evals: 141
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 132,0,0| Number of FF evals: 708
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 413,0,0| Number of FF evals: 574
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 11,0,0| Number of FF evals: 1280
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 888,70,0| Number of FF evals: 2392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 356,0,0| Number of FF evals: 404
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 2611,1720,0| Number of FF evals: 13414
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 223,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 1408,0,0| Number of FF evals: 945
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 356,0,0| Number of FF evals: 404
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 789,483,0| Number of FF evals: 8172
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 39388,33165,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 2136,0,0| Number of FF evals: 706
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 44,0,0| Number of FF evals: 263
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 65114,56677,0| Number of FF evals: 15366
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 417,0,0| Number of FF evals: 727
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 1840,0,0| Number of FF evals: 652
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 2612,0,0| Number of FF evals: 1027
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 11920,11042,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 223,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 132,0,0| Number of FF evals: 94
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 20517,15696,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 3012,1877,0| Number of FF evals: 5958
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 604,0,0| Number of FF evals: 284
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 5070,4794,0| Number of FF evals: 7119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 604,0,0| Number of FF evals: 284
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 1700,757,0| Number of FF evals: 5450
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 66162,57725,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 155,0,0| Number of FF evals: 215
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 2770,0,0| Number of FF evals: 921
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 1795,1491,2| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 857,0,0| Number of FF evals: 468
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 604,0,0| Number of FF evals: 298
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1036: 12,0,0| Number of FF evals: 75
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 44,0,0| Number of FF evals: 237
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 1880,1562,15| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 495,0,0| Number of FF evals: 255
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 1088,109,0| Number of FF evals: 2366
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 3003,0,0| Number of FF evals: 930
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 235,0,0| Number of FF evals: 1264
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - true: 11063,8511,0| Number of FF evals: 5829
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 2805,1590,0| Number of FF evals: 7418
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 9694,9059,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 495,0,0| Number of FF evals: 255
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 23,0,0| Number of FF evals: 268
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - false: 8976,6424,0| Number of FF evals: 5052
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 66162,57725,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 4157,0,0| Number of FF evals: 1649
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 858,0,0| Number of FF evals: 1573
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 2136,0,0| Number of FF evals: 741
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 2694,2409,0| Number of FF evals: 15582
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 527,9,0| Number of FF evals: 2342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 2149,1796,0| Number of FF evals: 6065
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 384,0,0| Number of FF evals: 1089
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - true: 9,0,0| Number of FF evals: 279
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 2694,2409,0| Number of FF evals: 15582
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 66162,57725,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 2104,1827,369| Number of FF evals: 15581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 223,0,0| Number of FF evals: 176
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 1133,0,0| Number of FF evals: 451
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 198,0,0| Number of FF evals: 719
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 1784,957,0| Number of FF evals: 5957
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - false: 396,0,0| Number of FF evals: 938
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 7790,5379,0| Number of FF evals: 8516
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 3286,0,0| Number of FF evals: 970
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: Line 2403: 2770,0,0| Number of FF evals: 886
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 1120,0,0| Number of FF evals: 2143
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 745,468,196| Number of FF evals: 6729
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1099: 2940,0,0| Number of FF evals: 925
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 702,0,0| Number of FF evals: 2109
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 938,0,0| Number of FF evals: 1752
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 66162,57725,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 4494,1704,0| Number of FF evals: 8450
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 44,0,0| Number of FF evals: 122
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1100: 2940,0,0| Number of FF evals: 925
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 1688,0,0| Number of FF evals: 1077
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 156,0,0| Number of FF evals: 899
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 2612,0,0| Number of FF evals: 1182
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 396,0,0| Number of FF evals: 233
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 3989,2926,0| Number of FF evals: 15624
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 3532,3189,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - false: 44,0,0| Number of FF evals: 771
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 4084,3039,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 1408,0,0| Number of FF evals: 519
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 4084,3039,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 25998,17384,0| Number of FF evals: 5956
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 4084,3039,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 20595,19549,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 4084,3039,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 13543,9304,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 349,21,0| Number of FF evals: 2461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 4157,0,0| Number of FF evals: 1542
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 23,0,0| Number of FF evals: 268
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 132,0,0| Number of FF evals: 922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 2145,1789,17| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 9586,4798,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 107,0,0| Number of FF evals: 503
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 132,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 9779,8766,6| Number of FF evals: 13249
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 3286,0,0| Number of FF evals: 987
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 23011,18754,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 8608,7952,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 2920,729,0| Number of FF evals: 3286
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 495,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: Line 1616: 44,0,0| Number of FF evals: 65
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 1408,0,0| Number of FF evals: 519
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 3286,0,0| Number of FF evals: 1310
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 3900,0,0| Number of FF evals: 1539
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 44,0,0| Number of FF evals: 1413
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 132,0,0| Number of FF evals: 93
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 132,0,0| Number of FF evals: 152
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 311,0,0| Number of FF evals: 173
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 51,0,0| Number of FF evals: 402
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 477,159,3| Number of FF evals: 4623
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 1356,1082,0| Number of FF evals: 10076
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 13438,5001,0| Number of FF evals: 3184
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 493,0,0| Number of FF evals: 736
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 1688,0,0| Number of FF evals: 1277
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setCharno(I)V: root-Branch: 1133,0,0| Number of FF evals: 488
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 132,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 44,0,0| Number of FF evals: 92
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 18501,14287,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 311,0,0| Number of FF evals: 200
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 632,0,0| Number of FF evals: 1830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 9846,6541,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 1327,0,0| Number of FF evals: 857
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 3947,586,0| Number of FF evals: 2722
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 13,0,0| Number of FF evals: 602
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 24,0,0| Number of FF evals: 713
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 2717,2396,0| Number of FF evals: 10643
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 132,0,0| Number of FF evals: 111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 1840,0,0| Number of FF evals: 947
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 174: 132,0,0| Number of FF evals: 112
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 223,0,0| Number of FF evals: 135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 173: 132,0,0| Number of FF evals: 112
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 3454,0,0| Number of FF evals: 1040
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 9437,6310,0| Number of FF evals: 11437
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 10749,9736,1| Number of FF evals: 15623
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 1094,81,0| Number of FF evals: 2369
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: Line 2351: 1688,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 47,0,0| Number of FF evals: 824
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 232,0,0| Number of FF evals: 781
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 5356,4448,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 396,0,0| Number of FF evals: 884
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 12372,11083,4679| Number of FF evals: 15541
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 19953,17265,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 2298,0,0| Number of FF evals: 990
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 359,0,0| Number of FF evals: 597
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 29,0,0| Number of FF evals: 98
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 1948,1370,0| Number of FF evals: 6069
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 396,0,0| Number of FF evals: 215
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 9,0,0| Number of FF evals: 104
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 11889,10008,0| Number of FF evals: 15366
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 1133,0,0| Number of FF evals: 835
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 5747,4543,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 44,0,0| Number of FF evals: 147
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 1133,0,0| Number of FF evals: 769
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 66162,57548,47137| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;)V: I9 Branch 284 IF_ACMPNE L194 - false: 20,0,0| Number of FF evals: 202
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 88,0,0| Number of FF evals: 91
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 604,0,0| Number of FF evals: 477
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 12071,11102,74| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 15,0,0| Number of FF evals: 195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 216,0,0| Number of FF evals: 545
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 2983,2543,717| Number of FF evals: 15626
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 2572,0,0| Number of FF evals: 1667
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 85,0,0| Number of FF evals: 484
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 2983,2543,718| Number of FF evals: 15626
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 2445,0,0| Number of FF evals: 774
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 2419,0,0| Number of FF evals: 1575
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 12,0,0| Number of FF evals: 820
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 7485,6196,2192| Number of FF evals: 11818
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 495,0,0| Number of FF evals: 261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 857,0,0| Number of FF evals: 551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 6310,4202,0| Number of FF evals: 7436
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 3286,0,0| Number of FF evals: 1110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 132,0,0| Number of FF evals: 785
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 6310,4202,0| Number of FF evals: 7436
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 19,0,0| Number of FF evals: 293
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 6310,4202,0| Number of FF evals: 7436
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 4249,3613,0| Number of FF evals: 10748
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 223,0,0| Number of FF evals: 135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 361,38,0| Number of FF evals: 2800
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 6310,4202,0| Number of FF evals: 7436
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 17181,11899,0| Number of FF evals: 9965
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 6310,4202,0| Number of FF evals: 7436
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 6310,4202,0| Number of FF evals: 7436
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 604,0,0| Number of FF evals: 316
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 104,0,0| Number of FF evals: 445
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 24,0,0| Number of FF evals: 183
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 132,0,0| Number of FF evals: 111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 6483,5390,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 6483,5390,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 2136,0,0| Number of FF evals: 727
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 13499,11087,15| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 12,0,0| Number of FF evals: 1220
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1858: 44,0,0| Number of FF evals: 65
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 1133,0,0| Number of FF evals: 611
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 88,0,0| Number of FF evals: 168
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - false: 396,0,0| Number of FF evals: 953
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - false: 12,0,0| Number of FF evals: 1051
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 5845,3981,0| Number of FF evals: 7469
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 25998,17384,0| Number of FF evals: 5953
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 1437,0,0| Number of FF evals: 620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 508,0,0| Number of FF evals: 1320
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;: I12 Branch 98 IF_ICMPEQ L764 - false: 7,0,0| Number of FF evals: 1444
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 66162,57725,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 6001,0,0| Number of FF evals: 1574
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 958,624,3| Number of FF evals: 8993
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 6001,0,0| Number of FF evals: 1574
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 2612,0,0| Number of FF evals: 983
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 1293,0,0| Number of FF evals: 871
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 311,0,0| Number of FF evals: 264
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 140,0,0| Number of FF evals: 860
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 1942,1608,11| Number of FF evals: 15626
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 4518,134,0| Number of FF evals: 2315
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 6001,0,0| Number of FF evals: 1574
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 5639,0,0| Number of FF evals: 1576
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 132,0,0| Number of FF evals: 159
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 6441,139,0| Number of FF evals: 2843
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 223,0,0| Number of FF evals: 215
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 725,0,0| Number of FF evals: 755
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 1688,0,0| Number of FF evals: 1030
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 158,0,0| Number of FF evals: 405
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 3280,2998,0| Number of FF evals: 15582
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 2104,0,0| Number of FF evals: 1205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 7420,6088,356| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 73,0,0| Number of FF evals: 279
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 3280,2998,0| Number of FF evals: 15582
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 3900,0,0| Number of FF evals: 1531
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 11320,10848,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 3900,0,0| Number of FF evals: 1531
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 44,0,0| Number of FF evals: 495
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: root-Branch: 132,0,0| Number of FF evals: 2002
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 6001,0,0| Number of FF evals: 1603
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 88,0,0| Number of FF evals: 202
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 1166,0,0| Number of FF evals: 1012
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 132,0,0| Number of FF evals: 95
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 44,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 51,0,0| Number of FF evals: 402
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 6314,0,0| Number of FF evals: 1966
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 11985,11077,35| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 495,0,0| Number of FF evals: 596
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 15893,12792,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 427,0,0| Number of FF evals: 662
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 11056,7124,0| Number of FF evals: 6894
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 5639,0,0| Number of FF evals: 1509
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: Line 2124: 223,0,0| Number of FF evals: 141
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 1194,891,240| Number of FF evals: 6891
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 1538,1405,13| Number of FF evals: 15507
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 2694,2409,0| Number of FF evals: 15582
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 2894,0,0| Number of FF evals: 1736
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 20051,15528,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 17185,16028,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 74,0,0| Number of FF evals: 130
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 223,0,0| Number of FF evals: 641
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 44023,38401,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 44,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 44023,38401,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 1850,1527,34| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 2983,2543,716| Number of FF evals: 15626
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 8608,7952,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 44,0,0| Number of FF evals: 86
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 223,0,0| Number of FF evals: 138
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 5427,4494,31| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 1133,0,0| Number of FF evals: 461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 1133,0,0| Number of FF evals: 461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 1133,0,0| Number of FF evals: 461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 132,0,0| Number of FF evals: 231
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 1133,0,0| Number of FF evals: 461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 959,625,3| Number of FF evals: 8993
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setType(I)V: Line 531: 1268,0,0| Number of FF evals: 484
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setType(I)V: Line 530: 1268,0,0| Number of FF evals: 484
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 2136,0,0| Number of FF evals: 1057
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 21893,16730,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 15817,12806,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 132,0,0| Number of FF evals: 788
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - false: 182,0,0| Number of FF evals: 599
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 132,0,0| Number of FF evals: 1076
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 1133,0,0| Number of FF evals: 461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 3987,3334,0| Number of FF evals: 9999
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 44,0,0| Number of FF evals: 50
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 44,0,0| Number of FF evals: 50
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 34,0,0| Number of FF evals: 158
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 694,296,0| Number of FF evals: 5162
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 44,0,0| Number of FF evals: 50
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 284,0,0| Number of FF evals: 411
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 1499,834,0| Number of FF evals: 6563
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 24,0,0| Number of FF evals: 194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 2445,0,0| Number of FF evals: 942
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 12581,11754,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 1081,707,3| Number of FF evals: 8543
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 1549,0,0| Number of FF evals: 582
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 1466,1285,217| Number of FF evals: 8922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 1549,0,0| Number of FF evals: 582
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 44,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 12581,11754,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 440,122,0| Number of FF evals: 4065
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;II)V: I11 Branch 285 IF_ACMPNE L202 - false: 19,0,0| Number of FF evals: 177
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 179,0,0| Number of FF evals: 671
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 44023,38401,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 132,0,0| Number of FF evals: 95
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 1879,1563,34| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 44023,38401,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 132,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 44023,38401,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 44023,38401,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 6186,4253,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 820,0,0| Number of FF evals: 1448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 1966,0,0| Number of FF evals: 935
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 44023,38401,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 44,0,0| Number of FF evals: 92
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 44023,38401,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 495,0,0| Number of FF evals: 638
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 1966,0,0| Number of FF evals: 935
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 1966,0,0| Number of FF evals: 935
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 10356,9317,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 1133,0,0| Number of FF evals: 459
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 44,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 1966,0,0| Number of FF evals: 935
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 1473,0,0| Number of FF evals: 634
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 7397,5996,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 7397,5996,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 8522,7258,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 13438,5001,0| Number of FF evals: 3184
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 8761,7368,110| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 44,0,0| Number of FF evals: 87
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 495,0,0| Number of FF evals: 252
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 852,0,0| Number of FF evals: 1572
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 495,0,0| Number of FF evals: 252
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 44,0,0| Number of FF evals: 368
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 8605,4636,4| Number of FF evals: 4836
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 11616,9237,0| Number of FF evals: 12239
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 33857,31326,30| Number of FF evals: 15621
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 1688,0,0| Number of FF evals: 625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 396,0,0| Number of FF evals: 962
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 223,0,0| Number of FF evals: 476
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 8014,6562,1447| Number of FF evals: 15622
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 42505,33891,0| Number of FF evals: 9778
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 4157,0,0| Number of FF evals: 1170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 2298,0,0| Number of FF evals: 1274
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 5817,4365,1089| Number of FF evals: 9238
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 12853,11590,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 14217,11554,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 1688,0,0| Number of FF evals: 608
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 15019,11816,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 396,0,0| Number of FF evals: 508
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 1095,439,0| Number of FF evals: 4983
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 44,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 604,0,0| Number of FF evals: 688
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 44,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 4084,3039,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 540,0,0| Number of FF evals: 335
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 132,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 8572,5874,0| Number of FF evals: 11228
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 1991,0,0| Number of FF evals: 995
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 6549,0,0| Number of FF evals: 2055
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 2524,1198,323| Number of FF evals: 5958
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 396,0,0| Number of FF evals: 216
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 102,0,0| Number of FF evals: 230
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 12647,10795,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 2105,1835,180| Number of FF evals: 15626
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 6549,0,0| Number of FF evals: 1726
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 5987,2342,0| Number of FF evals: 3380
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 122,0,0| Number of FF evals: 513
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 427,0,0| Number of FF evals: 666
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 19554,12325,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - true: 12,0,0| Number of FF evals: 1051
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 22680,15244,0| Number of FF evals: 14433
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 6186,0,0| Number of FF evals: 2106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 366,0,0| Number of FF evals: 437
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setType(I)V: root-Branch: 1268,0,0| Number of FF evals: 505
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 604,0,0| Number of FF evals: 431
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 44,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 15780,12691,0| Number of FF evals: 15627
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 4084,3039,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 1840,0,0| Number of FF evals: 647
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 44,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 8078,6602,0| Number of FF evals: 6847
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 15780,12691,0| Number of FF evals: 15627
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 223,0,0| Number of FF evals: 181
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 22371,21565,2| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 396,0,0| Number of FF evals: 238
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 1968,0,0| Number of FF evals: 1109
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 5817,4365,1096| Number of FF evals: 9238
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 44,0,0| Number of FF evals: 53
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 3530,3168,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 24,0,0| Number of FF evals: 164
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 44,0,0| Number of FF evals: 53
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 22724,19456,0| Number of FF evals: 14010
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 66162,57548,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 44,0,0| Number of FF evals: 53
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 1549,0,0| Number of FF evals: 989
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 132,0,0| Number of FF evals: 110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 132,0,0| Number of FF evals: 110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 4,0,0| Number of FF evals: 94
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 132,0,0| Number of FF evals: 110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 132,0,0| Number of FF evals: 110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1818: 396,0,0| Number of FF evals: 234
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 132,0,0| Number of FF evals: 95
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 132,0,0| Number of FF evals: 95
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 132,0,0| Number of FF evals: 110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1813: 396,0,0| Number of FF evals: 234
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 11923,7100,0| Number of FF evals: 7485
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 1840,0,0| Number of FF evals: 691
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 659,343,0| Number of FF evals: 6054
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1809: 396,0,0| Number of FF evals: 234
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 66162,57725,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 1991,1616,50| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 13896,10628,0| Number of FF evals: 9128
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 50,0,0| Number of FF evals: 359
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 3981,2958,0| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 66162,57548,47143| Number of FF evals: 15620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 5574,5267,0| Number of FF evals: 15581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 118,0,0| Number of FF evals: 391
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 1688,0,0| Number of FF evals: 626
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 725,0,0| Number of FF evals: 337
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 44,0,0| Number of FF evals: 270
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setCharno(I)V: Line 1173: 1133,0,0| Number of FF evals: 451
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setCharno(I)V: Line 1172: 1133,0,0| Number of FF evals: 451
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 132,0,0| Number of FF evals: 579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 1994,0,0| Number of FF evals: 914
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 30,0,0| Number of FF evals: 159
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 485,0,0| Number of FF evals: 602
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 1688,0,0| Number of FF evals: 654
* Search finished after 606s and 365 generations, 199446 statements, best individual has fitness: 2945.0
* Minimizing test suite
[MASTER] 13:14:57.320 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 795
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 597
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 100
* Number of covered goals: 100
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 85%
* Total number of goals: 530
* Number of covered goals: 448
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 48%
* Total number of goals: 4536
* Number of covered goals: 2181
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 77%
* Total number of goals: 714
* Number of covered goals: 553
* Generated 689 tests with total length 11476
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 13:16:11.640 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7472333333333333% of time used, but only 39/689 tests minimized), falling back to using all assertions
[MASTER] 13:16:26.880 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 13:16:39.600 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 12 seconds more than allowed.
[MASTER] 13:16:45.120 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_46_1628255804926/com/google/javascript/rhino/Node_46_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_46_1628255804926/com/google/javascript/rhino/Node_46_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:45.121 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:45.121 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:45.125 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1047
[MASTER] 13:16:45.127 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_46_1628255804926/com/google/javascript/rhino/Node_46_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:44 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.util.Set;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_46_tmp__ESTest extends Node_46_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString(262144, "", 262144, 262144);
23:       assertFalse(node0.isCast());
24:       assertFalse(node0.isLabelName());
25:       assertFalse(node0.isGetElem());
26:       assertFalse(node0.hasOneChild());
27:       assertFalse(node0.isScript());
28:       assertFalse(node0.isNumber());
29:       assertFalse(node0.isNot());
30:       assertFalse(node0.isOr());
31:       assertEquals(1073745919, node0.getSourcePosition());
32:       assertFalse(node0.hasMoreThanOneChild());
33:       assertFalse(node0.isObjectLit());
34:       assertFalse(node0.isInstanceOf());
35:       assertFalse(node0.isGetProp());
36:       assertFalse(node0.isThis());
37:       assertFalse(node0.isTypeOf());
38:       assertFalse(node0.isExprResult());
39:       assertFalse(node0.isWhile());
40:       assertFalse(node0.isWith());
41:       assertFalse(node0.isAssign());
42:       assertFalse(node0.isReturn());
43:       assertFalse(node0.isBlock());
44:       assertFalse(node0.hasChildren());
45:       assertFalse(node0.isComma());
46:       assertFalse(node0.isDec());
47:       assertFalse(node0.isVar());
48:       assertFalse(node0.isHook());
49:       assertEquals(262144, node0.getType());
50:       assertFalse(node0.isCall());
51:       assertFalse(node0.isStringKey());
52:       assertFalse(node0.isAdd());
53:       assertFalse(node0.isName());
54:       assertFalse(node0.isBreak());
55:       assertFalse(node0.isNew());
56:       assertFalse(node0.isSwitch());
57:       assertEquals(4095, node0.getCharno());
58:       assertFalse(node0.isNull());
59:       assertFalse(node0.isParamList());
60:       assertFalse(node0.isDo());
61:       assertFalse(node0.isAssignAdd());
62:       assertFalse(node0.isDefaultCase());
63:       assertFalse(node0.isLabel());
64:       assertEquals(0, node0.getChildCount());
65:       assertFalse(node0.isTry());
66:       assertFalse(node0.isEmpty());
67:       assertFalse(node0.isDelProp());
68:       assertFalse(node0.isVoid());
69:       assertFalse(node0.isArrayLit());
70:       assertFalse(node0.isNE());
71:       assertFalse(node0.isTrue());
72:       assertFalse(node0.isIf());
73:       assertFalse(node0.isGetterDef());
74:       assertFalse(node0.isDebugger());
75:       assertFalse(node0.isCatch());
76:       assertFalse(node0.isCase());
77:       assertFalse(node0.isRegExp());
78:       assertFalse(node0.isFor());
79:       assertFalse(node0.isThrow());
80:       assertFalse(node0.isInc());
81:       assertFalse(node0.isSetterDef());
82:       assertFalse(node0.isString());
83:       assertEquals(262144, node0.getLineno());
84:       assertFalse(node0.isIn());
85:       assertFalse(node0.isAnd());
86:       assertFalse(node0.isContinue());
87:       assertFalse(node0.isFunction());
88:       assertFalse(node0.isFalse());
89:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
90:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
91:       assertEquals(47, Node.IS_DISPATCHER);
92:       assertEquals(43, Node.IS_CONSTANT_NAME);
93:       assertEquals(56, Node.CHANGE_TIME);
94:       assertEquals(2, Node.POST_FLAG);
95:       assertEquals(37, Node.OPT_ARG_NAME);
96:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
97:       assertEquals(57, Node.LAST_PROP);
98:       assertEquals(36, Node.QUOTED_PROP);
99:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
100:       assertEquals(8, Node.FLAG_NO_THROWS);
101:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
102:       assertEquals(55, Node.INFERRED_FUNCTION);
103:       assertEquals(29, Node.JSDOC_INFO_PROP);
104:       assertEquals(15, Node.NO_SIDE_EFFECTS);
105:       assertEquals(39, Node.EMPTY_BLOCK);
106:       assertEquals(53, Node.INPUT_ID);
107:       assertEquals(52, Node.LENGTH);
108:       assertEquals(54, Node.SLASH_V);
109:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
110:       assertEquals(57, Node.REFLECTED_OBJECT);
111:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
112:       assertEquals(30, Node.VAR_ARGS_NAME);
113:       assertEquals(49, Node.DIRECT_EVAL);
114:       assertEquals(48, Node.DIRECTIVES);
115:       assertEquals(40, Node.ORIGINALNAME_PROP);
116:       assertEquals(32, Node.INCRDECR_PROP);
117:       assertEquals(46, Node.IS_NAMESPACE);
118:       assertEquals(51, Node.STATIC_SOURCE_FILE);
119:       assertEquals(4095, Node.COLUMN_MASK);
120:       assertEquals(12, Node.COLUMN_BITS);
121:       assertEquals(50, Node.FREE_CALL);
122:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
123:       assertEquals(1, Node.DECR_FLAG);
124:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
125:       assertNotNull(node0);
126:       
127:       Node node1 = Node.newNumber((-1001.0325130455363), 0, 38);
128:       assertFalse(node1.isCast());
129:       assertFalse(node1.isExprResult());
130:       assertFalse(node1.hasOneChild());
131:       assertFalse(node1.isLabelName());
132:       assertFalse(node1.isScript());
133:       assertFalse(node1.isObjectLit());
134:       assertFalse(node1.isNot());
135:       assertFalse(node1.isOr());
136:       assertFalse(node1.isReturn());
137:       assertFalse(node1.isInstanceOf());
138:       assertFalse(node1.isGetProp());
139:       assertFalse(node1.isWhile());
140:       assertFalse(node1.isBreak());
141:       assertFalse(node1.isWith());
142:       assertEquals(39, node1.getType());
143:       assertFalse(node1.hasChildren());
144:       assertFalse(node1.isGetElem());
145:       assertFalse(node1.isComma());
146:       assertFalse(node1.isThis());
147:       assertFalse(node1.hasMoreThanOneChild());
148:       assertFalse(node1.isTypeOf());
149:       assertFalse(node1.isDec());
150:       assertFalse(node1.isAssign());
151:       assertFalse(node1.isInc());
152:       assertFalse(node1.isString());
153:       assertFalse(node1.isIn());
154:       assertEquals(0, node1.getLineno());
155:       assertFalse(node1.isSetterDef());
156:       assertFalse(node1.isAnd());
157:       assertEquals(38, node1.getCharno());
158:       assertFalse(node1.isThrow());
159:       assertFalse(node1.isFunction());
160:       assertFalse(node1.isContinue());
161:       assertFalse(node1.isFalse());
162:       assertFalse(node1.isArrayLit());
163:       assertFalse(node1.isTry());
164:       assertEquals(38, node1.getSourcePosition());
165:       assertFalse(node1.isVoid());
166:       assertFalse(node1.isIf());
167:       assertFalse(node1.isNE());
168:       assertFalse(node1.isEmpty());
169:       assertFalse(node1.isDebugger());
170:       assertFalse(node1.isTrue());
171:       assertFalse(node1.isGetterDef());
172:       assertTrue(node1.isNumber());
173:       assertFalse(node1.isCatch());
174:       assertFalse(node1.isCase());
175:       assertFalse(node1.isDelProp());
176:       assertFalse(node1.isFor());
177:       assertFalse(node1.isRegExp());
178:       assertFalse(node1.isHook());
179:       assertFalse(node1.isBlock());
180:       assertFalse(node1.isAdd());
181:       assertFalse(node1.isVar());
182:       assertFalse(node1.isCall());
183:       assertFalse(node1.isSwitch());
184:       assertFalse(node1.isName());
185:       assertFalse(node1.isNew());
186:       assertFalse(node1.isStringKey());
187:       assertFalse(node1.isNull());
188:       assertFalse(node1.isAssignAdd());
189:       assertFalse(node1.isLabel());
190:       assertFalse(node1.isParamList());
191:       assertFalse(node1.isDo());
192:       assertFalse(node1.isDefaultCase());
193:       assertEquals(0, node1.getChildCount());
194:       assertEquals(53, Node.INPUT_ID);
195:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
196:       assertEquals(43, Node.IS_CONSTANT_NAME);
197:       assertEquals(36, Node.QUOTED_PROP);
198:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
199:       assertEquals(4095, Node.COLUMN_MASK);
200:       assertEquals(37, Node.OPT_ARG_NAME);
201:       assertEquals(48, Node.DIRECTIVES);
202:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
203:       assertEquals(8, Node.FLAG_NO_THROWS);
204:       assertEquals(56, Node.CHANGE_TIME);
205:       assertEquals(47, Node.IS_DISPATCHER);
206:       assertEquals(2, Node.POST_FLAG);
207:       assertEquals(29, Node.JSDOC_INFO_PROP);
208:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
209:       assertEquals(55, Node.INFERRED_FUNCTION);
210:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
211:       assertEquals(57, Node.LAST_PROP);
212:       assertEquals(15, Node.NO_SIDE_EFFECTS);
213:       assertEquals(39, Node.EMPTY_BLOCK);
214:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
215:       assertEquals(54, Node.SLASH_V);
216:       assertEquals(52, Node.LENGTH);
217:       assertEquals(57, Node.REFLECTED_OBJECT);
218:       assertEquals(30, Node.VAR_ARGS_NAME);
219:       assertEquals(49, Node.DIRECT_EVAL);
220:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
221:       assertEquals(40, Node.ORIGINALNAME_PROP);
222:       assertEquals(51, Node.STATIC_SOURCE_FILE);
223:       assertEquals(12, Node.COLUMN_BITS);
224:       assertEquals(46, Node.IS_NAMESPACE);
225:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
226:       assertEquals(1, Node.DECR_FLAG);
227:       assertEquals(50, Node.FREE_CALL);
228:       assertEquals(32, Node.INCRDECR_PROP);
229:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
230:       assertNotNull(node1);
231:       assertFalse(node1.equals((Object)node0));
232:       
233:       node1.setOptionalArg(false);
234:       assertFalse(node1.isCast());
235:       assertFalse(node1.isExprResult());
236:       assertFalse(node1.hasOneChild());
237:       assertFalse(node1.isLabelName());
238:       assertFalse(node1.isScript());
239:       assertFalse(node1.isObjectLit());
240:       assertFalse(node1.isNot());
241:       assertFalse(node1.isOr());
242:       assertFalse(node1.isReturn());
243:       assertFalse(node1.isInstanceOf());
244:       assertFalse(node1.isGetProp());
245:       assertFalse(node1.isWhile());
246:       assertFalse(node1.isBreak());
247:       assertFalse(node1.isWith());
248:       assertEquals(39, node1.getType());
249:       assertFalse(node1.hasChildren());
250:       assertFalse(node1.isGetElem());
251:       assertFalse(node1.isComma());
252:       assertFalse(node1.isThis());
253:       assertFalse(node1.hasMoreThanOneChild());
254:       assertFalse(node1.isTypeOf());
255:       assertFalse(node1.isDec());
256:       assertFalse(node1.isAssign());
257:       assertFalse(node1.isInc());
258:       assertFalse(node1.isString());
259:       assertFalse(node1.isIn());
260:       assertEquals(0, node1.getLineno());
261:       assertFalse(node1.isSetterDef());
262:       assertFalse(node1.isAnd());
263:       assertEquals(38, node1.getCharno());
264:       assertFalse(node1.isThrow());
265:       assertFalse(node1.isFunction());
266:       assertFalse(node1.isContinue());
267:       assertFalse(node1.isFalse());
268:       assertFalse(node1.isArrayLit());
269:       assertFalse(node1.isTry());
270:       assertEquals(38, node1.getSourcePosition());
271:       assertFalse(node1.isVoid());
272:       assertFalse(node1.isIf());
273:       assertFalse(node1.isNE());
274:       assertFalse(node1.isEmpty());
275:       assertFalse(node1.isDebugger());
276:       assertFalse(node1.isTrue());
277:       assertFalse(node1.isGetterDef());
278:       assertTrue(node1.isNumber());
279:       assertFalse(node1.isCatch());
280:       assertFalse(node1.isCase());
281:       assertFalse(node1.isDelProp());
282:       assertFalse(node1.isFor());
283:       assertFalse(node1.isRegExp());
284:       assertFalse(node1.isHook());
285:       assertFalse(node1.isBlock());
286:       assertFalse(node1.isAdd());
287:       assertFalse(node1.isVar());
288:       assertFalse(node1.isCall());
289:       assertFalse(node1.isSwitch());
290:       assertFalse(node1.isName());
291:       assertFalse(node1.isNew());
292:       assertFalse(node1.isStringKey());
293:       assertFalse(node1.isNull());
294:       assertFalse(node1.isAssignAdd());
295:       assertFalse(node1.isLabel());
296:       assertFalse(node1.isParamList());
297:       assertFalse(node1.isDo());
298:       assertFalse(node1.isDefaultCase());
299:       assertEquals(0, node1.getChildCount());
300:       assertEquals(53, Node.INPUT_ID);
301:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
302:       assertEquals(43, Node.IS_CONSTANT_NAME);
303:       assertEquals(36, Node.QUOTED_PROP);
304:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
305:       assertEquals(4095, Node.COLUMN_MASK);
306:       assertEquals(37, Node.OPT_ARG_NAME);
307:       assertEquals(48, Node.DIRECTIVES);
308:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
309:       assertEquals(8, Node.FLAG_NO_THROWS);
310:       assertEquals(56, Node.CHANGE_TIME);
311:       assertEquals(47, Node.IS_DISPATCHER);
312:       assertEquals(2, Node.POST_FLAG);
313:       assertEquals(29, Node.JSDOC_INFO_PROP);
314:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
315:       assertEquals(55, Node.INFERRED_FUNCTION);
316:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
317:       assertEquals(57, Node.LAST_PROP);
318:       assertEquals(15, Node.NO_SIDE_EFFECTS);
319:       assertEquals(39, Node.EMPTY_BLOCK);
320:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
321:       assertEquals(54, Node.SLASH_V);
322:       assertEquals(52, Node.LENGTH);
323:       assertEquals(57, Node.REFLECTED_OBJECT);
324:       assertEquals(30, Node.VAR_ARGS_NAME);
325:       assertEquals(49, Node.DIRECT_EVAL);
326:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
327:       assertEquals(40, Node.ORIGINALNAME_PROP);
328:       assertEquals(51, Node.STATIC_SOURCE_FILE);
329:       assertEquals(12, Node.COLUMN_BITS);
330:       assertEquals(46, Node.IS_NAMESPACE);
331:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
332:       assertEquals(1, Node.DECR_FLAG);
333:       assertEquals(50, Node.FREE_CALL);
334:       assertEquals(32, Node.INCRDECR_PROP);
335:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
336:       assertFalse(node1.equals((Object)node0));
337:       
338:       Node node2 = node0.srcrefTree(node1);
339:       assertSame(node0, node2);
340:       assertSame(node2, node0);
341:       assertFalse(node0.isCast());
342:       assertFalse(node0.isLabelName());
343:       assertFalse(node0.isGetElem());
344:       assertFalse(node0.hasOneChild());
345:       assertFalse(node0.isScript());
346:       assertFalse(node0.isNumber());
347:       assertFalse(node0.isNot());
348:       assertFalse(node0.isOr());
349:       assertFalse(node0.hasMoreThanOneChild());
350:       assertFalse(node0.isObjectLit());
351:       assertFalse(node0.isInstanceOf());
352:       assertFalse(node0.isGetProp());
353:       assertFalse(node0.isThis());
354:       assertFalse(node0.isTypeOf());
355:       assertFalse(node0.isExprResult());
356:       assertFalse(node0.isWhile());
357:       assertFalse(node0.isWith());
358:       assertFalse(node0.isAssign());
359:       assertFalse(node0.isReturn());
360:       assertFalse(node0.isBlock());
361:       assertFalse(node0.hasChildren());
362:       assertFalse(node0.isComma());
363:       assertFalse(node0.isDec());
364:       assertFalse(node0.isVar());
365:       assertFalse(node0.isHook());
366:       assertEquals(262144, node0.getType());
367:       assertFalse(node0.isCall());
368:       assertFalse(node0.isStringKey());
369:       assertFalse(node0.isAdd());
370:       assertFalse(node0.isName());
371:       assertFalse(node0.isBreak());
372:       assertFalse(node0.isNew());
373:       assertFalse(node0.isSwitch());
374:       assertFalse(node0.isNull());
375:       assertFalse(node0.isParamList());
376:       assertFalse(node0.isDo());
377:       assertFalse(node0.isAssignAdd());
378:       assertFalse(node0.isDefaultCase());
379:       assertFalse(node0.isLabel());
380:       assertEquals(0, node0.getChildCount());
381:       assertEquals(38, node0.getSourcePosition());
382:       assertFalse(node0.isTry());
383:       assertFalse(node0.isEmpty());
384:       assertFalse(node0.isDelProp());
385:       assertFalse(node0.isVoid());
386:       assertFalse(node0.isArrayLit());
387:       assertFalse(node0.isNE());
388:       assertFalse(node0.isTrue());
389:       assertFalse(node0.isIf());
390:       assertFalse(node0.isGetterDef());
391:       assertFalse(node0.isDebugger());
392:       assertFalse(node0.isCatch());
393:       assertFalse(node0.isCase());
394:       assertFalse(node0.isRegExp());
395:       assertFalse(node0.isFor());
396:       assertFalse(node0.isThrow());
397:       assertFalse(node0.isInc());
398:       assertFalse(node0.isSetterDef());
399:       assertFalse(node0.isString());
400:       assertFalse(node0.isIn());
401:       assertFalse(node0.isAnd());
402:       assertFalse(node0.isContinue());
403:       assertEquals(0, node0.getLineno());
404:       assertEquals(38, node0.getCharno());
405:       assertFalse(node0.isFunction());
406:       assertFalse(node0.isFalse());
407:       assertFalse(node1.isCast());
408:       assertFalse(node1.isExprResult());
409:       assertFalse(node1.hasOneChild());
410:       assertFalse(node1.isLabelName());
411:       assertFalse(node1.isScript());
412:       assertFalse(node1.isObjectLit());
413:       assertFalse(node1.isNot());
414:       assertFalse(node1.isOr());
415:       assertFalse(node1.isReturn());
416:       assertFalse(node1.isInstanceOf());
417:       assertFalse(node1.isGetProp());
418:       assertFalse(node1.isWhile());
419:       assertFalse(node1.isBreak());
420:       assertFalse(node1.isWith());
421:       assertEquals(39, node1.getType());
422:       assertFalse(node1.hasChildren());
423:       assertFalse(node1.isGetElem());
424:       assertFalse(node1.isComma());
425:       assertFalse(node1.isThis());
426:       assertFalse(node1.hasMoreThanOneChild());
427:       assertFalse(node1.isTypeOf());
428:       assertFalse(node1.isDec());
429:       assertFalse(node1.isAssign());
430:       assertFalse(node1.isInc());
431:       assertFalse(node1.isString());
432:       assertFalse(node1.isIn());
433:       assertEquals(0, node1.getLineno());
434:       assertFalse(node1.isSetterDef());
435:       assertFalse(node1.isAnd());
436:       assertEquals(38, node1.getCharno());
437:       assertFalse(node1.isThrow());
438:       assertFalse(node1.isFunction());
439:       assertFalse(node1.isContinue());
440:       assertFalse(node1.isFalse());
441:       assertFalse(node1.isArrayLit());
442:       assertFalse(node1.isTry());
443:       assertEquals(38, node1.getSourcePosition());
444:       assertFalse(node1.isVoid());
445:       assertFalse(node1.isIf());
446:       assertFalse(node1.isNE());
447:       assertFalse(node1.isEmpty());
448:       assertFalse(node1.isDebugger());
449:       assertFalse(node1.isTrue());
450:       assertFalse(node1.isGetterDef());
451:       assertTrue(node1.isNumber());
452:       assertFalse(node1.isCatch());
453:       assertFalse(node1.isCase());
454:       assertFalse(node1.isDelProp());
455:       assertFalse(node1.isFor());
456:       assertFalse(node1.isRegExp());
457:       assertFalse(node1.isHook());
458:       assertFalse(node1.isBlock());
459:       assertFalse(node1.isAdd());
460:       assertFalse(node1.isVar());
461:       assertFalse(node1.isCall());
462:       assertFalse(node1.isSwitch());
463:       assertFalse(node1.isName());
464:       assertFalse(node1.isNew());
465:       assertFalse(node1.isStringKey());
466:       assertFalse(node1.isNull());
467:       assertFalse(node1.isAssignAdd());
468:       assertFalse(node1.isLabel());
469:       assertFalse(node1.isParamList());
470:       assertFalse(node1.isDo());
471:       assertFalse(node1.isDefaultCase());
472:       assertEquals(0, node1.getChildCount());
473:       assertFalse(node2.isRegExp());
474:       assertFalse(node2.isDebugger());
475:       assertFalse(node2.isTrue());
476:       assertFalse(node2.isFunction());
477:       assertFalse(node2.isArrayLit());
478:       assertFalse(node2.isCatch());
479:       assertEquals(38, node2.getSourcePosition());
480:       assertEquals(0, node2.getLineno());
481:       assertFalse(node2.isDelProp());
482:       assertFalse(node2.isParamList());
483:       assertFalse(node2.isVoid());
484:       assertFalse(node2.isIf());
485:       assertFalse(node2.isNull());
486:       assertFalse(node2.isNE());
487:       assertFalse(node2.isSetterDef());
488:       assertFalse(node2.isEmpty());
489:       assertFalse(node2.isIn());
490:       assertEquals(0, node2.getChildCount());
491:       assertFalse(node2.isVar());
492:       assertFalse(node2.isNew());
493:       assertFalse(node2.isDefaultCase());
494:       assertFalse(node2.isInc());
495:       assertFalse(node2.hasMoreThanOneChild());
496:       assertFalse(node2.isStringKey());
497:       assertFalse(node2.isSwitch());
498:       assertFalse(node2.isThis());
499:       assertFalse(node2.isGetterDef());
500:       assertFalse(node2.isNumber());
501:       assertFalse(node2.hasOneChild());
502:       assertFalse(node2.isHook());
503:       assertFalse(node2.isCase());
504:       assertFalse(node2.isFor());
505:       assertFalse(node2.isBlock());
506:       assertFalse(node2.isTry());
507:       assertFalse(node2.isScript());
508:       assertFalse(node2.isExprResult());
509:       assertFalse(node2.isNot());
510:       assertFalse(node2.isObjectLit());
511:       assertFalse(node2.isWith());
512:       assertFalse(node2.isInstanceOf());
513:       assertFalse(node2.isCast());
514:       assertFalse(node2.isLabelName());
515:       assertFalse(node2.isAnd());
516:       assertFalse(node2.isLabel());
517:       assertFalse(node2.isOr());
518:       assertFalse(node2.isFalse());
519:       assertFalse(node2.isThrow());
520:       assertFalse(node2.isDo());
521:       assertFalse(node2.isAssignAdd());
522:       assertFalse(node2.isAdd());
523:       assertFalse(node2.isString());
524:       assertFalse(node2.isContinue());
525:       assertFalse(node2.isCall());
526:       assertFalse(node2.isName());
527:       assertEquals(38, node2.getCharno());
528:       assertFalse(node2.isTypeOf());
529:       assertFalse(node2.isComma());
530:       assertFalse(node2.isDec());
531:       assertFalse(node2.isBreak());
532:       assertFalse(node2.isGetProp());
533:       assertFalse(node2.hasChildren());
534:       assertFalse(node2.isGetElem());
535:       assertFalse(node2.isAssign());
536:       assertEquals(262144, node2.getType());
537:       assertFalse(node2.isReturn());
538:       assertFalse(node2.isWhile());
539:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
540:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
541:       assertEquals(47, Node.IS_DISPATCHER);
542:       assertEquals(43, Node.IS_CONSTANT_NAME);
543:       assertEquals(56, Node.CHANGE_TIME);
544:       assertEquals(2, Node.POST_FLAG);
545:       assertEquals(37, Node.OPT_ARG_NAME);
546:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
547:       assertEquals(57, Node.LAST_PROP);
548:       assertEquals(36, Node.QUOTED_PROP);
549:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
550:       assertEquals(8, Node.FLAG_NO_THROWS);
551:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
552:       assertEquals(55, Node.INFERRED_FUNCTION);
553:       assertEquals(29, Node.JSDOC_INFO_PROP);
554:       assertEquals(15, Node.NO_SIDE_EFFECTS);
555:       assertEquals(39, Node.EMPTY_BLOCK);
556:       assertEquals(53, Node.INPUT_ID);
557:       assertEquals(52, Node.LENGTH);
558:       assertEquals(54, Node.SLASH_V);
559:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
560:       assertEquals(57, Node.REFLECTED_OBJECT);
561:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
562:       assertEquals(30, Node.VAR_ARGS_NAME);
563:       assertEquals(49, Node.DIRECT_EVAL);
564:       assertEquals(48, Node.DIRECTIVES);
565:       assertEquals(40, Node.ORIGINALNAME_PROP);
566:       assertEquals(32, Node.INCRDECR_PROP);
567:       assertEquals(46, Node.IS_NAMESPACE);
568:       assertEquals(51, Node.STATIC_SOURCE_FILE);
569:       assertEquals(4095, Node.COLUMN_MASK);
570:       assertEquals(12, Node.COLUMN_BITS);
571:       assertEquals(50, Node.FREE_CALL);
572:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
573:       assertEquals(1, Node.DECR_FLAG);
574:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
575:       assertEquals(53, Node.INPUT_ID);
576:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
577:       assertEquals(43, Node.IS_CONSTANT_NAME);
578:       assertEquals(36, Node.QUOTED_PROP);
579:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
580:       assertEquals(4095, Node.COLUMN_MASK);
581:       assertEquals(37, Node.OPT_ARG_NAME);
582:       assertEquals(48, Node.DIRECTIVES);
583:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
584:       assertEquals(8, Node.FLAG_NO_THROWS);
585:       assertEquals(56, Node.CHANGE_TIME);
586:       assertEquals(47, Node.IS_DISPATCHER);
587:       assertEquals(2, Node.POST_FLAG);
588:       assertEquals(29, Node.JSDOC_INFO_PROP);
589:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
590:       assertEquals(55, Node.INFERRED_FUNCTION);
591:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
592:       assertEquals(57, Node.LAST_PROP);
593:       assertEquals(15, Node.NO_SIDE_EFFECTS);
594:       assertEquals(39, Node.EMPTY_BLOCK);
595:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
596:       assertEquals(54, Node.SLASH_V);
597:       assertEquals(52, Node.LENGTH);
598:       assertEquals(57, Node.REFLECTED_OBJECT);
599:       assertEquals(30, Node.VAR_ARGS_NAME);
600:       assertEquals(49, Node.DIRECT_EVAL);
601:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
602:       assertEquals(40, Node.ORIGINALNAME_PROP);
603:       assertEquals(51, Node.STATIC_SOURCE_FILE);
604:       assertEquals(12, Node.COLUMN_BITS);
605:       assertEquals(46, Node.IS_NAMESPACE);
606:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
607:       assertEquals(1, Node.DECR_FLAG);
608:       assertEquals(50, Node.FREE_CALL);
609:       assertEquals(32, Node.INCRDECR_PROP);
610:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
611:       assertEquals(43, Node.IS_CONSTANT_NAME);
612:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
613:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
614:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
615:       assertEquals(4095, Node.COLUMN_MASK);
616:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
617:       assertEquals(40, Node.ORIGINALNAME_PROP);
618:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
619:       assertEquals(46, Node.IS_NAMESPACE);
620:       assertEquals(54, Node.SLASH_V);
621:       assertEquals(51, Node.STATIC_SOURCE_FILE);
622:       assertEquals(50, Node.FREE_CALL);
623:       assertEquals(15, Node.NO_SIDE_EFFECTS);
624:       assertEquals(57, Node.LAST_PROP);
625:       assertEquals(49, Node.DIRECT_EVAL);
626:       assertEquals(1, Node.DECR_FLAG);
627:       assertEquals(32, Node.INCRDECR_PROP);
628:       assertEquals(12, Node.COLUMN_BITS);
629:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
630:       assertEquals(2, Node.POST_FLAG);
631:       assertEquals(30, Node.VAR_ARGS_NAME);
632:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
633:       assertEquals(47, Node.IS_DISPATCHER);
634:       assertEquals(56, Node.CHANGE_TIME);
635:       assertEquals(29, Node.JSDOC_INFO_PROP);
636:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
637:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
638:       assertEquals(37, Node.OPT_ARG_NAME);
639:       assertEquals(39, Node.EMPTY_BLOCK);
640:       assertEquals(48, Node.DIRECTIVES);
641:       assertEquals(52, Node.LENGTH);
642:       assertEquals(53, Node.INPUT_ID);
643:       assertEquals(57, Node.REFLECTED_OBJECT);
644:       assertEquals(55, Node.INFERRED_FUNCTION);
645:       assertEquals(8, Node.FLAG_NO_THROWS);
646:       assertEquals(36, Node.QUOTED_PROP);
647:       assertNotNull(node2);
648:       assertFalse(node0.equals((Object)node1));
649:       assertFalse(node1.equals((Object)node0));
650:       assertFalse(node2.equals((Object)node1));
651:       
652:       boolean boolean0 = node1.mayMutateGlobalStateOrThrow();
653:       assertTrue(boolean0);
654:       assertFalse(node1.isCast());
655:       assertFalse(node1.isExprResult());
656:       assertFalse(node1.hasOneChild());
657:       assertFalse(node1.isLabelName());
658:       assertFalse(node1.isScript());
659:       assertFalse(node1.isObjectLit());
660:       assertFalse(node1.isNot());
661:       assertFalse(node1.isOr());
662:       assertFalse(node1.isReturn());
663:       assertFalse(node1.isInstanceOf());
664:       assertFalse(node1.isGetProp());
665:       assertFalse(node1.isWhile());
666:       assertFalse(node1.isBreak());
667:       assertFalse(node1.isWith());
668:       assertEquals(39, node1.getType());
669:       assertFalse(node1.hasChildren());
670:       assertFalse(node1.isGetElem());
671:       assertFalse(node1.isComma());
672:       assertFalse(node1.isThis());
673:       assertFalse(node1.hasMoreThanOneChild());
674:       assertFalse(node1.isTypeOf());
675:       assertFalse(node1.isDec());
676:       assertFalse(node1.isAssign());
677:       assertFalse(node1.isInc());
678:       assertFalse(node1.isString());
679:       assertFalse(node1.isIn());
680:       assertEquals(0, node1.getLineno());
681:       assertFalse(node1.isSetterDef());
682:       assertFalse(node1.isAnd());
683:       assertEquals(38, node1.getCharno());
684:       assertFalse(node1.isThrow());
685:       assertFalse(node1.isFunction());
686:       assertFalse(node1.isContinue());
687:       assertFalse(node1.isFalse());
688:       assertFalse(node1.isArrayLit());
689:       assertFalse(node1.isTry());
690:       assertEquals(38, node1.getSourcePosition());
691:       assertFalse(node1.isVoid());
692:       assertFalse(node1.isIf());
693:       assertFalse(node1.isNE());
694:       assertFalse(node1.isEmpty());
695:       assertFalse(node1.isDebugger());
696:       assertFalse(node1.isTrue());
697:       assertFalse(node1.isGetterDef());
698:       assertTrue(node1.isNumber());
699:       assertFalse(node1.isCatch());
700:       assertFalse(node1.isCase());
701:       assertFalse(node1.isDelProp());
702:       assertFalse(node1.isFor());
703:       assertFalse(node1.isRegExp());
704:       assertFalse(node1.isHook());
705:       assertFalse(node1.isBlock());
706:       assertFalse(node1.isAdd());
707:       assertFalse(node1.isVar());
708:       assertFalse(node1.isCall());
709:       assertFalse(node1.isSwitch());
710:       assertFalse(node1.isName());
711:       assertFalse(node1.isNew());
712:       assertFalse(node1.isStringKey());
713:       assertFalse(node1.isNull());
714:       assertFalse(node1.isAssignAdd());
715:       assertFalse(node1.isLabel());
716:       assertFalse(node1.isParamList());
717:       assertFalse(node1.isDo());
718:       assertFalse(node1.isDefaultCase());
719:       assertEquals(0, node1.getChildCount());
720:       assertEquals(53, Node.INPUT_ID);
721:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
722:       assertEquals(43, Node.IS_CONSTANT_NAME);
723:       assertEquals(36, Node.QUOTED_PROP);
724:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
725:       assertEquals(4095, Node.COLUMN_MASK);
726:       assertEquals(37, Node.OPT_ARG_NAME);
727:       assertEquals(48, Node.DIRECTIVES);
728:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
729:       assertEquals(8, Node.FLAG_NO_THROWS);
730:       assertEquals(56, Node.CHANGE_TIME);
731:       assertEquals(47, Node.IS_DISPATCHER);
732:       assertEquals(2, Node.POST_FLAG);
733:       assertEquals(29, Node.JSDOC_INFO_PROP);
734:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
735:       assertEquals(55, Node.INFERRED_FUNCTION);
736:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
737:       assertEquals(57, Node.LAST_PROP);
738:       assertEquals(15, Node.NO_SIDE_EFFECTS);
739:       assertEquals(39, Node.EMPTY_BLOCK);
740:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
741:       assertEquals(54, Node.SLASH_V);
742:       assertEquals(52, Node.LENGTH);
743:       assertEquals(57, Node.REFLECTED_OBJECT);
744:       assertEquals(30, Node.VAR_ARGS_NAME);
745:       assertEquals(49, Node.DIRECT_EVAL);
746:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
747:       assertEquals(40, Node.ORIGINALNAME_PROP);
748:       assertEquals(51, Node.STATIC_SOURCE_FILE);
749:       assertEquals(12, Node.COLUMN_BITS);
750:       assertEquals(46, Node.IS_NAMESPACE);
751:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
752:       assertEquals(1, Node.DECR_FLAG);
753:       assertEquals(50, Node.FREE_CALL);
754:       assertEquals(32, Node.INCRDECR_PROP);
755:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
756:       assertFalse(node1.equals((Object)node2));
757:       assertFalse(node1.equals((Object)node0));
758:       
759:       boolean boolean1 = node1.isCall();
760:       assertFalse(boolean1);
761:       assertFalse(node1.isCast());
762:       assertFalse(node1.isExprResult());
763:       assertFalse(node1.hasOneChild());
764:       assertFalse(node1.isLabelName());
765:       assertFalse(node1.isScript());
766:       assertFalse(node1.isObjectLit());
767:       assertFalse(node1.isNot());
768:       assertFalse(node1.isOr());
769:       assertFalse(node1.isReturn());
770:       assertFalse(node1.isInstanceOf());
771:       assertFalse(node1.isGetProp());
772:       assertFalse(node1.isWhile());
773:       assertFalse(node1.isBreak());
774:       assertFalse(node1.isWith());
775:       assertEquals(39, node1.getType());
776:       assertFalse(node1.hasChildren());
777:       assertFalse(node1.isGetElem());
778:       assertFalse(node1.isComma());
779:       assertFalse(node1.isThis());
780:       assertFalse(node1.hasMoreThanOneChild());
781:       assertFalse(node1.isTypeOf());
782:       assertFalse(node1.isDec());
783:       assertFalse(node1.isAssign());
784:       assertFalse(node1.isInc());
785:       assertFalse(node1.isString());
786:       assertFalse(node1.isIn());
787:       assertEquals(0, node1.getLineno());
788:       assertFalse(node1.isSetterDef());
789:       assertFalse(node1.isAnd());
790:       assertEquals(38, node1.getCharno());
791:       assertFalse(node1.isThrow());
792:       assertFalse(node1.isFunction());
793:       assertFalse(node1.isContinue());
794:       assertFalse(node1.isFalse());
795:       assertFalse(node1.isArrayLit());
796:       assertFalse(node1.isTry());
797:       assertEquals(38, node1.getSourcePosition());
798:       assertFalse(node1.isVoid());
799:       assertFalse(node1.isIf());
800:       assertFalse(node1.isNE());
801:       assertFalse(node1.isEmpty());
802:       assertFalse(node1.isDebugger());
803:       assertFalse(node1.isTrue());
804:       assertFalse(node1.isGetterDef());
805:       assertTrue(node1.isNumber());
806:       assertFalse(node1.isCatch());
807:       assertFalse(node1.isCase());
808:       assertFalse(node1.isDelProp());
809:       assertFalse(node1.isFor());
810:       assertFalse(node1.isRegExp());
811:       assertFalse(node1.isHook());
812:       assertFalse(node1.isBlock());
813:       assertFalse(node1.isAdd());
814:       assertFalse(node1.isVar());
815:       assertFalse(node1.isCall());
816:       assertFalse(node1.isSwitch());
817:       assertFalse(node1.isName());
818:       assertFalse(node1.isNew());
819:       assertFalse(node1.isStringKey());
820:       assertFalse(node1.isNull());
821:       assertFalse(node1.isAssignAdd());
822:       assertFalse(node1.isLabel());
823:       assertFalse(node1.isParamList());
824:       assertFalse(node1.isDo());
825:       assertFalse(node1.isDefaultCase());
826:       assertEquals(0, node1.getChildCount());
827:       assertEquals(53, Node.INPUT_ID);
828:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
829:       assertEquals(43, Node.IS_CONSTANT_NAME);
830:       assertEquals(36, Node.QUOTED_PROP);
831:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
832:       assertEquals(4095, Node.COLUMN_MASK);
833:       assertEquals(37, Node.OPT_ARG_NAME);
834:       assertEquals(48, Node.DIRECTIVES);
835:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
836:       assertEquals(8, Node.FLAG_NO_THROWS);
837:       assertEquals(56, Node.CHANGE_TIME);
838:       assertEquals(47, Node.IS_DISPATCHER);
839:       assertEquals(2, Node.POST_FLAG);
840:       assertEquals(29, Node.JSDOC_INFO_PROP);
841:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
842:       assertEquals(55, Node.INFERRED_FUNCTION);
843:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
844:       assertEquals(57, Node.LAST_PROP);
845:       assertEquals(15, Node.NO_SIDE_EFFECTS);
846:       assertEquals(39, Node.EMPTY_BLOCK);
847:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
848:       assertEquals(54, Node.SLASH_V);
849:       assertEquals(52, Node.LENGTH);
850:       assertEquals(57, Node.REFLECTED_OBJECT);
851:       assertEquals(30, Node.VAR_ARGS_NAME);
852:       assertEquals(49, Node.DIRECT_EVAL);
853:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
854:       assertEquals(40, Node.ORIGINALNAME_PROP);
855:       assertEquals(51, Node.STATIC_SOURCE_FILE);
856:       assertEquals(12, Node.COLUMN_BITS);
857:       assertEquals(46, Node.IS_NAMESPACE);
858:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
859:       assertEquals(1, Node.DECR_FLAG);
860:       assertEquals(50, Node.FREE_CALL);
861:       assertEquals(32, Node.INCRDECR_PROP);
862:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
863:       assertFalse(node1.equals((Object)node2));
864:       assertFalse(node1.equals((Object)node0));
865:       assertFalse(boolean1 == boolean0);
866:       
867:       boolean boolean2 = node1.isCast();
868:       assertFalse(boolean2);
869:       assertFalse(node1.isCast());
870:       assertFalse(node1.isExprResult());
871:       assertFalse(node1.hasOneChild());
872:       assertFalse(node1.isLabelName());
873:       assertFalse(node1.isScript());
874:       assertFalse(node1.isObjectLit());
875:       assertFalse(node1.isNot());
876:       assertFalse(node1.isOr());
877:       assertFalse(node1.isReturn());
878:       assertFalse(node1.isInstanceOf());
879:       assertFalse(node1.isGetProp());
880:       assertFalse(node1.isWhile());
881:       assertFalse(node1.isBreak());
882:       assertFalse(node1.isWith());
883:       assertEquals(39, node1.getType());
884:       assertFalse(node1.hasChildren());
885:       assertFalse(node1.isGetElem());
886:       assertFalse(node1.isComma());
887:       assertFalse(node1.isThis());
888:       assertFalse(node1.hasMoreThanOneChild());
889:       assertFalse(node1.isTypeOf());
890:       assertFalse(node1.isDec());
891:       assertFalse(node1.isAssign());
892:       assertFalse(node1.isInc());
893:       assertFalse(node1.isString());
894:       assertFalse(node1.isIn());
895:       assertEquals(0, node1.getLineno());
896:       assertFalse(node1.isSetterDef());
897:       assertFalse(node1.isAnd());
898:       assertEquals(38, node1.getCharno());
899:       assertFalse(node1.isThrow());
900:       assertFalse(node1.isFunction());
901:       assertFalse(node1.isContinue());
902:       assertFalse(node1.isFalse());
903:       assertFalse(node1.isArrayLit());
904:       assertFalse(node1.isTry());
905:       assertEquals(38, node1.getSourcePosition());
906:       assertFalse(node1.isVoid());
907:       assertFalse(node1.isIf());
908:       assertFalse(node1.isNE());
909:       assertFalse(node1.isEmpty());
910:       assertFalse(node1.isDebugger());
911:       assertFalse(node1.isTrue());
912:       assertFalse(node1.isGetterDef());
913:       assertTrue(node1.isNumber());
914:       assertFalse(node1.isCatch());
915:       assertFalse(node1.isCase());
916:       assertFalse(node1.isDelProp());
917:       assertFalse(node1.isFor());
918:       assertFalse(node1.isRegExp());
919:       assertFalse(node1.isHook());
920:       assertFalse(node1.isBlock());
921:       assertFalse(node1.isAdd());
922:       assertFalse(node1.isVar());
923:       assertFalse(node1.isCall());
924:       assertFalse(node1.isSwitch());
925:       assertFalse(node1.isName());
926:       assertFalse(node1.isNew());
927:       assertFalse(node1.isStringKey());
928:       assertFalse(node1.isNull());
929:       assertFalse(node1.isAssignAdd());
930:       assertFalse(node1.isLabel());
931:       assertFalse(node1.isParamList());
932:       assertFalse(node1.isDo());
933:       assertFalse(node1.isDefaultCase());
934:       assertEquals(0, node1.getChildCount());
935:       assertEquals(53, Node.INPUT_ID);
936:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
937:       assertEquals(43, Node.IS_CONSTANT_NAME);
938:       assertEquals(36, Node.QUOTED_PROP);
939:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
940:       assertEquals(4095, Node.COLUMN_MASK);
941:       assertEquals(37, Node.OPT_ARG_NAME);
942:       assertEquals(48, Node.DIRECTIVES);
943:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
944:       assertEquals(8, Node.FLAG_NO_THROWS);
945:       assertEquals(56, Node.CHANGE_TIME);
946:       assertEquals(47, Node.IS_DISPATCHER);
947:       assertEquals(2, Node.POST_FLAG);
948:       assertEquals(29, Node.JSDOC_INFO_PROP);
949:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
950:       assertEquals(55, Node.INFERRED_FUNCTION);
951:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
952:       assertEquals(57, Node.LAST_PROP);
953:       assertEquals(15, Node.NO_SIDE_EFFECTS);
954:       assertEquals(39, Node.EMPTY_BLOCK);
955:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
956:       assertEquals(54, Node.SLASH_V);
957:       assertEquals(52, Node.LENGTH);
958:       assertEquals(57, Node.REFLECTED_OBJECT);
959:       assertEquals(30, Node.VAR_ARGS_NAME);
960:       assertEquals(49, Node.DIRECT_EVAL);
961:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
962:       assertEquals(40, Node.ORIGINALNAME_PROP);
963:       assertEquals(51, Node.STATIC_SOURCE_FILE);
964:       assertEquals(12, Node.COLUMN_BITS);
965:       assertEquals(46, Node.IS_NAMESPACE);
966:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
967:       assertEquals(1, Node.DECR_FLAG);
968:       assertEquals(50, Node.FREE_CALL);
969:       assertEquals(32, Node.INCRDECR_PROP);
970:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
971:       assertFalse(node1.equals((Object)node2));
972:       assertFalse(node1.equals((Object)node0));
973:       assertFalse(boolean2 == boolean0);
974:       assertTrue(boolean2 == boolean1);
975:       
976:       Object object0 = new Object();
977:       assertNotNull(object0);
978:       
979:       Iterable<Node> iterable0 = node0.children();
980:       assertSame(node0, node2);
981:       assertFalse(node0.isCast());
982:       assertFalse(node0.isLabelName());
983:       assertFalse(node0.isGetElem());
984:       assertFalse(node0.hasOneChild());
985:       assertFalse(node0.isScript());
986:       assertFalse(node0.isNumber());
987:       assertFalse(node0.isNot());
988:       assertFalse(node0.isOr());
989:       assertFalse(node0.hasMoreThanOneChild());
990:       assertFalse(node0.isObjectLit());
991:       assertFalse(node0.isInstanceOf());
992:       assertFalse(node0.isGetProp());
993:       assertFalse(node0.isThis());
994:       assertFalse(node0.isTypeOf());
995:       assertFalse(node0.isExprResult());
996:       assertFalse(node0.isWhile());
997:       assertFalse(node0.isWith());
998:       assertFalse(node0.isAssign());
999:       assertFalse(node0.isReturn());
1000:       assertFalse(node0.isBlock());
1001:       assertFalse(node0.hasChildren());
1002:       assertFalse(node0.isComma());
1003:       assertFalse(node0.isDec());
1004:       assertFalse(node0.isVar());
1005:       assertFalse(node0.isHook());
1006:       assertEquals(262144, node0.getType());
1007:       assertFalse(node0.isCall());
1008:       assertFalse(node0.isStringKey());
1009:       assertFalse(node0.isAdd());
1010:       assertFalse(node0.isName());
1011:       assertFalse(node0.isBreak());
1012:       assertFalse(node0.isNew());
1013:       assertFalse(node0.isSwitch());
1014:       assertFalse(node0.isNull());
1015:       assertFalse(node0.isParamList());
1016:       assertFalse(node0.isDo());
1017:       assertFalse(node0.isAssignAdd());
1018:       assertFalse(node0.isDefaultCase());
1019:       assertFalse(node0.isLabel());
1020:       assertEquals(0, node0.getChildCount());
1021:       assertEquals(38, node0.getSourcePosition());
1022:       assertFalse(node0.isTry());
1023:       assertFalse(node0.isEmpty());
1024:       assertFalse(node0.isDelProp());
1025:       assertFalse(node0.isVoid());
1026:       assertFalse(node0.isArrayLit());
1027:       assertFalse(node0.isNE());
1028:       assertFalse(node0.isTrue());
1029:       assertFalse(node0.isIf());
1030:       assertFalse(node0.isGetterDef());
1031:       assertFalse(node0.isDebugger());
1032:       assertFalse(node0.isCatch());
1033:       assertFalse(node0.isCase());
1034:       assertFalse(node0.isRegExp());
1035:       assertFalse(node0.isFor());
1036:       assertFalse(node0.isThrow());
1037:       assertFalse(node0.isInc());
1038:       assertFalse(node0.isSetterDef());
1039:       assertFalse(node0.isString());
1040:       assertFalse(node0.isIn());
1041:       assertFalse(node0.isAnd());
1042:       assertFalse(node0.isContinue());
1043:       assertEquals(0, node0.getLineno());
1044:       assertEquals(38, node0.getCharno());
1045:       assertFalse(node0.isFunction());
1046:       assertFalse(node0.isFalse());
1047:       assertFalse(iterable0.contains(node2));
1048:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1049:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1050:       assertEquals(47, Node.IS_DISPATCHER);
1051:       assertEquals(43, Node.IS_CONSTANT_NAME);
1052:       assertEquals(56, Node.CHANGE_TIME);
1053:       assertEquals(2, Node.POST_FLAG);
1054:       assertEquals(37, Node.OPT_ARG_NAME);
1055:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1056:       assertEquals(57, Node.LAST_PROP);
1057:       assertEquals(36, Node.QUOTED_PROP);
1058:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1059:       assertEquals(8, Node.FLAG_NO_THROWS);
1060:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1061:       assertEquals(55, Node.INFERRED_FUNCTION);
1062:       assertEquals(29, Node.JSDOC_INFO_PROP);
1063:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1064:       assertEquals(39, Node.EMPTY_BLOCK);
1065:       assertEquals(53, Node.INPUT_ID);
1066:       assertEquals(52, Node.LENGTH);
1067:       assertEquals(54, Node.SLASH_V);
1068:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1069:       assertEquals(57, Node.REFLECTED_OBJECT);
1070:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1071:       assertEquals(30, Node.VAR_ARGS_NAME);
1072:       assertEquals(49, Node.DIRECT_EVAL);
1073:       assertEquals(48, Node.DIRECTIVES);
1074:       assertEquals(40, Node.ORIGINALNAME_PROP);
1075:       assertEquals(32, Node.INCRDECR_PROP);
1076:       assertEquals(46, Node.IS_NAMESPACE);
1077:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1078:       assertEquals(4095, Node.COLUMN_MASK);
1079:       assertEquals(12, Node.COLUMN_BITS);
1080:       assertEquals(50, Node.FREE_CALL);
1081:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1082:       assertEquals(1, Node.DECR_FLAG);
1083:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1084:       assertNotNull(iterable0);
1085:       assertFalse(node0.equals((Object)node1));
1086:       
1087:       Set<String> set0 = node2.getDirectives();
1088:       assertSame(node0, node2);
1089:       assertSame(node2, node0);
1090:       assertFalse(node0.isCast());
1091:       assertFalse(node0.isLabelName());
1092:       assertFalse(node0.isGetElem());
1093:       assertFalse(node0.hasOneChild());
1094:       assertFalse(node0.isScript());
1095:       assertFalse(node0.isNumber());
1096:       assertFalse(node0.isNot());
1097:       assertFalse(node0.isOr());
1098:       assertFalse(node0.hasMoreThanOneChild());
1099:       assertFalse(node0.isObjectLit());
1100:       assertFalse(node0.isInstanceOf());
1101:       assertFalse(node0.isGetProp());
1102:       assertFalse(node0.isThis());
1103:       assertFalse(node0.isTypeOf());
1104:       assertFalse(node0.isExprResult());
1105:       assertFalse(node0.isWhile());
1106:       assertFalse(node0.isWith());
1107:       assertFalse(node0.isAssign());
1108:       assertFalse(node0.isReturn());
1109:       assertFalse(node0.isBlock());
1110:       assertFalse(node0.hasChildren());
1111:       assertFalse(node0.isComma());
1112:       assertFalse(node0.isDec());
1113:       assertFalse(node0.isVar());
1114:       assertFalse(node0.isHook());
1115:       assertEquals(262144, node0.getType());
1116:       assertFalse(node0.isCall());
1117:       assertFalse(node0.isStringKey());
1118:       assertFalse(node0.isAdd());
1119:       assertFalse(node0.isName());
1120:       assertFalse(node0.isBreak());
1121:       assertFalse(node0.isNew());
1122:       assertFalse(node0.isSwitch());
1123:       assertFalse(node0.isNull());
1124:       assertFalse(node0.isParamList());
1125:       assertFalse(node0.isDo());
1126:       assertFalse(node0.isAssignAdd());
1127:       assertFalse(node0.isDefaultCase());
1128:       assertFalse(node0.isLabel());
1129:       assertEquals(0, node0.getChildCount());
1130:       assertEquals(38, node0.getSourcePosition());
1131:       assertFalse(node0.isTry());
1132:       assertFalse(node0.isEmpty());
1133:       assertFalse(node0.isDelProp());
1134:       assertFalse(node0.isVoid());
1135:       assertFalse(node0.isArrayLit());
1136:       assertFalse(node0.isNE());
1137:       assertFalse(node0.isTrue());
1138:       assertFalse(node0.isIf());
1139:       assertFalse(node0.isGetterDef());
1140:       assertFalse(node0.isDebugger());
1141:       assertFalse(node0.isCatch());
1142:       assertFalse(node0.isCase());
1143:       assertFalse(node0.isRegExp());
1144:       assertFalse(node0.isFor());
1145:       assertFalse(node0.isThrow());
1146:       assertFalse(node0.isInc());
1147:       assertFalse(node0.isSetterDef());
1148:       assertFalse(node0.isString());
1149:       assertFalse(node0.isIn());
1150:       assertFalse(node0.isAnd());
1151:       assertFalse(node0.isContinue());
1152:       assertEquals(0, node0.getLineno());
1153:       assertEquals(38, node0.getCharno());
1154:       assertFalse(node0.isFunction());
1155:       assertFalse(node0.isFalse());
1156:       assertFalse(node1.isCast());
1157:       assertFalse(node1.isExprResult());
1158:       assertFalse(node1.hasOneChild());
1159:       assertFalse(node1.isLabelName());
1160:       assertFalse(node1.isScript());
1161:       assertFalse(node1.isObjectLit());
1162:       assertFalse(node1.isNot());
1163:       assertFalse(node1.isOr());
1164:       assertFalse(node1.isReturn());
1165:       assertFalse(node1.isInstanceOf());
1166:       assertFalse(node1.isGetProp());
1167:       assertFalse(node1.isWhile());
1168:       assertFalse(node1.isBreak());
1169:       assertFalse(node1.isWith());
1170:       assertEquals(39, node1.getType());
1171:       assertFalse(node1.hasChildren());
1172:       assertFalse(node1.isGetElem());
1173:       assertFalse(node1.isComma());
1174:       assertFalse(node1.isThis());
1175:       assertFalse(node1.hasMoreThanOneChild());
1176:       assertFalse(node1.isTypeOf());
1177:       assertFalse(node1.isDec());
1178:       assertFalse(node1.isAssign());
1179:       assertFalse(node1.isInc());
1180:       assertFalse(node1.isString());
1181:       assertFalse(node1.isIn());
1182:       assertEquals(0, node1.getLineno());
1183:       assertFalse(node1.isSetterDef());
1184:       assertFalse(node1.isAnd());
1185:       assertEquals(38, node1.getCharno());
1186:       assertFalse(node1.isThrow());
1187:       assertFalse(node1.isFunction());
1188:       assertFalse(node1.isContinue());
1189:       assertFalse(node1.isFalse());
1190:       assertFalse(node1.isArrayLit());
1191:       assertFalse(node1.isTry());
1192:       assertEquals(38, node1.getSourcePosition());
1193:       assertFalse(node1.isVoid());
1194:       assertFalse(node1.isIf());
1195:       assertFalse(node1.isNE());
1196:       assertFalse(node1.isEmpty());
1197:       assertFalse(node1.isDebugger());
1198:       assertFalse(node1.isTrue());
1199:       assertFalse(node1.isGetterDef());
1200:       assertTrue(node1.isNumber());
1201:       assertFalse(node1.isCatch());
1202:       assertFalse(node1.isCase());
1203:       assertFalse(node1.isDelProp());
1204:       assertFalse(node1.isFor());
1205:       assertFalse(node1.isRegExp());
1206:       assertFalse(node1.isHook());
1207:       assertFalse(node1.isBlock());
1208:       assertFalse(node1.isAdd());
1209:       assertFalse(node1.isVar());
1210:       assertFalse(node1.isCall());
1211:       assertFalse(node1.isSwitch());
1212:       assertFalse(node1.isName());
1213:       assertFalse(node1.isNew());
1214:       assertFalse(node1.isStringKey());
1215:       assertFalse(node1.isNull());
1216:       assertFalse(node1.isAssignAdd());
1217:       assertFalse(node1.isLabel());
1218:       assertFalse(node1.isParamList());
1219:       assertFalse(node1.isDo());
1220:       assertFalse(node1.isDefaultCase());
1221:       assertEquals(0, node1.getChildCount());
1222:       assertFalse(node2.isRegExp());
1223:       assertFalse(node2.isDebugger());
1224:       assertFalse(node2.isTrue());
1225:       assertFalse(node2.isFunction());
1226:       assertFalse(node2.isArrayLit());
1227:       assertFalse(node2.isCatch());
1228:       assertEquals(38, node2.getSourcePosition());
1229:       assertEquals(0, node2.getLineno());
1230:       assertFalse(node2.isDelProp());
1231:       assertFalse(node2.isParamList());
1232:       assertFalse(node2.isVoid());
1233:       assertFalse(node2.isIf());
1234:       assertFalse(node2.isNull());
1235:       assertFalse(node2.isNE());
1236:       assertFalse(node2.isSetterDef());
1237:       assertFalse(node2.isEmpty());
1238:       assertFalse(node2.isIn());
1239:       assertEquals(0, node2.getChildCount());
1240:       assertFalse(node2.isVar());
1241:       assertFalse(node2.isNew());
1242:       assertFalse(node2.isDefaultCase());
1243:       assertFalse(node2.isInc());
1244:       assertFalse(node2.hasMoreThanOneChild());
1245:       assertFalse(node2.isStringKey());
1246:       assertFalse(node2.isSwitch());
1247:       assertFalse(node2.isThis());
1248:       assertFalse(node2.isGetterDef());
1249:       assertFalse(node2.isNumber());
1250:       assertFalse(node2.hasOneChild());
1251:       assertFalse(node2.isHook());
1252:       assertFalse(node2.isCase());
1253:       assertFalse(node2.isFor());
1254:       assertFalse(node2.isBlock());
1255:       assertFalse(node2.isTry());
1256:       assertFalse(node2.isScript());
1257:       assertFalse(node2.isExprResult());
1258:       assertFalse(node2.isNot());
1259:       assertFalse(node2.isObjectLit());
1260:       assertFalse(node2.isWith());
1261:       assertFalse(node2.isInstanceOf());
1262:       assertFalse(node2.isCast());
1263:       assertFalse(node2.isLabelName());
1264:       assertFalse(node2.isAnd());
1265:       assertFalse(node2.isLabel());
1266:       assertFalse(node2.isOr());
1267:       assertFalse(node2.isFalse());
1268:       assertFalse(node2.isThrow());
1269:       assertFalse(node2.isDo());
1270:       assertFalse(node2.isAssignAdd());
1271:       assertFalse(node2.isAdd());
1272:       assertFalse(node2.isString());
1273:       assertFalse(node2.isContinue());
1274:       assertFalse(node2.isCall());
1275:       assertFalse(node2.isName());
1276:       assertEquals(38, node2.getCharno());
1277:       assertFalse(node2.isTypeOf());
1278:       assertFalse(node2.isComma());
1279:       assertFalse(node2.isDec());
1280:       assertFalse(node2.isBreak());
1281:       assertFalse(node2.isGetProp());
1282:       assertFalse(node2.hasChildren());
1283:       assertFalse(node2.isGetElem());
1284:       assertFalse(node2.isAssign());
1285:       assertEquals(262144, node2.getType());
1286:       assertFalse(node2.isReturn());
1287:       assertFalse(node2.isWhile());
1288:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1289:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1290:       assertEquals(47, Node.IS_DISPATCHER);
1291:       assertEquals(43, Node.IS_CONSTANT_NAME);
1292:       assertEquals(56, Node.CHANGE_TIME);
1293:       assertEquals(2, Node.POST_FLAG);
1294:       assertEquals(37, Node.OPT_ARG_NAME);
1295:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1296:       assertEquals(57, Node.LAST_PROP);
1297:       assertEquals(36, Node.QUOTED_PROP);
1298:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1299:       assertEquals(8, Node.FLAG_NO_THROWS);
1300:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1301:       assertEquals(55, Node.INFERRED_FUNCTION);
1302:       assertEquals(29, Node.JSDOC_INFO_PROP);
1303:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1304:       assertEquals(39, Node.EMPTY_BLOCK);
1305:       assertEquals(53, Node.INPUT_ID);
1306:       assertEquals(52, Node.LENGTH);
1307:       assertEquals(54, Node.SLASH_V);
1308:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1309:       assertEquals(57, Node.REFLECTED_OBJECT);
1310:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1311:       assertEquals(30, Node.VAR_ARGS_NAME);
1312:       assertEquals(49, Node.DIRECT_EVAL);
1313:       assertEquals(48, Node.DIRECTIVES);
1314:       assertEquals(40, Node.ORIGINALNAME_PROP);
1315:       assertEquals(32, Node.INCRDECR_PROP);
1316:       assertEquals(46, Node.IS_NAMESPACE);
1317:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1318:       assertEquals(4095, Node.COLUMN_MASK);
1319:       assertEquals(12, Node.COLUMN_BITS);
1320:       assertEquals(50, Node.FREE_CALL);
1321:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1322:       assertEquals(1, Node.DECR_FLAG);
1323:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1324:       assertEquals(53, Node.INPUT_ID);
1325:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1326:       assertEquals(43, Node.IS_CONSTANT_NAME);
1327:       assertEquals(36, Node.QUOTED_PROP);
1328:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1329:       assertEquals(4095, Node.COLUMN_MASK);
1330:       assertEquals(37, Node.OPT_ARG_NAME);
1331:       assertEquals(48, Node.DIRECTIVES);
1332:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1333:       assertEquals(8, Node.FLAG_NO_THROWS);
1334:       assertEquals(56, Node.CHANGE_TIME);
1335:       assertEquals(47, Node.IS_DISPATCHER);
1336:       assertEquals(2, Node.POST_FLAG);
1337:       assertEquals(29, Node.JSDOC_INFO_PROP);
1338:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1339:       assertEquals(55, Node.INFERRED_FUNCTION);
1340:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1341:       assertEquals(57, Node.LAST_PROP);
1342:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1343:       assertEquals(39, Node.EMPTY_BLOCK);
1344:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1345:       assertEquals(54, Node.SLASH_V);
1346:       assertEquals(52, Node.LENGTH);
1347:       assertEquals(57, Node.REFLECTED_OBJECT);
1348:       assertEquals(30, Node.VAR_ARGS_NAME);
1349:       assertEquals(49, Node.DIRECT_EVAL);
1350:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1351:       assertEquals(40, Node.ORIGINALNAME_PROP);
1352:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1353:       assertEquals(12, Node.COLUMN_BITS);
1354:       assertEquals(46, Node.IS_NAMESPACE);
1355:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1356:       assertEquals(1, Node.DECR_FLAG);
1357:       assertEquals(50, Node.FREE_CALL);
1358:       assertEquals(32, Node.INCRDECR_PROP);
1359:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1360:       assertEquals(43, Node.IS_CONSTANT_NAME);
1361:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1362:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1363:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1364:       assertEquals(4095, Node.COLUMN_MASK);
1365:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1366:       assertEquals(40, Node.ORIGINALNAME_PROP);
1367:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1368:       assertEquals(46, Node.IS_NAMESPACE);
1369:       assertEquals(54, Node.SLASH_V);
1370:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1371:       assertEquals(50, Node.FREE_CALL);
1372:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1373:       assertEquals(57, Node.LAST_PROP);
1374:       assertEquals(49, Node.DIRECT_EVAL);
1375:       assertEquals(1, Node.DECR_FLAG);
1376:       assertEquals(32, Node.INCRDECR_PROP);
1377:       assertEquals(12, Node.COLUMN_BITS);
1378:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1379:       assertEquals(2, Node.POST_FLAG);
1380:       assertEquals(30, Node.VAR_ARGS_NAME);
1381:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1382:       assertEquals(47, Node.IS_DISPATCHER);
1383:       assertEquals(56, Node.CHANGE_TIME);
1384:       assertEquals(29, Node.JSDOC_INFO_PROP);
1385:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1386:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1387:       assertEquals(37, Node.OPT_ARG_NAME);
1388:       assertEquals(39, Node.EMPTY_BLOCK);
1389:       assertEquals(48, Node.DIRECTIVES);
1390:       assertEquals(52, Node.LENGTH);
1391:       assertEquals(53, Node.INPUT_ID);
1392:       assertEquals(57, Node.REFLECTED_OBJECT);
1393:       assertEquals(55, Node.INFERRED_FUNCTION);
1394:       assertEquals(8, Node.FLAG_NO_THROWS);
1395:       assertEquals(36, Node.QUOTED_PROP);
1396:       assertNull(set0);
1397:       assertFalse(node0.equals((Object)node1));
1398:       assertFalse(node1.equals((Object)node2));
1399:       assertFalse(node1.equals((Object)node0));
1400:       assertFalse(node2.equals((Object)node1));
1401:       
1402:       // Undeclared exception!
1403:       try { 
1404:         node0.checkTreeEquals(node1);
1405:         fail("Expecting exception: IllegalStateException");
1406:       
1407:       } catch(IllegalStateException e) {
1408:          //
1409:          // 262144
1410:          //
1411:          verifyException("com.google.javascript.rhino.Token", e);
1412:       }
1413:   }
1414: }
RegularFileObject[/tmp/EvoSuite_46_1628255804926/com/google/javascript/rhino/Node_46_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:45 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_46_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_46_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_46_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.SimpleErrorReporter",
266:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
267:       "com.google.common.base.Joiner",
268:       "com.google.common.base.Preconditions",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.Token",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.base.Objects",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.common.collect.Sets",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.javascript.rhino.InputId",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.AbstractIndexedListIterator",
349:       "com.google.common.collect.Iterators$11",
350:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
351:       "com.google.javascript.rhino.jstype.TemplatizedType",
352:       "com.google.javascript.rhino.jstype.NamedType",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableList$1",
355:       "com.google.common.collect.Platform",
356:       "com.google.javascript.rhino.JSTypeExpression",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 13:16:45.230 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(262144, "", 262144, 262144);
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertEquals(1073745919, node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals(262144, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isString());
assertEquals(262144, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node0);

Node node1 = Node.newNumber((-1001.0325130455363), 0, 38);
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals(0, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertEquals(38, node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertEquals(38, node1.getSourcePosition());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

node1.setOptionalArg(false);
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals(0, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertEquals(38, node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertEquals(38, node1.getSourcePosition());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node1.equals((Object)node0));

Node node2 = node0.srcrefTree(node1);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals(262144, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(38, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertEquals(0, node0.getLineno());
assertEquals(38, node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals(0, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertEquals(38, node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertEquals(38, node1.getSourcePosition());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isCatch());
assertEquals(38, node2.getSourcePosition());
assertEquals(0, node2.getLineno());
assertFalse(node2.isDelProp());
assertFalse(node2.isParamList());
assertFalse(node2.isVoid());
assertFalse(node2.isIf());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isInc());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isThis());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals(38, node2.getCharno());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertEquals(262144, node2.getType());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean0 = node1.mayMutateGlobalStateOrThrow();
assertTrue(boolean0);
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals(0, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertEquals(38, node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertEquals(38, node1.getSourcePosition());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));

boolean boolean1 = node1.isCall();
assertFalse(boolean1);
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals(0, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertEquals(38, node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertEquals(38, node1.getSourcePosition());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);

boolean boolean2 = node1.isCast();
assertFalse(boolean2);
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals(0, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertEquals(38, node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertEquals(38, node1.getSourcePosition());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

Object object0 = new Object();
assertNotNull(object0);

Iterable<Node> iterable0 = node0.children();
assertSame(node0, node2);
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals(262144, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(38, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertEquals(0, node0.getLineno());
assertEquals(38, node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(iterable0.contains(node2));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));

Set<String> set0 = node2.getDirectives();
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals(262144, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(38, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertEquals(0, node0.getLineno());
assertEquals(38, node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals(0, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertEquals(38, node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertEquals(38, node1.getSourcePosition());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isCatch());
assertEquals(38, node2.getSourcePosition());
assertEquals(0, node2.getLineno());
assertFalse(node2.isDelProp());
assertFalse(node2.isParamList());
assertFalse(node2.isVoid());
assertFalse(node2.isIf());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isInc());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isThis());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals(38, node2.getCharno());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertEquals(262144, node2.getType());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertNull(set0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

node0.checkTreeEquals(node1);

[MASTER] 13:16:46.416 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_56_1628255806121/com/google/javascript/rhino/Node_56_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_56_1628255806121/com/google/javascript/rhino/Node_56_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:46.416 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:46.416 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:46.417 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 829
[MASTER] 13:16:46.419 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_56_1628255806121/com/google/javascript/rhino/Node_56_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:46 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import java.util.Set;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_56_tmp__ESTest extends Node_56_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString(262144, "", 262144, 262144);
23:       assertFalse(node0.isArrayLit());
24:       assertFalse(node0.isTry());
25:       assertFalse(node0.isVoid());
26:       assertFalse(node0.isIf());
27:       assertFalse(node0.isNE());
28:       assertFalse(node0.isEmpty());
29:       assertFalse(node0.isDebugger());
30:       assertFalse(node0.isTrue());
31:       assertFalse(node0.isGetterDef());
32:       assertFalse(node0.isCatch());
33:       assertFalse(node0.isCase());
34:       assertFalse(node0.isDelProp());
35:       assertFalse(node0.isFor());
36:       assertFalse(node0.isRegExp());
37:       assertFalse(node0.isHook());
38:       assertFalse(node0.isBlock());
39:       assertFalse(node0.isAdd());
40:       assertFalse(node0.isVar());
41:       assertFalse(node0.isCall());
42:       assertFalse(node0.isSwitch());
43:       assertFalse(node0.isName());
44:       assertFalse(node0.isNew());
45:       assertFalse(node0.isStringKey());
46:       assertFalse(node0.isNull());
47:       assertEquals(4095, node0.getCharno());
48:       assertFalse(node0.isAssignAdd());
49:       assertFalse(node0.isLabel());
50:       assertFalse(node0.isParamList());
51:       assertFalse(node0.isDo());
52:       assertFalse(node0.isDefaultCase());
53:       assertEquals(0, node0.getChildCount());
54:       assertFalse(node0.isCast());
55:       assertFalse(node0.isExprResult());
56:       assertFalse(node0.hasOneChild());
57:       assertFalse(node0.isLabelName());
58:       assertEquals(1073745919, node0.getSourcePosition());
59:       assertFalse(node0.isScript());
60:       assertFalse(node0.isObjectLit());
61:       assertFalse(node0.isNumber());
62:       assertFalse(node0.isNot());
63:       assertFalse(node0.isOr());
64:       assertFalse(node0.isReturn());
65:       assertFalse(node0.isInstanceOf());
66:       assertFalse(node0.isGetProp());
67:       assertFalse(node0.isWhile());
68:       assertFalse(node0.isBreak());
69:       assertFalse(node0.isWith());
70:       assertFalse(node0.hasChildren());
71:       assertFalse(node0.isGetElem());
72:       assertFalse(node0.isComma());
73:       assertFalse(node0.isThis());
74:       assertFalse(node0.hasMoreThanOneChild());
75:       assertEquals(262144, node0.getType());
76:       assertFalse(node0.isTypeOf());
77:       assertFalse(node0.isDec());
78:       assertFalse(node0.isAssign());
79:       assertFalse(node0.isInc());
80:       assertFalse(node0.isString());
81:       assertFalse(node0.isIn());
82:       assertFalse(node0.isSetterDef());
83:       assertFalse(node0.isAnd());
84:       assertFalse(node0.isThrow());
85:       assertFalse(node0.isFunction());
86:       assertFalse(node0.isContinue());
87:       assertEquals(262144, node0.getLineno());
88:       assertFalse(node0.isFalse());
89:       assertEquals(53, Node.INPUT_ID);
90:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
91:       assertEquals(43, Node.IS_CONSTANT_NAME);
92:       assertEquals(36, Node.QUOTED_PROP);
93:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
94:       assertEquals(4095, Node.COLUMN_MASK);
95:       assertEquals(37, Node.OPT_ARG_NAME);
96:       assertEquals(48, Node.DIRECTIVES);
97:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
98:       assertEquals(8, Node.FLAG_NO_THROWS);
99:       assertEquals(56, Node.CHANGE_TIME);
100:       assertEquals(47, Node.IS_DISPATCHER);
101:       assertEquals(2, Node.POST_FLAG);
102:       assertEquals(29, Node.JSDOC_INFO_PROP);
103:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
104:       assertEquals(55, Node.INFERRED_FUNCTION);
105:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
106:       assertEquals(57, Node.LAST_PROP);
107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
108:       assertEquals(39, Node.EMPTY_BLOCK);
109:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
110:       assertEquals(54, Node.SLASH_V);
111:       assertEquals(52, Node.LENGTH);
112:       assertEquals(57, Node.REFLECTED_OBJECT);
113:       assertEquals(30, Node.VAR_ARGS_NAME);
114:       assertEquals(49, Node.DIRECT_EVAL);
115:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
116:       assertEquals(40, Node.ORIGINALNAME_PROP);
117:       assertEquals(51, Node.STATIC_SOURCE_FILE);
118:       assertEquals(12, Node.COLUMN_BITS);
119:       assertEquals(46, Node.IS_NAMESPACE);
120:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
121:       assertEquals(1, Node.DECR_FLAG);
122:       assertEquals(50, Node.FREE_CALL);
123:       assertEquals(32, Node.INCRDECR_PROP);
124:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
125:       assertNotNull(node0);
126:       
127:       node0.setOptionalArg(false);
128:       assertFalse(node0.isArrayLit());
129:       assertFalse(node0.isTry());
130:       assertFalse(node0.isVoid());
131:       assertFalse(node0.isIf());
132:       assertFalse(node0.isNE());
133:       assertFalse(node0.isEmpty());
134:       assertFalse(node0.isDebugger());
135:       assertFalse(node0.isTrue());
136:       assertFalse(node0.isGetterDef());
137:       assertFalse(node0.isCatch());
138:       assertFalse(node0.isCase());
139:       assertFalse(node0.isDelProp());
140:       assertFalse(node0.isFor());
141:       assertFalse(node0.isRegExp());
142:       assertFalse(node0.isHook());
143:       assertFalse(node0.isBlock());
144:       assertFalse(node0.isAdd());
145:       assertFalse(node0.isVar());
146:       assertFalse(node0.isCall());
147:       assertFalse(node0.isSwitch());
148:       assertFalse(node0.isName());
149:       assertFalse(node0.isNew());
150:       assertFalse(node0.isStringKey());
151:       assertFalse(node0.isNull());
152:       assertEquals(4095, node0.getCharno());
153:       assertFalse(node0.isAssignAdd());
154:       assertFalse(node0.isLabel());
155:       assertFalse(node0.isParamList());
156:       assertFalse(node0.isDo());
157:       assertFalse(node0.isDefaultCase());
158:       assertEquals(0, node0.getChildCount());
159:       assertFalse(node0.isCast());
160:       assertFalse(node0.isExprResult());
161:       assertFalse(node0.hasOneChild());
162:       assertFalse(node0.isLabelName());
163:       assertEquals(1073745919, node0.getSourcePosition());
164:       assertFalse(node0.isScript());
165:       assertFalse(node0.isObjectLit());
166:       assertFalse(node0.isNumber());
167:       assertFalse(node0.isNot());
168:       assertFalse(node0.isOr());
169:       assertFalse(node0.isReturn());
170:       assertFalse(node0.isInstanceOf());
171:       assertFalse(node0.isGetProp());
172:       assertFalse(node0.isWhile());
173:       assertFalse(node0.isBreak());
174:       assertFalse(node0.isWith());
175:       assertFalse(node0.hasChildren());
176:       assertFalse(node0.isGetElem());
177:       assertFalse(node0.isComma());
178:       assertFalse(node0.isThis());
179:       assertFalse(node0.hasMoreThanOneChild());
180:       assertEquals(262144, node0.getType());
181:       assertFalse(node0.isTypeOf());
182:       assertFalse(node0.isDec());
183:       assertFalse(node0.isAssign());
184:       assertFalse(node0.isInc());
185:       assertFalse(node0.isString());
186:       assertFalse(node0.isIn());
187:       assertFalse(node0.isSetterDef());
188:       assertFalse(node0.isAnd());
189:       assertFalse(node0.isThrow());
190:       assertFalse(node0.isFunction());
191:       assertFalse(node0.isContinue());
192:       assertEquals(262144, node0.getLineno());
193:       assertFalse(node0.isFalse());
194:       assertEquals(53, Node.INPUT_ID);
195:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
196:       assertEquals(43, Node.IS_CONSTANT_NAME);
197:       assertEquals(36, Node.QUOTED_PROP);
198:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
199:       assertEquals(4095, Node.COLUMN_MASK);
200:       assertEquals(37, Node.OPT_ARG_NAME);
201:       assertEquals(48, Node.DIRECTIVES);
202:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
203:       assertEquals(8, Node.FLAG_NO_THROWS);
204:       assertEquals(56, Node.CHANGE_TIME);
205:       assertEquals(47, Node.IS_DISPATCHER);
206:       assertEquals(2, Node.POST_FLAG);
207:       assertEquals(29, Node.JSDOC_INFO_PROP);
208:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
209:       assertEquals(55, Node.INFERRED_FUNCTION);
210:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
211:       assertEquals(57, Node.LAST_PROP);
212:       assertEquals(15, Node.NO_SIDE_EFFECTS);
213:       assertEquals(39, Node.EMPTY_BLOCK);
214:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
215:       assertEquals(54, Node.SLASH_V);
216:       assertEquals(52, Node.LENGTH);
217:       assertEquals(57, Node.REFLECTED_OBJECT);
218:       assertEquals(30, Node.VAR_ARGS_NAME);
219:       assertEquals(49, Node.DIRECT_EVAL);
220:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
221:       assertEquals(40, Node.ORIGINALNAME_PROP);
222:       assertEquals(51, Node.STATIC_SOURCE_FILE);
223:       assertEquals(12, Node.COLUMN_BITS);
224:       assertEquals(46, Node.IS_NAMESPACE);
225:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
226:       assertEquals(1, Node.DECR_FLAG);
227:       assertEquals(50, Node.FREE_CALL);
228:       assertEquals(32, Node.INCRDECR_PROP);
229:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
230:       
231:       Node node1 = node0.srcrefTree(node0);
232:       assertSame(node0, node1);
233:       assertSame(node1, node0);
234:       assertFalse(node0.isArrayLit());
235:       assertFalse(node0.isTry());
236:       assertFalse(node0.isVoid());
237:       assertFalse(node0.isIf());
238:       assertFalse(node0.isNE());
239:       assertFalse(node0.isEmpty());
240:       assertFalse(node0.isDebugger());
241:       assertFalse(node0.isTrue());
242:       assertFalse(node0.isGetterDef());
243:       assertFalse(node0.isCatch());
244:       assertFalse(node0.isCase());
245:       assertFalse(node0.isDelProp());
246:       assertFalse(node0.isFor());
247:       assertFalse(node0.isRegExp());
248:       assertFalse(node0.isHook());
249:       assertFalse(node0.isBlock());
250:       assertFalse(node0.isAdd());
251:       assertFalse(node0.isVar());
252:       assertFalse(node0.isCall());
253:       assertFalse(node0.isSwitch());
254:       assertFalse(node0.isName());
255:       assertFalse(node0.isNew());
256:       assertFalse(node0.isStringKey());
257:       assertFalse(node0.isNull());
258:       assertEquals(4095, node0.getCharno());
259:       assertFalse(node0.isAssignAdd());
260:       assertFalse(node0.isLabel());
261:       assertFalse(node0.isParamList());
262:       assertFalse(node0.isDo());
263:       assertFalse(node0.isDefaultCase());
264:       assertEquals(0, node0.getChildCount());
265:       assertFalse(node0.isCast());
266:       assertFalse(node0.isExprResult());
267:       assertFalse(node0.hasOneChild());
268:       assertFalse(node0.isLabelName());
269:       assertEquals(1073745919, node0.getSourcePosition());
270:       assertFalse(node0.isScript());
271:       assertFalse(node0.isObjectLit());
272:       assertFalse(node0.isNumber());
273:       assertFalse(node0.isNot());
274:       assertFalse(node0.isOr());
275:       assertFalse(node0.isReturn());
276:       assertFalse(node0.isInstanceOf());
277:       assertFalse(node0.isGetProp());
278:       assertFalse(node0.isWhile());
279:       assertFalse(node0.isBreak());
280:       assertFalse(node0.isWith());
281:       assertFalse(node0.hasChildren());
282:       assertFalse(node0.isGetElem());
283:       assertFalse(node0.isComma());
284:       assertFalse(node0.isThis());
285:       assertFalse(node0.hasMoreThanOneChild());
286:       assertEquals(262144, node0.getType());
287:       assertFalse(node0.isTypeOf());
288:       assertFalse(node0.isDec());
289:       assertFalse(node0.isAssign());
290:       assertFalse(node0.isInc());
291:       assertFalse(node0.isString());
292:       assertFalse(node0.isIn());
293:       assertFalse(node0.isSetterDef());
294:       assertFalse(node0.isAnd());
295:       assertFalse(node0.isThrow());
296:       assertFalse(node0.isFunction());
297:       assertFalse(node0.isContinue());
298:       assertEquals(262144, node0.getLineno());
299:       assertFalse(node0.isFalse());
300:       assertFalse(node1.isStringKey());
301:       assertFalse(node1.isName());
302:       assertFalse(node1.isSetterDef());
303:       assertFalse(node1.isCall());
304:       assertFalse(node1.isAdd());
305:       assertFalse(node1.isParamList());
306:       assertFalse(node1.isNull());
307:       assertFalse(node1.isDo());
308:       assertFalse(node1.isContinue());
309:       assertFalse(node1.isDefaultCase());
310:       assertEquals(262144, node1.getLineno());
311:       assertFalse(node1.isAssignAdd());
312:       assertFalse(node1.isLabel());
313:       assertFalse(node1.isNew());
314:       assertEquals(0, node1.getChildCount());
315:       assertFalse(node1.isFunction());
316:       assertFalse(node1.isVar());
317:       assertFalse(node1.isAssign());
318:       assertFalse(node1.isEmpty());
319:       assertFalse(node1.isDelProp());
320:       assertEquals(1073745919, node1.getSourcePosition());
321:       assertFalse(node1.isTypeOf());
322:       assertFalse(node1.isCast());
323:       assertFalse(node1.isGetElem());
324:       assertFalse(node1.isOr());
325:       assertFalse(node1.isVoid());
326:       assertFalse(node1.isDebugger());
327:       assertFalse(node1.isTrue());
328:       assertFalse(node1.isNot());
329:       assertFalse(node1.isString());
330:       assertFalse(node1.isWhile());
331:       assertFalse(node1.isObjectLit());
332:       assertFalse(node1.isExprResult());
333:       assertEquals(262144, node1.getType());
334:       assertFalse(node1.isComma());
335:       assertFalse(node1.isDec());
336:       assertFalse(node1.hasChildren());
337:       assertFalse(node1.isReturn());
338:       assertFalse(node1.isFalse());
339:       assertFalse(node1.isBreak());
340:       assertFalse(node1.isGetProp());
341:       assertFalse(node1.isSwitch());
342:       assertEquals(4095, node1.getCharno());
343:       assertFalse(node1.isAnd());
344:       assertFalse(node1.isInc());
345:       assertFalse(node1.isThrow());
346:       assertFalse(node1.isFor());
347:       assertFalse(node1.isLabelName());
348:       assertFalse(node1.isGetterDef());
349:       assertFalse(node1.isIf());
350:       assertFalse(node1.isNumber());
351:       assertFalse(node1.isArrayLit());
352:       assertFalse(node1.hasOneChild());
353:       assertFalse(node1.isIn());
354:       assertFalse(node1.isNE());
355:       assertFalse(node1.isCase());
356:       assertFalse(node1.isWith());
357:       assertFalse(node1.hasMoreThanOneChild());
358:       assertFalse(node1.isScript());
359:       assertFalse(node1.isCatch());
360:       assertFalse(node1.isInstanceOf());
361:       assertFalse(node1.isTry());
362:       assertFalse(node1.isRegExp());
363:       assertFalse(node1.isHook());
364:       assertFalse(node1.isThis());
365:       assertFalse(node1.isBlock());
366:       assertEquals(53, Node.INPUT_ID);
367:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
368:       assertEquals(43, Node.IS_CONSTANT_NAME);
369:       assertEquals(36, Node.QUOTED_PROP);
370:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
371:       assertEquals(4095, Node.COLUMN_MASK);
372:       assertEquals(37, Node.OPT_ARG_NAME);
373:       assertEquals(48, Node.DIRECTIVES);
374:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
375:       assertEquals(8, Node.FLAG_NO_THROWS);
376:       assertEquals(56, Node.CHANGE_TIME);
377:       assertEquals(47, Node.IS_DISPATCHER);
378:       assertEquals(2, Node.POST_FLAG);
379:       assertEquals(29, Node.JSDOC_INFO_PROP);
380:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
381:       assertEquals(55, Node.INFERRED_FUNCTION);
382:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
383:       assertEquals(57, Node.LAST_PROP);
384:       assertEquals(15, Node.NO_SIDE_EFFECTS);
385:       assertEquals(39, Node.EMPTY_BLOCK);
386:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
387:       assertEquals(54, Node.SLASH_V);
388:       assertEquals(52, Node.LENGTH);
389:       assertEquals(57, Node.REFLECTED_OBJECT);
390:       assertEquals(30, Node.VAR_ARGS_NAME);
391:       assertEquals(49, Node.DIRECT_EVAL);
392:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
393:       assertEquals(40, Node.ORIGINALNAME_PROP);
394:       assertEquals(51, Node.STATIC_SOURCE_FILE);
395:       assertEquals(12, Node.COLUMN_BITS);
396:       assertEquals(46, Node.IS_NAMESPACE);
397:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
398:       assertEquals(1, Node.DECR_FLAG);
399:       assertEquals(50, Node.FREE_CALL);
400:       assertEquals(32, Node.INCRDECR_PROP);
401:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
402:       assertEquals(40, Node.ORIGINALNAME_PROP);
403:       assertEquals(50, Node.FREE_CALL);
404:       assertEquals(57, Node.REFLECTED_OBJECT);
405:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
406:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
407:       assertEquals(48, Node.DIRECTIVES);
408:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
409:       assertEquals(4095, Node.COLUMN_MASK);
410:       assertEquals(51, Node.STATIC_SOURCE_FILE);
411:       assertEquals(1, Node.DECR_FLAG);
412:       assertEquals(32, Node.INCRDECR_PROP);
413:       assertEquals(46, Node.IS_NAMESPACE);
414:       assertEquals(12, Node.COLUMN_BITS);
415:       assertEquals(43, Node.IS_CONSTANT_NAME);
416:       assertEquals(54, Node.SLASH_V);
417:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
418:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
419:       assertEquals(47, Node.IS_DISPATCHER);
420:       assertEquals(56, Node.CHANGE_TIME);
421:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
422:       assertEquals(37, Node.OPT_ARG_NAME);
423:       assertEquals(2, Node.POST_FLAG);
424:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
425:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
426:       assertEquals(49, Node.DIRECT_EVAL);
427:       assertEquals(30, Node.VAR_ARGS_NAME);
428:       assertEquals(57, Node.LAST_PROP);
429:       assertEquals(8, Node.FLAG_NO_THROWS);
430:       assertEquals(39, Node.EMPTY_BLOCK);
431:       assertEquals(36, Node.QUOTED_PROP);
432:       assertEquals(52, Node.LENGTH);
433:       assertEquals(15, Node.NO_SIDE_EFFECTS);
434:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
435:       assertEquals(29, Node.JSDOC_INFO_PROP);
436:       assertEquals(53, Node.INPUT_ID);
437:       assertEquals(55, Node.INFERRED_FUNCTION);
438:       assertNotNull(node1);
439:       
440:       boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
441:       assertSame(node0, node1);
442:       assertTrue(boolean0);
443:       assertFalse(node0.isArrayLit());
444:       assertFalse(node0.isTry());
445:       assertFalse(node0.isVoid());
446:       assertFalse(node0.isIf());
447:       assertFalse(node0.isNE());
448:       assertFalse(node0.isEmpty());
449:       assertFalse(node0.isDebugger());
450:       assertFalse(node0.isTrue());
451:       assertFalse(node0.isGetterDef());
452:       assertFalse(node0.isCatch());
453:       assertFalse(node0.isCase());
454:       assertFalse(node0.isDelProp());
455:       assertFalse(node0.isFor());
456:       assertFalse(node0.isRegExp());
457:       assertFalse(node0.isHook());
458:       assertFalse(node0.isBlock());
459:       assertFalse(node0.isAdd());
460:       assertFalse(node0.isVar());
461:       assertFalse(node0.isCall());
462:       assertFalse(node0.isSwitch());
463:       assertFalse(node0.isName());
464:       assertFalse(node0.isNew());
465:       assertFalse(node0.isStringKey());
466:       assertFalse(node0.isNull());
467:       assertEquals(4095, node0.getCharno());
468:       assertFalse(node0.isAssignAdd());
469:       assertFalse(node0.isLabel());
470:       assertFalse(node0.isParamList());
471:       assertFalse(node0.isDo());
472:       assertFalse(node0.isDefaultCase());
473:       assertEquals(0, node0.getChildCount());
474:       assertFalse(node0.isCast());
475:       assertFalse(node0.isExprResult());
476:       assertFalse(node0.hasOneChild());
477:       assertFalse(node0.isLabelName());
478:       assertEquals(1073745919, node0.getSourcePosition());
479:       assertFalse(node0.isScript());
480:       assertFalse(node0.isObjectLit());
481:       assertFalse(node0.isNumber());
482:       assertFalse(node0.isNot());
483:       assertFalse(node0.isOr());
484:       assertFalse(node0.isReturn());
485:       assertFalse(node0.isInstanceOf());
486:       assertFalse(node0.isGetProp());
487:       assertFalse(node0.isWhile());
488:       assertFalse(node0.isBreak());
489:       assertFalse(node0.isWith());
490:       assertFalse(node0.hasChildren());
491:       assertFalse(node0.isGetElem());
492:       assertFalse(node0.isComma());
493:       assertFalse(node0.isThis());
494:       assertFalse(node0.hasMoreThanOneChild());
495:       assertEquals(262144, node0.getType());
496:       assertFalse(node0.isTypeOf());
497:       assertFalse(node0.isDec());
498:       assertFalse(node0.isAssign());
499:       assertFalse(node0.isInc());
500:       assertFalse(node0.isString());
501:       assertFalse(node0.isIn());
502:       assertFalse(node0.isSetterDef());
503:       assertFalse(node0.isAnd());
504:       assertFalse(node0.isThrow());
505:       assertFalse(node0.isFunction());
506:       assertFalse(node0.isContinue());
507:       assertEquals(262144, node0.getLineno());
508:       assertFalse(node0.isFalse());
509:       assertEquals(53, Node.INPUT_ID);
510:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
511:       assertEquals(43, Node.IS_CONSTANT_NAME);
512:       assertEquals(36, Node.QUOTED_PROP);
513:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
514:       assertEquals(4095, Node.COLUMN_MASK);
515:       assertEquals(37, Node.OPT_ARG_NAME);
516:       assertEquals(48, Node.DIRECTIVES);
517:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
518:       assertEquals(8, Node.FLAG_NO_THROWS);
519:       assertEquals(56, Node.CHANGE_TIME);
520:       assertEquals(47, Node.IS_DISPATCHER);
521:       assertEquals(2, Node.POST_FLAG);
522:       assertEquals(29, Node.JSDOC_INFO_PROP);
523:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
524:       assertEquals(55, Node.INFERRED_FUNCTION);
525:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
526:       assertEquals(57, Node.LAST_PROP);
527:       assertEquals(15, Node.NO_SIDE_EFFECTS);
528:       assertEquals(39, Node.EMPTY_BLOCK);
529:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
530:       assertEquals(54, Node.SLASH_V);
531:       assertEquals(52, Node.LENGTH);
532:       assertEquals(57, Node.REFLECTED_OBJECT);
533:       assertEquals(30, Node.VAR_ARGS_NAME);
534:       assertEquals(49, Node.DIRECT_EVAL);
535:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
536:       assertEquals(40, Node.ORIGINALNAME_PROP);
537:       assertEquals(51, Node.STATIC_SOURCE_FILE);
538:       assertEquals(12, Node.COLUMN_BITS);
539:       assertEquals(46, Node.IS_NAMESPACE);
540:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
541:       assertEquals(1, Node.DECR_FLAG);
542:       assertEquals(50, Node.FREE_CALL);
543:       assertEquals(32, Node.INCRDECR_PROP);
544:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
545:       
546:       boolean boolean1 = node0.isCall();
547:       assertSame(node0, node1);
548:       assertFalse(boolean1);
549:       assertFalse(node0.isArrayLit());
550:       assertFalse(node0.isTry());
551:       assertFalse(node0.isVoid());
552:       assertFalse(node0.isIf());
553:       assertFalse(node0.isNE());
554:       assertFalse(node0.isEmpty());
555:       assertFalse(node0.isDebugger());
556:       assertFalse(node0.isTrue());
557:       assertFalse(node0.isGetterDef());
558:       assertFalse(node0.isCatch());
559:       assertFalse(node0.isCase());
560:       assertFalse(node0.isDelProp());
561:       assertFalse(node0.isFor());
562:       assertFalse(node0.isRegExp());
563:       assertFalse(node0.isHook());
564:       assertFalse(node0.isBlock());
565:       assertFalse(node0.isAdd());
566:       assertFalse(node0.isVar());
567:       assertFalse(node0.isCall());
568:       assertFalse(node0.isSwitch());
569:       assertFalse(node0.isName());
570:       assertFalse(node0.isNew());
571:       assertFalse(node0.isStringKey());
572:       assertFalse(node0.isNull());
573:       assertEquals(4095, node0.getCharno());
574:       assertFalse(node0.isAssignAdd());
575:       assertFalse(node0.isLabel());
576:       assertFalse(node0.isParamList());
577:       assertFalse(node0.isDo());
578:       assertFalse(node0.isDefaultCase());
579:       assertEquals(0, node0.getChildCount());
580:       assertFalse(node0.isCast());
581:       assertFalse(node0.isExprResult());
582:       assertFalse(node0.hasOneChild());
583:       assertFalse(node0.isLabelName());
584:       assertEquals(1073745919, node0.getSourcePosition());
585:       assertFalse(node0.isScript());
586:       assertFalse(node0.isObjectLit());
587:       assertFalse(node0.isNumber());
588:       assertFalse(node0.isNot());
589:       assertFalse(node0.isOr());
590:       assertFalse(node0.isReturn());
591:       assertFalse(node0.isInstanceOf());
592:       assertFalse(node0.isGetProp());
593:       assertFalse(node0.isWhile());
594:       assertFalse(node0.isBreak());
595:       assertFalse(node0.isWith());
596:       assertFalse(node0.hasChildren());
597:       assertFalse(node0.isGetElem());
598:       assertFalse(node0.isComma());
599:       assertFalse(node0.isThis());
600:       assertFalse(node0.hasMoreThanOneChild());
601:       assertEquals(262144, node0.getType());
602:       assertFalse(node0.isTypeOf());
603:       assertFalse(node0.isDec());
604:       assertFalse(node0.isAssign());
605:       assertFalse(node0.isInc());
606:       assertFalse(node0.isString());
607:       assertFalse(node0.isIn());
608:       assertFalse(node0.isSetterDef());
609:       assertFalse(node0.isAnd());
610:       assertFalse(node0.isThrow());
611:       assertFalse(node0.isFunction());
612:       assertFalse(node0.isContinue());
613:       assertEquals(262144, node0.getLineno());
614:       assertFalse(node0.isFalse());
615:       assertEquals(53, Node.INPUT_ID);
616:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
617:       assertEquals(43, Node.IS_CONSTANT_NAME);
618:       assertEquals(36, Node.QUOTED_PROP);
619:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
620:       assertEquals(4095, Node.COLUMN_MASK);
621:       assertEquals(37, Node.OPT_ARG_NAME);
622:       assertEquals(48, Node.DIRECTIVES);
623:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
624:       assertEquals(8, Node.FLAG_NO_THROWS);
625:       assertEquals(56, Node.CHANGE_TIME);
626:       assertEquals(47, Node.IS_DISPATCHER);
627:       assertEquals(2, Node.POST_FLAG);
628:       assertEquals(29, Node.JSDOC_INFO_PROP);
629:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
630:       assertEquals(55, Node.INFERRED_FUNCTION);
631:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
632:       assertEquals(57, Node.LAST_PROP);
633:       assertEquals(15, Node.NO_SIDE_EFFECTS);
634:       assertEquals(39, Node.EMPTY_BLOCK);
635:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
636:       assertEquals(54, Node.SLASH_V);
637:       assertEquals(52, Node.LENGTH);
638:       assertEquals(57, Node.REFLECTED_OBJECT);
639:       assertEquals(30, Node.VAR_ARGS_NAME);
640:       assertEquals(49, Node.DIRECT_EVAL);
641:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
642:       assertEquals(40, Node.ORIGINALNAME_PROP);
643:       assertEquals(51, Node.STATIC_SOURCE_FILE);
644:       assertEquals(12, Node.COLUMN_BITS);
645:       assertEquals(46, Node.IS_NAMESPACE);
646:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
647:       assertEquals(1, Node.DECR_FLAG);
648:       assertEquals(50, Node.FREE_CALL);
649:       assertEquals(32, Node.INCRDECR_PROP);
650:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
651:       assertFalse(boolean1 == boolean0);
652:       
653:       boolean boolean2 = node0.isCast();
654:       assertSame(node0, node1);
655:       assertFalse(boolean2);
656:       assertFalse(node0.isArrayLit());
657:       assertFalse(node0.isTry());
658:       assertFalse(node0.isVoid());
659:       assertFalse(node0.isIf());
660:       assertFalse(node0.isNE());
661:       assertFalse(node0.isEmpty());
662:       assertFalse(node0.isDebugger());
663:       assertFalse(node0.isTrue());
664:       assertFalse(node0.isGetterDef());
665:       assertFalse(node0.isCatch());
666:       assertFalse(node0.isCase());
667:       assertFalse(node0.isDelProp());
668:       assertFalse(node0.isFor());
669:       assertFalse(node0.isRegExp());
670:       assertFalse(node0.isHook());
671:       assertFalse(node0.isBlock());
672:       assertFalse(node0.isAdd());
673:       assertFalse(node0.isVar());
674:       assertFalse(node0.isCall());
675:       assertFalse(node0.isSwitch());
676:       assertFalse(node0.isName());
677:       assertFalse(node0.isNew());
678:       assertFalse(node0.isStringKey());
679:       assertFalse(node0.isNull());
680:       assertEquals(4095, node0.getCharno());
681:       assertFalse(node0.isAssignAdd());
682:       assertFalse(node0.isLabel());
683:       assertFalse(node0.isParamList());
684:       assertFalse(node0.isDo());
685:       assertFalse(node0.isDefaultCase());
686:       assertEquals(0, node0.getChildCount());
687:       assertFalse(node0.isCast());
688:       assertFalse(node0.isExprResult());
689:       assertFalse(node0.hasOneChild());
690:       assertFalse(node0.isLabelName());
691:       assertEquals(1073745919, node0.getSourcePosition());
692:       assertFalse(node0.isScript());
693:       assertFalse(node0.isObjectLit());
694:       assertFalse(node0.isNumber());
695:       assertFalse(node0.isNot());
696:       assertFalse(node0.isOr());
697:       assertFalse(node0.isReturn());
698:       assertFalse(node0.isInstanceOf());
699:       assertFalse(node0.isGetProp());
700:       assertFalse(node0.isWhile());
701:       assertFalse(node0.isBreak());
702:       assertFalse(node0.isWith());
703:       assertFalse(node0.hasChildren());
704:       assertFalse(node0.isGetElem());
705:       assertFalse(node0.isComma());
706:       assertFalse(node0.isThis());
707:       assertFalse(node0.hasMoreThanOneChild());
708:       assertEquals(262144, node0.getType());
709:       assertFalse(node0.isTypeOf());
710:       assertFalse(node0.isDec());
711:       assertFalse(node0.isAssign());
712:       assertFalse(node0.isInc());
713:       assertFalse(node0.isString());
714:       assertFalse(node0.isIn());
715:       assertFalse(node0.isSetterDef());
716:       assertFalse(node0.isAnd());
717:       assertFalse(node0.isThrow());
718:       assertFalse(node0.isFunction());
719:       assertFalse(node0.isContinue());
720:       assertEquals(262144, node0.getLineno());
721:       assertFalse(node0.isFalse());
722:       assertEquals(53, Node.INPUT_ID);
723:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
724:       assertEquals(43, Node.IS_CONSTANT_NAME);
725:       assertEquals(36, Node.QUOTED_PROP);
726:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
727:       assertEquals(4095, Node.COLUMN_MASK);
728:       assertEquals(37, Node.OPT_ARG_NAME);
729:       assertEquals(48, Node.DIRECTIVES);
730:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
731:       assertEquals(8, Node.FLAG_NO_THROWS);
732:       assertEquals(56, Node.CHANGE_TIME);
733:       assertEquals(47, Node.IS_DISPATCHER);
734:       assertEquals(2, Node.POST_FLAG);
735:       assertEquals(29, Node.JSDOC_INFO_PROP);
736:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
737:       assertEquals(55, Node.INFERRED_FUNCTION);
738:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
739:       assertEquals(57, Node.LAST_PROP);
740:       assertEquals(15, Node.NO_SIDE_EFFECTS);
741:       assertEquals(39, Node.EMPTY_BLOCK);
742:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
743:       assertEquals(54, Node.SLASH_V);
744:       assertEquals(52, Node.LENGTH);
745:       assertEquals(57, Node.REFLECTED_OBJECT);
746:       assertEquals(30, Node.VAR_ARGS_NAME);
747:       assertEquals(49, Node.DIRECT_EVAL);
748:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
749:       assertEquals(40, Node.ORIGINALNAME_PROP);
750:       assertEquals(51, Node.STATIC_SOURCE_FILE);
751:       assertEquals(12, Node.COLUMN_BITS);
752:       assertEquals(46, Node.IS_NAMESPACE);
753:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
754:       assertEquals(1, Node.DECR_FLAG);
755:       assertEquals(50, Node.FREE_CALL);
756:       assertEquals(32, Node.INCRDECR_PROP);
757:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
758:       assertFalse(boolean2 == boolean0);
759:       assertTrue(boolean2 == boolean1);
760:       
761:       Iterable<Node> iterable0 = node0.children();
762:       assertSame(node0, node1);
763:       assertFalse(node0.isArrayLit());
764:       assertFalse(node0.isTry());
765:       assertFalse(node0.isVoid());
766:       assertFalse(node0.isIf());
767:       assertFalse(node0.isNE());
768:       assertFalse(node0.isEmpty());
769:       assertFalse(node0.isDebugger());
770:       assertFalse(node0.isTrue());
771:       assertFalse(node0.isGetterDef());
772:       assertFalse(node0.isCatch());
773:       assertFalse(node0.isCase());
774:       assertFalse(node0.isDelProp());
775:       assertFalse(node0.isFor());
776:       assertFalse(node0.isRegExp());
777:       assertFalse(node0.isHook());
778:       assertFalse(node0.isBlock());
779:       assertFalse(node0.isAdd());
780:       assertFalse(node0.isVar());
781:       assertFalse(node0.isCall());
782:       assertFalse(node0.isSwitch());
783:       assertFalse(node0.isName());
784:       assertFalse(node0.isNew());
785:       assertFalse(node0.isStringKey());
786:       assertFalse(node0.isNull());
787:       assertEquals(4095, node0.getCharno());
788:       assertFalse(node0.isAssignAdd());
789:       assertFalse(node0.isLabel());
790:       assertFalse(node0.isParamList());
791:       assertFalse(node0.isDo());
792:       assertFalse(node0.isDefaultCase());
793:       assertEquals(0, node0.getChildCount());
794:       assertFalse(node0.isCast());
795:       assertFalse(node0.isExprResult());
796:       assertFalse(node0.hasOneChild());
797:       assertFalse(node0.isLabelName());
798:       assertEquals(1073745919, node0.getSourcePosition());
799:       assertFalse(node0.isScript());
800:       assertFalse(node0.isObjectLit());
801:       assertFalse(node0.isNumber());
802:       assertFalse(node0.isNot());
803:       assertFalse(node0.isOr());
804:       assertFalse(node0.isReturn());
805:       assertFalse(node0.isInstanceOf());
806:       assertFalse(node0.isGetProp());
807:       assertFalse(node0.isWhile());
808:       assertFalse(node0.isBreak());
809:       assertFalse(node0.isWith());
810:       assertFalse(node0.hasChildren());
811:       assertFalse(node0.isGetElem());
812:       assertFalse(node0.isComma());
813:       assertFalse(node0.isThis());
814:       assertFalse(node0.hasMoreThanOneChild());
815:       assertEquals(262144, node0.getType());
816:       assertFalse(node0.isTypeOf());
817:       assertFalse(node0.isDec());
818:       assertFalse(node0.isAssign());
819:       assertFalse(node0.isInc());
820:       assertFalse(node0.isString());
821:       assertFalse(node0.isIn());
822:       assertFalse(node0.isSetterDef());
823:       assertFalse(node0.isAnd());
824:       assertFalse(node0.isThrow());
825:       assertFalse(node0.isFunction());
826:       assertFalse(node0.isContinue());
827:       assertEquals(262144, node0.getLineno());
828:       assertFalse(node0.isFalse());
829:       assertFalse(iterable0.contains(node1));
830:       assertEquals(53, Node.INPUT_ID);
831:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
832:       assertEquals(43, Node.IS_CONSTANT_NAME);
833:       assertEquals(36, Node.QUOTED_PROP);
834:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
835:       assertEquals(4095, Node.COLUMN_MASK);
836:       assertEquals(37, Node.OPT_ARG_NAME);
837:       assertEquals(48, Node.DIRECTIVES);
838:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
839:       assertEquals(8, Node.FLAG_NO_THROWS);
840:       assertEquals(56, Node.CHANGE_TIME);
841:       assertEquals(47, Node.IS_DISPATCHER);
842:       assertEquals(2, Node.POST_FLAG);
843:       assertEquals(29, Node.JSDOC_INFO_PROP);
844:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
845:       assertEquals(55, Node.INFERRED_FUNCTION);
846:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
847:       assertEquals(57, Node.LAST_PROP);
848:       assertEquals(15, Node.NO_SIDE_EFFECTS);
849:       assertEquals(39, Node.EMPTY_BLOCK);
850:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
851:       assertEquals(54, Node.SLASH_V);
852:       assertEquals(52, Node.LENGTH);
853:       assertEquals(57, Node.REFLECTED_OBJECT);
854:       assertEquals(30, Node.VAR_ARGS_NAME);
855:       assertEquals(49, Node.DIRECT_EVAL);
856:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
857:       assertEquals(40, Node.ORIGINALNAME_PROP);
858:       assertEquals(51, Node.STATIC_SOURCE_FILE);
859:       assertEquals(12, Node.COLUMN_BITS);
860:       assertEquals(46, Node.IS_NAMESPACE);
861:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
862:       assertEquals(1, Node.DECR_FLAG);
863:       assertEquals(50, Node.FREE_CALL);
864:       assertEquals(32, Node.INCRDECR_PROP);
865:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
866:       assertNotNull(iterable0);
867:       
868:       Set<String> set0 = node1.getDirectives();
869:       assertSame(node0, node1);
870:       assertSame(node1, node0);
871:       assertFalse(node0.isArrayLit());
872:       assertFalse(node0.isTry());
873:       assertFalse(node0.isVoid());
874:       assertFalse(node0.isIf());
875:       assertFalse(node0.isNE());
876:       assertFalse(node0.isEmpty());
877:       assertFalse(node0.isDebugger());
878:       assertFalse(node0.isTrue());
879:       assertFalse(node0.isGetterDef());
880:       assertFalse(node0.isCatch());
881:       assertFalse(node0.isCase());
882:       assertFalse(node0.isDelProp());
883:       assertFalse(node0.isFor());
884:       assertFalse(node0.isRegExp());
885:       assertFalse(node0.isHook());
886:       assertFalse(node0.isBlock());
887:       assertFalse(node0.isAdd());
888:       assertFalse(node0.isVar());
889:       assertFalse(node0.isCall());
890:       assertFalse(node0.isSwitch());
891:       assertFalse(node0.isName());
892:       assertFalse(node0.isNew());
893:       assertFalse(node0.isStringKey());
894:       assertFalse(node0.isNull());
895:       assertEquals(4095, node0.getCharno());
896:       assertFalse(node0.isAssignAdd());
897:       assertFalse(node0.isLabel());
898:       assertFalse(node0.isParamList());
899:       assertFalse(node0.isDo());
900:       assertFalse(node0.isDefaultCase());
901:       assertEquals(0, node0.getChildCount());
902:       assertFalse(node0.isCast());
903:       assertFalse(node0.isExprResult());
904:       assertFalse(node0.hasOneChild());
905:       assertFalse(node0.isLabelName());
906:       assertEquals(1073745919, node0.getSourcePosition());
907:       assertFalse(node0.isScript());
908:       assertFalse(node0.isObjectLit());
909:       assertFalse(node0.isNumber());
910:       assertFalse(node0.isNot());
911:       assertFalse(node0.isOr());
912:       assertFalse(node0.isReturn());
913:       assertFalse(node0.isInstanceOf());
914:       assertFalse(node0.isGetProp());
915:       assertFalse(node0.isWhile());
916:       assertFalse(node0.isBreak());
917:       assertFalse(node0.isWith());
918:       assertFalse(node0.hasChildren());
919:       assertFalse(node0.isGetElem());
920:       assertFalse(node0.isComma());
921:       assertFalse(node0.isThis());
922:       assertFalse(node0.hasMoreThanOneChild());
923:       assertEquals(262144, node0.getType());
924:       assertFalse(node0.isTypeOf());
925:       assertFalse(node0.isDec());
926:       assertFalse(node0.isAssign());
927:       assertFalse(node0.isInc());
928:       assertFalse(node0.isString());
929:       assertFalse(node0.isIn());
930:       assertFalse(node0.isSetterDef());
931:       assertFalse(node0.isAnd());
932:       assertFalse(node0.isThrow());
933:       assertFalse(node0.isFunction());
934:       assertFalse(node0.isContinue());
935:       assertEquals(262144, node0.getLineno());
936:       assertFalse(node0.isFalse());
937:       assertFalse(node1.isStringKey());
938:       assertFalse(node1.isName());
939:       assertFalse(node1.isSetterDef());
940:       assertFalse(node1.isCall());
941:       assertFalse(node1.isAdd());
942:       assertFalse(node1.isParamList());
943:       assertFalse(node1.isNull());
944:       assertFalse(node1.isDo());
945:       assertFalse(node1.isContinue());
946:       assertFalse(node1.isDefaultCase());
947:       assertEquals(262144, node1.getLineno());
948:       assertFalse(node1.isAssignAdd());
949:       assertFalse(node1.isLabel());
950:       assertFalse(node1.isNew());
951:       assertEquals(0, node1.getChildCount());
952:       assertFalse(node1.isFunction());
953:       assertFalse(node1.isVar());
954:       assertFalse(node1.isAssign());
955:       assertFalse(node1.isEmpty());
956:       assertFalse(node1.isDelProp());
957:       assertEquals(1073745919, node1.getSourcePosition());
958:       assertFalse(node1.isTypeOf());
959:       assertFalse(node1.isCast());
960:       assertFalse(node1.isGetElem());
961:       assertFalse(node1.isOr());
962:       assertFalse(node1.isVoid());
963:       assertFalse(node1.isDebugger());
964:       assertFalse(node1.isTrue());
965:       assertFalse(node1.isNot());
966:       assertFalse(node1.isString());
967:       assertFalse(node1.isWhile());
968:       assertFalse(node1.isObjectLit());
969:       assertFalse(node1.isExprResult());
970:       assertEquals(262144, node1.getType());
971:       assertFalse(node1.isComma());
972:       assertFalse(node1.isDec());
973:       assertFalse(node1.hasChildren());
974:       assertFalse(node1.isReturn());
975:       assertFalse(node1.isFalse());
976:       assertFalse(node1.isBreak());
977:       assertFalse(node1.isGetProp());
978:       assertFalse(node1.isSwitch());
979:       assertEquals(4095, node1.getCharno());
980:       assertFalse(node1.isAnd());
981:       assertFalse(node1.isInc());
982:       assertFalse(node1.isThrow());
983:       assertFalse(node1.isFor());
984:       assertFalse(node1.isLabelName());
985:       assertFalse(node1.isGetterDef());
986:       assertFalse(node1.isIf());
987:       assertFalse(node1.isNumber());
988:       assertFalse(node1.isArrayLit());
989:       assertFalse(node1.hasOneChild());
990:       assertFalse(node1.isIn());
991:       assertFalse(node1.isNE());
992:       assertFalse(node1.isCase());
993:       assertFalse(node1.isWith());
994:       assertFalse(node1.hasMoreThanOneChild());
995:       assertFalse(node1.isScript());
996:       assertFalse(node1.isCatch());
997:       assertFalse(node1.isInstanceOf());
998:       assertFalse(node1.isTry());
999:       assertFalse(node1.isRegExp());
1000:       assertFalse(node1.isHook());
1001:       assertFalse(node1.isThis());
1002:       assertFalse(node1.isBlock());
1003:       assertEquals(53, Node.INPUT_ID);
1004:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1005:       assertEquals(43, Node.IS_CONSTANT_NAME);
1006:       assertEquals(36, Node.QUOTED_PROP);
1007:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1008:       assertEquals(4095, Node.COLUMN_MASK);
1009:       assertEquals(37, Node.OPT_ARG_NAME);
1010:       assertEquals(48, Node.DIRECTIVES);
1011:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1012:       assertEquals(8, Node.FLAG_NO_THROWS);
1013:       assertEquals(56, Node.CHANGE_TIME);
1014:       assertEquals(47, Node.IS_DISPATCHER);
1015:       assertEquals(2, Node.POST_FLAG);
1016:       assertEquals(29, Node.JSDOC_INFO_PROP);
1017:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1018:       assertEquals(55, Node.INFERRED_FUNCTION);
1019:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1020:       assertEquals(57, Node.LAST_PROP);
1021:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1022:       assertEquals(39, Node.EMPTY_BLOCK);
1023:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1024:       assertEquals(54, Node.SLASH_V);
1025:       assertEquals(52, Node.LENGTH);
1026:       assertEquals(57, Node.REFLECTED_OBJECT);
1027:       assertEquals(30, Node.VAR_ARGS_NAME);
1028:       assertEquals(49, Node.DIRECT_EVAL);
1029:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1030:       assertEquals(40, Node.ORIGINALNAME_PROP);
1031:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1032:       assertEquals(12, Node.COLUMN_BITS);
1033:       assertEquals(46, Node.IS_NAMESPACE);
1034:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1035:       assertEquals(1, Node.DECR_FLAG);
1036:       assertEquals(50, Node.FREE_CALL);
1037:       assertEquals(32, Node.INCRDECR_PROP);
1038:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1039:       assertEquals(40, Node.ORIGINALNAME_PROP);
1040:       assertEquals(50, Node.FREE_CALL);
1041:       assertEquals(57, Node.REFLECTED_OBJECT);
1042:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1043:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1044:       assertEquals(48, Node.DIRECTIVES);
1045:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1046:       assertEquals(4095, Node.COLUMN_MASK);
1047:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1048:       assertEquals(1, Node.DECR_FLAG);
1049:       assertEquals(32, Node.INCRDECR_PROP);
1050:       assertEquals(46, Node.IS_NAMESPACE);
1051:       assertEquals(12, Node.COLUMN_BITS);
1052:       assertEquals(43, Node.IS_CONSTANT_NAME);
1053:       assertEquals(54, Node.SLASH_V);
1054:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1055:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1056:       assertEquals(47, Node.IS_DISPATCHER);
1057:       assertEquals(56, Node.CHANGE_TIME);
1058:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1059:       assertEquals(37, Node.OPT_ARG_NAME);
1060:       assertEquals(2, Node.POST_FLAG);
1061:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1062:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1063:       assertEquals(49, Node.DIRECT_EVAL);
1064:       assertEquals(30, Node.VAR_ARGS_NAME);
1065:       assertEquals(57, Node.LAST_PROP);
1066:       assertEquals(8, Node.FLAG_NO_THROWS);
1067:       assertEquals(39, Node.EMPTY_BLOCK);
1068:       assertEquals(36, Node.QUOTED_PROP);
1069:       assertEquals(52, Node.LENGTH);
1070:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1071:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1072:       assertEquals(29, Node.JSDOC_INFO_PROP);
1073:       assertEquals(53, Node.INPUT_ID);
1074:       assertEquals(55, Node.INFERRED_FUNCTION);
1075:       assertNull(set0);
1076:       
1077:       String string0 = node0.checkTreeEquals(node0);
1078:       assertSame(node0, node1);
1079:       assertFalse(node0.isArrayLit());
1080:       assertFalse(node0.isTry());
1081:       assertFalse(node0.isVoid());
1082:       assertFalse(node0.isIf());
1083:       assertFalse(node0.isNE());
1084:       assertFalse(node0.isEmpty());
1085:       assertFalse(node0.isDebugger());
1086:       assertFalse(node0.isTrue());
1087:       assertFalse(node0.isGetterDef());
1088:       assertFalse(node0.isCatch());
1089:       assertFalse(node0.isCase());
1090:       assertFalse(node0.isDelProp());
1091:       assertFalse(node0.isFor());
1092:       assertFalse(node0.isRegExp());
1093:       assertFalse(node0.isHook());
1094:       assertFalse(node0.isBlock());
1095:       assertFalse(node0.isAdd());
1096:       assertFalse(node0.isVar());
1097:       assertFalse(node0.isCall());
1098:       assertFalse(node0.isSwitch());
1099:       assertFalse(node0.isName());
1100:       assertFalse(node0.isNew());
1101:       assertFalse(node0.isStringKey());
1102:       assertFalse(node0.isNull());
1103:       assertEquals(4095, node0.getCharno());
1104:       assertFalse(node0.isAssignAdd());
1105:       assertFalse(node0.isLabel());
1106:       assertFalse(node0.isParamList());
1107:       assertFalse(node0.isDo());
1108:       assertFalse(node0.isDefaultCase());
1109:       assertEquals(0, node0.getChildCount());
1110:       assertFalse(node0.isCast());
1111:       assertFalse(node0.isExprResult());
1112:       assertFalse(node0.hasOneChild());
1113:       assertFalse(node0.isLabelName());
1114:       assertEquals(1073745919, node0.getSourcePosition());
1115:       assertFalse(node0.isScript());
1116:       assertFalse(node0.isObjectLit());
1117:       assertFalse(node0.isNumber());
1118:       assertFalse(node0.isNot());
1119:       assertFalse(node0.isOr());
1120:       assertFalse(node0.isReturn());
1121:       assertFalse(node0.isInstanceOf());
1122:       assertFalse(node0.isGetProp());
1123:       assertFalse(node0.isWhile());
1124:       assertFalse(node0.isBreak());
1125:       assertFalse(node0.isWith());
1126:       assertFalse(node0.hasChildren());
1127:       assertFalse(node0.isGetElem());
1128:       assertFalse(node0.isComma());
1129:       assertFalse(node0.isThis());
1130:       assertFalse(node0.hasMoreThanOneChild());
1131:       assertEquals(262144, node0.getType());
1132:       assertFalse(node0.isTypeOf());
1133:       assertFalse(node0.isDec());
1134:       assertFalse(node0.isAssign());
1135:       assertFalse(node0.isInc());
1136:       assertFalse(node0.isString());
1137:       assertFalse(node0.isIn());
1138:       assertFalse(node0.isSetterDef());
1139:       assertFalse(node0.isAnd());
1140:       assertFalse(node0.isThrow());
1141:       assertFalse(node0.isFunction());
1142:       assertFalse(node0.isContinue());
1143:       assertEquals(262144, node0.getLineno());
1144:       assertFalse(node0.isFalse());
1145:       assertEquals(53, Node.INPUT_ID);
1146:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1147:       assertEquals(43, Node.IS_CONSTANT_NAME);
1148:       assertEquals(36, Node.QUOTED_PROP);
1149:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1150:       assertEquals(4095, Node.COLUMN_MASK);
1151:       assertEquals(37, Node.OPT_ARG_NAME);
1152:       assertEquals(48, Node.DIRECTIVES);
1153:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1154:       assertEquals(8, Node.FLAG_NO_THROWS);
1155:       assertEquals(56, Node.CHANGE_TIME);
1156:       assertEquals(47, Node.IS_DISPATCHER);
1157:       assertEquals(2, Node.POST_FLAG);
1158:       assertEquals(29, Node.JSDOC_INFO_PROP);
1159:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1160:       assertEquals(55, Node.INFERRED_FUNCTION);
1161:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1162:       assertEquals(57, Node.LAST_PROP);
1163:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1164:       assertEquals(39, Node.EMPTY_BLOCK);
1165:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1166:       assertEquals(54, Node.SLASH_V);
1167:       assertEquals(52, Node.LENGTH);
1168:       assertEquals(57, Node.REFLECTED_OBJECT);
1169:       assertEquals(30, Node.VAR_ARGS_NAME);
1170:       assertEquals(49, Node.DIRECT_EVAL);
1171:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1172:       assertEquals(40, Node.ORIGINALNAME_PROP);
1173:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1174:       assertEquals(12, Node.COLUMN_BITS);
1175:       assertEquals(46, Node.IS_NAMESPACE);
1176:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1177:       assertEquals(1, Node.DECR_FLAG);
1178:       assertEquals(50, Node.FREE_CALL);
1179:       assertEquals(32, Node.INCRDECR_PROP);
1180:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1181:       assertNull(string0);
1182:       
1183:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
1184:       assertSame(node0, node1);
1185:       assertFalse(node0.isArrayLit());
1186:       assertFalse(node0.isTry());
1187:       assertFalse(node0.isVoid());
1188:       assertFalse(node0.isIf());
1189:       assertFalse(node0.isNE());
1190:       assertFalse(node0.isEmpty());
1191:       assertFalse(node0.isDebugger());
1192:       assertFalse(node0.isTrue());
1193:       assertFalse(node0.isGetterDef());
1194:       assertFalse(node0.isCatch());
1195:       assertFalse(node0.isCase());
1196:       assertFalse(node0.isDelProp());
1197:       assertFalse(node0.isFor());
1198:       assertFalse(node0.isRegExp());
1199:       assertFalse(node0.isHook());
1200:       assertFalse(node0.isBlock());
1201:       assertFalse(node0.isAdd());
1202:       assertFalse(node0.isVar());
1203:       assertFalse(node0.isCall());
1204:       assertFalse(node0.isSwitch());
1205:       assertFalse(node0.isName());
1206:       assertFalse(node0.isNew());
1207:       assertFalse(node0.isStringKey());
1208:       assertFalse(node0.isNull());
1209:       assertEquals(4095, node0.getCharno());
1210:       assertFalse(node0.isAssignAdd());
1211:       assertFalse(node0.isLabel());
1212:       assertFalse(node0.isParamList());
1213:       assertFalse(node0.isDo());
1214:       assertFalse(node0.isDefaultCase());
1215:       assertEquals(0, node0.getChildCount());
1216:       assertFalse(node0.isCast());
1217:       assertFalse(node0.isExprResult());
1218:       assertFalse(node0.hasOneChild());
1219:       assertFalse(node0.isLabelName());
1220:       assertEquals(1073745919, node0.getSourcePosition());
1221:       assertFalse(node0.isScript());
1222:       assertFalse(node0.isObjectLit());
1223:       assertFalse(node0.isNumber());
1224:       assertFalse(node0.isNot());
1225:       assertFalse(node0.isOr());
1226:       assertFalse(node0.isReturn());
1227:       assertFalse(node0.isInstanceOf());
1228:       assertFalse(node0.isGetProp());
1229:       assertFalse(node0.isWhile());
1230:       assertFalse(node0.isBreak());
1231:       assertFalse(node0.isWith());
1232:       assertFalse(node0.hasChildren());
1233:       assertFalse(node0.isGetElem());
1234:       assertFalse(node0.isComma());
1235:       assertFalse(node0.isThis());
1236:       assertFalse(node0.hasMoreThanOneChild());
1237:       assertEquals(262144, node0.getType());
1238:       assertFalse(node0.isTypeOf());
1239:       assertFalse(node0.isDec());
1240:       assertFalse(node0.isAssign());
1241:       assertFalse(node0.isInc());
1242:       assertFalse(node0.isString());
1243:       assertFalse(node0.isIn());
1244:       assertFalse(node0.isSetterDef());
1245:       assertFalse(node0.isAnd());
1246:       assertFalse(node0.isThrow());
1247:       assertFalse(node0.isFunction());
1248:       assertFalse(node0.isContinue());
1249:       assertEquals(262144, node0.getLineno());
1250:       assertFalse(node0.isFalse());
1251:       assertEquals(53, Node.INPUT_ID);
1252:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1253:       assertEquals(43, Node.IS_CONSTANT_NAME);
1254:       assertEquals(36, Node.QUOTED_PROP);
1255:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1256:       assertEquals(4095, Node.COLUMN_MASK);
1257:       assertEquals(37, Node.OPT_ARG_NAME);
1258:       assertEquals(48, Node.DIRECTIVES);
1259:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1260:       assertEquals(8, Node.FLAG_NO_THROWS);
1261:       assertEquals(56, Node.CHANGE_TIME);
1262:       assertEquals(47, Node.IS_DISPATCHER);
1263:       assertEquals(2, Node.POST_FLAG);
1264:       assertEquals(29, Node.JSDOC_INFO_PROP);
1265:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1266:       assertEquals(55, Node.INFERRED_FUNCTION);
1267:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1268:       assertEquals(57, Node.LAST_PROP);
1269:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1270:       assertEquals(39, Node.EMPTY_BLOCK);
1271:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1272:       assertEquals(54, Node.SLASH_V);
1273:       assertEquals(52, Node.LENGTH);
1274:       assertEquals(57, Node.REFLECTED_OBJECT);
1275:       assertEquals(30, Node.VAR_ARGS_NAME);
1276:       assertEquals(49, Node.DIRECT_EVAL);
1277:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1278:       assertEquals(40, Node.ORIGINALNAME_PROP);
1279:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1280:       assertEquals(12, Node.COLUMN_BITS);
1281:       assertEquals(46, Node.IS_NAMESPACE);
1282:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1283:       assertEquals(1, Node.DECR_FLAG);
1284:       assertEquals(50, Node.FREE_CALL);
1285:       assertEquals(32, Node.INCRDECR_PROP);
1286:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1287:       assertNull(staticSourceFile0);
1288:       
1289:       String string1 = node0.getSourceFileName();
1290:       assertSame(node0, node1);
1291:       assertFalse(node0.isArrayLit());
1292:       assertFalse(node0.isTry());
1293:       assertFalse(node0.isVoid());
1294:       assertFalse(node0.isIf());
1295:       assertFalse(node0.isNE());
1296:       assertFalse(node0.isEmpty());
1297:       assertFalse(node0.isDebugger());
1298:       assertFalse(node0.isTrue());
1299:       assertFalse(node0.isGetterDef());
1300:       assertFalse(node0.isCatch());
1301:       assertFalse(node0.isCase());
1302:       assertFalse(node0.isDelProp());
1303:       assertFalse(node0.isFor());
1304:       assertFalse(node0.isRegExp());
1305:       assertFalse(node0.isHook());
1306:       assertFalse(node0.isBlock());
1307:       assertFalse(node0.isAdd());
1308:       assertFalse(node0.isVar());
1309:       assertFalse(node0.isCall());
1310:       assertFalse(node0.isSwitch());
1311:       assertFalse(node0.isName());
1312:       assertFalse(node0.isNew());
1313:       assertFalse(node0.isStringKey());
1314:       assertFalse(node0.isNull());
1315:       assertEquals(4095, node0.getCharno());
1316:       assertFalse(node0.isAssignAdd());
1317:       assertFalse(node0.isLabel());
1318:       assertFalse(node0.isParamList());
1319:       assertFalse(node0.isDo());
1320:       assertFalse(node0.isDefaultCase());
1321:       assertEquals(0, node0.getChildCount());
1322:       assertFalse(node0.isCast());
1323:       assertFalse(node0.isExprResult());
1324:       assertFalse(node0.hasOneChild());
1325:       assertFalse(node0.isLabelName());
1326:       assertEquals(1073745919, node0.getSourcePosition());
1327:       assertFalse(node0.isScript());
1328:       assertFalse(node0.isObjectLit());
1329:       assertFalse(node0.isNumber());
1330:       assertFalse(node0.isNot());
1331:       assertFalse(node0.isOr());
1332:       assertFalse(node0.isReturn());
1333:       assertFalse(node0.isInstanceOf());
1334:       assertFalse(node0.isGetProp());
1335:       assertFalse(node0.isWhile());
1336:       assertFalse(node0.isBreak());
1337:       assertFalse(node0.isWith());
1338:       assertFalse(node0.hasChildren());
1339:       assertFalse(node0.isGetElem());
1340:       assertFalse(node0.isComma());
1341:       assertFalse(node0.isThis());
1342:       assertFalse(node0.hasMoreThanOneChild());
1343:       assertEquals(262144, node0.getType());
1344:       assertFalse(node0.isTypeOf());
1345:       assertFalse(node0.isDec());
1346:       assertFalse(node0.isAssign());
1347:       assertFalse(node0.isInc());
1348:       assertFalse(node0.isString());
1349:       assertFalse(node0.isIn());
1350:       assertFalse(node0.isSetterDef());
1351:       assertFalse(node0.isAnd());
1352:       assertFalse(node0.isThrow());
1353:       assertFalse(node0.isFunction());
1354:       assertFalse(node0.isContinue());
1355:       assertEquals(262144, node0.getLineno());
1356:       assertFalse(node0.isFalse());
1357:       assertEquals(53, Node.INPUT_ID);
1358:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1359:       assertEquals(43, Node.IS_CONSTANT_NAME);
1360:       assertEquals(36, Node.QUOTED_PROP);
1361:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1362:       assertEquals(4095, Node.COLUMN_MASK);
1363:       assertEquals(37, Node.OPT_ARG_NAME);
1364:       assertEquals(48, Node.DIRECTIVES);
1365:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1366:       assertEquals(8, Node.FLAG_NO_THROWS);
1367:       assertEquals(56, Node.CHANGE_TIME);
1368:       assertEquals(47, Node.IS_DISPATCHER);
1369:       assertEquals(2, Node.POST_FLAG);
1370:       assertEquals(29, Node.JSDOC_INFO_PROP);
1371:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1372:       assertEquals(55, Node.INFERRED_FUNCTION);
1373:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1374:       assertEquals(57, Node.LAST_PROP);
1375:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1376:       assertEquals(39, Node.EMPTY_BLOCK);
1377:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1378:       assertEquals(54, Node.SLASH_V);
1379:       assertEquals(52, Node.LENGTH);
1380:       assertEquals(57, Node.REFLECTED_OBJECT);
1381:       assertEquals(30, Node.VAR_ARGS_NAME);
1382:       assertEquals(49, Node.DIRECT_EVAL);
1383:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1384:       assertEquals(40, Node.ORIGINALNAME_PROP);
1385:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1386:       assertEquals(12, Node.COLUMN_BITS);
1387:       assertEquals(46, Node.IS_NAMESPACE);
1388:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1389:       assertEquals(1, Node.DECR_FLAG);
1390:       assertEquals(50, Node.FREE_CALL);
1391:       assertEquals(32, Node.INCRDECR_PROP);
1392:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1393:       assertNull(string1);
1394:       
1395:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(43);
1396:       assertEquals(43, node_SideEffectFlags0.valueOf());
1397:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1398:       assertNotNull(node_SideEffectFlags0);
1399:       
1400:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
1401:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1402:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1403:       assertEquals(0, node_SideEffectFlags0.valueOf());
1404:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1405:       assertEquals(0, node_SideEffectFlags1.valueOf());
1406:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1407:       assertNotNull(node_SideEffectFlags1);
1408:       
1409:       Node node2 = node0.srcref(node0);
1410:       assertSame(node0, node1);
1411:       assertSame(node0, node2);
1412:       assertSame(node2, node0);
1413:       assertSame(node2, node1);
1414:       assertFalse(node0.isArrayLit());
1415:       assertFalse(node0.isTry());
1416:       assertFalse(node0.isVoid());
1417:       assertFalse(node0.isIf());
1418:       assertFalse(node0.isNE());
1419:       assertFalse(node0.isEmpty());
1420:       assertFalse(node0.isDebugger());
1421:       assertFalse(node0.isTrue());
1422:       assertFalse(node0.isGetterDef());
1423:       assertFalse(node0.isCatch());
1424:       assertFalse(node0.isCase());
1425:       assertFalse(node0.isDelProp());
1426:       assertFalse(node0.isFor());
1427:       assertFalse(node0.isRegExp());
1428:       assertFalse(node0.isHook());
1429:       assertFalse(node0.isBlock());
1430:       assertFalse(node0.isAdd());
1431:       assertFalse(node0.isVar());
1432:       assertFalse(node0.isCall());
1433:       assertFalse(node0.isSwitch());
1434:       assertFalse(node0.isName());
1435:       assertFalse(node0.isNew());
1436:       assertFalse(node0.isStringKey());
1437:       assertFalse(node0.isNull());
1438:       assertEquals(4095, node0.getCharno());
1439:       assertFalse(node0.isAssignAdd());
1440:       assertFalse(node0.isLabel());
1441:       assertFalse(node0.isParamList());
1442:       assertFalse(node0.isDo());
1443:       assertFalse(node0.isDefaultCase());
1444:       assertEquals(0, node0.getChildCount());
1445:       assertFalse(node0.isCast());
1446:       assertFalse(node0.isExprResult());
1447:       assertFalse(node0.hasOneChild());
1448:       assertFalse(node0.isLabelName());
1449:       assertEquals(1073745919, node0.getSourcePosition());
1450:       assertFalse(node0.isScript());
1451:       assertFalse(node0.isObjectLit());
1452:       assertFalse(node0.isNumber());
1453:       assertFalse(node0.isNot());
1454:       assertFalse(node0.isOr());
1455:       assertFalse(node0.isReturn());
1456:       assertFalse(node0.isInstanceOf());
1457:       assertFalse(node0.isGetProp());
1458:       assertFalse(node0.isWhile());
1459:       assertFalse(node0.isBreak());
1460:       assertFalse(node0.isWith());
1461:       assertFalse(node0.hasChildren());
1462:       assertFalse(node0.isGetElem());
1463:       assertFalse(node0.isComma());
1464:       assertFalse(node0.isThis());
1465:       assertFalse(node0.hasMoreThanOneChild());
1466:       assertEquals(262144, node0.getType());
1467:       assertFalse(node0.isTypeOf());
1468:       assertFalse(node0.isDec());
1469:       assertFalse(node0.isAssign());
1470:       assertFalse(node0.isInc());
1471:       assertFalse(node0.isString());
1472:       assertFalse(node0.isIn());
1473:       assertFalse(node0.isSetterDef());
1474:       assertFalse(node0.isAnd());
1475:       assertFalse(node0.isThrow());
1476:       assertFalse(node0.isFunction());
1477:       assertFalse(node0.isContinue());
1478:       assertEquals(262144, node0.getLineno());
1479:       assertFalse(node0.isFalse());
1480:       assertFalse(node2.isSetterDef());
1481:       assertFalse(node2.isNull());
1482:       assertEquals(262144, node2.getLineno());
1483:       assertFalse(node2.isVar());
1484:       assertEquals(0, node2.getChildCount());
1485:       assertFalse(node2.isBlock());
1486:       assertFalse(node2.isDefaultCase());
1487:       assertFalse(node2.isFunction());
1488:       assertFalse(node2.isDebugger());
1489:       assertFalse(node2.isContinue());
1490:       assertFalse(node2.isArrayLit());
1491:       assertFalse(node2.isStringKey());
1492:       assertFalse(node2.isParamList());
1493:       assertFalse(node2.isTypeOf());
1494:       assertFalse(node2.hasChildren());
1495:       assertFalse(node2.isDec());
1496:       assertFalse(node2.isOr());
1497:       assertFalse(node2.isAssign());
1498:       assertFalse(node2.isEmpty());
1499:       assertEquals(1073745919, node2.getSourcePosition());
1500:       assertFalse(node2.isGetElem());
1501:       assertFalse(node2.isDo());
1502:       assertFalse(node2.isAssignAdd());
1503:       assertFalse(node2.isLabel());
1504:       assertFalse(node2.isReturn());
1505:       assertFalse(node2.isWhile());
1506:       assertFalse(node2.isExprResult());
1507:       assertFalse(node2.isTrue());
1508:       assertFalse(node2.isVoid());
1509:       assertFalse(node2.isNew());
1510:       assertFalse(node2.isAdd());
1511:       assertFalse(node2.isCall());
1512:       assertFalse(node2.isDelProp());
1513:       assertFalse(node2.isName());
1514:       assertFalse(node2.isThis());
1515:       assertFalse(node2.isBreak());
1516:       assertFalse(node2.isGetProp());
1517:       assertFalse(node2.isComma());
1518:       assertFalse(node2.isInstanceOf());
1519:       assertFalse(node2.isFalse());
1520:       assertEquals(262144, node2.getType());
1521:       assertFalse(node2.isHook());
1522:       assertFalse(node2.isThrow());
1523:       assertFalse(node2.isSwitch());
1524:       assertEquals(4095, node2.getCharno());
1525:       assertFalse(node2.isScript());
1526:       assertFalse(node2.isNot());
1527:       assertFalse(node2.isString());
1528:       assertFalse(node2.isCast());
1529:       assertFalse(node2.isObjectLit());
1530:       assertFalse(node2.isLabelName());
1531:       assertFalse(node2.isAnd());
1532:       assertFalse(node2.isNE());
1533:       assertFalse(node2.isGetterDef());
1534:       assertFalse(node2.isIn());
1535:       assertFalse(node2.isNumber());
1536:       assertFalse(node2.hasMoreThanOneChild());
1537:       assertFalse(node2.isCase());
1538:       assertFalse(node2.hasOneChild());
1539:       assertFalse(node2.isTry());
1540:       assertFalse(node2.isFor());
1541:       assertFalse(node2.isInc());
1542:       assertFalse(node2.isRegExp());
1543:       assertFalse(node2.isWith());
1544:       assertFalse(node2.isCatch());
1545:       assertFalse(node2.isIf());
1546:       assertEquals(53, Node.INPUT_ID);
1547:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1548:       assertEquals(43, Node.IS_CONSTANT_NAME);
1549:       assertEquals(36, Node.QUOTED_PROP);
1550:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1551:       assertEquals(4095, Node.COLUMN_MASK);
1552:       assertEquals(37, Node.OPT_ARG_NAME);
1553:       assertEquals(48, Node.DIRECTIVES);
1554:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1555:       assertEquals(8, Node.FLAG_NO_THROWS);
1556:       assertEquals(56, Node.CHANGE_TIME);
1557:       assertEquals(47, Node.IS_DISPATCHER);
1558:       assertEquals(2, Node.POST_FLAG);
1559:       assertEquals(29, Node.JSDOC_INFO_PROP);
1560:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1561:       assertEquals(55, Node.INFERRED_FUNCTION);
1562:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1563:       assertEquals(57, Node.LAST_PROP);
1564:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1565:       assertEquals(39, Node.EMPTY_BLOCK);
1566:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1567:       assertEquals(54, Node.SLASH_V);
1568:       assertEquals(52, Node.LENGTH);
1569:       assertEquals(57, Node.REFLECTED_OBJECT);
1570:       assertEquals(30, Node.VAR_ARGS_NAME);
1571:       assertEquals(49, Node.DIRECT_EVAL);
1572:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1573:       assertEquals(40, Node.ORIGINALNAME_PROP);
1574:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1575:       assertEquals(12, Node.COLUMN_BITS);
1576:       assertEquals(46, Node.IS_NAMESPACE);
1577:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1578:       assertEquals(1, Node.DECR_FLAG);
1579:       assertEquals(50, Node.FREE_CALL);
1580:       assertEquals(32, Node.INCRDECR_PROP);
1581:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1582:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1583:       assertEquals(39, Node.EMPTY_BLOCK);
1584:       assertEquals(48, Node.DIRECTIVES);
1585:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1586:       assertEquals(55, Node.INFERRED_FUNCTION);
1587:       assertEquals(57, Node.REFLECTED_OBJECT);
1588:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1589:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1590:       assertEquals(52, Node.LENGTH);
1591:       assertEquals(50, Node.FREE_CALL);
1592:       assertEquals(8, Node.FLAG_NO_THROWS);
1593:       assertEquals(36, Node.QUOTED_PROP);
1594:       assertEquals(1, Node.DECR_FLAG);
1595:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1596:       assertEquals(49, Node.DIRECT_EVAL);
1597:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1598:       assertEquals(12, Node.COLUMN_BITS);
1599:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1600:       assertEquals(4095, Node.COLUMN_MASK);
1601:       assertEquals(47, Node.IS_DISPATCHER);
1602:       assertEquals(56, Node.CHANGE_TIME);
1603:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1604:       assertEquals(29, Node.JSDOC_INFO_PROP);
1605:       assertEquals(37, Node.OPT_ARG_NAME);
1606:       assertEquals(32, Node.INCRDECR_PROP);
1607:       assertEquals(46, Node.IS_NAMESPACE);
1608:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1609:       assertEquals(53, Node.INPUT_ID);
1610:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1611:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1612:       assertEquals(57, Node.LAST_PROP);
1613:       assertEquals(43, Node.IS_CONSTANT_NAME);
1614:       assertEquals(54, Node.SLASH_V);
1615:       assertEquals(40, Node.ORIGINALNAME_PROP);
1616:       assertEquals(2, Node.POST_FLAG);
1617:       assertEquals(30, Node.VAR_ARGS_NAME);
1618:       assertNotNull(node2);
1619:       
1620:       boolean boolean3 = node2.getBooleanProp(0);
1621:       assertSame(node0, node1);
1622:       assertSame(node0, node2);
1623:       assertSame(node2, node0);
1624:       assertSame(node2, node1);
1625:       assertFalse(boolean3);
1626:       assertFalse(node0.isArrayLit());
1627:       assertFalse(node0.isTry());
1628:       assertFalse(node0.isVoid());
1629:       assertFalse(node0.isIf());
1630:       assertFalse(node0.isNE());
1631:       assertFalse(node0.isEmpty());
1632:       assertFalse(node0.isDebugger());
1633:       assertFalse(node0.isTrue());
1634:       assertFalse(node0.isGetterDef());
1635:       assertFalse(node0.isCatch());
1636:       assertFalse(node0.isCase());
1637:       assertFalse(node0.isDelProp());
1638:       assertFalse(node0.isFor());
1639:       assertFalse(node0.isRegExp());
1640:       assertFalse(node0.isHook());
1641:       assertFalse(node0.isBlock());
1642:       assertFalse(node0.isAdd());
1643:       assertFalse(node0.isVar());
1644:       assertFalse(node0.isCall());
1645:       assertFalse(node0.isSwitch());
1646:       assertFalse(node0.isName());
1647:       assertFalse(node0.isNew());
1648:       assertFalse(node0.isStringKey());
1649:       assertFalse(node0.isNull());
1650:       assertEquals(4095, node0.getCharno());
1651:       assertFalse(node0.isAssignAdd());
1652:       assertFalse(node0.isLabel());
1653:       assertFalse(node0.isParamList());
1654:       assertFalse(node0.isDo());
1655:       assertFalse(node0.isDefaultCase());
1656:       assertEquals(0, node0.getChildCount());
1657:       assertFalse(node0.isCast());
1658:       assertFalse(node0.isExprResult());
1659:       assertFalse(node0.hasOneChild());
1660:       assertFalse(node0.isLabelName());
1661:       assertEquals(1073745919, node0.getSourcePosition());
1662:       assertFalse(node0.isScript());
1663:       assertFalse(node0.isObjectLit());
1664:       assertFalse(node0.isNumber());
1665:       assertFalse(node0.isNot());
1666:       assertFalse(node0.isOr());
1667:       assertFalse(node0.isReturn());
1668:       assertFalse(node0.isInstanceOf());
1669:       assertFalse(node0.isGetProp());
1670:       assertFalse(node0.isWhile());
1671:       assertFalse(node0.isBreak());
1672:       assertFalse(node0.isWith());
1673:       assertFalse(node0.hasChildren());
1674:       assertFalse(node0.isGetElem());
1675:       assertFalse(node0.isComma());
1676:       assertFalse(node0.isThis());
1677:       assertFalse(node0.hasMoreThanOneChild());
1678:       assertEquals(262144, node0.getType());
1679:       assertFalse(node0.isTypeOf());
1680:       assertFalse(node0.isDec());
1681:       assertFalse(node0.isAssign());
1682:       assertFalse(node0.isInc());
1683:       assertFalse(node0.isString());
1684:       assertFalse(node0.isIn());
1685:       assertFalse(node0.isSetterDef());
1686:       assertFalse(node0.isAnd());
1687:       assertFalse(node0.isThrow());
1688:       assertFalse(node0.isFunction());
1689:       assertFalse(node0.isContinue());
1690:       assertEquals(262144, node0.getLineno());
1691:       assertFalse(node0.isFalse());
1692:       assertFalse(node2.isSetterDef());
1693:       assertFalse(node2.isNull());
1694:       assertEquals(262144, node2.getLineno());
1695:       assertFalse(node2.isVar());
1696:       assertEquals(0, node2.getChildCount());
1697:       assertFalse(node2.isBlock());
1698:       assertFalse(node2.isDefaultCase());
1699:       assertFalse(node2.isFunction());
1700:       assertFalse(node2.isDebugger());
1701:       assertFalse(node2.isContinue());
1702:       assertFalse(node2.isArrayLit());
1703:       assertFalse(node2.isStringKey());
1704:       assertFalse(node2.isParamList());
1705:       assertFalse(node2.isTypeOf());
1706:       assertFalse(node2.hasChildren());
1707:       assertFalse(node2.isDec());
1708:       assertFalse(node2.isOr());
1709:       assertFalse(node2.isAssign());
1710:       assertFalse(node2.isEmpty());
1711:       assertEquals(1073745919, node2.getSourcePosition());
1712:       assertFalse(node2.isGetElem());
1713:       assertFalse(node2.isDo());
1714:       assertFalse(node2.isAssignAdd());
1715:       assertFalse(node2.isLabel());
1716:       assertFalse(node2.isReturn());
1717:       assertFalse(node2.isWhile());
1718:       assertFalse(node2.isExprResult());
1719:       assertFalse(node2.isTrue());
1720:       assertFalse(node2.isVoid());
1721:       assertFalse(node2.isNew());
1722:       assertFalse(node2.isAdd());
1723:       assertFalse(node2.isCall());
1724:       assertFalse(node2.isDelProp());
1725:       assertFalse(node2.isName());
1726:       assertFalse(node2.isThis());
1727:       assertFalse(node2.isBreak());
1728:       assertFalse(node2.isGetProp());
1729:       assertFalse(node2.isComma());
1730:       assertFalse(node2.isInstanceOf());
1731:       assertFalse(node2.isFalse());
1732:       assertEquals(262144, node2.getType());
1733:       assertFalse(node2.isHook());
1734:       assertFalse(node2.isThrow());
1735:       assertFalse(node2.isSwitch());
1736:       assertEquals(4095, node2.getCharno());
1737:       assertFalse(node2.isScript());
1738:       assertFalse(node2.isNot());
1739:       assertFalse(node2.isString());
1740:       assertFalse(node2.isCast());
1741:       assertFalse(node2.isObjectLit());
1742:       assertFalse(node2.isLabelName());
1743:       assertFalse(node2.isAnd());
1744:       assertFalse(node2.isNE());
1745:       assertFalse(node2.isGetterDef());
1746:       assertFalse(node2.isIn());
1747:       assertFalse(node2.isNumber());
1748:       assertFalse(node2.hasMoreThanOneChild());
1749:       assertFalse(node2.isCase());
1750:       assertFalse(node2.hasOneChild());
1751:       assertFalse(node2.isTry());
1752:       assertFalse(node2.isFor());
1753:       assertFalse(node2.isInc());
1754:       assertFalse(node2.isRegExp());
1755:       assertFalse(node2.isWith());
1756:       assertFalse(node2.isCatch());
1757:       assertFalse(node2.isIf());
1758:       assertEquals(53, Node.INPUT_ID);
1759:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1760:       assertEquals(43, Node.IS_CONSTANT_NAME);
1761:       assertEquals(36, Node.QUOTED_PROP);
1762:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1763:       assertEquals(4095, Node.COLUMN_MASK);
1764:       assertEquals(37, Node.OPT_ARG_NAME);
1765:       assertEquals(48, Node.DIRECTIVES);
1766:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1767:       assertEquals(8, Node.FLAG_NO_THROWS);
1768:       assertEquals(56, Node.CHANGE_TIME);
1769:       assertEquals(47, Node.IS_DISPATCHER);
1770:       assertEquals(2, Node.POST_FLAG);
1771:       assertEquals(29, Node.JSDOC_INFO_PROP);
1772:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1773:       assertEquals(55, Node.INFERRED_FUNCTION);
1774:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1775:       assertEquals(57, Node.LAST_PROP);
1776:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1777:       assertEquals(39, Node.EMPTY_BLOCK);
1778:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1779:       assertEquals(54, Node.SLASH_V);
1780:       assertEquals(52, Node.LENGTH);
1781:       assertEquals(57, Node.REFLECTED_OBJECT);
1782:       assertEquals(30, Node.VAR_ARGS_NAME);
1783:       assertEquals(49, Node.DIRECT_EVAL);
1784:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1785:       assertEquals(40, Node.ORIGINALNAME_PROP);
1786:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1787:       assertEquals(12, Node.COLUMN_BITS);
1788:       assertEquals(46, Node.IS_NAMESPACE);
1789:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1790:       assertEquals(1, Node.DECR_FLAG);
1791:       assertEquals(50, Node.FREE_CALL);
1792:       assertEquals(32, Node.INCRDECR_PROP);
1793:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1794:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1795:       assertEquals(39, Node.EMPTY_BLOCK);
1796:       assertEquals(48, Node.DIRECTIVES);
1797:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1798:       assertEquals(55, Node.INFERRED_FUNCTION);
1799:       assertEquals(57, Node.REFLECTED_OBJECT);
1800:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1801:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1802:       assertEquals(52, Node.LENGTH);
1803:       assertEquals(50, Node.FREE_CALL);
1804:       assertEquals(8, Node.FLAG_NO_THROWS);
1805:       assertEquals(36, Node.QUOTED_PROP);
1806:       assertEquals(1, Node.DECR_FLAG);
1807:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1808:       assertEquals(49, Node.DIRECT_EVAL);
1809:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1810:       assertEquals(12, Node.COLUMN_BITS);
1811:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1812:       assertEquals(4095, Node.COLUMN_MASK);
1813:       assertEquals(47, Node.IS_DISPATCHER);
1814:       assertEquals(56, Node.CHANGE_TIME);
1815:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1816:       assertEquals(29, Node.JSDOC_INFO_PROP);
1817:       assertEquals(37, Node.OPT_ARG_NAME);
1818:       assertEquals(32, Node.INCRDECR_PROP);
1819:       assertEquals(46, Node.IS_NAMESPACE);
1820:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1821:       assertEquals(53, Node.INPUT_ID);
1822:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1823:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1824:       assertEquals(57, Node.LAST_PROP);
1825:       assertEquals(43, Node.IS_CONSTANT_NAME);
1826:       assertEquals(54, Node.SLASH_V);
1827:       assertEquals(40, Node.ORIGINALNAME_PROP);
1828:       assertEquals(2, Node.POST_FLAG);
1829:       assertEquals(30, Node.VAR_ARGS_NAME);
1830:       assertTrue(boolean3 == boolean1);
1831:       assertFalse(boolean3 == boolean0);
1832:       assertTrue(boolean3 == boolean2);
1833:       
1834:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
1835:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1836:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1837:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1838:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1839:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1840:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1841:       assertEquals(0, node_SideEffectFlags0.valueOf());
1842:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1843:       assertEquals(0, node_SideEffectFlags1.valueOf());
1844:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1845:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1846:       assertEquals(0, node_SideEffectFlags2.valueOf());
1847:       assertNotNull(node_SideEffectFlags2);
1848:       
1849:       int int0 = Node.mergeLineCharNo(49, Integer.MIN_VALUE);
1850:       assertEquals((-1), int0);
1851:   }
1852: }
RegularFileObject[/tmp/EvoSuite_56_1628255806121/com/google/javascript/rhino/Node_56_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:46 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_56_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_56_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_56_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.SimpleErrorReporter",
266:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
267:       "com.google.common.base.Joiner",
268:       "com.google.common.base.Preconditions",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.Token",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.base.Objects",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.common.collect.Sets",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.javascript.rhino.InputId",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.AbstractIndexedListIterator",
349:       "com.google.common.collect.Iterators$11",
350:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
351:       "com.google.javascript.rhino.jstype.TemplatizedType",
352:       "com.google.javascript.rhino.jstype.NamedType",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableList$1",
355:       "com.google.common.collect.Platform",
356:       "com.google.javascript.rhino.JSTypeExpression",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 13:16:46.727 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(262144, "", 262144, 262144);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals(1073745919, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(262144, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(262144, node0.getLineno());
assertFalse(node0.isFalse());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node0);

node0.setOptionalArg(false);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals(1073745919, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(262144, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(262144, node0.getLineno());
assertFalse(node0.isFalse());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node node1 = node0.srcrefTree(node0);
assertSame(node0, node1);
assertSame(node1, node0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals(1073745919, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(262144, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(262144, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isDefaultCase());
assertEquals(262144, node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertEquals(1073745919, node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertEquals(262144, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isSwitch());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertNotNull(node1);

boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
assertSame(node0, node1);
assertTrue(boolean0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals(1073745919, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(262144, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(262144, node0.getLineno());
assertFalse(node0.isFalse());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean1 = node0.isCall();
assertSame(node0, node1);
assertFalse(boolean1);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals(1073745919, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(262144, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(262144, node0.getLineno());
assertFalse(node0.isFalse());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(boolean1 == boolean0);

boolean boolean2 = node0.isCast();
assertSame(node0, node1);
assertFalse(boolean2);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals(1073745919, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(262144, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(262144, node0.getLineno());
assertFalse(node0.isFalse());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

Iterable<Node> iterable0 = node0.children();
assertSame(node0, node1);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals(1073745919, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(262144, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(262144, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(iterable0.contains(node1));
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(iterable0);

Set<String> set0 = node1.getDirectives();
assertSame(node0, node1);
assertSame(node1, node0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals(1073745919, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(262144, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(262144, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isDefaultCase());
assertEquals(262144, node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertEquals(1073745919, node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertEquals(262144, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isSwitch());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertNull(set0);

String string0 = node0.checkTreeEquals(node0);
assertSame(node0, node1);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals(1073745919, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(262144, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(262144, node0.getLineno());
assertFalse(node0.isFalse());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNull(string0);

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertSame(node0, node1);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals(1073745919, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(262144, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(262144, node0.getLineno());
assertFalse(node0.isFalse());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNull(staticSourceFile0);

String string1 = node0.getSourceFileName();
assertSame(node0, node1);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals(1073745919, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(262144, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(262144, node0.getLineno());
assertFalse(node0.isFalse());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNull(string1);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(43);
assertEquals(43, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertNotNull(node_SideEffectFlags1);

Node node2 = node0.srcref(node0);
assertSame(node0, node1);
assertSame(node0, node2);
assertSame(node2, node0);
assertSame(node2, node1);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals(1073745919, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(262144, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(262144, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertEquals(262144, node2.getLineno());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isBlock());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isContinue());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isOr());
assertFalse(node2.isAssign());
assertFalse(node2.isEmpty());
assertEquals(1073745919, node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFalse());
assertEquals(262144, node2.getType());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isSwitch());
assertEquals(4095, node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isCast());
assertFalse(node2.isObjectLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isNumber());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node2);

boolean boolean3 = node2.getBooleanProp(0);
assertSame(node0, node1);
assertSame(node0, node2);
assertSame(node2, node0);
assertSame(node2, node1);
assertFalse(boolean3);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals(1073745919, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(262144, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(262144, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertEquals(262144, node2.getLineno());
assertFalse(node2.isVar());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isBlock());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isContinue());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isOr());
assertFalse(node2.isAssign());
assertFalse(node2.isEmpty());
assertEquals(1073745919, node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFalse());
assertEquals(262144, node2.getType());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isSwitch());
assertEquals(4095, node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isCast());
assertFalse(node2.isObjectLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isNumber());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertNotNull(node_SideEffectFlags2);

int int0 = Node.mergeLineCharNo(49, Integer.MIN_VALUE);
assertEquals((-1), int0);


[MASTER] 13:16:49.554 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_63_1628255808981/com/google/javascript/rhino/Node_63_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_63_1628255808981/com/google/javascript/rhino/Node_63_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:49.554 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:49.554 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:49.555 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 925
[MASTER] 13:16:49.557 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_63_1628255808981/com/google/javascript/rhino/Node_63_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:48 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_63_tmp__ESTest extends Node_63_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(10);
21:       assertFalse(node0.isAssign());
22:       assertFalse(node0.isLabelName());
23:       assertFalse(node0.hasChildren());
24:       assertFalse(node0.isGetElem());
25:       assertFalse(node0.isCast());
26:       assertEquals((-1), node0.getSourcePosition());
27:       assertFalse(node0.isDec());
28:       assertFalse(node0.isNumber());
29:       assertFalse(node0.isTypeOf());
30:       assertFalse(node0.isOr());
31:       assertEquals((-1), node0.getLineno());
32:       assertFalse(node0.isExprResult());
33:       assertFalse(node0.isDo());
34:       assertFalse(node0.isContinue());
35:       assertFalse(node0.isAdd());
36:       assertFalse(node0.isAssignAdd());
37:       assertFalse(node0.isLabel());
38:       assertFalse(node0.isNew());
39:       assertFalse(node0.isVar());
40:       assertFalse(node0.isStringKey());
41:       assertEquals((-1), node0.getCharno());
42:       assertFalse(node0.isSwitch());
43:       assertFalse(node0.isParamList());
44:       assertFalse(node0.isWith());
45:       assertFalse(node0.isCase());
46:       assertFalse(node0.isCatch());
47:       assertFalse(node0.hasMoreThanOneChild());
48:       assertFalse(node0.isScript());
49:       assertFalse(node0.isInstanceOf());
50:       assertFalse(node0.isRegExp());
51:       assertFalse(node0.isTry());
52:       assertFalse(node0.isHook());
53:       assertFalse(node0.isThis());
54:       assertFalse(node0.isBlock());
55:       assertEquals(10, node0.getType());
56:       assertFalse(node0.hasOneChild());
57:       assertFalse(node0.isFor());
58:       assertFalse(node0.isEmpty());
59:       assertFalse(node0.isGetterDef());
60:       assertFalse(node0.isTrue());
61:       assertFalse(node0.isNE());
62:       assertFalse(node0.isArrayLit());
63:       assertFalse(node0.isDelProp());
64:       assertFalse(node0.isIf());
65:       assertFalse(node0.isVoid());
66:       assertFalse(node0.isIn());
67:       assertEquals(0, node0.getChildCount());
68:       assertFalse(node0.isFunction());
69:       assertFalse(node0.isInc());
70:       assertFalse(node0.isSetterDef());
71:       assertFalse(node0.isDefaultCase());
72:       assertFalse(node0.isBreak());
73:       assertFalse(node0.isThrow());
74:       assertFalse(node0.isCall());
75:       assertFalse(node0.isNull());
76:       assertFalse(node0.isComma());
77:       assertFalse(node0.isFalse());
78:       assertFalse(node0.isAnd());
79:       assertFalse(node0.isName());
80:       assertFalse(node0.isNot());
81:       assertFalse(node0.isString());
82:       assertFalse(node0.isWhile());
83:       assertFalse(node0.isDebugger());
84:       assertFalse(node0.isObjectLit());
85:       assertFalse(node0.isGetProp());
86:       assertFalse(node0.isReturn());
87:       assertEquals(29, Node.JSDOC_INFO_PROP);
88:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
89:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
90:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
91:       assertEquals(37, Node.OPT_ARG_NAME);
92:       assertEquals(47, Node.IS_DISPATCHER);
93:       assertEquals(2, Node.POST_FLAG);
94:       assertEquals(12, Node.COLUMN_BITS);
95:       assertEquals(32, Node.INCRDECR_PROP);
96:       assertEquals(1, Node.DECR_FLAG);
97:       assertEquals(54, Node.SLASH_V);
98:       assertEquals(43, Node.IS_CONSTANT_NAME);
99:       assertEquals(46, Node.IS_NAMESPACE);
100:       assertEquals(50, Node.FREE_CALL);
101:       assertEquals(51, Node.STATIC_SOURCE_FILE);
102:       assertEquals(40, Node.ORIGINALNAME_PROP);
103:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
104:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
106:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
107:       assertEquals(30, Node.VAR_ARGS_NAME);
108:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
109:       assertEquals(4095, Node.COLUMN_MASK);
110:       assertEquals(55, Node.INFERRED_FUNCTION);
111:       assertEquals(57, Node.LAST_PROP);
112:       assertEquals(15, Node.NO_SIDE_EFFECTS);
113:       assertEquals(49, Node.DIRECT_EVAL);
114:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
115:       assertEquals(48, Node.DIRECTIVES);
116:       assertEquals(8, Node.FLAG_NO_THROWS);
117:       assertEquals(39, Node.EMPTY_BLOCK);
118:       assertEquals(53, Node.INPUT_ID);
119:       assertEquals(56, Node.CHANGE_TIME);
120:       assertEquals(52, Node.LENGTH);
121:       assertEquals(57, Node.REFLECTED_OBJECT);
122:       assertEquals(36, Node.QUOTED_PROP);
123:       
124:       boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
125:       assertFalse(boolean0);
126:       assertFalse(node0.isAssign());
127:       assertFalse(node0.isLabelName());
128:       assertFalse(node0.hasChildren());
129:       assertFalse(node0.isGetElem());
130:       assertFalse(node0.isCast());
131:       assertEquals((-1), node0.getSourcePosition());
132:       assertFalse(node0.isDec());
133:       assertFalse(node0.isNumber());
134:       assertFalse(node0.isTypeOf());
135:       assertFalse(node0.isOr());
136:       assertEquals((-1), node0.getLineno());
137:       assertFalse(node0.isExprResult());
138:       assertFalse(node0.isDo());
139:       assertFalse(node0.isContinue());
140:       assertFalse(node0.isAdd());
141:       assertFalse(node0.isAssignAdd());
142:       assertFalse(node0.isLabel());
143:       assertFalse(node0.isNew());
144:       assertFalse(node0.isVar());
145:       assertFalse(node0.isStringKey());
146:       assertEquals((-1), node0.getCharno());
147:       assertFalse(node0.isSwitch());
148:       assertFalse(node0.isParamList());
149:       assertFalse(node0.isWith());
150:       assertFalse(node0.isCase());
151:       assertFalse(node0.isCatch());
152:       assertFalse(node0.hasMoreThanOneChild());
153:       assertFalse(node0.isScript());
154:       assertFalse(node0.isInstanceOf());
155:       assertFalse(node0.isRegExp());
156:       assertFalse(node0.isTry());
157:       assertFalse(node0.isHook());
158:       assertFalse(node0.isThis());
159:       assertFalse(node0.isBlock());
160:       assertEquals(10, node0.getType());
161:       assertFalse(node0.hasOneChild());
162:       assertFalse(node0.isFor());
163:       assertFalse(node0.isEmpty());
164:       assertFalse(node0.isGetterDef());
165:       assertFalse(node0.isTrue());
166:       assertFalse(node0.isNE());
167:       assertFalse(node0.isArrayLit());
168:       assertFalse(node0.isDelProp());
169:       assertFalse(node0.isIf());
170:       assertFalse(node0.isVoid());
171:       assertFalse(node0.isIn());
172:       assertEquals(0, node0.getChildCount());
173:       assertFalse(node0.isFunction());
174:       assertFalse(node0.isInc());
175:       assertFalse(node0.isSetterDef());
176:       assertFalse(node0.isDefaultCase());
177:       assertFalse(node0.isBreak());
178:       assertFalse(node0.isThrow());
179:       assertFalse(node0.isCall());
180:       assertFalse(node0.isNull());
181:       assertFalse(node0.isComma());
182:       assertFalse(node0.isFalse());
183:       assertFalse(node0.isAnd());
184:       assertFalse(node0.isName());
185:       assertFalse(node0.isNot());
186:       assertFalse(node0.isString());
187:       assertFalse(node0.isWhile());
188:       assertFalse(node0.isDebugger());
189:       assertFalse(node0.isObjectLit());
190:       assertFalse(node0.isGetProp());
191:       assertFalse(node0.isReturn());
192:       assertEquals(29, Node.JSDOC_INFO_PROP);
193:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
194:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
195:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
196:       assertEquals(37, Node.OPT_ARG_NAME);
197:       assertEquals(47, Node.IS_DISPATCHER);
198:       assertEquals(2, Node.POST_FLAG);
199:       assertEquals(12, Node.COLUMN_BITS);
200:       assertEquals(32, Node.INCRDECR_PROP);
201:       assertEquals(1, Node.DECR_FLAG);
202:       assertEquals(54, Node.SLASH_V);
203:       assertEquals(43, Node.IS_CONSTANT_NAME);
204:       assertEquals(46, Node.IS_NAMESPACE);
205:       assertEquals(50, Node.FREE_CALL);
206:       assertEquals(51, Node.STATIC_SOURCE_FILE);
207:       assertEquals(40, Node.ORIGINALNAME_PROP);
208:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
209:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
210:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
211:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
212:       assertEquals(30, Node.VAR_ARGS_NAME);
213:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
214:       assertEquals(4095, Node.COLUMN_MASK);
215:       assertEquals(55, Node.INFERRED_FUNCTION);
216:       assertEquals(57, Node.LAST_PROP);
217:       assertEquals(15, Node.NO_SIDE_EFFECTS);
218:       assertEquals(49, Node.DIRECT_EVAL);
219:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
220:       assertEquals(48, Node.DIRECTIVES);
221:       assertEquals(8, Node.FLAG_NO_THROWS);
222:       assertEquals(39, Node.EMPTY_BLOCK);
223:       assertEquals(53, Node.INPUT_ID);
224:       assertEquals(56, Node.CHANGE_TIME);
225:       assertEquals(52, Node.LENGTH);
226:       assertEquals(57, Node.REFLECTED_OBJECT);
227:       assertEquals(36, Node.QUOTED_PROP);
228:       
229:       int int0 = node0.getIntProp(10);
230:       assertEquals(0, int0);
231:       assertFalse(node0.isAssign());
232:       assertFalse(node0.isLabelName());
233:       assertFalse(node0.hasChildren());
234:       assertFalse(node0.isGetElem());
235:       assertFalse(node0.isCast());
236:       assertEquals((-1), node0.getSourcePosition());
237:       assertFalse(node0.isDec());
238:       assertFalse(node0.isNumber());
239:       assertFalse(node0.isTypeOf());
240:       assertFalse(node0.isOr());
241:       assertEquals((-1), node0.getLineno());
242:       assertFalse(node0.isExprResult());
243:       assertFalse(node0.isDo());
244:       assertFalse(node0.isContinue());
245:       assertFalse(node0.isAdd());
246:       assertFalse(node0.isAssignAdd());
247:       assertFalse(node0.isLabel());
248:       assertFalse(node0.isNew());
249:       assertFalse(node0.isVar());
250:       assertFalse(node0.isStringKey());
251:       assertEquals((-1), node0.getCharno());
252:       assertFalse(node0.isSwitch());
253:       assertFalse(node0.isParamList());
254:       assertFalse(node0.isWith());
255:       assertFalse(node0.isCase());
256:       assertFalse(node0.isCatch());
257:       assertFalse(node0.hasMoreThanOneChild());
258:       assertFalse(node0.isScript());
259:       assertFalse(node0.isInstanceOf());
260:       assertFalse(node0.isRegExp());
261:       assertFalse(node0.isTry());
262:       assertFalse(node0.isHook());
263:       assertFalse(node0.isThis());
264:       assertFalse(node0.isBlock());
265:       assertEquals(10, node0.getType());
266:       assertFalse(node0.hasOneChild());
267:       assertFalse(node0.isFor());
268:       assertFalse(node0.isEmpty());
269:       assertFalse(node0.isGetterDef());
270:       assertFalse(node0.isTrue());
271:       assertFalse(node0.isNE());
272:       assertFalse(node0.isArrayLit());
273:       assertFalse(node0.isDelProp());
274:       assertFalse(node0.isIf());
275:       assertFalse(node0.isVoid());
276:       assertFalse(node0.isIn());
277:       assertEquals(0, node0.getChildCount());
278:       assertFalse(node0.isFunction());
279:       assertFalse(node0.isInc());
280:       assertFalse(node0.isSetterDef());
281:       assertFalse(node0.isDefaultCase());
282:       assertFalse(node0.isBreak());
283:       assertFalse(node0.isThrow());
284:       assertFalse(node0.isCall());
285:       assertFalse(node0.isNull());
286:       assertFalse(node0.isComma());
287:       assertFalse(node0.isFalse());
288:       assertFalse(node0.isAnd());
289:       assertFalse(node0.isName());
290:       assertFalse(node0.isNot());
291:       assertFalse(node0.isString());
292:       assertFalse(node0.isWhile());
293:       assertFalse(node0.isDebugger());
294:       assertFalse(node0.isObjectLit());
295:       assertFalse(node0.isGetProp());
296:       assertFalse(node0.isReturn());
297:       assertEquals(29, Node.JSDOC_INFO_PROP);
298:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
299:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
300:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
301:       assertEquals(37, Node.OPT_ARG_NAME);
302:       assertEquals(47, Node.IS_DISPATCHER);
303:       assertEquals(2, Node.POST_FLAG);
304:       assertEquals(12, Node.COLUMN_BITS);
305:       assertEquals(32, Node.INCRDECR_PROP);
306:       assertEquals(1, Node.DECR_FLAG);
307:       assertEquals(54, Node.SLASH_V);
308:       assertEquals(43, Node.IS_CONSTANT_NAME);
309:       assertEquals(46, Node.IS_NAMESPACE);
310:       assertEquals(50, Node.FREE_CALL);
311:       assertEquals(51, Node.STATIC_SOURCE_FILE);
312:       assertEquals(40, Node.ORIGINALNAME_PROP);
313:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
314:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
315:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
316:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
317:       assertEquals(30, Node.VAR_ARGS_NAME);
318:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
319:       assertEquals(4095, Node.COLUMN_MASK);
320:       assertEquals(55, Node.INFERRED_FUNCTION);
321:       assertEquals(57, Node.LAST_PROP);
322:       assertEquals(15, Node.NO_SIDE_EFFECTS);
323:       assertEquals(49, Node.DIRECT_EVAL);
324:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
325:       assertEquals(48, Node.DIRECTIVES);
326:       assertEquals(8, Node.FLAG_NO_THROWS);
327:       assertEquals(39, Node.EMPTY_BLOCK);
328:       assertEquals(53, Node.INPUT_ID);
329:       assertEquals(56, Node.CHANGE_TIME);
330:       assertEquals(52, Node.LENGTH);
331:       assertEquals(57, Node.REFLECTED_OBJECT);
332:       assertEquals(36, Node.QUOTED_PROP);
333:       
334:       node0.siblings();
335:       assertFalse(node0.isAssign());
336:       assertFalse(node0.isLabelName());
337:       assertFalse(node0.hasChildren());
338:       assertFalse(node0.isGetElem());
339:       assertFalse(node0.isCast());
340:       assertEquals((-1), node0.getSourcePosition());
341:       assertFalse(node0.isDec());
342:       assertFalse(node0.isNumber());
343:       assertFalse(node0.isTypeOf());
344:       assertFalse(node0.isOr());
345:       assertEquals((-1), node0.getLineno());
346:       assertFalse(node0.isExprResult());
347:       assertFalse(node0.isDo());
348:       assertFalse(node0.isContinue());
349:       assertFalse(node0.isAdd());
350:       assertFalse(node0.isAssignAdd());
351:       assertFalse(node0.isLabel());
352:       assertFalse(node0.isNew());
353:       assertFalse(node0.isVar());
354:       assertFalse(node0.isStringKey());
355:       assertEquals((-1), node0.getCharno());
356:       assertFalse(node0.isSwitch());
357:       assertFalse(node0.isParamList());
358:       assertFalse(node0.isWith());
359:       assertFalse(node0.isCase());
360:       assertFalse(node0.isCatch());
361:       assertFalse(node0.hasMoreThanOneChild());
362:       assertFalse(node0.isScript());
363:       assertFalse(node0.isInstanceOf());
364:       assertFalse(node0.isRegExp());
365:       assertFalse(node0.isTry());
366:       assertFalse(node0.isHook());
367:       assertFalse(node0.isThis());
368:       assertFalse(node0.isBlock());
369:       assertEquals(10, node0.getType());
370:       assertFalse(node0.hasOneChild());
371:       assertFalse(node0.isFor());
372:       assertFalse(node0.isEmpty());
373:       assertFalse(node0.isGetterDef());
374:       assertFalse(node0.isTrue());
375:       assertFalse(node0.isNE());
376:       assertFalse(node0.isArrayLit());
377:       assertFalse(node0.isDelProp());
378:       assertFalse(node0.isIf());
379:       assertFalse(node0.isVoid());
380:       assertFalse(node0.isIn());
381:       assertEquals(0, node0.getChildCount());
382:       assertFalse(node0.isFunction());
383:       assertFalse(node0.isInc());
384:       assertFalse(node0.isSetterDef());
385:       assertFalse(node0.isDefaultCase());
386:       assertFalse(node0.isBreak());
387:       assertFalse(node0.isThrow());
388:       assertFalse(node0.isCall());
389:       assertFalse(node0.isNull());
390:       assertFalse(node0.isComma());
391:       assertFalse(node0.isFalse());
392:       assertFalse(node0.isAnd());
393:       assertFalse(node0.isName());
394:       assertFalse(node0.isNot());
395:       assertFalse(node0.isString());
396:       assertFalse(node0.isWhile());
397:       assertFalse(node0.isDebugger());
398:       assertFalse(node0.isObjectLit());
399:       assertFalse(node0.isGetProp());
400:       assertFalse(node0.isReturn());
401:       assertEquals(29, Node.JSDOC_INFO_PROP);
402:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
403:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
404:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
405:       assertEquals(37, Node.OPT_ARG_NAME);
406:       assertEquals(47, Node.IS_DISPATCHER);
407:       assertEquals(2, Node.POST_FLAG);
408:       assertEquals(12, Node.COLUMN_BITS);
409:       assertEquals(32, Node.INCRDECR_PROP);
410:       assertEquals(1, Node.DECR_FLAG);
411:       assertEquals(54, Node.SLASH_V);
412:       assertEquals(43, Node.IS_CONSTANT_NAME);
413:       assertEquals(46, Node.IS_NAMESPACE);
414:       assertEquals(50, Node.FREE_CALL);
415:       assertEquals(51, Node.STATIC_SOURCE_FILE);
416:       assertEquals(40, Node.ORIGINALNAME_PROP);
417:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
418:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
419:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
420:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
421:       assertEquals(30, Node.VAR_ARGS_NAME);
422:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
423:       assertEquals(4095, Node.COLUMN_MASK);
424:       assertEquals(55, Node.INFERRED_FUNCTION);
425:       assertEquals(57, Node.LAST_PROP);
426:       assertEquals(15, Node.NO_SIDE_EFFECTS);
427:       assertEquals(49, Node.DIRECT_EVAL);
428:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
429:       assertEquals(48, Node.DIRECTIVES);
430:       assertEquals(8, Node.FLAG_NO_THROWS);
431:       assertEquals(39, Node.EMPTY_BLOCK);
432:       assertEquals(53, Node.INPUT_ID);
433:       assertEquals(56, Node.CHANGE_TIME);
434:       assertEquals(52, Node.LENGTH);
435:       assertEquals(57, Node.REFLECTED_OBJECT);
436:       assertEquals(36, Node.QUOTED_PROP);
437:       
438:       Node node1 = Node.newNumber((double) 47);
439:       assertFalse(node1.isOr());
440:       assertFalse(node1.isAssignAdd());
441:       assertFalse(node1.isLabel());
442:       assertFalse(node1.isReturn());
443:       assertEquals((-1), node1.getLineno());
444:       assertFalse(node1.hasMoreThanOneChild());
445:       assertFalse(node1.isTypeOf());
446:       assertFalse(node1.isContinue());
447:       assertFalse(node1.isLabelName());
448:       assertFalse(node1.isGetElem());
449:       assertEquals((-1), node1.getSourcePosition());
450:       assertFalse(node1.isBlock());
451:       assertFalse(node1.hasOneChild());
452:       assertFalse(node1.isScript());
453:       assertFalse(node1.isCall());
454:       assertFalse(node1.isExprResult());
455:       assertEquals(39, node1.getType());
456:       assertFalse(node1.isAssign());
457:       assertFalse(node1.isWith());
458:       assertFalse(node1.hasChildren());
459:       assertFalse(node1.isDec());
460:       assertFalse(node1.isWhile());
461:       assertFalse(node1.isGetProp());
462:       assertFalse(node1.isSetterDef());
463:       assertFalse(node1.isCatch());
464:       assertFalse(node1.isInstanceOf());
465:       assertFalse(node1.isNot());
466:       assertFalse(node1.isObjectLit());
467:       assertFalse(node1.isAnd());
468:       assertFalse(node1.isCast());
469:       assertFalse(node1.isInc());
470:       assertFalse(node1.isFunction());
471:       assertFalse(node1.isFalse());
472:       assertFalse(node1.isThrow());
473:       assertTrue(node1.isNumber());
474:       assertFalse(node1.isIn());
475:       assertFalse(node1.isDelProp());
476:       assertFalse(node1.isGetterDef());
477:       assertFalse(node1.isSwitch());
478:       assertFalse(node1.isNE());
479:       assertFalse(node1.isIf());
480:       assertFalse(node1.isTry());
481:       assertFalse(node1.isDebugger());
482:       assertFalse(node1.isVoid());
483:       assertEquals((-1), node1.getCharno());
484:       assertFalse(node1.isRegExp());
485:       assertFalse(node1.isString());
486:       assertFalse(node1.isFor());
487:       assertFalse(node1.isCase());
488:       assertFalse(node1.isHook());
489:       assertFalse(node1.isThis());
490:       assertEquals(0, node1.getChildCount());
491:       assertFalse(node1.isComma());
492:       assertFalse(node1.isName());
493:       assertFalse(node1.isBreak());
494:       assertFalse(node1.isTrue());
495:       assertFalse(node1.isNull());
496:       assertFalse(node1.isStringKey());
497:       assertFalse(node1.isParamList());
498:       assertFalse(node1.isAdd());
499:       assertFalse(node1.isNew());
500:       assertFalse(node1.isArrayLit());
501:       assertFalse(node1.isDo());
502:       assertFalse(node1.isEmpty());
503:       assertFalse(node1.isVar());
504:       assertFalse(node1.isDefaultCase());
505:       assertEquals(37, Node.OPT_ARG_NAME);
506:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
507:       assertEquals(47, Node.IS_DISPATCHER);
508:       assertEquals(32, Node.INCRDECR_PROP);
509:       assertEquals(46, Node.IS_NAMESPACE);
510:       assertEquals(56, Node.CHANGE_TIME);
511:       assertEquals(12, Node.COLUMN_BITS);
512:       assertEquals(30, Node.VAR_ARGS_NAME);
513:       assertEquals(2, Node.POST_FLAG);
514:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
515:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
516:       assertEquals(15, Node.NO_SIDE_EFFECTS);
517:       assertEquals(53, Node.INPUT_ID);
518:       assertEquals(57, Node.LAST_PROP);
519:       assertEquals(49, Node.DIRECT_EVAL);
520:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
521:       assertEquals(55, Node.INFERRED_FUNCTION);
522:       assertEquals(29, Node.JSDOC_INFO_PROP);
523:       assertEquals(57, Node.REFLECTED_OBJECT);
524:       assertEquals(36, Node.QUOTED_PROP);
525:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
526:       assertEquals(52, Node.LENGTH);
527:       assertEquals(8, Node.FLAG_NO_THROWS);
528:       assertEquals(48, Node.DIRECTIVES);
529:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
530:       assertEquals(39, Node.EMPTY_BLOCK);
531:       assertEquals(40, Node.ORIGINALNAME_PROP);
532:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
533:       assertEquals(4095, Node.COLUMN_MASK);
534:       assertEquals(54, Node.SLASH_V);
535:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
536:       assertEquals(43, Node.IS_CONSTANT_NAME);
537:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
538:       assertEquals(1, Node.DECR_FLAG);
539:       assertEquals(51, Node.STATIC_SOURCE_FILE);
540:       assertEquals(50, Node.FREE_CALL);
541:       
542:       boolean boolean1 = node1.mayMutateGlobalStateOrThrow();
543:       assertTrue(boolean1);
544:       assertFalse(node1.isOr());
545:       assertFalse(node1.isAssignAdd());
546:       assertFalse(node1.isLabel());
547:       assertFalse(node1.isReturn());
548:       assertEquals((-1), node1.getLineno());
549:       assertFalse(node1.hasMoreThanOneChild());
550:       assertFalse(node1.isTypeOf());
551:       assertFalse(node1.isContinue());
552:       assertFalse(node1.isLabelName());
553:       assertFalse(node1.isGetElem());
554:       assertEquals((-1), node1.getSourcePosition());
555:       assertFalse(node1.isBlock());
556:       assertFalse(node1.hasOneChild());
557:       assertFalse(node1.isScript());
558:       assertFalse(node1.isCall());
559:       assertFalse(node1.isExprResult());
560:       assertEquals(39, node1.getType());
561:       assertFalse(node1.isAssign());
562:       assertFalse(node1.isWith());
563:       assertFalse(node1.hasChildren());
564:       assertFalse(node1.isDec());
565:       assertFalse(node1.isWhile());
566:       assertFalse(node1.isGetProp());
567:       assertFalse(node1.isSetterDef());
568:       assertFalse(node1.isCatch());
569:       assertFalse(node1.isInstanceOf());
570:       assertFalse(node1.isNot());
571:       assertFalse(node1.isObjectLit());
572:       assertFalse(node1.isAnd());
573:       assertFalse(node1.isCast());
574:       assertFalse(node1.isInc());
575:       assertFalse(node1.isFunction());
576:       assertFalse(node1.isFalse());
577:       assertFalse(node1.isThrow());
578:       assertTrue(node1.isNumber());
579:       assertFalse(node1.isIn());
580:       assertFalse(node1.isDelProp());
581:       assertFalse(node1.isGetterDef());
582:       assertFalse(node1.isSwitch());
583:       assertFalse(node1.isNE());
584:       assertFalse(node1.isIf());
585:       assertFalse(node1.isTry());
586:       assertFalse(node1.isDebugger());
587:       assertFalse(node1.isVoid());
588:       assertEquals((-1), node1.getCharno());
589:       assertFalse(node1.isRegExp());
590:       assertFalse(node1.isString());
591:       assertFalse(node1.isFor());
592:       assertFalse(node1.isCase());
593:       assertFalse(node1.isHook());
594:       assertFalse(node1.isThis());
595:       assertEquals(0, node1.getChildCount());
596:       assertFalse(node1.isComma());
597:       assertFalse(node1.isName());
598:       assertFalse(node1.isBreak());
599:       assertFalse(node1.isTrue());
600:       assertFalse(node1.isNull());
601:       assertFalse(node1.isStringKey());
602:       assertFalse(node1.isParamList());
603:       assertFalse(node1.isAdd());
604:       assertFalse(node1.isNew());
605:       assertFalse(node1.isArrayLit());
606:       assertFalse(node1.isDo());
607:       assertFalse(node1.isEmpty());
608:       assertFalse(node1.isVar());
609:       assertFalse(node1.isDefaultCase());
610:       assertEquals(37, Node.OPT_ARG_NAME);
611:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
612:       assertEquals(47, Node.IS_DISPATCHER);
613:       assertEquals(32, Node.INCRDECR_PROP);
614:       assertEquals(46, Node.IS_NAMESPACE);
615:       assertEquals(56, Node.CHANGE_TIME);
616:       assertEquals(12, Node.COLUMN_BITS);
617:       assertEquals(30, Node.VAR_ARGS_NAME);
618:       assertEquals(2, Node.POST_FLAG);
619:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
620:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
621:       assertEquals(15, Node.NO_SIDE_EFFECTS);
622:       assertEquals(53, Node.INPUT_ID);
623:       assertEquals(57, Node.LAST_PROP);
624:       assertEquals(49, Node.DIRECT_EVAL);
625:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
626:       assertEquals(55, Node.INFERRED_FUNCTION);
627:       assertEquals(29, Node.JSDOC_INFO_PROP);
628:       assertEquals(57, Node.REFLECTED_OBJECT);
629:       assertEquals(36, Node.QUOTED_PROP);
630:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
631:       assertEquals(52, Node.LENGTH);
632:       assertEquals(8, Node.FLAG_NO_THROWS);
633:       assertEquals(48, Node.DIRECTIVES);
634:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
635:       assertEquals(39, Node.EMPTY_BLOCK);
636:       assertEquals(40, Node.ORIGINALNAME_PROP);
637:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
638:       assertEquals(4095, Node.COLUMN_MASK);
639:       assertEquals(54, Node.SLASH_V);
640:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
641:       assertEquals(43, Node.IS_CONSTANT_NAME);
642:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
643:       assertEquals(1, Node.DECR_FLAG);
644:       assertEquals(51, Node.STATIC_SOURCE_FILE);
645:       assertEquals(50, Node.FREE_CALL);
646:       
647:       boolean boolean2 = node1.isCall();
648:       assertFalse(boolean2);
649:       assertFalse(node1.isOr());
650:       assertFalse(node1.isAssignAdd());
651:       assertFalse(node1.isLabel());
652:       assertFalse(node1.isReturn());
653:       assertEquals((-1), node1.getLineno());
654:       assertFalse(node1.hasMoreThanOneChild());
655:       assertFalse(node1.isTypeOf());
656:       assertFalse(node1.isContinue());
657:       assertFalse(node1.isLabelName());
658:       assertFalse(node1.isGetElem());
659:       assertEquals((-1), node1.getSourcePosition());
660:       assertFalse(node1.isBlock());
661:       assertFalse(node1.hasOneChild());
662:       assertFalse(node1.isScript());
663:       assertFalse(node1.isCall());
664:       assertFalse(node1.isExprResult());
665:       assertEquals(39, node1.getType());
666:       assertFalse(node1.isAssign());
667:       assertFalse(node1.isWith());
668:       assertFalse(node1.hasChildren());
669:       assertFalse(node1.isDec());
670:       assertFalse(node1.isWhile());
671:       assertFalse(node1.isGetProp());
672:       assertFalse(node1.isSetterDef());
673:       assertFalse(node1.isCatch());
674:       assertFalse(node1.isInstanceOf());
675:       assertFalse(node1.isNot());
676:       assertFalse(node1.isObjectLit());
677:       assertFalse(node1.isAnd());
678:       assertFalse(node1.isCast());
679:       assertFalse(node1.isInc());
680:       assertFalse(node1.isFunction());
681:       assertFalse(node1.isFalse());
682:       assertFalse(node1.isThrow());
683:       assertTrue(node1.isNumber());
684:       assertFalse(node1.isIn());
685:       assertFalse(node1.isDelProp());
686:       assertFalse(node1.isGetterDef());
687:       assertFalse(node1.isSwitch());
688:       assertFalse(node1.isNE());
689:       assertFalse(node1.isIf());
690:       assertFalse(node1.isTry());
691:       assertFalse(node1.isDebugger());
692:       assertFalse(node1.isVoid());
693:       assertEquals((-1), node1.getCharno());
694:       assertFalse(node1.isRegExp());
695:       assertFalse(node1.isString());
696:       assertFalse(node1.isFor());
697:       assertFalse(node1.isCase());
698:       assertFalse(node1.isHook());
699:       assertFalse(node1.isThis());
700:       assertEquals(0, node1.getChildCount());
701:       assertFalse(node1.isComma());
702:       assertFalse(node1.isName());
703:       assertFalse(node1.isBreak());
704:       assertFalse(node1.isTrue());
705:       assertFalse(node1.isNull());
706:       assertFalse(node1.isStringKey());
707:       assertFalse(node1.isParamList());
708:       assertFalse(node1.isAdd());
709:       assertFalse(node1.isNew());
710:       assertFalse(node1.isArrayLit());
711:       assertFalse(node1.isDo());
712:       assertFalse(node1.isEmpty());
713:       assertFalse(node1.isVar());
714:       assertFalse(node1.isDefaultCase());
715:       assertEquals(37, Node.OPT_ARG_NAME);
716:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
717:       assertEquals(47, Node.IS_DISPATCHER);
718:       assertEquals(32, Node.INCRDECR_PROP);
719:       assertEquals(46, Node.IS_NAMESPACE);
720:       assertEquals(56, Node.CHANGE_TIME);
721:       assertEquals(12, Node.COLUMN_BITS);
722:       assertEquals(30, Node.VAR_ARGS_NAME);
723:       assertEquals(2, Node.POST_FLAG);
724:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
725:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
726:       assertEquals(15, Node.NO_SIDE_EFFECTS);
727:       assertEquals(53, Node.INPUT_ID);
728:       assertEquals(57, Node.LAST_PROP);
729:       assertEquals(49, Node.DIRECT_EVAL);
730:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
731:       assertEquals(55, Node.INFERRED_FUNCTION);
732:       assertEquals(29, Node.JSDOC_INFO_PROP);
733:       assertEquals(57, Node.REFLECTED_OBJECT);
734:       assertEquals(36, Node.QUOTED_PROP);
735:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
736:       assertEquals(52, Node.LENGTH);
737:       assertEquals(8, Node.FLAG_NO_THROWS);
738:       assertEquals(48, Node.DIRECTIVES);
739:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
740:       assertEquals(39, Node.EMPTY_BLOCK);
741:       assertEquals(40, Node.ORIGINALNAME_PROP);
742:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
743:       assertEquals(4095, Node.COLUMN_MASK);
744:       assertEquals(54, Node.SLASH_V);
745:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
746:       assertEquals(43, Node.IS_CONSTANT_NAME);
747:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
748:       assertEquals(1, Node.DECR_FLAG);
749:       assertEquals(51, Node.STATIC_SOURCE_FILE);
750:       assertEquals(50, Node.FREE_CALL);
751:       
752:       boolean boolean3 = node0.isCast();
753:       assertFalse(boolean3);
754:       assertFalse(node0.isAssign());
755:       assertFalse(node0.isLabelName());
756:       assertFalse(node0.hasChildren());
757:       assertFalse(node0.isGetElem());
758:       assertFalse(node0.isCast());
759:       assertEquals((-1), node0.getSourcePosition());
760:       assertFalse(node0.isDec());
761:       assertFalse(node0.isNumber());
762:       assertFalse(node0.isTypeOf());
763:       assertFalse(node0.isOr());
764:       assertEquals((-1), node0.getLineno());
765:       assertFalse(node0.isExprResult());
766:       assertFalse(node0.isDo());
767:       assertFalse(node0.isContinue());
768:       assertFalse(node0.isAdd());
769:       assertFalse(node0.isAssignAdd());
770:       assertFalse(node0.isLabel());
771:       assertFalse(node0.isNew());
772:       assertFalse(node0.isVar());
773:       assertFalse(node0.isStringKey());
774:       assertEquals((-1), node0.getCharno());
775:       assertFalse(node0.isSwitch());
776:       assertFalse(node0.isParamList());
777:       assertFalse(node0.isWith());
778:       assertFalse(node0.isCase());
779:       assertFalse(node0.isCatch());
780:       assertFalse(node0.hasMoreThanOneChild());
781:       assertFalse(node0.isScript());
782:       assertFalse(node0.isInstanceOf());
783:       assertFalse(node0.isRegExp());
784:       assertFalse(node0.isTry());
785:       assertFalse(node0.isHook());
786:       assertFalse(node0.isThis());
787:       assertFalse(node0.isBlock());
788:       assertEquals(10, node0.getType());
789:       assertFalse(node0.hasOneChild());
790:       assertFalse(node0.isFor());
791:       assertFalse(node0.isEmpty());
792:       assertFalse(node0.isGetterDef());
793:       assertFalse(node0.isTrue());
794:       assertFalse(node0.isNE());
795:       assertFalse(node0.isArrayLit());
796:       assertFalse(node0.isDelProp());
797:       assertFalse(node0.isIf());
798:       assertFalse(node0.isVoid());
799:       assertFalse(node0.isIn());
800:       assertEquals(0, node0.getChildCount());
801:       assertFalse(node0.isFunction());
802:       assertFalse(node0.isInc());
803:       assertFalse(node0.isSetterDef());
804:       assertFalse(node0.isDefaultCase());
805:       assertFalse(node0.isBreak());
806:       assertFalse(node0.isThrow());
807:       assertFalse(node0.isCall());
808:       assertFalse(node0.isNull());
809:       assertFalse(node0.isComma());
810:       assertFalse(node0.isFalse());
811:       assertFalse(node0.isAnd());
812:       assertFalse(node0.isName());
813:       assertFalse(node0.isNot());
814:       assertFalse(node0.isString());
815:       assertFalse(node0.isWhile());
816:       assertFalse(node0.isDebugger());
817:       assertFalse(node0.isObjectLit());
818:       assertFalse(node0.isGetProp());
819:       assertFalse(node0.isReturn());
820:       assertEquals(29, Node.JSDOC_INFO_PROP);
821:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
822:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
823:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
824:       assertEquals(37, Node.OPT_ARG_NAME);
825:       assertEquals(47, Node.IS_DISPATCHER);
826:       assertEquals(2, Node.POST_FLAG);
827:       assertEquals(12, Node.COLUMN_BITS);
828:       assertEquals(32, Node.INCRDECR_PROP);
829:       assertEquals(1, Node.DECR_FLAG);
830:       assertEquals(54, Node.SLASH_V);
831:       assertEquals(43, Node.IS_CONSTANT_NAME);
832:       assertEquals(46, Node.IS_NAMESPACE);
833:       assertEquals(50, Node.FREE_CALL);
834:       assertEquals(51, Node.STATIC_SOURCE_FILE);
835:       assertEquals(40, Node.ORIGINALNAME_PROP);
836:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
837:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
838:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
839:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
840:       assertEquals(30, Node.VAR_ARGS_NAME);
841:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
842:       assertEquals(4095, Node.COLUMN_MASK);
843:       assertEquals(55, Node.INFERRED_FUNCTION);
844:       assertEquals(57, Node.LAST_PROP);
845:       assertEquals(15, Node.NO_SIDE_EFFECTS);
846:       assertEquals(49, Node.DIRECT_EVAL);
847:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
848:       assertEquals(48, Node.DIRECTIVES);
849:       assertEquals(8, Node.FLAG_NO_THROWS);
850:       assertEquals(39, Node.EMPTY_BLOCK);
851:       assertEquals(53, Node.INPUT_ID);
852:       assertEquals(56, Node.CHANGE_TIME);
853:       assertEquals(52, Node.LENGTH);
854:       assertEquals(57, Node.REFLECTED_OBJECT);
855:       assertEquals(36, Node.QUOTED_PROP);
856:       
857:       Object object0 = new Object();
858:       Iterable<Node> iterable0 = node0.children();
859:       assertFalse(node0.isAssign());
860:       assertFalse(node0.isLabelName());
861:       assertFalse(node0.hasChildren());
862:       assertFalse(node0.isGetElem());
863:       assertFalse(node0.isCast());
864:       assertEquals((-1), node0.getSourcePosition());
865:       assertFalse(node0.isDec());
866:       assertFalse(node0.isNumber());
867:       assertFalse(node0.isTypeOf());
868:       assertFalse(node0.isOr());
869:       assertEquals((-1), node0.getLineno());
870:       assertFalse(node0.isExprResult());
871:       assertFalse(node0.isDo());
872:       assertFalse(node0.isContinue());
873:       assertFalse(node0.isAdd());
874:       assertFalse(node0.isAssignAdd());
875:       assertFalse(node0.isLabel());
876:       assertFalse(node0.isNew());
877:       assertFalse(node0.isVar());
878:       assertFalse(node0.isStringKey());
879:       assertEquals((-1), node0.getCharno());
880:       assertFalse(node0.isSwitch());
881:       assertFalse(node0.isParamList());
882:       assertFalse(node0.isWith());
883:       assertFalse(node0.isCase());
884:       assertFalse(node0.isCatch());
885:       assertFalse(node0.hasMoreThanOneChild());
886:       assertFalse(node0.isScript());
887:       assertFalse(node0.isInstanceOf());
888:       assertFalse(node0.isRegExp());
889:       assertFalse(node0.isTry());
890:       assertFalse(node0.isHook());
891:       assertFalse(node0.isThis());
892:       assertFalse(node0.isBlock());
893:       assertEquals(10, node0.getType());
894:       assertFalse(node0.hasOneChild());
895:       assertFalse(node0.isFor());
896:       assertFalse(node0.isEmpty());
897:       assertFalse(node0.isGetterDef());
898:       assertFalse(node0.isTrue());
899:       assertFalse(node0.isNE());
900:       assertFalse(node0.isArrayLit());
901:       assertFalse(node0.isDelProp());
902:       assertFalse(node0.isIf());
903:       assertFalse(node0.isVoid());
904:       assertFalse(node0.isIn());
905:       assertEquals(0, node0.getChildCount());
906:       assertFalse(node0.isFunction());
907:       assertFalse(node0.isInc());
908:       assertFalse(node0.isSetterDef());
909:       assertFalse(node0.isDefaultCase());
910:       assertFalse(node0.isBreak());
911:       assertFalse(node0.isThrow());
912:       assertFalse(node0.isCall());
913:       assertFalse(node0.isNull());
914:       assertFalse(node0.isComma());
915:       assertFalse(node0.isFalse());
916:       assertFalse(node0.isAnd());
917:       assertFalse(node0.isName());
918:       assertFalse(node0.isNot());
919:       assertFalse(node0.isString());
920:       assertFalse(node0.isWhile());
921:       assertFalse(node0.isDebugger());
922:       assertFalse(node0.isObjectLit());
923:       assertFalse(node0.isGetProp());
924:       assertFalse(node0.isReturn());
925:       assertFalse(iterable0.contains(node0));
926:       assertEquals(29, Node.JSDOC_INFO_PROP);
927:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
928:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
929:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
930:       assertEquals(37, Node.OPT_ARG_NAME);
931:       assertEquals(47, Node.IS_DISPATCHER);
932:       assertEquals(2, Node.POST_FLAG);
933:       assertEquals(12, Node.COLUMN_BITS);
934:       assertEquals(32, Node.INCRDECR_PROP);
935:       assertEquals(1, Node.DECR_FLAG);
936:       assertEquals(54, Node.SLASH_V);
937:       assertEquals(43, Node.IS_CONSTANT_NAME);
938:       assertEquals(46, Node.IS_NAMESPACE);
939:       assertEquals(50, Node.FREE_CALL);
940:       assertEquals(51, Node.STATIC_SOURCE_FILE);
941:       assertEquals(40, Node.ORIGINALNAME_PROP);
942:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
943:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
944:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
945:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
946:       assertEquals(30, Node.VAR_ARGS_NAME);
947:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
948:       assertEquals(4095, Node.COLUMN_MASK);
949:       assertEquals(55, Node.INFERRED_FUNCTION);
950:       assertEquals(57, Node.LAST_PROP);
951:       assertEquals(15, Node.NO_SIDE_EFFECTS);
952:       assertEquals(49, Node.DIRECT_EVAL);
953:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
954:       assertEquals(48, Node.DIRECTIVES);
955:       assertEquals(8, Node.FLAG_NO_THROWS);
956:       assertEquals(39, Node.EMPTY_BLOCK);
957:       assertEquals(53, Node.INPUT_ID);
958:       assertEquals(56, Node.CHANGE_TIME);
959:       assertEquals(52, Node.LENGTH);
960:       assertEquals(57, Node.REFLECTED_OBJECT);
961:       assertEquals(36, Node.QUOTED_PROP);
962:       
963:       Node node2 = new Node(10, node1, node0, 37, 1);
964:       assertFalse(node0.isAssign());
965:       assertFalse(node0.isLabelName());
966:       assertFalse(node0.hasChildren());
967:       assertFalse(node0.isGetElem());
968:       assertFalse(node0.isCast());
969:       assertEquals((-1), node0.getSourcePosition());
970:       assertFalse(node0.isDec());
971:       assertFalse(node0.isNumber());
972:       assertFalse(node0.isTypeOf());
973:       assertFalse(node0.isOr());
974:       assertEquals((-1), node0.getLineno());
975:       assertFalse(node0.isExprResult());
976:       assertFalse(node0.isDo());
977:       assertFalse(node0.isContinue());
978:       assertFalse(node0.isAdd());
979:       assertFalse(node0.isAssignAdd());
980:       assertFalse(node0.isLabel());
981:       assertFalse(node0.isNew());
982:       assertFalse(node0.isVar());
983:       assertFalse(node0.isStringKey());
984:       assertEquals((-1), node0.getCharno());
985:       assertFalse(node0.isSwitch());
986:       assertFalse(node0.isParamList());
987:       assertFalse(node0.isWith());
988:       assertFalse(node0.isCase());
989:       assertFalse(node0.isCatch());
990:       assertFalse(node0.hasMoreThanOneChild());
991:       assertFalse(node0.isScript());
992:       assertFalse(node0.isInstanceOf());
993:       assertFalse(node0.isRegExp());
994:       assertFalse(node0.isTry());
995:       assertFalse(node0.isHook());
996:       assertFalse(node0.isThis());
997:       assertFalse(node0.isBlock());
998:       assertEquals(10, node0.getType());
999:       assertFalse(node0.hasOneChild());
1000:       assertFalse(node0.isFor());
1001:       assertFalse(node0.isEmpty());
1002:       assertFalse(node0.isGetterDef());
1003:       assertFalse(node0.isTrue());
1004:       assertFalse(node0.isNE());
1005:       assertFalse(node0.isArrayLit());
1006:       assertFalse(node0.isDelProp());
1007:       assertFalse(node0.isIf());
1008:       assertFalse(node0.isVoid());
1009:       assertFalse(node0.isIn());
1010:       assertEquals(0, node0.getChildCount());
1011:       assertFalse(node0.isFunction());
1012:       assertFalse(node0.isInc());
1013:       assertFalse(node0.isSetterDef());
1014:       assertFalse(node0.isDefaultCase());
1015:       assertFalse(node0.isBreak());
1016:       assertFalse(node0.isThrow());
1017:       assertFalse(node0.isCall());
1018:       assertFalse(node0.isNull());
1019:       assertFalse(node0.isComma());
1020:       assertFalse(node0.isFalse());
1021:       assertFalse(node0.isAnd());
1022:       assertFalse(node0.isName());
1023:       assertFalse(node0.isNot());
1024:       assertFalse(node0.isString());
1025:       assertFalse(node0.isWhile());
1026:       assertFalse(node0.isDebugger());
1027:       assertFalse(node0.isObjectLit());
1028:       assertFalse(node0.isGetProp());
1029:       assertFalse(node0.isReturn());
1030:       assertFalse(node1.isOr());
1031:       assertFalse(node1.isAssignAdd());
1032:       assertFalse(node1.isLabel());
1033:       assertFalse(node1.isReturn());
1034:       assertEquals((-1), node1.getLineno());
1035:       assertFalse(node1.hasMoreThanOneChild());
1036:       assertFalse(node1.isTypeOf());
1037:       assertFalse(node1.isContinue());
1038:       assertFalse(node1.isLabelName());
1039:       assertFalse(node1.isGetElem());
1040:       assertEquals((-1), node1.getSourcePosition());
1041:       assertFalse(node1.isBlock());
1042:       assertFalse(node1.hasOneChild());
1043:       assertFalse(node1.isScript());
1044:       assertFalse(node1.isCall());
1045:       assertFalse(node1.isExprResult());
1046:       assertEquals(39, node1.getType());
1047:       assertFalse(node1.isAssign());
1048:       assertFalse(node1.isWith());
1049:       assertFalse(node1.hasChildren());
1050:       assertFalse(node1.isDec());
1051:       assertFalse(node1.isWhile());
1052:       assertFalse(node1.isGetProp());
1053:       assertFalse(node1.isSetterDef());
1054:       assertFalse(node1.isCatch());
1055:       assertFalse(node1.isInstanceOf());
1056:       assertFalse(node1.isNot());
1057:       assertFalse(node1.isObjectLit());
1058:       assertFalse(node1.isAnd());
1059:       assertFalse(node1.isCast());
1060:       assertFalse(node1.isInc());
1061:       assertFalse(node1.isFunction());
1062:       assertFalse(node1.isFalse());
1063:       assertFalse(node1.isThrow());
1064:       assertTrue(node1.isNumber());
1065:       assertFalse(node1.isIn());
1066:       assertFalse(node1.isDelProp());
1067:       assertFalse(node1.isGetterDef());
1068:       assertFalse(node1.isSwitch());
1069:       assertFalse(node1.isNE());
1070:       assertFalse(node1.isIf());
1071:       assertFalse(node1.isTry());
1072:       assertFalse(node1.isDebugger());
1073:       assertFalse(node1.isVoid());
1074:       assertEquals((-1), node1.getCharno());
1075:       assertFalse(node1.isRegExp());
1076:       assertFalse(node1.isString());
1077:       assertFalse(node1.isFor());
1078:       assertFalse(node1.isCase());
1079:       assertFalse(node1.isHook());
1080:       assertFalse(node1.isThis());
1081:       assertEquals(0, node1.getChildCount());
1082:       assertFalse(node1.isComma());
1083:       assertFalse(node1.isName());
1084:       assertFalse(node1.isBreak());
1085:       assertFalse(node1.isTrue());
1086:       assertFalse(node1.isNull());
1087:       assertFalse(node1.isStringKey());
1088:       assertFalse(node1.isParamList());
1089:       assertFalse(node1.isAdd());
1090:       assertFalse(node1.isNew());
1091:       assertFalse(node1.isArrayLit());
1092:       assertFalse(node1.isDo());
1093:       assertFalse(node1.isEmpty());
1094:       assertFalse(node1.isVar());
1095:       assertFalse(node1.isDefaultCase());
1096:       assertFalse(node2.isParamList());
1097:       assertFalse(node2.isNull());
1098:       assertFalse(node2.isSetterDef());
1099:       assertFalse(node2.isDefaultCase());
1100:       assertFalse(node2.isDebugger());
1101:       assertFalse(node2.isTry());
1102:       assertFalse(node2.isFor());
1103:       assertFalse(node2.isName());
1104:       assertFalse(node2.isBlock());
1105:       assertFalse(node2.isTrue());
1106:       assertFalse(node2.isRegExp());
1107:       assertFalse(node2.isIf());
1108:       assertFalse(node2.isDelProp());
1109:       assertFalse(node2.isVoid());
1110:       assertTrue(node2.hasChildren());
1111:       assertFalse(node2.isCall());
1112:       assertFalse(node2.isCatch());
1113:       assertFalse(node2.isOr());
1114:       assertFalse(node2.isLabel());
1115:       assertFalse(node2.isAssignAdd());
1116:       assertEquals(10, node2.getType());
1117:       assertFalse(node2.isNumber());
1118:       assertFalse(node2.isGetterDef());
1119:       assertFalse(node2.isDo());
1120:       assertFalse(node2.isCase());
1121:       assertFalse(node2.isAdd());
1122:       assertFalse(node2.isEmpty());
1123:       assertFalse(node2.isNew());
1124:       assertFalse(node2.isArrayLit());
1125:       assertFalse(node2.isVar());
1126:       assertFalse(node2.isLabelName());
1127:       assertFalse(node2.isStringKey());
1128:       assertFalse(node2.isSwitch());
1129:       assertFalse(node2.isObjectLit());
1130:       assertEquals(2, node2.getChildCount());
1131:       assertFalse(node2.isAnd());
1132:       assertFalse(node2.isScript());
1133:       assertFalse(node2.isNot());
1134:       assertFalse(node2.isGetProp());
1135:       assertEquals(151553, node2.getSourcePosition());
1136:       assertFalse(node2.isHook());
1137:       assertFalse(node2.hasOneChild());
1138:       assertFalse(node2.isTypeOf());
1139:       assertFalse(node2.isThis());
1140:       assertFalse(node2.isBreak());
1141:       assertFalse(node2.isComma());
1142:       assertTrue(node2.hasMoreThanOneChild());
1143:       assertFalse(node2.isAssign());
1144:       assertFalse(node2.isDec());
1145:       assertFalse(node2.isWith());
1146:       assertFalse(node2.isGetElem());
1147:       assertFalse(node2.isExprResult());
1148:       assertFalse(node2.isInstanceOf());
1149:       assertFalse(node2.isIn());
1150:       assertFalse(node2.isReturn());
1151:       assertFalse(node2.isWhile());
1152:       assertFalse(node2.isNE());
1153:       assertEquals(1, node2.getCharno());
1154:       assertFalse(node2.isInc());
1155:       assertFalse(node2.isString());
1156:       assertFalse(node2.isThrow());
1157:       assertFalse(node2.isFunction());
1158:       assertEquals(37, node2.getLineno());
1159:       assertFalse(node2.isFalse());
1160:       assertFalse(node2.isContinue());
1161:       assertFalse(node2.isCast());
1162:       assertEquals(29, Node.JSDOC_INFO_PROP);
1163:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1164:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1165:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1166:       assertEquals(37, Node.OPT_ARG_NAME);
1167:       assertEquals(47, Node.IS_DISPATCHER);
1168:       assertEquals(2, Node.POST_FLAG);
1169:       assertEquals(12, Node.COLUMN_BITS);
1170:       assertEquals(32, Node.INCRDECR_PROP);
1171:       assertEquals(1, Node.DECR_FLAG);
1172:       assertEquals(54, Node.SLASH_V);
1173:       assertEquals(43, Node.IS_CONSTANT_NAME);
1174:       assertEquals(46, Node.IS_NAMESPACE);
1175:       assertEquals(50, Node.FREE_CALL);
1176:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1177:       assertEquals(40, Node.ORIGINALNAME_PROP);
1178:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1179:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1180:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1181:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1182:       assertEquals(30, Node.VAR_ARGS_NAME);
1183:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1184:       assertEquals(4095, Node.COLUMN_MASK);
1185:       assertEquals(55, Node.INFERRED_FUNCTION);
1186:       assertEquals(57, Node.LAST_PROP);
1187:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1188:       assertEquals(49, Node.DIRECT_EVAL);
1189:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1190:       assertEquals(48, Node.DIRECTIVES);
1191:       assertEquals(8, Node.FLAG_NO_THROWS);
1192:       assertEquals(39, Node.EMPTY_BLOCK);
1193:       assertEquals(53, Node.INPUT_ID);
1194:       assertEquals(56, Node.CHANGE_TIME);
1195:       assertEquals(52, Node.LENGTH);
1196:       assertEquals(57, Node.REFLECTED_OBJECT);
1197:       assertEquals(36, Node.QUOTED_PROP);
1198:       assertEquals(37, Node.OPT_ARG_NAME);
1199:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1200:       assertEquals(47, Node.IS_DISPATCHER);
1201:       assertEquals(32, Node.INCRDECR_PROP);
1202:       assertEquals(46, Node.IS_NAMESPACE);
1203:       assertEquals(56, Node.CHANGE_TIME);
1204:       assertEquals(12, Node.COLUMN_BITS);
1205:       assertEquals(30, Node.VAR_ARGS_NAME);
1206:       assertEquals(2, Node.POST_FLAG);
1207:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1208:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1209:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1210:       assertEquals(53, Node.INPUT_ID);
1211:       assertEquals(57, Node.LAST_PROP);
1212:       assertEquals(49, Node.DIRECT_EVAL);
1213:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1214:       assertEquals(55, Node.INFERRED_FUNCTION);
1215:       assertEquals(29, Node.JSDOC_INFO_PROP);
1216:       assertEquals(57, Node.REFLECTED_OBJECT);
1217:       assertEquals(36, Node.QUOTED_PROP);
1218:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1219:       assertEquals(52, Node.LENGTH);
1220:       assertEquals(8, Node.FLAG_NO_THROWS);
1221:       assertEquals(48, Node.DIRECTIVES);
1222:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1223:       assertEquals(39, Node.EMPTY_BLOCK);
1224:       assertEquals(40, Node.ORIGINALNAME_PROP);
1225:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1226:       assertEquals(4095, Node.COLUMN_MASK);
1227:       assertEquals(54, Node.SLASH_V);
1228:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1229:       assertEquals(43, Node.IS_CONSTANT_NAME);
1230:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1231:       assertEquals(1, Node.DECR_FLAG);
1232:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1233:       assertEquals(50, Node.FREE_CALL);
1234:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1235:       assertEquals(55, Node.INFERRED_FUNCTION);
1236:       assertEquals(4095, Node.COLUMN_MASK);
1237:       assertEquals(8, Node.FLAG_NO_THROWS);
1238:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1239:       assertEquals(36, Node.QUOTED_PROP);
1240:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1241:       assertEquals(48, Node.DIRECTIVES);
1242:       assertEquals(43, Node.IS_CONSTANT_NAME);
1243:       assertEquals(53, Node.INPUT_ID);
1244:       assertEquals(57, Node.REFLECTED_OBJECT);
1245:       assertEquals(40, Node.ORIGINALNAME_PROP);
1246:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1247:       assertEquals(52, Node.LENGTH);
1248:       assertEquals(30, Node.VAR_ARGS_NAME);
1249:       assertEquals(29, Node.JSDOC_INFO_PROP);
1250:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1251:       assertEquals(39, Node.EMPTY_BLOCK);
1252:       assertEquals(47, Node.IS_DISPATCHER);
1253:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1254:       assertEquals(57, Node.LAST_PROP);
1255:       assertEquals(32, Node.INCRDECR_PROP);
1256:       assertEquals(46, Node.IS_NAMESPACE);
1257:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1258:       assertEquals(12, Node.COLUMN_BITS);
1259:       assertEquals(2, Node.POST_FLAG);
1260:       assertEquals(56, Node.CHANGE_TIME);
1261:       assertEquals(49, Node.DIRECT_EVAL);
1262:       assertEquals(37, Node.OPT_ARG_NAME);
1263:       assertEquals(54, Node.SLASH_V);
1264:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1265:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1266:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1267:       assertEquals(50, Node.FREE_CALL);
1268:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1269:       assertEquals(1, Node.DECR_FLAG);
1270:       
1271:       node2.getDirectives();
1272:       assertNotSame(node0, node2);
1273:       assertNotSame(node2, node0);
1274:       assertFalse(node0.isAssign());
1275:       assertFalse(node0.isLabelName());
1276:       assertFalse(node0.hasChildren());
1277:       assertFalse(node0.isGetElem());
1278:       assertFalse(node0.isCast());
1279:       assertEquals((-1), node0.getSourcePosition());
1280:       assertFalse(node0.isDec());
1281:       assertFalse(node0.isNumber());
1282:       assertFalse(node0.isTypeOf());
1283:       assertFalse(node0.isOr());
1284:       assertEquals((-1), node0.getLineno());
1285:       assertFalse(node0.isExprResult());
1286:       assertFalse(node0.isDo());
1287:       assertFalse(node0.isContinue());
1288:       assertFalse(node0.isAdd());
1289:       assertFalse(node0.isAssignAdd());
1290:       assertFalse(node0.isLabel());
1291:       assertFalse(node0.isNew());
1292:       assertFalse(node0.isVar());
1293:       assertFalse(node0.isStringKey());
1294:       assertEquals((-1), node0.getCharno());
1295:       assertFalse(node0.isSwitch());
1296:       assertFalse(node0.isParamList());
1297:       assertFalse(node0.isWith());
1298:       assertFalse(node0.isCase());
1299:       assertFalse(node0.isCatch());
1300:       assertFalse(node0.hasMoreThanOneChild());
1301:       assertFalse(node0.isScript());
1302:       assertFalse(node0.isInstanceOf());
1303:       assertFalse(node0.isRegExp());
1304:       assertFalse(node0.isTry());
1305:       assertFalse(node0.isHook());
1306:       assertFalse(node0.isThis());
1307:       assertFalse(node0.isBlock());
1308:       assertEquals(10, node0.getType());
1309:       assertFalse(node0.hasOneChild());
1310:       assertFalse(node0.isFor());
1311:       assertFalse(node0.isEmpty());
1312:       assertFalse(node0.isGetterDef());
1313:       assertFalse(node0.isTrue());
1314:       assertFalse(node0.isNE());
1315:       assertFalse(node0.isArrayLit());
1316:       assertFalse(node0.isDelProp());
1317:       assertFalse(node0.isIf());
1318:       assertFalse(node0.isVoid());
1319:       assertFalse(node0.isIn());
1320:       assertEquals(0, node0.getChildCount());
1321:       assertFalse(node0.isFunction());
1322:       assertFalse(node0.isInc());
1323:       assertFalse(node0.isSetterDef());
1324:       assertFalse(node0.isDefaultCase());
1325:       assertFalse(node0.isBreak());
1326:       assertFalse(node0.isThrow());
1327:       assertFalse(node0.isCall());
1328:       assertFalse(node0.isNull());
1329:       assertFalse(node0.isComma());
1330:       assertFalse(node0.isFalse());
1331:       assertFalse(node0.isAnd());
1332:       assertFalse(node0.isName());
1333:       assertFalse(node0.isNot());
1334:       assertFalse(node0.isString());
1335:       assertFalse(node0.isWhile());
1336:       assertFalse(node0.isDebugger());
1337:       assertFalse(node0.isObjectLit());
1338:       assertFalse(node0.isGetProp());
1339:       assertFalse(node0.isReturn());
1340:       assertFalse(node1.isOr());
1341:       assertFalse(node1.isAssignAdd());
1342:       assertFalse(node1.isLabel());
1343:       assertFalse(node1.isReturn());
1344:       assertEquals((-1), node1.getLineno());
1345:       assertFalse(node1.hasMoreThanOneChild());
1346:       assertFalse(node1.isTypeOf());
1347:       assertFalse(node1.isContinue());
1348:       assertFalse(node1.isLabelName());
1349:       assertFalse(node1.isGetElem());
1350:       assertEquals((-1), node1.getSourcePosition());
1351:       assertFalse(node1.isBlock());
1352:       assertFalse(node1.hasOneChild());
1353:       assertFalse(node1.isScript());
1354:       assertFalse(node1.isCall());
1355:       assertFalse(node1.isExprResult());
1356:       assertEquals(39, node1.getType());
1357:       assertFalse(node1.isAssign());
1358:       assertFalse(node1.isWith());
1359:       assertFalse(node1.hasChildren());
1360:       assertFalse(node1.isDec());
1361:       assertFalse(node1.isWhile());
1362:       assertFalse(node1.isGetProp());
1363:       assertFalse(node1.isSetterDef());
1364:       assertFalse(node1.isCatch());
1365:       assertFalse(node1.isInstanceOf());
1366:       assertFalse(node1.isNot());
1367:       assertFalse(node1.isObjectLit());
1368:       assertFalse(node1.isAnd());
1369:       assertFalse(node1.isCast());
1370:       assertFalse(node1.isInc());
1371:       assertFalse(node1.isFunction());
1372:       assertFalse(node1.isFalse());
1373:       assertFalse(node1.isThrow());
1374:       assertTrue(node1.isNumber());
1375:       assertFalse(node1.isIn());
1376:       assertFalse(node1.isDelProp());
1377:       assertFalse(node1.isGetterDef());
1378:       assertFalse(node1.isSwitch());
1379:       assertFalse(node1.isNE());
1380:       assertFalse(node1.isIf());
1381:       assertFalse(node1.isTry());
1382:       assertFalse(node1.isDebugger());
1383:       assertFalse(node1.isVoid());
1384:       assertEquals((-1), node1.getCharno());
1385:       assertFalse(node1.isRegExp());
1386:       assertFalse(node1.isString());
1387:       assertFalse(node1.isFor());
1388:       assertFalse(node1.isCase());
1389:       assertFalse(node1.isHook());
1390:       assertFalse(node1.isThis());
1391:       assertEquals(0, node1.getChildCount());
1392:       assertFalse(node1.isComma());
1393:       assertFalse(node1.isName());
1394:       assertFalse(node1.isBreak());
1395:       assertFalse(node1.isTrue());
1396:       assertFalse(node1.isNull());
1397:       assertFalse(node1.isStringKey());
1398:       assertFalse(node1.isParamList());
1399:       assertFalse(node1.isAdd());
1400:       assertFalse(node1.isNew());
1401:       assertFalse(node1.isArrayLit());
1402:       assertFalse(node1.isDo());
1403:       assertFalse(node1.isEmpty());
1404:       assertFalse(node1.isVar());
1405:       assertFalse(node1.isDefaultCase());
1406:       assertFalse(node2.isParamList());
1407:       assertFalse(node2.isNull());
1408:       assertFalse(node2.isSetterDef());
1409:       assertFalse(node2.isDefaultCase());
1410:       assertFalse(node2.isDebugger());
1411:       assertFalse(node2.isTry());
1412:       assertFalse(node2.isFor());
1413:       assertFalse(node2.isName());
1414:       assertFalse(node2.isBlock());
1415:       assertFalse(node2.isTrue());
1416:       assertFalse(node2.isRegExp());
1417:       assertFalse(node2.isIf());
1418:       assertFalse(node2.isDelProp());
1419:       assertFalse(node2.isVoid());
1420:       assertTrue(node2.hasChildren());
1421:       assertFalse(node2.isCall());
1422:       assertFalse(node2.isCatch());
1423:       assertFalse(node2.isOr());
1424:       assertFalse(node2.isLabel());
1425:       assertFalse(node2.isAssignAdd());
1426:       assertEquals(10, node2.getType());
1427:       assertFalse(node2.isNumber());
1428:       assertFalse(node2.isGetterDef());
1429:       assertFalse(node2.isDo());
1430:       assertFalse(node2.isCase());
1431:       assertFalse(node2.isAdd());
1432:       assertFalse(node2.isEmpty());
1433:       assertFalse(node2.isNew());
1434:       assertFalse(node2.isArrayLit());
1435:       assertFalse(node2.isVar());
1436:       assertFalse(node2.isLabelName());
1437:       assertFalse(node2.isStringKey());
1438:       assertFalse(node2.isSwitch());
1439:       assertFalse(node2.isObjectLit());
1440:       assertEquals(2, node2.getChildCount());
1441:       assertFalse(node2.isAnd());
1442:       assertFalse(node2.isScript());
1443:       assertFalse(node2.isNot());
1444:       assertFalse(node2.isGetProp());
1445:       assertEquals(151553, node2.getSourcePosition());
1446:       assertFalse(node2.isHook());
1447:       assertFalse(node2.hasOneChild());
1448:       assertFalse(node2.isTypeOf());
1449:       assertFalse(node2.isThis());
1450:       assertFalse(node2.isBreak());
1451:       assertFalse(node2.isComma());
1452:       assertTrue(node2.hasMoreThanOneChild());
1453:       assertFalse(node2.isAssign());
1454:       assertFalse(node2.isDec());
1455:       assertFalse(node2.isWith());
1456:       assertFalse(node2.isGetElem());
1457:       assertFalse(node2.isExprResult());
1458:       assertFalse(node2.isInstanceOf());
1459:       assertFalse(node2.isIn());
1460:       assertFalse(node2.isReturn());
1461:       assertFalse(node2.isWhile());
1462:       assertFalse(node2.isNE());
1463:       assertEquals(1, node2.getCharno());
1464:       assertFalse(node2.isInc());
1465:       assertFalse(node2.isString());
1466:       assertFalse(node2.isThrow());
1467:       assertFalse(node2.isFunction());
1468:       assertEquals(37, node2.getLineno());
1469:       assertFalse(node2.isFalse());
1470:       assertFalse(node2.isContinue());
1471:       assertFalse(node2.isCast());
1472:       assertEquals(29, Node.JSDOC_INFO_PROP);
1473:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1474:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1475:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1476:       assertEquals(37, Node.OPT_ARG_NAME);
1477:       assertEquals(47, Node.IS_DISPATCHER);
1478:       assertEquals(2, Node.POST_FLAG);
1479:       assertEquals(12, Node.COLUMN_BITS);
1480:       assertEquals(32, Node.INCRDECR_PROP);
1481:       assertEquals(1, Node.DECR_FLAG);
1482:       assertEquals(54, Node.SLASH_V);
1483:       assertEquals(43, Node.IS_CONSTANT_NAME);
1484:       assertEquals(46, Node.IS_NAMESPACE);
1485:       assertEquals(50, Node.FREE_CALL);
1486:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1487:       assertEquals(40, Node.ORIGINALNAME_PROP);
1488:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1489:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1490:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1491:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1492:       assertEquals(30, Node.VAR_ARGS_NAME);
1493:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1494:       assertEquals(4095, Node.COLUMN_MASK);
1495:       assertEquals(55, Node.INFERRED_FUNCTION);
1496:       assertEquals(57, Node.LAST_PROP);
1497:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1498:       assertEquals(49, Node.DIRECT_EVAL);
1499:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1500:       assertEquals(48, Node.DIRECTIVES);
1501:       assertEquals(8, Node.FLAG_NO_THROWS);
1502:       assertEquals(39, Node.EMPTY_BLOCK);
1503:       assertEquals(53, Node.INPUT_ID);
1504:       assertEquals(56, Node.CHANGE_TIME);
1505:       assertEquals(52, Node.LENGTH);
1506:       assertEquals(57, Node.REFLECTED_OBJECT);
1507:       assertEquals(36, Node.QUOTED_PROP);
1508:       assertEquals(37, Node.OPT_ARG_NAME);
1509:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1510:       assertEquals(47, Node.IS_DISPATCHER);
1511:       assertEquals(32, Node.INCRDECR_PROP);
1512:       assertEquals(46, Node.IS_NAMESPACE);
1513:       assertEquals(56, Node.CHANGE_TIME);
1514:       assertEquals(12, Node.COLUMN_BITS);
1515:       assertEquals(30, Node.VAR_ARGS_NAME);
1516:       assertEquals(2, Node.POST_FLAG);
1517:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1518:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1519:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1520:       assertEquals(53, Node.INPUT_ID);
1521:       assertEquals(57, Node.LAST_PROP);
1522:       assertEquals(49, Node.DIRECT_EVAL);
1523:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1524:       assertEquals(55, Node.INFERRED_FUNCTION);
1525:       assertEquals(29, Node.JSDOC_INFO_PROP);
1526:       assertEquals(57, Node.REFLECTED_OBJECT);
1527:       assertEquals(36, Node.QUOTED_PROP);
1528:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1529:       assertEquals(52, Node.LENGTH);
1530:       assertEquals(8, Node.FLAG_NO_THROWS);
1531:       assertEquals(48, Node.DIRECTIVES);
1532:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1533:       assertEquals(39, Node.EMPTY_BLOCK);
1534:       assertEquals(40, Node.ORIGINALNAME_PROP);
1535:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1536:       assertEquals(4095, Node.COLUMN_MASK);
1537:       assertEquals(54, Node.SLASH_V);
1538:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1539:       assertEquals(43, Node.IS_CONSTANT_NAME);
1540:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1541:       assertEquals(1, Node.DECR_FLAG);
1542:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1543:       assertEquals(50, Node.FREE_CALL);
1544:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1545:       assertEquals(55, Node.INFERRED_FUNCTION);
1546:       assertEquals(4095, Node.COLUMN_MASK);
1547:       assertEquals(8, Node.FLAG_NO_THROWS);
1548:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1549:       assertEquals(36, Node.QUOTED_PROP);
1550:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1551:       assertEquals(48, Node.DIRECTIVES);
1552:       assertEquals(43, Node.IS_CONSTANT_NAME);
1553:       assertEquals(53, Node.INPUT_ID);
1554:       assertEquals(57, Node.REFLECTED_OBJECT);
1555:       assertEquals(40, Node.ORIGINALNAME_PROP);
1556:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1557:       assertEquals(52, Node.LENGTH);
1558:       assertEquals(30, Node.VAR_ARGS_NAME);
1559:       assertEquals(29, Node.JSDOC_INFO_PROP);
1560:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1561:       assertEquals(39, Node.EMPTY_BLOCK);
1562:       assertEquals(47, Node.IS_DISPATCHER);
1563:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1564:       assertEquals(57, Node.LAST_PROP);
1565:       assertEquals(32, Node.INCRDECR_PROP);
1566:       assertEquals(46, Node.IS_NAMESPACE);
1567:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1568:       assertEquals(12, Node.COLUMN_BITS);
1569:       assertEquals(2, Node.POST_FLAG);
1570:       assertEquals(56, Node.CHANGE_TIME);
1571:       assertEquals(49, Node.DIRECT_EVAL);
1572:       assertEquals(37, Node.OPT_ARG_NAME);
1573:       assertEquals(54, Node.SLASH_V);
1574:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1575:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1576:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1577:       assertEquals(50, Node.FREE_CALL);
1578:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1579:       assertEquals(1, Node.DECR_FLAG);
1580:       
1581:       String string0 = node1.checkTreeEquals(node2);
1582:       assertNotSame(node0, node2);
1583:       assertNotSame(node2, node0);
1584:       assertEquals("Node tree inequality:\nTree1:\nNUMBER 47.0\n\n\nTree2:\nBITXOR 37\n    NUMBER 47.0\n    BITXOR\n\n\nSubtree1: NUMBER 47.0\n\n\nSubtree2: BITXOR 37\n    NUMBER 47.0\n    BITXOR\n", string0);
1585:       assertFalse(node0.isAssign());
1586:       assertFalse(node0.isLabelName());
1587:       assertFalse(node0.hasChildren());
1588:       assertFalse(node0.isGetElem());
1589:       assertFalse(node0.isCast());
1590:       assertEquals((-1), node0.getSourcePosition());
1591:       assertFalse(node0.isDec());
1592:       assertFalse(node0.isNumber());
1593:       assertFalse(node0.isTypeOf());
1594:       assertFalse(node0.isOr());
1595:       assertEquals((-1), node0.getLineno());
1596:       assertFalse(node0.isExprResult());
1597:       assertFalse(node0.isDo());
1598:       assertFalse(node0.isContinue());
1599:       assertFalse(node0.isAdd());
1600:       assertFalse(node0.isAssignAdd());
1601:       assertFalse(node0.isLabel());
1602:       assertFalse(node0.isNew());
1603:       assertFalse(node0.isVar());
1604:       assertFalse(node0.isStringKey());
1605:       assertEquals((-1), node0.getCharno());
1606:       assertFalse(node0.isSwitch());
1607:       assertFalse(node0.isParamList());
1608:       assertFalse(node0.isWith());
1609:       assertFalse(node0.isCase());
1610:       assertFalse(node0.isCatch());
1611:       assertFalse(node0.hasMoreThanOneChild());
1612:       assertFalse(node0.isScript());
1613:       assertFalse(node0.isInstanceOf());
1614:       assertFalse(node0.isRegExp());
1615:       assertFalse(node0.isTry());
1616:       assertFalse(node0.isHook());
1617:       assertFalse(node0.isThis());
1618:       assertFalse(node0.isBlock());
1619:       assertEquals(10, node0.getType());
1620:       assertFalse(node0.hasOneChild());
1621:       assertFalse(node0.isFor());
1622:       assertFalse(node0.isEmpty());
1623:       assertFalse(node0.isGetterDef());
1624:       assertFalse(node0.isTrue());
1625:       assertFalse(node0.isNE());
1626:       assertFalse(node0.isArrayLit());
1627:       assertFalse(node0.isDelProp());
1628:       assertFalse(node0.isIf());
1629:       assertFalse(node0.isVoid());
1630:       assertFalse(node0.isIn());
1631:       assertEquals(0, node0.getChildCount());
1632:       assertFalse(node0.isFunction());
1633:       assertFalse(node0.isInc());
1634:       assertFalse(node0.isSetterDef());
1635:       assertFalse(node0.isDefaultCase());
1636:       assertFalse(node0.isBreak());
1637:       assertFalse(node0.isThrow());
1638:       assertFalse(node0.isCall());
1639:       assertFalse(node0.isNull());
1640:       assertFalse(node0.isComma());
1641:       assertFalse(node0.isFalse());
1642:       assertFalse(node0.isAnd());
1643:       assertFalse(node0.isName());
1644:       assertFalse(node0.isNot());
1645:       assertFalse(node0.isString());
1646:       assertFalse(node0.isWhile());
1647:       assertFalse(node0.isDebugger());
1648:       assertFalse(node0.isObjectLit());
1649:       assertFalse(node0.isGetProp());
1650:       assertFalse(node0.isReturn());
1651:       assertFalse(node1.isOr());
1652:       assertFalse(node1.isAssignAdd());
1653:       assertFalse(node1.isLabel());
1654:       assertFalse(node1.isReturn());
1655:       assertEquals((-1), node1.getLineno());
1656:       assertFalse(node1.hasMoreThanOneChild());
1657:       assertFalse(node1.isTypeOf());
1658:       assertFalse(node1.isContinue());
1659:       assertFalse(node1.isLabelName());
1660:       assertFalse(node1.isGetElem());
1661:       assertEquals((-1), node1.getSourcePosition());
1662:       assertFalse(node1.isBlock());
1663:       assertFalse(node1.hasOneChild());
1664:       assertFalse(node1.isScript());
1665:       assertFalse(node1.isCall());
1666:       assertFalse(node1.isExprResult());
1667:       assertEquals(39, node1.getType());
1668:       assertFalse(node1.isAssign());
1669:       assertFalse(node1.isWith());
1670:       assertFalse(node1.hasChildren());
1671:       assertFalse(node1.isDec());
1672:       assertFalse(node1.isWhile());
1673:       assertFalse(node1.isGetProp());
1674:       assertFalse(node1.isSetterDef());
1675:       assertFalse(node1.isCatch());
1676:       assertFalse(node1.isInstanceOf());
1677:       assertFalse(node1.isNot());
1678:       assertFalse(node1.isObjectLit());
1679:       assertFalse(node1.isAnd());
1680:       assertFalse(node1.isCast());
1681:       assertFalse(node1.isInc());
1682:       assertFalse(node1.isFunction());
1683:       assertFalse(node1.isFalse());
1684:       assertFalse(node1.isThrow());
1685:       assertTrue(node1.isNumber());
1686:       assertFalse(node1.isIn());
1687:       assertFalse(node1.isDelProp());
1688:       assertFalse(node1.isGetterDef());
1689:       assertFalse(node1.isSwitch());
1690:       assertFalse(node1.isNE());
1691:       assertFalse(node1.isIf());
1692:       assertFalse(node1.isTry());
1693:       assertFalse(node1.isDebugger());
1694:       assertFalse(node1.isVoid());
1695:       assertEquals((-1), node1.getCharno());
1696:       assertFalse(node1.isRegExp());
1697:       assertFalse(node1.isString());
1698:       assertFalse(node1.isFor());
1699:       assertFalse(node1.isCase());
1700:       assertFalse(node1.isHook());
1701:       assertFalse(node1.isThis());
1702:       assertEquals(0, node1.getChildCount());
1703:       assertFalse(node1.isComma());
1704:       assertFalse(node1.isName());
1705:       assertFalse(node1.isBreak());
1706:       assertFalse(node1.isTrue());
1707:       assertFalse(node1.isNull());
1708:       assertFalse(node1.isStringKey());
1709:       assertFalse(node1.isParamList());
1710:       assertFalse(node1.isAdd());
1711:       assertFalse(node1.isNew());
1712:       assertFalse(node1.isArrayLit());
1713:       assertFalse(node1.isDo());
1714:       assertFalse(node1.isEmpty());
1715:       assertFalse(node1.isVar());
1716:       assertFalse(node1.isDefaultCase());
1717:       assertFalse(node2.isParamList());
1718:       assertFalse(node2.isNull());
1719:       assertFalse(node2.isSetterDef());
1720:       assertFalse(node2.isDefaultCase());
1721:       assertFalse(node2.isDebugger());
1722:       assertFalse(node2.isTry());
1723:       assertFalse(node2.isFor());
1724:       assertFalse(node2.isName());
1725:       assertFalse(node2.isBlock());
1726:       assertFalse(node2.isTrue());
1727:       assertFalse(node2.isRegExp());
1728:       assertFalse(node2.isIf());
1729:       assertFalse(node2.isDelProp());
1730:       assertFalse(node2.isVoid());
1731:       assertTrue(node2.hasChildren());
1732:       assertFalse(node2.isCall());
1733:       assertFalse(node2.isCatch());
1734:       assertFalse(node2.isOr());
1735:       assertFalse(node2.isLabel());
1736:       assertFalse(node2.isAssignAdd());
1737:       assertEquals(10, node2.getType());
1738:       assertFalse(node2.isNumber());
1739:       assertFalse(node2.isGetterDef());
1740:       assertFalse(node2.isDo());
1741:       assertFalse(node2.isCase());
1742:       assertFalse(node2.isAdd());
1743:       assertFalse(node2.isEmpty());
1744:       assertFalse(node2.isNew());
1745:       assertFalse(node2.isArrayLit());
1746:       assertFalse(node2.isVar());
1747:       assertFalse(node2.isLabelName());
1748:       assertFalse(node2.isStringKey());
1749:       assertFalse(node2.isSwitch());
1750:       assertFalse(node2.isObjectLit());
1751:       assertEquals(2, node2.getChildCount());
1752:       assertFalse(node2.isAnd());
1753:       assertFalse(node2.isScript());
1754:       assertFalse(node2.isNot());
1755:       assertFalse(node2.isGetProp());
1756:       assertEquals(151553, node2.getSourcePosition());
1757:       assertFalse(node2.isHook());
1758:       assertFalse(node2.hasOneChild());
1759:       assertFalse(node2.isTypeOf());
1760:       assertFalse(node2.isThis());
1761:       assertFalse(node2.isBreak());
1762:       assertFalse(node2.isComma());
1763:       assertTrue(node2.hasMoreThanOneChild());
1764:       assertFalse(node2.isAssign());
1765:       assertFalse(node2.isDec());
1766:       assertFalse(node2.isWith());
1767:       assertFalse(node2.isGetElem());
1768:       assertFalse(node2.isExprResult());
1769:       assertFalse(node2.isInstanceOf());
1770:       assertFalse(node2.isIn());
1771:       assertFalse(node2.isReturn());
1772:       assertFalse(node2.isWhile());
1773:       assertFalse(node2.isNE());
1774:       assertEquals(1, node2.getCharno());
1775:       assertFalse(node2.isInc());
1776:       assertFalse(node2.isString());
1777:       assertFalse(node2.isThrow());
1778:       assertFalse(node2.isFunction());
1779:       assertEquals(37, node2.getLineno());
1780:       assertFalse(node2.isFalse());
1781:       assertFalse(node2.isContinue());
1782:       assertFalse(node2.isCast());
1783:       assertEquals(29, Node.JSDOC_INFO_PROP);
1784:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1785:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1786:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1787:       assertEquals(37, Node.OPT_ARG_NAME);
1788:       assertEquals(47, Node.IS_DISPATCHER);
1789:       assertEquals(2, Node.POST_FLAG);
1790:       assertEquals(12, Node.COLUMN_BITS);
1791:       assertEquals(32, Node.INCRDECR_PROP);
1792:       assertEquals(1, Node.DECR_FLAG);
1793:       assertEquals(54, Node.SLASH_V);
1794:       assertEquals(43, Node.IS_CONSTANT_NAME);
1795:       assertEquals(46, Node.IS_NAMESPACE);
1796:       assertEquals(50, Node.FREE_CALL);
1797:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1798:       assertEquals(40, Node.ORIGINALNAME_PROP);
1799:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1800:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1801:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1802:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1803:       assertEquals(30, Node.VAR_ARGS_NAME);
1804:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1805:       assertEquals(4095, Node.COLUMN_MASK);
1806:       assertEquals(55, Node.INFERRED_FUNCTION);
1807:       assertEquals(57, Node.LAST_PROP);
1808:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1809:       assertEquals(49, Node.DIRECT_EVAL);
1810:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1811:       assertEquals(48, Node.DIRECTIVES);
1812:       assertEquals(8, Node.FLAG_NO_THROWS);
1813:       assertEquals(39, Node.EMPTY_BLOCK);
1814:       assertEquals(53, Node.INPUT_ID);
1815:       assertEquals(56, Node.CHANGE_TIME);
1816:       assertEquals(52, Node.LENGTH);
1817:       assertEquals(57, Node.REFLECTED_OBJECT);
1818:       assertEquals(36, Node.QUOTED_PROP);
1819:       assertEquals(37, Node.OPT_ARG_NAME);
1820:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1821:       assertEquals(47, Node.IS_DISPATCHER);
1822:       assertEquals(32, Node.INCRDECR_PROP);
1823:       assertEquals(46, Node.IS_NAMESPACE);
1824:       assertEquals(56, Node.CHANGE_TIME);
1825:       assertEquals(12, Node.COLUMN_BITS);
1826:       assertEquals(30, Node.VAR_ARGS_NAME);
1827:       assertEquals(2, Node.POST_FLAG);
1828:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1829:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1830:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1831:       assertEquals(53, Node.INPUT_ID);
1832:       assertEquals(57, Node.LAST_PROP);
1833:       assertEquals(49, Node.DIRECT_EVAL);
1834:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1835:       assertEquals(55, Node.INFERRED_FUNCTION);
1836:       assertEquals(29, Node.JSDOC_INFO_PROP);
1837:       assertEquals(57, Node.REFLECTED_OBJECT);
1838:       assertEquals(36, Node.QUOTED_PROP);
1839:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1840:       assertEquals(52, Node.LENGTH);
1841:       assertEquals(8, Node.FLAG_NO_THROWS);
1842:       assertEquals(48, Node.DIRECTIVES);
1843:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1844:       assertEquals(39, Node.EMPTY_BLOCK);
1845:       assertEquals(40, Node.ORIGINALNAME_PROP);
1846:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1847:       assertEquals(4095, Node.COLUMN_MASK);
1848:       assertEquals(54, Node.SLASH_V);
1849:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1850:       assertEquals(43, Node.IS_CONSTANT_NAME);
1851:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1852:       assertEquals(1, Node.DECR_FLAG);
1853:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1854:       assertEquals(50, Node.FREE_CALL);
1855:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1856:       assertEquals(55, Node.INFERRED_FUNCTION);
1857:       assertEquals(4095, Node.COLUMN_MASK);
1858:       assertEquals(8, Node.FLAG_NO_THROWS);
1859:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1860:       assertEquals(36, Node.QUOTED_PROP);
1861:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1862:       assertEquals(48, Node.DIRECTIVES);
1863:       assertEquals(43, Node.IS_CONSTANT_NAME);
1864:       assertEquals(53, Node.INPUT_ID);
1865:       assertEquals(57, Node.REFLECTED_OBJECT);
1866:       assertEquals(40, Node.ORIGINALNAME_PROP);
1867:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1868:       assertEquals(52, Node.LENGTH);
1869:       assertEquals(30, Node.VAR_ARGS_NAME);
1870:       assertEquals(29, Node.JSDOC_INFO_PROP);
1871:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1872:       assertEquals(39, Node.EMPTY_BLOCK);
1873:       assertEquals(47, Node.IS_DISPATCHER);
1874:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1875:       assertEquals(57, Node.LAST_PROP);
1876:       assertEquals(32, Node.INCRDECR_PROP);
1877:       assertEquals(46, Node.IS_NAMESPACE);
1878:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1879:       assertEquals(12, Node.COLUMN_BITS);
1880:       assertEquals(2, Node.POST_FLAG);
1881:       assertEquals(56, Node.CHANGE_TIME);
1882:       assertEquals(49, Node.DIRECT_EVAL);
1883:       assertEquals(37, Node.OPT_ARG_NAME);
1884:       assertEquals(54, Node.SLASH_V);
1885:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1886:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1887:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1888:       assertEquals(50, Node.FREE_CALL);
1889:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1890:       assertEquals(1, Node.DECR_FLAG);
1891:       
1892:       boolean boolean4 = node1.hasChild(node0);
1893:       assertNotSame(node0, node2);
1894:       assertFalse(boolean4);
1895:       assertFalse(node0.isAssign());
1896:       assertFalse(node0.isLabelName());
1897:       assertFalse(node0.hasChildren());
1898:       assertFalse(node0.isGetElem());
1899:       assertFalse(node0.isCast());
1900:       assertEquals((-1), node0.getSourcePosition());
1901:       assertFalse(node0.isDec());
1902:       assertFalse(node0.isNumber());
1903:       assertFalse(node0.isTypeOf());
1904:       assertFalse(node0.isOr());
1905:       assertEquals((-1), node0.getLineno());
1906:       assertFalse(node0.isExprResult());
1907:       assertFalse(node0.isDo());
1908:       assertFalse(node0.isContinue());
1909:       assertFalse(node0.isAdd());
1910:       assertFalse(node0.isAssignAdd());
1911:       assertFalse(node0.isLabel());
1912:       assertFalse(node0.isNew());
1913:       assertFalse(node0.isVar());
1914:       assertFalse(node0.isStringKey());
1915:       assertEquals((-1), node0.getCharno());
1916:       assertFalse(node0.isSwitch());
1917:       assertFalse(node0.isParamList());
1918:       assertFalse(node0.isWith());
1919:       assertFalse(node0.isCase());
1920:       assertFalse(node0.isCatch());
1921:       assertFalse(node0.hasMoreThanOneChild());
1922:       assertFalse(node0.isScript());
1923:       assertFalse(node0.isInstanceOf());
1924:       assertFalse(node0.isRegExp());
1925:       assertFalse(node0.isTry());
1926:       assertFalse(node0.isHook());
1927:       assertFalse(node0.isThis());
1928:       assertFalse(node0.isBlock());
1929:       assertEquals(10, node0.getType());
1930:       assertFalse(node0.hasOneChild());
1931:       assertFalse(node0.isFor());
1932:       assertFalse(node0.isEmpty());
1933:       assertFalse(node0.isGetterDef());
1934:       assertFalse(node0.isTrue());
1935:       assertFalse(node0.isNE());
1936:       assertFalse(node0.isArrayLit());
1937:       assertFalse(node0.isDelProp());
1938:       assertFalse(node0.isIf());
1939:       assertFalse(node0.isVoid());
1940:       assertFalse(node0.isIn());
1941:       assertEquals(0, node0.getChildCount());
1942:       assertFalse(node0.isFunction());
1943:       assertFalse(node0.isInc());
1944:       assertFalse(node0.isSetterDef());
1945:       assertFalse(node0.isDefaultCase());
1946:       assertFalse(node0.isBreak());
1947:       assertFalse(node0.isThrow());
1948:       assertFalse(node0.isCall());
1949:       assertFalse(node0.isNull());
1950:       assertFalse(node0.isComma());
1951:       assertFalse(node0.isFalse());
1952:       assertFalse(node0.isAnd());
1953:       assertFalse(node0.isName());
1954:       assertFalse(node0.isNot());
1955:       assertFalse(node0.isString());
1956:       assertFalse(node0.isWhile());
1957:       assertFalse(node0.isDebugger());
1958:       assertFalse(node0.isObjectLit());
1959:       assertFalse(node0.isGetProp());
1960:       assertFalse(node0.isReturn());
1961:       assertFalse(node1.isOr());
1962:       assertFalse(node1.isAssignAdd());
1963:       assertFalse(node1.isLabel());
1964:       assertFalse(node1.isReturn());
1965:       assertEquals((-1), node1.getLineno());
1966:       assertFalse(node1.hasMoreThanOneChild());
1967:       assertFalse(node1.isTypeOf());
1968:       assertFalse(node1.isContinue());
1969:       assertFalse(node1.isLabelName());
1970:       assertFalse(node1.isGetElem());
1971:       assertEquals((-1), node1.getSourcePosition());
1972:       assertFalse(node1.isBlock());
1973:       assertFalse(node1.hasOneChild());
1974:       assertFalse(node1.isScript());
1975:       assertFalse(node1.isCall());
1976:       assertFalse(node1.isExprResult());
1977:       assertEquals(39, node1.getType());
1978:       assertFalse(node1.isAssign());
1979:       assertFalse(node1.isWith());
1980:       assertFalse(node1.hasChildren());
1981:       assertFalse(node1.isDec());
1982:       assertFalse(node1.isWhile());
1983:       assertFalse(node1.isGetProp());
1984:       assertFalse(node1.isSetterDef());
1985:       assertFalse(node1.isCatch());
1986:       assertFalse(node1.isInstanceOf());
1987:       assertFalse(node1.isNot());
1988:       assertFalse(node1.isObjectLit());
1989:       assertFalse(node1.isAnd());
1990:       assertFalse(node1.isCast());
1991:       assertFalse(node1.isInc());
1992:       assertFalse(node1.isFunction());
1993:       assertFalse(node1.isFalse());
1994:       assertFalse(node1.isThrow());
1995:       assertTrue(node1.isNumber());
1996:       assertFalse(node1.isIn());
1997:       assertFalse(node1.isDelProp());
1998:       assertFalse(node1.isGetterDef());
1999:       assertFalse(node1.isSwitch());
2000:       assertFalse(node1.isNE());
2001:       assertFalse(node1.isIf());
2002:       assertFalse(node1.isTry());
2003:       assertFalse(node1.isDebugger());
2004:       assertFalse(node1.isVoid());
2005:       assertEquals((-1), node1.getCharno());
2006:       assertFalse(node1.isRegExp());
2007:       assertFalse(node1.isString());
2008:       assertFalse(node1.isFor());
2009:       assertFalse(node1.isCase());
2010:       assertFalse(node1.isHook());
2011:       assertFalse(node1.isThis());
2012:       assertEquals(0, node1.getChildCount());
2013:       assertFalse(node1.isComma());
2014:       assertFalse(node1.isName());
2015:       assertFalse(node1.isBreak());
2016:       assertFalse(node1.isTrue());
2017:       assertFalse(node1.isNull());
2018:       assertFalse(node1.isStringKey());
2019:       assertFalse(node1.isParamList());
2020:       assertFalse(node1.isAdd());
2021:       assertFalse(node1.isNew());
2022:       assertFalse(node1.isArrayLit());
2023:       assertFalse(node1.isDo());
2024:       assertFalse(node1.isEmpty());
2025:       assertFalse(node1.isVar());
2026:       assertFalse(node1.isDefaultCase());
2027:       assertEquals(29, Node.JSDOC_INFO_PROP);
2028:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2029:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2030:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2031:       assertEquals(37, Node.OPT_ARG_NAME);
2032:       assertEquals(47, Node.IS_DISPATCHER);
2033:       assertEquals(2, Node.POST_FLAG);
2034:       assertEquals(12, Node.COLUMN_BITS);
2035:       assertEquals(32, Node.INCRDECR_PROP);
2036:       assertEquals(1, Node.DECR_FLAG);
2037:       assertEquals(54, Node.SLASH_V);
2038:       assertEquals(43, Node.IS_CONSTANT_NAME);
2039:       assertEquals(46, Node.IS_NAMESPACE);
2040:       assertEquals(50, Node.FREE_CALL);
2041:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2042:       assertEquals(40, Node.ORIGINALNAME_PROP);
2043:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2044:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2045:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2046:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2047:       assertEquals(30, Node.VAR_ARGS_NAME);
2048:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2049:       assertEquals(4095, Node.COLUMN_MASK);
2050:       assertEquals(55, Node.INFERRED_FUNCTION);
2051:       assertEquals(57, Node.LAST_PROP);
2052:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2053:       assertEquals(49, Node.DIRECT_EVAL);
2054:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2055:       assertEquals(48, Node.DIRECTIVES);
2056:       assertEquals(8, Node.FLAG_NO_THROWS);
2057:       assertEquals(39, Node.EMPTY_BLOCK);
2058:       assertEquals(53, Node.INPUT_ID);
2059:       assertEquals(56, Node.CHANGE_TIME);
2060:       assertEquals(52, Node.LENGTH);
2061:       assertEquals(57, Node.REFLECTED_OBJECT);
2062:       assertEquals(36, Node.QUOTED_PROP);
2063:       assertEquals(37, Node.OPT_ARG_NAME);
2064:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2065:       assertEquals(47, Node.IS_DISPATCHER);
2066:       assertEquals(32, Node.INCRDECR_PROP);
2067:       assertEquals(46, Node.IS_NAMESPACE);
2068:       assertEquals(56, Node.CHANGE_TIME);
2069:       assertEquals(12, Node.COLUMN_BITS);
2070:       assertEquals(30, Node.VAR_ARGS_NAME);
2071:       assertEquals(2, Node.POST_FLAG);
2072:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2073:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2074:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2075:       assertEquals(53, Node.INPUT_ID);
2076:       assertEquals(57, Node.LAST_PROP);
2077:       assertEquals(49, Node.DIRECT_EVAL);
2078:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2079:       assertEquals(55, Node.INFERRED_FUNCTION);
2080:       assertEquals(29, Node.JSDOC_INFO_PROP);
2081:       assertEquals(57, Node.REFLECTED_OBJECT);
2082:       assertEquals(36, Node.QUOTED_PROP);
2083:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2084:       assertEquals(52, Node.LENGTH);
2085:       assertEquals(8, Node.FLAG_NO_THROWS);
2086:       assertEquals(48, Node.DIRECTIVES);
2087:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2088:       assertEquals(39, Node.EMPTY_BLOCK);
2089:       assertEquals(40, Node.ORIGINALNAME_PROP);
2090:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2091:       assertEquals(4095, Node.COLUMN_MASK);
2092:       assertEquals(54, Node.SLASH_V);
2093:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2094:       assertEquals(43, Node.IS_CONSTANT_NAME);
2095:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2096:       assertEquals(1, Node.DECR_FLAG);
2097:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2098:       assertEquals(50, Node.FREE_CALL);
2099:       
2100:       node1.getStaticSourceFile();
2101:       assertFalse(node1.isOr());
2102:       assertFalse(node1.isAssignAdd());
2103:       assertFalse(node1.isLabel());
2104:       assertFalse(node1.isReturn());
2105:       assertEquals((-1), node1.getLineno());
2106:       assertFalse(node1.hasMoreThanOneChild());
2107:       assertFalse(node1.isTypeOf());
2108:       assertFalse(node1.isContinue());
2109:       assertFalse(node1.isLabelName());
2110:       assertFalse(node1.isGetElem());
2111:       assertEquals((-1), node1.getSourcePosition());
2112:       assertFalse(node1.isBlock());
2113:       assertFalse(node1.hasOneChild());
2114:       assertFalse(node1.isScript());
2115:       assertFalse(node1.isCall());
2116:       assertFalse(node1.isExprResult());
2117:       assertEquals(39, node1.getType());
2118:       assertFalse(node1.isAssign());
2119:       assertFalse(node1.isWith());
2120:       assertFalse(node1.hasChildren());
2121:       assertFalse(node1.isDec());
2122:       assertFalse(node1.isWhile());
2123:       assertFalse(node1.isGetProp());
2124:       assertFalse(node1.isSetterDef());
2125:       assertFalse(node1.isCatch());
2126:       assertFalse(node1.isInstanceOf());
2127:       assertFalse(node1.isNot());
2128:       assertFalse(node1.isObjectLit());
2129:       assertFalse(node1.isAnd());
2130:       assertFalse(node1.isCast());
2131:       assertFalse(node1.isInc());
2132:       assertFalse(node1.isFunction());
2133:       assertFalse(node1.isFalse());
2134:       assertFalse(node1.isThrow());
2135:       assertTrue(node1.isNumber());
2136:       assertFalse(node1.isIn());
2137:       assertFalse(node1.isDelProp());
2138:       assertFalse(node1.isGetterDef());
2139:       assertFalse(node1.isSwitch());
2140:       assertFalse(node1.isNE());
2141:       assertFalse(node1.isIf());
2142:       assertFalse(node1.isTry());
2143:       assertFalse(node1.isDebugger());
2144:       assertFalse(node1.isVoid());
2145:       assertEquals((-1), node1.getCharno());
2146:       assertFalse(node1.isRegExp());
2147:       assertFalse(node1.isString());
2148:       assertFalse(node1.isFor());
2149:       assertFalse(node1.isCase());
2150:       assertFalse(node1.isHook());
2151:       assertFalse(node1.isThis());
2152:       assertEquals(0, node1.getChildCount());
2153:       assertFalse(node1.isComma());
2154:       assertFalse(node1.isName());
2155:       assertFalse(node1.isBreak());
2156:       assertFalse(node1.isTrue());
2157:       assertFalse(node1.isNull());
2158:       assertFalse(node1.isStringKey());
2159:       assertFalse(node1.isParamList());
2160:       assertFalse(node1.isAdd());
2161:       assertFalse(node1.isNew());
2162:       assertFalse(node1.isArrayLit());
2163:       assertFalse(node1.isDo());
2164:       assertFalse(node1.isEmpty());
2165:       assertFalse(node1.isVar());
2166:       assertFalse(node1.isDefaultCase());
2167:       assertEquals(37, Node.OPT_ARG_NAME);
2168:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2169:       
2170:       node0.getSourceFileName();
2171:       assertNotSame(node0, node2);
2172:       assertFalse(node0.isAssign());
2173:       assertFalse(node0.isLabelName());
2174:       assertFalse(node0.hasChildren());
2175:       assertFalse(node0.isGetElem());
2176:       assertFalse(node0.isCast());
2177:       assertEquals((-1), node0.getSourcePosition());
2178:       assertFalse(node0.isDec());
2179:       assertFalse(node0.isNumber());
2180:       assertFalse(node0.isTypeOf());
2181:       assertFalse(node0.isOr());
2182:       assertEquals((-1), node0.getLineno());
2183:       assertFalse(node0.isExprResult());
2184:       assertFalse(node0.isDo());
2185:       assertFalse(node0.isContinue());
2186:       assertFalse(node0.isAdd());
2187:       assertFalse(node0.isAssignAdd());
2188:       assertFalse(node0.isLabel());
2189:       assertFalse(node0.isNew());
2190:       assertFalse(node0.isVar());
2191:       assertFalse(node0.isStringKey());
2192:       assertEquals((-1), node0.getCharno());
2193:       assertFalse(node0.isSwitch());
2194:       assertFalse(node0.isParamList());
2195:       assertFalse(node0.isWith());
2196:       assertFalse(node0.isCase());
2197:       assertFalse(node0.isCatch());
2198:       assertFalse(node0.hasMoreThanOneChild());
2199:       assertFalse(node0.isScript());
2200:       assertFalse(node0.isInstanceOf());
2201:       assertFalse(node0.isRegExp());
2202:       assertFalse(node0.isTry());
2203:       assertFalse(node0.isHook());
2204:       assertFalse(node0.isThis());
2205:       assertFalse(node0.isBlock());
2206:       assertEquals(10, node0.getType());
2207:       assertFalse(node0.hasOneChild());
2208:       assertFalse(node0.isFor());
2209:       assertFalse(node0.isEmpty());
2210:       assertFalse(node0.isGetterDef());
2211:       assertFalse(node0.isTrue());
2212:       assertFalse(node0.isNE());
2213:       assertFalse(node0.isArrayLit());
2214:       assertFalse(node0.isDelProp());
2215:       assertFalse(node0.isIf());
2216:       assertFalse(node0.isVoid());
2217:       assertFalse(node0.isIn());
2218:       assertEquals(0, node0.getChildCount());
2219:       assertFalse(node0.isFunction());
2220:       assertFalse(node0.isInc());
2221:       assertFalse(node0.isSetterDef());
2222:       assertFalse(node0.isDefaultCase());
2223:       assertFalse(node0.isBreak());
2224:       assertFalse(node0.isThrow());
2225:       assertFalse(node0.isCall());
2226:       assertFalse(node0.isNull());
2227:       assertFalse(node0.isComma());
2228:       assertFalse(node0.isFalse());
2229:       assertFalse(node0.isAnd());
2230:       assertFalse(node0.isName());
2231:       assertFalse(node0.isNot());
2232:       assertFalse(node0.isString());
2233:       assertFalse(node0.isWhile());
2234:       assertFalse(node0.isDebugger());
2235:       assertFalse(node0.isObjectLit());
2236:       assertFalse(node0.isGetProp());
2237:       assertFalse(node0.isReturn());
2238:       
2239:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(37);
2240:       assertEquals(37, node_SideEffectFlags0.valueOf());
2241:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
2242:       
2243:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
2244:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2245:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2246:       assertEquals(0, node_SideEffectFlags0.valueOf());
2247:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2248:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
2249:       assertEquals(0, node_SideEffectFlags1.valueOf());
2250:       
2251:       Node node3 = node0.srcref(node1);
2252:       assertSame(node0, node3);
2253:       assertNotSame(node0, node2);
2254:       assertSame(node3, node0);
2255:       assertNotSame(node3, node2);
2256:       assertFalse(node0.isAssign());
2257:       assertFalse(node0.isLabelName());
2258:       assertFalse(node0.hasChildren());
2259:       assertFalse(node0.isGetElem());
2260:       assertFalse(node0.isCast());
2261:       assertEquals((-1), node0.getSourcePosition());
2262:       assertFalse(node0.isDec());
2263:       assertFalse(node0.isNumber());
2264:       assertFalse(node0.isTypeOf());
2265:       assertFalse(node0.isOr());
2266:       assertEquals((-1), node0.getLineno());
2267:       assertFalse(node0.isExprResult());
2268:       assertFalse(node0.isDo());
2269:       assertFalse(node0.isContinue());
2270:       assertFalse(node0.isAdd());
2271:       assertFalse(node0.isAssignAdd());
2272:       assertFalse(node0.isLabel());
2273:       assertFalse(node0.isNew());
2274:       assertFalse(node0.isVar());
2275:       assertFalse(node0.isStringKey());
2276:       assertEquals((-1), node0.getCharno());
2277:       assertFalse(node0.isSwitch());
2278:       assertFalse(node0.isParamList());
2279:       assertFalse(node0.isWith());
2280:       assertFalse(node0.isCase());
2281:       assertFalse(node0.isCatch());
2282:       assertFalse(node0.hasMoreThanOneChild());
2283:       assertFalse(node0.isScript());
2284:       assertFalse(node0.isInstanceOf());
2285:       assertFalse(node0.isRegExp());
2286:       assertFalse(node0.isTry());
2287:       assertFalse(node0.isHook());
2288:       assertFalse(node0.isThis());
2289:       assertFalse(node0.isBlock());
2290:       assertEquals(10, node0.getType());
2291:       assertFalse(node0.hasOneChild());
2292:       assertFalse(node0.isFor());
2293:       assertFalse(node0.isEmpty());
2294:       assertFalse(node0.isGetterDef());
2295:       assertFalse(node0.isTrue());
2296:       assertFalse(node0.isNE());
2297:       assertFalse(node0.isArrayLit());
2298:       assertFalse(node0.isDelProp());
2299:       assertFalse(node0.isIf());
2300:       assertFalse(node0.isVoid());
2301:       assertFalse(node0.isIn());
2302:       assertEquals(0, node0.getChildCount());
2303:       assertFalse(node0.isFunction());
2304:       assertFalse(node0.isInc());
2305:       assertFalse(node0.isSetterDef());
2306:       assertFalse(node0.isDefaultCase());
2307:       assertFalse(node0.isBreak());
2308:       assertFalse(node0.isThrow());
2309:       assertFalse(node0.isCall());
2310:       assertFalse(node0.isNull());
2311:       assertFalse(node0.isComma());
2312:       assertFalse(node0.isFalse());
2313:       assertFalse(node0.isAnd());
2314:       assertFalse(node0.isName());
2315:       assertFalse(node0.isNot());
2316:       assertFalse(node0.isString());
2317:       assertFalse(node0.isWhile());
2318:       assertFalse(node0.isDebugger());
2319:       assertFalse(node0.isObjectLit());
2320:       assertFalse(node0.isGetProp());
2321:       assertFalse(node0.isReturn());
2322:       assertFalse(node3.isObjectLit());
2323:       assertFalse(node3.isNot());
2324:       assertFalse(node3.isInstanceOf());
2325:       assertFalse(node3.isWith());
2326:       assertFalse(node3.isExprResult());
2327:       assertFalse(node3.isBreak());
2328:       assertFalse(node3.isAnd());
2329:       assertFalse(node3.isCast());
2330:       assertFalse(node3.isThrow());
2331:       assertFalse(node3.isFalse());
2332:       assertFalse(node3.isInc());
2333:       assertFalse(node3.isLabel());
2334:       assertFalse(node3.isAssignAdd());
2335:       assertFalse(node3.isString());
2336:       assertFalse(node3.isOr());
2337:       assertFalse(node3.isContinue());
2338:       assertEquals((-1), node3.getSourcePosition());
2339:       assertFalse(node3.isDelProp());
2340:       assertFalse(node3.isCall());
2341:       assertFalse(node3.isGetElem());
2342:       assertFalse(node3.isAssign());
2343:       assertFalse(node3.isTypeOf());
2344:       assertFalse(node3.isComma());
2345:       assertFalse(node3.isDec());
2346:       assertFalse(node3.isGetProp());
2347:       assertFalse(node3.hasChildren());
2348:       assertFalse(node3.isWhile());
2349:       assertFalse(node3.isReturn());
2350:       assertFalse(node3.isCatch());
2351:       assertEquals(0, node3.getChildCount());
2352:       assertFalse(node3.isRegExp());
2353:       assertFalse(node3.isDebugger());
2354:       assertFalse(node3.isParamList());
2355:       assertFalse(node3.isTrue());
2356:       assertFalse(node3.isVoid());
2357:       assertFalse(node3.isNull());
2358:       assertFalse(node3.isStringKey());
2359:       assertFalse(node3.isName());
2360:       assertFalse(node3.isVar());
2361:       assertFalse(node3.isArrayLit());
2362:       assertFalse(node3.isAdd());
2363:       assertFalse(node3.isEmpty());
2364:       assertFalse(node3.isFunction());
2365:       assertFalse(node3.isSetterDef());
2366:       assertFalse(node3.isNew());
2367:       assertFalse(node3.isDo());
2368:       assertFalse(node3.isDefaultCase());
2369:       assertEquals(10, node3.getType());
2370:       assertFalse(node3.isCase());
2371:       assertFalse(node3.isIn());
2372:       assertFalse(node3.hasMoreThanOneChild());
2373:       assertFalse(node3.isNE());
2374:       assertEquals((-1), node3.getCharno());
2375:       assertEquals((-1), node3.getLineno());
2376:       assertFalse(node3.isLabelName());
2377:       assertFalse(node3.isSwitch());
2378:       assertFalse(node3.isIf());
2379:       assertFalse(node3.isHook());
2380:       assertFalse(node3.hasOneChild());
2381:       assertFalse(node3.isGetterDef());
2382:       assertFalse(node3.isNumber());
2383:       assertFalse(node3.isThis());
2384:       assertFalse(node3.isScript());
2385:       assertFalse(node3.isBlock());
2386:       assertFalse(node3.isTry());
2387:       assertFalse(node3.isFor());
2388:       assertFalse(node1.isOr());
2389:       assertFalse(node1.isAssignAdd());
2390:       assertFalse(node1.isLabel());
2391:       assertFalse(node1.isReturn());
2392:       assertEquals((-1), node1.getLineno());
2393:       assertFalse(node1.hasMoreThanOneChild());
2394:       assertFalse(node1.isTypeOf());
2395:       assertFalse(node1.isContinue());
2396:       assertFalse(node1.isLabelName());
2397:       assertFalse(node1.isGetElem());
2398:       assertEquals((-1), node1.getSourcePosition());
2399:       assertFalse(node1.isBlock());
2400:       assertFalse(node1.hasOneChild());
2401:       assertFalse(node1.isScript());
2402:       assertFalse(node1.isCall());
2403:       assertFalse(node1.isExprResult());
2404:       assertEquals(39, node1.getType());
2405:       assertFalse(node1.isAssign());
2406:       assertFalse(node1.isWith());
2407:       assertFalse(node1.hasChildren());
2408:       assertFalse(node1.isDec());
2409:       assertFalse(node1.isWhile());
2410:       assertFalse(node1.isGetProp());
2411:       assertFalse(node1.isSetterDef());
2412:       assertFalse(node1.isCatch());
2413:       assertFalse(node1.isInstanceOf());
2414:       assertFalse(node1.isNot());
2415:       assertFalse(node1.isObjectLit());
2416:       assertFalse(node1.isAnd());
2417:       assertFalse(node1.isCast());
2418:       assertFalse(node1.isInc());
2419:       assertFalse(node1.isFunction());
2420:       assertFalse(node1.isFalse());
2421:       assertFalse(node1.isThrow());
2422:       assertTrue(node1.isNumber());
2423:       assertFalse(node1.isIn());
2424:       assertFalse(node1.isDelProp());
2425:       assertFalse(node1.isGetterDef());
2426:       assertFalse(node1.isSwitch());
2427:       assertFalse(node1.isNE());
2428:       assertFalse(node1.isIf());
2429:       assertFalse(node1.isTry());
2430:       assertFalse(node1.isDebugger());
2431:       assertFalse(node1.isVoid());
2432:       assertEquals((-1), node1.getCharno());
2433:       assertFalse(node1.isRegExp());
2434:       assertFalse(node1.isString());
2435:       assertFalse(node1.isFor());
2436:       assertFalse(node1.isCase());
2437:       assertFalse(node1.isHook());
2438:       assertFalse(node1.isThis());
2439:       assertEquals(0, node1.getChildCount());
2440:       assertFalse(node1.isComma());
2441:       assertFalse(node1.isName());
2442:       assertFalse(node1.isBreak());
2443:       assertFalse(node1.isTrue());
2444:       assertFalse(node1.isNull());
2445:       assertFalse(node1.isStringKey());
2446:       assertFalse(node1.isParamList());
2447:       assertFalse(node1.isAdd());
2448:       assertFalse(node1.isNew());
2449:       assertFalse(node1.isArrayLit());
2450:       assertFalse(node1.isDo());
2451:       assertFalse(node1.isEmpty());
2452:       assertFalse(node1.isVar());
2453:       assertFalse(node1.isDefaultCase());
2454:       
2455:       boolean boolean5 = node1.getBooleanProp(51);
2456:       assertFalse(boolean5);
2457:       assertFalse(node1.isOr());
2458:       assertFalse(node1.isAssignAdd());
2459:       assertFalse(node1.isLabel());
2460:       assertFalse(node1.isReturn());
2461:       assertEquals((-1), node1.getLineno());
2462:       assertFalse(node1.hasMoreThanOneChild());
2463:       assertFalse(node1.isTypeOf());
2464:       assertFalse(node1.isContinue());
2465:       assertFalse(node1.isLabelName());
2466:       assertFalse(node1.isGetElem());
2467:       assertEquals((-1), node1.getSourcePosition());
2468:       assertFalse(node1.isBlock());
2469:       assertFalse(node1.hasOneChild());
2470:       assertFalse(node1.isScript());
2471:       assertFalse(node1.isCall());
2472:       assertFalse(node1.isExprResult());
2473:       assertEquals(39, node1.getType());
2474:       assertFalse(node1.isAssign());
2475:       assertFalse(node1.isWith());
2476:       assertFalse(node1.hasChildren());
2477:       assertFalse(node1.isDec());
2478:       assertFalse(node1.isWhile());
2479:       assertFalse(node1.isGetProp());
2480:       assertFalse(node1.isSetterDef());
2481:       assertFalse(node1.isCatch());
2482:       assertFalse(node1.isInstanceOf());
2483:       assertFalse(node1.isNot());
2484:       assertFalse(node1.isObjectLit());
2485:       assertFalse(node1.isAnd());
2486:       assertFalse(node1.isCast());
2487:       assertFalse(node1.isInc());
2488:       assertFalse(node1.isFunction());
2489:       assertFalse(node1.isFalse());
2490:       assertFalse(node1.isThrow());
2491:       assertTrue(node1.isNumber());
2492:       assertFalse(node1.isIn());
2493:       assertFalse(node1.isDelProp());
2494:       assertFalse(node1.isGetterDef());
2495:       assertFalse(node1.isSwitch());
2496:       assertFalse(node1.isNE());
2497:       assertFalse(node1.isIf());
2498:       assertFalse(node1.isTry());
2499:       assertFalse(node1.isDebugger());
2500:       assertFalse(node1.isVoid());
2501:       assertEquals((-1), node1.getCharno());
2502:       assertFalse(node1.isRegExp());
2503:       assertFalse(node1.isString());
2504:       assertFalse(node1.isFor());
2505:       assertFalse(node1.isCase());
2506:       assertFalse(node1.isHook());
2507:       assertFalse(node1.isThis());
2508:       assertEquals(0, node1.getChildCount());
2509:       assertFalse(node1.isComma());
2510:       assertFalse(node1.isName());
2511:       assertFalse(node1.isBreak());
2512:       assertFalse(node1.isTrue());
2513:       assertFalse(node1.isNull());
2514:       assertFalse(node1.isStringKey());
2515:       assertFalse(node1.isParamList());
2516:       assertFalse(node1.isAdd());
2517:       assertFalse(node1.isNew());
2518:       assertFalse(node1.isArrayLit());
2519:       assertFalse(node1.isDo());
2520:       assertFalse(node1.isEmpty());
2521:       assertFalse(node1.isVar());
2522:       assertFalse(node1.isDefaultCase());
2523:       
2524:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
2525:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2526:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2527:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2528:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
2529:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
2530:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
2531:       assertEquals(0, node_SideEffectFlags0.valueOf());
2532:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2533:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
2534:       assertEquals(0, node_SideEffectFlags1.valueOf());
2535:       assertEquals(0, node_SideEffectFlags2.valueOf());
2536:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
2537:       
2538:       int int1 = Node.mergeLineCharNo(4095, 42);
2539:       assertEquals(16773162, int1);
2540:   }
2541: }
RegularFileObject[/tmp/EvoSuite_63_1628255808981/com/google/javascript/rhino/Node_63_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:49 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_63_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_63_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_63_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.SimpleErrorReporter",
266:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
267:       "com.google.common.base.Joiner",
268:       "com.google.common.base.Preconditions",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.Token",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.base.Objects",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.common.collect.Sets",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.javascript.rhino.InputId",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.AbstractIndexedListIterator",
349:       "com.google.common.collect.Iterators$11",
350:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
351:       "com.google.javascript.rhino.jstype.TemplatizedType",
352:       "com.google.javascript.rhino.jstype.NamedType",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableList$1",
355:       "com.google.common.collect.Platform",
356:       "com.google.javascript.rhino.JSTypeExpression",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 13:16:49.761 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(10);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(10, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);

boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
assertFalse(boolean0);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(10, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);

int int0 = node0.getIntProp(10);
assertEquals(0, int0);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(10, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);

node0.siblings();
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(10, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);

Node node1 = Node.newNumber((double) 47);
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

boolean boolean1 = node1.mayMutateGlobalStateOrThrow();
assertTrue(boolean1);
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

boolean boolean2 = node1.isCall();
assertFalse(boolean2);
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

boolean boolean3 = node0.isCast();
assertFalse(boolean3);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(10, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);

Object object0 = new Object();
Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(10, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(iterable0.contains(node0));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);

Node node2 = new Node(10, node1, node0, 37, 1);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(10, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isName());
assertFalse(node2.isBlock());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertTrue(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertEquals(10, node2.getType());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isNew());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isObjectLit());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isAnd());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertEquals(151553, node2.getSourcePosition());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isWith());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isNE());
assertEquals(1, node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertEquals(37, node2.getLineno());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);

node2.getDirectives();
assertNotSame(node0, node2);
assertNotSame(node2, node0);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(10, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isName());
assertFalse(node2.isBlock());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertTrue(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertEquals(10, node2.getType());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isNew());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isObjectLit());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isAnd());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertEquals(151553, node2.getSourcePosition());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isWith());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isNE());
assertEquals(1, node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertEquals(37, node2.getLineno());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);

String string0 = node1.checkTreeEquals(node2);
assertNotSame(node0, node2);
assertNotSame(node2, node0);
assertEquals("Node tree inequality:\nTree1:\nNUMBER 47.0\n\n\nTree2:\nBITXOR 37\n    NUMBER 47.0\n    BITXOR\n\n\nSubtree1: NUMBER 47.0\n\n\nSubtree2: BITXOR 37\n    NUMBER 47.0\n    BITXOR\n", string0);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(10, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isName());
assertFalse(node2.isBlock());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertTrue(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertEquals(10, node2.getType());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isNew());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isObjectLit());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isAnd());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertEquals(151553, node2.getSourcePosition());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isWith());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isNE());
assertEquals(1, node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertEquals(37, node2.getLineno());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);

boolean boolean4 = node1.hasChild(node0);
assertNotSame(node0, node2);
assertFalse(boolean4);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(10, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

node1.getStaticSourceFile();
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

node0.getSourceFileName();
assertNotSame(node0, node2);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(10, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(37);
assertEquals(37, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());

Node node3 = node0.srcref(node1);
assertSame(node0, node3);
assertNotSame(node0, node2);
assertSame(node3, node0);
assertNotSame(node3, node2);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(10, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWith());
assertFalse(node3.isExprResult());
assertFalse(node3.isBreak());
assertFalse(node3.isAnd());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isInc());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isString());
assertFalse(node3.isOr());
assertFalse(node3.isContinue());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDelProp());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isGetProp());
assertFalse(node3.hasChildren());
assertFalse(node3.isWhile());
assertFalse(node3.isReturn());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isRegExp());
assertFalse(node3.isDebugger());
assertFalse(node3.isParamList());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isNull());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isVar());
assertFalse(node3.isArrayLit());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isFunction());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());
assertEquals(10, node3.getType());
assertFalse(node3.isCase());
assertFalse(node3.isIn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isNE());
assertEquals((-1), node3.getCharno());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabelName());
assertFalse(node3.isSwitch());
assertFalse(node3.isIf());
assertFalse(node3.isHook());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isThis());
assertFalse(node3.isScript());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertFalse(node3.isFor());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());

boolean boolean5 = node1.getBooleanProp(51);
assertFalse(boolean5);
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());

int int1 = Node.mergeLineCharNo(4095, 42);
assertEquals(16773162, int1);


[MASTER] 13:16:51.161 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_69_1628255811098/com/google/javascript/rhino/Node_69_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_69_1628255811098/com/google/javascript/rhino/Node_69_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:51.161 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:51.161 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:51.162 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 516
[MASTER] 13:16:51.163 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_69_1628255811098/com/google/javascript/rhino/Node_69_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:51 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.util.Set;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_69_tmp__ESTest extends Node_69_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = new Node(45, 571, 0);
23:       assertEquals(571, node0.getLineno());
24:       assertFalse(node0.isCase());
25:       assertEquals(45, node0.getType());
26:       assertFalse(node0.isInc());
27:       assertFalse(node0.isSwitch());
28:       assertFalse(node0.isNE());
29:       assertFalse(node0.isString());
30:       assertFalse(node0.isGetterDef());
31:       assertFalse(node0.isIn());
32:       assertFalse(node0.isFor());
33:       assertFalse(node0.isDelProp());
34:       assertFalse(node0.isBreak());
35:       assertFalse(node0.isIf());
36:       assertFalse(node0.isTry());
37:       assertFalse(node0.isThis());
38:       assertFalse(node0.isHook());
39:       assertFalse(node0.isRegExp());
40:       assertFalse(node0.isComma());
41:       assertFalse(node0.isObjectLit());
42:       assertFalse(node0.isAnd());
43:       assertFalse(node0.isCatch());
44:       assertFalse(node0.isInstanceOf());
45:       assertFalse(node0.isDebugger());
46:       assertFalse(node0.isGetProp());
47:       assertFalse(node0.isSetterDef());
48:       assertEquals(0, node0.getCharno());
49:       assertFalse(node0.isNot());
50:       assertFalse(node0.isFalse());
51:       assertFalse(node0.isCast());
52:       assertFalse(node0.isThrow());
53:       assertFalse(node0.isFunction());
54:       assertEquals(2338816, node0.getSourcePosition());
55:       assertFalse(node0.isContinue());
56:       assertFalse(node0.hasMoreThanOneChild());
57:       assertFalse(node0.isWhile());
58:       assertFalse(node0.isAssignAdd());
59:       assertFalse(node0.isDo());
60:       assertFalse(node0.isAdd());
61:       assertFalse(node0.isNumber());
62:       assertFalse(node0.isOr());
63:       assertFalse(node0.isCall());
64:       assertFalse(node0.isGetElem());
65:       assertFalse(node0.isName());
66:       assertFalse(node0.hasOneChild());
67:       assertFalse(node0.isExprResult());
68:       assertFalse(node0.isBlock());
69:       assertFalse(node0.isWith());
70:       assertFalse(node0.hasChildren());
71:       assertFalse(node0.isReturn());
72:       assertFalse(node0.isTypeOf());
73:       assertFalse(node0.isAssign());
74:       assertFalse(node0.isDec());
75:       assertFalse(node0.isDefaultCase());
76:       assertFalse(node0.isParamList());
77:       assertFalse(node0.isTrue());
78:       assertFalse(node0.isVoid());
79:       assertFalse(node0.isScript());
80:       assertFalse(node0.isNull());
81:       assertFalse(node0.isEmpty());
82:       assertFalse(node0.isVar());
83:       assertFalse(node0.isStringKey());
84:       assertFalse(node0.isArrayLit());
85:       assertFalse(node0.isNew());
86:       assertFalse(node0.isLabelName());
87:       assertFalse(node0.isLabel());
88:       assertEquals(0, node0.getChildCount());
89:       assertEquals(51, Node.STATIC_SOURCE_FILE);
90:       assertEquals(12, Node.COLUMN_BITS);
91:       assertEquals(46, Node.IS_NAMESPACE);
92:       assertEquals(32, Node.INCRDECR_PROP);
93:       assertEquals(30, Node.VAR_ARGS_NAME);
94:       assertEquals(56, Node.CHANGE_TIME);
95:       assertEquals(2, Node.POST_FLAG);
96:       assertEquals(49, Node.DIRECT_EVAL);
97:       assertEquals(37, Node.OPT_ARG_NAME);
98:       assertEquals(57, Node.REFLECTED_OBJECT);
99:       assertEquals(52, Node.LENGTH);
100:       assertEquals(47, Node.IS_DISPATCHER);
101:       assertEquals(36, Node.QUOTED_PROP);
102:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
103:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
104:       assertEquals(8, Node.FLAG_NO_THROWS);
105:       assertEquals(57, Node.LAST_PROP);
106:       assertEquals(53, Node.INPUT_ID);
107:       assertEquals(29, Node.JSDOC_INFO_PROP);
108:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
109:       assertEquals(15, Node.NO_SIDE_EFFECTS);
110:       assertEquals(39, Node.EMPTY_BLOCK);
111:       assertEquals(4095, Node.COLUMN_MASK);
112:       assertEquals(55, Node.INFERRED_FUNCTION);
113:       assertEquals(43, Node.IS_CONSTANT_NAME);
114:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
115:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
116:       assertEquals(48, Node.DIRECTIVES);
117:       assertEquals(40, Node.ORIGINALNAME_PROP);
118:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
119:       assertEquals(50, Node.FREE_CALL);
120:       assertEquals(54, Node.SLASH_V);
121:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
122:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
123:       assertEquals(1, Node.DECR_FLAG);
124:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
125:       assertNotNull(node0);
126:       
127:       Iterable<Node> iterable0 = node0.siblings();
128:       assertEquals(571, node0.getLineno());
129:       assertFalse(node0.isCase());
130:       assertEquals(45, node0.getType());
131:       assertFalse(node0.isInc());
132:       assertFalse(node0.isSwitch());
133:       assertFalse(node0.isNE());
134:       assertFalse(node0.isString());
135:       assertFalse(node0.isGetterDef());
136:       assertFalse(node0.isIn());
137:       assertFalse(node0.isFor());
138:       assertFalse(node0.isDelProp());
139:       assertFalse(node0.isBreak());
140:       assertFalse(node0.isIf());
141:       assertFalse(node0.isTry());
142:       assertFalse(node0.isThis());
143:       assertFalse(node0.isHook());
144:       assertFalse(node0.isRegExp());
145:       assertFalse(node0.isComma());
146:       assertFalse(node0.isObjectLit());
147:       assertFalse(node0.isAnd());
148:       assertFalse(node0.isCatch());
149:       assertFalse(node0.isInstanceOf());
150:       assertFalse(node0.isDebugger());
151:       assertFalse(node0.isGetProp());
152:       assertFalse(node0.isSetterDef());
153:       assertEquals(0, node0.getCharno());
154:       assertFalse(node0.isNot());
155:       assertFalse(node0.isFalse());
156:       assertFalse(node0.isCast());
157:       assertFalse(node0.isThrow());
158:       assertFalse(node0.isFunction());
159:       assertEquals(2338816, node0.getSourcePosition());
160:       assertFalse(node0.isContinue());
161:       assertFalse(node0.hasMoreThanOneChild());
162:       assertFalse(node0.isWhile());
163:       assertFalse(node0.isAssignAdd());
164:       assertFalse(node0.isDo());
165:       assertFalse(node0.isAdd());
166:       assertFalse(node0.isNumber());
167:       assertFalse(node0.isOr());
168:       assertFalse(node0.isCall());
169:       assertFalse(node0.isGetElem());
170:       assertFalse(node0.isName());
171:       assertFalse(node0.hasOneChild());
172:       assertFalse(node0.isExprResult());
173:       assertFalse(node0.isBlock());
174:       assertFalse(node0.isWith());
175:       assertFalse(node0.hasChildren());
176:       assertFalse(node0.isReturn());
177:       assertFalse(node0.isTypeOf());
178:       assertFalse(node0.isAssign());
179:       assertFalse(node0.isDec());
180:       assertFalse(node0.isDefaultCase());
181:       assertFalse(node0.isParamList());
182:       assertFalse(node0.isTrue());
183:       assertFalse(node0.isVoid());
184:       assertFalse(node0.isScript());
185:       assertFalse(node0.isNull());
186:       assertFalse(node0.isEmpty());
187:       assertFalse(node0.isVar());
188:       assertFalse(node0.isStringKey());
189:       assertFalse(node0.isArrayLit());
190:       assertFalse(node0.isNew());
191:       assertFalse(node0.isLabelName());
192:       assertFalse(node0.isLabel());
193:       assertEquals(0, node0.getChildCount());
194:       assertEquals(51, Node.STATIC_SOURCE_FILE);
195:       assertEquals(12, Node.COLUMN_BITS);
196:       assertEquals(46, Node.IS_NAMESPACE);
197:       assertEquals(32, Node.INCRDECR_PROP);
198:       assertEquals(30, Node.VAR_ARGS_NAME);
199:       assertEquals(56, Node.CHANGE_TIME);
200:       assertEquals(2, Node.POST_FLAG);
201:       assertEquals(49, Node.DIRECT_EVAL);
202:       assertEquals(37, Node.OPT_ARG_NAME);
203:       assertEquals(57, Node.REFLECTED_OBJECT);
204:       assertEquals(52, Node.LENGTH);
205:       assertEquals(47, Node.IS_DISPATCHER);
206:       assertEquals(36, Node.QUOTED_PROP);
207:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
208:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
209:       assertEquals(8, Node.FLAG_NO_THROWS);
210:       assertEquals(57, Node.LAST_PROP);
211:       assertEquals(53, Node.INPUT_ID);
212:       assertEquals(29, Node.JSDOC_INFO_PROP);
213:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
214:       assertEquals(15, Node.NO_SIDE_EFFECTS);
215:       assertEquals(39, Node.EMPTY_BLOCK);
216:       assertEquals(4095, Node.COLUMN_MASK);
217:       assertEquals(55, Node.INFERRED_FUNCTION);
218:       assertEquals(43, Node.IS_CONSTANT_NAME);
219:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
220:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
221:       assertEquals(48, Node.DIRECTIVES);
222:       assertEquals(40, Node.ORIGINALNAME_PROP);
223:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
224:       assertEquals(50, Node.FREE_CALL);
225:       assertEquals(54, Node.SLASH_V);
226:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
227:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
228:       assertEquals(1, Node.DECR_FLAG);
229:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
230:       assertNotNull(iterable0);
231:       
232:       boolean boolean0 = node0.isSyntheticBlock();
233:       assertFalse(boolean0);
234:       assertEquals(571, node0.getLineno());
235:       assertFalse(node0.isCase());
236:       assertEquals(45, node0.getType());
237:       assertFalse(node0.isInc());
238:       assertFalse(node0.isSwitch());
239:       assertFalse(node0.isNE());
240:       assertFalse(node0.isString());
241:       assertFalse(node0.isGetterDef());
242:       assertFalse(node0.isIn());
243:       assertFalse(node0.isFor());
244:       assertFalse(node0.isDelProp());
245:       assertFalse(node0.isBreak());
246:       assertFalse(node0.isIf());
247:       assertFalse(node0.isTry());
248:       assertFalse(node0.isThis());
249:       assertFalse(node0.isHook());
250:       assertFalse(node0.isRegExp());
251:       assertFalse(node0.isComma());
252:       assertFalse(node0.isObjectLit());
253:       assertFalse(node0.isAnd());
254:       assertFalse(node0.isCatch());
255:       assertFalse(node0.isInstanceOf());
256:       assertFalse(node0.isDebugger());
257:       assertFalse(node0.isGetProp());
258:       assertFalse(node0.isSetterDef());
259:       assertEquals(0, node0.getCharno());
260:       assertFalse(node0.isNot());
261:       assertFalse(node0.isFalse());
262:       assertFalse(node0.isCast());
263:       assertFalse(node0.isThrow());
264:       assertFalse(node0.isFunction());
265:       assertEquals(2338816, node0.getSourcePosition());
266:       assertFalse(node0.isContinue());
267:       assertFalse(node0.hasMoreThanOneChild());
268:       assertFalse(node0.isWhile());
269:       assertFalse(node0.isAssignAdd());
270:       assertFalse(node0.isDo());
271:       assertFalse(node0.isAdd());
272:       assertFalse(node0.isNumber());
273:       assertFalse(node0.isOr());
274:       assertFalse(node0.isCall());
275:       assertFalse(node0.isGetElem());
276:       assertFalse(node0.isName());
277:       assertFalse(node0.hasOneChild());
278:       assertFalse(node0.isExprResult());
279:       assertFalse(node0.isBlock());
280:       assertFalse(node0.isWith());
281:       assertFalse(node0.hasChildren());
282:       assertFalse(node0.isReturn());
283:       assertFalse(node0.isTypeOf());
284:       assertFalse(node0.isAssign());
285:       assertFalse(node0.isDec());
286:       assertFalse(node0.isDefaultCase());
287:       assertFalse(node0.isParamList());
288:       assertFalse(node0.isTrue());
289:       assertFalse(node0.isVoid());
290:       assertFalse(node0.isScript());
291:       assertFalse(node0.isNull());
292:       assertFalse(node0.isEmpty());
293:       assertFalse(node0.isVar());
294:       assertFalse(node0.isStringKey());
295:       assertFalse(node0.isArrayLit());
296:       assertFalse(node0.isNew());
297:       assertFalse(node0.isLabelName());
298:       assertFalse(node0.isLabel());
299:       assertEquals(0, node0.getChildCount());
300:       assertEquals(51, Node.STATIC_SOURCE_FILE);
301:       assertEquals(12, Node.COLUMN_BITS);
302:       assertEquals(46, Node.IS_NAMESPACE);
303:       assertEquals(32, Node.INCRDECR_PROP);
304:       assertEquals(30, Node.VAR_ARGS_NAME);
305:       assertEquals(56, Node.CHANGE_TIME);
306:       assertEquals(2, Node.POST_FLAG);
307:       assertEquals(49, Node.DIRECT_EVAL);
308:       assertEquals(37, Node.OPT_ARG_NAME);
309:       assertEquals(57, Node.REFLECTED_OBJECT);
310:       assertEquals(52, Node.LENGTH);
311:       assertEquals(47, Node.IS_DISPATCHER);
312:       assertEquals(36, Node.QUOTED_PROP);
313:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
314:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
315:       assertEquals(8, Node.FLAG_NO_THROWS);
316:       assertEquals(57, Node.LAST_PROP);
317:       assertEquals(53, Node.INPUT_ID);
318:       assertEquals(29, Node.JSDOC_INFO_PROP);
319:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
320:       assertEquals(15, Node.NO_SIDE_EFFECTS);
321:       assertEquals(39, Node.EMPTY_BLOCK);
322:       assertEquals(4095, Node.COLUMN_MASK);
323:       assertEquals(55, Node.INFERRED_FUNCTION);
324:       assertEquals(43, Node.IS_CONSTANT_NAME);
325:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
326:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
327:       assertEquals(48, Node.DIRECTIVES);
328:       assertEquals(40, Node.ORIGINALNAME_PROP);
329:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
330:       assertEquals(50, Node.FREE_CALL);
331:       assertEquals(54, Node.SLASH_V);
332:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
333:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
334:       assertEquals(1, Node.DECR_FLAG);
335:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
336:       
337:       node0.setSourceEncodedPositionForTree(2471);
338:       assertFalse(node0.isCase());
339:       assertEquals(45, node0.getType());
340:       assertFalse(node0.isInc());
341:       assertFalse(node0.isSwitch());
342:       assertFalse(node0.isNE());
343:       assertFalse(node0.isString());
344:       assertFalse(node0.isGetterDef());
345:       assertFalse(node0.isIn());
346:       assertFalse(node0.isFor());
347:       assertFalse(node0.isDelProp());
348:       assertFalse(node0.isBreak());
349:       assertFalse(node0.isIf());
350:       assertFalse(node0.isTry());
351:       assertEquals(2471, node0.getSourcePosition());
352:       assertFalse(node0.isThis());
353:       assertFalse(node0.isHook());
354:       assertFalse(node0.isRegExp());
355:       assertFalse(node0.isComma());
356:       assertFalse(node0.isObjectLit());
357:       assertFalse(node0.isAnd());
358:       assertFalse(node0.isCatch());
359:       assertFalse(node0.isInstanceOf());
360:       assertEquals(0, node0.getLineno());
361:       assertFalse(node0.isDebugger());
362:       assertFalse(node0.isGetProp());
363:       assertFalse(node0.isSetterDef());
364:       assertFalse(node0.isNot());
365:       assertFalse(node0.isFalse());
366:       assertFalse(node0.isCast());
367:       assertFalse(node0.isThrow());
368:       assertFalse(node0.isFunction());
369:       assertFalse(node0.isContinue());
370:       assertFalse(node0.hasMoreThanOneChild());
371:       assertFalse(node0.isWhile());
372:       assertFalse(node0.isAssignAdd());
373:       assertFalse(node0.isDo());
374:       assertFalse(node0.isAdd());
375:       assertFalse(node0.isNumber());
376:       assertFalse(node0.isOr());
377:       assertFalse(node0.isCall());
378:       assertFalse(node0.isGetElem());
379:       assertFalse(node0.isName());
380:       assertFalse(node0.hasOneChild());
381:       assertFalse(node0.isExprResult());
382:       assertFalse(node0.isBlock());
383:       assertFalse(node0.isWith());
384:       assertFalse(node0.hasChildren());
385:       assertFalse(node0.isReturn());
386:       assertFalse(node0.isTypeOf());
387:       assertFalse(node0.isAssign());
388:       assertFalse(node0.isDec());
389:       assertFalse(node0.isDefaultCase());
390:       assertEquals(2471, node0.getCharno());
391:       assertFalse(node0.isParamList());
392:       assertFalse(node0.isTrue());
393:       assertFalse(node0.isVoid());
394:       assertFalse(node0.isScript());
395:       assertFalse(node0.isNull());
396:       assertFalse(node0.isEmpty());
397:       assertFalse(node0.isVar());
398:       assertFalse(node0.isStringKey());
399:       assertFalse(node0.isArrayLit());
400:       assertFalse(node0.isNew());
401:       assertFalse(node0.isLabelName());
402:       assertFalse(node0.isLabel());
403:       assertEquals(0, node0.getChildCount());
404:       assertEquals(51, Node.STATIC_SOURCE_FILE);
405:       assertEquals(12, Node.COLUMN_BITS);
406:       assertEquals(46, Node.IS_NAMESPACE);
407:       assertEquals(32, Node.INCRDECR_PROP);
408:       assertEquals(30, Node.VAR_ARGS_NAME);
409:       assertEquals(56, Node.CHANGE_TIME);
410:       assertEquals(2, Node.POST_FLAG);
411:       assertEquals(49, Node.DIRECT_EVAL);
412:       assertEquals(37, Node.OPT_ARG_NAME);
413:       assertEquals(57, Node.REFLECTED_OBJECT);
414:       assertEquals(52, Node.LENGTH);
415:       assertEquals(47, Node.IS_DISPATCHER);
416:       assertEquals(36, Node.QUOTED_PROP);
417:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
418:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
419:       assertEquals(8, Node.FLAG_NO_THROWS);
420:       assertEquals(57, Node.LAST_PROP);
421:       assertEquals(53, Node.INPUT_ID);
422:       assertEquals(29, Node.JSDOC_INFO_PROP);
423:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
424:       assertEquals(15, Node.NO_SIDE_EFFECTS);
425:       assertEquals(39, Node.EMPTY_BLOCK);
426:       assertEquals(4095, Node.COLUMN_MASK);
427:       assertEquals(55, Node.INFERRED_FUNCTION);
428:       assertEquals(43, Node.IS_CONSTANT_NAME);
429:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
430:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
431:       assertEquals(48, Node.DIRECTIVES);
432:       assertEquals(40, Node.ORIGINALNAME_PROP);
433:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
434:       assertEquals(50, Node.FREE_CALL);
435:       assertEquals(54, Node.SLASH_V);
436:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
437:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
438:       assertEquals(1, Node.DECR_FLAG);
439:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
440:       
441:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
442:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
443:       assertEquals(0, node_SideEffectFlags0.valueOf());
444:       assertNotNull(node_SideEffectFlags0);
445:       
446:       Object object0 = new Object();
447:       assertNotNull(object0);
448:       
449:       Iterable<Node> iterable1 = node0.children();
450:       assertFalse(node0.isCase());
451:       assertEquals(45, node0.getType());
452:       assertFalse(node0.isInc());
453:       assertFalse(node0.isSwitch());
454:       assertFalse(node0.isNE());
455:       assertFalse(node0.isString());
456:       assertFalse(node0.isGetterDef());
457:       assertFalse(node0.isIn());
458:       assertFalse(node0.isFor());
459:       assertFalse(node0.isDelProp());
460:       assertFalse(node0.isBreak());
461:       assertFalse(node0.isIf());
462:       assertFalse(node0.isTry());
463:       assertEquals(2471, node0.getSourcePosition());
464:       assertFalse(node0.isThis());
465:       assertFalse(node0.isHook());
466:       assertFalse(node0.isRegExp());
467:       assertFalse(node0.isComma());
468:       assertFalse(node0.isObjectLit());
469:       assertFalse(node0.isAnd());
470:       assertFalse(node0.isCatch());
471:       assertFalse(node0.isInstanceOf());
472:       assertEquals(0, node0.getLineno());
473:       assertFalse(node0.isDebugger());
474:       assertFalse(node0.isGetProp());
475:       assertFalse(node0.isSetterDef());
476:       assertFalse(node0.isNot());
477:       assertFalse(node0.isFalse());
478:       assertFalse(node0.isCast());
479:       assertFalse(node0.isThrow());
480:       assertFalse(node0.isFunction());
481:       assertFalse(node0.isContinue());
482:       assertFalse(node0.hasMoreThanOneChild());
483:       assertFalse(node0.isWhile());
484:       assertFalse(node0.isAssignAdd());
485:       assertFalse(node0.isDo());
486:       assertFalse(node0.isAdd());
487:       assertFalse(node0.isNumber());
488:       assertFalse(node0.isOr());
489:       assertFalse(node0.isCall());
490:       assertFalse(node0.isGetElem());
491:       assertFalse(node0.isName());
492:       assertFalse(node0.hasOneChild());
493:       assertFalse(node0.isExprResult());
494:       assertFalse(node0.isBlock());
495:       assertFalse(node0.isWith());
496:       assertFalse(node0.hasChildren());
497:       assertFalse(node0.isReturn());
498:       assertFalse(node0.isTypeOf());
499:       assertFalse(node0.isAssign());
500:       assertFalse(node0.isDec());
501:       assertFalse(node0.isDefaultCase());
502:       assertEquals(2471, node0.getCharno());
503:       assertFalse(node0.isParamList());
504:       assertFalse(node0.isTrue());
505:       assertFalse(node0.isVoid());
506:       assertFalse(node0.isScript());
507:       assertFalse(node0.isNull());
508:       assertFalse(node0.isEmpty());
509:       assertFalse(node0.isVar());
510:       assertFalse(node0.isStringKey());
511:       assertFalse(node0.isArrayLit());
512:       assertFalse(node0.isNew());
513:       assertFalse(node0.isLabelName());
514:       assertFalse(node0.isLabel());
515:       assertEquals(0, node0.getChildCount());
516:       assertFalse(iterable1.contains(node0));
517:       assertEquals(51, Node.STATIC_SOURCE_FILE);
518:       assertEquals(12, Node.COLUMN_BITS);
519:       assertEquals(46, Node.IS_NAMESPACE);
520:       assertEquals(32, Node.INCRDECR_PROP);
521:       assertEquals(30, Node.VAR_ARGS_NAME);
522:       assertEquals(56, Node.CHANGE_TIME);
523:       assertEquals(2, Node.POST_FLAG);
524:       assertEquals(49, Node.DIRECT_EVAL);
525:       assertEquals(37, Node.OPT_ARG_NAME);
526:       assertEquals(57, Node.REFLECTED_OBJECT);
527:       assertEquals(52, Node.LENGTH);
528:       assertEquals(47, Node.IS_DISPATCHER);
529:       assertEquals(36, Node.QUOTED_PROP);
530:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
531:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
532:       assertEquals(8, Node.FLAG_NO_THROWS);
533:       assertEquals(57, Node.LAST_PROP);
534:       assertEquals(53, Node.INPUT_ID);
535:       assertEquals(29, Node.JSDOC_INFO_PROP);
536:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
537:       assertEquals(15, Node.NO_SIDE_EFFECTS);
538:       assertEquals(39, Node.EMPTY_BLOCK);
539:       assertEquals(4095, Node.COLUMN_MASK);
540:       assertEquals(55, Node.INFERRED_FUNCTION);
541:       assertEquals(43, Node.IS_CONSTANT_NAME);
542:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
543:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
544:       assertEquals(48, Node.DIRECTIVES);
545:       assertEquals(40, Node.ORIGINALNAME_PROP);
546:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
547:       assertEquals(50, Node.FREE_CALL);
548:       assertEquals(54, Node.SLASH_V);
549:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
550:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
551:       assertEquals(1, Node.DECR_FLAG);
552:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
553:       assertNotNull(iterable1);
554:       assertFalse(iterable1.equals((Object)iterable0));
555:       
556:       Set<String> set0 = node0.getDirectives();
557:       assertFalse(node0.isCase());
558:       assertEquals(45, node0.getType());
559:       assertFalse(node0.isInc());
560:       assertFalse(node0.isSwitch());
561:       assertFalse(node0.isNE());
562:       assertFalse(node0.isString());
563:       assertFalse(node0.isGetterDef());
564:       assertFalse(node0.isIn());
565:       assertFalse(node0.isFor());
566:       assertFalse(node0.isDelProp());
567:       assertFalse(node0.isBreak());
568:       assertFalse(node0.isIf());
569:       assertFalse(node0.isTry());
570:       assertEquals(2471, node0.getSourcePosition());
571:       assertFalse(node0.isThis());
572:       assertFalse(node0.isHook());
573:       assertFalse(node0.isRegExp());
574:       assertFalse(node0.isComma());
575:       assertFalse(node0.isObjectLit());
576:       assertFalse(node0.isAnd());
577:       assertFalse(node0.isCatch());
578:       assertFalse(node0.isInstanceOf());
579:       assertEquals(0, node0.getLineno());
580:       assertFalse(node0.isDebugger());
581:       assertFalse(node0.isGetProp());
582:       assertFalse(node0.isSetterDef());
583:       assertFalse(node0.isNot());
584:       assertFalse(node0.isFalse());
585:       assertFalse(node0.isCast());
586:       assertFalse(node0.isThrow());
587:       assertFalse(node0.isFunction());
588:       assertFalse(node0.isContinue());
589:       assertFalse(node0.hasMoreThanOneChild());
590:       assertFalse(node0.isWhile());
591:       assertFalse(node0.isAssignAdd());
592:       assertFalse(node0.isDo());
593:       assertFalse(node0.isAdd());
594:       assertFalse(node0.isNumber());
595:       assertFalse(node0.isOr());
596:       assertFalse(node0.isCall());
597:       assertFalse(node0.isGetElem());
598:       assertFalse(node0.isName());
599:       assertFalse(node0.hasOneChild());
600:       assertFalse(node0.isExprResult());
601:       assertFalse(node0.isBlock());
602:       assertFalse(node0.isWith());
603:       assertFalse(node0.hasChildren());
604:       assertFalse(node0.isReturn());
605:       assertFalse(node0.isTypeOf());
606:       assertFalse(node0.isAssign());
607:       assertFalse(node0.isDec());
608:       assertFalse(node0.isDefaultCase());
609:       assertEquals(2471, node0.getCharno());
610:       assertFalse(node0.isParamList());
611:       assertFalse(node0.isTrue());
612:       assertFalse(node0.isVoid());
613:       assertFalse(node0.isScript());
614:       assertFalse(node0.isNull());
615:       assertFalse(node0.isEmpty());
616:       assertFalse(node0.isVar());
617:       assertFalse(node0.isStringKey());
618:       assertFalse(node0.isArrayLit());
619:       assertFalse(node0.isNew());
620:       assertFalse(node0.isLabelName());
621:       assertFalse(node0.isLabel());
622:       assertEquals(0, node0.getChildCount());
623:       assertEquals(51, Node.STATIC_SOURCE_FILE);
624:       assertEquals(12, Node.COLUMN_BITS);
625:       assertEquals(46, Node.IS_NAMESPACE);
626:       assertEquals(32, Node.INCRDECR_PROP);
627:       assertEquals(30, Node.VAR_ARGS_NAME);
628:       assertEquals(56, Node.CHANGE_TIME);
629:       assertEquals(2, Node.POST_FLAG);
630:       assertEquals(49, Node.DIRECT_EVAL);
631:       assertEquals(37, Node.OPT_ARG_NAME);
632:       assertEquals(57, Node.REFLECTED_OBJECT);
633:       assertEquals(52, Node.LENGTH);
634:       assertEquals(47, Node.IS_DISPATCHER);
635:       assertEquals(36, Node.QUOTED_PROP);
636:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
637:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
638:       assertEquals(8, Node.FLAG_NO_THROWS);
639:       assertEquals(57, Node.LAST_PROP);
640:       assertEquals(53, Node.INPUT_ID);
641:       assertEquals(29, Node.JSDOC_INFO_PROP);
642:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
643:       assertEquals(15, Node.NO_SIDE_EFFECTS);
644:       assertEquals(39, Node.EMPTY_BLOCK);
645:       assertEquals(4095, Node.COLUMN_MASK);
646:       assertEquals(55, Node.INFERRED_FUNCTION);
647:       assertEquals(43, Node.IS_CONSTANT_NAME);
648:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
649:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
650:       assertEquals(48, Node.DIRECTIVES);
651:       assertEquals(40, Node.ORIGINALNAME_PROP);
652:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
653:       assertEquals(50, Node.FREE_CALL);
654:       assertEquals(54, Node.SLASH_V);
655:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
656:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
657:       assertEquals(1, Node.DECR_FLAG);
658:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
659:       assertNull(set0);
660:       
661:       Node[] nodeArray0 = new Node[4];
662:       nodeArray0[0] = node0;
663:       nodeArray0[1] = node0;
664:       nodeArray0[2] = node0;
665:       nodeArray0[3] = node0;
666:       Node node1 = null;
667:       try {
668:         node1 = new Node(990, nodeArray0);
669:         fail("Expecting exception: IllegalArgumentException");
670:       
671:       } catch(IllegalArgumentException e) {
672:          //
673:          // duplicate child
674:          //
675:          verifyException("com.google.javascript.rhino.Node", e);
676:       }
677:   }
678: }
RegularFileObject[/tmp/EvoSuite_69_1628255811098/com/google/javascript/rhino/Node_69_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:51 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_69_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_69_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_69_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.SimpleErrorReporter",
266:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
267:       "com.google.common.base.Joiner",
268:       "com.google.common.base.Preconditions",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.Token",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.base.Objects",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.common.collect.Sets",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.javascript.rhino.InputId",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.AbstractIndexedListIterator",
349:       "com.google.common.collect.Iterators$11",
350:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
351:       "com.google.javascript.rhino.jstype.TemplatizedType",
352:       "com.google.javascript.rhino.jstype.NamedType",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableList$1",
355:       "com.google.common.collect.Platform",
356:       "com.google.javascript.rhino.JSTypeExpression",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 13:16:51.178 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(45, 571, 0);
assertEquals(571, node0.getLineno());
assertFalse(node0.isCase());
assertEquals(45, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertEquals(2338816, node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node0);

Iterable<Node> iterable0 = node0.siblings();
assertEquals(571, node0.getLineno());
assertFalse(node0.isCase());
assertEquals(45, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertEquals(2338816, node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(iterable0);

boolean boolean0 = node0.isSyntheticBlock();
assertFalse(boolean0);
assertEquals(571, node0.getLineno());
assertFalse(node0.isCase());
assertEquals(45, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertEquals(2338816, node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

node0.setSourceEncodedPositionForTree(2471);
assertFalse(node0.isCase());
assertEquals(45, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertEquals(2471, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertEquals(2471, node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Object object0 = new Object();
assertNotNull(object0);

Iterable<Node> iterable1 = node0.children();
assertFalse(node0.isCase());
assertEquals(45, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertEquals(2471, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertEquals(2471, node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(iterable1.contains(node0));
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(iterable1);
assertFalse(iterable1.equals((Object)iterable0));

Set<String> set0 = node0.getDirectives();
assertFalse(node0.isCase());
assertEquals(45, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertEquals(2471, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertEquals(2471, node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNull(set0);

Node[] nodeArray0 = new Node[4];
nodeArray0[0] = node0;
nodeArray0[1] = node0;
nodeArray0[2] = node0;
nodeArray0[3] = node0;
Node node1 = new Node(990, nodeArray0);

[MASTER] 13:16:56.139 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_88_1628255815613/com/google/javascript/rhino/Node_88_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_88_1628255815613/com/google/javascript/rhino/Node_88_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:56.139 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:56.139 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:56.140 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1542
[MASTER] 13:16:56.142 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_88_1628255815613/com/google/javascript/rhino/Node_88_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:55 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_88_tmp__ESTest extends Node_88_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(10);
21:       assertFalse(node0.hasMoreThanOneChild());
22:       assertFalse(node0.isContinue());
23:       assertEquals(10, node0.getType());
24:       assertFalse(node0.isDo());
25:       assertFalse(node0.isAssignAdd());
26:       assertEquals((-1), node0.getLineno());
27:       assertFalse(node0.isTypeOf());
28:       assertFalse(node0.isWhile());
29:       assertFalse(node0.isAssign());
30:       assertFalse(node0.isLabel());
31:       assertFalse(node0.isReturn());
32:       assertFalse(node0.isBlock());
33:       assertFalse(node0.hasChildren());
34:       assertFalse(node0.isDec());
35:       assertFalse(node0.isCast());
36:       assertFalse(node0.isStringKey());
37:       assertFalse(node0.isLabelName());
38:       assertFalse(node0.hasOneChild());
39:       assertFalse(node0.isScript());
40:       assertFalse(node0.isNumber());
41:       assertFalse(node0.isParamList());
42:       assertFalse(node0.isNot());
43:       assertFalse(node0.isObjectLit());
44:       assertEquals((-1), node0.getSourcePosition());
45:       assertFalse(node0.isGetProp());
46:       assertFalse(node0.isExprResult());
47:       assertFalse(node0.isDefaultCase());
48:       assertEquals(0, node0.getChildCount());
49:       assertFalse(node0.isComma());
50:       assertFalse(node0.isVar());
51:       assertFalse(node0.isCall());
52:       assertFalse(node0.isAdd());
53:       assertFalse(node0.isEmpty());
54:       assertFalse(node0.isName());
55:       assertFalse(node0.isGetElem());
56:       assertFalse(node0.isBreak());
57:       assertFalse(node0.isDelProp());
58:       assertFalse(node0.isVoid());
59:       assertFalse(node0.isNew());
60:       assertFalse(node0.isTrue());
61:       assertFalse(node0.isNull());
62:       assertFalse(node0.isOr());
63:       assertFalse(node0.isIn());
64:       assertFalse(node0.isCase());
65:       assertFalse(node0.isFor());
66:       assertFalse(node0.isArrayLit());
67:       assertFalse(node0.isHook());
68:       assertFalse(node0.isTry());
69:       assertFalse(node0.isSwitch());
70:       assertFalse(node0.isString());
71:       assertFalse(node0.isGetterDef());
72:       assertFalse(node0.isDebugger());
73:       assertEquals((-1), node0.getCharno());
74:       assertFalse(node0.isAnd());
75:       assertFalse(node0.isCatch());
76:       assertFalse(node0.isInstanceOf());
77:       assertFalse(node0.isRegExp());
78:       assertFalse(node0.isThis());
79:       assertFalse(node0.isFunction());
80:       assertFalse(node0.isWith());
81:       assertFalse(node0.isFalse());
82:       assertFalse(node0.isThrow());
83:       assertFalse(node0.isNE());
84:       assertFalse(node0.isInc());
85:       assertFalse(node0.isSetterDef());
86:       assertFalse(node0.isIf());
87:       assertEquals(32, Node.INCRDECR_PROP);
88:       assertEquals(46, Node.IS_NAMESPACE);
89:       assertEquals(51, Node.STATIC_SOURCE_FILE);
90:       assertEquals(12, Node.COLUMN_BITS);
91:       assertEquals(47, Node.IS_DISPATCHER);
92:       assertEquals(57, Node.LAST_PROP);
93:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
94:       assertEquals(1, Node.DECR_FLAG);
95:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
96:       assertEquals(29, Node.JSDOC_INFO_PROP);
97:       assertEquals(15, Node.NO_SIDE_EFFECTS);
98:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
99:       assertEquals(52, Node.LENGTH);
100:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
101:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
102:       assertEquals(57, Node.REFLECTED_OBJECT);
103:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
104:       assertEquals(56, Node.CHANGE_TIME);
105:       assertEquals(49, Node.DIRECT_EVAL);
106:       assertEquals(37, Node.OPT_ARG_NAME);
107:       assertEquals(48, Node.DIRECTIVES);
108:       assertEquals(4095, Node.COLUMN_MASK);
109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
110:       assertEquals(36, Node.QUOTED_PROP);
111:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
112:       assertEquals(50, Node.FREE_CALL);
113:       assertEquals(8, Node.FLAG_NO_THROWS);
114:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
115:       assertEquals(55, Node.INFERRED_FUNCTION);
116:       assertEquals(39, Node.EMPTY_BLOCK);
117:       assertEquals(53, Node.INPUT_ID);
118:       assertEquals(54, Node.SLASH_V);
119:       assertEquals(43, Node.IS_CONSTANT_NAME);
120:       assertEquals(30, Node.VAR_ARGS_NAME);
121:       assertEquals(2, Node.POST_FLAG);
122:       assertEquals(40, Node.ORIGINALNAME_PROP);
123:       
124:       boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
125:       assertFalse(boolean0);
126:       assertFalse(node0.hasMoreThanOneChild());
127:       assertFalse(node0.isContinue());
128:       assertEquals(10, node0.getType());
129:       assertFalse(node0.isDo());
130:       assertFalse(node0.isAssignAdd());
131:       assertEquals((-1), node0.getLineno());
132:       assertFalse(node0.isTypeOf());
133:       assertFalse(node0.isWhile());
134:       assertFalse(node0.isAssign());
135:       assertFalse(node0.isLabel());
136:       assertFalse(node0.isReturn());
137:       assertFalse(node0.isBlock());
138:       assertFalse(node0.hasChildren());
139:       assertFalse(node0.isDec());
140:       assertFalse(node0.isCast());
141:       assertFalse(node0.isStringKey());
142:       assertFalse(node0.isLabelName());
143:       assertFalse(node0.hasOneChild());
144:       assertFalse(node0.isScript());
145:       assertFalse(node0.isNumber());
146:       assertFalse(node0.isParamList());
147:       assertFalse(node0.isNot());
148:       assertFalse(node0.isObjectLit());
149:       assertEquals((-1), node0.getSourcePosition());
150:       assertFalse(node0.isGetProp());
151:       assertFalse(node0.isExprResult());
152:       assertFalse(node0.isDefaultCase());
153:       assertEquals(0, node0.getChildCount());
154:       assertFalse(node0.isComma());
155:       assertFalse(node0.isVar());
156:       assertFalse(node0.isCall());
157:       assertFalse(node0.isAdd());
158:       assertFalse(node0.isEmpty());
159:       assertFalse(node0.isName());
160:       assertFalse(node0.isGetElem());
161:       assertFalse(node0.isBreak());
162:       assertFalse(node0.isDelProp());
163:       assertFalse(node0.isVoid());
164:       assertFalse(node0.isNew());
165:       assertFalse(node0.isTrue());
166:       assertFalse(node0.isNull());
167:       assertFalse(node0.isOr());
168:       assertFalse(node0.isIn());
169:       assertFalse(node0.isCase());
170:       assertFalse(node0.isFor());
171:       assertFalse(node0.isArrayLit());
172:       assertFalse(node0.isHook());
173:       assertFalse(node0.isTry());
174:       assertFalse(node0.isSwitch());
175:       assertFalse(node0.isString());
176:       assertFalse(node0.isGetterDef());
177:       assertFalse(node0.isDebugger());
178:       assertEquals((-1), node0.getCharno());
179:       assertFalse(node0.isAnd());
180:       assertFalse(node0.isCatch());
181:       assertFalse(node0.isInstanceOf());
182:       assertFalse(node0.isRegExp());
183:       assertFalse(node0.isThis());
184:       assertFalse(node0.isFunction());
185:       assertFalse(node0.isWith());
186:       assertFalse(node0.isFalse());
187:       assertFalse(node0.isThrow());
188:       assertFalse(node0.isNE());
189:       assertFalse(node0.isInc());
190:       assertFalse(node0.isSetterDef());
191:       assertFalse(node0.isIf());
192:       assertEquals(32, Node.INCRDECR_PROP);
193:       assertEquals(46, Node.IS_NAMESPACE);
194:       assertEquals(51, Node.STATIC_SOURCE_FILE);
195:       assertEquals(12, Node.COLUMN_BITS);
196:       assertEquals(47, Node.IS_DISPATCHER);
197:       assertEquals(57, Node.LAST_PROP);
198:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
199:       assertEquals(1, Node.DECR_FLAG);
200:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
201:       assertEquals(29, Node.JSDOC_INFO_PROP);
202:       assertEquals(15, Node.NO_SIDE_EFFECTS);
203:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
204:       assertEquals(52, Node.LENGTH);
205:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
206:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
207:       assertEquals(57, Node.REFLECTED_OBJECT);
208:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
209:       assertEquals(56, Node.CHANGE_TIME);
210:       assertEquals(49, Node.DIRECT_EVAL);
211:       assertEquals(37, Node.OPT_ARG_NAME);
212:       assertEquals(48, Node.DIRECTIVES);
213:       assertEquals(4095, Node.COLUMN_MASK);
214:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
215:       assertEquals(36, Node.QUOTED_PROP);
216:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
217:       assertEquals(50, Node.FREE_CALL);
218:       assertEquals(8, Node.FLAG_NO_THROWS);
219:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
220:       assertEquals(55, Node.INFERRED_FUNCTION);
221:       assertEquals(39, Node.EMPTY_BLOCK);
222:       assertEquals(53, Node.INPUT_ID);
223:       assertEquals(54, Node.SLASH_V);
224:       assertEquals(43, Node.IS_CONSTANT_NAME);
225:       assertEquals(30, Node.VAR_ARGS_NAME);
226:       assertEquals(2, Node.POST_FLAG);
227:       assertEquals(40, Node.ORIGINALNAME_PROP);
228:       
229:       Node node1 = Node.newString(42, "NT", (-96), 54);
230:       assertFalse(node1.isCast());
231:       assertFalse(node1.isLabelName());
232:       assertFalse(node1.isGetElem());
233:       assertFalse(node1.hasOneChild());
234:       assertFalse(node1.isTypeOf());
235:       assertFalse(node1.isExprResult());
236:       assertFalse(node1.isAssign());
237:       assertFalse(node1.isLabel());
238:       assertFalse(node1.isWith());
239:       assertFalse(node1.isReturn());
240:       assertFalse(node1.hasChildren());
241:       assertFalse(node1.isDec());
242:       assertFalse(node1.isAnd());
243:       assertFalse(node1.isContinue());
244:       assertFalse(node1.isGetProp());
245:       assertFalse(node1.isScript());
246:       assertFalse(node1.isNumber());
247:       assertFalse(node1.isNot());
248:       assertFalse(node1.isObjectLit());
249:       assertEquals((-1), node1.getSourcePosition());
250:       assertFalse(node1.isHook());
251:       assertFalse(node1.isThrow());
252:       assertFalse(node1.isFalse());
253:       assertFalse(node1.isBlock());
254:       assertFalse(node1.hasMoreThanOneChild());
255:       assertFalse(node1.isIn());
256:       assertFalse(node1.isCatch());
257:       assertFalse(node1.isInstanceOf());
258:       assertEquals((-1), node1.getLineno());
259:       assertFalse(node1.isNE());
260:       assertFalse(node1.isInc());
261:       assertFalse(node1.isSetterDef());
262:       assertFalse(node1.isIf());
263:       assertFalse(node1.isArrayLit());
264:       assertFalse(node1.isTry());
265:       assertFalse(node1.isEmpty());
266:       assertFalse(node1.isDelProp());
267:       assertFalse(node1.isVoid());
268:       assertFalse(node1.isRegExp());
269:       assertFalse(node1.isFunction());
270:       assertFalse(node1.isDefaultCase());
271:       assertFalse(node1.isFor());
272:       assertFalse(node1.isCase());
273:       assertFalse(node1.isSwitch());
274:       assertFalse(node1.isString());
275:       assertFalse(node1.isParamList());
276:       assertFalse(node1.isGetterDef());
277:       assertFalse(node1.isDebugger());
278:       assertEquals((-1), node1.getCharno());
279:       assertFalse(node1.isVar());
280:       assertFalse(node1.isCall());
281:       assertFalse(node1.isStringKey());
282:       assertFalse(node1.isAdd());
283:       assertFalse(node1.isName());
284:       assertFalse(node1.isBreak());
285:       assertFalse(node1.isNew());
286:       assertFalse(node1.isWhile());
287:       assertEquals(0, node1.getChildCount());
288:       assertFalse(node1.isComma());
289:       assertTrue(node1.isThis());
290:       assertEquals(42, node1.getType());
291:       assertFalse(node1.isDo());
292:       assertFalse(node1.isAssignAdd());
293:       assertFalse(node1.isTrue());
294:       assertFalse(node1.isNull());
295:       assertFalse(node1.isOr());
296:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
297:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
298:       assertEquals(36, Node.QUOTED_PROP);
299:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
300:       assertEquals(55, Node.INFERRED_FUNCTION);
301:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
302:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
303:       assertEquals(29, Node.JSDOC_INFO_PROP);
304:       assertEquals(53, Node.INPUT_ID);
305:       assertEquals(32, Node.INCRDECR_PROP);
306:       assertEquals(4095, Node.COLUMN_MASK);
307:       assertEquals(12, Node.COLUMN_BITS);
308:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
309:       assertEquals(56, Node.CHANGE_TIME);
310:       assertEquals(49, Node.DIRECT_EVAL);
311:       assertEquals(37, Node.OPT_ARG_NAME);
312:       assertEquals(48, Node.DIRECTIVES);
313:       assertEquals(52, Node.LENGTH);
314:       assertEquals(54, Node.SLASH_V);
315:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
316:       assertEquals(57, Node.REFLECTED_OBJECT);
317:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
318:       assertEquals(50, Node.FREE_CALL);
319:       assertEquals(8, Node.FLAG_NO_THROWS);
320:       assertEquals(57, Node.LAST_PROP);
321:       assertEquals(1, Node.DECR_FLAG);
322:       assertEquals(15, Node.NO_SIDE_EFFECTS);
323:       assertEquals(39, Node.EMPTY_BLOCK);
324:       assertEquals(46, Node.IS_NAMESPACE);
325:       assertEquals(51, Node.STATIC_SOURCE_FILE);
326:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
327:       assertEquals(47, Node.IS_DISPATCHER);
328:       assertEquals(43, Node.IS_CONSTANT_NAME);
329:       assertEquals(30, Node.VAR_ARGS_NAME);
330:       assertEquals(2, Node.POST_FLAG);
331:       assertEquals(40, Node.ORIGINALNAME_PROP);
332:       
333:       node1.setOptionalArg(false);
334:       assertFalse(node1.isCast());
335:       assertFalse(node1.isLabelName());
336:       assertFalse(node1.isGetElem());
337:       assertFalse(node1.hasOneChild());
338:       assertFalse(node1.isTypeOf());
339:       assertFalse(node1.isExprResult());
340:       assertFalse(node1.isAssign());
341:       assertFalse(node1.isLabel());
342:       assertFalse(node1.isWith());
343:       assertFalse(node1.isReturn());
344:       assertFalse(node1.hasChildren());
345:       assertFalse(node1.isDec());
346:       assertFalse(node1.isAnd());
347:       assertFalse(node1.isContinue());
348:       assertFalse(node1.isGetProp());
349:       assertFalse(node1.isScript());
350:       assertFalse(node1.isNumber());
351:       assertFalse(node1.isNot());
352:       assertFalse(node1.isObjectLit());
353:       assertEquals((-1), node1.getSourcePosition());
354:       assertFalse(node1.isHook());
355:       assertFalse(node1.isThrow());
356:       assertFalse(node1.isFalse());
357:       assertFalse(node1.isBlock());
358:       assertFalse(node1.hasMoreThanOneChild());
359:       assertFalse(node1.isIn());
360:       assertFalse(node1.isCatch());
361:       assertFalse(node1.isInstanceOf());
362:       assertEquals((-1), node1.getLineno());
363:       assertFalse(node1.isNE());
364:       assertFalse(node1.isInc());
365:       assertFalse(node1.isSetterDef());
366:       assertFalse(node1.isIf());
367:       assertFalse(node1.isArrayLit());
368:       assertFalse(node1.isTry());
369:       assertFalse(node1.isEmpty());
370:       assertFalse(node1.isDelProp());
371:       assertFalse(node1.isVoid());
372:       assertFalse(node1.isRegExp());
373:       assertFalse(node1.isFunction());
374:       assertFalse(node1.isDefaultCase());
375:       assertFalse(node1.isFor());
376:       assertFalse(node1.isCase());
377:       assertFalse(node1.isSwitch());
378:       assertFalse(node1.isString());
379:       assertFalse(node1.isParamList());
380:       assertFalse(node1.isGetterDef());
381:       assertFalse(node1.isDebugger());
382:       assertEquals((-1), node1.getCharno());
383:       assertFalse(node1.isVar());
384:       assertFalse(node1.isCall());
385:       assertFalse(node1.isStringKey());
386:       assertFalse(node1.isAdd());
387:       assertFalse(node1.isName());
388:       assertFalse(node1.isBreak());
389:       assertFalse(node1.isNew());
390:       assertFalse(node1.isWhile());
391:       assertEquals(0, node1.getChildCount());
392:       assertFalse(node1.isComma());
393:       assertTrue(node1.isThis());
394:       assertEquals(42, node1.getType());
395:       assertFalse(node1.isDo());
396:       assertFalse(node1.isAssignAdd());
397:       assertFalse(node1.isTrue());
398:       assertFalse(node1.isNull());
399:       assertFalse(node1.isOr());
400:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
401:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
402:       assertEquals(36, Node.QUOTED_PROP);
403:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
404:       assertEquals(55, Node.INFERRED_FUNCTION);
405:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
406:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
407:       assertEquals(29, Node.JSDOC_INFO_PROP);
408:       assertEquals(53, Node.INPUT_ID);
409:       assertEquals(32, Node.INCRDECR_PROP);
410:       assertEquals(4095, Node.COLUMN_MASK);
411:       assertEquals(12, Node.COLUMN_BITS);
412:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
413:       assertEquals(56, Node.CHANGE_TIME);
414:       assertEquals(49, Node.DIRECT_EVAL);
415:       assertEquals(37, Node.OPT_ARG_NAME);
416:       assertEquals(48, Node.DIRECTIVES);
417:       assertEquals(52, Node.LENGTH);
418:       assertEquals(54, Node.SLASH_V);
419:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
420:       assertEquals(57, Node.REFLECTED_OBJECT);
421:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
422:       assertEquals(50, Node.FREE_CALL);
423:       assertEquals(8, Node.FLAG_NO_THROWS);
424:       assertEquals(57, Node.LAST_PROP);
425:       assertEquals(1, Node.DECR_FLAG);
426:       assertEquals(15, Node.NO_SIDE_EFFECTS);
427:       assertEquals(39, Node.EMPTY_BLOCK);
428:       assertEquals(46, Node.IS_NAMESPACE);
429:       assertEquals(51, Node.STATIC_SOURCE_FILE);
430:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
431:       assertEquals(47, Node.IS_DISPATCHER);
432:       assertEquals(43, Node.IS_CONSTANT_NAME);
433:       assertEquals(30, Node.VAR_ARGS_NAME);
434:       assertEquals(2, Node.POST_FLAG);
435:       assertEquals(40, Node.ORIGINALNAME_PROP);
436:       
437:       Node node2 = node0.srcrefTree(node1);
438:       assertSame(node0, node2);
439:       assertSame(node2, node0);
440:       assertFalse(node0.hasMoreThanOneChild());
441:       assertFalse(node0.isContinue());
442:       assertEquals(10, node0.getType());
443:       assertFalse(node0.isDo());
444:       assertFalse(node0.isAssignAdd());
445:       assertEquals((-1), node0.getLineno());
446:       assertFalse(node0.isTypeOf());
447:       assertFalse(node0.isWhile());
448:       assertFalse(node0.isAssign());
449:       assertFalse(node0.isLabel());
450:       assertFalse(node0.isReturn());
451:       assertFalse(node0.isBlock());
452:       assertFalse(node0.hasChildren());
453:       assertFalse(node0.isDec());
454:       assertFalse(node0.isCast());
455:       assertFalse(node0.isStringKey());
456:       assertFalse(node0.isLabelName());
457:       assertFalse(node0.hasOneChild());
458:       assertFalse(node0.isScript());
459:       assertFalse(node0.isNumber());
460:       assertFalse(node0.isParamList());
461:       assertFalse(node0.isNot());
462:       assertFalse(node0.isObjectLit());
463:       assertEquals((-1), node0.getSourcePosition());
464:       assertFalse(node0.isGetProp());
465:       assertFalse(node0.isExprResult());
466:       assertFalse(node0.isDefaultCase());
467:       assertEquals(0, node0.getChildCount());
468:       assertFalse(node0.isComma());
469:       assertFalse(node0.isVar());
470:       assertFalse(node0.isCall());
471:       assertFalse(node0.isAdd());
472:       assertFalse(node0.isEmpty());
473:       assertFalse(node0.isName());
474:       assertFalse(node0.isGetElem());
475:       assertFalse(node0.isBreak());
476:       assertFalse(node0.isDelProp());
477:       assertFalse(node0.isVoid());
478:       assertFalse(node0.isNew());
479:       assertFalse(node0.isTrue());
480:       assertFalse(node0.isNull());
481:       assertFalse(node0.isOr());
482:       assertFalse(node0.isIn());
483:       assertFalse(node0.isCase());
484:       assertFalse(node0.isFor());
485:       assertFalse(node0.isArrayLit());
486:       assertFalse(node0.isHook());
487:       assertFalse(node0.isTry());
488:       assertFalse(node0.isSwitch());
489:       assertFalse(node0.isString());
490:       assertFalse(node0.isGetterDef());
491:       assertFalse(node0.isDebugger());
492:       assertEquals((-1), node0.getCharno());
493:       assertFalse(node0.isAnd());
494:       assertFalse(node0.isCatch());
495:       assertFalse(node0.isInstanceOf());
496:       assertFalse(node0.isRegExp());
497:       assertFalse(node0.isThis());
498:       assertFalse(node0.isFunction());
499:       assertFalse(node0.isWith());
500:       assertFalse(node0.isFalse());
501:       assertFalse(node0.isThrow());
502:       assertFalse(node0.isNE());
503:       assertFalse(node0.isInc());
504:       assertFalse(node0.isSetterDef());
505:       assertFalse(node0.isIf());
506:       assertFalse(node1.isCast());
507:       assertFalse(node1.isLabelName());
508:       assertFalse(node1.isGetElem());
509:       assertFalse(node1.hasOneChild());
510:       assertFalse(node1.isTypeOf());
511:       assertFalse(node1.isExprResult());
512:       assertFalse(node1.isAssign());
513:       assertFalse(node1.isLabel());
514:       assertFalse(node1.isWith());
515:       assertFalse(node1.isReturn());
516:       assertFalse(node1.hasChildren());
517:       assertFalse(node1.isDec());
518:       assertFalse(node1.isAnd());
519:       assertFalse(node1.isContinue());
520:       assertFalse(node1.isGetProp());
521:       assertFalse(node1.isScript());
522:       assertFalse(node1.isNumber());
523:       assertFalse(node1.isNot());
524:       assertFalse(node1.isObjectLit());
525:       assertEquals((-1), node1.getSourcePosition());
526:       assertFalse(node1.isHook());
527:       assertFalse(node1.isThrow());
528:       assertFalse(node1.isFalse());
529:       assertFalse(node1.isBlock());
530:       assertFalse(node1.hasMoreThanOneChild());
531:       assertFalse(node1.isIn());
532:       assertFalse(node1.isCatch());
533:       assertFalse(node1.isInstanceOf());
534:       assertEquals((-1), node1.getLineno());
535:       assertFalse(node1.isNE());
536:       assertFalse(node1.isInc());
537:       assertFalse(node1.isSetterDef());
538:       assertFalse(node1.isIf());
539:       assertFalse(node1.isArrayLit());
540:       assertFalse(node1.isTry());
541:       assertFalse(node1.isEmpty());
542:       assertFalse(node1.isDelProp());
543:       assertFalse(node1.isVoid());
544:       assertFalse(node1.isRegExp());
545:       assertFalse(node1.isFunction());
546:       assertFalse(node1.isDefaultCase());
547:       assertFalse(node1.isFor());
548:       assertFalse(node1.isCase());
549:       assertFalse(node1.isSwitch());
550:       assertFalse(node1.isString());
551:       assertFalse(node1.isParamList());
552:       assertFalse(node1.isGetterDef());
553:       assertFalse(node1.isDebugger());
554:       assertEquals((-1), node1.getCharno());
555:       assertFalse(node1.isVar());
556:       assertFalse(node1.isCall());
557:       assertFalse(node1.isStringKey());
558:       assertFalse(node1.isAdd());
559:       assertFalse(node1.isName());
560:       assertFalse(node1.isBreak());
561:       assertFalse(node1.isNew());
562:       assertFalse(node1.isWhile());
563:       assertEquals(0, node1.getChildCount());
564:       assertFalse(node1.isComma());
565:       assertTrue(node1.isThis());
566:       assertEquals(42, node1.getType());
567:       assertFalse(node1.isDo());
568:       assertFalse(node1.isAssignAdd());
569:       assertFalse(node1.isTrue());
570:       assertFalse(node1.isNull());
571:       assertFalse(node1.isOr());
572:       assertEquals(10, node2.getType());
573:       assertFalse(node2.isContinue());
574:       assertFalse(node2.isWhile());
575:       assertEquals((-1), node2.getLineno());
576:       assertFalse(node2.isDo());
577:       assertFalse(node2.isAssignAdd());
578:       assertFalse(node2.isNew());
579:       assertFalse(node2.isAdd());
580:       assertEquals((-1), node2.getSourcePosition());
581:       assertFalse(node2.isOr());
582:       assertFalse(node2.isNumber());
583:       assertFalse(node2.isCall());
584:       assertFalse(node2.isGetElem());
585:       assertFalse(node2.hasOneChild());
586:       assertFalse(node2.isName());
587:       assertFalse(node2.isExprResult());
588:       assertFalse(node2.isReturn());
589:       assertFalse(node2.isBlock());
590:       assertFalse(node2.hasChildren());
591:       assertFalse(node2.isDec());
592:       assertFalse(node2.isTypeOf());
593:       assertFalse(node2.isAssign());
594:       assertFalse(node2.isWith());
595:       assertFalse(node2.hasMoreThanOneChild());
596:       assertFalse(node2.isDefaultCase());
597:       assertFalse(node2.isTrue());
598:       assertFalse(node2.isParamList());
599:       assertFalse(node2.isScript());
600:       assertFalse(node2.isNull());
601:       assertFalse(node2.isStringKey());
602:       assertFalse(node2.isArrayLit());
603:       assertFalse(node2.isEmpty());
604:       assertFalse(node2.isVar());
605:       assertFalse(node2.isLabelName());
606:       assertFalse(node2.isLabel());
607:       assertEquals(0, node2.getChildCount());
608:       assertFalse(node2.isCase());
609:       assertFalse(node2.isSwitch());
610:       assertEquals((-1), node2.getCharno());
611:       assertFalse(node2.isNE());
612:       assertFalse(node2.isInc());
613:       assertFalse(node2.isString());
614:       assertFalse(node2.isIn());
615:       assertFalse(node2.isGetterDef());
616:       assertFalse(node2.isFor());
617:       assertFalse(node2.isHook());
618:       assertFalse(node2.isBreak());
619:       assertFalse(node2.isDelProp());
620:       assertFalse(node2.isIf());
621:       assertFalse(node2.isTry());
622:       assertFalse(node2.isVoid());
623:       assertFalse(node2.isComma());
624:       assertFalse(node2.isThis());
625:       assertFalse(node2.isInstanceOf());
626:       assertFalse(node2.isRegExp());
627:       assertFalse(node2.isObjectLit());
628:       assertFalse(node2.isAnd());
629:       assertFalse(node2.isCatch());
630:       assertFalse(node2.isDebugger());
631:       assertFalse(node2.isGetProp());
632:       assertFalse(node2.isSetterDef());
633:       assertFalse(node2.isNot());
634:       assertFalse(node2.isCast());
635:       assertFalse(node2.isThrow());
636:       assertFalse(node2.isFunction());
637:       assertFalse(node2.isFalse());
638:       assertEquals(32, Node.INCRDECR_PROP);
639:       assertEquals(46, Node.IS_NAMESPACE);
640:       assertEquals(51, Node.STATIC_SOURCE_FILE);
641:       assertEquals(12, Node.COLUMN_BITS);
642:       assertEquals(47, Node.IS_DISPATCHER);
643:       assertEquals(57, Node.LAST_PROP);
644:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
645:       assertEquals(1, Node.DECR_FLAG);
646:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
647:       assertEquals(29, Node.JSDOC_INFO_PROP);
648:       assertEquals(15, Node.NO_SIDE_EFFECTS);
649:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
650:       assertEquals(52, Node.LENGTH);
651:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
652:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
653:       assertEquals(57, Node.REFLECTED_OBJECT);
654:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
655:       assertEquals(56, Node.CHANGE_TIME);
656:       assertEquals(49, Node.DIRECT_EVAL);
657:       assertEquals(37, Node.OPT_ARG_NAME);
658:       assertEquals(48, Node.DIRECTIVES);
659:       assertEquals(4095, Node.COLUMN_MASK);
660:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
661:       assertEquals(36, Node.QUOTED_PROP);
662:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
663:       assertEquals(50, Node.FREE_CALL);
664:       assertEquals(8, Node.FLAG_NO_THROWS);
665:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
666:       assertEquals(55, Node.INFERRED_FUNCTION);
667:       assertEquals(39, Node.EMPTY_BLOCK);
668:       assertEquals(53, Node.INPUT_ID);
669:       assertEquals(54, Node.SLASH_V);
670:       assertEquals(43, Node.IS_CONSTANT_NAME);
671:       assertEquals(30, Node.VAR_ARGS_NAME);
672:       assertEquals(2, Node.POST_FLAG);
673:       assertEquals(40, Node.ORIGINALNAME_PROP);
674:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
675:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
676:       assertEquals(36, Node.QUOTED_PROP);
677:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
678:       assertEquals(55, Node.INFERRED_FUNCTION);
679:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
680:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
681:       assertEquals(29, Node.JSDOC_INFO_PROP);
682:       assertEquals(53, Node.INPUT_ID);
683:       assertEquals(32, Node.INCRDECR_PROP);
684:       assertEquals(4095, Node.COLUMN_MASK);
685:       assertEquals(12, Node.COLUMN_BITS);
686:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
687:       assertEquals(56, Node.CHANGE_TIME);
688:       assertEquals(49, Node.DIRECT_EVAL);
689:       assertEquals(37, Node.OPT_ARG_NAME);
690:       assertEquals(48, Node.DIRECTIVES);
691:       assertEquals(52, Node.LENGTH);
692:       assertEquals(54, Node.SLASH_V);
693:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
694:       assertEquals(57, Node.REFLECTED_OBJECT);
695:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
696:       assertEquals(50, Node.FREE_CALL);
697:       assertEquals(8, Node.FLAG_NO_THROWS);
698:       assertEquals(57, Node.LAST_PROP);
699:       assertEquals(1, Node.DECR_FLAG);
700:       assertEquals(15, Node.NO_SIDE_EFFECTS);
701:       assertEquals(39, Node.EMPTY_BLOCK);
702:       assertEquals(46, Node.IS_NAMESPACE);
703:       assertEquals(51, Node.STATIC_SOURCE_FILE);
704:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
705:       assertEquals(47, Node.IS_DISPATCHER);
706:       assertEquals(43, Node.IS_CONSTANT_NAME);
707:       assertEquals(30, Node.VAR_ARGS_NAME);
708:       assertEquals(2, Node.POST_FLAG);
709:       assertEquals(40, Node.ORIGINALNAME_PROP);
710:       assertEquals(51, Node.STATIC_SOURCE_FILE);
711:       assertEquals(12, Node.COLUMN_BITS);
712:       assertEquals(46, Node.IS_NAMESPACE);
713:       assertEquals(2, Node.POST_FLAG);
714:       assertEquals(30, Node.VAR_ARGS_NAME);
715:       assertEquals(54, Node.SLASH_V);
716:       assertEquals(56, Node.CHANGE_TIME);
717:       assertEquals(49, Node.DIRECT_EVAL);
718:       assertEquals(37, Node.OPT_ARG_NAME);
719:       assertEquals(57, Node.REFLECTED_OBJECT);
720:       assertEquals(40, Node.ORIGINALNAME_PROP);
721:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
722:       assertEquals(52, Node.LENGTH);
723:       assertEquals(15, Node.NO_SIDE_EFFECTS);
724:       assertEquals(8, Node.FLAG_NO_THROWS);
725:       assertEquals(39, Node.EMPTY_BLOCK);
726:       assertEquals(57, Node.LAST_PROP);
727:       assertEquals(47, Node.IS_DISPATCHER);
728:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
729:       assertEquals(29, Node.JSDOC_INFO_PROP);
730:       assertEquals(53, Node.INPUT_ID);
731:       assertEquals(4095, Node.COLUMN_MASK);
732:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
733:       assertEquals(55, Node.INFERRED_FUNCTION);
734:       assertEquals(43, Node.IS_CONSTANT_NAME);
735:       assertEquals(36, Node.QUOTED_PROP);
736:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
737:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
738:       assertEquals(48, Node.DIRECTIVES);
739:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
740:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
741:       assertEquals(50, Node.FREE_CALL);
742:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
743:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
744:       assertEquals(32, Node.INCRDECR_PROP);
745:       assertEquals(1, Node.DECR_FLAG);
746:       
747:       boolean boolean1 = node0.mayMutateGlobalStateOrThrow();
748:       assertSame(node0, node2);
749:       assertTrue(boolean1);
750:       assertFalse(node0.hasMoreThanOneChild());
751:       assertFalse(node0.isContinue());
752:       assertEquals(10, node0.getType());
753:       assertFalse(node0.isDo());
754:       assertFalse(node0.isAssignAdd());
755:       assertEquals((-1), node0.getLineno());
756:       assertFalse(node0.isTypeOf());
757:       assertFalse(node0.isWhile());
758:       assertFalse(node0.isAssign());
759:       assertFalse(node0.isLabel());
760:       assertFalse(node0.isReturn());
761:       assertFalse(node0.isBlock());
762:       assertFalse(node0.hasChildren());
763:       assertFalse(node0.isDec());
764:       assertFalse(node0.isCast());
765:       assertFalse(node0.isStringKey());
766:       assertFalse(node0.isLabelName());
767:       assertFalse(node0.hasOneChild());
768:       assertFalse(node0.isScript());
769:       assertFalse(node0.isNumber());
770:       assertFalse(node0.isParamList());
771:       assertFalse(node0.isNot());
772:       assertFalse(node0.isObjectLit());
773:       assertEquals((-1), node0.getSourcePosition());
774:       assertFalse(node0.isGetProp());
775:       assertFalse(node0.isExprResult());
776:       assertFalse(node0.isDefaultCase());
777:       assertEquals(0, node0.getChildCount());
778:       assertFalse(node0.isComma());
779:       assertFalse(node0.isVar());
780:       assertFalse(node0.isCall());
781:       assertFalse(node0.isAdd());
782:       assertFalse(node0.isEmpty());
783:       assertFalse(node0.isName());
784:       assertFalse(node0.isGetElem());
785:       assertFalse(node0.isBreak());
786:       assertFalse(node0.isDelProp());
787:       assertFalse(node0.isVoid());
788:       assertFalse(node0.isNew());
789:       assertFalse(node0.isTrue());
790:       assertFalse(node0.isNull());
791:       assertFalse(node0.isOr());
792:       assertFalse(node0.isIn());
793:       assertFalse(node0.isCase());
794:       assertFalse(node0.isFor());
795:       assertFalse(node0.isArrayLit());
796:       assertFalse(node0.isHook());
797:       assertFalse(node0.isTry());
798:       assertFalse(node0.isSwitch());
799:       assertFalse(node0.isString());
800:       assertFalse(node0.isGetterDef());
801:       assertFalse(node0.isDebugger());
802:       assertEquals((-1), node0.getCharno());
803:       assertFalse(node0.isAnd());
804:       assertFalse(node0.isCatch());
805:       assertFalse(node0.isInstanceOf());
806:       assertFalse(node0.isRegExp());
807:       assertFalse(node0.isThis());
808:       assertFalse(node0.isFunction());
809:       assertFalse(node0.isWith());
810:       assertFalse(node0.isFalse());
811:       assertFalse(node0.isThrow());
812:       assertFalse(node0.isNE());
813:       assertFalse(node0.isInc());
814:       assertFalse(node0.isSetterDef());
815:       assertFalse(node0.isIf());
816:       assertEquals(32, Node.INCRDECR_PROP);
817:       assertEquals(46, Node.IS_NAMESPACE);
818:       assertEquals(51, Node.STATIC_SOURCE_FILE);
819:       assertEquals(12, Node.COLUMN_BITS);
820:       assertEquals(47, Node.IS_DISPATCHER);
821:       assertEquals(57, Node.LAST_PROP);
822:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
823:       assertEquals(1, Node.DECR_FLAG);
824:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
825:       assertEquals(29, Node.JSDOC_INFO_PROP);
826:       assertEquals(15, Node.NO_SIDE_EFFECTS);
827:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
828:       assertEquals(52, Node.LENGTH);
829:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
830:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
831:       assertEquals(57, Node.REFLECTED_OBJECT);
832:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
833:       assertEquals(56, Node.CHANGE_TIME);
834:       assertEquals(49, Node.DIRECT_EVAL);
835:       assertEquals(37, Node.OPT_ARG_NAME);
836:       assertEquals(48, Node.DIRECTIVES);
837:       assertEquals(4095, Node.COLUMN_MASK);
838:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
839:       assertEquals(36, Node.QUOTED_PROP);
840:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
841:       assertEquals(50, Node.FREE_CALL);
842:       assertEquals(8, Node.FLAG_NO_THROWS);
843:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
844:       assertEquals(55, Node.INFERRED_FUNCTION);
845:       assertEquals(39, Node.EMPTY_BLOCK);
846:       assertEquals(53, Node.INPUT_ID);
847:       assertEquals(54, Node.SLASH_V);
848:       assertEquals(43, Node.IS_CONSTANT_NAME);
849:       assertEquals(30, Node.VAR_ARGS_NAME);
850:       assertEquals(2, Node.POST_FLAG);
851:       assertEquals(40, Node.ORIGINALNAME_PROP);
852:       
853:       boolean boolean2 = node2.isCall();
854:       assertSame(node0, node2);
855:       assertSame(node2, node0);
856:       assertFalse(boolean2);
857:       assertFalse(node0.hasMoreThanOneChild());
858:       assertFalse(node0.isContinue());
859:       assertEquals(10, node0.getType());
860:       assertFalse(node0.isDo());
861:       assertFalse(node0.isAssignAdd());
862:       assertEquals((-1), node0.getLineno());
863:       assertFalse(node0.isTypeOf());
864:       assertFalse(node0.isWhile());
865:       assertFalse(node0.isAssign());
866:       assertFalse(node0.isLabel());
867:       assertFalse(node0.isReturn());
868:       assertFalse(node0.isBlock());
869:       assertFalse(node0.hasChildren());
870:       assertFalse(node0.isDec());
871:       assertFalse(node0.isCast());
872:       assertFalse(node0.isStringKey());
873:       assertFalse(node0.isLabelName());
874:       assertFalse(node0.hasOneChild());
875:       assertFalse(node0.isScript());
876:       assertFalse(node0.isNumber());
877:       assertFalse(node0.isParamList());
878:       assertFalse(node0.isNot());
879:       assertFalse(node0.isObjectLit());
880:       assertEquals((-1), node0.getSourcePosition());
881:       assertFalse(node0.isGetProp());
882:       assertFalse(node0.isExprResult());
883:       assertFalse(node0.isDefaultCase());
884:       assertEquals(0, node0.getChildCount());
885:       assertFalse(node0.isComma());
886:       assertFalse(node0.isVar());
887:       assertFalse(node0.isCall());
888:       assertFalse(node0.isAdd());
889:       assertFalse(node0.isEmpty());
890:       assertFalse(node0.isName());
891:       assertFalse(node0.isGetElem());
892:       assertFalse(node0.isBreak());
893:       assertFalse(node0.isDelProp());
894:       assertFalse(node0.isVoid());
895:       assertFalse(node0.isNew());
896:       assertFalse(node0.isTrue());
897:       assertFalse(node0.isNull());
898:       assertFalse(node0.isOr());
899:       assertFalse(node0.isIn());
900:       assertFalse(node0.isCase());
901:       assertFalse(node0.isFor());
902:       assertFalse(node0.isArrayLit());
903:       assertFalse(node0.isHook());
904:       assertFalse(node0.isTry());
905:       assertFalse(node0.isSwitch());
906:       assertFalse(node0.isString());
907:       assertFalse(node0.isGetterDef());
908:       assertFalse(node0.isDebugger());
909:       assertEquals((-1), node0.getCharno());
910:       assertFalse(node0.isAnd());
911:       assertFalse(node0.isCatch());
912:       assertFalse(node0.isInstanceOf());
913:       assertFalse(node0.isRegExp());
914:       assertFalse(node0.isThis());
915:       assertFalse(node0.isFunction());
916:       assertFalse(node0.isWith());
917:       assertFalse(node0.isFalse());
918:       assertFalse(node0.isThrow());
919:       assertFalse(node0.isNE());
920:       assertFalse(node0.isInc());
921:       assertFalse(node0.isSetterDef());
922:       assertFalse(node0.isIf());
923:       assertFalse(node1.isCast());
924:       assertFalse(node1.isLabelName());
925:       assertFalse(node1.isGetElem());
926:       assertFalse(node1.hasOneChild());
927:       assertFalse(node1.isTypeOf());
928:       assertFalse(node1.isExprResult());
929:       assertFalse(node1.isAssign());
930:       assertFalse(node1.isLabel());
931:       assertFalse(node1.isWith());
932:       assertFalse(node1.isReturn());
933:       assertFalse(node1.hasChildren());
934:       assertFalse(node1.isDec());
935:       assertFalse(node1.isAnd());
936:       assertFalse(node1.isContinue());
937:       assertFalse(node1.isGetProp());
938:       assertFalse(node1.isScript());
939:       assertFalse(node1.isNumber());
940:       assertFalse(node1.isNot());
941:       assertFalse(node1.isObjectLit());
942:       assertEquals((-1), node1.getSourcePosition());
943:       assertFalse(node1.isHook());
944:       assertFalse(node1.isThrow());
945:       assertFalse(node1.isFalse());
946:       assertFalse(node1.isBlock());
947:       assertFalse(node1.hasMoreThanOneChild());
948:       assertFalse(node1.isIn());
949:       assertFalse(node1.isCatch());
950:       assertFalse(node1.isInstanceOf());
951:       assertEquals((-1), node1.getLineno());
952:       assertFalse(node1.isNE());
953:       assertFalse(node1.isInc());
954:       assertFalse(node1.isSetterDef());
955:       assertFalse(node1.isIf());
956:       assertFalse(node1.isArrayLit());
957:       assertFalse(node1.isTry());
958:       assertFalse(node1.isEmpty());
959:       assertFalse(node1.isDelProp());
960:       assertFalse(node1.isVoid());
961:       assertFalse(node1.isRegExp());
962:       assertFalse(node1.isFunction());
963:       assertFalse(node1.isDefaultCase());
964:       assertFalse(node1.isFor());
965:       assertFalse(node1.isCase());
966:       assertFalse(node1.isSwitch());
967:       assertFalse(node1.isString());
968:       assertFalse(node1.isParamList());
969:       assertFalse(node1.isGetterDef());
970:       assertFalse(node1.isDebugger());
971:       assertEquals((-1), node1.getCharno());
972:       assertFalse(node1.isVar());
973:       assertFalse(node1.isCall());
974:       assertFalse(node1.isStringKey());
975:       assertFalse(node1.isAdd());
976:       assertFalse(node1.isName());
977:       assertFalse(node1.isBreak());
978:       assertFalse(node1.isNew());
979:       assertFalse(node1.isWhile());
980:       assertEquals(0, node1.getChildCount());
981:       assertFalse(node1.isComma());
982:       assertTrue(node1.isThis());
983:       assertEquals(42, node1.getType());
984:       assertFalse(node1.isDo());
985:       assertFalse(node1.isAssignAdd());
986:       assertFalse(node1.isTrue());
987:       assertFalse(node1.isNull());
988:       assertFalse(node1.isOr());
989:       assertEquals(10, node2.getType());
990:       assertFalse(node2.isContinue());
991:       assertFalse(node2.isWhile());
992:       assertEquals((-1), node2.getLineno());
993:       assertFalse(node2.isDo());
994:       assertFalse(node2.isAssignAdd());
995:       assertFalse(node2.isNew());
996:       assertFalse(node2.isAdd());
997:       assertEquals((-1), node2.getSourcePosition());
998:       assertFalse(node2.isOr());
999:       assertFalse(node2.isNumber());
1000:       assertFalse(node2.isCall());
1001:       assertFalse(node2.isGetElem());
1002:       assertFalse(node2.hasOneChild());
1003:       assertFalse(node2.isName());
1004:       assertFalse(node2.isExprResult());
1005:       assertFalse(node2.isReturn());
1006:       assertFalse(node2.isBlock());
1007:       assertFalse(node2.hasChildren());
1008:       assertFalse(node2.isDec());
1009:       assertFalse(node2.isTypeOf());
1010:       assertFalse(node2.isAssign());
1011:       assertFalse(node2.isWith());
1012:       assertFalse(node2.hasMoreThanOneChild());
1013:       assertFalse(node2.isDefaultCase());
1014:       assertFalse(node2.isTrue());
1015:       assertFalse(node2.isParamList());
1016:       assertFalse(node2.isScript());
1017:       assertFalse(node2.isNull());
1018:       assertFalse(node2.isStringKey());
1019:       assertFalse(node2.isArrayLit());
1020:       assertFalse(node2.isEmpty());
1021:       assertFalse(node2.isVar());
1022:       assertFalse(node2.isLabelName());
1023:       assertFalse(node2.isLabel());
1024:       assertEquals(0, node2.getChildCount());
1025:       assertFalse(node2.isCase());
1026:       assertFalse(node2.isSwitch());
1027:       assertEquals((-1), node2.getCharno());
1028:       assertFalse(node2.isNE());
1029:       assertFalse(node2.isInc());
1030:       assertFalse(node2.isString());
1031:       assertFalse(node2.isIn());
1032:       assertFalse(node2.isGetterDef());
1033:       assertFalse(node2.isFor());
1034:       assertFalse(node2.isHook());
1035:       assertFalse(node2.isBreak());
1036:       assertFalse(node2.isDelProp());
1037:       assertFalse(node2.isIf());
1038:       assertFalse(node2.isTry());
1039:       assertFalse(node2.isVoid());
1040:       assertFalse(node2.isComma());
1041:       assertFalse(node2.isThis());
1042:       assertFalse(node2.isInstanceOf());
1043:       assertFalse(node2.isRegExp());
1044:       assertFalse(node2.isObjectLit());
1045:       assertFalse(node2.isAnd());
1046:       assertFalse(node2.isCatch());
1047:       assertFalse(node2.isDebugger());
1048:       assertFalse(node2.isGetProp());
1049:       assertFalse(node2.isSetterDef());
1050:       assertFalse(node2.isNot());
1051:       assertFalse(node2.isCast());
1052:       assertFalse(node2.isThrow());
1053:       assertFalse(node2.isFunction());
1054:       assertFalse(node2.isFalse());
1055:       assertEquals(32, Node.INCRDECR_PROP);
1056:       assertEquals(46, Node.IS_NAMESPACE);
1057:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1058:       assertEquals(12, Node.COLUMN_BITS);
1059:       assertEquals(47, Node.IS_DISPATCHER);
1060:       assertEquals(57, Node.LAST_PROP);
1061:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1062:       assertEquals(1, Node.DECR_FLAG);
1063:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1064:       assertEquals(29, Node.JSDOC_INFO_PROP);
1065:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1066:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1067:       assertEquals(52, Node.LENGTH);
1068:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1069:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1070:       assertEquals(57, Node.REFLECTED_OBJECT);
1071:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1072:       assertEquals(56, Node.CHANGE_TIME);
1073:       assertEquals(49, Node.DIRECT_EVAL);
1074:       assertEquals(37, Node.OPT_ARG_NAME);
1075:       assertEquals(48, Node.DIRECTIVES);
1076:       assertEquals(4095, Node.COLUMN_MASK);
1077:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1078:       assertEquals(36, Node.QUOTED_PROP);
1079:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1080:       assertEquals(50, Node.FREE_CALL);
1081:       assertEquals(8, Node.FLAG_NO_THROWS);
1082:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1083:       assertEquals(55, Node.INFERRED_FUNCTION);
1084:       assertEquals(39, Node.EMPTY_BLOCK);
1085:       assertEquals(53, Node.INPUT_ID);
1086:       assertEquals(54, Node.SLASH_V);
1087:       assertEquals(43, Node.IS_CONSTANT_NAME);
1088:       assertEquals(30, Node.VAR_ARGS_NAME);
1089:       assertEquals(2, Node.POST_FLAG);
1090:       assertEquals(40, Node.ORIGINALNAME_PROP);
1091:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1092:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1093:       assertEquals(36, Node.QUOTED_PROP);
1094:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1095:       assertEquals(55, Node.INFERRED_FUNCTION);
1096:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1097:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1098:       assertEquals(29, Node.JSDOC_INFO_PROP);
1099:       assertEquals(53, Node.INPUT_ID);
1100:       assertEquals(32, Node.INCRDECR_PROP);
1101:       assertEquals(4095, Node.COLUMN_MASK);
1102:       assertEquals(12, Node.COLUMN_BITS);
1103:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1104:       assertEquals(56, Node.CHANGE_TIME);
1105:       assertEquals(49, Node.DIRECT_EVAL);
1106:       assertEquals(37, Node.OPT_ARG_NAME);
1107:       assertEquals(48, Node.DIRECTIVES);
1108:       assertEquals(52, Node.LENGTH);
1109:       assertEquals(54, Node.SLASH_V);
1110:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1111:       assertEquals(57, Node.REFLECTED_OBJECT);
1112:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1113:       assertEquals(50, Node.FREE_CALL);
1114:       assertEquals(8, Node.FLAG_NO_THROWS);
1115:       assertEquals(57, Node.LAST_PROP);
1116:       assertEquals(1, Node.DECR_FLAG);
1117:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1118:       assertEquals(39, Node.EMPTY_BLOCK);
1119:       assertEquals(46, Node.IS_NAMESPACE);
1120:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1121:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1122:       assertEquals(47, Node.IS_DISPATCHER);
1123:       assertEquals(43, Node.IS_CONSTANT_NAME);
1124:       assertEquals(30, Node.VAR_ARGS_NAME);
1125:       assertEquals(2, Node.POST_FLAG);
1126:       assertEquals(40, Node.ORIGINALNAME_PROP);
1127:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1128:       assertEquals(12, Node.COLUMN_BITS);
1129:       assertEquals(46, Node.IS_NAMESPACE);
1130:       assertEquals(2, Node.POST_FLAG);
1131:       assertEquals(30, Node.VAR_ARGS_NAME);
1132:       assertEquals(54, Node.SLASH_V);
1133:       assertEquals(56, Node.CHANGE_TIME);
1134:       assertEquals(49, Node.DIRECT_EVAL);
1135:       assertEquals(37, Node.OPT_ARG_NAME);
1136:       assertEquals(57, Node.REFLECTED_OBJECT);
1137:       assertEquals(40, Node.ORIGINALNAME_PROP);
1138:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1139:       assertEquals(52, Node.LENGTH);
1140:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1141:       assertEquals(8, Node.FLAG_NO_THROWS);
1142:       assertEquals(39, Node.EMPTY_BLOCK);
1143:       assertEquals(57, Node.LAST_PROP);
1144:       assertEquals(47, Node.IS_DISPATCHER);
1145:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1146:       assertEquals(29, Node.JSDOC_INFO_PROP);
1147:       assertEquals(53, Node.INPUT_ID);
1148:       assertEquals(4095, Node.COLUMN_MASK);
1149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1150:       assertEquals(55, Node.INFERRED_FUNCTION);
1151:       assertEquals(43, Node.IS_CONSTANT_NAME);
1152:       assertEquals(36, Node.QUOTED_PROP);
1153:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1154:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1155:       assertEquals(48, Node.DIRECTIVES);
1156:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1158:       assertEquals(50, Node.FREE_CALL);
1159:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1160:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1161:       assertEquals(32, Node.INCRDECR_PROP);
1162:       assertEquals(1, Node.DECR_FLAG);
1163:       
1164:       boolean boolean3 = node2.isCast();
1165:       assertSame(node0, node2);
1166:       assertSame(node2, node0);
1167:       assertFalse(boolean3);
1168:       assertFalse(node0.hasMoreThanOneChild());
1169:       assertFalse(node0.isContinue());
1170:       assertEquals(10, node0.getType());
1171:       assertFalse(node0.isDo());
1172:       assertFalse(node0.isAssignAdd());
1173:       assertEquals((-1), node0.getLineno());
1174:       assertFalse(node0.isTypeOf());
1175:       assertFalse(node0.isWhile());
1176:       assertFalse(node0.isAssign());
1177:       assertFalse(node0.isLabel());
1178:       assertFalse(node0.isReturn());
1179:       assertFalse(node0.isBlock());
1180:       assertFalse(node0.hasChildren());
1181:       assertFalse(node0.isDec());
1182:       assertFalse(node0.isCast());
1183:       assertFalse(node0.isStringKey());
1184:       assertFalse(node0.isLabelName());
1185:       assertFalse(node0.hasOneChild());
1186:       assertFalse(node0.isScript());
1187:       assertFalse(node0.isNumber());
1188:       assertFalse(node0.isParamList());
1189:       assertFalse(node0.isNot());
1190:       assertFalse(node0.isObjectLit());
1191:       assertEquals((-1), node0.getSourcePosition());
1192:       assertFalse(node0.isGetProp());
1193:       assertFalse(node0.isExprResult());
1194:       assertFalse(node0.isDefaultCase());
1195:       assertEquals(0, node0.getChildCount());
1196:       assertFalse(node0.isComma());
1197:       assertFalse(node0.isVar());
1198:       assertFalse(node0.isCall());
1199:       assertFalse(node0.isAdd());
1200:       assertFalse(node0.isEmpty());
1201:       assertFalse(node0.isName());
1202:       assertFalse(node0.isGetElem());
1203:       assertFalse(node0.isBreak());
1204:       assertFalse(node0.isDelProp());
1205:       assertFalse(node0.isVoid());
1206:       assertFalse(node0.isNew());
1207:       assertFalse(node0.isTrue());
1208:       assertFalse(node0.isNull());
1209:       assertFalse(node0.isOr());
1210:       assertFalse(node0.isIn());
1211:       assertFalse(node0.isCase());
1212:       assertFalse(node0.isFor());
1213:       assertFalse(node0.isArrayLit());
1214:       assertFalse(node0.isHook());
1215:       assertFalse(node0.isTry());
1216:       assertFalse(node0.isSwitch());
1217:       assertFalse(node0.isString());
1218:       assertFalse(node0.isGetterDef());
1219:       assertFalse(node0.isDebugger());
1220:       assertEquals((-1), node0.getCharno());
1221:       assertFalse(node0.isAnd());
1222:       assertFalse(node0.isCatch());
1223:       assertFalse(node0.isInstanceOf());
1224:       assertFalse(node0.isRegExp());
1225:       assertFalse(node0.isThis());
1226:       assertFalse(node0.isFunction());
1227:       assertFalse(node0.isWith());
1228:       assertFalse(node0.isFalse());
1229:       assertFalse(node0.isThrow());
1230:       assertFalse(node0.isNE());
1231:       assertFalse(node0.isInc());
1232:       assertFalse(node0.isSetterDef());
1233:       assertFalse(node0.isIf());
1234:       assertFalse(node1.isCast());
1235:       assertFalse(node1.isLabelName());
1236:       assertFalse(node1.isGetElem());
1237:       assertFalse(node1.hasOneChild());
1238:       assertFalse(node1.isTypeOf());
1239:       assertFalse(node1.isExprResult());
1240:       assertFalse(node1.isAssign());
1241:       assertFalse(node1.isLabel());
1242:       assertFalse(node1.isWith());
1243:       assertFalse(node1.isReturn());
1244:       assertFalse(node1.hasChildren());
1245:       assertFalse(node1.isDec());
1246:       assertFalse(node1.isAnd());
1247:       assertFalse(node1.isContinue());
1248:       assertFalse(node1.isGetProp());
1249:       assertFalse(node1.isScript());
1250:       assertFalse(node1.isNumber());
1251:       assertFalse(node1.isNot());
1252:       assertFalse(node1.isObjectLit());
1253:       assertEquals((-1), node1.getSourcePosition());
1254:       assertFalse(node1.isHook());
1255:       assertFalse(node1.isThrow());
1256:       assertFalse(node1.isFalse());
1257:       assertFalse(node1.isBlock());
1258:       assertFalse(node1.hasMoreThanOneChild());
1259:       assertFalse(node1.isIn());
1260:       assertFalse(node1.isCatch());
1261:       assertFalse(node1.isInstanceOf());
1262:       assertEquals((-1), node1.getLineno());
1263:       assertFalse(node1.isNE());
1264:       assertFalse(node1.isInc());
1265:       assertFalse(node1.isSetterDef());
1266:       assertFalse(node1.isIf());
1267:       assertFalse(node1.isArrayLit());
1268:       assertFalse(node1.isTry());
1269:       assertFalse(node1.isEmpty());
1270:       assertFalse(node1.isDelProp());
1271:       assertFalse(node1.isVoid());
1272:       assertFalse(node1.isRegExp());
1273:       assertFalse(node1.isFunction());
1274:       assertFalse(node1.isDefaultCase());
1275:       assertFalse(node1.isFor());
1276:       assertFalse(node1.isCase());
1277:       assertFalse(node1.isSwitch());
1278:       assertFalse(node1.isString());
1279:       assertFalse(node1.isParamList());
1280:       assertFalse(node1.isGetterDef());
1281:       assertFalse(node1.isDebugger());
1282:       assertEquals((-1), node1.getCharno());
1283:       assertFalse(node1.isVar());
1284:       assertFalse(node1.isCall());
1285:       assertFalse(node1.isStringKey());
1286:       assertFalse(node1.isAdd());
1287:       assertFalse(node1.isName());
1288:       assertFalse(node1.isBreak());
1289:       assertFalse(node1.isNew());
1290:       assertFalse(node1.isWhile());
1291:       assertEquals(0, node1.getChildCount());
1292:       assertFalse(node1.isComma());
1293:       assertTrue(node1.isThis());
1294:       assertEquals(42, node1.getType());
1295:       assertFalse(node1.isDo());
1296:       assertFalse(node1.isAssignAdd());
1297:       assertFalse(node1.isTrue());
1298:       assertFalse(node1.isNull());
1299:       assertFalse(node1.isOr());
1300:       assertEquals(10, node2.getType());
1301:       assertFalse(node2.isContinue());
1302:       assertFalse(node2.isWhile());
1303:       assertEquals((-1), node2.getLineno());
1304:       assertFalse(node2.isDo());
1305:       assertFalse(node2.isAssignAdd());
1306:       assertFalse(node2.isNew());
1307:       assertFalse(node2.isAdd());
1308:       assertEquals((-1), node2.getSourcePosition());
1309:       assertFalse(node2.isOr());
1310:       assertFalse(node2.isNumber());
1311:       assertFalse(node2.isCall());
1312:       assertFalse(node2.isGetElem());
1313:       assertFalse(node2.hasOneChild());
1314:       assertFalse(node2.isName());
1315:       assertFalse(node2.isExprResult());
1316:       assertFalse(node2.isReturn());
1317:       assertFalse(node2.isBlock());
1318:       assertFalse(node2.hasChildren());
1319:       assertFalse(node2.isDec());
1320:       assertFalse(node2.isTypeOf());
1321:       assertFalse(node2.isAssign());
1322:       assertFalse(node2.isWith());
1323:       assertFalse(node2.hasMoreThanOneChild());
1324:       assertFalse(node2.isDefaultCase());
1325:       assertFalse(node2.isTrue());
1326:       assertFalse(node2.isParamList());
1327:       assertFalse(node2.isScript());
1328:       assertFalse(node2.isNull());
1329:       assertFalse(node2.isStringKey());
1330:       assertFalse(node2.isArrayLit());
1331:       assertFalse(node2.isEmpty());
1332:       assertFalse(node2.isVar());
1333:       assertFalse(node2.isLabelName());
1334:       assertFalse(node2.isLabel());
1335:       assertEquals(0, node2.getChildCount());
1336:       assertFalse(node2.isCase());
1337:       assertFalse(node2.isSwitch());
1338:       assertEquals((-1), node2.getCharno());
1339:       assertFalse(node2.isNE());
1340:       assertFalse(node2.isInc());
1341:       assertFalse(node2.isString());
1342:       assertFalse(node2.isIn());
1343:       assertFalse(node2.isGetterDef());
1344:       assertFalse(node2.isFor());
1345:       assertFalse(node2.isHook());
1346:       assertFalse(node2.isBreak());
1347:       assertFalse(node2.isDelProp());
1348:       assertFalse(node2.isIf());
1349:       assertFalse(node2.isTry());
1350:       assertFalse(node2.isVoid());
1351:       assertFalse(node2.isComma());
1352:       assertFalse(node2.isThis());
1353:       assertFalse(node2.isInstanceOf());
1354:       assertFalse(node2.isRegExp());
1355:       assertFalse(node2.isObjectLit());
1356:       assertFalse(node2.isAnd());
1357:       assertFalse(node2.isCatch());
1358:       assertFalse(node2.isDebugger());
1359:       assertFalse(node2.isGetProp());
1360:       assertFalse(node2.isSetterDef());
1361:       assertFalse(node2.isNot());
1362:       assertFalse(node2.isCast());
1363:       assertFalse(node2.isThrow());
1364:       assertFalse(node2.isFunction());
1365:       assertFalse(node2.isFalse());
1366:       assertEquals(32, Node.INCRDECR_PROP);
1367:       assertEquals(46, Node.IS_NAMESPACE);
1368:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1369:       assertEquals(12, Node.COLUMN_BITS);
1370:       assertEquals(47, Node.IS_DISPATCHER);
1371:       assertEquals(57, Node.LAST_PROP);
1372:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1373:       assertEquals(1, Node.DECR_FLAG);
1374:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1375:       assertEquals(29, Node.JSDOC_INFO_PROP);
1376:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1377:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1378:       assertEquals(52, Node.LENGTH);
1379:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1380:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1381:       assertEquals(57, Node.REFLECTED_OBJECT);
1382:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1383:       assertEquals(56, Node.CHANGE_TIME);
1384:       assertEquals(49, Node.DIRECT_EVAL);
1385:       assertEquals(37, Node.OPT_ARG_NAME);
1386:       assertEquals(48, Node.DIRECTIVES);
1387:       assertEquals(4095, Node.COLUMN_MASK);
1388:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1389:       assertEquals(36, Node.QUOTED_PROP);
1390:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1391:       assertEquals(50, Node.FREE_CALL);
1392:       assertEquals(8, Node.FLAG_NO_THROWS);
1393:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1394:       assertEquals(55, Node.INFERRED_FUNCTION);
1395:       assertEquals(39, Node.EMPTY_BLOCK);
1396:       assertEquals(53, Node.INPUT_ID);
1397:       assertEquals(54, Node.SLASH_V);
1398:       assertEquals(43, Node.IS_CONSTANT_NAME);
1399:       assertEquals(30, Node.VAR_ARGS_NAME);
1400:       assertEquals(2, Node.POST_FLAG);
1401:       assertEquals(40, Node.ORIGINALNAME_PROP);
1402:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1403:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1404:       assertEquals(36, Node.QUOTED_PROP);
1405:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1406:       assertEquals(55, Node.INFERRED_FUNCTION);
1407:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1408:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1409:       assertEquals(29, Node.JSDOC_INFO_PROP);
1410:       assertEquals(53, Node.INPUT_ID);
1411:       assertEquals(32, Node.INCRDECR_PROP);
1412:       assertEquals(4095, Node.COLUMN_MASK);
1413:       assertEquals(12, Node.COLUMN_BITS);
1414:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1415:       assertEquals(56, Node.CHANGE_TIME);
1416:       assertEquals(49, Node.DIRECT_EVAL);
1417:       assertEquals(37, Node.OPT_ARG_NAME);
1418:       assertEquals(48, Node.DIRECTIVES);
1419:       assertEquals(52, Node.LENGTH);
1420:       assertEquals(54, Node.SLASH_V);
1421:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1422:       assertEquals(57, Node.REFLECTED_OBJECT);
1423:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1424:       assertEquals(50, Node.FREE_CALL);
1425:       assertEquals(8, Node.FLAG_NO_THROWS);
1426:       assertEquals(57, Node.LAST_PROP);
1427:       assertEquals(1, Node.DECR_FLAG);
1428:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1429:       assertEquals(39, Node.EMPTY_BLOCK);
1430:       assertEquals(46, Node.IS_NAMESPACE);
1431:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1432:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1433:       assertEquals(47, Node.IS_DISPATCHER);
1434:       assertEquals(43, Node.IS_CONSTANT_NAME);
1435:       assertEquals(30, Node.VAR_ARGS_NAME);
1436:       assertEquals(2, Node.POST_FLAG);
1437:       assertEquals(40, Node.ORIGINALNAME_PROP);
1438:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1439:       assertEquals(12, Node.COLUMN_BITS);
1440:       assertEquals(46, Node.IS_NAMESPACE);
1441:       assertEquals(2, Node.POST_FLAG);
1442:       assertEquals(30, Node.VAR_ARGS_NAME);
1443:       assertEquals(54, Node.SLASH_V);
1444:       assertEquals(56, Node.CHANGE_TIME);
1445:       assertEquals(49, Node.DIRECT_EVAL);
1446:       assertEquals(37, Node.OPT_ARG_NAME);
1447:       assertEquals(57, Node.REFLECTED_OBJECT);
1448:       assertEquals(40, Node.ORIGINALNAME_PROP);
1449:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1450:       assertEquals(52, Node.LENGTH);
1451:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1452:       assertEquals(8, Node.FLAG_NO_THROWS);
1453:       assertEquals(39, Node.EMPTY_BLOCK);
1454:       assertEquals(57, Node.LAST_PROP);
1455:       assertEquals(47, Node.IS_DISPATCHER);
1456:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1457:       assertEquals(29, Node.JSDOC_INFO_PROP);
1458:       assertEquals(53, Node.INPUT_ID);
1459:       assertEquals(4095, Node.COLUMN_MASK);
1460:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1461:       assertEquals(55, Node.INFERRED_FUNCTION);
1462:       assertEquals(43, Node.IS_CONSTANT_NAME);
1463:       assertEquals(36, Node.QUOTED_PROP);
1464:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1465:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1466:       assertEquals(48, Node.DIRECTIVES);
1467:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1468:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1469:       assertEquals(50, Node.FREE_CALL);
1470:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1471:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1472:       assertEquals(32, Node.INCRDECR_PROP);
1473:       assertEquals(1, Node.DECR_FLAG);
1474:       
1475:       Iterable<Node> iterable0 = node1.children();
1476:       assertFalse(node1.isCast());
1477:       assertFalse(node1.isLabelName());
1478:       assertFalse(node1.isGetElem());
1479:       assertFalse(node1.hasOneChild());
1480:       assertFalse(node1.isTypeOf());
1481:       assertFalse(node1.isExprResult());
1482:       assertFalse(node1.isAssign());
1483:       assertFalse(node1.isLabel());
1484:       assertFalse(node1.isWith());
1485:       assertFalse(node1.isReturn());
1486:       assertFalse(node1.hasChildren());
1487:       assertFalse(node1.isDec());
1488:       assertFalse(node1.isAnd());
1489:       assertFalse(node1.isContinue());
1490:       assertFalse(node1.isGetProp());
1491:       assertFalse(node1.isScript());
1492:       assertFalse(node1.isNumber());
1493:       assertFalse(node1.isNot());
1494:       assertFalse(node1.isObjectLit());
1495:       assertEquals((-1), node1.getSourcePosition());
1496:       assertFalse(node1.isHook());
1497:       assertFalse(node1.isThrow());
1498:       assertFalse(node1.isFalse());
1499:       assertFalse(node1.isBlock());
1500:       assertFalse(node1.hasMoreThanOneChild());
1501:       assertFalse(node1.isIn());
1502:       assertFalse(node1.isCatch());
1503:       assertFalse(node1.isInstanceOf());
1504:       assertEquals((-1), node1.getLineno());
1505:       assertFalse(node1.isNE());
1506:       assertFalse(node1.isInc());
1507:       assertFalse(node1.isSetterDef());
1508:       assertFalse(node1.isIf());
1509:       assertFalse(node1.isArrayLit());
1510:       assertFalse(node1.isTry());
1511:       assertFalse(node1.isEmpty());
1512:       assertFalse(node1.isDelProp());
1513:       assertFalse(node1.isVoid());
1514:       assertFalse(node1.isRegExp());
1515:       assertFalse(node1.isFunction());
1516:       assertFalse(node1.isDefaultCase());
1517:       assertFalse(node1.isFor());
1518:       assertFalse(node1.isCase());
1519:       assertFalse(node1.isSwitch());
1520:       assertFalse(node1.isString());
1521:       assertFalse(node1.isParamList());
1522:       assertFalse(node1.isGetterDef());
1523:       assertFalse(node1.isDebugger());
1524:       assertEquals((-1), node1.getCharno());
1525:       assertFalse(node1.isVar());
1526:       assertFalse(node1.isCall());
1527:       assertFalse(node1.isStringKey());
1528:       assertFalse(node1.isAdd());
1529:       assertFalse(node1.isName());
1530:       assertFalse(node1.isBreak());
1531:       assertFalse(node1.isNew());
1532:       assertFalse(node1.isWhile());
1533:       assertEquals(0, node1.getChildCount());
1534:       assertFalse(node1.isComma());
1535:       assertTrue(node1.isThis());
1536:       assertEquals(42, node1.getType());
1537:       assertFalse(node1.isDo());
1538:       assertFalse(node1.isAssignAdd());
1539:       assertFalse(node1.isTrue());
1540:       assertFalse(node1.isNull());
1541:       assertFalse(node1.isOr());
1542:       assertFalse(iterable0.contains(node0));
1543:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1544:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1545:       assertEquals(36, Node.QUOTED_PROP);
1546:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1547:       assertEquals(55, Node.INFERRED_FUNCTION);
1548:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1549:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1550:       assertEquals(29, Node.JSDOC_INFO_PROP);
1551:       assertEquals(53, Node.INPUT_ID);
1552:       assertEquals(32, Node.INCRDECR_PROP);
1553:       assertEquals(4095, Node.COLUMN_MASK);
1554:       assertEquals(12, Node.COLUMN_BITS);
1555:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1556:       assertEquals(56, Node.CHANGE_TIME);
1557:       assertEquals(49, Node.DIRECT_EVAL);
1558:       
1559:       node2.getDirectives();
1560:       assertSame(node0, node2);
1561:       assertSame(node2, node0);
1562:       assertFalse(node0.hasMoreThanOneChild());
1563:       assertFalse(node0.isContinue());
1564:       assertEquals(10, node0.getType());
1565:       assertFalse(node0.isDo());
1566:       assertFalse(node0.isAssignAdd());
1567:       assertEquals((-1), node0.getLineno());
1568:       assertFalse(node0.isTypeOf());
1569:       assertFalse(node0.isWhile());
1570:       assertFalse(node0.isAssign());
1571:       assertFalse(node0.isLabel());
1572:       assertFalse(node0.isReturn());
1573:       assertFalse(node0.isBlock());
1574:       assertFalse(node0.hasChildren());
1575:       assertFalse(node0.isDec());
1576:       assertFalse(node0.isCast());
1577:       assertFalse(node0.isStringKey());
1578:       assertFalse(node0.isLabelName());
1579:       assertFalse(node0.hasOneChild());
1580:       assertFalse(node0.isScript());
1581:       assertFalse(node0.isNumber());
1582:       assertFalse(node0.isParamList());
1583:       assertFalse(node0.isNot());
1584:       assertFalse(node0.isObjectLit());
1585:       assertEquals((-1), node0.getSourcePosition());
1586:       assertFalse(node0.isGetProp());
1587:       assertFalse(node0.isExprResult());
1588:       assertFalse(node0.isDefaultCase());
1589:       assertEquals(0, node0.getChildCount());
1590:       assertFalse(node0.isComma());
1591:       assertFalse(node0.isVar());
1592:       assertFalse(node0.isCall());
1593:       assertFalse(node0.isAdd());
1594:       assertFalse(node0.isEmpty());
1595:       assertFalse(node0.isName());
1596:       assertFalse(node0.isGetElem());
1597:       assertFalse(node0.isBreak());
1598:       assertFalse(node0.isDelProp());
1599:       assertFalse(node0.isVoid());
1600:       assertFalse(node0.isNew());
1601:       assertFalse(node0.isTrue());
1602:       assertFalse(node0.isNull());
1603:       assertFalse(node0.isOr());
1604:       assertFalse(node0.isIn());
1605:       assertFalse(node0.isCase());
1606:       assertFalse(node0.isFor());
1607:       assertFalse(node0.isArrayLit());
1608:       assertFalse(node0.isHook());
1609:       assertFalse(node0.isTry());
1610:       assertFalse(node0.isSwitch());
1611:       assertFalse(node0.isString());
1612:       assertFalse(node0.isGetterDef());
1613:       assertFalse(node0.isDebugger());
1614:       assertEquals((-1), node0.getCharno());
1615:       assertFalse(node0.isAnd());
1616:       assertFalse(node0.isCatch());
1617:       assertFalse(node0.isInstanceOf());
1618:       assertFalse(node0.isRegExp());
1619:       assertFalse(node0.isThis());
1620:       assertFalse(node0.isFunction());
1621:       assertFalse(node0.isWith());
1622:       assertFalse(node0.isFalse());
1623:       assertFalse(node0.isThrow());
1624:       assertFalse(node0.isNE());
1625:       assertFalse(node0.isInc());
1626:       assertFalse(node0.isSetterDef());
1627:       assertFalse(node0.isIf());
1628:       assertFalse(node1.isCast());
1629:       assertFalse(node1.isLabelName());
1630:       assertFalse(node1.isGetElem());
1631:       assertFalse(node1.hasOneChild());
1632:       assertFalse(node1.isTypeOf());
1633:       assertFalse(node1.isExprResult());
1634:       assertFalse(node1.isAssign());
1635:       assertFalse(node1.isLabel());
1636:       assertFalse(node1.isWith());
1637:       assertFalse(node1.isReturn());
1638:       assertFalse(node1.hasChildren());
1639:       assertFalse(node1.isDec());
1640:       assertFalse(node1.isAnd());
1641:       assertFalse(node1.isContinue());
1642:       assertFalse(node1.isGetProp());
1643:       assertFalse(node1.isScript());
1644:       assertFalse(node1.isNumber());
1645:       assertFalse(node1.isNot());
1646:       assertFalse(node1.isObjectLit());
1647:       assertEquals((-1), node1.getSourcePosition());
1648:       assertFalse(node1.isHook());
1649:       assertFalse(node1.isThrow());
1650:       assertFalse(node1.isFalse());
1651:       assertFalse(node1.isBlock());
1652:       assertFalse(node1.hasMoreThanOneChild());
1653:       assertFalse(node1.isIn());
1654:       assertFalse(node1.isCatch());
1655:       assertFalse(node1.isInstanceOf());
1656:       assertEquals((-1), node1.getLineno());
1657:       assertFalse(node1.isNE());
1658:       assertFalse(node1.isInc());
1659:       assertFalse(node1.isSetterDef());
1660:       assertFalse(node1.isIf());
1661:       assertFalse(node1.isArrayLit());
1662:       assertFalse(node1.isTry());
1663:       assertFalse(node1.isEmpty());
1664:       assertFalse(node1.isDelProp());
1665:       assertFalse(node1.isVoid());
1666:       assertFalse(node1.isRegExp());
1667:       assertFalse(node1.isFunction());
1668:       assertFalse(node1.isDefaultCase());
1669:       assertFalse(node1.isFor());
1670:       assertFalse(node1.isCase());
1671:       assertFalse(node1.isSwitch());
1672:       assertFalse(node1.isString());
1673:       assertFalse(node1.isParamList());
1674:       assertFalse(node1.isGetterDef());
1675:       assertFalse(node1.isDebugger());
1676:       assertEquals((-1), node1.getCharno());
1677:       assertFalse(node1.isVar());
1678:       assertFalse(node1.isCall());
1679:       assertFalse(node1.isStringKey());
1680:       assertFalse(node1.isAdd());
1681:       assertFalse(node1.isName());
1682:       assertFalse(node1.isBreak());
1683:       assertFalse(node1.isNew());
1684:       assertFalse(node1.isWhile());
1685:       assertEquals(0, node1.getChildCount());
1686:       assertFalse(node1.isComma());
1687:       assertTrue(node1.isThis());
1688:       assertEquals(42, node1.getType());
1689:       assertFalse(node1.isDo());
1690:       assertFalse(node1.isAssignAdd());
1691:       assertFalse(node1.isTrue());
1692:       assertFalse(node1.isNull());
1693:       assertFalse(node1.isOr());
1694:       assertEquals(10, node2.getType());
1695:       assertFalse(node2.isContinue());
1696:       assertFalse(node2.isWhile());
1697:       assertEquals((-1), node2.getLineno());
1698:       assertFalse(node2.isDo());
1699:       assertFalse(node2.isAssignAdd());
1700:       assertFalse(node2.isNew());
1701:       assertFalse(node2.isAdd());
1702:       assertEquals((-1), node2.getSourcePosition());
1703:       assertFalse(node2.isOr());
1704:       assertFalse(node2.isNumber());
1705:       assertFalse(node2.isCall());
1706:       assertFalse(node2.isGetElem());
1707:       assertFalse(node2.hasOneChild());
1708:       assertFalse(node2.isName());
1709:       assertFalse(node2.isExprResult());
1710:       assertFalse(node2.isReturn());
1711:       assertFalse(node2.isBlock());
1712:       assertFalse(node2.hasChildren());
1713:       assertFalse(node2.isDec());
1714:       assertFalse(node2.isTypeOf());
1715:       assertFalse(node2.isAssign());
1716:       assertFalse(node2.isWith());
1717:       assertFalse(node2.hasMoreThanOneChild());
1718:       assertFalse(node2.isDefaultCase());
1719:       assertFalse(node2.isTrue());
1720:       assertFalse(node2.isParamList());
1721:       assertFalse(node2.isScript());
1722:       assertFalse(node2.isNull());
1723:       assertFalse(node2.isStringKey());
1724:       assertFalse(node2.isArrayLit());
1725:       assertFalse(node2.isEmpty());
1726:       assertFalse(node2.isVar());
1727:       assertFalse(node2.isLabelName());
1728:       assertFalse(node2.isLabel());
1729:       assertEquals(0, node2.getChildCount());
1730:       assertFalse(node2.isCase());
1731:       assertFalse(node2.isSwitch());
1732:       assertEquals((-1), node2.getCharno());
1733:       assertFalse(node2.isNE());
1734:       assertFalse(node2.isInc());
1735:       assertFalse(node2.isString());
1736:       assertFalse(node2.isIn());
1737:       assertFalse(node2.isGetterDef());
1738:       assertFalse(node2.isFor());
1739:       assertFalse(node2.isHook());
1740:       assertFalse(node2.isBreak());
1741:       assertFalse(node2.isDelProp());
1742:       assertFalse(node2.isIf());
1743:       assertFalse(node2.isTry());
1744:       assertFalse(node2.isVoid());
1745:       assertFalse(node2.isComma());
1746:       assertFalse(node2.isThis());
1747:       assertFalse(node2.isInstanceOf());
1748:       assertFalse(node2.isRegExp());
1749:       assertFalse(node2.isObjectLit());
1750:       assertFalse(node2.isAnd());
1751:       assertFalse(node2.isCatch());
1752:       assertFalse(node2.isDebugger());
1753:       assertFalse(node2.isGetProp());
1754:       assertFalse(node2.isSetterDef());
1755:       assertFalse(node2.isNot());
1756:       assertFalse(node2.isCast());
1757:       assertFalse(node2.isThrow());
1758:       assertFalse(node2.isFunction());
1759:       assertFalse(node2.isFalse());
1760:       
1761:       String string0 = node2.checkTreeEquals(node1);
1762:       assertSame(node0, node2);
1763:       assertSame(node2, node0);
1764:       assertEquals("Node tree inequality:\nTree1:\nBITXOR\n\n\nTree2:\nTHIS NT\n\n\nSubtree1: BITXOR\n\n\nSubtree2: THIS NT\n", string0);
1765:       assertFalse(node0.hasMoreThanOneChild());
1766:       assertFalse(node0.isContinue());
1767:       assertEquals(10, node0.getType());
1768:       assertFalse(node0.isDo());
1769:       assertFalse(node0.isAssignAdd());
1770:       assertEquals((-1), node0.getLineno());
1771:       assertFalse(node0.isTypeOf());
1772:       assertFalse(node0.isWhile());
1773:       assertFalse(node0.isAssign());
1774:       assertFalse(node0.isLabel());
1775:       assertFalse(node0.isReturn());
1776:       assertFalse(node0.isBlock());
1777:       assertFalse(node0.hasChildren());
1778:       assertFalse(node0.isDec());
1779:       assertFalse(node0.isCast());
1780:       assertFalse(node0.isStringKey());
1781:       assertFalse(node0.isLabelName());
1782:       assertFalse(node0.hasOneChild());
1783:       assertFalse(node0.isScript());
1784:       assertFalse(node0.isNumber());
1785:       assertFalse(node0.isParamList());
1786:       assertFalse(node0.isNot());
1787:       assertFalse(node0.isObjectLit());
1788:       assertEquals((-1), node0.getSourcePosition());
1789:       assertFalse(node0.isGetProp());
1790:       assertFalse(node0.isExprResult());
1791:       assertFalse(node0.isDefaultCase());
1792:       assertEquals(0, node0.getChildCount());
1793:       assertFalse(node0.isComma());
1794:       assertFalse(node0.isVar());
1795:       assertFalse(node0.isCall());
1796:       assertFalse(node0.isAdd());
1797:       assertFalse(node0.isEmpty());
1798:       assertFalse(node0.isName());
1799:       assertFalse(node0.isGetElem());
1800:       assertFalse(node0.isBreak());
1801:       assertFalse(node0.isDelProp());
1802:       assertFalse(node0.isVoid());
1803:       assertFalse(node0.isNew());
1804:       assertFalse(node0.isTrue());
1805:       assertFalse(node0.isNull());
1806:       assertFalse(node0.isOr());
1807:       assertFalse(node0.isIn());
1808:       assertFalse(node0.isCase());
1809:       assertFalse(node0.isFor());
1810:       assertFalse(node0.isArrayLit());
1811:       assertFalse(node0.isHook());
1812:       assertFalse(node0.isTry());
1813:       assertFalse(node0.isSwitch());
1814:       assertFalse(node0.isString());
1815:       assertFalse(node0.isGetterDef());
1816:       assertFalse(node0.isDebugger());
1817:       assertEquals((-1), node0.getCharno());
1818:       assertFalse(node0.isAnd());
1819:       assertFalse(node0.isCatch());
1820:       assertFalse(node0.isInstanceOf());
1821:       assertFalse(node0.isRegExp());
1822:       assertFalse(node0.isThis());
1823:       assertFalse(node0.isFunction());
1824:       assertFalse(node0.isWith());
1825:       assertFalse(node0.isFalse());
1826:       assertFalse(node0.isThrow());
1827:       assertFalse(node0.isNE());
1828:       assertFalse(node0.isInc());
1829:       assertFalse(node0.isSetterDef());
1830:       assertFalse(node0.isIf());
1831:       assertFalse(node1.isCast());
1832:       assertFalse(node1.isLabelName());
1833:       assertFalse(node1.isGetElem());
1834:       assertFalse(node1.hasOneChild());
1835:       assertFalse(node1.isTypeOf());
1836:       assertFalse(node1.isExprResult());
1837:       assertFalse(node1.isAssign());
1838:       assertFalse(node1.isLabel());
1839:       assertFalse(node1.isWith());
1840:       assertFalse(node1.isReturn());
1841:       assertFalse(node1.hasChildren());
1842:       assertFalse(node1.isDec());
1843:       assertFalse(node1.isAnd());
1844:       assertFalse(node1.isContinue());
1845:       assertFalse(node1.isGetProp());
1846:       assertFalse(node1.isScript());
1847:       assertFalse(node1.isNumber());
1848:       assertFalse(node1.isNot());
1849:       assertFalse(node1.isObjectLit());
1850:       assertEquals((-1), node1.getSourcePosition());
1851:       assertFalse(node1.isHook());
1852:       assertFalse(node1.isThrow());
1853:       assertFalse(node1.isFalse());
1854:       assertFalse(node1.isBlock());
1855:       assertFalse(node1.hasMoreThanOneChild());
1856:       assertFalse(node1.isIn());
1857:       assertFalse(node1.isCatch());
1858:       assertFalse(node1.isInstanceOf());
1859:       assertEquals((-1), node1.getLineno());
1860:       assertFalse(node1.isNE());
1861:       assertFalse(node1.isInc());
1862:       assertFalse(node1.isSetterDef());
1863:       assertFalse(node1.isIf());
1864:       assertFalse(node1.isArrayLit());
1865:       assertFalse(node1.isTry());
1866:       assertFalse(node1.isEmpty());
1867:       assertFalse(node1.isDelProp());
1868:       assertFalse(node1.isVoid());
1869:       assertFalse(node1.isRegExp());
1870:       assertFalse(node1.isFunction());
1871:       assertFalse(node1.isDefaultCase());
1872:       assertFalse(node1.isFor());
1873:       assertFalse(node1.isCase());
1874:       assertFalse(node1.isSwitch());
1875:       assertFalse(node1.isString());
1876:       assertFalse(node1.isParamList());
1877:       assertFalse(node1.isGetterDef());
1878:       assertFalse(node1.isDebugger());
1879:       assertEquals((-1), node1.getCharno());
1880:       assertFalse(node1.isVar());
1881:       assertFalse(node1.isCall());
1882:       assertFalse(node1.isStringKey());
1883:       assertFalse(node1.isAdd());
1884:       assertFalse(node1.isName());
1885:       assertFalse(node1.isBreak());
1886:       assertFalse(node1.isNew());
1887:       assertFalse(node1.isWhile());
1888:       assertEquals(0, node1.getChildCount());
1889:       assertFalse(node1.isComma());
1890:       assertTrue(node1.isThis());
1891:       assertEquals(42, node1.getType());
1892:       assertFalse(node1.isDo());
1893:       assertFalse(node1.isAssignAdd());
1894:       assertFalse(node1.isTrue());
1895:       assertFalse(node1.isNull());
1896:       assertFalse(node1.isOr());
1897:       assertEquals(10, node2.getType());
1898:       assertFalse(node2.isContinue());
1899:       assertFalse(node2.isWhile());
1900:       assertEquals((-1), node2.getLineno());
1901:       assertFalse(node2.isDo());
1902:       assertFalse(node2.isAssignAdd());
1903:       assertFalse(node2.isNew());
1904:       assertFalse(node2.isAdd());
1905:       assertEquals((-1), node2.getSourcePosition());
1906:       assertFalse(node2.isOr());
1907:       assertFalse(node2.isNumber());
1908:       assertFalse(node2.isCall());
1909:       assertFalse(node2.isGetElem());
1910:       assertFalse(node2.hasOneChild());
1911:       assertFalse(node2.isName());
1912:       assertFalse(node2.isExprResult());
1913:       assertFalse(node2.isReturn());
1914:       assertFalse(node2.isBlock());
1915:       assertFalse(node2.hasChildren());
1916:       assertFalse(node2.isDec());
1917:       assertFalse(node2.isTypeOf());
1918:       assertFalse(node2.isAssign());
1919:       assertFalse(node2.isWith());
1920:       assertFalse(node2.hasMoreThanOneChild());
1921:       assertFalse(node2.isDefaultCase());
1922:       assertFalse(node2.isTrue());
1923:       assertFalse(node2.isParamList());
1924:       assertFalse(node2.isScript());
1925:       assertFalse(node2.isNull());
1926:       assertFalse(node2.isStringKey());
1927:       assertFalse(node2.isArrayLit());
1928:       assertFalse(node2.isEmpty());
1929:       assertFalse(node2.isVar());
1930:       assertFalse(node2.isLabelName());
1931:       assertFalse(node2.isLabel());
1932:       assertEquals(0, node2.getChildCount());
1933:       assertFalse(node2.isCase());
1934:       assertFalse(node2.isSwitch());
1935:       assertEquals((-1), node2.getCharno());
1936:       assertFalse(node2.isNE());
1937:       assertFalse(node2.isInc());
1938:       assertFalse(node2.isString());
1939:       assertFalse(node2.isIn());
1940:       assertFalse(node2.isGetterDef());
1941:       assertFalse(node2.isFor());
1942:       assertFalse(node2.isHook());
1943:       assertFalse(node2.isBreak());
1944:       assertFalse(node2.isDelProp());
1945:       assertFalse(node2.isIf());
1946:       assertFalse(node2.isTry());
1947:       assertFalse(node2.isVoid());
1948:       assertFalse(node2.isComma());
1949:       assertFalse(node2.isThis());
1950:       assertFalse(node2.isInstanceOf());
1951:       assertFalse(node2.isRegExp());
1952:       assertFalse(node2.isObjectLit());
1953:       assertFalse(node2.isAnd());
1954:       assertFalse(node2.isCatch());
1955:       assertFalse(node2.isDebugger());
1956:       assertFalse(node2.isGetProp());
1957:       assertFalse(node2.isSetterDef());
1958:       assertFalse(node2.isNot());
1959:       assertFalse(node2.isCast());
1960:       assertFalse(node2.isThrow());
1961:       assertFalse(node2.isFunction());
1962:       assertFalse(node2.isFalse());
1963:       
1964:       node0.getStaticSourceFile();
1965:       assertSame(node0, node2);
1966:       assertFalse(node0.hasMoreThanOneChild());
1967:       assertFalse(node0.isContinue());
1968:       assertEquals(10, node0.getType());
1969:       assertFalse(node0.isDo());
1970:       assertFalse(node0.isAssignAdd());
1971:       assertEquals((-1), node0.getLineno());
1972:       assertFalse(node0.isTypeOf());
1973:       assertFalse(node0.isWhile());
1974:       assertFalse(node0.isAssign());
1975:       assertFalse(node0.isLabel());
1976:       assertFalse(node0.isReturn());
1977:       assertFalse(node0.isBlock());
1978:       assertFalse(node0.hasChildren());
1979:       assertFalse(node0.isDec());
1980:       assertFalse(node0.isCast());
1981:       assertFalse(node0.isStringKey());
1982:       assertFalse(node0.isLabelName());
1983:       assertFalse(node0.hasOneChild());
1984:       assertFalse(node0.isScript());
1985:       assertFalse(node0.isNumber());
1986:       assertFalse(node0.isParamList());
1987:       assertFalse(node0.isNot());
1988:       assertFalse(node0.isObjectLit());
1989:       assertEquals((-1), node0.getSourcePosition());
1990:       assertFalse(node0.isGetProp());
1991:       assertFalse(node0.isExprResult());
1992:       assertFalse(node0.isDefaultCase());
1993:       assertEquals(0, node0.getChildCount());
1994:       assertFalse(node0.isComma());
1995:       assertFalse(node0.isVar());
1996:       assertFalse(node0.isCall());
1997:       assertFalse(node0.isAdd());
1998:       assertFalse(node0.isEmpty());
1999:       assertFalse(node0.isName());
2000:       assertFalse(node0.isGetElem());
2001:       assertFalse(node0.isBreak());
2002:       assertFalse(node0.isDelProp());
2003:       assertFalse(node0.isVoid());
2004:       assertFalse(node0.isNew());
2005:       assertFalse(node0.isTrue());
2006:       assertFalse(node0.isNull());
2007:       assertFalse(node0.isOr());
2008:       assertFalse(node0.isIn());
2009:       assertFalse(node0.isCase());
2010:       assertFalse(node0.isFor());
2011:       assertFalse(node0.isArrayLit());
2012:       assertFalse(node0.isHook());
2013:       assertFalse(node0.isTry());
2014:       assertFalse(node0.isSwitch());
2015:       assertFalse(node0.isString());
2016:       assertFalse(node0.isGetterDef());
2017:       assertFalse(node0.isDebugger());
2018:       assertEquals((-1), node0.getCharno());
2019:       assertFalse(node0.isAnd());
2020:       assertFalse(node0.isCatch());
2021:       assertFalse(node0.isInstanceOf());
2022:       assertFalse(node0.isRegExp());
2023:       assertFalse(node0.isThis());
2024:       assertFalse(node0.isFunction());
2025:       assertFalse(node0.isWith());
2026:       assertFalse(node0.isFalse());
2027:       assertFalse(node0.isThrow());
2028:       assertFalse(node0.isNE());
2029:       assertFalse(node0.isInc());
2030:       assertFalse(node0.isSetterDef());
2031:       assertFalse(node0.isIf());
2032:       
2033:       node1.getSourceFileName();
2034:       assertFalse(node1.isCast());
2035:       assertFalse(node1.isLabelName());
2036:       assertFalse(node1.isGetElem());
2037:       assertFalse(node1.hasOneChild());
2038:       assertFalse(node1.isTypeOf());
2039:       assertFalse(node1.isExprResult());
2040:       assertFalse(node1.isAssign());
2041:       assertFalse(node1.isLabel());
2042:       assertFalse(node1.isWith());
2043:       assertFalse(node1.isReturn());
2044:       assertFalse(node1.hasChildren());
2045:       assertFalse(node1.isDec());
2046:       assertFalse(node1.isAnd());
2047:       assertFalse(node1.isContinue());
2048:       assertFalse(node1.isGetProp());
2049:       assertFalse(node1.isScript());
2050:       assertFalse(node1.isNumber());
2051:       assertFalse(node1.isNot());
2052:       assertFalse(node1.isObjectLit());
2053:       assertEquals((-1), node1.getSourcePosition());
2054:       assertFalse(node1.isHook());
2055:       assertFalse(node1.isThrow());
2056:       assertFalse(node1.isFalse());
2057:       assertFalse(node1.isBlock());
2058:       assertFalse(node1.hasMoreThanOneChild());
2059:       assertFalse(node1.isIn());
2060:       assertFalse(node1.isCatch());
2061:       assertFalse(node1.isInstanceOf());
2062:       assertEquals((-1), node1.getLineno());
2063:       assertFalse(node1.isNE());
2064:       assertFalse(node1.isInc());
2065:       assertFalse(node1.isSetterDef());
2066:       assertFalse(node1.isIf());
2067:       assertFalse(node1.isArrayLit());
2068:       assertFalse(node1.isTry());
2069:       assertFalse(node1.isEmpty());
2070:       assertFalse(node1.isDelProp());
2071:       assertFalse(node1.isVoid());
2072:       assertFalse(node1.isRegExp());
2073:       assertFalse(node1.isFunction());
2074:       assertFalse(node1.isDefaultCase());
2075:       assertFalse(node1.isFor());
2076:       assertFalse(node1.isCase());
2077:       assertFalse(node1.isSwitch());
2078:       assertFalse(node1.isString());
2079:       assertFalse(node1.isParamList());
2080:       assertFalse(node1.isGetterDef());
2081:       assertFalse(node1.isDebugger());
2082:       assertEquals((-1), node1.getCharno());
2083:       assertFalse(node1.isVar());
2084:       assertFalse(node1.isCall());
2085:       assertFalse(node1.isStringKey());
2086:       assertFalse(node1.isAdd());
2087:       assertFalse(node1.isName());
2088:       assertFalse(node1.isBreak());
2089:       assertFalse(node1.isNew());
2090:       assertFalse(node1.isWhile());
2091:       assertEquals(0, node1.getChildCount());
2092:       assertFalse(node1.isComma());
2093:       assertTrue(node1.isThis());
2094:       assertEquals(42, node1.getType());
2095:       assertFalse(node1.isDo());
2096:       assertFalse(node1.isAssignAdd());
2097:       assertFalse(node1.isTrue());
2098:       assertFalse(node1.isNull());
2099:       assertFalse(node1.isOr());
2100:       
2101:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
2102:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
2103:       assertEquals(52, node_SideEffectFlags0.valueOf());
2104:       
2105:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
2106:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2107:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2108:       assertEquals(0, node_SideEffectFlags0.valueOf());
2109:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2110:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
2111:       assertEquals(0, node_SideEffectFlags1.valueOf());
2112:       
2113:       Node node3 = node0.srcref(node1);
2114:       assertSame(node0, node3);
2115:       assertSame(node0, node2);
2116:       assertSame(node3, node0);
2117:       assertSame(node3, node2);
2118:       assertFalse(node0.hasMoreThanOneChild());
2119:       assertFalse(node0.isContinue());
2120:       assertEquals(10, node0.getType());
2121:       assertFalse(node0.isDo());
2122:       assertFalse(node0.isAssignAdd());
2123:       assertEquals((-1), node0.getLineno());
2124:       assertFalse(node0.isTypeOf());
2125:       assertFalse(node0.isWhile());
2126:       assertFalse(node0.isAssign());
2127:       assertFalse(node0.isLabel());
2128:       assertFalse(node0.isReturn());
2129:       assertFalse(node0.isBlock());
2130:       assertFalse(node0.hasChildren());
2131:       assertFalse(node0.isDec());
2132:       assertFalse(node0.isCast());
2133:       assertFalse(node0.isStringKey());
2134:       assertFalse(node0.isLabelName());
2135:       assertFalse(node0.hasOneChild());
2136:       assertFalse(node0.isScript());
2137:       assertFalse(node0.isNumber());
2138:       assertFalse(node0.isParamList());
2139:       assertFalse(node0.isNot());
2140:       assertFalse(node0.isObjectLit());
2141:       assertEquals((-1), node0.getSourcePosition());
2142:       assertFalse(node0.isGetProp());
2143:       assertFalse(node0.isExprResult());
2144:       assertFalse(node0.isDefaultCase());
2145:       assertEquals(0, node0.getChildCount());
2146:       assertFalse(node0.isComma());
2147:       assertFalse(node0.isVar());
2148:       assertFalse(node0.isCall());
2149:       assertFalse(node0.isAdd());
2150:       assertFalse(node0.isEmpty());
2151:       assertFalse(node0.isName());
2152:       assertFalse(node0.isGetElem());
2153:       assertFalse(node0.isBreak());
2154:       assertFalse(node0.isDelProp());
2155:       assertFalse(node0.isVoid());
2156:       assertFalse(node0.isNew());
2157:       assertFalse(node0.isTrue());
2158:       assertFalse(node0.isNull());
2159:       assertFalse(node0.isOr());
2160:       assertFalse(node0.isIn());
2161:       assertFalse(node0.isCase());
2162:       assertFalse(node0.isFor());
2163:       assertFalse(node0.isArrayLit());
2164:       assertFalse(node0.isHook());
2165:       assertFalse(node0.isTry());
2166:       assertFalse(node0.isSwitch());
2167:       assertFalse(node0.isString());
2168:       assertFalse(node0.isGetterDef());
2169:       assertFalse(node0.isDebugger());
2170:       assertEquals((-1), node0.getCharno());
2171:       assertFalse(node0.isAnd());
2172:       assertFalse(node0.isCatch());
2173:       assertFalse(node0.isInstanceOf());
2174:       assertFalse(node0.isRegExp());
2175:       assertFalse(node0.isThis());
2176:       assertFalse(node0.isFunction());
2177:       assertFalse(node0.isWith());
2178:       assertFalse(node0.isFalse());
2179:       assertFalse(node0.isThrow());
2180:       assertFalse(node0.isNE());
2181:       assertFalse(node0.isInc());
2182:       assertFalse(node0.isSetterDef());
2183:       assertFalse(node0.isIf());
2184:       assertFalse(node1.isCast());
2185:       assertFalse(node1.isLabelName());
2186:       assertFalse(node1.isGetElem());
2187:       assertFalse(node1.hasOneChild());
2188:       assertFalse(node1.isTypeOf());
2189:       assertFalse(node1.isExprResult());
2190:       assertFalse(node1.isAssign());
2191:       assertFalse(node1.isLabel());
2192:       assertFalse(node1.isWith());
2193:       assertFalse(node1.isReturn());
2194:       assertFalse(node1.hasChildren());
2195:       assertFalse(node1.isDec());
2196:       assertFalse(node1.isAnd());
2197:       assertFalse(node1.isContinue());
2198:       assertFalse(node1.isGetProp());
2199:       assertFalse(node1.isScript());
2200:       assertFalse(node1.isNumber());
2201:       assertFalse(node1.isNot());
2202:       assertFalse(node1.isObjectLit());
2203:       assertEquals((-1), node1.getSourcePosition());
2204:       assertFalse(node1.isHook());
2205:       assertFalse(node1.isThrow());
2206:       assertFalse(node1.isFalse());
2207:       assertFalse(node1.isBlock());
2208:       assertFalse(node1.hasMoreThanOneChild());
2209:       assertFalse(node1.isIn());
2210:       assertFalse(node1.isCatch());
2211:       assertFalse(node1.isInstanceOf());
2212:       assertEquals((-1), node1.getLineno());
2213:       assertFalse(node1.isNE());
2214:       assertFalse(node1.isInc());
2215:       assertFalse(node1.isSetterDef());
2216:       assertFalse(node1.isIf());
2217:       assertFalse(node1.isArrayLit());
2218:       assertFalse(node1.isTry());
2219:       assertFalse(node1.isEmpty());
2220:       assertFalse(node1.isDelProp());
2221:       assertFalse(node1.isVoid());
2222:       assertFalse(node1.isRegExp());
2223:       assertFalse(node1.isFunction());
2224:       assertFalse(node1.isDefaultCase());
2225:       assertFalse(node1.isFor());
2226:       assertFalse(node1.isCase());
2227:       assertFalse(node1.isSwitch());
2228:       assertFalse(node1.isString());
2229:       assertFalse(node1.isParamList());
2230:       assertFalse(node1.isGetterDef());
2231:       assertFalse(node1.isDebugger());
2232:       assertEquals((-1), node1.getCharno());
2233:       assertFalse(node1.isVar());
2234:       assertFalse(node1.isCall());
2235:       assertFalse(node1.isStringKey());
2236:       assertFalse(node1.isAdd());
2237:       assertFalse(node1.isName());
2238:       assertFalse(node1.isBreak());
2239:       assertFalse(node1.isNew());
2240:       assertFalse(node1.isWhile());
2241:       assertEquals(0, node1.getChildCount());
2242:       assertFalse(node1.isComma());
2243:       assertTrue(node1.isThis());
2244:       assertEquals(42, node1.getType());
2245:       assertFalse(node1.isDo());
2246:       assertFalse(node1.isAssignAdd());
2247:       assertFalse(node1.isTrue());
2248:       assertFalse(node1.isNull());
2249:       assertFalse(node1.isOr());
2250:       assertFalse(node3.isAdd());
2251:       assertFalse(node3.isBlock());
2252:       assertFalse(node3.isCall());
2253:       assertFalse(node3.isNew());
2254:       assertFalse(node3.isDo());
2255:       assertEquals(10, node3.getType());
2256:       assertFalse(node3.isWhile());
2257:       assertFalse(node3.isContinue());
2258:       assertFalse(node3.hasMoreThanOneChild());
2259:       assertFalse(node3.isVar());
2260:       assertFalse(node3.isOr());
2261:       assertFalse(node3.isAssignAdd());
2262:       assertFalse(node3.isCatch());
2263:       assertFalse(node3.isSetterDef());
2264:       assertEquals((-1), node3.getLineno());
2265:       assertFalse(node3.isName());
2266:       assertFalse(node3.isTrue());
2267:       assertFalse(node3.isNull());
2268:       assertFalse(node3.isCast());
2269:       assertFalse(node3.isExprResult());
2270:       assertFalse(node3.isVoid());
2271:       assertFalse(node3.isAssign());
2272:       assertFalse(node3.isGetElem());
2273:       assertFalse(node3.isFunction());
2274:       assertFalse(node3.isTypeOf());
2275:       assertFalse(node3.hasChildren());
2276:       assertFalse(node3.isDec());
2277:       assertFalse(node3.isReturn());
2278:       assertFalse(node3.isGetProp());
2279:       assertFalse(node3.isNot());
2280:       assertFalse(node3.isString());
2281:       assertFalse(node3.isAnd());
2282:       assertFalse(node3.isObjectLit());
2283:       assertFalse(node3.isDebugger());
2284:       assertEquals((-1), node3.getSourcePosition());
2285:       assertFalse(node3.isSwitch());
2286:       assertFalse(node3.isInc());
2287:       assertFalse(node3.isFalse());
2288:       assertFalse(node3.isThrow());
2289:       assertFalse(node3.isComma());
2290:       assertFalse(node3.isThis());
2291:       assertFalse(node3.isHook());
2292:       assertFalse(node3.isIn());
2293:       assertFalse(node3.isInstanceOf());
2294:       assertFalse(node3.isBreak());
2295:       assertFalse(node3.isDelProp());
2296:       assertFalse(node3.isEmpty());
2297:       assertFalse(node3.isIf());
2298:       assertFalse(node3.isNE());
2299:       assertFalse(node3.isTry());
2300:       assertFalse(node3.isScript());
2301:       assertFalse(node3.hasOneChild());
2302:       assertFalse(node3.isArrayLit());
2303:       assertFalse(node3.isWith());
2304:       assertFalse(node3.isFor());
2305:       assertFalse(node3.isDefaultCase());
2306:       assertFalse(node3.isRegExp());
2307:       assertEquals(0, node3.getChildCount());
2308:       assertFalse(node3.isLabel());
2309:       assertFalse(node3.isParamList());
2310:       assertFalse(node3.isCase());
2311:       assertFalse(node3.isLabelName());
2312:       assertFalse(node3.isGetterDef());
2313:       assertFalse(node3.isStringKey());
2314:       assertFalse(node3.isNumber());
2315:       assertEquals((-1), node3.getCharno());
2316:       
2317:       boolean boolean4 = node2.getBooleanProp(42);
2318:       assertSame(node0, node3);
2319:       assertSame(node0, node2);
2320:       assertSame(node2, node0);
2321:       assertSame(node2, node3);
2322:       assertFalse(boolean4);
2323:       assertFalse(node0.hasMoreThanOneChild());
2324:       assertFalse(node0.isContinue());
2325:       assertEquals(10, node0.getType());
2326:       assertFalse(node0.isDo());
2327:       assertFalse(node0.isAssignAdd());
2328:       assertEquals((-1), node0.getLineno());
2329:       assertFalse(node0.isTypeOf());
2330:       assertFalse(node0.isWhile());
2331:       assertFalse(node0.isAssign());
2332:       assertFalse(node0.isLabel());
2333:       assertFalse(node0.isReturn());
2334:       assertFalse(node0.isBlock());
2335:       assertFalse(node0.hasChildren());
2336:       assertFalse(node0.isDec());
2337:       assertFalse(node0.isCast());
2338:       assertFalse(node0.isStringKey());
2339:       assertFalse(node0.isLabelName());
2340:       assertFalse(node0.hasOneChild());
2341:       assertFalse(node0.isScript());
2342:       assertFalse(node0.isNumber());
2343:       assertFalse(node0.isParamList());
2344:       assertFalse(node0.isNot());
2345:       assertFalse(node0.isObjectLit());
2346:       assertEquals((-1), node0.getSourcePosition());
2347:       assertFalse(node0.isGetProp());
2348:       assertFalse(node0.isExprResult());
2349:       assertFalse(node0.isDefaultCase());
2350:       assertEquals(0, node0.getChildCount());
2351:       assertFalse(node0.isComma());
2352:       assertFalse(node0.isVar());
2353:       assertFalse(node0.isCall());
2354:       assertFalse(node0.isAdd());
2355:       assertFalse(node0.isEmpty());
2356:       assertFalse(node0.isName());
2357:       assertFalse(node0.isGetElem());
2358:       assertFalse(node0.isBreak());
2359:       assertFalse(node0.isDelProp());
2360:       assertFalse(node0.isVoid());
2361:       assertFalse(node0.isNew());
2362:       assertFalse(node0.isTrue());
2363:       assertFalse(node0.isNull());
2364:       assertFalse(node0.isOr());
2365:       assertFalse(node0.isIn());
2366:       assertFalse(node0.isCase());
2367:       assertFalse(node0.isFor());
2368:       assertFalse(node0.isArrayLit());
2369:       assertFalse(node0.isHook());
2370:       assertFalse(node0.isTry());
2371:       assertFalse(node0.isSwitch());
2372:       assertFalse(node0.isString());
2373:       assertFalse(node0.isGetterDef());
2374:       assertFalse(node0.isDebugger());
2375:       assertEquals((-1), node0.getCharno());
2376:       assertFalse(node0.isAnd());
2377:       assertFalse(node0.isCatch());
2378:       assertFalse(node0.isInstanceOf());
2379:       assertFalse(node0.isRegExp());
2380:       assertFalse(node0.isThis());
2381:       assertFalse(node0.isFunction());
2382:       assertFalse(node0.isWith());
2383:       assertFalse(node0.isFalse());
2384:       assertFalse(node0.isThrow());
2385:       assertFalse(node0.isNE());
2386:       assertFalse(node0.isInc());
2387:       assertFalse(node0.isSetterDef());
2388:       assertFalse(node0.isIf());
2389:       assertFalse(node1.isCast());
2390:       assertFalse(node1.isLabelName());
2391:       assertFalse(node1.isGetElem());
2392:       assertFalse(node1.hasOneChild());
2393:       assertFalse(node1.isTypeOf());
2394:       assertFalse(node1.isExprResult());
2395:       assertFalse(node1.isAssign());
2396:       assertFalse(node1.isLabel());
2397:       assertFalse(node1.isWith());
2398:       assertFalse(node1.isReturn());
2399:       assertFalse(node1.hasChildren());
2400:       assertFalse(node1.isDec());
2401:       assertFalse(node1.isAnd());
2402:       assertFalse(node1.isContinue());
2403:       assertFalse(node1.isGetProp());
2404:       assertFalse(node1.isScript());
2405:       assertFalse(node1.isNumber());
2406:       assertFalse(node1.isNot());
2407:       assertFalse(node1.isObjectLit());
2408:       assertEquals((-1), node1.getSourcePosition());
2409:       assertFalse(node1.isHook());
2410:       assertFalse(node1.isThrow());
2411:       assertFalse(node1.isFalse());
2412:       assertFalse(node1.isBlock());
2413:       assertFalse(node1.hasMoreThanOneChild());
2414:       assertFalse(node1.isIn());
2415:       assertFalse(node1.isCatch());
2416:       assertFalse(node1.isInstanceOf());
2417:       assertEquals((-1), node1.getLineno());
2418:       assertFalse(node1.isNE());
2419:       assertFalse(node1.isInc());
2420:       assertFalse(node1.isSetterDef());
2421:       assertFalse(node1.isIf());
2422:       assertFalse(node1.isArrayLit());
2423:       assertFalse(node1.isTry());
2424:       assertFalse(node1.isEmpty());
2425:       assertFalse(node1.isDelProp());
2426:       assertFalse(node1.isVoid());
2427:       assertFalse(node1.isRegExp());
2428:       assertFalse(node1.isFunction());
2429:       assertFalse(node1.isDefaultCase());
2430:       assertFalse(node1.isFor());
2431:       assertFalse(node1.isCase());
2432:       assertFalse(node1.isSwitch());
2433:       assertFalse(node1.isString());
2434:       assertFalse(node1.isParamList());
2435:       assertFalse(node1.isGetterDef());
2436:       assertFalse(node1.isDebugger());
2437:       assertEquals((-1), node1.getCharno());
2438:       assertFalse(node1.isVar());
2439:       assertFalse(node1.isCall());
2440:       assertFalse(node1.isStringKey());
2441:       assertFalse(node1.isAdd());
2442:       assertFalse(node1.isName());
2443:       assertFalse(node1.isBreak());
2444:       assertFalse(node1.isNew());
2445:       assertFalse(node1.isWhile());
2446:       assertEquals(0, node1.getChildCount());
2447:       assertFalse(node1.isComma());
2448:       assertTrue(node1.isThis());
2449:       assertEquals(42, node1.getType());
2450:       assertFalse(node1.isDo());
2451:       assertFalse(node1.isAssignAdd());
2452:       assertFalse(node1.isTrue());
2453:       assertFalse(node1.isNull());
2454:       assertFalse(node1.isOr());
2455:       assertEquals(10, node2.getType());
2456:       assertFalse(node2.isContinue());
2457:       assertFalse(node2.isWhile());
2458:       assertEquals((-1), node2.getLineno());
2459:       assertFalse(node2.isDo());
2460:       assertFalse(node2.isAssignAdd());
2461:       assertFalse(node2.isNew());
2462:       assertFalse(node2.isAdd());
2463:       assertEquals((-1), node2.getSourcePosition());
2464:       assertFalse(node2.isOr());
2465:       assertFalse(node2.isNumber());
2466:       assertFalse(node2.isCall());
2467:       assertFalse(node2.isGetElem());
2468:       assertFalse(node2.hasOneChild());
2469:       assertFalse(node2.isName());
2470:       assertFalse(node2.isExprResult());
2471:       assertFalse(node2.isReturn());
2472:       assertFalse(node2.isBlock());
2473:       assertFalse(node2.hasChildren());
2474:       assertFalse(node2.isDec());
2475:       assertFalse(node2.isTypeOf());
2476:       assertFalse(node2.isAssign());
2477:       assertFalse(node2.isWith());
2478:       assertFalse(node2.hasMoreThanOneChild());
2479:       assertFalse(node2.isDefaultCase());
2480:       assertFalse(node2.isTrue());
2481:       assertFalse(node2.isParamList());
2482:       assertFalse(node2.isScript());
2483:       assertFalse(node2.isNull());
2484:       assertFalse(node2.isStringKey());
2485:       assertFalse(node2.isArrayLit());
2486:       assertFalse(node2.isEmpty());
2487:       assertFalse(node2.isVar());
2488:       assertFalse(node2.isLabelName());
2489:       assertFalse(node2.isLabel());
2490:       assertEquals(0, node2.getChildCount());
2491:       assertFalse(node2.isCase());
2492:       assertFalse(node2.isSwitch());
2493:       assertEquals((-1), node2.getCharno());
2494:       assertFalse(node2.isNE());
2495:       assertFalse(node2.isInc());
2496:       assertFalse(node2.isString());
2497:       assertFalse(node2.isIn());
2498:       assertFalse(node2.isGetterDef());
2499:       assertFalse(node2.isFor());
2500:       assertFalse(node2.isHook());
2501:       assertFalse(node2.isBreak());
2502:       assertFalse(node2.isDelProp());
2503:       assertFalse(node2.isIf());
2504:       assertFalse(node2.isTry());
2505:       assertFalse(node2.isVoid());
2506:       assertFalse(node2.isComma());
2507:       assertFalse(node2.isThis());
2508:       assertFalse(node2.isInstanceOf());
2509:       assertFalse(node2.isRegExp());
2510:       assertFalse(node2.isObjectLit());
2511:       assertFalse(node2.isAnd());
2512:       assertFalse(node2.isCatch());
2513:       assertFalse(node2.isDebugger());
2514:       assertFalse(node2.isGetProp());
2515:       assertFalse(node2.isSetterDef());
2516:       assertFalse(node2.isNot());
2517:       assertFalse(node2.isCast());
2518:       assertFalse(node2.isThrow());
2519:       assertFalse(node2.isFunction());
2520:       assertFalse(node2.isFalse());
2521:       
2522:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
2523:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
2524:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
2525:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2526:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2527:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2528:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
2529:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
2530:       assertEquals(0, node_SideEffectFlags2.valueOf());
2531:       assertEquals(0, node_SideEffectFlags0.valueOf());
2532:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2533:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
2534:       assertEquals(0, node_SideEffectFlags1.valueOf());
2535:       
2536:       int int0 = Node.mergeLineCharNo(51, 46);
2537:       assertEquals(208942, int0);
2538:   }
2539: }
RegularFileObject[/tmp/EvoSuite_88_1628255815613/com/google/javascript/rhino/Node_88_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:56 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_88_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_88_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_88_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.SimpleErrorReporter",
266:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
267:       "com.google.common.base.Joiner",
268:       "com.google.common.base.Preconditions",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.Token",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.base.Objects",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.common.collect.Sets",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.javascript.rhino.InputId",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.AbstractIndexedListIterator",
349:       "com.google.common.collect.Iterators$11",
350:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
351:       "com.google.javascript.rhino.jstype.TemplatizedType",
352:       "com.google.javascript.rhino.jstype.NamedType",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableList$1",
355:       "com.google.common.collect.Platform",
356:       "com.google.javascript.rhino.JSTypeExpression",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 13:16:56.383 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(10);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(10, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
assertFalse(boolean0);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(10, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node1 = Node.newString(42, "NT", (-96), 54);
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertTrue(node1.isThis());
assertEquals(42, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

node1.setOptionalArg(false);
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertTrue(node1.isThis());
assertEquals(42, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node2 = node0.srcrefTree(node1);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(10, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertTrue(node1.isThis());
assertEquals(42, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertEquals(10, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isScript());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNot());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

boolean boolean1 = node0.mayMutateGlobalStateOrThrow();
assertSame(node0, node2);
assertTrue(boolean1);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(10, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean2 = node2.isCall();
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(boolean2);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(10, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertTrue(node1.isThis());
assertEquals(42, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertEquals(10, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isScript());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNot());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

boolean boolean3 = node2.isCast();
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(boolean3);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(10, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertTrue(node1.isThis());
assertEquals(42, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertEquals(10, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isScript());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNot());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertTrue(node1.isThis());
assertEquals(42, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(iterable0.contains(node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);

node2.getDirectives();
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(10, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertTrue(node1.isThis());
assertEquals(42, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertEquals(10, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isScript());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNot());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());

String string0 = node2.checkTreeEquals(node1);
assertSame(node0, node2);
assertSame(node2, node0);
assertEquals("Node tree inequality:\nTree1:\nBITXOR\n\n\nTree2:\nTHIS NT\n\n\nSubtree1: BITXOR\n\n\nSubtree2: THIS NT\n", string0);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(10, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertTrue(node1.isThis());
assertEquals(42, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertEquals(10, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isScript());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNot());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());

node0.getStaticSourceFile();
assertSame(node0, node2);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(10, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());

node1.getSourceFileName();
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertTrue(node1.isThis());
assertEquals(42, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isOr());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(52, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());

Node node3 = node0.srcref(node1);
assertSame(node0, node3);
assertSame(node0, node2);
assertSame(node3, node0);
assertSame(node3, node2);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(10, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertTrue(node1.isThis());
assertEquals(42, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isCall());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertEquals(10, node3.getType());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isVar());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isCatch());
assertFalse(node3.isSetterDef());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isName());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isCast());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.isAssign());
assertFalse(node3.isGetElem());
assertFalse(node3.isFunction());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertFalse(node3.isNot());
assertFalse(node3.isString());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isEmpty());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isArrayLit());
assertFalse(node3.isWith());
assertFalse(node3.isFor());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isParamList());
assertFalse(node3.isCase());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getCharno());

boolean boolean4 = node2.getBooleanProp(42);
assertSame(node0, node3);
assertSame(node0, node2);
assertSame(node2, node0);
assertSame(node2, node3);
assertFalse(boolean4);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(10, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertTrue(node1.isThis());
assertEquals(42, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertEquals(10, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isScript());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNot());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());

int int0 = Node.mergeLineCharNo(51, 46);
assertEquals(208942, int0);


[MASTER] 13:17:30.184 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:30.529 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:30.946 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:31.252 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:31.554 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:32.030 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:32.328 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:32.676 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:33.178 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:33.553 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:34.021 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:34.302 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:34.569 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:34.875 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:35.131 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:35.417 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:35.653 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:37.365 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-100/tests/14
* Done!

* Computation finished
