* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 18684
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3674022522
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 12:59:50.577 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 12:59:52.263 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 13:02:39.974 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 918,0,0| Number of FF evals: 613
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - true: 207,0,0| Number of FF evals: 754
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 44,0,0| Number of FF evals: 58
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 1053,0,0| Number of FF evals: 1008
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 128,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 128,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 33678,28194,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 128,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 918,0,0| Number of FF evals: 781
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 128,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 128,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 3904,2193,0| Number of FF evals: 10051
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 207,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 12,0,0| Number of FF evals: 670
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 921,0,0| Number of FF evals: 1157
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 1603,0,0| Number of FF evals: 983
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 1459,200,0| Number of FF evals: 4759
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - true: 555,0,0| Number of FF evals: 650
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 679,546,63| Number of FF evals: 8593
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 262,0,0| Number of FF evals: 1047
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 371,0,0| Number of FF evals: 755
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 128,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 128,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 3374,635,0| Number of FF evals: 2560
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 1473,237,0| Number of FF evals: 2183
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 566,0,0| Number of FF evals: 529
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 1234,115,0| Number of FF evals: 2082
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 5223,1806,0| Number of FF evals: 4974
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 207,0,0| Number of FF evals: 147
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 8,0,0| Number of FF evals: 662
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 1757,0,0| Number of FF evals: 926
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 1053,0,0| Number of FF evals: 1042
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 44,0,0| Number of FF evals: 69
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 1460,75,0| Number of FF evals: 2704
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 15,0,0| Number of FF evals: 893
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 44,0,0| Number of FF evals: 69
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 472,0,0| Number of FF evals: 646
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChangeTime()I: root-Branch: 472,0,0| Number of FF evals: 1172
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 3106,1676,0| Number of FF evals: 6117
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 74,0,0| Number of FF evals: 373
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 1053,0,0| Number of FF evals: 797
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 207,0,0| Number of FF evals: 1013
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 1235,914,423| Number of FF evals: 5736
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 2407,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 1847,0,0| Number of FF evals: 1288
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 610,0,0| Number of FF evals: 518
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 960,0,0| Number of FF evals: 1387
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 588: 207,0,0| Number of FF evals: 144
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 472,0,0| Number of FF evals: 879
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 1774,0,0| Number of FF evals: 992
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 8459,7580,22| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - true: 128,0,0| Number of FF evals: 686
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 592: 207,0,0| Number of FF evals: 144
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: Line 1123: 472,0,0| Number of FF evals: 262
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 4347,3061,160| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - false: 128,0,0| Number of FF evals: 790
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 895,0,0| Number of FF evals: 1558
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 4094,1145,0| Number of FF evals: 2846
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 5424,3390,0| Number of FF evals: 15736
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 207,0,0| Number of FF evals: 382
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 3493,3237,432| Number of FF evals: 17456
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 472,0,0| Number of FF evals: 717
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 207,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 195,0,0| Number of FF evals: 251
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mergeLineCharNo(II)I: I15 Branch 141 IFEQ L1197 - false: 347,0,0| Number of FF evals: 598
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 1683,46,0| Number of FF evals: 2232
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: Line 1847: 207,0,0| Number of FF evals: 123
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: Line 1323: 44,0,0| Number of FF evals: 77
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 372,0,0| Number of FF evals: 500
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 678,0,0| Number of FF evals: 751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 1333,0,0| Number of FF evals: 953
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 1361,359,0| Number of FF evals: 2303
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 2616,1380,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 17907,16249,176| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 288,0,0| Number of FF evals: 757
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 272,0,0| Number of FF evals: 306
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 1053,0,0| Number of FF evals: 583
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 44,0,0| Number of FF evals: 172
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 1004,87,0| Number of FF evals: 3060
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 767,555,58| Number of FF evals: 7955
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: root-Branch: 44,0,0| Number of FF evals: 555
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 1627,362,2| Number of FF evals: 6862
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 128,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 1053,0,0| Number of FF evals: 453
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 1053,0,0| Number of FF evals: 1027
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 2152,1923,0| Number of FF evals: 5892
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 17464,17048,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 4256,4089,2191| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1356: 44,0,0| Number of FF evals: 77
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 128,0,0| Number of FF evals: 589
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 75165,67052,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: root-Branch: 207,0,0| Number of FF evals: 422
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: root-Branch: 1320,0,0| Number of FF evals: 563
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 75165,67052,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 272,0,0| Number of FF evals: 304
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 272,0,0| Number of FF evals: 303
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 4269,3004,89| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 207,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 207,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 1853,0,0| Number of FF evals: 1627
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 472,0,0| Number of FF evals: 249
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 3190,2912,106| Number of FF evals: 14838
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 44,0,0| Number of FF evals: 967
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 1053,0,0| Number of FF evals: 1042
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 14673,12580,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 399,0,0| Number of FF evals: 1195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1358: 44,0,0| Number of FF evals: 77
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1357: 44,0,0| Number of FF evals: 77
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 347,0,0| Number of FF evals: 602
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 566,0,0| Number of FF evals: 296
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 918,0,0| Number of FF evals: 753
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 566,0,0| Number of FF evals: 296
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 6215,4571,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 566,0,0| Number of FF evals: 296
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 1603,0,0| Number of FF evals: 593
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 1578,0,0| Number of FF evals: 692
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 3309,2801,202| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 2578,0,0| Number of FF evals: 1213
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 640: 1180,0,0| Number of FF evals: 505
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 18702,14159,0| Number of FF evals: 8145
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 10867,8824,0| Number of FF evals: 16843
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 1578,0,0| Number of FF evals: 692
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 25345,17232,0| Number of FF evals: 5441
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 207,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 7229,5990,41| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 207,0,0| Number of FF evals: 1939
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 10060,7227,506| Number of FF evals: 18029
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - false: 566,0,0| Number of FF evals: 535
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 22536,17558,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 472,0,0| Number of FF evals: 1443
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 2363,250,0| Number of FF evals: 3196
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 75165,67052,47884| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 75165,67052,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 566,0,0| Number of FF evals: 277
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 3685,852,0| Number of FF evals: 2680
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 75165,67052,48154| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 4347,3061,160| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 492: 62,0,0| Number of FF evals: 356
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 918,0,0| Number of FF evals: 665
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 4251,2986,23| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - false: 33,0,0| Number of FF evals: 517
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 1903,277,0| Number of FF evals: 2233
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: root-Branch: 128,0,0| Number of FF evals: 1314
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 420,0,0| Number of FF evals: 1072
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 3774,2515,10| Number of FF evals: 17100
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - true: 296,0,0| Number of FF evals: 1156
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 1053,0,0| Number of FF evals: 1042
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 2185,548,0| Number of FF evals: 4647
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 494: 62,0,0| Number of FF evals: 356
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 1053,0,0| Number of FF evals: 1042
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 565,0,0| Number of FF evals: 710
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 1180,0,0| Number of FF evals: 1231
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 472,0,0| Number of FF evals: 545
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 296,0,0| Number of FF evals: 193
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 485,0,0| Number of FF evals: 949
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: Line 1344: 44,0,0| Number of FF evals: 77
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 444,0,0| Number of FF evals: 512
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 2533,385,0| Number of FF evals: 4093
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 13868,12949,0| Number of FF evals: 18198
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 207,0,0| Number of FF evals: 411
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 566,0,0| Number of FF evals: 303
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 350,0,0| Number of FF evals: 671
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 296,0,0| Number of FF evals: 1460
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - true: 72,0,0| Number of FF evals: 463
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 20134,15825,0| Number of FF evals: 14398
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 918,0,0| Number of FF evals: 393
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 232: 296,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 44,0,0| Number of FF evals: 61
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 8332,6786,0| Number of FF evals: 8547
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 2735,1470,22| Number of FF evals: 12755
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 472,0,0| Number of FF evals: 262
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: Line 1258: 44,0,0| Number of FF evals: 77
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 1053,0,0| Number of FF evals: 1031
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 675,223,85| Number of FF evals: 3142
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 4128,2863,8| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 207,0,0| Number of FF evals: 1076
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 472,0,0| Number of FF evals: 261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 293,0,0| Number of FF evals: 1031
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 41,0,0| Number of FF evals: 210
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 1053,0,0| Number of FF evals: 1042
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 262,0,0| Number of FF evals: 1003
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 5634,5151,1040| Number of FF evals: 18198
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 40332,32219,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 252,65,0| Number of FF evals: 3461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 1847,0,0| Number of FF evals: 1288
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 25345,17232,0| Number of FF evals: 5529
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 12301,9761,0| Number of FF evals: 10813
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 75165,67052,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 1755,70,0| Number of FF evals: 2271
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 4843,4236,269| Number of FF evals: 18130
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 34,0,0| Number of FF evals: 133
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 1053,0,0| Number of FF evals: 459
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 75165,67052,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 128,0,0| Number of FF evals: 460
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 4405,0,0| Number of FF evals: 1201
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 2,0,0| Number of FF evals: 146
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 1053,0,0| Number of FF evals: 1042
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 83,0,0| Number of FF evals: 692
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 1053,0,0| Number of FF evals: 453
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1271: 44,0,0| Number of FF evals: 77
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 662,0,0| Number of FF evals: 460
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1270: 44,0,0| Number of FF evals: 77
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1273: 44,0,0| Number of FF evals: 77
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 472,0,0| Number of FF evals: 798
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1272: 44,0,0| Number of FF evals: 77
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 29034,24491,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 44,0,0| Number of FF evals: 71
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 4479,3171,128| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1274: 44,0,0| Number of FF evals: 77
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 18702,14159,0| Number of FF evals: 8196
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: root-Branch: 2578,0,0| Number of FF evals: 1106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 7333,5152,0| Number of FF evals: 9746
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 472,0,0| Number of FF evals: 373
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 11849,10413,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 11849,10413,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 472,0,0| Number of FF evals: 262
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 472,0,0| Number of FF evals: 261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 2407,0,0| Number of FF evals: 1452
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 406,0,0| Number of FF evals: 489
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 5951,3178,0| Number of FF evals: 18078
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 14791,10284,0| Number of FF evals: 6064
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 6149,5267,0| Number of FF evals: 13917
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 29416,21303,0| Number of FF evals: 8491
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 1578,0,0| Number of FF evals: 789
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 1578,0,0| Number of FF evals: 841
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 25345,17232,0| Number of FF evals: 5529
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 128,0,0| Number of FF evals: 96
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 18348,13841,0| Number of FF evals: 8196
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: root-Branch: 380,0,0| Number of FF evals: 419
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 1180,0,0| Number of FF evals: 628
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 40332,32219,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 44,0,0| Number of FF evals: 260
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 5932,0,0| Number of FF evals: 1636
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 207,0,0| Number of FF evals: 1137
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 75165,67052,48094| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 25345,17232,0| Number of FF evals: 5529
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 6003,4481,0| Number of FF evals: 8012
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 128,0,0| Number of FF evals: 456
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 9913,8493,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 72,0,0| Number of FF evals: 370
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 8309,196,0| Number of FF evals: 1980
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 9403,8734,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 44,0,0| Number of FF evals: 179
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 1463,0,0| Number of FF evals: 825
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 6003,4481,0| Number of FF evals: 8012
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 207,0,0| Number of FF evals: 1388
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true: 517,0,0| Number of FF evals: 1120
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 1623,0,0| Number of FF evals: 785
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 296,0,0| Number of FF evals: 193
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 771,247,0| Number of FF evals: 2983
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 296,0,0| Number of FF evals: 193
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 5537,0,0| Number of FF evals: 1758
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 296,0,0| Number of FF evals: 193
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1808,543,2| Number of FF evals: 8250
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 19081,16287,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 44,0,0| Number of FF evals: 732
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 150,0,0| Number of FF evals: 380
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 207,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 60,0,0| Number of FF evals: 313
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 296,0,0| Number of FF evals: 402
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 75165,67052,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 117,0,0| Number of FF evals: 301
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 1053,0,0| Number of FF evals: 671
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 8406,7558,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 472,0,0| Number of FF evals: 262
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 472,0,0| Number of FF evals: 262
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 35871,28613,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 5131,3766,0| Number of FF evals: 5984
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 207,0,0| Number of FF evals: 133
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 11558,10223,0| Number of FF evals: 8774
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 207,0,0| Number of FF evals: 133
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 956,433,0| Number of FF evals: 3635
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 1053,0,0| Number of FF evals: 1012
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 74,0,0| Number of FF evals: 403
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 75165,67052,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - true: 207,0,0| Number of FF evals: 352
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 265,0,0| Number of FF evals: 363
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1039: 472,0,0| Number of FF evals: 261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 2407,0,0| Number of FF evals: 934
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 1053,0,0| Number of FF evals: 1042
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 4241,2976,103| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1032: 472,0,0| Number of FF evals: 261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1033: 472,0,0| Number of FF evals: 261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 207,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 207,0,0| Number of FF evals: 436
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1034: 472,0,0| Number of FF evals: 261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 4130,2865,104| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 1053,0,0| Number of FF evals: 1010
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 411,0,0| Number of FF evals: 1091
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 118,0,0| Number of FF evals: 490
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1029: 472,0,0| Number of FF evals: 261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 1053,0,0| Number of FF evals: 1042
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 3828,0,0| Number of FF evals: 1765
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 1190,0,0| Number of FF evals: 892
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - true: 30363,26662,0| Number of FF evals: 14884
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 670: 118,0,0| Number of FF evals: 340
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 890,199,0| Number of FF evals: 3318
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 6509,4994,0| Number of FF evals: 11789
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - false: 207,0,0| Number of FF evals: 1062
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 207,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 161,0,0| Number of FF evals: 1461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - false: 5001,1300,0| Number of FF evals: 3385
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 75165,67052,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 1757,0,0| Number of FF evals: 784
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 395,0,0| Number of FF evals: 939
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 1053,0,0| Number of FF evals: 453
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 5165,4489,0| Number of FF evals: 17832
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 22857,15862,0| Number of FF evals: 12805
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 1708,1168,0| Number of FF evals: 6316
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 15381,13821,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1895: 44,0,0| Number of FF evals: 72
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 5165,4489,0| Number of FF evals: 17832
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1894: 44,0,0| Number of FF evals: 72
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: Line 2166: 44,0,0| Number of FF evals: 53
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 75165,67052,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 2614,2427,11| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 118,0,0| Number of FF evals: 340
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 380,0,0| Number of FF evals: 1189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 128,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - false: 33,0,0| Number of FF evals: 671
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 279,0,0| Number of FF evals: 877
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 3402,3155,0| Number of FF evals: 7471
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 8044,6947,0| Number of FF evals: 11398
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChangeTime()I: Line 1899: 472,0,0| Number of FF evals: 233
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: root-Branch: 1180,0,0| Number of FF evals: 469
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1791: 472,0,0| Number of FF evals: 252
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 2407,0,0| Number of FF evals: 775
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1792: 555,0,0| Number of FF evals: 275
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: Line 2403: 2407,0,0| Number of FF evals: 797
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 252,65,0| Number of FF evals: 3461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 239,0,0| Number of FF evals: 1318
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 675: 118,0,0| Number of FF evals: 340
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1099: 1320,0,0| Number of FF evals: 516
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 18389,10276,0| Number of FF evals: 3951
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 118,0,0| Number of FF evals: 340
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1797: 555,0,0| Number of FF evals: 275
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 472,0,0| Number of FF evals: 254
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 1114,642,0| Number of FF evals: 4048
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 472,0,0| Number of FF evals: 254
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 1463,0,0| Number of FF evals: 562
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 1463,0,0| Number of FF evals: 562
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 10284,2171,0| Number of FF evals: 2308
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 472,0,0| Number of FF evals: 254
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 8519,7675,0| Number of FF evals: 12161
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 18389,10276,0| Number of FF evals: 4006
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 472,0,0| Number of FF evals: 254
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1100: 1320,0,0| Number of FF evals: 516
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 472,0,0| Number of FF evals: 254
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 1190,0,0| Number of FF evals: 1438
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 472,0,0| Number of FF evals: 254
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 472,0,0| Number of FF evals: 315
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 1053,0,0| Number of FF evals: 484
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: root-Branch: 1180,0,0| Number of FF evals: 1136
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 472,0,0| Number of FF evals: 504
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 596: 1463,0,0| Number of FF evals: 562
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 5002,4158,0| Number of FF evals: 13772
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 4730,3952,0| Number of FF evals: 18029
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 1463,0,0| Number of FF evals: 562
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 1053,0,0| Number of FF evals: 1041
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 1489,313,0| Number of FF evals: 2966
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 1463,0,0| Number of FF evals: 562
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 1463,0,0| Number of FF evals: 562
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 5537,0,0| Number of FF evals: 1407
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 1463,0,0| Number of FF evals: 562
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 1489,313,0| Number of FF evals: 2966
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 75165,67052,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 1489,313,0| Number of FF evals: 2966
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 7105,5292,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 1489,313,0| Number of FF evals: 2966
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 2473,367,0| Number of FF evals: 2401
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 1053,0,0| Number of FF evals: 1042
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 2268,1003,93| Number of FF evals: 10468
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 566,0,0| Number of FF evals: 739
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 161,0,0| Number of FF evals: 1463
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 128,0,0| Number of FF evals: 581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 4295,3030,104| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 6694,5393,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1732: 128,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 1603,0,0| Number of FF evals: 593
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLocalResultCall()Z: Line 2156: 128,0,0| Number of FF evals: 111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 16600,15490,0| Number of FF evals: 17973
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 19344,14137,0| Number of FF evals: 12413
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 2479,2030,0| Number of FF evals: 6256
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 1790,1009,0| Number of FF evals: 5063
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1720: 128,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 128,0,0| Number of FF evals: 388
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1721: 128,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - true: 306,0,0| Number of FF evals: 869
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 128,0,0| Number of FF evals: 97
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 1053,0,0| Number of FF evals: 1028
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 2407,0,0| Number of FF evals: 1188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 4750,0,0| Number of FF evals: 1680
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 128,0,0| Number of FF evals: 425
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 566,0,0| Number of FF evals: 303
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 207,0,0| Number of FF evals: 770
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 918,0,0| Number of FF evals: 466
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: Line 546: 128,0,0| Number of FF evals: 108
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 1011,411,0| Number of FF evals: 3198
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 1776,511,2| Number of FF evals: 7938
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 481,0,0| Number of FF evals: 1286
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 25345,17232,0| Number of FF evals: 5441
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 798,0,0| Number of FF evals: 668
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 1736,0,0| Number of FF evals: 1809
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 128,0,0| Number of FF evals: 403
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 128,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 9091,6862,0| Number of FF evals: 10625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - true: 10,0,0| Number of FF evals: 1642
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 1301,771,0| Number of FF evals: 5682
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 7659,7007,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 289,0,0| Number of FF evals: 476
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 330,0,0| Number of FF evals: 1045
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 54,0,0| Number of FF evals: 541
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 4139,3742,0| Number of FF evals: 15005
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 1053,0,0| Number of FF evals: 1008
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 214,0,0| Number of FF evals: 1106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 1180,0,0| Number of FF evals: 465
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 633: 2578,0,0| Number of FF evals: 822
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 2810,0,0| Number of FF evals: 907
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 798,0,0| Number of FF evals: 382
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 2578,0,0| Number of FF evals: 836
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 4777,3427,0| Number of FF evals: 7574
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 16519,15397,0| Number of FF evals: 17973
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 1425,64,0| Number of FF evals: 2390
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 17650,16073,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 3309,2801,199| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - false: 3302,0,0| Number of FF evals: 1158
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 18970,18163,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 566,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 6038,4632,0| Number of FF evals: 8551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 2220,398,0| Number of FF evals: 2876
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 495,134,0| Number of FF evals: 2788
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 1180,0,0| Number of FF evals: 495
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 308,0,0| Number of FF evals: 696
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 9023,4427,0| Number of FF evals: 6386
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 472,0,0| Number of FF evals: 1081
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - false: 1180,0,0| Number of FF evals: 837
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 7416,5876,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 128,0,0| Number of FF evals: 456
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 75165,67052,48239| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 6762,2219,48| Number of FF evals: 2769
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 277,0,0| Number of FF evals: 527
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 207,0,0| Number of FF evals: 221
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 8847,7870,312| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 154,0,0| Number of FF evals: 986
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 32,0,0| Number of FF evals: 554
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 3351,2999,421| Number of FF evals: 17973
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 2061,0,0| Number of FF evals: 1736
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 130,0,0| Number of FF evals: 406
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 1220,868,408| Number of FF evals: 5514
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 1757,0,0| Number of FF evals: 621
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 5343,2446,0| Number of FF evals: 5640
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 68,0,0| Number of FF evals: 1286
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 3309,2801,199| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 1053,0,0| Number of FF evals: 998
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 128,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 1603,0,0| Number of FF evals: 890
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 11849,10413,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 1053,0,0| Number of FF evals: 1010
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 11849,10413,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 11849,10413,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 1530,1174,0| Number of FF evals: 4248
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 1843,557,0| Number of FF evals: 8013
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 11849,10413,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 6078,3102,0| Number of FF evals: 3559
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: root-Branch: 44,0,0| Number of FF evals: 161
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 11849,10413,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 11849,10413,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 4591,0,0| Number of FF evals: 1241
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 324,0,0| Number of FF evals: 1042
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 245,0,0| Number of FF evals: 687
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 296,0,0| Number of FF evals: 192
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 7,0,0| Number of FF evals: 256
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 5932,0,0| Number of FF evals: 1476
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 9114,7289,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 9114,7289,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 15,0,0| Number of FF evals: 892
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1015: 1180,0,0| Number of FF evals: 469
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 44,0,0| Number of FF evals: 320
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 207,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1017: 1180,0,0| Number of FF evals: 469
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 12395,11290,146| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1016: 1180,0,0| Number of FF evals: 469
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1024: 472,0,0| Number of FF evals: 261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1858: 128,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1025: 472,0,0| Number of FF evals: 261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 207,0,0| Number of FF evals: 332
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: root-Branch: 44,0,0| Number of FF evals: 483
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 277,0,0| Number of FF evals: 671
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 11347,9983,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 75165,67052,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 264,0,0| Number of FF evals: 183
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 1053,0,0| Number of FF evals: 441
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 5345,3873,0| Number of FF evals: 8014
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: root-Branch: 472,0,0| Number of FF evals: 965
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 1053,0,0| Number of FF evals: 1031
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 75165,67052,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 156,23,0| Number of FF evals: 2371
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 1180,0,0| Number of FF evals: 933
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 1053,0,0| Number of FF evals: 1319
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 266,0,0| Number of FF evals: 494
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: Line 1010: 1180,0,0| Number of FF evals: 469
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 1206,0,0| Number of FF evals: 1056
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 2072,1939,164| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 798,0,0| Number of FF evals: 461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 4134,2056,0| Number of FF evals: 5297
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 472,0,0| Number of FF evals: 261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 472,0,0| Number of FF evals: 261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 44,0,0| Number of FF evals: 77
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 1603,0,0| Number of FF evals: 708
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 2942,0,0| Number of FF evals: 921
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 918,0,0| Number of FF evals: 400
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 4426,534,0| Number of FF evals: 2599
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 296,0,0| Number of FF evals: 828
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 472,0,0| Number of FF evals: 362
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 157,0,0| Number of FF evals: 738
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 2351,1675,0| Number of FF evals: 7966
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 586,0,0| Number of FF evals: 468
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 15407,13414,27| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 2027,1351,0| Number of FF evals: 6673
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 4750,0,0| Number of FF evals: 1662
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 6916,5682,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 4750,0,0| Number of FF evals: 1662
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 918,0,0| Number of FF evals: 393
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: root-Branch: 472,0,0| Number of FF evals: 1181
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 262,0,0| Number of FF evals: 671
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 8635,6966,0| Number of FF evals: 9369
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 128,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 1011,411,0| Number of FF evals: 3198
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 115,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 8549,7656,98| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 22936,22191,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 2881,1458,0| Number of FF evals: 2666
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 8309,196,0| Number of FF evals: 1951
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 1603,0,0| Number of FF evals: 586
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: Line 2124: 380,0,0| Number of FF evals: 205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 293,0,0| Number of FF evals: 1075
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 2250,2092,51| Number of FF evals: 16963
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 1026,350,0| Number of FF evals: 3019
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 1904,1231,0| Number of FF evals: 4047
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 8131,6697,0| Number of FF evals: 6460
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - false: 76,0,0| Number of FF evals: 393
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 2970,1386,0| Number of FF evals: 3527
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 472,0,0| Number of FF evals: 1295
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 44065,43541,3| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 44065,43541,3| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 4638,3352,175| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 987,635,391| Number of FF evals: 4509
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 1632,1183,0| Number of FF evals: 4152
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 1053,0,0| Number of FF evals: 1042
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 44,0,0| Number of FF evals: 77
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch: 44,0,0| Number of FF evals: 977
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 380,0,0| Number of FF evals: 213
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 17735,16130,57| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 207,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 207,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 207,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 566,0,0| Number of FF evals: 396
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 1757,0,0| Number of FF evals: 656
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 207,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 156,23,0| Number of FF evals: 2370
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 207,0,0| Number of FF evals: 562
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 728,0,0| Number of FF evals: 832
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 17619,16371,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 1180,0,0| Number of FF evals: 1561
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 472,0,0| Number of FF evals: 235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 4405,0,0| Number of FF evals: 1205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 502,56,0| Number of FF evals: 2117
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - true: 472,0,0| Number of FF evals: 965
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 951,0,0| Number of FF evals: 1114
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 971,0,0| Number of FF evals: 1233
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 798,0,0| Number of FF evals: 363
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 2853,1162,0| Number of FF evals: 6123
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1128: 566,0,0| Number of FF evals: 291
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1127: 566,0,0| Number of FF evals: 291
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 1053,0,0| Number of FF evals: 985
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1446: 207,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 80,0,0| Number of FF evals: 329
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 300,0,0| Number of FF evals: 1068
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 1405,146,0| Number of FF evals: 4152
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 128,0,0| Number of FF evals: 844
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 100,0,0| Number of FF evals: 576
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 13000,12753,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 2283,1018,3| Number of FF evals: 10945
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 622: 76,0,0| Number of FF evals: 145
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 3233,2977,426| Number of FF evals: 17456
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 74,0,0| Number of FF evals: 144
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 207,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 74,0,0| Number of FF evals: 144
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 74,0,0| Number of FF evals: 144
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 7917,7670,0| Number of FF evals: 11855
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 74,0,0| Number of FF evals: 144
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 1924,659,19| Number of FF evals: 8897
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - true: 16,0,0| Number of FF evals: 814
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 74,0,0| Number of FF evals: 144
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 1053,0,0| Number of FF evals: 1041
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 150,0,0| Number of FF evals: 377
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 44065,43541,3| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 10,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 2942,0,0| Number of FF evals: 888
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 2340,1054,130| Number of FF evals: 10634
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 44065,43541,3| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 1000: 380,0,0| Number of FF evals: 935
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 1053,0,0| Number of FF evals: 1042
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 128,0,0| Number of FF evals: 99
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 44065,43541,3| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 44065,43541,3| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 3700,3139,0| Number of FF evals: 10082
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 120,0,0| Number of FF evals: 233
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 482,0,0| Number of FF evals: 1194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 44065,43541,3| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 128,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 44065,43541,3| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 482,0,0| Number of FF evals: 1194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 482,0,0| Number of FF evals: 1194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - true: 23,0,0| Number of FF evals: 389
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 1053,0,0| Number of FF evals: 1042
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 13675,11774,0| Number of FF evals: 13757
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 44,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 128,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 207,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 272,0,0| Number of FF evals: 270
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 62,0,0| Number of FF evals: 146
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 272,0,0| Number of FF evals: 270
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 9148,7486,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 9148,7486,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 11166,10229,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 25345,17232,0| Number of FF evals: 5441
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 11363,10356,127| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 1180,0,0| Number of FF evals: 493
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - true: 128,0,0| Number of FF evals: 1295
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - false: 44,0,0| Number of FF evals: 564
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 509,0,0| Number of FF evals: 972
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 296,0,0| Number of FF evals: 586
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 118,0,0| Number of FF evals: 340
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 23706,19969,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 28374,26447,80| Number of FF evals: 17901
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 207,0,0| Number of FF evals: 463
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 10794,8916,1860| Number of FF evals: 18198
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 75165,67052,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 1757,0,0| Number of FF evals: 632
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 472,0,0| Number of FF evals: 633
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 5156,3278,986| Number of FF evals: 5490
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 19396,17032,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 22357,21829,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 472,0,0| Number of FF evals: 262
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 12160,6494,0| Number of FF evals: 8492
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 566,0,0| Number of FF evals: 560
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 1632,1183,0| Number of FF evals: 4246
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 18389,10276,0| Number of FF evals: 3938
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 4591,0,0| Number of FF evals: 1550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 18389,10276,0| Number of FF evals: 3938
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 4714,3538,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 708,0,0| Number of FF evals: 399
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 13614,10951,0| Number of FF evals: 16685
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 44,0,0| Number of FF evals: 298
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: Line 912: 207,0,0| Number of FF evals: 151
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 44,0,0| Number of FF evals: 344
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 1180,0,0| Number of FF evals: 469
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 6115,5462,723| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 1180,0,0| Number of FF evals: 469
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 207,0,0| Number of FF evals: 121
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 1757,0,0| Number of FF evals: 699
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 954,582,0| Number of FF evals: 4066
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 2702,0,0| Number of FF evals: 1293
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 734,506,48| Number of FF evals: 5736
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 918,0,0| Number of FF evals: 384
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 2870,2197,0| Number of FF evals: 6302
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 280,0,0| Number of FF evals: 726
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 472,0,0| Number of FF evals: 262
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 5585,4760,0| Number of FF evals: 10895
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 472,0,0| Number of FF evals: 842
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 10805,4293,0| Number of FF evals: 4187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 4405,0,0| Number of FF evals: 1318
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 19107,16491,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLocalResultCall()Z: root-Branch: 128,0,0| Number of FF evals: 312
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 207,0,0| Number of FF evals: 390
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 296,0,0| Number of FF evals: 192
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 17753,16646,0| Number of FF evals: 18092
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 1489,313,0| Number of FF evals: 3074
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 678,0,0| Number of FF evals: 309
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 798,0,0| Number of FF evals: 360
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 296,0,0| Number of FF evals: 192
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 9342,7809,0| Number of FF evals: 12505
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 17753,16646,0| Number of FF evals: 18092
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 30935,26505,47| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 918,0,0| Number of FF evals: 417
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 798,0,0| Number of FF evals: 751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 207,0,0| Number of FF evals: 245
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 4776,2898,843| Number of FF evals: 4714
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 2835,2491,0| Number of FF evals: 8774
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 1053,0,0| Number of FF evals: 1028
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 1620,355,2| Number of FF evals: 6789
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 1463,0,0| Number of FF evals: 831
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 837: 3302,0,0| Number of FF evals: 979
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 1463,0,0| Number of FF evals: 830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 1349,84,0| Number of FF evals: 2976
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 838: 3302,0,0| Number of FF evals: 979
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 4405,0,0| Number of FF evals: 1185
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 11004,7873,0| Number of FF evals: 6696
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 10284,2171,0| Number of FF evals: 2324
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 4405,0,0| Number of FF evals: 1185
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 1053,0,0| Number of FF evals: 1042
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 4986,556,0| Number of FF evals: 2208
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 207,0,0| Number of FF evals: 143
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 207,0,0| Number of FF evals: 143
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 14674,11468,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 678,0,0| Number of FF evals: 376
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 1318,32,0| Number of FF evals: 2400
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 1053,0,0| Number of FF evals: 1007
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 75165,67052,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 2216,957,1| Number of FF evals: 10817
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 1053,0,0| Number of FF evals: 1041
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 44,0,0| Number of FF evals: 1263
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 6078,2947,0| Number of FF evals: 3487
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 1436,290,0| Number of FF evals: 3074
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 75165,67052,48094| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 4202,3602,107| Number of FF evals: 17800
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - true: 69,0,0| Number of FF evals: 692
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 472,0,0| Number of FF evals: 255
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 214,0,0| Number of FF evals: 641
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 472,0,0| Number of FF evals: 249
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 566,0,0| Number of FF evals: 268
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 678,0,0| Number of FF evals: 344
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 1205,0,0| Number of FF evals: 917
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 3551,2660,0| Number of FF evals: 8487
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 455,0,0| Number of FF evals: 981
* Search finished after 604s and 438 generations, 229572 statements, best individual has fitness: 2842.0
* Minimizing test suite
[MASTER] 13:11:21.767 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 797
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 714
* Number of covered goals: 620
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 108
* Number of covered goals: 108
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 530
* Number of covered goals: 463
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 4536
* Number of covered goals: 2227
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 714
* Number of covered goals: 576
* Generated 761 tests with total length 13197
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 13:12:44.325 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.68035% of time used, but only 35/761 tests minimized), falling back to using all assertions
[MASTER] 13:13:03.886 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
[MASTER] 13:13:18.991 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 15 seconds more than allowed.
[MASTER] 13:13:31.146 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_73_1628255610551/com/google/javascript/rhino/Node_73_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_73_1628255610551/com/google/javascript/rhino/Node_73_tmp__ESTest_scaffolding.java]]
[MASTER] 13:13:31.146 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:31.146 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:31.153 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1789
[MASTER] 13:13:31.154 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_73_1628255610551/com/google/javascript/rhino/Node_73_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 13:13:31.154 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 13:13:31.161 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_73_1628255610551/com/google/javascript/rhino/Node_73_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:13:30 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import com.google.javascript.rhino.Node;
12: import java.util.Iterator;
13: import java.util.Set;
14: import java.util.Spliterator;
15: import java.util.function.Consumer;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_73_tmp__ESTest extends Node_73_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Node node0 = Node.newString(695, "", 695, 147);
27:       assertFalse(node0.isIn());
28:       assertFalse(node0.isEmpty());
29:       assertEquals(695, node0.getLineno());
30:       assertFalse(node0.isString());
31:       assertFalse(node0.isIf());
32:       assertFalse(node0.isDelProp());
33:       assertFalse(node0.isGetterDef());
34:       assertFalse(node0.isNE());
35:       assertFalse(node0.isSwitch());
36:       assertFalse(node0.isFunction());
37:       assertFalse(node0.isArrayLit());
38:       assertFalse(node0.isInc());
39:       assertEquals(147, node0.getCharno());
40:       assertFalse(node0.isDefaultCase());
41:       assertFalse(node0.isFalse());
42:       assertEquals(2846867, node0.getSourcePosition());
43:       assertFalse(node0.isThrow());
44:       assertEquals(0, node0.getChildCount());
45:       assertFalse(node0.isSetterDef());
46:       assertFalse(node0.isCatch());
47:       assertFalse(node0.isInstanceOf());
48:       assertFalse(node0.isParamList());
49:       assertFalse(node0.isStringKey());
50:       assertFalse(node0.isTry());
51:       assertFalse(node0.hasOneChild());
52:       assertFalse(node0.isScript());
53:       assertFalse(node0.isWith());
54:       assertFalse(node0.isCase());
55:       assertFalse(node0.isRegExp());
56:       assertFalse(node0.isThis());
57:       assertFalse(node0.isHook());
58:       assertFalse(node0.isBlock());
59:       assertFalse(node0.isFor());
60:       assertFalse(node0.isOr());
61:       assertFalse(node0.isReturn());
62:       assertFalse(node0.isAssignAdd());
63:       assertFalse(node0.isLabel());
64:       assertFalse(node0.hasMoreThanOneChild());
65:       assertFalse(node0.isContinue());
66:       assertEquals(695, node0.getType());
67:       assertFalse(node0.isLabelName());
68:       assertFalse(node0.isNumber());
69:       assertFalse(node0.isNew());
70:       assertFalse(node0.isCast());
71:       assertFalse(node0.isAdd());
72:       assertFalse(node0.isDo());
73:       assertFalse(node0.isVar());
74:       assertFalse(node0.isBreak());
75:       assertFalse(node0.isGetProp());
76:       assertFalse(node0.isNot());
77:       assertFalse(node0.isName());
78:       assertFalse(node0.isObjectLit());
79:       assertFalse(node0.isAnd());
80:       assertFalse(node0.isDebugger());
81:       assertFalse(node0.isNull());
82:       assertFalse(node0.isTrue());
83:       assertFalse(node0.isVoid());
84:       assertFalse(node0.isCall());
85:       assertFalse(node0.isGetElem());
86:       assertFalse(node0.isExprResult());
87:       assertFalse(node0.isAssign());
88:       assertFalse(node0.isWhile());
89:       assertFalse(node0.isDec());
90:       assertFalse(node0.isTypeOf());
91:       assertFalse(node0.isComma());
92:       assertFalse(node0.hasChildren());
93:       assertEquals(53, Node.INPUT_ID);
94:       assertEquals(43, Node.IS_CONSTANT_NAME);
95:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
96:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
97:       assertEquals(29, Node.JSDOC_INFO_PROP);
98:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
99:       assertEquals(36, Node.QUOTED_PROP);
100:       assertEquals(55, Node.INFERRED_FUNCTION);
101:       assertEquals(39, Node.EMPTY_BLOCK);
102:       assertEquals(46, Node.IS_NAMESPACE);
103:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
104:       assertEquals(30, Node.VAR_ARGS_NAME);
105:       assertEquals(40, Node.ORIGINALNAME_PROP);
106:       assertEquals(47, Node.IS_DISPATCHER);
107:       assertEquals(2, Node.POST_FLAG);
108:       assertEquals(54, Node.SLASH_V);
109:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
110:       assertEquals(57, Node.REFLECTED_OBJECT);
111:       assertEquals(57, Node.LAST_PROP);
112:       assertEquals(1, Node.DECR_FLAG);
113:       assertEquals(50, Node.FREE_CALL);
114:       assertEquals(51, Node.STATIC_SOURCE_FILE);
115:       assertEquals(15, Node.NO_SIDE_EFFECTS);
116:       assertEquals(8, Node.FLAG_NO_THROWS);
117:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
118:       assertEquals(52, Node.LENGTH);
119:       assertEquals(48, Node.DIRECTIVES);
120:       assertEquals(37, Node.OPT_ARG_NAME);
121:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
122:       assertEquals(56, Node.CHANGE_TIME);
123:       assertEquals(12, Node.COLUMN_BITS);
124:       assertEquals(32, Node.INCRDECR_PROP);
125:       assertEquals(49, Node.DIRECT_EVAL);
126:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
127:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
128:       assertEquals(4095, Node.COLUMN_MASK);
129:       assertNotNull(node0);
130:       
131:       int int0 = node0.getIntProp(29);
132:       assertEquals(0, int0);
133:       assertFalse(node0.isIn());
134:       assertFalse(node0.isEmpty());
135:       assertEquals(695, node0.getLineno());
136:       assertFalse(node0.isString());
137:       assertFalse(node0.isIf());
138:       assertFalse(node0.isDelProp());
139:       assertFalse(node0.isGetterDef());
140:       assertFalse(node0.isNE());
141:       assertFalse(node0.isSwitch());
142:       assertFalse(node0.isFunction());
143:       assertFalse(node0.isArrayLit());
144:       assertFalse(node0.isInc());
145:       assertEquals(147, node0.getCharno());
146:       assertFalse(node0.isDefaultCase());
147:       assertFalse(node0.isFalse());
148:       assertEquals(2846867, node0.getSourcePosition());
149:       assertFalse(node0.isThrow());
150:       assertEquals(0, node0.getChildCount());
151:       assertFalse(node0.isSetterDef());
152:       assertFalse(node0.isCatch());
153:       assertFalse(node0.isInstanceOf());
154:       assertFalse(node0.isParamList());
155:       assertFalse(node0.isStringKey());
156:       assertFalse(node0.isTry());
157:       assertFalse(node0.hasOneChild());
158:       assertFalse(node0.isScript());
159:       assertFalse(node0.isWith());
160:       assertFalse(node0.isCase());
161:       assertFalse(node0.isRegExp());
162:       assertFalse(node0.isThis());
163:       assertFalse(node0.isHook());
164:       assertFalse(node0.isBlock());
165:       assertFalse(node0.isFor());
166:       assertFalse(node0.isOr());
167:       assertFalse(node0.isReturn());
168:       assertFalse(node0.isAssignAdd());
169:       assertFalse(node0.isLabel());
170:       assertFalse(node0.hasMoreThanOneChild());
171:       assertFalse(node0.isContinue());
172:       assertEquals(695, node0.getType());
173:       assertFalse(node0.isLabelName());
174:       assertFalse(node0.isNumber());
175:       assertFalse(node0.isNew());
176:       assertFalse(node0.isCast());
177:       assertFalse(node0.isAdd());
178:       assertFalse(node0.isDo());
179:       assertFalse(node0.isVar());
180:       assertFalse(node0.isBreak());
181:       assertFalse(node0.isGetProp());
182:       assertFalse(node0.isNot());
183:       assertFalse(node0.isName());
184:       assertFalse(node0.isObjectLit());
185:       assertFalse(node0.isAnd());
186:       assertFalse(node0.isDebugger());
187:       assertFalse(node0.isNull());
188:       assertFalse(node0.isTrue());
189:       assertFalse(node0.isVoid());
190:       assertFalse(node0.isCall());
191:       assertFalse(node0.isGetElem());
192:       assertFalse(node0.isExprResult());
193:       assertFalse(node0.isAssign());
194:       assertFalse(node0.isWhile());
195:       assertFalse(node0.isDec());
196:       assertFalse(node0.isTypeOf());
197:       assertFalse(node0.isComma());
198:       assertFalse(node0.hasChildren());
199:       assertEquals(53, Node.INPUT_ID);
200:       assertEquals(43, Node.IS_CONSTANT_NAME);
201:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
202:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
203:       assertEquals(29, Node.JSDOC_INFO_PROP);
204:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
205:       assertEquals(36, Node.QUOTED_PROP);
206:       assertEquals(55, Node.INFERRED_FUNCTION);
207:       assertEquals(39, Node.EMPTY_BLOCK);
208:       assertEquals(46, Node.IS_NAMESPACE);
209:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
210:       assertEquals(30, Node.VAR_ARGS_NAME);
211:       assertEquals(40, Node.ORIGINALNAME_PROP);
212:       assertEquals(47, Node.IS_DISPATCHER);
213:       assertEquals(2, Node.POST_FLAG);
214:       assertEquals(54, Node.SLASH_V);
215:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
216:       assertEquals(57, Node.REFLECTED_OBJECT);
217:       assertEquals(57, Node.LAST_PROP);
218:       assertEquals(1, Node.DECR_FLAG);
219:       assertEquals(50, Node.FREE_CALL);
220:       assertEquals(51, Node.STATIC_SOURCE_FILE);
221:       assertEquals(15, Node.NO_SIDE_EFFECTS);
222:       assertEquals(8, Node.FLAG_NO_THROWS);
223:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
224:       assertEquals(52, Node.LENGTH);
225:       assertEquals(48, Node.DIRECTIVES);
226:       assertEquals(37, Node.OPT_ARG_NAME);
227:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
228:       assertEquals(56, Node.CHANGE_TIME);
229:       assertEquals(12, Node.COLUMN_BITS);
230:       assertEquals(32, Node.INCRDECR_PROP);
231:       assertEquals(49, Node.DIRECT_EVAL);
232:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
233:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
234:       assertEquals(4095, Node.COLUMN_MASK);
235:       
236:       Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
237:       assertFalse(node0.isIn());
238:       assertFalse(node0.isEmpty());
239:       assertEquals(695, node0.getLineno());
240:       assertFalse(node0.isString());
241:       assertFalse(node0.isIf());
242:       assertFalse(node0.isDelProp());
243:       assertFalse(node0.isGetterDef());
244:       assertFalse(node0.isNE());
245:       assertFalse(node0.isSwitch());
246:       assertFalse(node0.isFunction());
247:       assertFalse(node0.isArrayLit());
248:       assertFalse(node0.isInc());
249:       assertEquals(147, node0.getCharno());
250:       assertFalse(node0.isDefaultCase());
251:       assertFalse(node0.isFalse());
252:       assertEquals(2846867, node0.getSourcePosition());
253:       assertFalse(node0.isThrow());
254:       assertEquals(0, node0.getChildCount());
255:       assertFalse(node0.isSetterDef());
256:       assertFalse(node0.isCatch());
257:       assertFalse(node0.isInstanceOf());
258:       assertFalse(node0.isParamList());
259:       assertFalse(node0.isStringKey());
260:       assertFalse(node0.isTry());
261:       assertFalse(node0.hasOneChild());
262:       assertFalse(node0.isScript());
263:       assertFalse(node0.isWith());
264:       assertFalse(node0.isCase());
265:       assertFalse(node0.isRegExp());
266:       assertFalse(node0.isThis());
267:       assertFalse(node0.isHook());
268:       assertFalse(node0.isBlock());
269:       assertFalse(node0.isFor());
270:       assertFalse(node0.isOr());
271:       assertFalse(node0.isReturn());
272:       assertFalse(node0.isAssignAdd());
273:       assertFalse(node0.isLabel());
274:       assertFalse(node0.hasMoreThanOneChild());
275:       assertFalse(node0.isContinue());
276:       assertEquals(695, node0.getType());
277:       assertFalse(node0.isLabelName());
278:       assertFalse(node0.isNumber());
279:       assertFalse(node0.isNew());
280:       assertFalse(node0.isCast());
281:       assertFalse(node0.isAdd());
282:       assertFalse(node0.isDo());
283:       assertFalse(node0.isVar());
284:       assertFalse(node0.isBreak());
285:       assertFalse(node0.isGetProp());
286:       assertFalse(node0.isNot());
287:       assertFalse(node0.isName());
288:       assertFalse(node0.isObjectLit());
289:       assertFalse(node0.isAnd());
290:       assertFalse(node0.isDebugger());
291:       assertFalse(node0.isNull());
292:       assertFalse(node0.isTrue());
293:       assertFalse(node0.isVoid());
294:       assertFalse(node0.isCall());
295:       assertFalse(node0.isGetElem());
296:       assertFalse(node0.isExprResult());
297:       assertFalse(node0.isAssign());
298:       assertFalse(node0.isWhile());
299:       assertFalse(node0.isDec());
300:       assertFalse(node0.isTypeOf());
301:       assertFalse(node0.isComma());
302:       assertFalse(node0.hasChildren());
303:       assertEquals(53, Node.INPUT_ID);
304:       assertEquals(43, Node.IS_CONSTANT_NAME);
305:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
306:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
307:       assertEquals(29, Node.JSDOC_INFO_PROP);
308:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
309:       assertEquals(36, Node.QUOTED_PROP);
310:       assertEquals(55, Node.INFERRED_FUNCTION);
311:       assertEquals(39, Node.EMPTY_BLOCK);
312:       assertEquals(46, Node.IS_NAMESPACE);
313:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
314:       assertEquals(30, Node.VAR_ARGS_NAME);
315:       assertEquals(40, Node.ORIGINALNAME_PROP);
316:       assertEquals(47, Node.IS_DISPATCHER);
317:       assertEquals(2, Node.POST_FLAG);
318:       assertEquals(54, Node.SLASH_V);
319:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
320:       assertEquals(57, Node.REFLECTED_OBJECT);
321:       assertEquals(57, Node.LAST_PROP);
322:       assertEquals(1, Node.DECR_FLAG);
323:       assertEquals(50, Node.FREE_CALL);
324:       assertEquals(51, Node.STATIC_SOURCE_FILE);
325:       assertEquals(15, Node.NO_SIDE_EFFECTS);
326:       assertEquals(8, Node.FLAG_NO_THROWS);
327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
328:       assertEquals(52, Node.LENGTH);
329:       assertEquals(48, Node.DIRECTIVES);
330:       assertEquals(37, Node.OPT_ARG_NAME);
331:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
332:       assertEquals(56, Node.CHANGE_TIME);
333:       assertEquals(12, Node.COLUMN_BITS);
334:       assertEquals(32, Node.INCRDECR_PROP);
335:       assertEquals(49, Node.DIRECT_EVAL);
336:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
337:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
338:       assertEquals(4095, Node.COLUMN_MASK);
339:       assertNotNull(node_AncestorIterable0);
340:       
341:       Spliterator<Node> spliterator0 = node_AncestorIterable0.spliterator();
342:       assertFalse(node0.isIn());
343:       assertFalse(node0.isEmpty());
344:       assertEquals(695, node0.getLineno());
345:       assertFalse(node0.isString());
346:       assertFalse(node0.isIf());
347:       assertFalse(node0.isDelProp());
348:       assertFalse(node0.isGetterDef());
349:       assertFalse(node0.isNE());
350:       assertFalse(node0.isSwitch());
351:       assertFalse(node0.isFunction());
352:       assertFalse(node0.isArrayLit());
353:       assertFalse(node0.isInc());
354:       assertEquals(147, node0.getCharno());
355:       assertFalse(node0.isDefaultCase());
356:       assertFalse(node0.isFalse());
357:       assertEquals(2846867, node0.getSourcePosition());
358:       assertFalse(node0.isThrow());
359:       assertEquals(0, node0.getChildCount());
360:       assertFalse(node0.isSetterDef());
361:       assertFalse(node0.isCatch());
362:       assertFalse(node0.isInstanceOf());
363:       assertFalse(node0.isParamList());
364:       assertFalse(node0.isStringKey());
365:       assertFalse(node0.isTry());
366:       assertFalse(node0.hasOneChild());
367:       assertFalse(node0.isScript());
368:       assertFalse(node0.isWith());
369:       assertFalse(node0.isCase());
370:       assertFalse(node0.isRegExp());
371:       assertFalse(node0.isThis());
372:       assertFalse(node0.isHook());
373:       assertFalse(node0.isBlock());
374:       assertFalse(node0.isFor());
375:       assertFalse(node0.isOr());
376:       assertFalse(node0.isReturn());
377:       assertFalse(node0.isAssignAdd());
378:       assertFalse(node0.isLabel());
379:       assertFalse(node0.hasMoreThanOneChild());
380:       assertFalse(node0.isContinue());
381:       assertEquals(695, node0.getType());
382:       assertFalse(node0.isLabelName());
383:       assertFalse(node0.isNumber());
384:       assertFalse(node0.isNew());
385:       assertFalse(node0.isCast());
386:       assertFalse(node0.isAdd());
387:       assertFalse(node0.isDo());
388:       assertFalse(node0.isVar());
389:       assertFalse(node0.isBreak());
390:       assertFalse(node0.isGetProp());
391:       assertFalse(node0.isNot());
392:       assertFalse(node0.isName());
393:       assertFalse(node0.isObjectLit());
394:       assertFalse(node0.isAnd());
395:       assertFalse(node0.isDebugger());
396:       assertFalse(node0.isNull());
397:       assertFalse(node0.isTrue());
398:       assertFalse(node0.isVoid());
399:       assertFalse(node0.isCall());
400:       assertFalse(node0.isGetElem());
401:       assertFalse(node0.isExprResult());
402:       assertFalse(node0.isAssign());
403:       assertFalse(node0.isWhile());
404:       assertFalse(node0.isDec());
405:       assertFalse(node0.isTypeOf());
406:       assertFalse(node0.isComma());
407:       assertFalse(node0.hasChildren());
408:       assertEquals(53, Node.INPUT_ID);
409:       assertEquals(43, Node.IS_CONSTANT_NAME);
410:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
411:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
412:       assertEquals(29, Node.JSDOC_INFO_PROP);
413:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
414:       assertEquals(36, Node.QUOTED_PROP);
415:       assertEquals(55, Node.INFERRED_FUNCTION);
416:       assertEquals(39, Node.EMPTY_BLOCK);
417:       assertEquals(46, Node.IS_NAMESPACE);
418:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
419:       assertEquals(30, Node.VAR_ARGS_NAME);
420:       assertEquals(40, Node.ORIGINALNAME_PROP);
421:       assertEquals(47, Node.IS_DISPATCHER);
422:       assertEquals(2, Node.POST_FLAG);
423:       assertEquals(54, Node.SLASH_V);
424:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
425:       assertEquals(57, Node.REFLECTED_OBJECT);
426:       assertEquals(57, Node.LAST_PROP);
427:       assertEquals(1, Node.DECR_FLAG);
428:       assertEquals(50, Node.FREE_CALL);
429:       assertEquals(51, Node.STATIC_SOURCE_FILE);
430:       assertEquals(15, Node.NO_SIDE_EFFECTS);
431:       assertEquals(8, Node.FLAG_NO_THROWS);
432:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
433:       assertEquals(52, Node.LENGTH);
434:       assertEquals(48, Node.DIRECTIVES);
435:       assertEquals(37, Node.OPT_ARG_NAME);
436:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
437:       assertEquals(56, Node.CHANGE_TIME);
438:       assertEquals(12, Node.COLUMN_BITS);
439:       assertEquals(32, Node.INCRDECR_PROP);
440:       assertEquals(49, Node.DIRECT_EVAL);
441:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
442:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
443:       assertEquals(4095, Node.COLUMN_MASK);
444:       assertNotNull(spliterator0);
445:       
446:       Iterator<Node> iterator0 = node_AncestorIterable0.iterator();
447:       assertFalse(node0.isIn());
448:       assertFalse(node0.isEmpty());
449:       assertEquals(695, node0.getLineno());
450:       assertFalse(node0.isString());
451:       assertFalse(node0.isIf());
452:       assertFalse(node0.isDelProp());
453:       assertFalse(node0.isGetterDef());
454:       assertFalse(node0.isNE());
455:       assertFalse(node0.isSwitch());
456:       assertFalse(node0.isFunction());
457:       assertFalse(node0.isArrayLit());
458:       assertFalse(node0.isInc());
459:       assertEquals(147, node0.getCharno());
460:       assertFalse(node0.isDefaultCase());
461:       assertFalse(node0.isFalse());
462:       assertEquals(2846867, node0.getSourcePosition());
463:       assertFalse(node0.isThrow());
464:       assertEquals(0, node0.getChildCount());
465:       assertFalse(node0.isSetterDef());
466:       assertFalse(node0.isCatch());
467:       assertFalse(node0.isInstanceOf());
468:       assertFalse(node0.isParamList());
469:       assertFalse(node0.isStringKey());
470:       assertFalse(node0.isTry());
471:       assertFalse(node0.hasOneChild());
472:       assertFalse(node0.isScript());
473:       assertFalse(node0.isWith());
474:       assertFalse(node0.isCase());
475:       assertFalse(node0.isRegExp());
476:       assertFalse(node0.isThis());
477:       assertFalse(node0.isHook());
478:       assertFalse(node0.isBlock());
479:       assertFalse(node0.isFor());
480:       assertFalse(node0.isOr());
481:       assertFalse(node0.isReturn());
482:       assertFalse(node0.isAssignAdd());
483:       assertFalse(node0.isLabel());
484:       assertFalse(node0.hasMoreThanOneChild());
485:       assertFalse(node0.isContinue());
486:       assertEquals(695, node0.getType());
487:       assertFalse(node0.isLabelName());
488:       assertFalse(node0.isNumber());
489:       assertFalse(node0.isNew());
490:       assertFalse(node0.isCast());
491:       assertFalse(node0.isAdd());
492:       assertFalse(node0.isDo());
493:       assertFalse(node0.isVar());
494:       assertFalse(node0.isBreak());
495:       assertFalse(node0.isGetProp());
496:       assertFalse(node0.isNot());
497:       assertFalse(node0.isName());
498:       assertFalse(node0.isObjectLit());
499:       assertFalse(node0.isAnd());
500:       assertFalse(node0.isDebugger());
501:       assertFalse(node0.isNull());
502:       assertFalse(node0.isTrue());
503:       assertFalse(node0.isVoid());
504:       assertFalse(node0.isCall());
505:       assertFalse(node0.isGetElem());
506:       assertFalse(node0.isExprResult());
507:       assertFalse(node0.isAssign());
508:       assertFalse(node0.isWhile());
509:       assertFalse(node0.isDec());
510:       assertFalse(node0.isTypeOf());
511:       assertFalse(node0.isComma());
512:       assertFalse(node0.hasChildren());
513:       assertEquals(53, Node.INPUT_ID);
514:       assertEquals(43, Node.IS_CONSTANT_NAME);
515:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
516:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
517:       assertEquals(29, Node.JSDOC_INFO_PROP);
518:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
519:       assertEquals(36, Node.QUOTED_PROP);
520:       assertEquals(55, Node.INFERRED_FUNCTION);
521:       assertEquals(39, Node.EMPTY_BLOCK);
522:       assertEquals(46, Node.IS_NAMESPACE);
523:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
524:       assertEquals(30, Node.VAR_ARGS_NAME);
525:       assertEquals(40, Node.ORIGINALNAME_PROP);
526:       assertEquals(47, Node.IS_DISPATCHER);
527:       assertEquals(2, Node.POST_FLAG);
528:       assertEquals(54, Node.SLASH_V);
529:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
530:       assertEquals(57, Node.REFLECTED_OBJECT);
531:       assertEquals(57, Node.LAST_PROP);
532:       assertEquals(1, Node.DECR_FLAG);
533:       assertEquals(50, Node.FREE_CALL);
534:       assertEquals(51, Node.STATIC_SOURCE_FILE);
535:       assertEquals(15, Node.NO_SIDE_EFFECTS);
536:       assertEquals(8, Node.FLAG_NO_THROWS);
537:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
538:       assertEquals(52, Node.LENGTH);
539:       assertEquals(48, Node.DIRECTIVES);
540:       assertEquals(37, Node.OPT_ARG_NAME);
541:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
542:       assertEquals(56, Node.CHANGE_TIME);
543:       assertEquals(12, Node.COLUMN_BITS);
544:       assertEquals(32, Node.INCRDECR_PROP);
545:       assertEquals(49, Node.DIRECT_EVAL);
546:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
547:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
548:       assertEquals(4095, Node.COLUMN_MASK);
549:       assertNotNull(iterator0);
550:       
551:       Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
552:       node_AncestorIterable0.forEach(consumer0);
553:       assertFalse(node0.isIn());
554:       assertFalse(node0.isEmpty());
555:       assertEquals(695, node0.getLineno());
556:       assertFalse(node0.isString());
557:       assertFalse(node0.isIf());
558:       assertFalse(node0.isDelProp());
559:       assertFalse(node0.isGetterDef());
560:       assertFalse(node0.isNE());
561:       assertFalse(node0.isSwitch());
562:       assertFalse(node0.isFunction());
563:       assertFalse(node0.isArrayLit());
564:       assertFalse(node0.isInc());
565:       assertEquals(147, node0.getCharno());
566:       assertFalse(node0.isDefaultCase());
567:       assertFalse(node0.isFalse());
568:       assertEquals(2846867, node0.getSourcePosition());
569:       assertFalse(node0.isThrow());
570:       assertEquals(0, node0.getChildCount());
571:       assertFalse(node0.isSetterDef());
572:       assertFalse(node0.isCatch());
573:       assertFalse(node0.isInstanceOf());
574:       assertFalse(node0.isParamList());
575:       assertFalse(node0.isStringKey());
576:       assertFalse(node0.isTry());
577:       assertFalse(node0.hasOneChild());
578:       assertFalse(node0.isScript());
579:       assertFalse(node0.isWith());
580:       assertFalse(node0.isCase());
581:       assertFalse(node0.isRegExp());
582:       assertFalse(node0.isThis());
583:       assertFalse(node0.isHook());
584:       assertFalse(node0.isBlock());
585:       assertFalse(node0.isFor());
586:       assertFalse(node0.isOr());
587:       assertFalse(node0.isReturn());
588:       assertFalse(node0.isAssignAdd());
589:       assertFalse(node0.isLabel());
590:       assertFalse(node0.hasMoreThanOneChild());
591:       assertFalse(node0.isContinue());
592:       assertEquals(695, node0.getType());
593:       assertFalse(node0.isLabelName());
594:       assertFalse(node0.isNumber());
595:       assertFalse(node0.isNew());
596:       assertFalse(node0.isCast());
597:       assertFalse(node0.isAdd());
598:       assertFalse(node0.isDo());
599:       assertFalse(node0.isVar());
600:       assertFalse(node0.isBreak());
601:       assertFalse(node0.isGetProp());
602:       assertFalse(node0.isNot());
603:       assertFalse(node0.isName());
604:       assertFalse(node0.isObjectLit());
605:       assertFalse(node0.isAnd());
606:       assertFalse(node0.isDebugger());
607:       assertFalse(node0.isNull());
608:       assertFalse(node0.isTrue());
609:       assertFalse(node0.isVoid());
610:       assertFalse(node0.isCall());
611:       assertFalse(node0.isGetElem());
612:       assertFalse(node0.isExprResult());
613:       assertFalse(node0.isAssign());
614:       assertFalse(node0.isWhile());
615:       assertFalse(node0.isDec());
616:       assertFalse(node0.isTypeOf());
617:       assertFalse(node0.isComma());
618:       assertFalse(node0.hasChildren());
619:       assertEquals(53, Node.INPUT_ID);
620:       assertEquals(43, Node.IS_CONSTANT_NAME);
621:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
622:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
623:       assertEquals(29, Node.JSDOC_INFO_PROP);
624:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
625:       assertEquals(36, Node.QUOTED_PROP);
626:       assertEquals(55, Node.INFERRED_FUNCTION);
627:       assertEquals(39, Node.EMPTY_BLOCK);
628:       assertEquals(46, Node.IS_NAMESPACE);
629:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
630:       assertEquals(30, Node.VAR_ARGS_NAME);
631:       assertEquals(40, Node.ORIGINALNAME_PROP);
632:       assertEquals(47, Node.IS_DISPATCHER);
633:       assertEquals(2, Node.POST_FLAG);
634:       assertEquals(54, Node.SLASH_V);
635:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
636:       assertEquals(57, Node.REFLECTED_OBJECT);
637:       assertEquals(57, Node.LAST_PROP);
638:       assertEquals(1, Node.DECR_FLAG);
639:       assertEquals(50, Node.FREE_CALL);
640:       assertEquals(51, Node.STATIC_SOURCE_FILE);
641:       assertEquals(15, Node.NO_SIDE_EFFECTS);
642:       assertEquals(8, Node.FLAG_NO_THROWS);
643:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
644:       assertEquals(52, Node.LENGTH);
645:       assertEquals(48, Node.DIRECTIVES);
646:       assertEquals(37, Node.OPT_ARG_NAME);
647:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
648:       assertEquals(56, Node.CHANGE_TIME);
649:       assertEquals(12, Node.COLUMN_BITS);
650:       assertEquals(32, Node.INCRDECR_PROP);
651:       assertEquals(49, Node.DIRECT_EVAL);
652:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
653:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
654:       assertEquals(4095, Node.COLUMN_MASK);
655:       
656:       Iterator<Node> iterator1 = node_AncestorIterable0.iterator();
657:       assertNotSame(iterator1, iterator0);
658:       assertFalse(node0.isIn());
659:       assertFalse(node0.isEmpty());
660:       assertEquals(695, node0.getLineno());
661:       assertFalse(node0.isString());
662:       assertFalse(node0.isIf());
663:       assertFalse(node0.isDelProp());
664:       assertFalse(node0.isGetterDef());
665:       assertFalse(node0.isNE());
666:       assertFalse(node0.isSwitch());
667:       assertFalse(node0.isFunction());
668:       assertFalse(node0.isArrayLit());
669:       assertFalse(node0.isInc());
670:       assertEquals(147, node0.getCharno());
671:       assertFalse(node0.isDefaultCase());
672:       assertFalse(node0.isFalse());
673:       assertEquals(2846867, node0.getSourcePosition());
674:       assertFalse(node0.isThrow());
675:       assertEquals(0, node0.getChildCount());
676:       assertFalse(node0.isSetterDef());
677:       assertFalse(node0.isCatch());
678:       assertFalse(node0.isInstanceOf());
679:       assertFalse(node0.isParamList());
680:       assertFalse(node0.isStringKey());
681:       assertFalse(node0.isTry());
682:       assertFalse(node0.hasOneChild());
683:       assertFalse(node0.isScript());
684:       assertFalse(node0.isWith());
685:       assertFalse(node0.isCase());
686:       assertFalse(node0.isRegExp());
687:       assertFalse(node0.isThis());
688:       assertFalse(node0.isHook());
689:       assertFalse(node0.isBlock());
690:       assertFalse(node0.isFor());
691:       assertFalse(node0.isOr());
692:       assertFalse(node0.isReturn());
693:       assertFalse(node0.isAssignAdd());
694:       assertFalse(node0.isLabel());
695:       assertFalse(node0.hasMoreThanOneChild());
696:       assertFalse(node0.isContinue());
697:       assertEquals(695, node0.getType());
698:       assertFalse(node0.isLabelName());
699:       assertFalse(node0.isNumber());
700:       assertFalse(node0.isNew());
701:       assertFalse(node0.isCast());
702:       assertFalse(node0.isAdd());
703:       assertFalse(node0.isDo());
704:       assertFalse(node0.isVar());
705:       assertFalse(node0.isBreak());
706:       assertFalse(node0.isGetProp());
707:       assertFalse(node0.isNot());
708:       assertFalse(node0.isName());
709:       assertFalse(node0.isObjectLit());
710:       assertFalse(node0.isAnd());
711:       assertFalse(node0.isDebugger());
712:       assertFalse(node0.isNull());
713:       assertFalse(node0.isTrue());
714:       assertFalse(node0.isVoid());
715:       assertFalse(node0.isCall());
716:       assertFalse(node0.isGetElem());
717:       assertFalse(node0.isExprResult());
718:       assertFalse(node0.isAssign());
719:       assertFalse(node0.isWhile());
720:       assertFalse(node0.isDec());
721:       assertFalse(node0.isTypeOf());
722:       assertFalse(node0.isComma());
723:       assertFalse(node0.hasChildren());
724:       assertFalse(iterator1.equals((Object)iterator0));
725:       assertEquals(53, Node.INPUT_ID);
726:       assertEquals(43, Node.IS_CONSTANT_NAME);
727:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
728:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
729:       assertEquals(29, Node.JSDOC_INFO_PROP);
730:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
731:       assertEquals(36, Node.QUOTED_PROP);
732:       assertEquals(55, Node.INFERRED_FUNCTION);
733:       assertEquals(39, Node.EMPTY_BLOCK);
734:       assertEquals(46, Node.IS_NAMESPACE);
735:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
736:       assertEquals(30, Node.VAR_ARGS_NAME);
737:       assertEquals(40, Node.ORIGINALNAME_PROP);
738:       assertEquals(47, Node.IS_DISPATCHER);
739:       assertEquals(2, Node.POST_FLAG);
740:       assertEquals(54, Node.SLASH_V);
741:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
742:       assertEquals(57, Node.REFLECTED_OBJECT);
743:       assertEquals(57, Node.LAST_PROP);
744:       assertEquals(1, Node.DECR_FLAG);
745:       assertEquals(50, Node.FREE_CALL);
746:       assertEquals(51, Node.STATIC_SOURCE_FILE);
747:       assertEquals(15, Node.NO_SIDE_EFFECTS);
748:       assertEquals(8, Node.FLAG_NO_THROWS);
749:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
750:       assertEquals(52, Node.LENGTH);
751:       assertEquals(48, Node.DIRECTIVES);
752:       assertEquals(37, Node.OPT_ARG_NAME);
753:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
754:       assertEquals(56, Node.CHANGE_TIME);
755:       assertEquals(12, Node.COLUMN_BITS);
756:       assertEquals(32, Node.INCRDECR_PROP);
757:       assertEquals(49, Node.DIRECT_EVAL);
758:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
759:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
760:       assertEquals(4095, Node.COLUMN_MASK);
761:       assertNotNull(iterator1);
762:       
763:       Iterator<Node> iterator2 = node_AncestorIterable0.iterator();
764:       assertNotSame(iterator2, iterator1);
765:       assertNotSame(iterator2, iterator0);
766:       assertFalse(node0.isIn());
767:       assertFalse(node0.isEmpty());
768:       assertEquals(695, node0.getLineno());
769:       assertFalse(node0.isString());
770:       assertFalse(node0.isIf());
771:       assertFalse(node0.isDelProp());
772:       assertFalse(node0.isGetterDef());
773:       assertFalse(node0.isNE());
774:       assertFalse(node0.isSwitch());
775:       assertFalse(node0.isFunction());
776:       assertFalse(node0.isArrayLit());
777:       assertFalse(node0.isInc());
778:       assertEquals(147, node0.getCharno());
779:       assertFalse(node0.isDefaultCase());
780:       assertFalse(node0.isFalse());
781:       assertEquals(2846867, node0.getSourcePosition());
782:       assertFalse(node0.isThrow());
783:       assertEquals(0, node0.getChildCount());
784:       assertFalse(node0.isSetterDef());
785:       assertFalse(node0.isCatch());
786:       assertFalse(node0.isInstanceOf());
787:       assertFalse(node0.isParamList());
788:       assertFalse(node0.isStringKey());
789:       assertFalse(node0.isTry());
790:       assertFalse(node0.hasOneChild());
791:       assertFalse(node0.isScript());
792:       assertFalse(node0.isWith());
793:       assertFalse(node0.isCase());
794:       assertFalse(node0.isRegExp());
795:       assertFalse(node0.isThis());
796:       assertFalse(node0.isHook());
797:       assertFalse(node0.isBlock());
798:       assertFalse(node0.isFor());
799:       assertFalse(node0.isOr());
800:       assertFalse(node0.isReturn());
801:       assertFalse(node0.isAssignAdd());
802:       assertFalse(node0.isLabel());
803:       assertFalse(node0.hasMoreThanOneChild());
804:       assertFalse(node0.isContinue());
805:       assertEquals(695, node0.getType());
806:       assertFalse(node0.isLabelName());
807:       assertFalse(node0.isNumber());
808:       assertFalse(node0.isNew());
809:       assertFalse(node0.isCast());
810:       assertFalse(node0.isAdd());
811:       assertFalse(node0.isDo());
812:       assertFalse(node0.isVar());
813:       assertFalse(node0.isBreak());
814:       assertFalse(node0.isGetProp());
815:       assertFalse(node0.isNot());
816:       assertFalse(node0.isName());
817:       assertFalse(node0.isObjectLit());
818:       assertFalse(node0.isAnd());
819:       assertFalse(node0.isDebugger());
820:       assertFalse(node0.isNull());
821:       assertFalse(node0.isTrue());
822:       assertFalse(node0.isVoid());
823:       assertFalse(node0.isCall());
824:       assertFalse(node0.isGetElem());
825:       assertFalse(node0.isExprResult());
826:       assertFalse(node0.isAssign());
827:       assertFalse(node0.isWhile());
828:       assertFalse(node0.isDec());
829:       assertFalse(node0.isTypeOf());
830:       assertFalse(node0.isComma());
831:       assertFalse(node0.hasChildren());
832:       assertFalse(iterator2.equals((Object)iterator1));
833:       assertFalse(iterator2.equals((Object)iterator0));
834:       assertEquals(53, Node.INPUT_ID);
835:       assertEquals(43, Node.IS_CONSTANT_NAME);
836:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
837:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
838:       assertEquals(29, Node.JSDOC_INFO_PROP);
839:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
840:       assertEquals(36, Node.QUOTED_PROP);
841:       assertEquals(55, Node.INFERRED_FUNCTION);
842:       assertEquals(39, Node.EMPTY_BLOCK);
843:       assertEquals(46, Node.IS_NAMESPACE);
844:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
845:       assertEquals(30, Node.VAR_ARGS_NAME);
846:       assertEquals(40, Node.ORIGINALNAME_PROP);
847:       assertEquals(47, Node.IS_DISPATCHER);
848:       assertEquals(2, Node.POST_FLAG);
849:       assertEquals(54, Node.SLASH_V);
850:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
851:       assertEquals(57, Node.REFLECTED_OBJECT);
852:       assertEquals(57, Node.LAST_PROP);
853:       assertEquals(1, Node.DECR_FLAG);
854:       assertEquals(50, Node.FREE_CALL);
855:       assertEquals(51, Node.STATIC_SOURCE_FILE);
856:       assertEquals(15, Node.NO_SIDE_EFFECTS);
857:       assertEquals(8, Node.FLAG_NO_THROWS);
858:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
859:       assertEquals(52, Node.LENGTH);
860:       assertEquals(48, Node.DIRECTIVES);
861:       assertEquals(37, Node.OPT_ARG_NAME);
862:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
863:       assertEquals(56, Node.CHANGE_TIME);
864:       assertEquals(12, Node.COLUMN_BITS);
865:       assertEquals(32, Node.INCRDECR_PROP);
866:       assertEquals(49, Node.DIRECT_EVAL);
867:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
868:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
869:       assertEquals(4095, Node.COLUMN_MASK);
870:       assertNotNull(iterator2);
871:       
872:       int int1 = node0.getIntProp(695);
873:       assertEquals(0, int1);
874:       assertFalse(node0.isIn());
875:       assertFalse(node0.isEmpty());
876:       assertEquals(695, node0.getLineno());
877:       assertFalse(node0.isString());
878:       assertFalse(node0.isIf());
879:       assertFalse(node0.isDelProp());
880:       assertFalse(node0.isGetterDef());
881:       assertFalse(node0.isNE());
882:       assertFalse(node0.isSwitch());
883:       assertFalse(node0.isFunction());
884:       assertFalse(node0.isArrayLit());
885:       assertFalse(node0.isInc());
886:       assertEquals(147, node0.getCharno());
887:       assertFalse(node0.isDefaultCase());
888:       assertFalse(node0.isFalse());
889:       assertEquals(2846867, node0.getSourcePosition());
890:       assertFalse(node0.isThrow());
891:       assertEquals(0, node0.getChildCount());
892:       assertFalse(node0.isSetterDef());
893:       assertFalse(node0.isCatch());
894:       assertFalse(node0.isInstanceOf());
895:       assertFalse(node0.isParamList());
896:       assertFalse(node0.isStringKey());
897:       assertFalse(node0.isTry());
898:       assertFalse(node0.hasOneChild());
899:       assertFalse(node0.isScript());
900:       assertFalse(node0.isWith());
901:       assertFalse(node0.isCase());
902:       assertFalse(node0.isRegExp());
903:       assertFalse(node0.isThis());
904:       assertFalse(node0.isHook());
905:       assertFalse(node0.isBlock());
906:       assertFalse(node0.isFor());
907:       assertFalse(node0.isOr());
908:       assertFalse(node0.isReturn());
909:       assertFalse(node0.isAssignAdd());
910:       assertFalse(node0.isLabel());
911:       assertFalse(node0.hasMoreThanOneChild());
912:       assertFalse(node0.isContinue());
913:       assertEquals(695, node0.getType());
914:       assertFalse(node0.isLabelName());
915:       assertFalse(node0.isNumber());
916:       assertFalse(node0.isNew());
917:       assertFalse(node0.isCast());
918:       assertFalse(node0.isAdd());
919:       assertFalse(node0.isDo());
920:       assertFalse(node0.isVar());
921:       assertFalse(node0.isBreak());
922:       assertFalse(node0.isGetProp());
923:       assertFalse(node0.isNot());
924:       assertFalse(node0.isName());
925:       assertFalse(node0.isObjectLit());
926:       assertFalse(node0.isAnd());
927:       assertFalse(node0.isDebugger());
928:       assertFalse(node0.isNull());
929:       assertFalse(node0.isTrue());
930:       assertFalse(node0.isVoid());
931:       assertFalse(node0.isCall());
932:       assertFalse(node0.isGetElem());
933:       assertFalse(node0.isExprResult());
934:       assertFalse(node0.isAssign());
935:       assertFalse(node0.isWhile());
936:       assertFalse(node0.isDec());
937:       assertFalse(node0.isTypeOf());
938:       assertFalse(node0.isComma());
939:       assertFalse(node0.hasChildren());
940:       assertTrue(int1 == int0);
941:       assertEquals(53, Node.INPUT_ID);
942:       assertEquals(43, Node.IS_CONSTANT_NAME);
943:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
944:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
945:       assertEquals(29, Node.JSDOC_INFO_PROP);
946:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
947:       assertEquals(36, Node.QUOTED_PROP);
948:       assertEquals(55, Node.INFERRED_FUNCTION);
949:       assertEquals(39, Node.EMPTY_BLOCK);
950:       assertEquals(46, Node.IS_NAMESPACE);
951:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
952:       assertEquals(30, Node.VAR_ARGS_NAME);
953:       assertEquals(40, Node.ORIGINALNAME_PROP);
954:       assertEquals(47, Node.IS_DISPATCHER);
955:       assertEquals(2, Node.POST_FLAG);
956:       assertEquals(54, Node.SLASH_V);
957:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
958:       assertEquals(57, Node.REFLECTED_OBJECT);
959:       assertEquals(57, Node.LAST_PROP);
960:       assertEquals(1, Node.DECR_FLAG);
961:       assertEquals(50, Node.FREE_CALL);
962:       assertEquals(51, Node.STATIC_SOURCE_FILE);
963:       assertEquals(15, Node.NO_SIDE_EFFECTS);
964:       assertEquals(8, Node.FLAG_NO_THROWS);
965:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
966:       assertEquals(52, Node.LENGTH);
967:       assertEquals(48, Node.DIRECTIVES);
968:       assertEquals(37, Node.OPT_ARG_NAME);
969:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
970:       assertEquals(56, Node.CHANGE_TIME);
971:       assertEquals(12, Node.COLUMN_BITS);
972:       assertEquals(32, Node.INCRDECR_PROP);
973:       assertEquals(49, Node.DIRECT_EVAL);
974:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
975:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
976:       assertEquals(4095, Node.COLUMN_MASK);
977:       
978:       boolean boolean0 = node0.isWhile();
979:       assertFalse(boolean0);
980:       assertFalse(node0.isIn());
981:       assertFalse(node0.isEmpty());
982:       assertEquals(695, node0.getLineno());
983:       assertFalse(node0.isString());
984:       assertFalse(node0.isIf());
985:       assertFalse(node0.isDelProp());
986:       assertFalse(node0.isGetterDef());
987:       assertFalse(node0.isNE());
988:       assertFalse(node0.isSwitch());
989:       assertFalse(node0.isFunction());
990:       assertFalse(node0.isArrayLit());
991:       assertFalse(node0.isInc());
992:       assertEquals(147, node0.getCharno());
993:       assertFalse(node0.isDefaultCase());
994:       assertFalse(node0.isFalse());
995:       assertEquals(2846867, node0.getSourcePosition());
996:       assertFalse(node0.isThrow());
997:       assertEquals(0, node0.getChildCount());
998:       assertFalse(node0.isSetterDef());
999:       assertFalse(node0.isCatch());
1000:       assertFalse(node0.isInstanceOf());
1001:       assertFalse(node0.isParamList());
1002:       assertFalse(node0.isStringKey());
1003:       assertFalse(node0.isTry());
1004:       assertFalse(node0.hasOneChild());
1005:       assertFalse(node0.isScript());
1006:       assertFalse(node0.isWith());
1007:       assertFalse(node0.isCase());
1008:       assertFalse(node0.isRegExp());
1009:       assertFalse(node0.isThis());
1010:       assertFalse(node0.isHook());
1011:       assertFalse(node0.isBlock());
1012:       assertFalse(node0.isFor());
1013:       assertFalse(node0.isOr());
1014:       assertFalse(node0.isReturn());
1015:       assertFalse(node0.isAssignAdd());
1016:       assertFalse(node0.isLabel());
1017:       assertFalse(node0.hasMoreThanOneChild());
1018:       assertFalse(node0.isContinue());
1019:       assertEquals(695, node0.getType());
1020:       assertFalse(node0.isLabelName());
1021:       assertFalse(node0.isNumber());
1022:       assertFalse(node0.isNew());
1023:       assertFalse(node0.isCast());
1024:       assertFalse(node0.isAdd());
1025:       assertFalse(node0.isDo());
1026:       assertFalse(node0.isVar());
1027:       assertFalse(node0.isBreak());
1028:       assertFalse(node0.isGetProp());
1029:       assertFalse(node0.isNot());
1030:       assertFalse(node0.isName());
1031:       assertFalse(node0.isObjectLit());
1032:       assertFalse(node0.isAnd());
1033:       assertFalse(node0.isDebugger());
1034:       assertFalse(node0.isNull());
1035:       assertFalse(node0.isTrue());
1036:       assertFalse(node0.isVoid());
1037:       assertFalse(node0.isCall());
1038:       assertFalse(node0.isGetElem());
1039:       assertFalse(node0.isExprResult());
1040:       assertFalse(node0.isAssign());
1041:       assertFalse(node0.isWhile());
1042:       assertFalse(node0.isDec());
1043:       assertFalse(node0.isTypeOf());
1044:       assertFalse(node0.isComma());
1045:       assertFalse(node0.hasChildren());
1046:       assertEquals(53, Node.INPUT_ID);
1047:       assertEquals(43, Node.IS_CONSTANT_NAME);
1048:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1049:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1050:       assertEquals(29, Node.JSDOC_INFO_PROP);
1051:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1052:       assertEquals(36, Node.QUOTED_PROP);
1053:       assertEquals(55, Node.INFERRED_FUNCTION);
1054:       assertEquals(39, Node.EMPTY_BLOCK);
1055:       assertEquals(46, Node.IS_NAMESPACE);
1056:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1057:       assertEquals(30, Node.VAR_ARGS_NAME);
1058:       assertEquals(40, Node.ORIGINALNAME_PROP);
1059:       assertEquals(47, Node.IS_DISPATCHER);
1060:       assertEquals(2, Node.POST_FLAG);
1061:       assertEquals(54, Node.SLASH_V);
1062:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1063:       assertEquals(57, Node.REFLECTED_OBJECT);
1064:       assertEquals(57, Node.LAST_PROP);
1065:       assertEquals(1, Node.DECR_FLAG);
1066:       assertEquals(50, Node.FREE_CALL);
1067:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1068:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1069:       assertEquals(8, Node.FLAG_NO_THROWS);
1070:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1071:       assertEquals(52, Node.LENGTH);
1072:       assertEquals(48, Node.DIRECTIVES);
1073:       assertEquals(37, Node.OPT_ARG_NAME);
1074:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1075:       assertEquals(56, Node.CHANGE_TIME);
1076:       assertEquals(12, Node.COLUMN_BITS);
1077:       assertEquals(32, Node.INCRDECR_PROP);
1078:       assertEquals(49, Node.DIRECT_EVAL);
1079:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1080:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1081:       assertEquals(4095, Node.COLUMN_MASK);
1082:       
1083:       Set<String> set0 = node0.getDirectives();
1084:       assertFalse(node0.isIn());
1085:       assertFalse(node0.isEmpty());
1086:       assertEquals(695, node0.getLineno());
1087:       assertFalse(node0.isString());
1088:       assertFalse(node0.isIf());
1089:       assertFalse(node0.isDelProp());
1090:       assertFalse(node0.isGetterDef());
1091:       assertFalse(node0.isNE());
1092:       assertFalse(node0.isSwitch());
1093:       assertFalse(node0.isFunction());
1094:       assertFalse(node0.isArrayLit());
1095:       assertFalse(node0.isInc());
1096:       assertEquals(147, node0.getCharno());
1097:       assertFalse(node0.isDefaultCase());
1098:       assertFalse(node0.isFalse());
1099:       assertEquals(2846867, node0.getSourcePosition());
1100:       assertFalse(node0.isThrow());
1101:       assertEquals(0, node0.getChildCount());
1102:       assertFalse(node0.isSetterDef());
1103:       assertFalse(node0.isCatch());
1104:       assertFalse(node0.isInstanceOf());
1105:       assertFalse(node0.isParamList());
1106:       assertFalse(node0.isStringKey());
1107:       assertFalse(node0.isTry());
1108:       assertFalse(node0.hasOneChild());
1109:       assertFalse(node0.isScript());
1110:       assertFalse(node0.isWith());
1111:       assertFalse(node0.isCase());
1112:       assertFalse(node0.isRegExp());
1113:       assertFalse(node0.isThis());
1114:       assertFalse(node0.isHook());
1115:       assertFalse(node0.isBlock());
1116:       assertFalse(node0.isFor());
1117:       assertFalse(node0.isOr());
1118:       assertFalse(node0.isReturn());
1119:       assertFalse(node0.isAssignAdd());
1120:       assertFalse(node0.isLabel());
1121:       assertFalse(node0.hasMoreThanOneChild());
1122:       assertFalse(node0.isContinue());
1123:       assertEquals(695, node0.getType());
1124:       assertFalse(node0.isLabelName());
1125:       assertFalse(node0.isNumber());
1126:       assertFalse(node0.isNew());
1127:       assertFalse(node0.isCast());
1128:       assertFalse(node0.isAdd());
1129:       assertFalse(node0.isDo());
1130:       assertFalse(node0.isVar());
1131:       assertFalse(node0.isBreak());
1132:       assertFalse(node0.isGetProp());
1133:       assertFalse(node0.isNot());
1134:       assertFalse(node0.isName());
1135:       assertFalse(node0.isObjectLit());
1136:       assertFalse(node0.isAnd());
1137:       assertFalse(node0.isDebugger());
1138:       assertFalse(node0.isNull());
1139:       assertFalse(node0.isTrue());
1140:       assertFalse(node0.isVoid());
1141:       assertFalse(node0.isCall());
1142:       assertFalse(node0.isGetElem());
1143:       assertFalse(node0.isExprResult());
1144:       assertFalse(node0.isAssign());
1145:       assertFalse(node0.isWhile());
1146:       assertFalse(node0.isDec());
1147:       assertFalse(node0.isTypeOf());
1148:       assertFalse(node0.isComma());
1149:       assertFalse(node0.hasChildren());
1150:       assertEquals(53, Node.INPUT_ID);
1151:       assertEquals(43, Node.IS_CONSTANT_NAME);
1152:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1153:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1154:       assertEquals(29, Node.JSDOC_INFO_PROP);
1155:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1156:       assertEquals(36, Node.QUOTED_PROP);
1157:       assertEquals(55, Node.INFERRED_FUNCTION);
1158:       assertEquals(39, Node.EMPTY_BLOCK);
1159:       assertEquals(46, Node.IS_NAMESPACE);
1160:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1161:       assertEquals(30, Node.VAR_ARGS_NAME);
1162:       assertEquals(40, Node.ORIGINALNAME_PROP);
1163:       assertEquals(47, Node.IS_DISPATCHER);
1164:       assertEquals(2, Node.POST_FLAG);
1165:       assertEquals(54, Node.SLASH_V);
1166:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1167:       assertEquals(57, Node.REFLECTED_OBJECT);
1168:       assertEquals(57, Node.LAST_PROP);
1169:       assertEquals(1, Node.DECR_FLAG);
1170:       assertEquals(50, Node.FREE_CALL);
1171:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1172:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1173:       assertEquals(8, Node.FLAG_NO_THROWS);
1174:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1175:       assertEquals(52, Node.LENGTH);
1176:       assertEquals(48, Node.DIRECTIVES);
1177:       assertEquals(37, Node.OPT_ARG_NAME);
1178:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1179:       assertEquals(56, Node.CHANGE_TIME);
1180:       assertEquals(12, Node.COLUMN_BITS);
1181:       assertEquals(32, Node.INCRDECR_PROP);
1182:       assertEquals(49, Node.DIRECT_EVAL);
1183:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1184:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1185:       assertEquals(4095, Node.COLUMN_MASK);
1186:       assertNull(set0);
1187:       
1188:       boolean boolean1 = node0.isObjectLit();
1189:       assertFalse(boolean1);
1190:       assertFalse(node0.isIn());
1191:       assertFalse(node0.isEmpty());
1192:       assertEquals(695, node0.getLineno());
1193:       assertFalse(node0.isString());
1194:       assertFalse(node0.isIf());
1195:       assertFalse(node0.isDelProp());
1196:       assertFalse(node0.isGetterDef());
1197:       assertFalse(node0.isNE());
1198:       assertFalse(node0.isSwitch());
1199:       assertFalse(node0.isFunction());
1200:       assertFalse(node0.isArrayLit());
1201:       assertFalse(node0.isInc());
1202:       assertEquals(147, node0.getCharno());
1203:       assertFalse(node0.isDefaultCase());
1204:       assertFalse(node0.isFalse());
1205:       assertEquals(2846867, node0.getSourcePosition());
1206:       assertFalse(node0.isThrow());
1207:       assertEquals(0, node0.getChildCount());
1208:       assertFalse(node0.isSetterDef());
1209:       assertFalse(node0.isCatch());
1210:       assertFalse(node0.isInstanceOf());
1211:       assertFalse(node0.isParamList());
1212:       assertFalse(node0.isStringKey());
1213:       assertFalse(node0.isTry());
1214:       assertFalse(node0.hasOneChild());
1215:       assertFalse(node0.isScript());
1216:       assertFalse(node0.isWith());
1217:       assertFalse(node0.isCase());
1218:       assertFalse(node0.isRegExp());
1219:       assertFalse(node0.isThis());
1220:       assertFalse(node0.isHook());
1221:       assertFalse(node0.isBlock());
1222:       assertFalse(node0.isFor());
1223:       assertFalse(node0.isOr());
1224:       assertFalse(node0.isReturn());
1225:       assertFalse(node0.isAssignAdd());
1226:       assertFalse(node0.isLabel());
1227:       assertFalse(node0.hasMoreThanOneChild());
1228:       assertFalse(node0.isContinue());
1229:       assertEquals(695, node0.getType());
1230:       assertFalse(node0.isLabelName());
1231:       assertFalse(node0.isNumber());
1232:       assertFalse(node0.isNew());
1233:       assertFalse(node0.isCast());
1234:       assertFalse(node0.isAdd());
1235:       assertFalse(node0.isDo());
1236:       assertFalse(node0.isVar());
1237:       assertFalse(node0.isBreak());
1238:       assertFalse(node0.isGetProp());
1239:       assertFalse(node0.isNot());
1240:       assertFalse(node0.isName());
1241:       assertFalse(node0.isObjectLit());
1242:       assertFalse(node0.isAnd());
1243:       assertFalse(node0.isDebugger());
1244:       assertFalse(node0.isNull());
1245:       assertFalse(node0.isTrue());
1246:       assertFalse(node0.isVoid());
1247:       assertFalse(node0.isCall());
1248:       assertFalse(node0.isGetElem());
1249:       assertFalse(node0.isExprResult());
1250:       assertFalse(node0.isAssign());
1251:       assertFalse(node0.isWhile());
1252:       assertFalse(node0.isDec());
1253:       assertFalse(node0.isTypeOf());
1254:       assertFalse(node0.isComma());
1255:       assertFalse(node0.hasChildren());
1256:       assertTrue(boolean1 == boolean0);
1257:       assertEquals(53, Node.INPUT_ID);
1258:       assertEquals(43, Node.IS_CONSTANT_NAME);
1259:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1260:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1261:       assertEquals(29, Node.JSDOC_INFO_PROP);
1262:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1263:       assertEquals(36, Node.QUOTED_PROP);
1264:       assertEquals(55, Node.INFERRED_FUNCTION);
1265:       assertEquals(39, Node.EMPTY_BLOCK);
1266:       assertEquals(46, Node.IS_NAMESPACE);
1267:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1268:       assertEquals(30, Node.VAR_ARGS_NAME);
1269:       assertEquals(40, Node.ORIGINALNAME_PROP);
1270:       assertEquals(47, Node.IS_DISPATCHER);
1271:       assertEquals(2, Node.POST_FLAG);
1272:       assertEquals(54, Node.SLASH_V);
1273:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1274:       assertEquals(57, Node.REFLECTED_OBJECT);
1275:       assertEquals(57, Node.LAST_PROP);
1276:       assertEquals(1, Node.DECR_FLAG);
1277:       assertEquals(50, Node.FREE_CALL);
1278:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1279:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1280:       assertEquals(8, Node.FLAG_NO_THROWS);
1281:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1282:       assertEquals(52, Node.LENGTH);
1283:       assertEquals(48, Node.DIRECTIVES);
1284:       assertEquals(37, Node.OPT_ARG_NAME);
1285:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1286:       assertEquals(56, Node.CHANGE_TIME);
1287:       assertEquals(12, Node.COLUMN_BITS);
1288:       assertEquals(32, Node.INCRDECR_PROP);
1289:       assertEquals(49, Node.DIRECT_EVAL);
1290:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1291:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1292:       assertEquals(4095, Node.COLUMN_MASK);
1293:       
1294:       node0.setDirectives((Set<String>) null);
1295:       assertFalse(node0.isIn());
1296:       assertFalse(node0.isEmpty());
1297:       assertEquals(695, node0.getLineno());
1298:       assertFalse(node0.isString());
1299:       assertFalse(node0.isIf());
1300:       assertFalse(node0.isDelProp());
1301:       assertFalse(node0.isGetterDef());
1302:       assertFalse(node0.isNE());
1303:       assertFalse(node0.isSwitch());
1304:       assertFalse(node0.isFunction());
1305:       assertFalse(node0.isArrayLit());
1306:       assertFalse(node0.isInc());
1307:       assertEquals(147, node0.getCharno());
1308:       assertFalse(node0.isDefaultCase());
1309:       assertFalse(node0.isFalse());
1310:       assertEquals(2846867, node0.getSourcePosition());
1311:       assertFalse(node0.isThrow());
1312:       assertEquals(0, node0.getChildCount());
1313:       assertFalse(node0.isSetterDef());
1314:       assertFalse(node0.isCatch());
1315:       assertFalse(node0.isInstanceOf());
1316:       assertFalse(node0.isParamList());
1317:       assertFalse(node0.isStringKey());
1318:       assertFalse(node0.isTry());
1319:       assertFalse(node0.hasOneChild());
1320:       assertFalse(node0.isScript());
1321:       assertFalse(node0.isWith());
1322:       assertFalse(node0.isCase());
1323:       assertFalse(node0.isRegExp());
1324:       assertFalse(node0.isThis());
1325:       assertFalse(node0.isHook());
1326:       assertFalse(node0.isBlock());
1327:       assertFalse(node0.isFor());
1328:       assertFalse(node0.isOr());
1329:       assertFalse(node0.isReturn());
1330:       assertFalse(node0.isAssignAdd());
1331:       assertFalse(node0.isLabel());
1332:       assertFalse(node0.hasMoreThanOneChild());
1333:       assertFalse(node0.isContinue());
1334:       assertEquals(695, node0.getType());
1335:       assertFalse(node0.isLabelName());
1336:       assertFalse(node0.isNumber());
1337:       assertFalse(node0.isNew());
1338:       assertFalse(node0.isCast());
1339:       assertFalse(node0.isAdd());
1340:       assertFalse(node0.isDo());
1341:       assertFalse(node0.isVar());
1342:       assertFalse(node0.isBreak());
1343:       assertFalse(node0.isGetProp());
1344:       assertFalse(node0.isNot());
1345:       assertFalse(node0.isName());
1346:       assertFalse(node0.isObjectLit());
1347:       assertFalse(node0.isAnd());
1348:       assertFalse(node0.isDebugger());
1349:       assertFalse(node0.isNull());
1350:       assertFalse(node0.isTrue());
1351:       assertFalse(node0.isVoid());
1352:       assertFalse(node0.isCall());
1353:       assertFalse(node0.isGetElem());
1354:       assertFalse(node0.isExprResult());
1355:       assertFalse(node0.isAssign());
1356:       assertFalse(node0.isWhile());
1357:       assertFalse(node0.isDec());
1358:       assertFalse(node0.isTypeOf());
1359:       assertFalse(node0.isComma());
1360:       assertFalse(node0.hasChildren());
1361:       assertEquals(53, Node.INPUT_ID);
1362:       assertEquals(43, Node.IS_CONSTANT_NAME);
1363:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1364:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1365:       assertEquals(29, Node.JSDOC_INFO_PROP);
1366:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1367:       assertEquals(36, Node.QUOTED_PROP);
1368:       assertEquals(55, Node.INFERRED_FUNCTION);
1369:       assertEquals(39, Node.EMPTY_BLOCK);
1370:       assertEquals(46, Node.IS_NAMESPACE);
1371:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1372:       assertEquals(30, Node.VAR_ARGS_NAME);
1373:       assertEquals(40, Node.ORIGINALNAME_PROP);
1374:       assertEquals(47, Node.IS_DISPATCHER);
1375:       assertEquals(2, Node.POST_FLAG);
1376:       assertEquals(54, Node.SLASH_V);
1377:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1378:       assertEquals(57, Node.REFLECTED_OBJECT);
1379:       assertEquals(57, Node.LAST_PROP);
1380:       assertEquals(1, Node.DECR_FLAG);
1381:       assertEquals(50, Node.FREE_CALL);
1382:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1383:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1384:       assertEquals(8, Node.FLAG_NO_THROWS);
1385:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1386:       assertEquals(52, Node.LENGTH);
1387:       assertEquals(48, Node.DIRECTIVES);
1388:       assertEquals(37, Node.OPT_ARG_NAME);
1389:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1390:       assertEquals(56, Node.CHANGE_TIME);
1391:       assertEquals(12, Node.COLUMN_BITS);
1392:       assertEquals(32, Node.INCRDECR_PROP);
1393:       assertEquals(49, Node.DIRECT_EVAL);
1394:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1395:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1396:       assertEquals(4095, Node.COLUMN_MASK);
1397:       
1398:       Node node1 = Node.newString("");
1399:       assertNotSame(node1, node0);
1400:       assertFalse(node1.hasChildren());
1401:       assertFalse(node1.isTypeOf());
1402:       assertFalse(node1.isNumber());
1403:       assertFalse(node1.isAssign());
1404:       assertFalse(node1.isLabelName());
1405:       assertFalse(node1.isDec());
1406:       assertEquals((-1), node1.getSourcePosition());
1407:       assertFalse(node1.isAssignAdd());
1408:       assertFalse(node1.isReturn());
1409:       assertFalse(node1.isLabel());
1410:       assertEquals((-1), node1.getLineno());
1411:       assertFalse(node1.isContinue());
1412:       assertFalse(node1.hasMoreThanOneChild());
1413:       assertFalse(node1.isGetElem());
1414:       assertFalse(node1.isExprResult());
1415:       assertFalse(node1.isCast());
1416:       assertFalse(node1.isDo());
1417:       assertFalse(node1.isOr());
1418:       assertFalse(node1.isNew());
1419:       assertFalse(node1.isAdd());
1420:       assertFalse(node1.isBreak());
1421:       assertFalse(node1.isNull());
1422:       assertFalse(node1.isComma());
1423:       assertFalse(node1.isThrow());
1424:       assertFalse(node1.isName());
1425:       assertFalse(node1.isCall());
1426:       assertFalse(node1.isFalse());
1427:       assertFalse(node1.isNot());
1428:       assertFalse(node1.isAnd());
1429:       assertFalse(node1.isDebugger());
1430:       assertFalse(node1.isWhile());
1431:       assertFalse(node1.isObjectLit());
1432:       assertFalse(node1.isGetProp());
1433:       assertFalse(node1.isDelProp());
1434:       assertFalse(node1.isIf());
1435:       assertFalse(node1.isGetterDef());
1436:       assertFalse(node1.isNE());
1437:       assertFalse(node1.isFor());
1438:       assertFalse(node1.isArrayLit());
1439:       assertFalse(node1.isFunction());
1440:       assertFalse(node1.isDefaultCase());
1441:       assertFalse(node1.isVoid());
1442:       assertEquals(40, node1.getType());
1443:       assertFalse(node1.isTrue());
1444:       assertFalse(node1.isIn());
1445:       assertFalse(node1.isSetterDef());
1446:       assertFalse(node1.isInc());
1447:       assertFalse(node1.isEmpty());
1448:       assertFalse(node1.isThis());
1449:       assertFalse(node1.isVar());
1450:       assertFalse(node1.isParamList());
1451:       assertFalse(node1.isStringKey());
1452:       assertEquals(0, node1.getChildCount());
1453:       assertFalse(node1.isHook());
1454:       assertFalse(node1.isCatch());
1455:       assertFalse(node1.isInstanceOf());
1456:       assertFalse(node1.isWith());
1457:       assertFalse(node1.isRegExp());
1458:       assertFalse(node1.isCase());
1459:       assertEquals((-1), node1.getCharno());
1460:       assertFalse(node1.isBlock());
1461:       assertTrue(node1.isString());
1462:       assertFalse(node1.isSwitch());
1463:       assertFalse(node1.isTry());
1464:       assertFalse(node1.hasOneChild());
1465:       assertFalse(node1.isScript());
1466:       assertFalse(node1.equals((Object)node0));
1467:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1468:       assertEquals(55, Node.INFERRED_FUNCTION);
1469:       assertEquals(36, Node.QUOTED_PROP);
1470:       assertEquals(4095, Node.COLUMN_MASK);
1471:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1472:       assertEquals(43, Node.IS_CONSTANT_NAME);
1473:       assertEquals(48, Node.DIRECTIVES);
1474:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1475:       assertEquals(56, Node.CHANGE_TIME);
1476:       assertEquals(47, Node.IS_DISPATCHER);
1477:       assertEquals(40, Node.ORIGINALNAME_PROP);
1478:       assertEquals(29, Node.JSDOC_INFO_PROP);
1479:       assertEquals(2, Node.POST_FLAG);
1480:       assertEquals(8, Node.FLAG_NO_THROWS);
1481:       assertEquals(52, Node.LENGTH);
1482:       assertEquals(53, Node.INPUT_ID);
1483:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1484:       assertEquals(39, Node.EMPTY_BLOCK);
1485:       assertEquals(57, Node.LAST_PROP);
1486:       assertEquals(30, Node.VAR_ARGS_NAME);
1487:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1488:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1489:       assertEquals(57, Node.REFLECTED_OBJECT);
1490:       assertEquals(46, Node.IS_NAMESPACE);
1491:       assertEquals(54, Node.SLASH_V);
1492:       assertEquals(37, Node.OPT_ARG_NAME);
1493:       assertEquals(49, Node.DIRECT_EVAL);
1494:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1495:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1496:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1497:       assertEquals(50, Node.FREE_CALL);
1498:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1499:       assertEquals(12, Node.COLUMN_BITS);
1500:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1501:       assertEquals(1, Node.DECR_FLAG);
1502:       assertEquals(32, Node.INCRDECR_PROP);
1503:       assertNotNull(node1);
1504:       
1505:       boolean boolean2 = node1.isAssignAdd();
1506:       assertNotSame(node1, node0);
1507:       assertFalse(boolean2);
1508:       assertFalse(node1.hasChildren());
1509:       assertFalse(node1.isTypeOf());
1510:       assertFalse(node1.isNumber());
1511:       assertFalse(node1.isAssign());
1512:       assertFalse(node1.isLabelName());
1513:       assertFalse(node1.isDec());
1514:       assertEquals((-1), node1.getSourcePosition());
1515:       assertFalse(node1.isAssignAdd());
1516:       assertFalse(node1.isReturn());
1517:       assertFalse(node1.isLabel());
1518:       assertEquals((-1), node1.getLineno());
1519:       assertFalse(node1.isContinue());
1520:       assertFalse(node1.hasMoreThanOneChild());
1521:       assertFalse(node1.isGetElem());
1522:       assertFalse(node1.isExprResult());
1523:       assertFalse(node1.isCast());
1524:       assertFalse(node1.isDo());
1525:       assertFalse(node1.isOr());
1526:       assertFalse(node1.isNew());
1527:       assertFalse(node1.isAdd());
1528:       assertFalse(node1.isBreak());
1529:       assertFalse(node1.isNull());
1530:       assertFalse(node1.isComma());
1531:       assertFalse(node1.isThrow());
1532:       assertFalse(node1.isName());
1533:       assertFalse(node1.isCall());
1534:       assertFalse(node1.isFalse());
1535:       assertFalse(node1.isNot());
1536:       assertFalse(node1.isAnd());
1537:       assertFalse(node1.isDebugger());
1538:       assertFalse(node1.isWhile());
1539:       assertFalse(node1.isObjectLit());
1540:       assertFalse(node1.isGetProp());
1541:       assertFalse(node1.isDelProp());
1542:       assertFalse(node1.isIf());
1543:       assertFalse(node1.isGetterDef());
1544:       assertFalse(node1.isNE());
1545:       assertFalse(node1.isFor());
1546:       assertFalse(node1.isArrayLit());
1547:       assertFalse(node1.isFunction());
1548:       assertFalse(node1.isDefaultCase());
1549:       assertFalse(node1.isVoid());
1550:       assertEquals(40, node1.getType());
1551:       assertFalse(node1.isTrue());
1552:       assertFalse(node1.isIn());
1553:       assertFalse(node1.isSetterDef());
1554:       assertFalse(node1.isInc());
1555:       assertFalse(node1.isEmpty());
1556:       assertFalse(node1.isThis());
1557:       assertFalse(node1.isVar());
1558:       assertFalse(node1.isParamList());
1559:       assertFalse(node1.isStringKey());
1560:       assertEquals(0, node1.getChildCount());
1561:       assertFalse(node1.isHook());
1562:       assertFalse(node1.isCatch());
1563:       assertFalse(node1.isInstanceOf());
1564:       assertFalse(node1.isWith());
1565:       assertFalse(node1.isRegExp());
1566:       assertFalse(node1.isCase());
1567:       assertEquals((-1), node1.getCharno());
1568:       assertFalse(node1.isBlock());
1569:       assertTrue(node1.isString());
1570:       assertFalse(node1.isSwitch());
1571:       assertFalse(node1.isTry());
1572:       assertFalse(node1.hasOneChild());
1573:       assertFalse(node1.isScript());
1574:       assertFalse(node1.equals((Object)node0));
1575:       assertTrue(boolean2 == boolean1);
1576:       assertTrue(boolean2 == boolean0);
1577:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1578:       assertEquals(55, Node.INFERRED_FUNCTION);
1579:       assertEquals(36, Node.QUOTED_PROP);
1580:       assertEquals(4095, Node.COLUMN_MASK);
1581:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1582:       assertEquals(43, Node.IS_CONSTANT_NAME);
1583:       assertEquals(48, Node.DIRECTIVES);
1584:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1585:       assertEquals(56, Node.CHANGE_TIME);
1586:       assertEquals(47, Node.IS_DISPATCHER);
1587:       assertEquals(40, Node.ORIGINALNAME_PROP);
1588:       assertEquals(29, Node.JSDOC_INFO_PROP);
1589:       assertEquals(2, Node.POST_FLAG);
1590:       assertEquals(8, Node.FLAG_NO_THROWS);
1591:       assertEquals(52, Node.LENGTH);
1592:       assertEquals(53, Node.INPUT_ID);
1593:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1594:       assertEquals(39, Node.EMPTY_BLOCK);
1595:       assertEquals(57, Node.LAST_PROP);
1596:       assertEquals(30, Node.VAR_ARGS_NAME);
1597:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1598:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1599:       assertEquals(57, Node.REFLECTED_OBJECT);
1600:       assertEquals(46, Node.IS_NAMESPACE);
1601:       assertEquals(54, Node.SLASH_V);
1602:       assertEquals(37, Node.OPT_ARG_NAME);
1603:       assertEquals(49, Node.DIRECT_EVAL);
1604:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1605:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1606:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1607:       assertEquals(50, Node.FREE_CALL);
1608:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1609:       assertEquals(12, Node.COLUMN_BITS);
1610:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1611:       assertEquals(1, Node.DECR_FLAG);
1612:       assertEquals(32, Node.INCRDECR_PROP);
1613:       
1614:       node1.setDirectives((Set<String>) null);
1615:       assertNotSame(node1, node0);
1616:       assertFalse(node1.hasChildren());
1617:       assertFalse(node1.isTypeOf());
1618:       assertFalse(node1.isNumber());
1619:       assertFalse(node1.isAssign());
1620:       assertFalse(node1.isLabelName());
1621:       assertFalse(node1.isDec());
1622:       assertEquals((-1), node1.getSourcePosition());
1623:       assertFalse(node1.isAssignAdd());
1624:       assertFalse(node1.isReturn());
1625:       assertFalse(node1.isLabel());
1626:       assertEquals((-1), node1.getLineno());
1627:       assertFalse(node1.isContinue());
1628:       assertFalse(node1.hasMoreThanOneChild());
1629:       assertFalse(node1.isGetElem());
1630:       assertFalse(node1.isExprResult());
1631:       assertFalse(node1.isCast());
1632:       assertFalse(node1.isDo());
1633:       assertFalse(node1.isOr());
1634:       assertFalse(node1.isNew());
1635:       assertFalse(node1.isAdd());
1636:       assertFalse(node1.isBreak());
1637:       assertFalse(node1.isNull());
1638:       assertFalse(node1.isComma());
1639:       assertFalse(node1.isThrow());
1640:       assertFalse(node1.isName());
1641:       assertFalse(node1.isCall());
1642:       assertFalse(node1.isFalse());
1643:       assertFalse(node1.isNot());
1644:       assertFalse(node1.isAnd());
1645:       assertFalse(node1.isDebugger());
1646:       assertFalse(node1.isWhile());
1647:       assertFalse(node1.isObjectLit());
1648:       assertFalse(node1.isGetProp());
1649:       assertFalse(node1.isDelProp());
1650:       assertFalse(node1.isIf());
1651:       assertFalse(node1.isGetterDef());
1652:       assertFalse(node1.isNE());
1653:       assertFalse(node1.isFor());
1654:       assertFalse(node1.isArrayLit());
1655:       assertFalse(node1.isFunction());
1656:       assertFalse(node1.isDefaultCase());
1657:       assertFalse(node1.isVoid());
1658:       assertEquals(40, node1.getType());
1659:       assertFalse(node1.isTrue());
1660:       assertFalse(node1.isIn());
1661:       assertFalse(node1.isSetterDef());
1662:       assertFalse(node1.isInc());
1663:       assertFalse(node1.isEmpty());
1664:       assertFalse(node1.isThis());
1665:       assertFalse(node1.isVar());
1666:       assertFalse(node1.isParamList());
1667:       assertFalse(node1.isStringKey());
1668:       assertEquals(0, node1.getChildCount());
1669:       assertFalse(node1.isHook());
1670:       assertFalse(node1.isCatch());
1671:       assertFalse(node1.isInstanceOf());
1672:       assertFalse(node1.isWith());
1673:       assertFalse(node1.isRegExp());
1674:       assertFalse(node1.isCase());
1675:       assertEquals((-1), node1.getCharno());
1676:       assertFalse(node1.isBlock());
1677:       assertTrue(node1.isString());
1678:       assertFalse(node1.isSwitch());
1679:       assertFalse(node1.isTry());
1680:       assertFalse(node1.hasOneChild());
1681:       assertFalse(node1.isScript());
1682:       assertFalse(node1.equals((Object)node0));
1683:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1684:       assertEquals(55, Node.INFERRED_FUNCTION);
1685:       assertEquals(36, Node.QUOTED_PROP);
1686:       assertEquals(4095, Node.COLUMN_MASK);
1687:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1688:       assertEquals(43, Node.IS_CONSTANT_NAME);
1689:       assertEquals(48, Node.DIRECTIVES);
1690:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1691:       assertEquals(56, Node.CHANGE_TIME);
1692:       assertEquals(47, Node.IS_DISPATCHER);
1693:       assertEquals(40, Node.ORIGINALNAME_PROP);
1694:       assertEquals(29, Node.JSDOC_INFO_PROP);
1695:       assertEquals(2, Node.POST_FLAG);
1696:       assertEquals(8, Node.FLAG_NO_THROWS);
1697:       assertEquals(52, Node.LENGTH);
1698:       assertEquals(53, Node.INPUT_ID);
1699:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1700:       assertEquals(39, Node.EMPTY_BLOCK);
1701:       assertEquals(57, Node.LAST_PROP);
1702:       assertEquals(30, Node.VAR_ARGS_NAME);
1703:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1704:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1705:       assertEquals(57, Node.REFLECTED_OBJECT);
1706:       assertEquals(46, Node.IS_NAMESPACE);
1707:       assertEquals(54, Node.SLASH_V);
1708:       assertEquals(37, Node.OPT_ARG_NAME);
1709:       assertEquals(49, Node.DIRECT_EVAL);
1710:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1711:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1712:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1713:       assertEquals(50, Node.FREE_CALL);
1714:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1715:       assertEquals(12, Node.COLUMN_BITS);
1716:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1717:       assertEquals(1, Node.DECR_FLAG);
1718:       assertEquals(32, Node.INCRDECR_PROP);
1719:       
1720:       Iterable<Node> iterable0 = node0.children();
1721:       assertNotSame(node0, node1);
1722:       assertFalse(node0.isIn());
1723:       assertFalse(node0.isEmpty());
1724:       assertEquals(695, node0.getLineno());
1725:       assertFalse(node0.isString());
1726:       assertFalse(node0.isIf());
1727:       assertFalse(node0.isDelProp());
1728:       assertFalse(node0.isGetterDef());
1729:       assertFalse(node0.isNE());
1730:       assertFalse(node0.isSwitch());
1731:       assertFalse(node0.isFunction());
1732:       assertFalse(node0.isArrayLit());
1733:       assertFalse(node0.isInc());
1734:       assertEquals(147, node0.getCharno());
1735:       assertFalse(node0.isDefaultCase());
1736:       assertFalse(node0.isFalse());
1737:       assertEquals(2846867, node0.getSourcePosition());
1738:       assertFalse(node0.isThrow());
1739:       assertEquals(0, node0.getChildCount());
1740:       assertFalse(node0.isSetterDef());
1741:       assertFalse(node0.isCatch());
1742:       assertFalse(node0.isInstanceOf());
1743:       assertFalse(node0.isParamList());
1744:       assertFalse(node0.isStringKey());
1745:       assertFalse(node0.isTry());
1746:       assertFalse(node0.hasOneChild());
1747:       assertFalse(node0.isScript());
1748:       assertFalse(node0.isWith());
1749:       assertFalse(node0.isCase());
1750:       assertFalse(node0.isRegExp());
1751:       assertFalse(node0.isThis());
1752:       assertFalse(node0.isHook());
1753:       assertFalse(node0.isBlock());
1754:       assertFalse(node0.isFor());
1755:       assertFalse(node0.isOr());
1756:       assertFalse(node0.isReturn());
1757:       assertFalse(node0.isAssignAdd());
1758:       assertFalse(node0.isLabel());
1759:       assertFalse(node0.hasMoreThanOneChild());
1760:       assertFalse(node0.isContinue());
1761:       assertEquals(695, node0.getType());
1762:       assertFalse(node0.isLabelName());
1763:       assertFalse(node0.isNumber());
1764:       assertFalse(node0.isNew());
1765:       assertFalse(node0.isCast());
1766:       assertFalse(node0.isAdd());
1767:       assertFalse(node0.isDo());
1768:       assertFalse(node0.isVar());
1769:       assertFalse(node0.isBreak());
1770:       assertFalse(node0.isGetProp());
1771:       assertFalse(node0.isNot());
1772:       assertFalse(node0.isName());
1773:       assertFalse(node0.isObjectLit());
1774:       assertFalse(node0.isAnd());
1775:       assertFalse(node0.isDebugger());
1776:       assertFalse(node0.isNull());
1777:       assertFalse(node0.isTrue());
1778:       assertFalse(node0.isVoid());
1779:       assertFalse(node0.isCall());
1780:       assertFalse(node0.isGetElem());
1781:       assertFalse(node0.isExprResult());
1782:       assertFalse(node0.isAssign());
1783:       assertFalse(node0.isWhile());
1784:       assertFalse(node0.isDec());
1785:       assertFalse(node0.isTypeOf());
1786:       assertFalse(node0.isComma());
1787:       assertFalse(node0.hasChildren());
1788:       assertFalse(node0.equals((Object)node1));
1789:       assertFalse(iterable0.contains(node1));
1790:       assertEquals(53, Node.INPUT_ID);
1791:       assertEquals(43, Node.IS_CONSTANT_NAME);
1792:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1793:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1794:       assertEquals(29, Node.JSDOC_INFO_PROP);
1795:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1796:       assertEquals(36, Node.QUOTED_PROP);
1797:       assertEquals(55, Node.INFERRED_FUNCTION);
1798:       assertEquals(39, Node.EMPTY_BLOCK);
1799:       assertEquals(46, Node.IS_NAMESPACE);
1800:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1801:       assertEquals(30, Node.VAR_ARGS_NAME);
1802:       assertEquals(40, Node.ORIGINALNAME_PROP);
1803:       assertEquals(47, Node.IS_DISPATCHER);
1804:       assertEquals(2, Node.POST_FLAG);
1805:       assertEquals(54, Node.SLASH_V);
1806:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1807:       assertEquals(57, Node.REFLECTED_OBJECT);
1808:       assertEquals(57, Node.LAST_PROP);
1809:       assertEquals(1, Node.DECR_FLAG);
1810:       assertEquals(50, Node.FREE_CALL);
1811:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1812:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1813:       assertEquals(8, Node.FLAG_NO_THROWS);
1814:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1815:       assertEquals(52, Node.LENGTH);
1816:       assertEquals(48, Node.DIRECTIVES);
1817:       assertEquals(37, Node.OPT_ARG_NAME);
1818:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1819:       assertEquals(56, Node.CHANGE_TIME);
1820:       assertEquals(12, Node.COLUMN_BITS);
1821:       assertEquals(32, Node.INCRDECR_PROP);
1822:       assertEquals(49, Node.DIRECT_EVAL);
1823:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1824:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1825:       assertEquals(4095, Node.COLUMN_MASK);
1826:       assertNotNull(iterable0);
1827:       
1828:       node1.detachChildren();
1829:       assertNotSame(node1, node0);
1830:       assertFalse(node1.hasChildren());
1831:       assertFalse(node1.isTypeOf());
1832:       assertFalse(node1.isNumber());
1833:       assertFalse(node1.isAssign());
1834:       assertFalse(node1.isLabelName());
1835:       assertFalse(node1.isDec());
1836:       assertEquals((-1), node1.getSourcePosition());
1837:       assertFalse(node1.isAssignAdd());
1838:       assertFalse(node1.isReturn());
1839:       assertFalse(node1.isLabel());
1840:       assertEquals((-1), node1.getLineno());
1841:       assertFalse(node1.isContinue());
1842:       assertFalse(node1.hasMoreThanOneChild());
1843:       assertFalse(node1.isGetElem());
1844:       assertFalse(node1.isExprResult());
1845:       assertFalse(node1.isCast());
1846:       assertFalse(node1.isDo());
1847:       assertFalse(node1.isOr());
1848:       assertFalse(node1.isNew());
1849:       assertFalse(node1.isAdd());
1850:       assertFalse(node1.isBreak());
1851:       assertFalse(node1.isNull());
1852:       assertFalse(node1.isComma());
1853:       assertFalse(node1.isThrow());
1854:       assertFalse(node1.isName());
1855:       assertFalse(node1.isCall());
1856:       assertFalse(node1.isFalse());
1857:       assertFalse(node1.isNot());
1858:       assertFalse(node1.isAnd());
1859:       assertFalse(node1.isDebugger());
1860:       assertFalse(node1.isWhile());
1861:       assertFalse(node1.isObjectLit());
1862:       assertFalse(node1.isGetProp());
1863:       assertFalse(node1.isDelProp());
1864:       assertFalse(node1.isIf());
1865:       assertFalse(node1.isGetterDef());
1866:       assertFalse(node1.isNE());
1867:       assertFalse(node1.isFor());
1868:       assertFalse(node1.isArrayLit());
1869:       assertFalse(node1.isFunction());
1870:       assertFalse(node1.isDefaultCase());
1871:       assertFalse(node1.isVoid());
1872:       assertEquals(40, node1.getType());
1873:       assertFalse(node1.isTrue());
1874:       assertFalse(node1.isIn());
1875:       assertFalse(node1.isSetterDef());
1876:       assertFalse(node1.isInc());
1877:       assertFalse(node1.isEmpty());
1878:       assertFalse(node1.isThis());
1879:       assertFalse(node1.isVar());
1880:       assertFalse(node1.isParamList());
1881:       assertFalse(node1.isStringKey());
1882:       assertEquals(0, node1.getChildCount());
1883:       assertFalse(node1.isHook());
1884:       assertFalse(node1.isCatch());
1885:       assertFalse(node1.isInstanceOf());
1886:       assertFalse(node1.isWith());
1887:       assertFalse(node1.isRegExp());
1888:       assertFalse(node1.isCase());
1889:       assertEquals((-1), node1.getCharno());
1890:       assertFalse(node1.isBlock());
1891:       assertTrue(node1.isString());
1892:       assertFalse(node1.isSwitch());
1893:       assertFalse(node1.isTry());
1894:       assertFalse(node1.hasOneChild());
1895:       assertFalse(node1.isScript());
1896:       assertFalse(node1.equals((Object)node0));
1897:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1898:       assertEquals(55, Node.INFERRED_FUNCTION);
1899:       assertEquals(36, Node.QUOTED_PROP);
1900:       assertEquals(4095, Node.COLUMN_MASK);
1901:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1902:       assertEquals(43, Node.IS_CONSTANT_NAME);
1903:       assertEquals(48, Node.DIRECTIVES);
1904:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1905:       assertEquals(56, Node.CHANGE_TIME);
1906:       assertEquals(47, Node.IS_DISPATCHER);
1907:       assertEquals(40, Node.ORIGINALNAME_PROP);
1908:       assertEquals(29, Node.JSDOC_INFO_PROP);
1909:       assertEquals(2, Node.POST_FLAG);
1910:       assertEquals(8, Node.FLAG_NO_THROWS);
1911:       assertEquals(52, Node.LENGTH);
1912:       assertEquals(53, Node.INPUT_ID);
1913:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1914:       assertEquals(39, Node.EMPTY_BLOCK);
1915:       assertEquals(57, Node.LAST_PROP);
1916:       assertEquals(30, Node.VAR_ARGS_NAME);
1917:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1918:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1919:       assertEquals(57, Node.REFLECTED_OBJECT);
1920:       assertEquals(46, Node.IS_NAMESPACE);
1921:       assertEquals(54, Node.SLASH_V);
1922:       assertEquals(37, Node.OPT_ARG_NAME);
1923:       assertEquals(49, Node.DIRECT_EVAL);
1924:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1925:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1926:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1927:       assertEquals(50, Node.FREE_CALL);
1928:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1929:       assertEquals(12, Node.COLUMN_BITS);
1930:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1931:       assertEquals(1, Node.DECR_FLAG);
1932:       assertEquals(32, Node.INCRDECR_PROP);
1933:       
1934:       boolean boolean3 = node0.isScript();
1935:       assertNotSame(node0, node1);
1936:       assertFalse(boolean3);
1937:       assertFalse(node0.isIn());
1938:       assertFalse(node0.isEmpty());
1939:       assertEquals(695, node0.getLineno());
1940:       assertFalse(node0.isString());
1941:       assertFalse(node0.isIf());
1942:       assertFalse(node0.isDelProp());
1943:       assertFalse(node0.isGetterDef());
1944:       assertFalse(node0.isNE());
1945:       assertFalse(node0.isSwitch());
1946:       assertFalse(node0.isFunction());
1947:       assertFalse(node0.isArrayLit());
1948:       assertFalse(node0.isInc());
1949:       assertEquals(147, node0.getCharno());
1950:       assertFalse(node0.isDefaultCase());
1951:       assertFalse(node0.isFalse());
1952:       assertEquals(2846867, node0.getSourcePosition());
1953:       assertFalse(node0.isThrow());
1954:       assertEquals(0, node0.getChildCount());
1955:       assertFalse(node0.isSetterDef());
1956:       assertFalse(node0.isCatch());
1957:       assertFalse(node0.isInstanceOf());
1958:       assertFalse(node0.isParamList());
1959:       assertFalse(node0.isStringKey());
1960:       assertFalse(node0.isTry());
1961:       assertFalse(node0.hasOneChild());
1962:       assertFalse(node0.isScript());
1963:       assertFalse(node0.isWith());
1964:       assertFalse(node0.isCase());
1965:       assertFalse(node0.isRegExp());
1966:       assertFalse(node0.isThis());
1967:       assertFalse(node0.isHook());
1968:       assertFalse(node0.isBlock());
1969:       assertFalse(node0.isFor());
1970:       assertFalse(node0.isOr());
1971:       assertFalse(node0.isReturn());
1972:       assertFalse(node0.isAssignAdd());
1973:       assertFalse(node0.isLabel());
1974:       assertFalse(node0.hasMoreThanOneChild());
1975:       assertFalse(node0.isContinue());
1976:       assertEquals(695, node0.getType());
1977:       assertFalse(node0.isLabelName());
1978:       assertFalse(node0.isNumber());
1979:       assertFalse(node0.isNew());
1980:       assertFalse(node0.isCast());
1981:       assertFalse(node0.isAdd());
1982:       assertFalse(node0.isDo());
1983:       assertFalse(node0.isVar());
1984:       assertFalse(node0.isBreak());
1985:       assertFalse(node0.isGetProp());
1986:       assertFalse(node0.isNot());
1987:       assertFalse(node0.isName());
1988:       assertFalse(node0.isObjectLit());
1989:       assertFalse(node0.isAnd());
1990:       assertFalse(node0.isDebugger());
1991:       assertFalse(node0.isNull());
1992:       assertFalse(node0.isTrue());
1993:       assertFalse(node0.isVoid());
1994:       assertFalse(node0.isCall());
1995:       assertFalse(node0.isGetElem());
1996:       assertFalse(node0.isExprResult());
1997:       assertFalse(node0.isAssign());
1998:       assertFalse(node0.isWhile());
1999:       assertFalse(node0.isDec());
2000:       assertFalse(node0.isTypeOf());
2001:       assertFalse(node0.isComma());
2002:       assertFalse(node0.hasChildren());
2003:       assertFalse(node0.equals((Object)node1));
2004:       assertTrue(boolean3 == boolean1);
2005:       assertTrue(boolean3 == boolean0);
2006:       assertTrue(boolean3 == boolean2);
2007:       assertEquals(53, Node.INPUT_ID);
2008:       assertEquals(43, Node.IS_CONSTANT_NAME);
2009:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2010:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2011:       assertEquals(29, Node.JSDOC_INFO_PROP);
2012:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2013:       assertEquals(36, Node.QUOTED_PROP);
2014:       assertEquals(55, Node.INFERRED_FUNCTION);
2015:       assertEquals(39, Node.EMPTY_BLOCK);
2016:       assertEquals(46, Node.IS_NAMESPACE);
2017:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2018:       assertEquals(30, Node.VAR_ARGS_NAME);
2019:       assertEquals(40, Node.ORIGINALNAME_PROP);
2020:       assertEquals(47, Node.IS_DISPATCHER);
2021:       assertEquals(2, Node.POST_FLAG);
2022:       assertEquals(54, Node.SLASH_V);
2023:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2024:       assertEquals(57, Node.REFLECTED_OBJECT);
2025:       assertEquals(57, Node.LAST_PROP);
2026:       assertEquals(1, Node.DECR_FLAG);
2027:       assertEquals(50, Node.FREE_CALL);
2028:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2029:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2030:       assertEquals(8, Node.FLAG_NO_THROWS);
2031:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2032:       assertEquals(52, Node.LENGTH);
2033:       assertEquals(48, Node.DIRECTIVES);
2034:       assertEquals(37, Node.OPT_ARG_NAME);
2035:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2036:       assertEquals(56, Node.CHANGE_TIME);
2037:       assertEquals(12, Node.COLUMN_BITS);
2038:       assertEquals(32, Node.INCRDECR_PROP);
2039:       assertEquals(49, Node.DIRECT_EVAL);
2040:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2041:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2042:       assertEquals(4095, Node.COLUMN_MASK);
2043:   }
2044: }
RegularFileObject[/tmp/EvoSuite_73_1628255610551/com/google/javascript/rhino/Node_73_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:13:31 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class Node_73_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_73_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "com.google.common.collect.ArrayListMultimap",
72:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
73:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
74:       "com.google.common.collect.ImmutableList$SubList",
75:       "com.google.javascript.rhino.jstype.NoType",
76:       "com.google.javascript.rhino.JSDocInfo$Visibility",
77:       "com.google.common.collect.ListMultimap",
78:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
79:       "com.google.javascript.rhino.jstype.ArrowType",
80:       "com.google.javascript.rhino.SimpleErrorReporter",
81:       "com.google.common.collect.Lists$RandomAccessPartition",
82:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
83:       "com.google.common.collect.Collections2",
84:       "com.google.javascript.rhino.jstype.NumberType",
85:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
86:       "com.google.common.collect.PeekingIterator",
87:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
88:       "com.google.common.collect.RegularImmutableList",
89:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
90:       "com.google.javascript.rhino.jstype.StaticScope",
91:       "com.google.javascript.rhino.jstype.InstanceObjectType",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Sets$3",
97:       "com.google.common.collect.Maps$KeySet",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.javascript.rhino.SourcePosition",
103:       "com.google.common.collect.Sets$1",
104:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
105:       "com.google.common.collect.ImmutableMapKeySet",
106:       "com.google.javascript.rhino.JSDocInfo$Marker",
107:       "com.google.common.collect.RegularImmutableMap",
108:       "com.google.common.collect.RegularImmutableBiMap",
109:       "com.google.javascript.rhino.Node$NodeMismatch",
110:       "com.google.javascript.rhino.jstype.RecordType",
111:       "com.google.common.collect.SortedMapDifference",
112:       "com.google.javascript.rhino.jstype.ModificationVisitor",
113:       "com.google.javascript.rhino.jstype.PropertyMap$1",
114:       "com.google.common.collect.AbstractMapEntry",
115:       "com.google.javascript.rhino.Node$AncestorIterable$1",
116:       "com.google.common.collect.Iterators$12",
117:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
118:       "com.google.common.collect.Iterators$11",
119:       "com.google.javascript.rhino.jstype.JSType$1",
120:       "com.google.common.collect.EmptyImmutableBiMap",
121:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
122:       "com.google.common.base.Predicate",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.common.collect.ImmutableList$SerializedForm",
138:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
139:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
140:       "com.google.common.collect.AbstractMapBasedMultimap",
141:       "com.google.common.collect.Lists$Partition",
142:       "com.google.common.collect.Lists",
143:       "com.google.javascript.rhino.Node$SideEffectFlags",
144:       "com.google.common.collect.UnmodifiableListIterator",
145:       "com.google.javascript.rhino.jstype.NullType",
146:       "com.google.common.collect.Lists$TransformingSequentialList",
147:       "com.google.javascript.rhino.ErrorReporter",
148:       "com.google.javascript.rhino.jstype.UnknownType",
149:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
150:       "com.google.javascript.rhino.jstype.ValueType",
151:       "com.google.javascript.rhino.jstype.PropertyMap",
152:       "com.google.javascript.rhino.Token",
153:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
154:       "com.google.common.collect.ObjectArrays",
155:       "com.google.javascript.rhino.jstype.StaticSourceFile",
156:       "com.google.javascript.rhino.jstype.BooleanType",
157:       "com.google.javascript.rhino.jstype.NoObjectType",
158:       "com.google.common.collect.AbstractIterator",
159:       "com.google.javascript.rhino.jstype.FunctionBuilder",
160:       "com.google.javascript.rhino.jstype.JSType$TypePair",
161:       "com.google.common.base.Joiner$MapJoiner",
162:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
163:       "com.google.common.collect.ImmutableList$1",
164:       "com.google.common.collect.MapDifference",
165:       "com.google.javascript.rhino.JSDocInfo$1",
166:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
167:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
168:       "com.google.common.collect.Sets$ImprovedAbstractSet",
169:       "com.google.javascript.rhino.jstype.FunctionType",
170:       "com.google.common.base.Preconditions",
171:       "com.google.common.collect.UnmodifiableIterator",
172:       "com.google.javascript.rhino.JSDocInfo",
173:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
174:       "com.google.javascript.rhino.jstype.Property",
175:       "com.google.common.collect.ImmutableMapValues",
176:       "com.google.common.collect.ImmutableEntry",
177:       "com.google.common.base.Joiner$1",
178:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
179:       "com.google.common.base.Joiner$2",
180:       "com.google.common.collect.ImmutableCollection",
181:       "com.google.common.collect.ImmutableEnumMap",
182:       "com.google.javascript.rhino.jstype.TernaryValue",
183:       "com.google.javascript.rhino.Node$AncestorIterable",
184:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.Lists$RandomAccessListWrapper",
187:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
188:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
189:       "com.google.javascript.rhino.jstype.EnumElementType",
190:       "com.google.javascript.rhino.jstype.UnionType",
191:       "com.google.common.base.Objects",
192:       "com.google.javascript.rhino.Node$NumberNode",
193:       "com.google.common.collect.SingletonImmutableList",
194:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
195:       "com.google.common.collect.ImmutableCollection$Builder",
196:       "com.google.javascript.rhino.jstype.StaticSlot",
197:       "com.google.common.collect.Iterators$6",
198:       "com.google.common.collect.BiMap",
199:       "com.google.common.collect.Iterators$7",
200:       "com.google.common.collect.AbstractSetMultimap",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.base.Function",
203:       "com.google.common.collect.Lists$AbstractListWrapper",
204:       "com.google.common.collect.ImmutableMap",
205:       "com.google.common.collect.AbstractIndexedListIterator",
206:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
207:       "com.google.common.collect.Maps$1",
208:       "com.google.javascript.rhino.jstype.EnumType",
209:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
210:       "com.google.common.collect.Iterators$1",
211:       "com.google.common.collect.Iterators$2",
212:       "com.google.javascript.rhino.jstype.NamespaceType",
213:       "com.google.common.collect.Iterators$3",
214:       "com.google.common.collect.Sets",
215:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
216:       "com.google.javascript.rhino.Node$ObjectPropListItem",
217:       "com.google.common.collect.Lists$StringAsImmutableList",
218:       "com.google.common.collect.Lists$2",
219:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
220:       "com.google.common.collect.ImmutableList$Builder",
221:       "com.google.common.collect.Lists$1",
222:       "com.google.javascript.rhino.jstype.StaticReference",
223:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
224:       "com.google.common.collect.Multiset",
225:       "com.google.common.collect.AbstractMultimap",
226:       "com.google.common.collect.Multimap",
227:       "com.google.common.collect.Iterators",
228:       "com.google.common.collect.Maps$ImprovedAbstractMap",
229:       "com.google.common.collect.ImmutableBiMap",
230:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
232:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
233:       "com.google.common.collect.ImmutableList",
234:       "com.google.common.collect.SingletonImmutableBiMap",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
236:       "com.google.javascript.rhino.jstype.StringType",
237:       "com.google.javascript.rhino.Node$AbstractPropListItem",
238:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
239:       "com.google.javascript.rhino.jstype.TemplatizedType",
240:       "com.google.javascript.rhino.jstype.Visitor",
241:       "com.google.javascript.rhino.jstype.NoResolvedType",
242:       "com.google.javascript.rhino.jstype.JSTypeNative",
243:       "com.google.javascript.rhino.jstype.AllType",
244:       "com.google.common.collect.Maps",
245:       "com.google.common.collect.SetMultimap",
246:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
247:       "com.google.common.collect.Maps$EntryTransformer",
248:       "com.google.javascript.rhino.JSTypeExpression",
249:       "com.google.common.collect.Iterators$MergingIterator"
250:     );
251:   } 
252:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
253:     mock(Class.forName("java.util.function.Consumer", false, Node_73_tmp__ESTest_scaffolding.class.getClassLoader()));
254:   }
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_73_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.JSDocInfo",
274:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
275:       "com.google.common.collect.Sets",
276:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
277:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
278:       "com.google.javascript.rhino.jstype.JSType$1",
279:       "com.google.javascript.rhino.jstype.JSType",
280:       "com.google.javascript.rhino.SimpleErrorReporter",
281:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
282:       "com.google.common.base.Joiner",
283:       "com.google.common.base.Joiner$1",
284:       "com.google.common.collect.Collections2",
285:       "com.google.common.base.Joiner$MapJoiner",
286:       "com.google.common.collect.Maps",
287:       "com.google.common.collect.AbstractMultimap",
288:       "com.google.common.collect.AbstractMapBasedMultimap",
289:       "com.google.common.collect.AbstractSetMultimap",
290:       "com.google.common.collect.LinkedHashMultimap",
291:       "com.google.common.collect.AbstractMapEntry",
292:       "com.google.common.collect.ImmutableEntry",
293:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
294:       "com.google.common.collect.AbstractListMultimap",
295:       "com.google.common.collect.ArrayListMultimap",
296:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
297:       "com.google.common.collect.ImmutableCollection",
298:       "com.google.common.collect.RegularImmutableList",
299:       "com.google.common.collect.ObjectArrays",
300:       "com.google.common.collect.ImmutableList",
301:       "com.google.javascript.rhino.jstype.ModificationVisitor",
302:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
303:       "com.google.common.collect.ImmutableCollection$Builder",
304:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
305:       "com.google.common.collect.ImmutableList$Builder",
306:       "com.google.common.collect.UnmodifiableIterator",
307:       "com.google.common.collect.UnmodifiableListIterator",
308:       "com.google.common.collect.Iterators$1",
309:       "com.google.common.collect.Iterators$2",
310:       "com.google.common.collect.Iterators",
311:       "com.google.javascript.rhino.jstype.ObjectType",
312:       "com.google.javascript.rhino.jstype.ProxyObjectType",
313:       "com.google.javascript.rhino.jstype.TemplateType",
314:       "com.google.javascript.rhino.jstype.ValueType",
315:       "com.google.javascript.rhino.jstype.BooleanType",
316:       "com.google.javascript.rhino.jstype.NullType",
317:       "com.google.javascript.rhino.jstype.NumberType",
318:       "com.google.javascript.rhino.jstype.StringType",
319:       "com.google.javascript.rhino.jstype.UnknownType",
320:       "com.google.javascript.rhino.jstype.VoidType",
321:       "com.google.javascript.rhino.jstype.AllType",
322:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
323:       "com.google.common.collect.ImmutableMap",
324:       "com.google.common.collect.ImmutableBiMap",
325:       "com.google.common.collect.EmptyImmutableBiMap",
326:       "com.google.javascript.rhino.jstype.PropertyMap$1",
327:       "com.google.javascript.rhino.jstype.PropertyMap",
328:       "com.google.javascript.rhino.jstype.FunctionType",
329:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
330:       "com.google.javascript.rhino.jstype.ArrowType",
331:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
332:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
333:       "com.google.javascript.rhino.jstype.InstanceObjectType",
334:       "com.google.javascript.rhino.jstype.Property",
335:       "com.google.common.collect.Lists",
336:       "com.google.javascript.rhino.jstype.NoObjectType",
337:       "com.google.javascript.rhino.jstype.NoType",
338:       "com.google.javascript.rhino.jstype.NoResolvedType",
339:       "com.google.common.collect.SingletonImmutableList",
340:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
341:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
342:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
343:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
344:       "com.google.javascript.rhino.jstype.UnionType",
345:       "com.google.javascript.rhino.jstype.FunctionBuilder",
346:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.javascript.rhino.jstype.EnumType",
349:       "com.google.javascript.rhino.jstype.EnumElementType",
350:       "com.google.javascript.rhino.Node$AncestorIterable$1",
351:       "com.google.common.base.Objects",
352:       "com.google.javascript.rhino.InputId",
353:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
354:       "com.google.javascript.rhino.JSDocInfo$Visibility",
355:       "com.google.common.collect.Iterables",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.javascript.rhino.jstype.TernaryValue",
363:       "com.google.javascript.rhino.jstype.JSType$2",
364:       "com.google.javascript.rhino.jstype.JSType$TypePair",
365:       "com.google.common.collect.AbstractIndexedListIterator",
366:       "com.google.common.collect.Iterators$11",
367:       "com.google.javascript.rhino.JSTypeExpression",
368:       "com.google.javascript.rhino.jstype.TemplatizedType",
369:       "com.google.common.collect.ImmutableSet",
370:       "com.google.common.collect.EmptyImmutableSet",
371:       "com.google.javascript.rhino.jstype.NamedType",
372:       "com.google.common.collect.Iterators$12",
373:       "com.google.common.collect.Sets$ImprovedAbstractSet",
374:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
375:       "com.google.common.collect.Hashing",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
377:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
378:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
379:       "com.google.common.collect.ImmutableList$1"
380:     );
381:   }
382: }

[MASTER] 13:13:31.329 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(695, "", 695, 147);
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(695, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInc());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertEquals(2846867, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(695, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node0);

int int0 = node0.getIntProp(29);
assertEquals(0, int0);
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(695, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInc());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertEquals(2846867, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(695, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);

Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(695, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInc());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertEquals(2846867, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(695, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node_AncestorIterable0);

Spliterator<Node> spliterator0 = node_AncestorIterable0.spliterator();
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(695, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInc());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertEquals(2846867, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(695, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(spliterator0);

Iterator<Node> iterator0 = node_AncestorIterable0.iterator();
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(695, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInc());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertEquals(2846867, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(695, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(iterator0);

Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
node_AncestorIterable0.forEach(consumer0);
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(695, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInc());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertEquals(2846867, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(695, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);

Iterator<Node> iterator1 = node_AncestorIterable0.iterator();
assertNotSame(iterator1, iterator0);
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(695, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInc());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertEquals(2846867, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(695, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(iterator1.equals((Object)iterator0));
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(iterator1);

Iterator<Node> iterator2 = node_AncestorIterable0.iterator();
assertNotSame(iterator2, iterator1);
assertNotSame(iterator2, iterator0);
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(695, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInc());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertEquals(2846867, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(695, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(iterator2.equals((Object)iterator1));
assertFalse(iterator2.equals((Object)iterator0));
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(iterator2);

int int1 = node0.getIntProp(695);
assertEquals(0, int1);
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(695, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInc());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertEquals(2846867, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(695, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertTrue(int1 == int0);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);

boolean boolean0 = node0.isWhile();
assertFalse(boolean0);
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(695, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInc());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertEquals(2846867, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(695, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);

Set<String> set0 = node0.getDirectives();
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(695, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInc());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertEquals(2846867, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(695, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertNull(set0);

boolean boolean1 = node0.isObjectLit();
assertFalse(boolean1);
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(695, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInc());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertEquals(2846867, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(695, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertTrue(boolean1 == boolean0);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);

node0.setDirectives((Set<String>) null);
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(695, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInc());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertEquals(2846867, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(695, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);

Node node1 = Node.newString("");
assertNotSame(node1, node0);
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.equals((Object)node0));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(node1);

boolean boolean2 = node1.isAssignAdd();
assertNotSame(node1, node0);
assertFalse(boolean2);
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

node1.setDirectives((Set<String>) null);
assertNotSame(node1, node0);
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.equals((Object)node0));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

Iterable<Node> iterable0 = node0.children();
assertNotSame(node0, node1);
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(695, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInc());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertEquals(2846867, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(695, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node1));
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(iterable0);

node1.detachChildren();
assertNotSame(node1, node0);
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.equals((Object)node0));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean3 = node0.isScript();
assertNotSame(node0, node1);
assertFalse(boolean3);
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(695, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInc());
assertEquals(147, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertEquals(2846867, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(695, node0.getType());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);


[MASTER] 13:13:35.684 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_85_1628255615558/com/google/javascript/rhino/Node_85_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_85_1628255615558/com/google/javascript/rhino/Node_85_tmp__ESTest_scaffolding.java]]
[MASTER] 13:13:35.684 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:35.684 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:35.685 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 944
[MASTER] 13:13:35.687 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_85_1628255615558/com/google/javascript/rhino/Node_85_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:13:35 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.io.StringWriter;
12: import java.util.Set;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_85_tmp__ESTest extends Node_85_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString((-1543), "");
23:       assertFalse(node0.isArrayLit());
24:       assertFalse(node0.isDelProp());
25:       assertFalse(node0.isTry());
26:       assertFalse(node0.isFor());
27:       assertFalse(node0.isIf());
28:       assertFalse(node0.isTrue());
29:       assertFalse(node0.isNE());
30:       assertFalse(node0.isDebugger());
31:       assertFalse(node0.isGetterDef());
32:       assertFalse(node0.isEmpty());
33:       assertFalse(node0.isIn());
34:       assertFalse(node0.isDefaultCase());
35:       assertFalse(node0.isFunction());
36:       assertFalse(node0.isSwitch());
37:       assertEquals(0, node0.getChildCount());
38:       assertFalse(node0.isThrow());
39:       assertFalse(node0.isHook());
40:       assertFalse(node0.isStringKey());
41:       assertFalse(node0.isSetterDef());
42:       assertFalse(node0.isInc());
43:       assertFalse(node0.isParamList());
44:       assertEquals((-1), node0.getCharno());
45:       assertFalse(node0.hasMoreThanOneChild());
46:       assertFalse(node0.isCatch());
47:       assertFalse(node0.isCase());
48:       assertEquals((-1), node0.getLineno());
49:       assertFalse(node0.isThis());
50:       assertFalse(node0.isRegExp());
51:       assertFalse(node0.isBlock());
52:       assertFalse(node0.isWith());
53:       assertFalse(node0.isInstanceOf());
54:       assertFalse(node0.isCast());
55:       assertFalse(node0.isGetElem());
56:       assertFalse(node0.hasOneChild());
57:       assertFalse(node0.isLabelName());
58:       assertEquals((-1543), node0.getType());
59:       assertFalse(node0.isScript());
60:       assertEquals((-1), node0.getSourcePosition());
61:       assertFalse(node0.isOr());
62:       assertFalse(node0.isNot());
63:       assertFalse(node0.isNumber());
64:       assertFalse(node0.isObjectLit());
65:       assertFalse(node0.isDo());
66:       assertFalse(node0.isAnd());
67:       assertFalse(node0.isAssignAdd());
68:       assertFalse(node0.isLabel());
69:       assertFalse(node0.isFalse());
70:       assertFalse(node0.isContinue());
71:       assertFalse(node0.isCall());
72:       assertFalse(node0.isVar());
73:       assertFalse(node0.isName());
74:       assertFalse(node0.isNull());
75:       assertFalse(node0.isNew());
76:       assertFalse(node0.isGetProp());
77:       assertFalse(node0.isString());
78:       assertFalse(node0.isAdd());
79:       assertFalse(node0.isReturn());
80:       assertFalse(node0.isWhile());
81:       assertFalse(node0.isComma());
82:       assertFalse(node0.isExprResult());
83:       assertFalse(node0.isVoid());
84:       assertFalse(node0.isTypeOf());
85:       assertFalse(node0.isDec());
86:       assertFalse(node0.hasChildren());
87:       assertFalse(node0.isBreak());
88:       assertFalse(node0.isAssign());
89:       assertEquals(4095, Node.COLUMN_MASK);
90:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
91:       assertEquals(55, Node.INFERRED_FUNCTION);
92:       assertEquals(8, Node.FLAG_NO_THROWS);
93:       assertEquals(39, Node.EMPTY_BLOCK);
94:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
95:       assertEquals(53, Node.INPUT_ID);
96:       assertEquals(40, Node.ORIGINALNAME_PROP);
97:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
98:       assertEquals(50, Node.FREE_CALL);
99:       assertEquals(43, Node.IS_CONSTANT_NAME);
100:       assertEquals(54, Node.SLASH_V);
101:       assertEquals(51, Node.STATIC_SOURCE_FILE);
102:       assertEquals(12, Node.COLUMN_BITS);
103:       assertEquals(46, Node.IS_NAMESPACE);
104:       assertEquals(2, Node.POST_FLAG);
105:       assertEquals(30, Node.VAR_ARGS_NAME);
106:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
108:       assertEquals(57, Node.LAST_PROP);
109:       assertEquals(47, Node.IS_DISPATCHER);
110:       assertEquals(29, Node.JSDOC_INFO_PROP);
111:       assertEquals(32, Node.INCRDECR_PROP);
112:       assertEquals(1, Node.DECR_FLAG);
113:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
114:       assertEquals(57, Node.REFLECTED_OBJECT);
115:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
116:       assertEquals(52, Node.LENGTH);
117:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
118:       assertEquals(36, Node.QUOTED_PROP);
119:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
120:       assertEquals(56, Node.CHANGE_TIME);
121:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
122:       assertEquals(49, Node.DIRECT_EVAL);
123:       assertEquals(37, Node.OPT_ARG_NAME);
124:       assertEquals(48, Node.DIRECTIVES);
125:       assertNotNull(node0);
126:       
127:       boolean boolean0 = node0.isVoid();
128:       assertFalse(boolean0);
129:       assertFalse(node0.isArrayLit());
130:       assertFalse(node0.isDelProp());
131:       assertFalse(node0.isTry());
132:       assertFalse(node0.isFor());
133:       assertFalse(node0.isIf());
134:       assertFalse(node0.isTrue());
135:       assertFalse(node0.isNE());
136:       assertFalse(node0.isDebugger());
137:       assertFalse(node0.isGetterDef());
138:       assertFalse(node0.isEmpty());
139:       assertFalse(node0.isIn());
140:       assertFalse(node0.isDefaultCase());
141:       assertFalse(node0.isFunction());
142:       assertFalse(node0.isSwitch());
143:       assertEquals(0, node0.getChildCount());
144:       assertFalse(node0.isThrow());
145:       assertFalse(node0.isHook());
146:       assertFalse(node0.isStringKey());
147:       assertFalse(node0.isSetterDef());
148:       assertFalse(node0.isInc());
149:       assertFalse(node0.isParamList());
150:       assertEquals((-1), node0.getCharno());
151:       assertFalse(node0.hasMoreThanOneChild());
152:       assertFalse(node0.isCatch());
153:       assertFalse(node0.isCase());
154:       assertEquals((-1), node0.getLineno());
155:       assertFalse(node0.isThis());
156:       assertFalse(node0.isRegExp());
157:       assertFalse(node0.isBlock());
158:       assertFalse(node0.isWith());
159:       assertFalse(node0.isInstanceOf());
160:       assertFalse(node0.isCast());
161:       assertFalse(node0.isGetElem());
162:       assertFalse(node0.hasOneChild());
163:       assertFalse(node0.isLabelName());
164:       assertEquals((-1543), node0.getType());
165:       assertFalse(node0.isScript());
166:       assertEquals((-1), node0.getSourcePosition());
167:       assertFalse(node0.isOr());
168:       assertFalse(node0.isNot());
169:       assertFalse(node0.isNumber());
170:       assertFalse(node0.isObjectLit());
171:       assertFalse(node0.isDo());
172:       assertFalse(node0.isAnd());
173:       assertFalse(node0.isAssignAdd());
174:       assertFalse(node0.isLabel());
175:       assertFalse(node0.isFalse());
176:       assertFalse(node0.isContinue());
177:       assertFalse(node0.isCall());
178:       assertFalse(node0.isVar());
179:       assertFalse(node0.isName());
180:       assertFalse(node0.isNull());
181:       assertFalse(node0.isNew());
182:       assertFalse(node0.isGetProp());
183:       assertFalse(node0.isString());
184:       assertFalse(node0.isAdd());
185:       assertFalse(node0.isReturn());
186:       assertFalse(node0.isWhile());
187:       assertFalse(node0.isComma());
188:       assertFalse(node0.isExprResult());
189:       assertFalse(node0.isVoid());
190:       assertFalse(node0.isTypeOf());
191:       assertFalse(node0.isDec());
192:       assertFalse(node0.hasChildren());
193:       assertFalse(node0.isBreak());
194:       assertFalse(node0.isAssign());
195:       assertEquals(4095, Node.COLUMN_MASK);
196:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
197:       assertEquals(55, Node.INFERRED_FUNCTION);
198:       assertEquals(8, Node.FLAG_NO_THROWS);
199:       assertEquals(39, Node.EMPTY_BLOCK);
200:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
201:       assertEquals(53, Node.INPUT_ID);
202:       assertEquals(40, Node.ORIGINALNAME_PROP);
203:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
204:       assertEquals(50, Node.FREE_CALL);
205:       assertEquals(43, Node.IS_CONSTANT_NAME);
206:       assertEquals(54, Node.SLASH_V);
207:       assertEquals(51, Node.STATIC_SOURCE_FILE);
208:       assertEquals(12, Node.COLUMN_BITS);
209:       assertEquals(46, Node.IS_NAMESPACE);
210:       assertEquals(2, Node.POST_FLAG);
211:       assertEquals(30, Node.VAR_ARGS_NAME);
212:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
213:       assertEquals(15, Node.NO_SIDE_EFFECTS);
214:       assertEquals(57, Node.LAST_PROP);
215:       assertEquals(47, Node.IS_DISPATCHER);
216:       assertEquals(29, Node.JSDOC_INFO_PROP);
217:       assertEquals(32, Node.INCRDECR_PROP);
218:       assertEquals(1, Node.DECR_FLAG);
219:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
220:       assertEquals(57, Node.REFLECTED_OBJECT);
221:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
222:       assertEquals(52, Node.LENGTH);
223:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
224:       assertEquals(36, Node.QUOTED_PROP);
225:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
226:       assertEquals(56, Node.CHANGE_TIME);
227:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
228:       assertEquals(49, Node.DIRECT_EVAL);
229:       assertEquals(37, Node.OPT_ARG_NAME);
230:       assertEquals(48, Node.DIRECTIVES);
231:       
232:       boolean boolean1 = node0.isStringKey();
233:       assertFalse(boolean1);
234:       assertFalse(node0.isArrayLit());
235:       assertFalse(node0.isDelProp());
236:       assertFalse(node0.isTry());
237:       assertFalse(node0.isFor());
238:       assertFalse(node0.isIf());
239:       assertFalse(node0.isTrue());
240:       assertFalse(node0.isNE());
241:       assertFalse(node0.isDebugger());
242:       assertFalse(node0.isGetterDef());
243:       assertFalse(node0.isEmpty());
244:       assertFalse(node0.isIn());
245:       assertFalse(node0.isDefaultCase());
246:       assertFalse(node0.isFunction());
247:       assertFalse(node0.isSwitch());
248:       assertEquals(0, node0.getChildCount());
249:       assertFalse(node0.isThrow());
250:       assertFalse(node0.isHook());
251:       assertFalse(node0.isStringKey());
252:       assertFalse(node0.isSetterDef());
253:       assertFalse(node0.isInc());
254:       assertFalse(node0.isParamList());
255:       assertEquals((-1), node0.getCharno());
256:       assertFalse(node0.hasMoreThanOneChild());
257:       assertFalse(node0.isCatch());
258:       assertFalse(node0.isCase());
259:       assertEquals((-1), node0.getLineno());
260:       assertFalse(node0.isThis());
261:       assertFalse(node0.isRegExp());
262:       assertFalse(node0.isBlock());
263:       assertFalse(node0.isWith());
264:       assertFalse(node0.isInstanceOf());
265:       assertFalse(node0.isCast());
266:       assertFalse(node0.isGetElem());
267:       assertFalse(node0.hasOneChild());
268:       assertFalse(node0.isLabelName());
269:       assertEquals((-1543), node0.getType());
270:       assertFalse(node0.isScript());
271:       assertEquals((-1), node0.getSourcePosition());
272:       assertFalse(node0.isOr());
273:       assertFalse(node0.isNot());
274:       assertFalse(node0.isNumber());
275:       assertFalse(node0.isObjectLit());
276:       assertFalse(node0.isDo());
277:       assertFalse(node0.isAnd());
278:       assertFalse(node0.isAssignAdd());
279:       assertFalse(node0.isLabel());
280:       assertFalse(node0.isFalse());
281:       assertFalse(node0.isContinue());
282:       assertFalse(node0.isCall());
283:       assertFalse(node0.isVar());
284:       assertFalse(node0.isName());
285:       assertFalse(node0.isNull());
286:       assertFalse(node0.isNew());
287:       assertFalse(node0.isGetProp());
288:       assertFalse(node0.isString());
289:       assertFalse(node0.isAdd());
290:       assertFalse(node0.isReturn());
291:       assertFalse(node0.isWhile());
292:       assertFalse(node0.isComma());
293:       assertFalse(node0.isExprResult());
294:       assertFalse(node0.isVoid());
295:       assertFalse(node0.isTypeOf());
296:       assertFalse(node0.isDec());
297:       assertFalse(node0.hasChildren());
298:       assertFalse(node0.isBreak());
299:       assertFalse(node0.isAssign());
300:       assertTrue(boolean1 == boolean0);
301:       assertEquals(4095, Node.COLUMN_MASK);
302:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
303:       assertEquals(55, Node.INFERRED_FUNCTION);
304:       assertEquals(8, Node.FLAG_NO_THROWS);
305:       assertEquals(39, Node.EMPTY_BLOCK);
306:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
307:       assertEquals(53, Node.INPUT_ID);
308:       assertEquals(40, Node.ORIGINALNAME_PROP);
309:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
310:       assertEquals(50, Node.FREE_CALL);
311:       assertEquals(43, Node.IS_CONSTANT_NAME);
312:       assertEquals(54, Node.SLASH_V);
313:       assertEquals(51, Node.STATIC_SOURCE_FILE);
314:       assertEquals(12, Node.COLUMN_BITS);
315:       assertEquals(46, Node.IS_NAMESPACE);
316:       assertEquals(2, Node.POST_FLAG);
317:       assertEquals(30, Node.VAR_ARGS_NAME);
318:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
319:       assertEquals(15, Node.NO_SIDE_EFFECTS);
320:       assertEquals(57, Node.LAST_PROP);
321:       assertEquals(47, Node.IS_DISPATCHER);
322:       assertEquals(29, Node.JSDOC_INFO_PROP);
323:       assertEquals(32, Node.INCRDECR_PROP);
324:       assertEquals(1, Node.DECR_FLAG);
325:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
326:       assertEquals(57, Node.REFLECTED_OBJECT);
327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
328:       assertEquals(52, Node.LENGTH);
329:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
330:       assertEquals(36, Node.QUOTED_PROP);
331:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
332:       assertEquals(56, Node.CHANGE_TIME);
333:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
334:       assertEquals(49, Node.DIRECT_EVAL);
335:       assertEquals(37, Node.OPT_ARG_NAME);
336:       assertEquals(48, Node.DIRECTIVES);
337:       
338:       Node node1 = Node.newNumber((double) (-1543), 2, 118);
339:       assertFalse(node1.isDec());
340:       assertFalse(node1.isTypeOf());
341:       assertFalse(node1.isLabelName());
342:       assertFalse(node1.isGetElem());
343:       assertFalse(node1.hasMoreThanOneChild());
344:       assertFalse(node1.isCast());
345:       assertFalse(node1.isContinue());
346:       assertFalse(node1.hasOneChild());
347:       assertEquals(39, node1.getType());
348:       assertFalse(node1.isAssign());
349:       assertFalse(node1.isLabel());
350:       assertFalse(node1.isAssignAdd());
351:       assertFalse(node1.isWhile());
352:       assertFalse(node1.hasChildren());
353:       assertFalse(node1.isReturn());
354:       assertFalse(node1.isDo());
355:       assertFalse(node1.isWith());
356:       assertFalse(node1.isNew());
357:       assertFalse(node1.isAdd());
358:       assertFalse(node1.isExprResult());
359:       assertFalse(node1.isName());
360:       assertFalse(node1.isOr());
361:       assertFalse(node1.isNull());
362:       assertFalse(node1.isSetterDef());
363:       assertFalse(node1.isComma());
364:       assertFalse(node1.isBreak());
365:       assertFalse(node1.isGetProp());
366:       assertFalse(node1.isCall());
367:       assertFalse(node1.isFalse());
368:       assertEquals(8310, node1.getSourcePosition());
369:       assertFalse(node1.isThrow());
370:       assertFalse(node1.isDebugger());
371:       assertFalse(node1.isFunction());
372:       assertFalse(node1.isString());
373:       assertFalse(node1.isAnd());
374:       assertFalse(node1.isObjectLit());
375:       assertFalse(node1.isNot());
376:       assertFalse(node1.isNE());
377:       assertFalse(node1.isIf());
378:       assertFalse(node1.isDelProp());
379:       assertFalse(node1.isGetterDef());
380:       assertTrue(node1.isNumber());
381:       assertFalse(node1.isEmpty());
382:       assertEquals(118, node1.getCharno());
383:       assertFalse(node1.isFor());
384:       assertFalse(node1.isDefaultCase());
385:       assertFalse(node1.isVoid());
386:       assertFalse(node1.isRegExp());
387:       assertFalse(node1.isInc());
388:       assertFalse(node1.isIn());
389:       assertFalse(node1.isTrue());
390:       assertFalse(node1.isParamList());
391:       assertFalse(node1.isInstanceOf());
392:       assertEquals(2, node1.getLineno());
393:       assertFalse(node1.isVar());
394:       assertFalse(node1.isCatch());
395:       assertEquals(0, node1.getChildCount());
396:       assertFalse(node1.isHook());
397:       assertFalse(node1.isBlock());
398:       assertFalse(node1.isThis());
399:       assertFalse(node1.isSwitch());
400:       assertFalse(node1.isTry());
401:       assertFalse(node1.isCase());
402:       assertFalse(node1.isScript());
403:       assertFalse(node1.isArrayLit());
404:       assertFalse(node1.isStringKey());
405:       assertFalse(node1.equals((Object)node0));
406:       assertEquals(43, Node.IS_CONSTANT_NAME);
407:       assertEquals(36, Node.QUOTED_PROP);
408:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
409:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
410:       assertEquals(4095, Node.COLUMN_MASK);
411:       assertEquals(56, Node.CHANGE_TIME);
412:       assertEquals(2, Node.POST_FLAG);
413:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
414:       assertEquals(37, Node.OPT_ARG_NAME);
415:       assertEquals(39, Node.EMPTY_BLOCK);
416:       assertEquals(47, Node.IS_DISPATCHER);
417:       assertEquals(48, Node.DIRECTIVES);
418:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
419:       assertEquals(57, Node.REFLECTED_OBJECT);
420:       assertEquals(53, Node.INPUT_ID);
421:       assertEquals(29, Node.JSDOC_INFO_PROP);
422:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
423:       assertEquals(55, Node.INFERRED_FUNCTION);
424:       assertEquals(52, Node.LENGTH);
425:       assertEquals(8, Node.FLAG_NO_THROWS);
426:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
427:       assertEquals(15, Node.NO_SIDE_EFFECTS);
428:       assertEquals(1, Node.DECR_FLAG);
429:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
430:       assertEquals(49, Node.DIRECT_EVAL);
431:       assertEquals(54, Node.SLASH_V);
432:       assertEquals(57, Node.LAST_PROP);
433:       assertEquals(12, Node.COLUMN_BITS);
434:       assertEquals(40, Node.ORIGINALNAME_PROP);
435:       assertEquals(30, Node.VAR_ARGS_NAME);
436:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
437:       assertEquals(51, Node.STATIC_SOURCE_FILE);
438:       assertEquals(32, Node.INCRDECR_PROP);
439:       assertEquals(46, Node.IS_NAMESPACE);
440:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
441:       assertEquals(50, Node.FREE_CALL);
442:       assertNotNull(node1);
443:       
444:       node1.setWasEmptyNode(false);
445:       assertFalse(node1.isDec());
446:       assertFalse(node1.isTypeOf());
447:       assertFalse(node1.isLabelName());
448:       assertFalse(node1.isGetElem());
449:       assertFalse(node1.hasMoreThanOneChild());
450:       assertFalse(node1.isCast());
451:       assertFalse(node1.isContinue());
452:       assertFalse(node1.hasOneChild());
453:       assertEquals(39, node1.getType());
454:       assertFalse(node1.isAssign());
455:       assertFalse(node1.isLabel());
456:       assertFalse(node1.isAssignAdd());
457:       assertFalse(node1.isWhile());
458:       assertFalse(node1.hasChildren());
459:       assertFalse(node1.isReturn());
460:       assertFalse(node1.isDo());
461:       assertFalse(node1.isWith());
462:       assertFalse(node1.isNew());
463:       assertFalse(node1.isAdd());
464:       assertFalse(node1.isExprResult());
465:       assertFalse(node1.isName());
466:       assertFalse(node1.isOr());
467:       assertFalse(node1.isNull());
468:       assertFalse(node1.isSetterDef());
469:       assertFalse(node1.isComma());
470:       assertFalse(node1.isBreak());
471:       assertFalse(node1.isGetProp());
472:       assertFalse(node1.isCall());
473:       assertFalse(node1.isFalse());
474:       assertEquals(8310, node1.getSourcePosition());
475:       assertFalse(node1.isThrow());
476:       assertFalse(node1.isDebugger());
477:       assertFalse(node1.isFunction());
478:       assertFalse(node1.isString());
479:       assertFalse(node1.isAnd());
480:       assertFalse(node1.isObjectLit());
481:       assertFalse(node1.isNot());
482:       assertFalse(node1.isNE());
483:       assertFalse(node1.isIf());
484:       assertFalse(node1.isDelProp());
485:       assertFalse(node1.isGetterDef());
486:       assertTrue(node1.isNumber());
487:       assertFalse(node1.isEmpty());
488:       assertEquals(118, node1.getCharno());
489:       assertFalse(node1.isFor());
490:       assertFalse(node1.isDefaultCase());
491:       assertFalse(node1.isVoid());
492:       assertFalse(node1.isRegExp());
493:       assertFalse(node1.isInc());
494:       assertFalse(node1.isIn());
495:       assertFalse(node1.isTrue());
496:       assertFalse(node1.isParamList());
497:       assertFalse(node1.isInstanceOf());
498:       assertEquals(2, node1.getLineno());
499:       assertFalse(node1.isVar());
500:       assertFalse(node1.isCatch());
501:       assertEquals(0, node1.getChildCount());
502:       assertFalse(node1.isHook());
503:       assertFalse(node1.isBlock());
504:       assertFalse(node1.isThis());
505:       assertFalse(node1.isSwitch());
506:       assertFalse(node1.isTry());
507:       assertFalse(node1.isCase());
508:       assertFalse(node1.isScript());
509:       assertFalse(node1.isArrayLit());
510:       assertFalse(node1.isStringKey());
511:       assertFalse(node1.equals((Object)node0));
512:       assertEquals(43, Node.IS_CONSTANT_NAME);
513:       assertEquals(36, Node.QUOTED_PROP);
514:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
515:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
516:       assertEquals(4095, Node.COLUMN_MASK);
517:       assertEquals(56, Node.CHANGE_TIME);
518:       assertEquals(2, Node.POST_FLAG);
519:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
520:       assertEquals(37, Node.OPT_ARG_NAME);
521:       assertEquals(39, Node.EMPTY_BLOCK);
522:       assertEquals(47, Node.IS_DISPATCHER);
523:       assertEquals(48, Node.DIRECTIVES);
524:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
525:       assertEquals(57, Node.REFLECTED_OBJECT);
526:       assertEquals(53, Node.INPUT_ID);
527:       assertEquals(29, Node.JSDOC_INFO_PROP);
528:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
529:       assertEquals(55, Node.INFERRED_FUNCTION);
530:       assertEquals(52, Node.LENGTH);
531:       assertEquals(8, Node.FLAG_NO_THROWS);
532:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
533:       assertEquals(15, Node.NO_SIDE_EFFECTS);
534:       assertEquals(1, Node.DECR_FLAG);
535:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
536:       assertEquals(49, Node.DIRECT_EVAL);
537:       assertEquals(54, Node.SLASH_V);
538:       assertEquals(57, Node.LAST_PROP);
539:       assertEquals(12, Node.COLUMN_BITS);
540:       assertEquals(40, Node.ORIGINALNAME_PROP);
541:       assertEquals(30, Node.VAR_ARGS_NAME);
542:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
543:       assertEquals(51, Node.STATIC_SOURCE_FILE);
544:       assertEquals(32, Node.INCRDECR_PROP);
545:       assertEquals(46, Node.IS_NAMESPACE);
546:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
547:       assertEquals(50, Node.FREE_CALL);
548:       
549:       boolean boolean2 = node0.isCall();
550:       assertFalse(boolean2);
551:       assertFalse(node0.isArrayLit());
552:       assertFalse(node0.isDelProp());
553:       assertFalse(node0.isTry());
554:       assertFalse(node0.isFor());
555:       assertFalse(node0.isIf());
556:       assertFalse(node0.isTrue());
557:       assertFalse(node0.isNE());
558:       assertFalse(node0.isDebugger());
559:       assertFalse(node0.isGetterDef());
560:       assertFalse(node0.isEmpty());
561:       assertFalse(node0.isIn());
562:       assertFalse(node0.isDefaultCase());
563:       assertFalse(node0.isFunction());
564:       assertFalse(node0.isSwitch());
565:       assertEquals(0, node0.getChildCount());
566:       assertFalse(node0.isThrow());
567:       assertFalse(node0.isHook());
568:       assertFalse(node0.isStringKey());
569:       assertFalse(node0.isSetterDef());
570:       assertFalse(node0.isInc());
571:       assertFalse(node0.isParamList());
572:       assertEquals((-1), node0.getCharno());
573:       assertFalse(node0.hasMoreThanOneChild());
574:       assertFalse(node0.isCatch());
575:       assertFalse(node0.isCase());
576:       assertEquals((-1), node0.getLineno());
577:       assertFalse(node0.isThis());
578:       assertFalse(node0.isRegExp());
579:       assertFalse(node0.isBlock());
580:       assertFalse(node0.isWith());
581:       assertFalse(node0.isInstanceOf());
582:       assertFalse(node0.isCast());
583:       assertFalse(node0.isGetElem());
584:       assertFalse(node0.hasOneChild());
585:       assertFalse(node0.isLabelName());
586:       assertEquals((-1543), node0.getType());
587:       assertFalse(node0.isScript());
588:       assertEquals((-1), node0.getSourcePosition());
589:       assertFalse(node0.isOr());
590:       assertFalse(node0.isNot());
591:       assertFalse(node0.isNumber());
592:       assertFalse(node0.isObjectLit());
593:       assertFalse(node0.isDo());
594:       assertFalse(node0.isAnd());
595:       assertFalse(node0.isAssignAdd());
596:       assertFalse(node0.isLabel());
597:       assertFalse(node0.isFalse());
598:       assertFalse(node0.isContinue());
599:       assertFalse(node0.isCall());
600:       assertFalse(node0.isVar());
601:       assertFalse(node0.isName());
602:       assertFalse(node0.isNull());
603:       assertFalse(node0.isNew());
604:       assertFalse(node0.isGetProp());
605:       assertFalse(node0.isString());
606:       assertFalse(node0.isAdd());
607:       assertFalse(node0.isReturn());
608:       assertFalse(node0.isWhile());
609:       assertFalse(node0.isComma());
610:       assertFalse(node0.isExprResult());
611:       assertFalse(node0.isVoid());
612:       assertFalse(node0.isTypeOf());
613:       assertFalse(node0.isDec());
614:       assertFalse(node0.hasChildren());
615:       assertFalse(node0.isBreak());
616:       assertFalse(node0.isAssign());
617:       assertFalse(node0.equals((Object)node1));
618:       assertTrue(boolean2 == boolean0);
619:       assertTrue(boolean2 == boolean1);
620:       assertEquals(4095, Node.COLUMN_MASK);
621:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
622:       assertEquals(55, Node.INFERRED_FUNCTION);
623:       assertEquals(8, Node.FLAG_NO_THROWS);
624:       assertEquals(39, Node.EMPTY_BLOCK);
625:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
626:       assertEquals(53, Node.INPUT_ID);
627:       assertEquals(40, Node.ORIGINALNAME_PROP);
628:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
629:       assertEquals(50, Node.FREE_CALL);
630:       assertEquals(43, Node.IS_CONSTANT_NAME);
631:       assertEquals(54, Node.SLASH_V);
632:       assertEquals(51, Node.STATIC_SOURCE_FILE);
633:       assertEquals(12, Node.COLUMN_BITS);
634:       assertEquals(46, Node.IS_NAMESPACE);
635:       assertEquals(2, Node.POST_FLAG);
636:       assertEquals(30, Node.VAR_ARGS_NAME);
637:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
638:       assertEquals(15, Node.NO_SIDE_EFFECTS);
639:       assertEquals(57, Node.LAST_PROP);
640:       assertEquals(47, Node.IS_DISPATCHER);
641:       assertEquals(29, Node.JSDOC_INFO_PROP);
642:       assertEquals(32, Node.INCRDECR_PROP);
643:       assertEquals(1, Node.DECR_FLAG);
644:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
645:       assertEquals(57, Node.REFLECTED_OBJECT);
646:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
647:       assertEquals(52, Node.LENGTH);
648:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
649:       assertEquals(36, Node.QUOTED_PROP);
650:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
651:       assertEquals(56, Node.CHANGE_TIME);
652:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
653:       assertEquals(49, Node.DIRECT_EVAL);
654:       assertEquals(37, Node.OPT_ARG_NAME);
655:       assertEquals(48, Node.DIRECTIVES);
656:       
657:       StringWriter stringWriter0 = new StringWriter(55);
658:       assertEquals("", stringWriter0.toString());
659:       assertNotNull(stringWriter0);
660:       
661:       node1.appendStringTree(stringWriter0);
662:       assertFalse(node1.isDec());
663:       assertFalse(node1.isTypeOf());
664:       assertFalse(node1.isLabelName());
665:       assertFalse(node1.isGetElem());
666:       assertFalse(node1.hasMoreThanOneChild());
667:       assertFalse(node1.isCast());
668:       assertFalse(node1.isContinue());
669:       assertFalse(node1.hasOneChild());
670:       assertEquals(39, node1.getType());
671:       assertFalse(node1.isAssign());
672:       assertFalse(node1.isLabel());
673:       assertFalse(node1.isAssignAdd());
674:       assertFalse(node1.isWhile());
675:       assertFalse(node1.hasChildren());
676:       assertFalse(node1.isReturn());
677:       assertFalse(node1.isDo());
678:       assertFalse(node1.isWith());
679:       assertFalse(node1.isNew());
680:       assertFalse(node1.isAdd());
681:       assertFalse(node1.isExprResult());
682:       assertFalse(node1.isName());
683:       assertFalse(node1.isOr());
684:       assertFalse(node1.isNull());
685:       assertFalse(node1.isSetterDef());
686:       assertFalse(node1.isComma());
687:       assertFalse(node1.isBreak());
688:       assertFalse(node1.isGetProp());
689:       assertFalse(node1.isCall());
690:       assertFalse(node1.isFalse());
691:       assertEquals(8310, node1.getSourcePosition());
692:       assertFalse(node1.isThrow());
693:       assertFalse(node1.isDebugger());
694:       assertFalse(node1.isFunction());
695:       assertFalse(node1.isString());
696:       assertFalse(node1.isAnd());
697:       assertFalse(node1.isObjectLit());
698:       assertFalse(node1.isNot());
699:       assertFalse(node1.isNE());
700:       assertFalse(node1.isIf());
701:       assertFalse(node1.isDelProp());
702:       assertFalse(node1.isGetterDef());
703:       assertTrue(node1.isNumber());
704:       assertFalse(node1.isEmpty());
705:       assertEquals(118, node1.getCharno());
706:       assertFalse(node1.isFor());
707:       assertFalse(node1.isDefaultCase());
708:       assertFalse(node1.isVoid());
709:       assertFalse(node1.isRegExp());
710:       assertFalse(node1.isInc());
711:       assertFalse(node1.isIn());
712:       assertFalse(node1.isTrue());
713:       assertFalse(node1.isParamList());
714:       assertFalse(node1.isInstanceOf());
715:       assertEquals(2, node1.getLineno());
716:       assertFalse(node1.isVar());
717:       assertFalse(node1.isCatch());
718:       assertEquals(0, node1.getChildCount());
719:       assertFalse(node1.isHook());
720:       assertFalse(node1.isBlock());
721:       assertFalse(node1.isThis());
722:       assertFalse(node1.isSwitch());
723:       assertFalse(node1.isTry());
724:       assertFalse(node1.isCase());
725:       assertFalse(node1.isScript());
726:       assertFalse(node1.isArrayLit());
727:       assertFalse(node1.isStringKey());
728:       assertEquals("NUMBER -1543.0 2\n", stringWriter0.toString());
729:       assertFalse(node1.equals((Object)node0));
730:       assertEquals(43, Node.IS_CONSTANT_NAME);
731:       assertEquals(36, Node.QUOTED_PROP);
732:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
733:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
734:       assertEquals(4095, Node.COLUMN_MASK);
735:       assertEquals(56, Node.CHANGE_TIME);
736:       assertEquals(2, Node.POST_FLAG);
737:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
738:       assertEquals(37, Node.OPT_ARG_NAME);
739:       assertEquals(39, Node.EMPTY_BLOCK);
740:       assertEquals(47, Node.IS_DISPATCHER);
741:       assertEquals(48, Node.DIRECTIVES);
742:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
743:       assertEquals(57, Node.REFLECTED_OBJECT);
744:       assertEquals(53, Node.INPUT_ID);
745:       assertEquals(29, Node.JSDOC_INFO_PROP);
746:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
747:       assertEquals(55, Node.INFERRED_FUNCTION);
748:       assertEquals(52, Node.LENGTH);
749:       assertEquals(8, Node.FLAG_NO_THROWS);
750:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
751:       assertEquals(15, Node.NO_SIDE_EFFECTS);
752:       assertEquals(1, Node.DECR_FLAG);
753:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
754:       assertEquals(49, Node.DIRECT_EVAL);
755:       assertEquals(54, Node.SLASH_V);
756:       assertEquals(57, Node.LAST_PROP);
757:       assertEquals(12, Node.COLUMN_BITS);
758:       assertEquals(40, Node.ORIGINALNAME_PROP);
759:       assertEquals(30, Node.VAR_ARGS_NAME);
760:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
761:       assertEquals(51, Node.STATIC_SOURCE_FILE);
762:       assertEquals(32, Node.INCRDECR_PROP);
763:       assertEquals(46, Node.IS_NAMESPACE);
764:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
765:       assertEquals(50, Node.FREE_CALL);
766:       
767:       boolean boolean3 = node0.hasChildren();
768:       assertFalse(boolean3);
769:       assertFalse(node0.isArrayLit());
770:       assertFalse(node0.isDelProp());
771:       assertFalse(node0.isTry());
772:       assertFalse(node0.isFor());
773:       assertFalse(node0.isIf());
774:       assertFalse(node0.isTrue());
775:       assertFalse(node0.isNE());
776:       assertFalse(node0.isDebugger());
777:       assertFalse(node0.isGetterDef());
778:       assertFalse(node0.isEmpty());
779:       assertFalse(node0.isIn());
780:       assertFalse(node0.isDefaultCase());
781:       assertFalse(node0.isFunction());
782:       assertFalse(node0.isSwitch());
783:       assertEquals(0, node0.getChildCount());
784:       assertFalse(node0.isThrow());
785:       assertFalse(node0.isHook());
786:       assertFalse(node0.isStringKey());
787:       assertFalse(node0.isSetterDef());
788:       assertFalse(node0.isInc());
789:       assertFalse(node0.isParamList());
790:       assertEquals((-1), node0.getCharno());
791:       assertFalse(node0.hasMoreThanOneChild());
792:       assertFalse(node0.isCatch());
793:       assertFalse(node0.isCase());
794:       assertEquals((-1), node0.getLineno());
795:       assertFalse(node0.isThis());
796:       assertFalse(node0.isRegExp());
797:       assertFalse(node0.isBlock());
798:       assertFalse(node0.isWith());
799:       assertFalse(node0.isInstanceOf());
800:       assertFalse(node0.isCast());
801:       assertFalse(node0.isGetElem());
802:       assertFalse(node0.hasOneChild());
803:       assertFalse(node0.isLabelName());
804:       assertEquals((-1543), node0.getType());
805:       assertFalse(node0.isScript());
806:       assertEquals((-1), node0.getSourcePosition());
807:       assertFalse(node0.isOr());
808:       assertFalse(node0.isNot());
809:       assertFalse(node0.isNumber());
810:       assertFalse(node0.isObjectLit());
811:       assertFalse(node0.isDo());
812:       assertFalse(node0.isAnd());
813:       assertFalse(node0.isAssignAdd());
814:       assertFalse(node0.isLabel());
815:       assertFalse(node0.isFalse());
816:       assertFalse(node0.isContinue());
817:       assertFalse(node0.isCall());
818:       assertFalse(node0.isVar());
819:       assertFalse(node0.isName());
820:       assertFalse(node0.isNull());
821:       assertFalse(node0.isNew());
822:       assertFalse(node0.isGetProp());
823:       assertFalse(node0.isString());
824:       assertFalse(node0.isAdd());
825:       assertFalse(node0.isReturn());
826:       assertFalse(node0.isWhile());
827:       assertFalse(node0.isComma());
828:       assertFalse(node0.isExprResult());
829:       assertFalse(node0.isVoid());
830:       assertFalse(node0.isTypeOf());
831:       assertFalse(node0.isDec());
832:       assertFalse(node0.hasChildren());
833:       assertFalse(node0.isBreak());
834:       assertFalse(node0.isAssign());
835:       assertFalse(node0.equals((Object)node1));
836:       assertTrue(boolean3 == boolean1);
837:       assertTrue(boolean3 == boolean0);
838:       assertTrue(boolean3 == boolean2);
839:       assertEquals(4095, Node.COLUMN_MASK);
840:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
841:       assertEquals(55, Node.INFERRED_FUNCTION);
842:       assertEquals(8, Node.FLAG_NO_THROWS);
843:       assertEquals(39, Node.EMPTY_BLOCK);
844:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
845:       assertEquals(53, Node.INPUT_ID);
846:       assertEquals(40, Node.ORIGINALNAME_PROP);
847:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
848:       assertEquals(50, Node.FREE_CALL);
849:       assertEquals(43, Node.IS_CONSTANT_NAME);
850:       assertEquals(54, Node.SLASH_V);
851:       assertEquals(51, Node.STATIC_SOURCE_FILE);
852:       assertEquals(12, Node.COLUMN_BITS);
853:       assertEquals(46, Node.IS_NAMESPACE);
854:       assertEquals(2, Node.POST_FLAG);
855:       assertEquals(30, Node.VAR_ARGS_NAME);
856:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
857:       assertEquals(15, Node.NO_SIDE_EFFECTS);
858:       assertEquals(57, Node.LAST_PROP);
859:       assertEquals(47, Node.IS_DISPATCHER);
860:       assertEquals(29, Node.JSDOC_INFO_PROP);
861:       assertEquals(32, Node.INCRDECR_PROP);
862:       assertEquals(1, Node.DECR_FLAG);
863:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
864:       assertEquals(57, Node.REFLECTED_OBJECT);
865:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
866:       assertEquals(52, Node.LENGTH);
867:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
868:       assertEquals(36, Node.QUOTED_PROP);
869:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
870:       assertEquals(56, Node.CHANGE_TIME);
871:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
872:       assertEquals(49, Node.DIRECT_EVAL);
873:       assertEquals(37, Node.OPT_ARG_NAME);
874:       assertEquals(48, Node.DIRECTIVES);
875:       
876:       Iterable<Node> iterable0 = node1.children();
877:       assertFalse(node1.isDec());
878:       assertFalse(node1.isTypeOf());
879:       assertFalse(node1.isLabelName());
880:       assertFalse(node1.isGetElem());
881:       assertFalse(node1.hasMoreThanOneChild());
882:       assertFalse(node1.isCast());
883:       assertFalse(node1.isContinue());
884:       assertFalse(node1.hasOneChild());
885:       assertEquals(39, node1.getType());
886:       assertFalse(node1.isAssign());
887:       assertFalse(node1.isLabel());
888:       assertFalse(node1.isAssignAdd());
889:       assertFalse(node1.isWhile());
890:       assertFalse(node1.hasChildren());
891:       assertFalse(node1.isReturn());
892:       assertFalse(node1.isDo());
893:       assertFalse(node1.isWith());
894:       assertFalse(node1.isNew());
895:       assertFalse(node1.isAdd());
896:       assertFalse(node1.isExprResult());
897:       assertFalse(node1.isName());
898:       assertFalse(node1.isOr());
899:       assertFalse(node1.isNull());
900:       assertFalse(node1.isSetterDef());
901:       assertFalse(node1.isComma());
902:       assertFalse(node1.isBreak());
903:       assertFalse(node1.isGetProp());
904:       assertFalse(node1.isCall());
905:       assertFalse(node1.isFalse());
906:       assertEquals(8310, node1.getSourcePosition());
907:       assertFalse(node1.isThrow());
908:       assertFalse(node1.isDebugger());
909:       assertFalse(node1.isFunction());
910:       assertFalse(node1.isString());
911:       assertFalse(node1.isAnd());
912:       assertFalse(node1.isObjectLit());
913:       assertFalse(node1.isNot());
914:       assertFalse(node1.isNE());
915:       assertFalse(node1.isIf());
916:       assertFalse(node1.isDelProp());
917:       assertFalse(node1.isGetterDef());
918:       assertTrue(node1.isNumber());
919:       assertFalse(node1.isEmpty());
920:       assertEquals(118, node1.getCharno());
921:       assertFalse(node1.isFor());
922:       assertFalse(node1.isDefaultCase());
923:       assertFalse(node1.isVoid());
924:       assertFalse(node1.isRegExp());
925:       assertFalse(node1.isInc());
926:       assertFalse(node1.isIn());
927:       assertFalse(node1.isTrue());
928:       assertFalse(node1.isParamList());
929:       assertFalse(node1.isInstanceOf());
930:       assertEquals(2, node1.getLineno());
931:       assertFalse(node1.isVar());
932:       assertFalse(node1.isCatch());
933:       assertEquals(0, node1.getChildCount());
934:       assertFalse(node1.isHook());
935:       assertFalse(node1.isBlock());
936:       assertFalse(node1.isThis());
937:       assertFalse(node1.isSwitch());
938:       assertFalse(node1.isTry());
939:       assertFalse(node1.isCase());
940:       assertFalse(node1.isScript());
941:       assertFalse(node1.isArrayLit());
942:       assertFalse(node1.isStringKey());
943:       assertFalse(node1.equals((Object)node0));
944:       assertFalse(iterable0.contains(node1));
945:       assertEquals(43, Node.IS_CONSTANT_NAME);
946:       assertEquals(36, Node.QUOTED_PROP);
947:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
948:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
949:       assertEquals(4095, Node.COLUMN_MASK);
950:       assertEquals(56, Node.CHANGE_TIME);
951:       assertEquals(2, Node.POST_FLAG);
952:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
953:       assertEquals(37, Node.OPT_ARG_NAME);
954:       assertEquals(39, Node.EMPTY_BLOCK);
955:       assertEquals(47, Node.IS_DISPATCHER);
956:       assertEquals(48, Node.DIRECTIVES);
957:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
958:       assertEquals(57, Node.REFLECTED_OBJECT);
959:       assertEquals(53, Node.INPUT_ID);
960:       assertEquals(29, Node.JSDOC_INFO_PROP);
961:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
962:       assertEquals(55, Node.INFERRED_FUNCTION);
963:       assertEquals(52, Node.LENGTH);
964:       assertEquals(8, Node.FLAG_NO_THROWS);
965:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
966:       assertEquals(15, Node.NO_SIDE_EFFECTS);
967:       assertEquals(1, Node.DECR_FLAG);
968:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
969:       assertEquals(49, Node.DIRECT_EVAL);
970:       assertEquals(54, Node.SLASH_V);
971:       assertEquals(57, Node.LAST_PROP);
972:       assertEquals(12, Node.COLUMN_BITS);
973:       assertEquals(40, Node.ORIGINALNAME_PROP);
974:       assertEquals(30, Node.VAR_ARGS_NAME);
975:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
976:       assertEquals(51, Node.STATIC_SOURCE_FILE);
977:       assertEquals(32, Node.INCRDECR_PROP);
978:       assertEquals(46, Node.IS_NAMESPACE);
979:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
980:       assertEquals(50, Node.FREE_CALL);
981:       assertNotNull(iterable0);
982:       
983:       Set<String> set0 = node0.getDirectives();
984:       assertFalse(node0.isArrayLit());
985:       assertFalse(node0.isDelProp());
986:       assertFalse(node0.isTry());
987:       assertFalse(node0.isFor());
988:       assertFalse(node0.isIf());
989:       assertFalse(node0.isTrue());
990:       assertFalse(node0.isNE());
991:       assertFalse(node0.isDebugger());
992:       assertFalse(node0.isGetterDef());
993:       assertFalse(node0.isEmpty());
994:       assertFalse(node0.isIn());
995:       assertFalse(node0.isDefaultCase());
996:       assertFalse(node0.isFunction());
997:       assertFalse(node0.isSwitch());
998:       assertEquals(0, node0.getChildCount());
999:       assertFalse(node0.isThrow());
1000:       assertFalse(node0.isHook());
1001:       assertFalse(node0.isStringKey());
1002:       assertFalse(node0.isSetterDef());
1003:       assertFalse(node0.isInc());
1004:       assertFalse(node0.isParamList());
1005:       assertEquals((-1), node0.getCharno());
1006:       assertFalse(node0.hasMoreThanOneChild());
1007:       assertFalse(node0.isCatch());
1008:       assertFalse(node0.isCase());
1009:       assertEquals((-1), node0.getLineno());
1010:       assertFalse(node0.isThis());
1011:       assertFalse(node0.isRegExp());
1012:       assertFalse(node0.isBlock());
1013:       assertFalse(node0.isWith());
1014:       assertFalse(node0.isInstanceOf());
1015:       assertFalse(node0.isCast());
1016:       assertFalse(node0.isGetElem());
1017:       assertFalse(node0.hasOneChild());
1018:       assertFalse(node0.isLabelName());
1019:       assertEquals((-1543), node0.getType());
1020:       assertFalse(node0.isScript());
1021:       assertEquals((-1), node0.getSourcePosition());
1022:       assertFalse(node0.isOr());
1023:       assertFalse(node0.isNot());
1024:       assertFalse(node0.isNumber());
1025:       assertFalse(node0.isObjectLit());
1026:       assertFalse(node0.isDo());
1027:       assertFalse(node0.isAnd());
1028:       assertFalse(node0.isAssignAdd());
1029:       assertFalse(node0.isLabel());
1030:       assertFalse(node0.isFalse());
1031:       assertFalse(node0.isContinue());
1032:       assertFalse(node0.isCall());
1033:       assertFalse(node0.isVar());
1034:       assertFalse(node0.isName());
1035:       assertFalse(node0.isNull());
1036:       assertFalse(node0.isNew());
1037:       assertFalse(node0.isGetProp());
1038:       assertFalse(node0.isString());
1039:       assertFalse(node0.isAdd());
1040:       assertFalse(node0.isReturn());
1041:       assertFalse(node0.isWhile());
1042:       assertFalse(node0.isComma());
1043:       assertFalse(node0.isExprResult());
1044:       assertFalse(node0.isVoid());
1045:       assertFalse(node0.isTypeOf());
1046:       assertFalse(node0.isDec());
1047:       assertFalse(node0.hasChildren());
1048:       assertFalse(node0.isBreak());
1049:       assertFalse(node0.isAssign());
1050:       assertFalse(node0.equals((Object)node1));
1051:       assertEquals(4095, Node.COLUMN_MASK);
1052:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1053:       assertEquals(55, Node.INFERRED_FUNCTION);
1054:       assertEquals(8, Node.FLAG_NO_THROWS);
1055:       assertEquals(39, Node.EMPTY_BLOCK);
1056:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1057:       assertEquals(53, Node.INPUT_ID);
1058:       assertEquals(40, Node.ORIGINALNAME_PROP);
1059:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1060:       assertEquals(50, Node.FREE_CALL);
1061:       assertEquals(43, Node.IS_CONSTANT_NAME);
1062:       assertEquals(54, Node.SLASH_V);
1063:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1064:       assertEquals(12, Node.COLUMN_BITS);
1065:       assertEquals(46, Node.IS_NAMESPACE);
1066:       assertEquals(2, Node.POST_FLAG);
1067:       assertEquals(30, Node.VAR_ARGS_NAME);
1068:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1069:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1070:       assertEquals(57, Node.LAST_PROP);
1071:       assertEquals(47, Node.IS_DISPATCHER);
1072:       assertEquals(29, Node.JSDOC_INFO_PROP);
1073:       assertEquals(32, Node.INCRDECR_PROP);
1074:       assertEquals(1, Node.DECR_FLAG);
1075:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1076:       assertEquals(57, Node.REFLECTED_OBJECT);
1077:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1078:       assertEquals(52, Node.LENGTH);
1079:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1080:       assertEquals(36, Node.QUOTED_PROP);
1081:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1082:       assertEquals(56, Node.CHANGE_TIME);
1083:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1084:       assertEquals(49, Node.DIRECT_EVAL);
1085:       assertEquals(37, Node.OPT_ARG_NAME);
1086:       assertEquals(48, Node.DIRECTIVES);
1087:       assertNull(set0);
1088:       
1089:       boolean boolean4 = node1.isBlock();
1090:       assertFalse(boolean4);
1091:       assertFalse(node1.isDec());
1092:       assertFalse(node1.isTypeOf());
1093:       assertFalse(node1.isLabelName());
1094:       assertFalse(node1.isGetElem());
1095:       assertFalse(node1.hasMoreThanOneChild());
1096:       assertFalse(node1.isCast());
1097:       assertFalse(node1.isContinue());
1098:       assertFalse(node1.hasOneChild());
1099:       assertEquals(39, node1.getType());
1100:       assertFalse(node1.isAssign());
1101:       assertFalse(node1.isLabel());
1102:       assertFalse(node1.isAssignAdd());
1103:       assertFalse(node1.isWhile());
1104:       assertFalse(node1.hasChildren());
1105:       assertFalse(node1.isReturn());
1106:       assertFalse(node1.isDo());
1107:       assertFalse(node1.isWith());
1108:       assertFalse(node1.isNew());
1109:       assertFalse(node1.isAdd());
1110:       assertFalse(node1.isExprResult());
1111:       assertFalse(node1.isName());
1112:       assertFalse(node1.isOr());
1113:       assertFalse(node1.isNull());
1114:       assertFalse(node1.isSetterDef());
1115:       assertFalse(node1.isComma());
1116:       assertFalse(node1.isBreak());
1117:       assertFalse(node1.isGetProp());
1118:       assertFalse(node1.isCall());
1119:       assertFalse(node1.isFalse());
1120:       assertEquals(8310, node1.getSourcePosition());
1121:       assertFalse(node1.isThrow());
1122:       assertFalse(node1.isDebugger());
1123:       assertFalse(node1.isFunction());
1124:       assertFalse(node1.isString());
1125:       assertFalse(node1.isAnd());
1126:       assertFalse(node1.isObjectLit());
1127:       assertFalse(node1.isNot());
1128:       assertFalse(node1.isNE());
1129:       assertFalse(node1.isIf());
1130:       assertFalse(node1.isDelProp());
1131:       assertFalse(node1.isGetterDef());
1132:       assertTrue(node1.isNumber());
1133:       assertFalse(node1.isEmpty());
1134:       assertEquals(118, node1.getCharno());
1135:       assertFalse(node1.isFor());
1136:       assertFalse(node1.isDefaultCase());
1137:       assertFalse(node1.isVoid());
1138:       assertFalse(node1.isRegExp());
1139:       assertFalse(node1.isInc());
1140:       assertFalse(node1.isIn());
1141:       assertFalse(node1.isTrue());
1142:       assertFalse(node1.isParamList());
1143:       assertFalse(node1.isInstanceOf());
1144:       assertEquals(2, node1.getLineno());
1145:       assertFalse(node1.isVar());
1146:       assertFalse(node1.isCatch());
1147:       assertEquals(0, node1.getChildCount());
1148:       assertFalse(node1.isHook());
1149:       assertFalse(node1.isBlock());
1150:       assertFalse(node1.isThis());
1151:       assertFalse(node1.isSwitch());
1152:       assertFalse(node1.isTry());
1153:       assertFalse(node1.isCase());
1154:       assertFalse(node1.isScript());
1155:       assertFalse(node1.isArrayLit());
1156:       assertFalse(node1.isStringKey());
1157:       assertFalse(node1.equals((Object)node0));
1158:       assertTrue(boolean4 == boolean1);
1159:       assertTrue(boolean4 == boolean3);
1160:       assertTrue(boolean4 == boolean2);
1161:       assertTrue(boolean4 == boolean0);
1162:       assertEquals(43, Node.IS_CONSTANT_NAME);
1163:       assertEquals(36, Node.QUOTED_PROP);
1164:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1165:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1166:       assertEquals(4095, Node.COLUMN_MASK);
1167:       assertEquals(56, Node.CHANGE_TIME);
1168:       assertEquals(2, Node.POST_FLAG);
1169:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1170:       assertEquals(37, Node.OPT_ARG_NAME);
1171:       assertEquals(39, Node.EMPTY_BLOCK);
1172:       assertEquals(47, Node.IS_DISPATCHER);
1173:       assertEquals(48, Node.DIRECTIVES);
1174:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1175:       assertEquals(57, Node.REFLECTED_OBJECT);
1176:       assertEquals(53, Node.INPUT_ID);
1177:       assertEquals(29, Node.JSDOC_INFO_PROP);
1178:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1179:       assertEquals(55, Node.INFERRED_FUNCTION);
1180:       assertEquals(52, Node.LENGTH);
1181:       assertEquals(8, Node.FLAG_NO_THROWS);
1182:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1183:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1184:       assertEquals(1, Node.DECR_FLAG);
1185:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1186:       assertEquals(49, Node.DIRECT_EVAL);
1187:       assertEquals(54, Node.SLASH_V);
1188:       assertEquals(57, Node.LAST_PROP);
1189:       assertEquals(12, Node.COLUMN_BITS);
1190:       assertEquals(40, Node.ORIGINALNAME_PROP);
1191:       assertEquals(30, Node.VAR_ARGS_NAME);
1192:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1193:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1194:       assertEquals(32, Node.INCRDECR_PROP);
1195:       assertEquals(46, Node.IS_NAMESPACE);
1196:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1197:       assertEquals(50, Node.FREE_CALL);
1198:   }
1199: }
RegularFileObject[/tmp/EvoSuite_85_1628255615558/com/google/javascript/rhino/Node_85_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:13:35 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_85_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_85_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.Maps$KeySet",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.common.collect.ImmutableList$SerializedForm",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_85_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.Token",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.JSDocInfo",
269:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
270:       "com.google.common.collect.Sets",
271:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
272:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
273:       "com.google.javascript.rhino.jstype.JSType$1",
274:       "com.google.javascript.rhino.jstype.JSType",
275:       "com.google.javascript.rhino.SimpleErrorReporter",
276:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
277:       "com.google.common.base.Joiner",
278:       "com.google.common.base.Joiner$1",
279:       "com.google.common.collect.Collections2",
280:       "com.google.common.base.Joiner$MapJoiner",
281:       "com.google.common.collect.Maps",
282:       "com.google.common.collect.AbstractMultimap",
283:       "com.google.common.collect.AbstractMapBasedMultimap",
284:       "com.google.common.collect.AbstractSetMultimap",
285:       "com.google.common.collect.LinkedHashMultimap",
286:       "com.google.common.collect.AbstractMapEntry",
287:       "com.google.common.collect.ImmutableEntry",
288:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
289:       "com.google.common.collect.AbstractListMultimap",
290:       "com.google.common.collect.ArrayListMultimap",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
292:       "com.google.common.collect.ImmutableCollection",
293:       "com.google.common.collect.RegularImmutableList",
294:       "com.google.common.collect.ObjectArrays",
295:       "com.google.common.collect.ImmutableList",
296:       "com.google.javascript.rhino.jstype.ModificationVisitor",
297:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
298:       "com.google.common.collect.ImmutableCollection$Builder",
299:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
300:       "com.google.common.collect.ImmutableList$Builder",
301:       "com.google.common.collect.UnmodifiableIterator",
302:       "com.google.common.collect.UnmodifiableListIterator",
303:       "com.google.common.collect.Iterators$1",
304:       "com.google.common.collect.Iterators$2",
305:       "com.google.common.collect.Iterators",
306:       "com.google.javascript.rhino.jstype.ObjectType",
307:       "com.google.javascript.rhino.jstype.ProxyObjectType",
308:       "com.google.javascript.rhino.jstype.TemplateType",
309:       "com.google.javascript.rhino.jstype.ValueType",
310:       "com.google.javascript.rhino.jstype.BooleanType",
311:       "com.google.javascript.rhino.jstype.NullType",
312:       "com.google.javascript.rhino.jstype.NumberType",
313:       "com.google.javascript.rhino.jstype.StringType",
314:       "com.google.javascript.rhino.jstype.UnknownType",
315:       "com.google.javascript.rhino.jstype.VoidType",
316:       "com.google.javascript.rhino.jstype.AllType",
317:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
318:       "com.google.common.collect.ImmutableMap",
319:       "com.google.common.collect.ImmutableBiMap",
320:       "com.google.common.collect.EmptyImmutableBiMap",
321:       "com.google.javascript.rhino.jstype.PropertyMap$1",
322:       "com.google.javascript.rhino.jstype.PropertyMap",
323:       "com.google.javascript.rhino.jstype.FunctionType",
324:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
325:       "com.google.javascript.rhino.jstype.ArrowType",
326:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
327:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
328:       "com.google.javascript.rhino.jstype.InstanceObjectType",
329:       "com.google.javascript.rhino.jstype.Property",
330:       "com.google.common.collect.Lists",
331:       "com.google.javascript.rhino.jstype.NoObjectType",
332:       "com.google.javascript.rhino.jstype.NoType",
333:       "com.google.javascript.rhino.jstype.NoResolvedType",
334:       "com.google.common.collect.SingletonImmutableList",
335:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
336:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
337:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
338:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
339:       "com.google.javascript.rhino.jstype.UnionType",
340:       "com.google.javascript.rhino.jstype.FunctionBuilder",
341:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
342:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
343:       "com.google.javascript.rhino.jstype.EnumType",
344:       "com.google.javascript.rhino.jstype.EnumElementType",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.base.Objects",
347:       "com.google.javascript.rhino.InputId",
348:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
349:       "com.google.javascript.rhino.JSDocInfo$Visibility",
350:       "com.google.common.collect.Iterables",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2",
359:       "com.google.javascript.rhino.jstype.JSType$TypePair",
360:       "com.google.common.collect.AbstractIndexedListIterator",
361:       "com.google.common.collect.Iterators$11",
362:       "com.google.javascript.rhino.JSTypeExpression",
363:       "com.google.javascript.rhino.jstype.TemplatizedType",
364:       "com.google.common.collect.ImmutableSet",
365:       "com.google.common.collect.EmptyImmutableSet",
366:       "com.google.javascript.rhino.jstype.NamedType",
367:       "com.google.common.collect.Iterators$12",
368:       "com.google.common.collect.Sets$ImprovedAbstractSet",
369:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
370:       "com.google.common.collect.Hashing",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
372:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
374:       "com.google.common.collect.ImmutableList$1"
375:     );
376:   }
377: }

[MASTER] 13:13:35.807 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-1543), "");
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals((-1543), node0.getType());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertNotNull(node0);

boolean boolean0 = node0.isVoid();
assertFalse(boolean0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals((-1543), node0.getType());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

boolean boolean1 = node0.isStringKey();
assertFalse(boolean1);
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals((-1543), node0.getType());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertTrue(boolean1 == boolean0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

Node node1 = Node.newNumber((double) (-1543), 2, 118);
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.hasOneChild());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isWith());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertEquals(8310, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isEmpty());
assertEquals(118, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertEquals(2, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.equals((Object)node0));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNotNull(node1);

node1.setWasEmptyNode(false);
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.hasOneChild());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isWith());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertEquals(8310, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isEmpty());
assertEquals(118, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertEquals(2, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.equals((Object)node0));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

boolean boolean2 = node0.isCall();
assertFalse(boolean2);
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals((-1543), node0.getType());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

StringWriter stringWriter0 = new StringWriter(55);
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

node1.appendStringTree(stringWriter0);
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.hasOneChild());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isWith());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertEquals(8310, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isEmpty());
assertEquals(118, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertEquals(2, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertEquals("NUMBER -1543.0 2\n", stringWriter0.toString());
assertFalse(node1.equals((Object)node0));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

boolean boolean3 = node0.hasChildren();
assertFalse(boolean3);
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals((-1543), node0.getType());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.hasOneChild());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isWith());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertEquals(8310, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isEmpty());
assertEquals(118, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertEquals(2, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.equals((Object)node0));
assertFalse(iterable0.contains(node1));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNotNull(iterable0);

Set<String> set0 = node0.getDirectives();
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals((-1543), node0.getType());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.equals((Object)node1));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertNull(set0);

boolean boolean4 = node1.isBlock();
assertFalse(boolean4);
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.hasOneChild());
assertEquals(39, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isWith());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertEquals(8310, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isEmpty());
assertEquals(118, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertEquals(2, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.equals((Object)node0));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);


[MASTER] 13:13:41.862 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_103_1628255621677/com/google/javascript/rhino/Node_103_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_103_1628255621677/com/google/javascript/rhino/Node_103_tmp__ESTest_scaffolding.java]]
[MASTER] 13:13:41.862 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:41.862 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:41.863 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 944
[MASTER] 13:13:41.864 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_103_1628255621677/com/google/javascript/rhino/Node_103_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:13:41 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.io.StringWriter;
12: import java.util.Set;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_103_tmp__ESTest extends Node_103_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString(4669, "");
23:       assertFalse(node0.isDefaultCase());
24:       assertFalse(node0.isTrue());
25:       assertFalse(node0.isFunction());
26:       assertFalse(node0.isDebugger());
27:       assertFalse(node0.isRegExp());
28:       assertEquals(0, node0.getChildCount());
29:       assertEquals(4669, node0.getType());
30:       assertFalse(node0.isCatch());
31:       assertFalse(node0.isParamList());
32:       assertFalse(node0.isArrayLit());
33:       assertFalse(node0.isVoid());
34:       assertFalse(node0.isDelProp());
35:       assertFalse(node0.isIf());
36:       assertFalse(node0.isNull());
37:       assertFalse(node0.isNE());
38:       assertFalse(node0.isEmpty());
39:       assertFalse(node0.isIn());
40:       assertFalse(node0.isAdd());
41:       assertFalse(node0.isVar());
42:       assertFalse(node0.isSetterDef());
43:       assertFalse(node0.isNew());
44:       assertEquals((-1), node0.getCharno());
45:       assertFalse(node0.hasMoreThanOneChild());
46:       assertEquals((-1), node0.getLineno());
47:       assertFalse(node0.isSwitch());
48:       assertFalse(node0.isGetterDef());
49:       assertFalse(node0.isNumber());
50:       assertFalse(node0.isFor());
51:       assertFalse(node0.isStringKey());
52:       assertFalse(node0.isThis());
53:       assertFalse(node0.isHook());
54:       assertFalse(node0.isBlock());
55:       assertFalse(node0.isCase());
56:       assertFalse(node0.hasOneChild());
57:       assertFalse(node0.isTry());
58:       assertFalse(node0.isWith());
59:       assertFalse(node0.isScript());
60:       assertFalse(node0.isObjectLit());
61:       assertFalse(node0.isNot());
62:       assertFalse(node0.isCast());
63:       assertFalse(node0.isInstanceOf());
64:       assertFalse(node0.isAnd());
65:       assertFalse(node0.isExprResult());
66:       assertFalse(node0.isLabelName());
67:       assertFalse(node0.isThrow());
68:       assertFalse(node0.isFalse());
69:       assertFalse(node0.isOr());
70:       assertFalse(node0.isLabel());
71:       assertFalse(node0.isAssignAdd());
72:       assertFalse(node0.isInc());
73:       assertFalse(node0.isDo());
74:       assertFalse(node0.isWhile());
75:       assertFalse(node0.isString());
76:       assertFalse(node0.isContinue());
77:       assertFalse(node0.isCall());
78:       assertFalse(node0.isName());
79:       assertFalse(node0.hasChildren());
80:       assertFalse(node0.isBreak());
81:       assertFalse(node0.isGetElem());
82:       assertFalse(node0.isTypeOf());
83:       assertEquals((-1), node0.getSourcePosition());
84:       assertFalse(node0.isDec());
85:       assertFalse(node0.isAssign());
86:       assertFalse(node0.isComma());
87:       assertFalse(node0.isReturn());
88:       assertFalse(node0.isGetProp());
89:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
90:       assertEquals(50, Node.FREE_CALL);
91:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
92:       assertEquals(40, Node.ORIGINALNAME_PROP);
93:       assertEquals(39, Node.EMPTY_BLOCK);
94:       assertEquals(48, Node.DIRECTIVES);
95:       assertEquals(52, Node.LENGTH);
96:       assertEquals(8, Node.FLAG_NO_THROWS);
97:       assertEquals(54, Node.SLASH_V);
98:       assertEquals(57, Node.REFLECTED_OBJECT);
99:       assertEquals(30, Node.VAR_ARGS_NAME);
100:       assertEquals(57, Node.LAST_PROP);
101:       assertEquals(55, Node.INFERRED_FUNCTION);
102:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
103:       assertEquals(15, Node.NO_SIDE_EFFECTS);
104:       assertEquals(53, Node.INPUT_ID);
105:       assertEquals(2, Node.POST_FLAG);
106:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
107:       assertEquals(47, Node.IS_DISPATCHER);
108:       assertEquals(29, Node.JSDOC_INFO_PROP);
109:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
110:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
111:       assertEquals(37, Node.OPT_ARG_NAME);
112:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
113:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
114:       assertEquals(43, Node.IS_CONSTANT_NAME);
115:       assertEquals(56, Node.CHANGE_TIME);
116:       assertEquals(51, Node.STATIC_SOURCE_FILE);
117:       assertEquals(36, Node.QUOTED_PROP);
118:       assertEquals(46, Node.IS_NAMESPACE);
119:       assertEquals(49, Node.DIRECT_EVAL);
120:       assertEquals(1, Node.DECR_FLAG);
121:       assertEquals(4095, Node.COLUMN_MASK);
122:       assertEquals(32, Node.INCRDECR_PROP);
123:       assertEquals(12, Node.COLUMN_BITS);
124:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
125:       assertNotNull(node0);
126:       
127:       boolean boolean0 = node0.isVoid();
128:       assertFalse(boolean0);
129:       assertFalse(node0.isDefaultCase());
130:       assertFalse(node0.isTrue());
131:       assertFalse(node0.isFunction());
132:       assertFalse(node0.isDebugger());
133:       assertFalse(node0.isRegExp());
134:       assertEquals(0, node0.getChildCount());
135:       assertEquals(4669, node0.getType());
136:       assertFalse(node0.isCatch());
137:       assertFalse(node0.isParamList());
138:       assertFalse(node0.isArrayLit());
139:       assertFalse(node0.isVoid());
140:       assertFalse(node0.isDelProp());
141:       assertFalse(node0.isIf());
142:       assertFalse(node0.isNull());
143:       assertFalse(node0.isNE());
144:       assertFalse(node0.isEmpty());
145:       assertFalse(node0.isIn());
146:       assertFalse(node0.isAdd());
147:       assertFalse(node0.isVar());
148:       assertFalse(node0.isSetterDef());
149:       assertFalse(node0.isNew());
150:       assertEquals((-1), node0.getCharno());
151:       assertFalse(node0.hasMoreThanOneChild());
152:       assertEquals((-1), node0.getLineno());
153:       assertFalse(node0.isSwitch());
154:       assertFalse(node0.isGetterDef());
155:       assertFalse(node0.isNumber());
156:       assertFalse(node0.isFor());
157:       assertFalse(node0.isStringKey());
158:       assertFalse(node0.isThis());
159:       assertFalse(node0.isHook());
160:       assertFalse(node0.isBlock());
161:       assertFalse(node0.isCase());
162:       assertFalse(node0.hasOneChild());
163:       assertFalse(node0.isTry());
164:       assertFalse(node0.isWith());
165:       assertFalse(node0.isScript());
166:       assertFalse(node0.isObjectLit());
167:       assertFalse(node0.isNot());
168:       assertFalse(node0.isCast());
169:       assertFalse(node0.isInstanceOf());
170:       assertFalse(node0.isAnd());
171:       assertFalse(node0.isExprResult());
172:       assertFalse(node0.isLabelName());
173:       assertFalse(node0.isThrow());
174:       assertFalse(node0.isFalse());
175:       assertFalse(node0.isOr());
176:       assertFalse(node0.isLabel());
177:       assertFalse(node0.isAssignAdd());
178:       assertFalse(node0.isInc());
179:       assertFalse(node0.isDo());
180:       assertFalse(node0.isWhile());
181:       assertFalse(node0.isString());
182:       assertFalse(node0.isContinue());
183:       assertFalse(node0.isCall());
184:       assertFalse(node0.isName());
185:       assertFalse(node0.hasChildren());
186:       assertFalse(node0.isBreak());
187:       assertFalse(node0.isGetElem());
188:       assertFalse(node0.isTypeOf());
189:       assertEquals((-1), node0.getSourcePosition());
190:       assertFalse(node0.isDec());
191:       assertFalse(node0.isAssign());
192:       assertFalse(node0.isComma());
193:       assertFalse(node0.isReturn());
194:       assertFalse(node0.isGetProp());
195:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
196:       assertEquals(50, Node.FREE_CALL);
197:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
198:       assertEquals(40, Node.ORIGINALNAME_PROP);
199:       assertEquals(39, Node.EMPTY_BLOCK);
200:       assertEquals(48, Node.DIRECTIVES);
201:       assertEquals(52, Node.LENGTH);
202:       assertEquals(8, Node.FLAG_NO_THROWS);
203:       assertEquals(54, Node.SLASH_V);
204:       assertEquals(57, Node.REFLECTED_OBJECT);
205:       assertEquals(30, Node.VAR_ARGS_NAME);
206:       assertEquals(57, Node.LAST_PROP);
207:       assertEquals(55, Node.INFERRED_FUNCTION);
208:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
209:       assertEquals(15, Node.NO_SIDE_EFFECTS);
210:       assertEquals(53, Node.INPUT_ID);
211:       assertEquals(2, Node.POST_FLAG);
212:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
213:       assertEquals(47, Node.IS_DISPATCHER);
214:       assertEquals(29, Node.JSDOC_INFO_PROP);
215:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
216:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
217:       assertEquals(37, Node.OPT_ARG_NAME);
218:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
219:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
220:       assertEquals(43, Node.IS_CONSTANT_NAME);
221:       assertEquals(56, Node.CHANGE_TIME);
222:       assertEquals(51, Node.STATIC_SOURCE_FILE);
223:       assertEquals(36, Node.QUOTED_PROP);
224:       assertEquals(46, Node.IS_NAMESPACE);
225:       assertEquals(49, Node.DIRECT_EVAL);
226:       assertEquals(1, Node.DECR_FLAG);
227:       assertEquals(4095, Node.COLUMN_MASK);
228:       assertEquals(32, Node.INCRDECR_PROP);
229:       assertEquals(12, Node.COLUMN_BITS);
230:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
231:       
232:       boolean boolean1 = node0.isStringKey();
233:       assertFalse(boolean1);
234:       assertFalse(node0.isDefaultCase());
235:       assertFalse(node0.isTrue());
236:       assertFalse(node0.isFunction());
237:       assertFalse(node0.isDebugger());
238:       assertFalse(node0.isRegExp());
239:       assertEquals(0, node0.getChildCount());
240:       assertEquals(4669, node0.getType());
241:       assertFalse(node0.isCatch());
242:       assertFalse(node0.isParamList());
243:       assertFalse(node0.isArrayLit());
244:       assertFalse(node0.isVoid());
245:       assertFalse(node0.isDelProp());
246:       assertFalse(node0.isIf());
247:       assertFalse(node0.isNull());
248:       assertFalse(node0.isNE());
249:       assertFalse(node0.isEmpty());
250:       assertFalse(node0.isIn());
251:       assertFalse(node0.isAdd());
252:       assertFalse(node0.isVar());
253:       assertFalse(node0.isSetterDef());
254:       assertFalse(node0.isNew());
255:       assertEquals((-1), node0.getCharno());
256:       assertFalse(node0.hasMoreThanOneChild());
257:       assertEquals((-1), node0.getLineno());
258:       assertFalse(node0.isSwitch());
259:       assertFalse(node0.isGetterDef());
260:       assertFalse(node0.isNumber());
261:       assertFalse(node0.isFor());
262:       assertFalse(node0.isStringKey());
263:       assertFalse(node0.isThis());
264:       assertFalse(node0.isHook());
265:       assertFalse(node0.isBlock());
266:       assertFalse(node0.isCase());
267:       assertFalse(node0.hasOneChild());
268:       assertFalse(node0.isTry());
269:       assertFalse(node0.isWith());
270:       assertFalse(node0.isScript());
271:       assertFalse(node0.isObjectLit());
272:       assertFalse(node0.isNot());
273:       assertFalse(node0.isCast());
274:       assertFalse(node0.isInstanceOf());
275:       assertFalse(node0.isAnd());
276:       assertFalse(node0.isExprResult());
277:       assertFalse(node0.isLabelName());
278:       assertFalse(node0.isThrow());
279:       assertFalse(node0.isFalse());
280:       assertFalse(node0.isOr());
281:       assertFalse(node0.isLabel());
282:       assertFalse(node0.isAssignAdd());
283:       assertFalse(node0.isInc());
284:       assertFalse(node0.isDo());
285:       assertFalse(node0.isWhile());
286:       assertFalse(node0.isString());
287:       assertFalse(node0.isContinue());
288:       assertFalse(node0.isCall());
289:       assertFalse(node0.isName());
290:       assertFalse(node0.hasChildren());
291:       assertFalse(node0.isBreak());
292:       assertFalse(node0.isGetElem());
293:       assertFalse(node0.isTypeOf());
294:       assertEquals((-1), node0.getSourcePosition());
295:       assertFalse(node0.isDec());
296:       assertFalse(node0.isAssign());
297:       assertFalse(node0.isComma());
298:       assertFalse(node0.isReturn());
299:       assertFalse(node0.isGetProp());
300:       assertTrue(boolean1 == boolean0);
301:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
302:       assertEquals(50, Node.FREE_CALL);
303:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
304:       assertEquals(40, Node.ORIGINALNAME_PROP);
305:       assertEquals(39, Node.EMPTY_BLOCK);
306:       assertEquals(48, Node.DIRECTIVES);
307:       assertEquals(52, Node.LENGTH);
308:       assertEquals(8, Node.FLAG_NO_THROWS);
309:       assertEquals(54, Node.SLASH_V);
310:       assertEquals(57, Node.REFLECTED_OBJECT);
311:       assertEquals(30, Node.VAR_ARGS_NAME);
312:       assertEquals(57, Node.LAST_PROP);
313:       assertEquals(55, Node.INFERRED_FUNCTION);
314:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
315:       assertEquals(15, Node.NO_SIDE_EFFECTS);
316:       assertEquals(53, Node.INPUT_ID);
317:       assertEquals(2, Node.POST_FLAG);
318:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
319:       assertEquals(47, Node.IS_DISPATCHER);
320:       assertEquals(29, Node.JSDOC_INFO_PROP);
321:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
322:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
323:       assertEquals(37, Node.OPT_ARG_NAME);
324:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
325:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
326:       assertEquals(43, Node.IS_CONSTANT_NAME);
327:       assertEquals(56, Node.CHANGE_TIME);
328:       assertEquals(51, Node.STATIC_SOURCE_FILE);
329:       assertEquals(36, Node.QUOTED_PROP);
330:       assertEquals(46, Node.IS_NAMESPACE);
331:       assertEquals(49, Node.DIRECT_EVAL);
332:       assertEquals(1, Node.DECR_FLAG);
333:       assertEquals(4095, Node.COLUMN_MASK);
334:       assertEquals(32, Node.INCRDECR_PROP);
335:       assertEquals(12, Node.COLUMN_BITS);
336:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
337:       
338:       Node node1 = Node.newNumber((double) 15, 31, 37);
339:       assertFalse(node1.isCast());
340:       assertFalse(node1.isGetElem());
341:       assertFalse(node1.hasOneChild());
342:       assertFalse(node1.isDec());
343:       assertFalse(node1.isAssign());
344:       assertFalse(node1.isTypeOf());
345:       assertFalse(node1.isScript());
346:       assertFalse(node1.hasChildren());
347:       assertFalse(node1.isLabel());
348:       assertFalse(node1.isReturn());
349:       assertFalse(node1.isAssignAdd());
350:       assertFalse(node1.isObjectLit());
351:       assertFalse(node1.isAnd());
352:       assertFalse(node1.isNot());
353:       assertFalse(node1.isContinue());
354:       assertEquals(31, node1.getLineno());
355:       assertFalse(node1.isLabelName());
356:       assertFalse(node1.isCall());
357:       assertFalse(node1.isVar());
358:       assertFalse(node1.isComma());
359:       assertFalse(node1.isNew());
360:       assertFalse(node1.isAdd());
361:       assertFalse(node1.isGetProp());
362:       assertFalse(node1.isWhile());
363:       assertFalse(node1.isDo());
364:       assertFalse(node1.isOr());
365:       assertFalse(node1.isTrue());
366:       assertFalse(node1.isExprResult());
367:       assertFalse(node1.isVoid());
368:       assertFalse(node1.isNull());
369:       assertFalse(node1.isBreak());
370:       assertFalse(node1.isDelProp());
371:       assertFalse(node1.isName());
372:       assertFalse(node1.isArrayLit());
373:       assertFalse(node1.isGetterDef());
374:       assertFalse(node1.isEmpty());
375:       assertFalse(node1.isFunction());
376:       assertTrue(node1.isNumber());
377:       assertFalse(node1.isTry());
378:       assertFalse(node1.isFor());
379:       assertFalse(node1.isDefaultCase());
380:       assertFalse(node1.isCase());
381:       assertFalse(node1.isString());
382:       assertEquals(0, node1.getChildCount());
383:       assertFalse(node1.isDebugger());
384:       assertFalse(node1.isParamList());
385:       assertFalse(node1.isStringKey());
386:       assertFalse(node1.isSwitch());
387:       assertFalse(node1.isThrow());
388:       assertFalse(node1.isHook());
389:       assertEquals(127013, node1.getSourcePosition());
390:       assertFalse(node1.isFalse());
391:       assertFalse(node1.isThis());
392:       assertFalse(node1.isInc());
393:       assertFalse(node1.isBlock());
394:       assertFalse(node1.isSetterDef());
395:       assertFalse(node1.isCatch());
396:       assertEquals(39, node1.getType());
397:       assertFalse(node1.isRegExp());
398:       assertFalse(node1.isInstanceOf());
399:       assertFalse(node1.hasMoreThanOneChild());
400:       assertFalse(node1.isWith());
401:       assertFalse(node1.isIn());
402:       assertFalse(node1.isNE());
403:       assertEquals(37, node1.getCharno());
404:       assertFalse(node1.isIf());
405:       assertFalse(node1.equals((Object)node0));
406:       assertEquals(4095, Node.COLUMN_MASK);
407:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
408:       assertEquals(55, Node.INFERRED_FUNCTION);
409:       assertEquals(48, Node.DIRECTIVES);
410:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
411:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
412:       assertEquals(40, Node.ORIGINALNAME_PROP);
413:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
414:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
415:       assertEquals(54, Node.SLASH_V);
416:       assertEquals(43, Node.IS_CONSTANT_NAME);
417:       assertEquals(50, Node.FREE_CALL);
418:       assertEquals(51, Node.STATIC_SOURCE_FILE);
419:       assertEquals(12, Node.COLUMN_BITS);
420:       assertEquals(46, Node.IS_NAMESPACE);
421:       assertEquals(49, Node.DIRECT_EVAL);
422:       assertEquals(37, Node.OPT_ARG_NAME);
423:       assertEquals(32, Node.INCRDECR_PROP);
424:       assertEquals(1, Node.DECR_FLAG);
425:       assertEquals(2, Node.POST_FLAG);
426:       assertEquals(47, Node.IS_DISPATCHER);
427:       assertEquals(57, Node.LAST_PROP);
428:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
429:       assertEquals(30, Node.VAR_ARGS_NAME);
430:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
431:       assertEquals(57, Node.REFLECTED_OBJECT);
432:       assertEquals(29, Node.JSDOC_INFO_PROP);
433:       assertEquals(53, Node.INPUT_ID);
434:       assertEquals(15, Node.NO_SIDE_EFFECTS);
435:       assertEquals(8, Node.FLAG_NO_THROWS);
436:       assertEquals(39, Node.EMPTY_BLOCK);
437:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
438:       assertEquals(56, Node.CHANGE_TIME);
439:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
440:       assertEquals(52, Node.LENGTH);
441:       assertEquals(36, Node.QUOTED_PROP);
442:       assertNotNull(node1);
443:       
444:       node0.setWasEmptyNode(false);
445:       assertFalse(node0.isDefaultCase());
446:       assertFalse(node0.isTrue());
447:       assertFalse(node0.isFunction());
448:       assertFalse(node0.isDebugger());
449:       assertFalse(node0.isRegExp());
450:       assertEquals(0, node0.getChildCount());
451:       assertEquals(4669, node0.getType());
452:       assertFalse(node0.isCatch());
453:       assertFalse(node0.isParamList());
454:       assertFalse(node0.isArrayLit());
455:       assertFalse(node0.isVoid());
456:       assertFalse(node0.isDelProp());
457:       assertFalse(node0.isIf());
458:       assertFalse(node0.isNull());
459:       assertFalse(node0.isNE());
460:       assertFalse(node0.isEmpty());
461:       assertFalse(node0.isIn());
462:       assertFalse(node0.isAdd());
463:       assertFalse(node0.isVar());
464:       assertFalse(node0.isSetterDef());
465:       assertFalse(node0.isNew());
466:       assertEquals((-1), node0.getCharno());
467:       assertFalse(node0.hasMoreThanOneChild());
468:       assertEquals((-1), node0.getLineno());
469:       assertFalse(node0.isSwitch());
470:       assertFalse(node0.isGetterDef());
471:       assertFalse(node0.isNumber());
472:       assertFalse(node0.isFor());
473:       assertFalse(node0.isStringKey());
474:       assertFalse(node0.isThis());
475:       assertFalse(node0.isHook());
476:       assertFalse(node0.isBlock());
477:       assertFalse(node0.isCase());
478:       assertFalse(node0.hasOneChild());
479:       assertFalse(node0.isTry());
480:       assertFalse(node0.isWith());
481:       assertFalse(node0.isScript());
482:       assertFalse(node0.isObjectLit());
483:       assertFalse(node0.isNot());
484:       assertFalse(node0.isCast());
485:       assertFalse(node0.isInstanceOf());
486:       assertFalse(node0.isAnd());
487:       assertFalse(node0.isExprResult());
488:       assertFalse(node0.isLabelName());
489:       assertFalse(node0.isThrow());
490:       assertFalse(node0.isFalse());
491:       assertFalse(node0.isOr());
492:       assertFalse(node0.isLabel());
493:       assertFalse(node0.isAssignAdd());
494:       assertFalse(node0.isInc());
495:       assertFalse(node0.isDo());
496:       assertFalse(node0.isWhile());
497:       assertFalse(node0.isString());
498:       assertFalse(node0.isContinue());
499:       assertFalse(node0.isCall());
500:       assertFalse(node0.isName());
501:       assertFalse(node0.hasChildren());
502:       assertFalse(node0.isBreak());
503:       assertFalse(node0.isGetElem());
504:       assertFalse(node0.isTypeOf());
505:       assertEquals((-1), node0.getSourcePosition());
506:       assertFalse(node0.isDec());
507:       assertFalse(node0.isAssign());
508:       assertFalse(node0.isComma());
509:       assertFalse(node0.isReturn());
510:       assertFalse(node0.isGetProp());
511:       assertFalse(node0.equals((Object)node1));
512:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
513:       assertEquals(50, Node.FREE_CALL);
514:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
515:       assertEquals(40, Node.ORIGINALNAME_PROP);
516:       assertEquals(39, Node.EMPTY_BLOCK);
517:       assertEquals(48, Node.DIRECTIVES);
518:       assertEquals(52, Node.LENGTH);
519:       assertEquals(8, Node.FLAG_NO_THROWS);
520:       assertEquals(54, Node.SLASH_V);
521:       assertEquals(57, Node.REFLECTED_OBJECT);
522:       assertEquals(30, Node.VAR_ARGS_NAME);
523:       assertEquals(57, Node.LAST_PROP);
524:       assertEquals(55, Node.INFERRED_FUNCTION);
525:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
526:       assertEquals(15, Node.NO_SIDE_EFFECTS);
527:       assertEquals(53, Node.INPUT_ID);
528:       assertEquals(2, Node.POST_FLAG);
529:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
530:       assertEquals(47, Node.IS_DISPATCHER);
531:       assertEquals(29, Node.JSDOC_INFO_PROP);
532:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
533:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
534:       assertEquals(37, Node.OPT_ARG_NAME);
535:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
536:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
537:       assertEquals(43, Node.IS_CONSTANT_NAME);
538:       assertEquals(56, Node.CHANGE_TIME);
539:       assertEquals(51, Node.STATIC_SOURCE_FILE);
540:       assertEquals(36, Node.QUOTED_PROP);
541:       assertEquals(46, Node.IS_NAMESPACE);
542:       assertEquals(49, Node.DIRECT_EVAL);
543:       assertEquals(1, Node.DECR_FLAG);
544:       assertEquals(4095, Node.COLUMN_MASK);
545:       assertEquals(32, Node.INCRDECR_PROP);
546:       assertEquals(12, Node.COLUMN_BITS);
547:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
548:       
549:       boolean boolean2 = node1.isCall();
550:       assertFalse(boolean2);
551:       assertFalse(node1.isCast());
552:       assertFalse(node1.isGetElem());
553:       assertFalse(node1.hasOneChild());
554:       assertFalse(node1.isDec());
555:       assertFalse(node1.isAssign());
556:       assertFalse(node1.isTypeOf());
557:       assertFalse(node1.isScript());
558:       assertFalse(node1.hasChildren());
559:       assertFalse(node1.isLabel());
560:       assertFalse(node1.isReturn());
561:       assertFalse(node1.isAssignAdd());
562:       assertFalse(node1.isObjectLit());
563:       assertFalse(node1.isAnd());
564:       assertFalse(node1.isNot());
565:       assertFalse(node1.isContinue());
566:       assertEquals(31, node1.getLineno());
567:       assertFalse(node1.isLabelName());
568:       assertFalse(node1.isCall());
569:       assertFalse(node1.isVar());
570:       assertFalse(node1.isComma());
571:       assertFalse(node1.isNew());
572:       assertFalse(node1.isAdd());
573:       assertFalse(node1.isGetProp());
574:       assertFalse(node1.isWhile());
575:       assertFalse(node1.isDo());
576:       assertFalse(node1.isOr());
577:       assertFalse(node1.isTrue());
578:       assertFalse(node1.isExprResult());
579:       assertFalse(node1.isVoid());
580:       assertFalse(node1.isNull());
581:       assertFalse(node1.isBreak());
582:       assertFalse(node1.isDelProp());
583:       assertFalse(node1.isName());
584:       assertFalse(node1.isArrayLit());
585:       assertFalse(node1.isGetterDef());
586:       assertFalse(node1.isEmpty());
587:       assertFalse(node1.isFunction());
588:       assertTrue(node1.isNumber());
589:       assertFalse(node1.isTry());
590:       assertFalse(node1.isFor());
591:       assertFalse(node1.isDefaultCase());
592:       assertFalse(node1.isCase());
593:       assertFalse(node1.isString());
594:       assertEquals(0, node1.getChildCount());
595:       assertFalse(node1.isDebugger());
596:       assertFalse(node1.isParamList());
597:       assertFalse(node1.isStringKey());
598:       assertFalse(node1.isSwitch());
599:       assertFalse(node1.isThrow());
600:       assertFalse(node1.isHook());
601:       assertEquals(127013, node1.getSourcePosition());
602:       assertFalse(node1.isFalse());
603:       assertFalse(node1.isThis());
604:       assertFalse(node1.isInc());
605:       assertFalse(node1.isBlock());
606:       assertFalse(node1.isSetterDef());
607:       assertFalse(node1.isCatch());
608:       assertEquals(39, node1.getType());
609:       assertFalse(node1.isRegExp());
610:       assertFalse(node1.isInstanceOf());
611:       assertFalse(node1.hasMoreThanOneChild());
612:       assertFalse(node1.isWith());
613:       assertFalse(node1.isIn());
614:       assertFalse(node1.isNE());
615:       assertEquals(37, node1.getCharno());
616:       assertFalse(node1.isIf());
617:       assertFalse(node1.equals((Object)node0));
618:       assertTrue(boolean2 == boolean0);
619:       assertTrue(boolean2 == boolean1);
620:       assertEquals(4095, Node.COLUMN_MASK);
621:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
622:       assertEquals(55, Node.INFERRED_FUNCTION);
623:       assertEquals(48, Node.DIRECTIVES);
624:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
625:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
626:       assertEquals(40, Node.ORIGINALNAME_PROP);
627:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
628:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
629:       assertEquals(54, Node.SLASH_V);
630:       assertEquals(43, Node.IS_CONSTANT_NAME);
631:       assertEquals(50, Node.FREE_CALL);
632:       assertEquals(51, Node.STATIC_SOURCE_FILE);
633:       assertEquals(12, Node.COLUMN_BITS);
634:       assertEquals(46, Node.IS_NAMESPACE);
635:       assertEquals(49, Node.DIRECT_EVAL);
636:       assertEquals(37, Node.OPT_ARG_NAME);
637:       assertEquals(32, Node.INCRDECR_PROP);
638:       assertEquals(1, Node.DECR_FLAG);
639:       assertEquals(2, Node.POST_FLAG);
640:       assertEquals(47, Node.IS_DISPATCHER);
641:       assertEquals(57, Node.LAST_PROP);
642:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
643:       assertEquals(30, Node.VAR_ARGS_NAME);
644:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
645:       assertEquals(57, Node.REFLECTED_OBJECT);
646:       assertEquals(29, Node.JSDOC_INFO_PROP);
647:       assertEquals(53, Node.INPUT_ID);
648:       assertEquals(15, Node.NO_SIDE_EFFECTS);
649:       assertEquals(8, Node.FLAG_NO_THROWS);
650:       assertEquals(39, Node.EMPTY_BLOCK);
651:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
652:       assertEquals(56, Node.CHANGE_TIME);
653:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
654:       assertEquals(52, Node.LENGTH);
655:       assertEquals(36, Node.QUOTED_PROP);
656:       
657:       StringWriter stringWriter0 = new StringWriter(4669);
658:       assertEquals("", stringWriter0.toString());
659:       assertNotNull(stringWriter0);
660:       
661:       node1.appendStringTree(stringWriter0);
662:       assertFalse(node1.isCast());
663:       assertFalse(node1.isGetElem());
664:       assertFalse(node1.hasOneChild());
665:       assertFalse(node1.isDec());
666:       assertFalse(node1.isAssign());
667:       assertFalse(node1.isTypeOf());
668:       assertFalse(node1.isScript());
669:       assertFalse(node1.hasChildren());
670:       assertFalse(node1.isLabel());
671:       assertFalse(node1.isReturn());
672:       assertFalse(node1.isAssignAdd());
673:       assertFalse(node1.isObjectLit());
674:       assertFalse(node1.isAnd());
675:       assertFalse(node1.isNot());
676:       assertFalse(node1.isContinue());
677:       assertEquals(31, node1.getLineno());
678:       assertFalse(node1.isLabelName());
679:       assertFalse(node1.isCall());
680:       assertFalse(node1.isVar());
681:       assertFalse(node1.isComma());
682:       assertFalse(node1.isNew());
683:       assertFalse(node1.isAdd());
684:       assertFalse(node1.isGetProp());
685:       assertFalse(node1.isWhile());
686:       assertFalse(node1.isDo());
687:       assertFalse(node1.isOr());
688:       assertFalse(node1.isTrue());
689:       assertFalse(node1.isExprResult());
690:       assertFalse(node1.isVoid());
691:       assertFalse(node1.isNull());
692:       assertFalse(node1.isBreak());
693:       assertFalse(node1.isDelProp());
694:       assertFalse(node1.isName());
695:       assertFalse(node1.isArrayLit());
696:       assertFalse(node1.isGetterDef());
697:       assertFalse(node1.isEmpty());
698:       assertFalse(node1.isFunction());
699:       assertTrue(node1.isNumber());
700:       assertFalse(node1.isTry());
701:       assertFalse(node1.isFor());
702:       assertFalse(node1.isDefaultCase());
703:       assertFalse(node1.isCase());
704:       assertFalse(node1.isString());
705:       assertEquals(0, node1.getChildCount());
706:       assertFalse(node1.isDebugger());
707:       assertFalse(node1.isParamList());
708:       assertFalse(node1.isStringKey());
709:       assertFalse(node1.isSwitch());
710:       assertFalse(node1.isThrow());
711:       assertFalse(node1.isHook());
712:       assertEquals(127013, node1.getSourcePosition());
713:       assertFalse(node1.isFalse());
714:       assertFalse(node1.isThis());
715:       assertFalse(node1.isInc());
716:       assertFalse(node1.isBlock());
717:       assertFalse(node1.isSetterDef());
718:       assertFalse(node1.isCatch());
719:       assertEquals(39, node1.getType());
720:       assertFalse(node1.isRegExp());
721:       assertFalse(node1.isInstanceOf());
722:       assertFalse(node1.hasMoreThanOneChild());
723:       assertFalse(node1.isWith());
724:       assertFalse(node1.isIn());
725:       assertFalse(node1.isNE());
726:       assertEquals(37, node1.getCharno());
727:       assertFalse(node1.isIf());
728:       assertEquals("NUMBER 15.0 31\n", stringWriter0.toString());
729:       assertFalse(node1.equals((Object)node0));
730:       assertEquals(4095, Node.COLUMN_MASK);
731:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
732:       assertEquals(55, Node.INFERRED_FUNCTION);
733:       assertEquals(48, Node.DIRECTIVES);
734:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
735:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
736:       assertEquals(40, Node.ORIGINALNAME_PROP);
737:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
738:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
739:       assertEquals(54, Node.SLASH_V);
740:       assertEquals(43, Node.IS_CONSTANT_NAME);
741:       assertEquals(50, Node.FREE_CALL);
742:       assertEquals(51, Node.STATIC_SOURCE_FILE);
743:       assertEquals(12, Node.COLUMN_BITS);
744:       assertEquals(46, Node.IS_NAMESPACE);
745:       assertEquals(49, Node.DIRECT_EVAL);
746:       assertEquals(37, Node.OPT_ARG_NAME);
747:       assertEquals(32, Node.INCRDECR_PROP);
748:       assertEquals(1, Node.DECR_FLAG);
749:       assertEquals(2, Node.POST_FLAG);
750:       assertEquals(47, Node.IS_DISPATCHER);
751:       assertEquals(57, Node.LAST_PROP);
752:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
753:       assertEquals(30, Node.VAR_ARGS_NAME);
754:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
755:       assertEquals(57, Node.REFLECTED_OBJECT);
756:       assertEquals(29, Node.JSDOC_INFO_PROP);
757:       assertEquals(53, Node.INPUT_ID);
758:       assertEquals(15, Node.NO_SIDE_EFFECTS);
759:       assertEquals(8, Node.FLAG_NO_THROWS);
760:       assertEquals(39, Node.EMPTY_BLOCK);
761:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
762:       assertEquals(56, Node.CHANGE_TIME);
763:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
764:       assertEquals(52, Node.LENGTH);
765:       assertEquals(36, Node.QUOTED_PROP);
766:       
767:       boolean boolean3 = node1.hasChildren();
768:       assertFalse(boolean3);
769:       assertFalse(node1.isCast());
770:       assertFalse(node1.isGetElem());
771:       assertFalse(node1.hasOneChild());
772:       assertFalse(node1.isDec());
773:       assertFalse(node1.isAssign());
774:       assertFalse(node1.isTypeOf());
775:       assertFalse(node1.isScript());
776:       assertFalse(node1.hasChildren());
777:       assertFalse(node1.isLabel());
778:       assertFalse(node1.isReturn());
779:       assertFalse(node1.isAssignAdd());
780:       assertFalse(node1.isObjectLit());
781:       assertFalse(node1.isAnd());
782:       assertFalse(node1.isNot());
783:       assertFalse(node1.isContinue());
784:       assertEquals(31, node1.getLineno());
785:       assertFalse(node1.isLabelName());
786:       assertFalse(node1.isCall());
787:       assertFalse(node1.isVar());
788:       assertFalse(node1.isComma());
789:       assertFalse(node1.isNew());
790:       assertFalse(node1.isAdd());
791:       assertFalse(node1.isGetProp());
792:       assertFalse(node1.isWhile());
793:       assertFalse(node1.isDo());
794:       assertFalse(node1.isOr());
795:       assertFalse(node1.isTrue());
796:       assertFalse(node1.isExprResult());
797:       assertFalse(node1.isVoid());
798:       assertFalse(node1.isNull());
799:       assertFalse(node1.isBreak());
800:       assertFalse(node1.isDelProp());
801:       assertFalse(node1.isName());
802:       assertFalse(node1.isArrayLit());
803:       assertFalse(node1.isGetterDef());
804:       assertFalse(node1.isEmpty());
805:       assertFalse(node1.isFunction());
806:       assertTrue(node1.isNumber());
807:       assertFalse(node1.isTry());
808:       assertFalse(node1.isFor());
809:       assertFalse(node1.isDefaultCase());
810:       assertFalse(node1.isCase());
811:       assertFalse(node1.isString());
812:       assertEquals(0, node1.getChildCount());
813:       assertFalse(node1.isDebugger());
814:       assertFalse(node1.isParamList());
815:       assertFalse(node1.isStringKey());
816:       assertFalse(node1.isSwitch());
817:       assertFalse(node1.isThrow());
818:       assertFalse(node1.isHook());
819:       assertEquals(127013, node1.getSourcePosition());
820:       assertFalse(node1.isFalse());
821:       assertFalse(node1.isThis());
822:       assertFalse(node1.isInc());
823:       assertFalse(node1.isBlock());
824:       assertFalse(node1.isSetterDef());
825:       assertFalse(node1.isCatch());
826:       assertEquals(39, node1.getType());
827:       assertFalse(node1.isRegExp());
828:       assertFalse(node1.isInstanceOf());
829:       assertFalse(node1.hasMoreThanOneChild());
830:       assertFalse(node1.isWith());
831:       assertFalse(node1.isIn());
832:       assertFalse(node1.isNE());
833:       assertEquals(37, node1.getCharno());
834:       assertFalse(node1.isIf());
835:       assertFalse(node1.equals((Object)node0));
836:       assertTrue(boolean3 == boolean2);
837:       assertTrue(boolean3 == boolean1);
838:       assertTrue(boolean3 == boolean0);
839:       assertEquals(4095, Node.COLUMN_MASK);
840:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
841:       assertEquals(55, Node.INFERRED_FUNCTION);
842:       assertEquals(48, Node.DIRECTIVES);
843:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
844:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
845:       assertEquals(40, Node.ORIGINALNAME_PROP);
846:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
847:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
848:       assertEquals(54, Node.SLASH_V);
849:       assertEquals(43, Node.IS_CONSTANT_NAME);
850:       assertEquals(50, Node.FREE_CALL);
851:       assertEquals(51, Node.STATIC_SOURCE_FILE);
852:       assertEquals(12, Node.COLUMN_BITS);
853:       assertEquals(46, Node.IS_NAMESPACE);
854:       assertEquals(49, Node.DIRECT_EVAL);
855:       assertEquals(37, Node.OPT_ARG_NAME);
856:       assertEquals(32, Node.INCRDECR_PROP);
857:       assertEquals(1, Node.DECR_FLAG);
858:       assertEquals(2, Node.POST_FLAG);
859:       assertEquals(47, Node.IS_DISPATCHER);
860:       assertEquals(57, Node.LAST_PROP);
861:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
862:       assertEquals(30, Node.VAR_ARGS_NAME);
863:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
864:       assertEquals(57, Node.REFLECTED_OBJECT);
865:       assertEquals(29, Node.JSDOC_INFO_PROP);
866:       assertEquals(53, Node.INPUT_ID);
867:       assertEquals(15, Node.NO_SIDE_EFFECTS);
868:       assertEquals(8, Node.FLAG_NO_THROWS);
869:       assertEquals(39, Node.EMPTY_BLOCK);
870:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
871:       assertEquals(56, Node.CHANGE_TIME);
872:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
873:       assertEquals(52, Node.LENGTH);
874:       assertEquals(36, Node.QUOTED_PROP);
875:       
876:       Iterable<Node> iterable0 = node1.children();
877:       assertFalse(node1.isCast());
878:       assertFalse(node1.isGetElem());
879:       assertFalse(node1.hasOneChild());
880:       assertFalse(node1.isDec());
881:       assertFalse(node1.isAssign());
882:       assertFalse(node1.isTypeOf());
883:       assertFalse(node1.isScript());
884:       assertFalse(node1.hasChildren());
885:       assertFalse(node1.isLabel());
886:       assertFalse(node1.isReturn());
887:       assertFalse(node1.isAssignAdd());
888:       assertFalse(node1.isObjectLit());
889:       assertFalse(node1.isAnd());
890:       assertFalse(node1.isNot());
891:       assertFalse(node1.isContinue());
892:       assertEquals(31, node1.getLineno());
893:       assertFalse(node1.isLabelName());
894:       assertFalse(node1.isCall());
895:       assertFalse(node1.isVar());
896:       assertFalse(node1.isComma());
897:       assertFalse(node1.isNew());
898:       assertFalse(node1.isAdd());
899:       assertFalse(node1.isGetProp());
900:       assertFalse(node1.isWhile());
901:       assertFalse(node1.isDo());
902:       assertFalse(node1.isOr());
903:       assertFalse(node1.isTrue());
904:       assertFalse(node1.isExprResult());
905:       assertFalse(node1.isVoid());
906:       assertFalse(node1.isNull());
907:       assertFalse(node1.isBreak());
908:       assertFalse(node1.isDelProp());
909:       assertFalse(node1.isName());
910:       assertFalse(node1.isArrayLit());
911:       assertFalse(node1.isGetterDef());
912:       assertFalse(node1.isEmpty());
913:       assertFalse(node1.isFunction());
914:       assertTrue(node1.isNumber());
915:       assertFalse(node1.isTry());
916:       assertFalse(node1.isFor());
917:       assertFalse(node1.isDefaultCase());
918:       assertFalse(node1.isCase());
919:       assertFalse(node1.isString());
920:       assertEquals(0, node1.getChildCount());
921:       assertFalse(node1.isDebugger());
922:       assertFalse(node1.isParamList());
923:       assertFalse(node1.isStringKey());
924:       assertFalse(node1.isSwitch());
925:       assertFalse(node1.isThrow());
926:       assertFalse(node1.isHook());
927:       assertEquals(127013, node1.getSourcePosition());
928:       assertFalse(node1.isFalse());
929:       assertFalse(node1.isThis());
930:       assertFalse(node1.isInc());
931:       assertFalse(node1.isBlock());
932:       assertFalse(node1.isSetterDef());
933:       assertFalse(node1.isCatch());
934:       assertEquals(39, node1.getType());
935:       assertFalse(node1.isRegExp());
936:       assertFalse(node1.isInstanceOf());
937:       assertFalse(node1.hasMoreThanOneChild());
938:       assertFalse(node1.isWith());
939:       assertFalse(node1.isIn());
940:       assertFalse(node1.isNE());
941:       assertEquals(37, node1.getCharno());
942:       assertFalse(node1.isIf());
943:       assertFalse(node1.equals((Object)node0));
944:       assertFalse(iterable0.contains(node0));
945:       assertEquals(4095, Node.COLUMN_MASK);
946:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
947:       assertEquals(55, Node.INFERRED_FUNCTION);
948:       assertEquals(48, Node.DIRECTIVES);
949:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
950:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
951:       assertEquals(40, Node.ORIGINALNAME_PROP);
952:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
953:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
954:       assertEquals(54, Node.SLASH_V);
955:       assertEquals(43, Node.IS_CONSTANT_NAME);
956:       assertEquals(50, Node.FREE_CALL);
957:       assertEquals(51, Node.STATIC_SOURCE_FILE);
958:       assertEquals(12, Node.COLUMN_BITS);
959:       assertEquals(46, Node.IS_NAMESPACE);
960:       assertEquals(49, Node.DIRECT_EVAL);
961:       assertEquals(37, Node.OPT_ARG_NAME);
962:       assertEquals(32, Node.INCRDECR_PROP);
963:       assertEquals(1, Node.DECR_FLAG);
964:       assertEquals(2, Node.POST_FLAG);
965:       assertEquals(47, Node.IS_DISPATCHER);
966:       assertEquals(57, Node.LAST_PROP);
967:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
968:       assertEquals(30, Node.VAR_ARGS_NAME);
969:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
970:       assertEquals(57, Node.REFLECTED_OBJECT);
971:       assertEquals(29, Node.JSDOC_INFO_PROP);
972:       assertEquals(53, Node.INPUT_ID);
973:       assertEquals(15, Node.NO_SIDE_EFFECTS);
974:       assertEquals(8, Node.FLAG_NO_THROWS);
975:       assertEquals(39, Node.EMPTY_BLOCK);
976:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
977:       assertEquals(56, Node.CHANGE_TIME);
978:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
979:       assertEquals(52, Node.LENGTH);
980:       assertEquals(36, Node.QUOTED_PROP);
981:       assertNotNull(iterable0);
982:       
983:       Set<String> set0 = node0.getDirectives();
984:       assertFalse(node0.isDefaultCase());
985:       assertFalse(node0.isTrue());
986:       assertFalse(node0.isFunction());
987:       assertFalse(node0.isDebugger());
988:       assertFalse(node0.isRegExp());
989:       assertEquals(0, node0.getChildCount());
990:       assertEquals(4669, node0.getType());
991:       assertFalse(node0.isCatch());
992:       assertFalse(node0.isParamList());
993:       assertFalse(node0.isArrayLit());
994:       assertFalse(node0.isVoid());
995:       assertFalse(node0.isDelProp());
996:       assertFalse(node0.isIf());
997:       assertFalse(node0.isNull());
998:       assertFalse(node0.isNE());
999:       assertFalse(node0.isEmpty());
1000:       assertFalse(node0.isIn());
1001:       assertFalse(node0.isAdd());
1002:       assertFalse(node0.isVar());
1003:       assertFalse(node0.isSetterDef());
1004:       assertFalse(node0.isNew());
1005:       assertEquals((-1), node0.getCharno());
1006:       assertFalse(node0.hasMoreThanOneChild());
1007:       assertEquals((-1), node0.getLineno());
1008:       assertFalse(node0.isSwitch());
1009:       assertFalse(node0.isGetterDef());
1010:       assertFalse(node0.isNumber());
1011:       assertFalse(node0.isFor());
1012:       assertFalse(node0.isStringKey());
1013:       assertFalse(node0.isThis());
1014:       assertFalse(node0.isHook());
1015:       assertFalse(node0.isBlock());
1016:       assertFalse(node0.isCase());
1017:       assertFalse(node0.hasOneChild());
1018:       assertFalse(node0.isTry());
1019:       assertFalse(node0.isWith());
1020:       assertFalse(node0.isScript());
1021:       assertFalse(node0.isObjectLit());
1022:       assertFalse(node0.isNot());
1023:       assertFalse(node0.isCast());
1024:       assertFalse(node0.isInstanceOf());
1025:       assertFalse(node0.isAnd());
1026:       assertFalse(node0.isExprResult());
1027:       assertFalse(node0.isLabelName());
1028:       assertFalse(node0.isThrow());
1029:       assertFalse(node0.isFalse());
1030:       assertFalse(node0.isOr());
1031:       assertFalse(node0.isLabel());
1032:       assertFalse(node0.isAssignAdd());
1033:       assertFalse(node0.isInc());
1034:       assertFalse(node0.isDo());
1035:       assertFalse(node0.isWhile());
1036:       assertFalse(node0.isString());
1037:       assertFalse(node0.isContinue());
1038:       assertFalse(node0.isCall());
1039:       assertFalse(node0.isName());
1040:       assertFalse(node0.hasChildren());
1041:       assertFalse(node0.isBreak());
1042:       assertFalse(node0.isGetElem());
1043:       assertFalse(node0.isTypeOf());
1044:       assertEquals((-1), node0.getSourcePosition());
1045:       assertFalse(node0.isDec());
1046:       assertFalse(node0.isAssign());
1047:       assertFalse(node0.isComma());
1048:       assertFalse(node0.isReturn());
1049:       assertFalse(node0.isGetProp());
1050:       assertFalse(node0.equals((Object)node1));
1051:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1052:       assertEquals(50, Node.FREE_CALL);
1053:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1054:       assertEquals(40, Node.ORIGINALNAME_PROP);
1055:       assertEquals(39, Node.EMPTY_BLOCK);
1056:       assertEquals(48, Node.DIRECTIVES);
1057:       assertEquals(52, Node.LENGTH);
1058:       assertEquals(8, Node.FLAG_NO_THROWS);
1059:       assertEquals(54, Node.SLASH_V);
1060:       assertEquals(57, Node.REFLECTED_OBJECT);
1061:       assertEquals(30, Node.VAR_ARGS_NAME);
1062:       assertEquals(57, Node.LAST_PROP);
1063:       assertEquals(55, Node.INFERRED_FUNCTION);
1064:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1065:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1066:       assertEquals(53, Node.INPUT_ID);
1067:       assertEquals(2, Node.POST_FLAG);
1068:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1069:       assertEquals(47, Node.IS_DISPATCHER);
1070:       assertEquals(29, Node.JSDOC_INFO_PROP);
1071:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1072:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1073:       assertEquals(37, Node.OPT_ARG_NAME);
1074:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1075:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1076:       assertEquals(43, Node.IS_CONSTANT_NAME);
1077:       assertEquals(56, Node.CHANGE_TIME);
1078:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1079:       assertEquals(36, Node.QUOTED_PROP);
1080:       assertEquals(46, Node.IS_NAMESPACE);
1081:       assertEquals(49, Node.DIRECT_EVAL);
1082:       assertEquals(1, Node.DECR_FLAG);
1083:       assertEquals(4095, Node.COLUMN_MASK);
1084:       assertEquals(32, Node.INCRDECR_PROP);
1085:       assertEquals(12, Node.COLUMN_BITS);
1086:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1087:       assertNull(set0);
1088:       
1089:       boolean boolean4 = node1.isBlock();
1090:       assertFalse(boolean4);
1091:       assertFalse(node1.isCast());
1092:       assertFalse(node1.isGetElem());
1093:       assertFalse(node1.hasOneChild());
1094:       assertFalse(node1.isDec());
1095:       assertFalse(node1.isAssign());
1096:       assertFalse(node1.isTypeOf());
1097:       assertFalse(node1.isScript());
1098:       assertFalse(node1.hasChildren());
1099:       assertFalse(node1.isLabel());
1100:       assertFalse(node1.isReturn());
1101:       assertFalse(node1.isAssignAdd());
1102:       assertFalse(node1.isObjectLit());
1103:       assertFalse(node1.isAnd());
1104:       assertFalse(node1.isNot());
1105:       assertFalse(node1.isContinue());
1106:       assertEquals(31, node1.getLineno());
1107:       assertFalse(node1.isLabelName());
1108:       assertFalse(node1.isCall());
1109:       assertFalse(node1.isVar());
1110:       assertFalse(node1.isComma());
1111:       assertFalse(node1.isNew());
1112:       assertFalse(node1.isAdd());
1113:       assertFalse(node1.isGetProp());
1114:       assertFalse(node1.isWhile());
1115:       assertFalse(node1.isDo());
1116:       assertFalse(node1.isOr());
1117:       assertFalse(node1.isTrue());
1118:       assertFalse(node1.isExprResult());
1119:       assertFalse(node1.isVoid());
1120:       assertFalse(node1.isNull());
1121:       assertFalse(node1.isBreak());
1122:       assertFalse(node1.isDelProp());
1123:       assertFalse(node1.isName());
1124:       assertFalse(node1.isArrayLit());
1125:       assertFalse(node1.isGetterDef());
1126:       assertFalse(node1.isEmpty());
1127:       assertFalse(node1.isFunction());
1128:       assertTrue(node1.isNumber());
1129:       assertFalse(node1.isTry());
1130:       assertFalse(node1.isFor());
1131:       assertFalse(node1.isDefaultCase());
1132:       assertFalse(node1.isCase());
1133:       assertFalse(node1.isString());
1134:       assertEquals(0, node1.getChildCount());
1135:       assertFalse(node1.isDebugger());
1136:       assertFalse(node1.isParamList());
1137:       assertFalse(node1.isStringKey());
1138:       assertFalse(node1.isSwitch());
1139:       assertFalse(node1.isThrow());
1140:       assertFalse(node1.isHook());
1141:       assertEquals(127013, node1.getSourcePosition());
1142:       assertFalse(node1.isFalse());
1143:       assertFalse(node1.isThis());
1144:       assertFalse(node1.isInc());
1145:       assertFalse(node1.isBlock());
1146:       assertFalse(node1.isSetterDef());
1147:       assertFalse(node1.isCatch());
1148:       assertEquals(39, node1.getType());
1149:       assertFalse(node1.isRegExp());
1150:       assertFalse(node1.isInstanceOf());
1151:       assertFalse(node1.hasMoreThanOneChild());
1152:       assertFalse(node1.isWith());
1153:       assertFalse(node1.isIn());
1154:       assertFalse(node1.isNE());
1155:       assertEquals(37, node1.getCharno());
1156:       assertFalse(node1.isIf());
1157:       assertFalse(node1.equals((Object)node0));
1158:       assertTrue(boolean4 == boolean1);
1159:       assertTrue(boolean4 == boolean0);
1160:       assertTrue(boolean4 == boolean2);
1161:       assertTrue(boolean4 == boolean3);
1162:       assertEquals(4095, Node.COLUMN_MASK);
1163:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1164:       assertEquals(55, Node.INFERRED_FUNCTION);
1165:       assertEquals(48, Node.DIRECTIVES);
1166:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1167:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1168:       assertEquals(40, Node.ORIGINALNAME_PROP);
1169:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1170:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1171:       assertEquals(54, Node.SLASH_V);
1172:       assertEquals(43, Node.IS_CONSTANT_NAME);
1173:       assertEquals(50, Node.FREE_CALL);
1174:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1175:       assertEquals(12, Node.COLUMN_BITS);
1176:       assertEquals(46, Node.IS_NAMESPACE);
1177:       assertEquals(49, Node.DIRECT_EVAL);
1178:       assertEquals(37, Node.OPT_ARG_NAME);
1179:       assertEquals(32, Node.INCRDECR_PROP);
1180:       assertEquals(1, Node.DECR_FLAG);
1181:       assertEquals(2, Node.POST_FLAG);
1182:       assertEquals(47, Node.IS_DISPATCHER);
1183:       assertEquals(57, Node.LAST_PROP);
1184:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1185:       assertEquals(30, Node.VAR_ARGS_NAME);
1186:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1187:       assertEquals(57, Node.REFLECTED_OBJECT);
1188:       assertEquals(29, Node.JSDOC_INFO_PROP);
1189:       assertEquals(53, Node.INPUT_ID);
1190:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1191:       assertEquals(8, Node.FLAG_NO_THROWS);
1192:       assertEquals(39, Node.EMPTY_BLOCK);
1193:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1194:       assertEquals(56, Node.CHANGE_TIME);
1195:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1196:       assertEquals(52, Node.LENGTH);
1197:       assertEquals(36, Node.QUOTED_PROP);
1198:   }
1199: }
RegularFileObject[/tmp/EvoSuite_103_1628255621677/com/google/javascript/rhino/Node_103_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:13:41 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_103_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_103_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.Maps$KeySet",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.common.collect.ImmutableList$SerializedForm",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_103_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.Token",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.JSDocInfo",
269:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
270:       "com.google.common.collect.Sets",
271:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
272:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
273:       "com.google.javascript.rhino.jstype.JSType$1",
274:       "com.google.javascript.rhino.jstype.JSType",
275:       "com.google.javascript.rhino.SimpleErrorReporter",
276:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
277:       "com.google.common.base.Joiner",
278:       "com.google.common.base.Joiner$1",
279:       "com.google.common.collect.Collections2",
280:       "com.google.common.base.Joiner$MapJoiner",
281:       "com.google.common.collect.Maps",
282:       "com.google.common.collect.AbstractMultimap",
283:       "com.google.common.collect.AbstractMapBasedMultimap",
284:       "com.google.common.collect.AbstractSetMultimap",
285:       "com.google.common.collect.LinkedHashMultimap",
286:       "com.google.common.collect.AbstractMapEntry",
287:       "com.google.common.collect.ImmutableEntry",
288:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
289:       "com.google.common.collect.AbstractListMultimap",
290:       "com.google.common.collect.ArrayListMultimap",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
292:       "com.google.common.collect.ImmutableCollection",
293:       "com.google.common.collect.RegularImmutableList",
294:       "com.google.common.collect.ObjectArrays",
295:       "com.google.common.collect.ImmutableList",
296:       "com.google.javascript.rhino.jstype.ModificationVisitor",
297:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
298:       "com.google.common.collect.ImmutableCollection$Builder",
299:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
300:       "com.google.common.collect.ImmutableList$Builder",
301:       "com.google.common.collect.UnmodifiableIterator",
302:       "com.google.common.collect.UnmodifiableListIterator",
303:       "com.google.common.collect.Iterators$1",
304:       "com.google.common.collect.Iterators$2",
305:       "com.google.common.collect.Iterators",
306:       "com.google.javascript.rhino.jstype.ObjectType",
307:       "com.google.javascript.rhino.jstype.ProxyObjectType",
308:       "com.google.javascript.rhino.jstype.TemplateType",
309:       "com.google.javascript.rhino.jstype.ValueType",
310:       "com.google.javascript.rhino.jstype.BooleanType",
311:       "com.google.javascript.rhino.jstype.NullType",
312:       "com.google.javascript.rhino.jstype.NumberType",
313:       "com.google.javascript.rhino.jstype.StringType",
314:       "com.google.javascript.rhino.jstype.UnknownType",
315:       "com.google.javascript.rhino.jstype.VoidType",
316:       "com.google.javascript.rhino.jstype.AllType",
317:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
318:       "com.google.common.collect.ImmutableMap",
319:       "com.google.common.collect.ImmutableBiMap",
320:       "com.google.common.collect.EmptyImmutableBiMap",
321:       "com.google.javascript.rhino.jstype.PropertyMap$1",
322:       "com.google.javascript.rhino.jstype.PropertyMap",
323:       "com.google.javascript.rhino.jstype.FunctionType",
324:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
325:       "com.google.javascript.rhino.jstype.ArrowType",
326:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
327:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
328:       "com.google.javascript.rhino.jstype.InstanceObjectType",
329:       "com.google.javascript.rhino.jstype.Property",
330:       "com.google.common.collect.Lists",
331:       "com.google.javascript.rhino.jstype.NoObjectType",
332:       "com.google.javascript.rhino.jstype.NoType",
333:       "com.google.javascript.rhino.jstype.NoResolvedType",
334:       "com.google.common.collect.SingletonImmutableList",
335:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
336:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
337:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
338:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
339:       "com.google.javascript.rhino.jstype.UnionType",
340:       "com.google.javascript.rhino.jstype.FunctionBuilder",
341:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
342:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
343:       "com.google.javascript.rhino.jstype.EnumType",
344:       "com.google.javascript.rhino.jstype.EnumElementType",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.base.Objects",
347:       "com.google.javascript.rhino.InputId",
348:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
349:       "com.google.javascript.rhino.JSDocInfo$Visibility",
350:       "com.google.common.collect.Iterables",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2",
359:       "com.google.javascript.rhino.jstype.JSType$TypePair",
360:       "com.google.common.collect.AbstractIndexedListIterator",
361:       "com.google.common.collect.Iterators$11",
362:       "com.google.javascript.rhino.JSTypeExpression",
363:       "com.google.javascript.rhino.jstype.TemplatizedType",
364:       "com.google.common.collect.ImmutableSet",
365:       "com.google.common.collect.EmptyImmutableSet",
366:       "com.google.javascript.rhino.jstype.NamedType",
367:       "com.google.common.collect.Iterators$12",
368:       "com.google.common.collect.Sets$ImprovedAbstractSet",
369:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
370:       "com.google.common.collect.Hashing",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
372:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
374:       "com.google.common.collect.ImmutableList$1"
375:     );
376:   }
377: }

[MASTER] 13:13:41.901 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(4669, "");
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertEquals(4669, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(node0);

boolean boolean0 = node0.isVoid();
assertFalse(boolean0);
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertEquals(4669, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

boolean boolean1 = node0.isStringKey();
assertFalse(boolean1);
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertEquals(4669, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertTrue(boolean1 == boolean0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node node1 = Node.newNumber((double) 15, 31, 37);
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isScript());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertEquals(31, node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isComma());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertEquals(127013, node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertEquals(39, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(37, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertNotNull(node1);

node0.setWasEmptyNode(false);
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertEquals(4669, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.equals((Object)node1));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

boolean boolean2 = node1.isCall();
assertFalse(boolean2);
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isScript());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertEquals(31, node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isComma());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertEquals(127013, node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertEquals(39, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(37, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);

StringWriter stringWriter0 = new StringWriter(4669);
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

node1.appendStringTree(stringWriter0);
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isScript());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertEquals(31, node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isComma());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertEquals(127013, node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertEquals(39, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(37, node1.getCharno());
assertFalse(node1.isIf());
assertEquals("NUMBER 15.0 31\n", stringWriter0.toString());
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);

boolean boolean3 = node1.hasChildren();
assertFalse(boolean3);
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isScript());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertEquals(31, node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isComma());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertEquals(127013, node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertEquals(39, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(37, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isScript());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertEquals(31, node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isComma());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertEquals(127013, node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertEquals(39, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(37, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.equals((Object)node0));
assertFalse(iterable0.contains(node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertNotNull(iterable0);

Set<String> set0 = node0.getDirectives();
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertEquals(4669, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.equals((Object)node1));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNull(set0);

boolean boolean4 = node1.isBlock();
assertFalse(boolean4);
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isScript());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertEquals(31, node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isComma());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertEquals(127013, node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertEquals(39, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(37, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.equals((Object)node0));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);


[MASTER] 13:13:54.413 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_143_1628255634232/com/google/javascript/rhino/Node_143_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_143_1628255634232/com/google/javascript/rhino/Node_143_tmp__ESTest_scaffolding.java]]
[MASTER] 13:13:54.413 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:54.413 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:54.415 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 943
[MASTER] 13:13:54.417 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_143_1628255634232/com/google/javascript/rhino/Node_143_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:13:54 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.io.StringWriter;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_143_tmp__ESTest extends Node_143_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString(4669, "");
22:       assertFalse(node0.isArrayLit());
23:       assertFalse(node0.isDebugger());
24:       assertFalse(node0.isFunction());
25:       assertFalse(node0.isRegExp());
26:       assertFalse(node0.isGetterDef());
27:       assertFalse(node0.isIf());
28:       assertFalse(node0.isNE());
29:       assertFalse(node0.isTrue());
30:       assertEquals(4669, node0.getType());
31:       assertFalse(node0.isVoid());
32:       assertFalse(node0.isDelProp());
33:       assertFalse(node0.isCatch());
34:       assertFalse(node0.isString());
35:       assertFalse(node0.isFor());
36:       assertFalse(node0.isCase());
37:       assertFalse(node0.isTry());
38:       assertFalse(node0.isCall());
39:       assertFalse(node0.isVar());
40:       assertFalse(node0.isAdd());
41:       assertEquals((-1), node0.getCharno());
42:       assertFalse(node0.isBreak());
43:       assertFalse(node0.isNull());
44:       assertFalse(node0.isStringKey());
45:       assertFalse(node0.isParamList());
46:       assertFalse(node0.isSwitch());
47:       assertFalse(node0.isName());
48:       assertEquals(0, node0.getChildCount());
49:       assertFalse(node0.isLabel());
50:       assertFalse(node0.isOr());
51:       assertFalse(node0.isDefaultCase());
52:       assertFalse(node0.isEmpty());
53:       assertFalse(node0.isNew());
54:       assertFalse(node0.isAssignAdd());
55:       assertFalse(node0.isDo());
56:       assertFalse(node0.hasOneChild());
57:       assertFalse(node0.isCast());
58:       assertFalse(node0.isAssign());
59:       assertEquals((-1), node0.getSourcePosition());
60:       assertFalse(node0.isExprResult());
61:       assertFalse(node0.isGetElem());
62:       assertFalse(node0.isAnd());
63:       assertEquals((-1), node0.getLineno());
64:       assertFalse(node0.isLabelName());
65:       assertFalse(node0.isInstanceOf());
66:       assertFalse(node0.isReturn());
67:       assertFalse(node0.hasMoreThanOneChild());
68:       assertFalse(node0.isComma());
69:       assertFalse(node0.isWith());
70:       assertFalse(node0.isTypeOf());
71:       assertFalse(node0.isNot());
72:       assertFalse(node0.isObjectLit());
73:       assertFalse(node0.isDec());
74:       assertFalse(node0.isNumber());
75:       assertFalse(node0.hasChildren());
76:       assertFalse(node0.isWhile());
77:       assertFalse(node0.isThis());
78:       assertFalse(node0.isScript());
79:       assertFalse(node0.isGetProp());
80:       assertFalse(node0.isHook());
81:       assertFalse(node0.isBlock());
82:       assertFalse(node0.isFalse());
83:       assertFalse(node0.isIn());
84:       assertFalse(node0.isContinue());
85:       assertFalse(node0.isSetterDef());
86:       assertFalse(node0.isInc());
87:       assertFalse(node0.isThrow());
88:       assertEquals(4095, Node.COLUMN_MASK);
89:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
90:       assertEquals(55, Node.INFERRED_FUNCTION);
91:       assertEquals(48, Node.DIRECTIVES);
92:       assertEquals(39, Node.EMPTY_BLOCK);
93:       assertEquals(50, Node.FREE_CALL);
94:       assertEquals(43, Node.IS_CONSTANT_NAME);
95:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
96:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
97:       assertEquals(8, Node.FLAG_NO_THROWS);
98:       assertEquals(36, Node.QUOTED_PROP);
99:       assertEquals(57, Node.REFLECTED_OBJECT);
100:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
101:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
102:       assertEquals(12, Node.COLUMN_BITS);
103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
104:       assertEquals(32, Node.INCRDECR_PROP);
105:       assertEquals(46, Node.IS_NAMESPACE);
106:       assertEquals(37, Node.OPT_ARG_NAME);
107:       assertEquals(1, Node.DECR_FLAG);
108:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
109:       assertEquals(29, Node.JSDOC_INFO_PROP);
110:       assertEquals(49, Node.DIRECT_EVAL);
111:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
112:       assertEquals(56, Node.CHANGE_TIME);
113:       assertEquals(54, Node.SLASH_V);
114:       assertEquals(51, Node.STATIC_SOURCE_FILE);
115:       assertEquals(52, Node.LENGTH);
116:       assertEquals(40, Node.ORIGINALNAME_PROP);
117:       assertEquals(53, Node.INPUT_ID);
118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
119:       assertEquals(30, Node.VAR_ARGS_NAME);
120:       assertEquals(57, Node.LAST_PROP);
121:       assertEquals(2, Node.POST_FLAG);
122:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
123:       assertEquals(47, Node.IS_DISPATCHER);
124:       assertNotNull(node0);
125:       
126:       boolean boolean0 = node0.isComma();
127:       assertFalse(boolean0);
128:       assertFalse(node0.isArrayLit());
129:       assertFalse(node0.isDebugger());
130:       assertFalse(node0.isFunction());
131:       assertFalse(node0.isRegExp());
132:       assertFalse(node0.isGetterDef());
133:       assertFalse(node0.isIf());
134:       assertFalse(node0.isNE());
135:       assertFalse(node0.isTrue());
136:       assertEquals(4669, node0.getType());
137:       assertFalse(node0.isVoid());
138:       assertFalse(node0.isDelProp());
139:       assertFalse(node0.isCatch());
140:       assertFalse(node0.isString());
141:       assertFalse(node0.isFor());
142:       assertFalse(node0.isCase());
143:       assertFalse(node0.isTry());
144:       assertFalse(node0.isCall());
145:       assertFalse(node0.isVar());
146:       assertFalse(node0.isAdd());
147:       assertEquals((-1), node0.getCharno());
148:       assertFalse(node0.isBreak());
149:       assertFalse(node0.isNull());
150:       assertFalse(node0.isStringKey());
151:       assertFalse(node0.isParamList());
152:       assertFalse(node0.isSwitch());
153:       assertFalse(node0.isName());
154:       assertEquals(0, node0.getChildCount());
155:       assertFalse(node0.isLabel());
156:       assertFalse(node0.isOr());
157:       assertFalse(node0.isDefaultCase());
158:       assertFalse(node0.isEmpty());
159:       assertFalse(node0.isNew());
160:       assertFalse(node0.isAssignAdd());
161:       assertFalse(node0.isDo());
162:       assertFalse(node0.hasOneChild());
163:       assertFalse(node0.isCast());
164:       assertFalse(node0.isAssign());
165:       assertEquals((-1), node0.getSourcePosition());
166:       assertFalse(node0.isExprResult());
167:       assertFalse(node0.isGetElem());
168:       assertFalse(node0.isAnd());
169:       assertEquals((-1), node0.getLineno());
170:       assertFalse(node0.isLabelName());
171:       assertFalse(node0.isInstanceOf());
172:       assertFalse(node0.isReturn());
173:       assertFalse(node0.hasMoreThanOneChild());
174:       assertFalse(node0.isComma());
175:       assertFalse(node0.isWith());
176:       assertFalse(node0.isTypeOf());
177:       assertFalse(node0.isNot());
178:       assertFalse(node0.isObjectLit());
179:       assertFalse(node0.isDec());
180:       assertFalse(node0.isNumber());
181:       assertFalse(node0.hasChildren());
182:       assertFalse(node0.isWhile());
183:       assertFalse(node0.isThis());
184:       assertFalse(node0.isScript());
185:       assertFalse(node0.isGetProp());
186:       assertFalse(node0.isHook());
187:       assertFalse(node0.isBlock());
188:       assertFalse(node0.isFalse());
189:       assertFalse(node0.isIn());
190:       assertFalse(node0.isContinue());
191:       assertFalse(node0.isSetterDef());
192:       assertFalse(node0.isInc());
193:       assertFalse(node0.isThrow());
194:       assertEquals(4095, Node.COLUMN_MASK);
195:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
196:       assertEquals(55, Node.INFERRED_FUNCTION);
197:       assertEquals(48, Node.DIRECTIVES);
198:       assertEquals(39, Node.EMPTY_BLOCK);
199:       assertEquals(50, Node.FREE_CALL);
200:       assertEquals(43, Node.IS_CONSTANT_NAME);
201:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
202:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
203:       assertEquals(8, Node.FLAG_NO_THROWS);
204:       assertEquals(36, Node.QUOTED_PROP);
205:       assertEquals(57, Node.REFLECTED_OBJECT);
206:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
207:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
208:       assertEquals(12, Node.COLUMN_BITS);
209:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
210:       assertEquals(32, Node.INCRDECR_PROP);
211:       assertEquals(46, Node.IS_NAMESPACE);
212:       assertEquals(37, Node.OPT_ARG_NAME);
213:       assertEquals(1, Node.DECR_FLAG);
214:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
215:       assertEquals(29, Node.JSDOC_INFO_PROP);
216:       assertEquals(49, Node.DIRECT_EVAL);
217:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
218:       assertEquals(56, Node.CHANGE_TIME);
219:       assertEquals(54, Node.SLASH_V);
220:       assertEquals(51, Node.STATIC_SOURCE_FILE);
221:       assertEquals(52, Node.LENGTH);
222:       assertEquals(40, Node.ORIGINALNAME_PROP);
223:       assertEquals(53, Node.INPUT_ID);
224:       assertEquals(15, Node.NO_SIDE_EFFECTS);
225:       assertEquals(30, Node.VAR_ARGS_NAME);
226:       assertEquals(57, Node.LAST_PROP);
227:       assertEquals(2, Node.POST_FLAG);
228:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
229:       assertEquals(47, Node.IS_DISPATCHER);
230:       
231:       boolean boolean1 = node0.isStringKey();
232:       assertFalse(boolean1);
233:       assertFalse(node0.isArrayLit());
234:       assertFalse(node0.isDebugger());
235:       assertFalse(node0.isFunction());
236:       assertFalse(node0.isRegExp());
237:       assertFalse(node0.isGetterDef());
238:       assertFalse(node0.isIf());
239:       assertFalse(node0.isNE());
240:       assertFalse(node0.isTrue());
241:       assertEquals(4669, node0.getType());
242:       assertFalse(node0.isVoid());
243:       assertFalse(node0.isDelProp());
244:       assertFalse(node0.isCatch());
245:       assertFalse(node0.isString());
246:       assertFalse(node0.isFor());
247:       assertFalse(node0.isCase());
248:       assertFalse(node0.isTry());
249:       assertFalse(node0.isCall());
250:       assertFalse(node0.isVar());
251:       assertFalse(node0.isAdd());
252:       assertEquals((-1), node0.getCharno());
253:       assertFalse(node0.isBreak());
254:       assertFalse(node0.isNull());
255:       assertFalse(node0.isStringKey());
256:       assertFalse(node0.isParamList());
257:       assertFalse(node0.isSwitch());
258:       assertFalse(node0.isName());
259:       assertEquals(0, node0.getChildCount());
260:       assertFalse(node0.isLabel());
261:       assertFalse(node0.isOr());
262:       assertFalse(node0.isDefaultCase());
263:       assertFalse(node0.isEmpty());
264:       assertFalse(node0.isNew());
265:       assertFalse(node0.isAssignAdd());
266:       assertFalse(node0.isDo());
267:       assertFalse(node0.hasOneChild());
268:       assertFalse(node0.isCast());
269:       assertFalse(node0.isAssign());
270:       assertEquals((-1), node0.getSourcePosition());
271:       assertFalse(node0.isExprResult());
272:       assertFalse(node0.isGetElem());
273:       assertFalse(node0.isAnd());
274:       assertEquals((-1), node0.getLineno());
275:       assertFalse(node0.isLabelName());
276:       assertFalse(node0.isInstanceOf());
277:       assertFalse(node0.isReturn());
278:       assertFalse(node0.hasMoreThanOneChild());
279:       assertFalse(node0.isComma());
280:       assertFalse(node0.isWith());
281:       assertFalse(node0.isTypeOf());
282:       assertFalse(node0.isNot());
283:       assertFalse(node0.isObjectLit());
284:       assertFalse(node0.isDec());
285:       assertFalse(node0.isNumber());
286:       assertFalse(node0.hasChildren());
287:       assertFalse(node0.isWhile());
288:       assertFalse(node0.isThis());
289:       assertFalse(node0.isScript());
290:       assertFalse(node0.isGetProp());
291:       assertFalse(node0.isHook());
292:       assertFalse(node0.isBlock());
293:       assertFalse(node0.isFalse());
294:       assertFalse(node0.isIn());
295:       assertFalse(node0.isContinue());
296:       assertFalse(node0.isSetterDef());
297:       assertFalse(node0.isInc());
298:       assertFalse(node0.isThrow());
299:       assertTrue(boolean1 == boolean0);
300:       assertEquals(4095, Node.COLUMN_MASK);
301:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
302:       assertEquals(55, Node.INFERRED_FUNCTION);
303:       assertEquals(48, Node.DIRECTIVES);
304:       assertEquals(39, Node.EMPTY_BLOCK);
305:       assertEquals(50, Node.FREE_CALL);
306:       assertEquals(43, Node.IS_CONSTANT_NAME);
307:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
308:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
309:       assertEquals(8, Node.FLAG_NO_THROWS);
310:       assertEquals(36, Node.QUOTED_PROP);
311:       assertEquals(57, Node.REFLECTED_OBJECT);
312:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
313:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
314:       assertEquals(12, Node.COLUMN_BITS);
315:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
316:       assertEquals(32, Node.INCRDECR_PROP);
317:       assertEquals(46, Node.IS_NAMESPACE);
318:       assertEquals(37, Node.OPT_ARG_NAME);
319:       assertEquals(1, Node.DECR_FLAG);
320:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
321:       assertEquals(29, Node.JSDOC_INFO_PROP);
322:       assertEquals(49, Node.DIRECT_EVAL);
323:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
324:       assertEquals(56, Node.CHANGE_TIME);
325:       assertEquals(54, Node.SLASH_V);
326:       assertEquals(51, Node.STATIC_SOURCE_FILE);
327:       assertEquals(52, Node.LENGTH);
328:       assertEquals(40, Node.ORIGINALNAME_PROP);
329:       assertEquals(53, Node.INPUT_ID);
330:       assertEquals(15, Node.NO_SIDE_EFFECTS);
331:       assertEquals(30, Node.VAR_ARGS_NAME);
332:       assertEquals(57, Node.LAST_PROP);
333:       assertEquals(2, Node.POST_FLAG);
334:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
335:       assertEquals(47, Node.IS_DISPATCHER);
336:       
337:       Node node1 = Node.newNumber((double) 15, 31, 37);
338:       assertFalse(node1.isRegExp());
339:       assertFalse(node1.isDefaultCase());
340:       assertFalse(node1.isVoid());
341:       assertFalse(node1.isFunction());
342:       assertFalse(node1.isTry());
343:       assertFalse(node1.isCatch());
344:       assertEquals(0, node1.getChildCount());
345:       assertFalse(node1.isFor());
346:       assertFalse(node1.isParamList());
347:       assertFalse(node1.isGetterDef());
348:       assertTrue(node1.isNumber());
349:       assertFalse(node1.isArrayLit());
350:       assertFalse(node1.isStringKey());
351:       assertFalse(node1.isDebugger());
352:       assertFalse(node1.isSwitch());
353:       assertFalse(node1.isDo());
354:       assertFalse(node1.isAdd());
355:       assertFalse(node1.isNew());
356:       assertFalse(node1.isString());
357:       assertFalse(node1.isVar());
358:       assertFalse(node1.isLabel());
359:       assertFalse(node1.isAssignAdd());
360:       assertFalse(node1.isWhile());
361:       assertFalse(node1.isReturn());
362:       assertFalse(node1.isNull());
363:       assertFalse(node1.isTypeOf());
364:       assertFalse(node1.isDec());
365:       assertFalse(node1.isComma());
366:       assertFalse(node1.isDelProp());
367:       assertFalse(node1.isEmpty());
368:       assertFalse(node1.isBreak());
369:       assertFalse(node1.isCall());
370:       assertFalse(node1.isGetElem());
371:       assertFalse(node1.isName());
372:       assertFalse(node1.isOr());
373:       assertFalse(node1.isTrue());
374:       assertFalse(node1.isScript());
375:       assertFalse(node1.isWith());
376:       assertEquals(37, node1.getCharno());
377:       assertFalse(node1.isExprResult());
378:       assertFalse(node1.isCast());
379:       assertFalse(node1.isInstanceOf());
380:       assertFalse(node1.hasOneChild());
381:       assertFalse(node1.isAssign());
382:       assertFalse(node1.hasChildren());
383:       assertFalse(node1.isThis());
384:       assertFalse(node1.isLabelName());
385:       assertEquals(31, node1.getLineno());
386:       assertFalse(node1.isGetProp());
387:       assertFalse(node1.isObjectLit());
388:       assertFalse(node1.isAnd());
389:       assertFalse(node1.isNot());
390:       assertFalse(node1.isCase());
391:       assertFalse(node1.isInc());
392:       assertFalse(node1.isContinue());
393:       assertFalse(node1.hasMoreThanOneChild());
394:       assertFalse(node1.isFalse());
395:       assertEquals(39, node1.getType());
396:       assertFalse(node1.isThrow());
397:       assertFalse(node1.isBlock());
398:       assertFalse(node1.isHook());
399:       assertFalse(node1.isNE());
400:       assertFalse(node1.isIf());
401:       assertFalse(node1.isSetterDef());
402:       assertEquals(127013, node1.getSourcePosition());
403:       assertFalse(node1.isIn());
404:       assertFalse(node1.equals((Object)node0));
405:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
406:       assertEquals(39, Node.EMPTY_BLOCK);
407:       assertEquals(48, Node.DIRECTIVES);
408:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
409:       assertEquals(40, Node.ORIGINALNAME_PROP);
410:       assertEquals(4095, Node.COLUMN_MASK);
411:       assertEquals(1, Node.DECR_FLAG);
412:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
413:       assertEquals(54, Node.SLASH_V);
414:       assertEquals(43, Node.IS_CONSTANT_NAME);
415:       assertEquals(32, Node.INCRDECR_PROP);
416:       assertEquals(46, Node.IS_NAMESPACE);
417:       assertEquals(51, Node.STATIC_SOURCE_FILE);
418:       assertEquals(50, Node.FREE_CALL);
419:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
420:       assertEquals(56, Node.CHANGE_TIME);
421:       assertEquals(47, Node.IS_DISPATCHER);
422:       assertEquals(2, Node.POST_FLAG);
423:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
424:       assertEquals(37, Node.OPT_ARG_NAME);
425:       assertEquals(12, Node.COLUMN_BITS);
426:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
427:       assertEquals(15, Node.NO_SIDE_EFFECTS);
428:       assertEquals(57, Node.LAST_PROP);
429:       assertEquals(30, Node.VAR_ARGS_NAME);
430:       assertEquals(36, Node.QUOTED_PROP);
431:       assertEquals(49, Node.DIRECT_EVAL);
432:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
433:       assertEquals(57, Node.REFLECTED_OBJECT);
434:       assertEquals(29, Node.JSDOC_INFO_PROP);
435:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
436:       assertEquals(53, Node.INPUT_ID);
437:       assertEquals(55, Node.INFERRED_FUNCTION);
438:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
439:       assertEquals(52, Node.LENGTH);
440:       assertEquals(8, Node.FLAG_NO_THROWS);
441:       assertNotNull(node1);
442:       
443:       node0.setWasEmptyNode(false);
444:       assertFalse(node0.isArrayLit());
445:       assertFalse(node0.isDebugger());
446:       assertFalse(node0.isFunction());
447:       assertFalse(node0.isRegExp());
448:       assertFalse(node0.isGetterDef());
449:       assertFalse(node0.isIf());
450:       assertFalse(node0.isNE());
451:       assertFalse(node0.isTrue());
452:       assertEquals(4669, node0.getType());
453:       assertFalse(node0.isVoid());
454:       assertFalse(node0.isDelProp());
455:       assertFalse(node0.isCatch());
456:       assertFalse(node0.isString());
457:       assertFalse(node0.isFor());
458:       assertFalse(node0.isCase());
459:       assertFalse(node0.isTry());
460:       assertFalse(node0.isCall());
461:       assertFalse(node0.isVar());
462:       assertFalse(node0.isAdd());
463:       assertEquals((-1), node0.getCharno());
464:       assertFalse(node0.isBreak());
465:       assertFalse(node0.isNull());
466:       assertFalse(node0.isStringKey());
467:       assertFalse(node0.isParamList());
468:       assertFalse(node0.isSwitch());
469:       assertFalse(node0.isName());
470:       assertEquals(0, node0.getChildCount());
471:       assertFalse(node0.isLabel());
472:       assertFalse(node0.isOr());
473:       assertFalse(node0.isDefaultCase());
474:       assertFalse(node0.isEmpty());
475:       assertFalse(node0.isNew());
476:       assertFalse(node0.isAssignAdd());
477:       assertFalse(node0.isDo());
478:       assertFalse(node0.hasOneChild());
479:       assertFalse(node0.isCast());
480:       assertFalse(node0.isAssign());
481:       assertEquals((-1), node0.getSourcePosition());
482:       assertFalse(node0.isExprResult());
483:       assertFalse(node0.isGetElem());
484:       assertFalse(node0.isAnd());
485:       assertEquals((-1), node0.getLineno());
486:       assertFalse(node0.isLabelName());
487:       assertFalse(node0.isInstanceOf());
488:       assertFalse(node0.isReturn());
489:       assertFalse(node0.hasMoreThanOneChild());
490:       assertFalse(node0.isComma());
491:       assertFalse(node0.isWith());
492:       assertFalse(node0.isTypeOf());
493:       assertFalse(node0.isNot());
494:       assertFalse(node0.isObjectLit());
495:       assertFalse(node0.isDec());
496:       assertFalse(node0.isNumber());
497:       assertFalse(node0.hasChildren());
498:       assertFalse(node0.isWhile());
499:       assertFalse(node0.isThis());
500:       assertFalse(node0.isScript());
501:       assertFalse(node0.isGetProp());
502:       assertFalse(node0.isHook());
503:       assertFalse(node0.isBlock());
504:       assertFalse(node0.isFalse());
505:       assertFalse(node0.isIn());
506:       assertFalse(node0.isContinue());
507:       assertFalse(node0.isSetterDef());
508:       assertFalse(node0.isInc());
509:       assertFalse(node0.isThrow());
510:       assertFalse(node0.equals((Object)node1));
511:       assertEquals(4095, Node.COLUMN_MASK);
512:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
513:       assertEquals(55, Node.INFERRED_FUNCTION);
514:       assertEquals(48, Node.DIRECTIVES);
515:       assertEquals(39, Node.EMPTY_BLOCK);
516:       assertEquals(50, Node.FREE_CALL);
517:       assertEquals(43, Node.IS_CONSTANT_NAME);
518:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
519:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
520:       assertEquals(8, Node.FLAG_NO_THROWS);
521:       assertEquals(36, Node.QUOTED_PROP);
522:       assertEquals(57, Node.REFLECTED_OBJECT);
523:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
524:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
525:       assertEquals(12, Node.COLUMN_BITS);
526:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
527:       assertEquals(32, Node.INCRDECR_PROP);
528:       assertEquals(46, Node.IS_NAMESPACE);
529:       assertEquals(37, Node.OPT_ARG_NAME);
530:       assertEquals(1, Node.DECR_FLAG);
531:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
532:       assertEquals(29, Node.JSDOC_INFO_PROP);
533:       assertEquals(49, Node.DIRECT_EVAL);
534:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
535:       assertEquals(56, Node.CHANGE_TIME);
536:       assertEquals(54, Node.SLASH_V);
537:       assertEquals(51, Node.STATIC_SOURCE_FILE);
538:       assertEquals(52, Node.LENGTH);
539:       assertEquals(40, Node.ORIGINALNAME_PROP);
540:       assertEquals(53, Node.INPUT_ID);
541:       assertEquals(15, Node.NO_SIDE_EFFECTS);
542:       assertEquals(30, Node.VAR_ARGS_NAME);
543:       assertEquals(57, Node.LAST_PROP);
544:       assertEquals(2, Node.POST_FLAG);
545:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
546:       assertEquals(47, Node.IS_DISPATCHER);
547:       
548:       boolean boolean2 = node1.isCall();
549:       assertFalse(boolean2);
550:       assertFalse(node1.isRegExp());
551:       assertFalse(node1.isDefaultCase());
552:       assertFalse(node1.isVoid());
553:       assertFalse(node1.isFunction());
554:       assertFalse(node1.isTry());
555:       assertFalse(node1.isCatch());
556:       assertEquals(0, node1.getChildCount());
557:       assertFalse(node1.isFor());
558:       assertFalse(node1.isParamList());
559:       assertFalse(node1.isGetterDef());
560:       assertTrue(node1.isNumber());
561:       assertFalse(node1.isArrayLit());
562:       assertFalse(node1.isStringKey());
563:       assertFalse(node1.isDebugger());
564:       assertFalse(node1.isSwitch());
565:       assertFalse(node1.isDo());
566:       assertFalse(node1.isAdd());
567:       assertFalse(node1.isNew());
568:       assertFalse(node1.isString());
569:       assertFalse(node1.isVar());
570:       assertFalse(node1.isLabel());
571:       assertFalse(node1.isAssignAdd());
572:       assertFalse(node1.isWhile());
573:       assertFalse(node1.isReturn());
574:       assertFalse(node1.isNull());
575:       assertFalse(node1.isTypeOf());
576:       assertFalse(node1.isDec());
577:       assertFalse(node1.isComma());
578:       assertFalse(node1.isDelProp());
579:       assertFalse(node1.isEmpty());
580:       assertFalse(node1.isBreak());
581:       assertFalse(node1.isCall());
582:       assertFalse(node1.isGetElem());
583:       assertFalse(node1.isName());
584:       assertFalse(node1.isOr());
585:       assertFalse(node1.isTrue());
586:       assertFalse(node1.isScript());
587:       assertFalse(node1.isWith());
588:       assertEquals(37, node1.getCharno());
589:       assertFalse(node1.isExprResult());
590:       assertFalse(node1.isCast());
591:       assertFalse(node1.isInstanceOf());
592:       assertFalse(node1.hasOneChild());
593:       assertFalse(node1.isAssign());
594:       assertFalse(node1.hasChildren());
595:       assertFalse(node1.isThis());
596:       assertFalse(node1.isLabelName());
597:       assertEquals(31, node1.getLineno());
598:       assertFalse(node1.isGetProp());
599:       assertFalse(node1.isObjectLit());
600:       assertFalse(node1.isAnd());
601:       assertFalse(node1.isNot());
602:       assertFalse(node1.isCase());
603:       assertFalse(node1.isInc());
604:       assertFalse(node1.isContinue());
605:       assertFalse(node1.hasMoreThanOneChild());
606:       assertFalse(node1.isFalse());
607:       assertEquals(39, node1.getType());
608:       assertFalse(node1.isThrow());
609:       assertFalse(node1.isBlock());
610:       assertFalse(node1.isHook());
611:       assertFalse(node1.isNE());
612:       assertFalse(node1.isIf());
613:       assertFalse(node1.isSetterDef());
614:       assertEquals(127013, node1.getSourcePosition());
615:       assertFalse(node1.isIn());
616:       assertFalse(node1.equals((Object)node0));
617:       assertTrue(boolean2 == boolean1);
618:       assertTrue(boolean2 == boolean0);
619:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
620:       assertEquals(39, Node.EMPTY_BLOCK);
621:       assertEquals(48, Node.DIRECTIVES);
622:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
623:       assertEquals(40, Node.ORIGINALNAME_PROP);
624:       assertEquals(4095, Node.COLUMN_MASK);
625:       assertEquals(1, Node.DECR_FLAG);
626:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
627:       assertEquals(54, Node.SLASH_V);
628:       assertEquals(43, Node.IS_CONSTANT_NAME);
629:       assertEquals(32, Node.INCRDECR_PROP);
630:       assertEquals(46, Node.IS_NAMESPACE);
631:       assertEquals(51, Node.STATIC_SOURCE_FILE);
632:       assertEquals(50, Node.FREE_CALL);
633:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
634:       assertEquals(56, Node.CHANGE_TIME);
635:       assertEquals(47, Node.IS_DISPATCHER);
636:       assertEquals(2, Node.POST_FLAG);
637:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
638:       assertEquals(37, Node.OPT_ARG_NAME);
639:       assertEquals(12, Node.COLUMN_BITS);
640:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
641:       assertEquals(15, Node.NO_SIDE_EFFECTS);
642:       assertEquals(57, Node.LAST_PROP);
643:       assertEquals(30, Node.VAR_ARGS_NAME);
644:       assertEquals(36, Node.QUOTED_PROP);
645:       assertEquals(49, Node.DIRECT_EVAL);
646:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
647:       assertEquals(57, Node.REFLECTED_OBJECT);
648:       assertEquals(29, Node.JSDOC_INFO_PROP);
649:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
650:       assertEquals(53, Node.INPUT_ID);
651:       assertEquals(55, Node.INFERRED_FUNCTION);
652:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
653:       assertEquals(52, Node.LENGTH);
654:       assertEquals(8, Node.FLAG_NO_THROWS);
655:       
656:       StringWriter stringWriter0 = new StringWriter(4669);
657:       assertEquals("", stringWriter0.toString());
658:       assertNotNull(stringWriter0);
659:       
660:       node1.appendStringTree(stringWriter0);
661:       assertFalse(node1.isRegExp());
662:       assertFalse(node1.isDefaultCase());
663:       assertFalse(node1.isVoid());
664:       assertFalse(node1.isFunction());
665:       assertFalse(node1.isTry());
666:       assertFalse(node1.isCatch());
667:       assertEquals(0, node1.getChildCount());
668:       assertFalse(node1.isFor());
669:       assertFalse(node1.isParamList());
670:       assertFalse(node1.isGetterDef());
671:       assertTrue(node1.isNumber());
672:       assertFalse(node1.isArrayLit());
673:       assertFalse(node1.isStringKey());
674:       assertFalse(node1.isDebugger());
675:       assertFalse(node1.isSwitch());
676:       assertFalse(node1.isDo());
677:       assertFalse(node1.isAdd());
678:       assertFalse(node1.isNew());
679:       assertFalse(node1.isString());
680:       assertFalse(node1.isVar());
681:       assertFalse(node1.isLabel());
682:       assertFalse(node1.isAssignAdd());
683:       assertFalse(node1.isWhile());
684:       assertFalse(node1.isReturn());
685:       assertFalse(node1.isNull());
686:       assertFalse(node1.isTypeOf());
687:       assertFalse(node1.isDec());
688:       assertFalse(node1.isComma());
689:       assertFalse(node1.isDelProp());
690:       assertFalse(node1.isEmpty());
691:       assertFalse(node1.isBreak());
692:       assertFalse(node1.isCall());
693:       assertFalse(node1.isGetElem());
694:       assertFalse(node1.isName());
695:       assertFalse(node1.isOr());
696:       assertFalse(node1.isTrue());
697:       assertFalse(node1.isScript());
698:       assertFalse(node1.isWith());
699:       assertEquals(37, node1.getCharno());
700:       assertFalse(node1.isExprResult());
701:       assertFalse(node1.isCast());
702:       assertFalse(node1.isInstanceOf());
703:       assertFalse(node1.hasOneChild());
704:       assertFalse(node1.isAssign());
705:       assertFalse(node1.hasChildren());
706:       assertFalse(node1.isThis());
707:       assertFalse(node1.isLabelName());
708:       assertEquals(31, node1.getLineno());
709:       assertFalse(node1.isGetProp());
710:       assertFalse(node1.isObjectLit());
711:       assertFalse(node1.isAnd());
712:       assertFalse(node1.isNot());
713:       assertFalse(node1.isCase());
714:       assertFalse(node1.isInc());
715:       assertFalse(node1.isContinue());
716:       assertFalse(node1.hasMoreThanOneChild());
717:       assertFalse(node1.isFalse());
718:       assertEquals(39, node1.getType());
719:       assertFalse(node1.isThrow());
720:       assertFalse(node1.isBlock());
721:       assertFalse(node1.isHook());
722:       assertFalse(node1.isNE());
723:       assertFalse(node1.isIf());
724:       assertFalse(node1.isSetterDef());
725:       assertEquals(127013, node1.getSourcePosition());
726:       assertFalse(node1.isIn());
727:       assertEquals("NUMBER 15.0 31\n", stringWriter0.toString());
728:       assertFalse(node1.equals((Object)node0));
729:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
730:       assertEquals(39, Node.EMPTY_BLOCK);
731:       assertEquals(48, Node.DIRECTIVES);
732:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
733:       assertEquals(40, Node.ORIGINALNAME_PROP);
734:       assertEquals(4095, Node.COLUMN_MASK);
735:       assertEquals(1, Node.DECR_FLAG);
736:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
737:       assertEquals(54, Node.SLASH_V);
738:       assertEquals(43, Node.IS_CONSTANT_NAME);
739:       assertEquals(32, Node.INCRDECR_PROP);
740:       assertEquals(46, Node.IS_NAMESPACE);
741:       assertEquals(51, Node.STATIC_SOURCE_FILE);
742:       assertEquals(50, Node.FREE_CALL);
743:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
744:       assertEquals(56, Node.CHANGE_TIME);
745:       assertEquals(47, Node.IS_DISPATCHER);
746:       assertEquals(2, Node.POST_FLAG);
747:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
748:       assertEquals(37, Node.OPT_ARG_NAME);
749:       assertEquals(12, Node.COLUMN_BITS);
750:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
751:       assertEquals(15, Node.NO_SIDE_EFFECTS);
752:       assertEquals(57, Node.LAST_PROP);
753:       assertEquals(30, Node.VAR_ARGS_NAME);
754:       assertEquals(36, Node.QUOTED_PROP);
755:       assertEquals(49, Node.DIRECT_EVAL);
756:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
757:       assertEquals(57, Node.REFLECTED_OBJECT);
758:       assertEquals(29, Node.JSDOC_INFO_PROP);
759:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
760:       assertEquals(53, Node.INPUT_ID);
761:       assertEquals(55, Node.INFERRED_FUNCTION);
762:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
763:       assertEquals(52, Node.LENGTH);
764:       assertEquals(8, Node.FLAG_NO_THROWS);
765:       
766:       boolean boolean3 = node1.hasChildren();
767:       assertFalse(boolean3);
768:       assertFalse(node1.isRegExp());
769:       assertFalse(node1.isDefaultCase());
770:       assertFalse(node1.isVoid());
771:       assertFalse(node1.isFunction());
772:       assertFalse(node1.isTry());
773:       assertFalse(node1.isCatch());
774:       assertEquals(0, node1.getChildCount());
775:       assertFalse(node1.isFor());
776:       assertFalse(node1.isParamList());
777:       assertFalse(node1.isGetterDef());
778:       assertTrue(node1.isNumber());
779:       assertFalse(node1.isArrayLit());
780:       assertFalse(node1.isStringKey());
781:       assertFalse(node1.isDebugger());
782:       assertFalse(node1.isSwitch());
783:       assertFalse(node1.isDo());
784:       assertFalse(node1.isAdd());
785:       assertFalse(node1.isNew());
786:       assertFalse(node1.isString());
787:       assertFalse(node1.isVar());
788:       assertFalse(node1.isLabel());
789:       assertFalse(node1.isAssignAdd());
790:       assertFalse(node1.isWhile());
791:       assertFalse(node1.isReturn());
792:       assertFalse(node1.isNull());
793:       assertFalse(node1.isTypeOf());
794:       assertFalse(node1.isDec());
795:       assertFalse(node1.isComma());
796:       assertFalse(node1.isDelProp());
797:       assertFalse(node1.isEmpty());
798:       assertFalse(node1.isBreak());
799:       assertFalse(node1.isCall());
800:       assertFalse(node1.isGetElem());
801:       assertFalse(node1.isName());
802:       assertFalse(node1.isOr());
803:       assertFalse(node1.isTrue());
804:       assertFalse(node1.isScript());
805:       assertFalse(node1.isWith());
806:       assertEquals(37, node1.getCharno());
807:       assertFalse(node1.isExprResult());
808:       assertFalse(node1.isCast());
809:       assertFalse(node1.isInstanceOf());
810:       assertFalse(node1.hasOneChild());
811:       assertFalse(node1.isAssign());
812:       assertFalse(node1.hasChildren());
813:       assertFalse(node1.isThis());
814:       assertFalse(node1.isLabelName());
815:       assertEquals(31, node1.getLineno());
816:       assertFalse(node1.isGetProp());
817:       assertFalse(node1.isObjectLit());
818:       assertFalse(node1.isAnd());
819:       assertFalse(node1.isNot());
820:       assertFalse(node1.isCase());
821:       assertFalse(node1.isInc());
822:       assertFalse(node1.isContinue());
823:       assertFalse(node1.hasMoreThanOneChild());
824:       assertFalse(node1.isFalse());
825:       assertEquals(39, node1.getType());
826:       assertFalse(node1.isThrow());
827:       assertFalse(node1.isBlock());
828:       assertFalse(node1.isHook());
829:       assertFalse(node1.isNE());
830:       assertFalse(node1.isIf());
831:       assertFalse(node1.isSetterDef());
832:       assertEquals(127013, node1.getSourcePosition());
833:       assertFalse(node1.isIn());
834:       assertFalse(node1.equals((Object)node0));
835:       assertTrue(boolean3 == boolean2);
836:       assertTrue(boolean3 == boolean0);
837:       assertTrue(boolean3 == boolean1);
838:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
839:       assertEquals(39, Node.EMPTY_BLOCK);
840:       assertEquals(48, Node.DIRECTIVES);
841:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
842:       assertEquals(40, Node.ORIGINALNAME_PROP);
843:       assertEquals(4095, Node.COLUMN_MASK);
844:       assertEquals(1, Node.DECR_FLAG);
845:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
846:       assertEquals(54, Node.SLASH_V);
847:       assertEquals(43, Node.IS_CONSTANT_NAME);
848:       assertEquals(32, Node.INCRDECR_PROP);
849:       assertEquals(46, Node.IS_NAMESPACE);
850:       assertEquals(51, Node.STATIC_SOURCE_FILE);
851:       assertEquals(50, Node.FREE_CALL);
852:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
853:       assertEquals(56, Node.CHANGE_TIME);
854:       assertEquals(47, Node.IS_DISPATCHER);
855:       assertEquals(2, Node.POST_FLAG);
856:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
857:       assertEquals(37, Node.OPT_ARG_NAME);
858:       assertEquals(12, Node.COLUMN_BITS);
859:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
860:       assertEquals(15, Node.NO_SIDE_EFFECTS);
861:       assertEquals(57, Node.LAST_PROP);
862:       assertEquals(30, Node.VAR_ARGS_NAME);
863:       assertEquals(36, Node.QUOTED_PROP);
864:       assertEquals(49, Node.DIRECT_EVAL);
865:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
866:       assertEquals(57, Node.REFLECTED_OBJECT);
867:       assertEquals(29, Node.JSDOC_INFO_PROP);
868:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
869:       assertEquals(53, Node.INPUT_ID);
870:       assertEquals(55, Node.INFERRED_FUNCTION);
871:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
872:       assertEquals(52, Node.LENGTH);
873:       assertEquals(8, Node.FLAG_NO_THROWS);
874:       
875:       Iterable<Node> iterable0 = node1.children();
876:       assertFalse(node1.isRegExp());
877:       assertFalse(node1.isDefaultCase());
878:       assertFalse(node1.isVoid());
879:       assertFalse(node1.isFunction());
880:       assertFalse(node1.isTry());
881:       assertFalse(node1.isCatch());
882:       assertEquals(0, node1.getChildCount());
883:       assertFalse(node1.isFor());
884:       assertFalse(node1.isParamList());
885:       assertFalse(node1.isGetterDef());
886:       assertTrue(node1.isNumber());
887:       assertFalse(node1.isArrayLit());
888:       assertFalse(node1.isStringKey());
889:       assertFalse(node1.isDebugger());
890:       assertFalse(node1.isSwitch());
891:       assertFalse(node1.isDo());
892:       assertFalse(node1.isAdd());
893:       assertFalse(node1.isNew());
894:       assertFalse(node1.isString());
895:       assertFalse(node1.isVar());
896:       assertFalse(node1.isLabel());
897:       assertFalse(node1.isAssignAdd());
898:       assertFalse(node1.isWhile());
899:       assertFalse(node1.isReturn());
900:       assertFalse(node1.isNull());
901:       assertFalse(node1.isTypeOf());
902:       assertFalse(node1.isDec());
903:       assertFalse(node1.isComma());
904:       assertFalse(node1.isDelProp());
905:       assertFalse(node1.isEmpty());
906:       assertFalse(node1.isBreak());
907:       assertFalse(node1.isCall());
908:       assertFalse(node1.isGetElem());
909:       assertFalse(node1.isName());
910:       assertFalse(node1.isOr());
911:       assertFalse(node1.isTrue());
912:       assertFalse(node1.isScript());
913:       assertFalse(node1.isWith());
914:       assertEquals(37, node1.getCharno());
915:       assertFalse(node1.isExprResult());
916:       assertFalse(node1.isCast());
917:       assertFalse(node1.isInstanceOf());
918:       assertFalse(node1.hasOneChild());
919:       assertFalse(node1.isAssign());
920:       assertFalse(node1.hasChildren());
921:       assertFalse(node1.isThis());
922:       assertFalse(node1.isLabelName());
923:       assertEquals(31, node1.getLineno());
924:       assertFalse(node1.isGetProp());
925:       assertFalse(node1.isObjectLit());
926:       assertFalse(node1.isAnd());
927:       assertFalse(node1.isNot());
928:       assertFalse(node1.isCase());
929:       assertFalse(node1.isInc());
930:       assertFalse(node1.isContinue());
931:       assertFalse(node1.hasMoreThanOneChild());
932:       assertFalse(node1.isFalse());
933:       assertEquals(39, node1.getType());
934:       assertFalse(node1.isThrow());
935:       assertFalse(node1.isBlock());
936:       assertFalse(node1.isHook());
937:       assertFalse(node1.isNE());
938:       assertFalse(node1.isIf());
939:       assertFalse(node1.isSetterDef());
940:       assertEquals(127013, node1.getSourcePosition());
941:       assertFalse(node1.isIn());
942:       assertFalse(node1.equals((Object)node0));
943:       assertFalse(iterable0.contains(node0));
944:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
945:       assertEquals(39, Node.EMPTY_BLOCK);
946:       assertEquals(48, Node.DIRECTIVES);
947:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
948:       assertEquals(40, Node.ORIGINALNAME_PROP);
949:       assertEquals(4095, Node.COLUMN_MASK);
950:       assertEquals(1, Node.DECR_FLAG);
951:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
952:       assertEquals(54, Node.SLASH_V);
953:       assertEquals(43, Node.IS_CONSTANT_NAME);
954:       assertEquals(32, Node.INCRDECR_PROP);
955:       assertEquals(46, Node.IS_NAMESPACE);
956:       assertEquals(51, Node.STATIC_SOURCE_FILE);
957:       assertEquals(50, Node.FREE_CALL);
958:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
959:       assertEquals(56, Node.CHANGE_TIME);
960:       assertEquals(47, Node.IS_DISPATCHER);
961:       assertEquals(2, Node.POST_FLAG);
962:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
963:       assertEquals(37, Node.OPT_ARG_NAME);
964:       assertEquals(12, Node.COLUMN_BITS);
965:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
966:       assertEquals(15, Node.NO_SIDE_EFFECTS);
967:       assertEquals(57, Node.LAST_PROP);
968:       assertEquals(30, Node.VAR_ARGS_NAME);
969:       assertEquals(36, Node.QUOTED_PROP);
970:       assertEquals(49, Node.DIRECT_EVAL);
971:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
972:       assertEquals(57, Node.REFLECTED_OBJECT);
973:       assertEquals(29, Node.JSDOC_INFO_PROP);
974:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
975:       assertEquals(53, Node.INPUT_ID);
976:       assertEquals(55, Node.INFERRED_FUNCTION);
977:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
978:       assertEquals(52, Node.LENGTH);
979:       assertEquals(8, Node.FLAG_NO_THROWS);
980:       assertNotNull(iterable0);
981:       
982:       Node node2 = Node.newString("Object#Key");
983:       assertNotSame(node2, node0);
984:       assertFalse(node2.hasChildren());
985:       assertFalse(node2.isDec());
986:       assertEquals((-1), node2.getSourcePosition());
987:       assertFalse(node2.isAssign());
988:       assertFalse(node2.isLabelName());
989:       assertFalse(node2.isTypeOf());
990:       assertFalse(node2.isNumber());
991:       assertFalse(node2.isLabel());
992:       assertFalse(node2.isReturn());
993:       assertFalse(node2.hasOneChild());
994:       assertFalse(node2.isOr());
995:       assertFalse(node2.isAssignAdd());
996:       assertFalse(node2.isScript());
997:       assertFalse(node2.isDo());
998:       assertFalse(node2.isNot());
999:       assertFalse(node2.isAnd());
1000:       assertFalse(node2.isContinue());
1001:       assertFalse(node2.isCast());
1002:       assertFalse(node2.isBreak());
1003:       assertFalse(node2.isName());
1004:       assertFalse(node2.isComma());
1005:       assertFalse(node2.isVar());
1006:       assertFalse(node2.isNull());
1007:       assertFalse(node2.isObjectLit());
1008:       assertFalse(node2.isGetProp());
1009:       assertFalse(node2.isNew());
1010:       assertFalse(node2.isAdd());
1011:       assertFalse(node2.isWhile());
1012:       assertFalse(node2.isTrue());
1013:       assertFalse(node2.isVoid());
1014:       assertFalse(node2.isCall());
1015:       assertFalse(node2.isGetElem());
1016:       assertFalse(node2.isExprResult());
1017:       assertFalse(node2.isIf());
1018:       assertFalse(node2.isDelProp());
1019:       assertFalse(node2.isGetterDef());
1020:       assertFalse(node2.isNE());
1021:       assertFalse(node2.isFor());
1022:       assertFalse(node2.isIn());
1023:       assertFalse(node2.isTry());
1024:       assertFalse(node2.isCase());
1025:       assertFalse(node2.isEmpty());
1026:       assertFalse(node2.isDefaultCase());
1027:       assertFalse(node2.isSwitch());
1028:       assertFalse(node2.isFunction());
1029:       assertEquals((-1), node2.getCharno());
1030:       assertFalse(node2.isDebugger());
1031:       assertEquals(40, node2.getType());
1032:       assertEquals(0, node2.getChildCount());
1033:       assertFalse(node2.isArrayLit());
1034:       assertFalse(node2.isFalse());
1035:       assertFalse(node2.isThrow());
1036:       assertFalse(node2.isStringKey());
1037:       assertFalse(node2.isParamList());
1038:       assertFalse(node2.isThis());
1039:       assertFalse(node2.isHook());
1040:       assertTrue(node2.isString());
1041:       assertFalse(node2.isSetterDef());
1042:       assertFalse(node2.isInc());
1043:       assertFalse(node2.isWith());
1044:       assertFalse(node2.isRegExp());
1045:       assertFalse(node2.isBlock());
1046:       assertFalse(node2.isInstanceOf());
1047:       assertEquals((-1), node2.getLineno());
1048:       assertFalse(node2.hasMoreThanOneChild());
1049:       assertFalse(node2.isCatch());
1050:       assertFalse(node2.equals((Object)node0));
1051:       assertFalse(node2.equals((Object)node1));
1052:       assertEquals(36, Node.QUOTED_PROP);
1053:       assertEquals(55, Node.INFERRED_FUNCTION);
1054:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1055:       assertEquals(4095, Node.COLUMN_MASK);
1056:       assertEquals(53, Node.INPUT_ID);
1057:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1058:       assertEquals(50, Node.FREE_CALL);
1059:       assertEquals(47, Node.IS_DISPATCHER);
1060:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1061:       assertEquals(40, Node.ORIGINALNAME_PROP);
1062:       assertEquals(2, Node.POST_FLAG);
1063:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1064:       assertEquals(46, Node.IS_NAMESPACE);
1065:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1066:       assertEquals(54, Node.SLASH_V);
1067:       assertEquals(43, Node.IS_CONSTANT_NAME);
1068:       assertEquals(30, Node.VAR_ARGS_NAME);
1069:       assertEquals(49, Node.DIRECT_EVAL);
1070:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1071:       assertEquals(1, Node.DECR_FLAG);
1072:       assertEquals(32, Node.INCRDECR_PROP);
1073:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1074:       assertEquals(12, Node.COLUMN_BITS);
1075:       assertEquals(57, Node.LAST_PROP);
1076:       assertEquals(29, Node.JSDOC_INFO_PROP);
1077:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1078:       assertEquals(8, Node.FLAG_NO_THROWS);
1079:       assertEquals(39, Node.EMPTY_BLOCK);
1080:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1081:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1082:       assertEquals(52, Node.LENGTH);
1083:       assertEquals(57, Node.REFLECTED_OBJECT);
1084:       assertEquals(37, Node.OPT_ARG_NAME);
1085:       assertEquals(48, Node.DIRECTIVES);
1086:       assertEquals(56, Node.CHANGE_TIME);
1087:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1088:       assertNotNull(node2);
1089:       
1090:       boolean boolean4 = node1.hasChildren();
1091:       assertFalse(boolean4);
1092:       assertFalse(node1.isRegExp());
1093:       assertFalse(node1.isDefaultCase());
1094:       assertFalse(node1.isVoid());
1095:       assertFalse(node1.isFunction());
1096:       assertFalse(node1.isTry());
1097:       assertFalse(node1.isCatch());
1098:       assertEquals(0, node1.getChildCount());
1099:       assertFalse(node1.isFor());
1100:       assertFalse(node1.isParamList());
1101:       assertFalse(node1.isGetterDef());
1102:       assertTrue(node1.isNumber());
1103:       assertFalse(node1.isArrayLit());
1104:       assertFalse(node1.isStringKey());
1105:       assertFalse(node1.isDebugger());
1106:       assertFalse(node1.isSwitch());
1107:       assertFalse(node1.isDo());
1108:       assertFalse(node1.isAdd());
1109:       assertFalse(node1.isNew());
1110:       assertFalse(node1.isString());
1111:       assertFalse(node1.isVar());
1112:       assertFalse(node1.isLabel());
1113:       assertFalse(node1.isAssignAdd());
1114:       assertFalse(node1.isWhile());
1115:       assertFalse(node1.isReturn());
1116:       assertFalse(node1.isNull());
1117:       assertFalse(node1.isTypeOf());
1118:       assertFalse(node1.isDec());
1119:       assertFalse(node1.isComma());
1120:       assertFalse(node1.isDelProp());
1121:       assertFalse(node1.isEmpty());
1122:       assertFalse(node1.isBreak());
1123:       assertFalse(node1.isCall());
1124:       assertFalse(node1.isGetElem());
1125:       assertFalse(node1.isName());
1126:       assertFalse(node1.isOr());
1127:       assertFalse(node1.isTrue());
1128:       assertFalse(node1.isScript());
1129:       assertFalse(node1.isWith());
1130:       assertEquals(37, node1.getCharno());
1131:       assertFalse(node1.isExprResult());
1132:       assertFalse(node1.isCast());
1133:       assertFalse(node1.isInstanceOf());
1134:       assertFalse(node1.hasOneChild());
1135:       assertFalse(node1.isAssign());
1136:       assertFalse(node1.hasChildren());
1137:       assertFalse(node1.isThis());
1138:       assertFalse(node1.isLabelName());
1139:       assertEquals(31, node1.getLineno());
1140:       assertFalse(node1.isGetProp());
1141:       assertFalse(node1.isObjectLit());
1142:       assertFalse(node1.isAnd());
1143:       assertFalse(node1.isNot());
1144:       assertFalse(node1.isCase());
1145:       assertFalse(node1.isInc());
1146:       assertFalse(node1.isContinue());
1147:       assertFalse(node1.hasMoreThanOneChild());
1148:       assertFalse(node1.isFalse());
1149:       assertEquals(39, node1.getType());
1150:       assertFalse(node1.isThrow());
1151:       assertFalse(node1.isBlock());
1152:       assertFalse(node1.isHook());
1153:       assertFalse(node1.isNE());
1154:       assertFalse(node1.isIf());
1155:       assertFalse(node1.isSetterDef());
1156:       assertEquals(127013, node1.getSourcePosition());
1157:       assertFalse(node1.isIn());
1158:       assertFalse(node1.equals((Object)node0));
1159:       assertFalse(node1.equals((Object)node2));
1160:       assertTrue(boolean4 == boolean0);
1161:       assertTrue(boolean4 == boolean2);
1162:       assertTrue(boolean4 == boolean1);
1163:       assertTrue(boolean4 == boolean3);
1164:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1165:       assertEquals(39, Node.EMPTY_BLOCK);
1166:       assertEquals(48, Node.DIRECTIVES);
1167:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1168:       assertEquals(40, Node.ORIGINALNAME_PROP);
1169:       assertEquals(4095, Node.COLUMN_MASK);
1170:       assertEquals(1, Node.DECR_FLAG);
1171:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1172:       assertEquals(54, Node.SLASH_V);
1173:       assertEquals(43, Node.IS_CONSTANT_NAME);
1174:       assertEquals(32, Node.INCRDECR_PROP);
1175:       assertEquals(46, Node.IS_NAMESPACE);
1176:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1177:       assertEquals(50, Node.FREE_CALL);
1178:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1179:       assertEquals(56, Node.CHANGE_TIME);
1180:       assertEquals(47, Node.IS_DISPATCHER);
1181:       assertEquals(2, Node.POST_FLAG);
1182:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1183:       assertEquals(37, Node.OPT_ARG_NAME);
1184:       assertEquals(12, Node.COLUMN_BITS);
1185:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1186:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1187:       assertEquals(57, Node.LAST_PROP);
1188:       assertEquals(30, Node.VAR_ARGS_NAME);
1189:       assertEquals(36, Node.QUOTED_PROP);
1190:       assertEquals(49, Node.DIRECT_EVAL);
1191:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1192:       assertEquals(57, Node.REFLECTED_OBJECT);
1193:       assertEquals(29, Node.JSDOC_INFO_PROP);
1194:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1195:       assertEquals(53, Node.INPUT_ID);
1196:       assertEquals(55, Node.INFERRED_FUNCTION);
1197:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1198:       assertEquals(52, Node.LENGTH);
1199:       assertEquals(8, Node.FLAG_NO_THROWS);
1200:       
1201:       boolean boolean5 = node0.isQualifiedName();
1202:       assertNotSame(node0, node2);
1203:       assertFalse(boolean5);
1204:       assertFalse(node0.isArrayLit());
1205:       assertFalse(node0.isDebugger());
1206:       assertFalse(node0.isFunction());
1207:       assertFalse(node0.isRegExp());
1208:       assertFalse(node0.isGetterDef());
1209:       assertFalse(node0.isIf());
1210:       assertFalse(node0.isNE());
1211:       assertFalse(node0.isTrue());
1212:       assertEquals(4669, node0.getType());
1213:       assertFalse(node0.isVoid());
1214:       assertFalse(node0.isDelProp());
1215:       assertFalse(node0.isCatch());
1216:       assertFalse(node0.isString());
1217:       assertFalse(node0.isFor());
1218:       assertFalse(node0.isCase());
1219:       assertFalse(node0.isTry());
1220:       assertFalse(node0.isCall());
1221:       assertFalse(node0.isVar());
1222:       assertFalse(node0.isAdd());
1223:       assertEquals((-1), node0.getCharno());
1224:       assertFalse(node0.isBreak());
1225:       assertFalse(node0.isNull());
1226:       assertFalse(node0.isStringKey());
1227:       assertFalse(node0.isParamList());
1228:       assertFalse(node0.isSwitch());
1229:       assertFalse(node0.isName());
1230:       assertEquals(0, node0.getChildCount());
1231:       assertFalse(node0.isLabel());
1232:       assertFalse(node0.isOr());
1233:       assertFalse(node0.isDefaultCase());
1234:       assertFalse(node0.isEmpty());
1235:       assertFalse(node0.isNew());
1236:       assertFalse(node0.isAssignAdd());
1237:       assertFalse(node0.isDo());
1238:       assertFalse(node0.hasOneChild());
1239:       assertFalse(node0.isCast());
1240:       assertFalse(node0.isAssign());
1241:       assertEquals((-1), node0.getSourcePosition());
1242:       assertFalse(node0.isExprResult());
1243:       assertFalse(node0.isGetElem());
1244:       assertFalse(node0.isAnd());
1245:       assertEquals((-1), node0.getLineno());
1246:       assertFalse(node0.isLabelName());
1247:       assertFalse(node0.isInstanceOf());
1248:       assertFalse(node0.isReturn());
1249:       assertFalse(node0.hasMoreThanOneChild());
1250:       assertFalse(node0.isComma());
1251:       assertFalse(node0.isWith());
1252:       assertFalse(node0.isTypeOf());
1253:       assertFalse(node0.isNot());
1254:       assertFalse(node0.isObjectLit());
1255:       assertFalse(node0.isDec());
1256:       assertFalse(node0.isNumber());
1257:       assertFalse(node0.hasChildren());
1258:       assertFalse(node0.isWhile());
1259:       assertFalse(node0.isThis());
1260:       assertFalse(node0.isScript());
1261:       assertFalse(node0.isGetProp());
1262:       assertFalse(node0.isHook());
1263:       assertFalse(node0.isBlock());
1264:       assertFalse(node0.isFalse());
1265:       assertFalse(node0.isIn());
1266:       assertFalse(node0.isContinue());
1267:       assertFalse(node0.isSetterDef());
1268:       assertFalse(node0.isInc());
1269:       assertFalse(node0.isThrow());
1270:       assertFalse(node0.equals((Object)node2));
1271:       assertFalse(node0.equals((Object)node1));
1272:       assertTrue(boolean5 == boolean2);
1273:       assertTrue(boolean5 == boolean0);
1274:       assertTrue(boolean5 == boolean1);
1275:       assertTrue(boolean5 == boolean4);
1276:       assertTrue(boolean5 == boolean3);
1277:       assertEquals(4095, Node.COLUMN_MASK);
1278:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1279:       assertEquals(55, Node.INFERRED_FUNCTION);
1280:       assertEquals(48, Node.DIRECTIVES);
1281:       assertEquals(39, Node.EMPTY_BLOCK);
1282:       assertEquals(50, Node.FREE_CALL);
1283:       assertEquals(43, Node.IS_CONSTANT_NAME);
1284:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1285:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1286:       assertEquals(8, Node.FLAG_NO_THROWS);
1287:       assertEquals(36, Node.QUOTED_PROP);
1288:       assertEquals(57, Node.REFLECTED_OBJECT);
1289:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1290:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1291:       assertEquals(12, Node.COLUMN_BITS);
1292:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1293:       assertEquals(32, Node.INCRDECR_PROP);
1294:       assertEquals(46, Node.IS_NAMESPACE);
1295:       assertEquals(37, Node.OPT_ARG_NAME);
1296:       assertEquals(1, Node.DECR_FLAG);
1297:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1298:       assertEquals(29, Node.JSDOC_INFO_PROP);
1299:       assertEquals(49, Node.DIRECT_EVAL);
1300:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1301:       assertEquals(56, Node.CHANGE_TIME);
1302:       assertEquals(54, Node.SLASH_V);
1303:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1304:       assertEquals(52, Node.LENGTH);
1305:       assertEquals(40, Node.ORIGINALNAME_PROP);
1306:       assertEquals(53, Node.INPUT_ID);
1307:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1308:       assertEquals(30, Node.VAR_ARGS_NAME);
1309:       assertEquals(57, Node.LAST_PROP);
1310:       assertEquals(2, Node.POST_FLAG);
1311:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1312:       assertEquals(47, Node.IS_DISPATCHER);
1313:       
1314:       boolean boolean6 = node2.isScript();
1315:       assertNotSame(node2, node0);
1316:       assertFalse(boolean6);
1317:       assertFalse(node2.hasChildren());
1318:       assertFalse(node2.isDec());
1319:       assertEquals((-1), node2.getSourcePosition());
1320:       assertFalse(node2.isAssign());
1321:       assertFalse(node2.isLabelName());
1322:       assertFalse(node2.isTypeOf());
1323:       assertFalse(node2.isNumber());
1324:       assertFalse(node2.isLabel());
1325:       assertFalse(node2.isReturn());
1326:       assertFalse(node2.hasOneChild());
1327:       assertFalse(node2.isOr());
1328:       assertFalse(node2.isAssignAdd());
1329:       assertFalse(node2.isScript());
1330:       assertFalse(node2.isDo());
1331:       assertFalse(node2.isNot());
1332:       assertFalse(node2.isAnd());
1333:       assertFalse(node2.isContinue());
1334:       assertFalse(node2.isCast());
1335:       assertFalse(node2.isBreak());
1336:       assertFalse(node2.isName());
1337:       assertFalse(node2.isComma());
1338:       assertFalse(node2.isVar());
1339:       assertFalse(node2.isNull());
1340:       assertFalse(node2.isObjectLit());
1341:       assertFalse(node2.isGetProp());
1342:       assertFalse(node2.isNew());
1343:       assertFalse(node2.isAdd());
1344:       assertFalse(node2.isWhile());
1345:       assertFalse(node2.isTrue());
1346:       assertFalse(node2.isVoid());
1347:       assertFalse(node2.isCall());
1348:       assertFalse(node2.isGetElem());
1349:       assertFalse(node2.isExprResult());
1350:       assertFalse(node2.isIf());
1351:       assertFalse(node2.isDelProp());
1352:       assertFalse(node2.isGetterDef());
1353:       assertFalse(node2.isNE());
1354:       assertFalse(node2.isFor());
1355:       assertFalse(node2.isIn());
1356:       assertFalse(node2.isTry());
1357:       assertFalse(node2.isCase());
1358:       assertFalse(node2.isEmpty());
1359:       assertFalse(node2.isDefaultCase());
1360:       assertFalse(node2.isSwitch());
1361:       assertFalse(node2.isFunction());
1362:       assertEquals((-1), node2.getCharno());
1363:       assertFalse(node2.isDebugger());
1364:       assertEquals(40, node2.getType());
1365:       assertEquals(0, node2.getChildCount());
1366:       assertFalse(node2.isArrayLit());
1367:       assertFalse(node2.isFalse());
1368:       assertFalse(node2.isThrow());
1369:       assertFalse(node2.isStringKey());
1370:       assertFalse(node2.isParamList());
1371:       assertFalse(node2.isThis());
1372:       assertFalse(node2.isHook());
1373:       assertTrue(node2.isString());
1374:       assertFalse(node2.isSetterDef());
1375:       assertFalse(node2.isInc());
1376:       assertFalse(node2.isWith());
1377:       assertFalse(node2.isRegExp());
1378:       assertFalse(node2.isBlock());
1379:       assertFalse(node2.isInstanceOf());
1380:       assertEquals((-1), node2.getLineno());
1381:       assertFalse(node2.hasMoreThanOneChild());
1382:       assertFalse(node2.isCatch());
1383:       assertFalse(node2.equals((Object)node0));
1384:       assertFalse(node2.equals((Object)node1));
1385:       assertTrue(boolean6 == boolean3);
1386:       assertTrue(boolean6 == boolean1);
1387:       assertTrue(boolean6 == boolean4);
1388:       assertTrue(boolean6 == boolean5);
1389:       assertTrue(boolean6 == boolean0);
1390:       assertTrue(boolean6 == boolean2);
1391:       assertEquals(36, Node.QUOTED_PROP);
1392:       assertEquals(55, Node.INFERRED_FUNCTION);
1393:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1394:       assertEquals(4095, Node.COLUMN_MASK);
1395:       assertEquals(53, Node.INPUT_ID);
1396:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1397:       assertEquals(50, Node.FREE_CALL);
1398:       assertEquals(47, Node.IS_DISPATCHER);
1399:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1400:       assertEquals(40, Node.ORIGINALNAME_PROP);
1401:       assertEquals(2, Node.POST_FLAG);
1402:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1403:       assertEquals(46, Node.IS_NAMESPACE);
1404:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1405:       assertEquals(54, Node.SLASH_V);
1406:       assertEquals(43, Node.IS_CONSTANT_NAME);
1407:       assertEquals(30, Node.VAR_ARGS_NAME);
1408:       assertEquals(49, Node.DIRECT_EVAL);
1409:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1410:       assertEquals(1, Node.DECR_FLAG);
1411:       assertEquals(32, Node.INCRDECR_PROP);
1412:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1413:       assertEquals(12, Node.COLUMN_BITS);
1414:       assertEquals(57, Node.LAST_PROP);
1415:       assertEquals(29, Node.JSDOC_INFO_PROP);
1416:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1417:       assertEquals(8, Node.FLAG_NO_THROWS);
1418:       assertEquals(39, Node.EMPTY_BLOCK);
1419:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1420:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1421:       assertEquals(52, Node.LENGTH);
1422:       assertEquals(57, Node.REFLECTED_OBJECT);
1423:       assertEquals(37, Node.OPT_ARG_NAME);
1424:       assertEquals(48, Node.DIRECTIVES);
1425:       assertEquals(56, Node.CHANGE_TIME);
1426:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1427:   }
1428: }
RegularFileObject[/tmp/EvoSuite_143_1628255634232/com/google/javascript/rhino/Node_143_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:13:54 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_143_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_143_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.Maps$KeySet",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.common.collect.ImmutableList$SerializedForm",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_143_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.Token",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.JSDocInfo",
269:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
270:       "com.google.common.collect.Sets",
271:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
272:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
273:       "com.google.javascript.rhino.jstype.JSType$1",
274:       "com.google.javascript.rhino.jstype.JSType",
275:       "com.google.javascript.rhino.SimpleErrorReporter",
276:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
277:       "com.google.common.base.Joiner",
278:       "com.google.common.base.Joiner$1",
279:       "com.google.common.collect.Collections2",
280:       "com.google.common.base.Joiner$MapJoiner",
281:       "com.google.common.collect.Maps",
282:       "com.google.common.collect.AbstractMultimap",
283:       "com.google.common.collect.AbstractMapBasedMultimap",
284:       "com.google.common.collect.AbstractSetMultimap",
285:       "com.google.common.collect.LinkedHashMultimap",
286:       "com.google.common.collect.AbstractMapEntry",
287:       "com.google.common.collect.ImmutableEntry",
288:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
289:       "com.google.common.collect.AbstractListMultimap",
290:       "com.google.common.collect.ArrayListMultimap",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
292:       "com.google.common.collect.ImmutableCollection",
293:       "com.google.common.collect.RegularImmutableList",
294:       "com.google.common.collect.ObjectArrays",
295:       "com.google.common.collect.ImmutableList",
296:       "com.google.javascript.rhino.jstype.ModificationVisitor",
297:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
298:       "com.google.common.collect.ImmutableCollection$Builder",
299:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
300:       "com.google.common.collect.ImmutableList$Builder",
301:       "com.google.common.collect.UnmodifiableIterator",
302:       "com.google.common.collect.UnmodifiableListIterator",
303:       "com.google.common.collect.Iterators$1",
304:       "com.google.common.collect.Iterators$2",
305:       "com.google.common.collect.Iterators",
306:       "com.google.javascript.rhino.jstype.ObjectType",
307:       "com.google.javascript.rhino.jstype.ProxyObjectType",
308:       "com.google.javascript.rhino.jstype.TemplateType",
309:       "com.google.javascript.rhino.jstype.ValueType",
310:       "com.google.javascript.rhino.jstype.BooleanType",
311:       "com.google.javascript.rhino.jstype.NullType",
312:       "com.google.javascript.rhino.jstype.NumberType",
313:       "com.google.javascript.rhino.jstype.StringType",
314:       "com.google.javascript.rhino.jstype.UnknownType",
315:       "com.google.javascript.rhino.jstype.VoidType",
316:       "com.google.javascript.rhino.jstype.AllType",
317:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
318:       "com.google.common.collect.ImmutableMap",
319:       "com.google.common.collect.ImmutableBiMap",
320:       "com.google.common.collect.EmptyImmutableBiMap",
321:       "com.google.javascript.rhino.jstype.PropertyMap$1",
322:       "com.google.javascript.rhino.jstype.PropertyMap",
323:       "com.google.javascript.rhino.jstype.FunctionType",
324:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
325:       "com.google.javascript.rhino.jstype.ArrowType",
326:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
327:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
328:       "com.google.javascript.rhino.jstype.InstanceObjectType",
329:       "com.google.javascript.rhino.jstype.Property",
330:       "com.google.common.collect.Lists",
331:       "com.google.javascript.rhino.jstype.NoObjectType",
332:       "com.google.javascript.rhino.jstype.NoType",
333:       "com.google.javascript.rhino.jstype.NoResolvedType",
334:       "com.google.common.collect.SingletonImmutableList",
335:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
336:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
337:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
338:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
339:       "com.google.javascript.rhino.jstype.UnionType",
340:       "com.google.javascript.rhino.jstype.FunctionBuilder",
341:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
342:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
343:       "com.google.javascript.rhino.jstype.EnumType",
344:       "com.google.javascript.rhino.jstype.EnumElementType",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.base.Objects",
347:       "com.google.javascript.rhino.InputId",
348:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
349:       "com.google.javascript.rhino.JSDocInfo$Visibility",
350:       "com.google.common.collect.Iterables",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2",
359:       "com.google.javascript.rhino.jstype.JSType$TypePair",
360:       "com.google.common.collect.AbstractIndexedListIterator",
361:       "com.google.common.collect.Iterators$11",
362:       "com.google.javascript.rhino.JSTypeExpression",
363:       "com.google.javascript.rhino.jstype.TemplatizedType",
364:       "com.google.common.collect.ImmutableSet",
365:       "com.google.common.collect.EmptyImmutableSet",
366:       "com.google.javascript.rhino.jstype.NamedType",
367:       "com.google.common.collect.Iterators$12",
368:       "com.google.common.collect.Sets$ImprovedAbstractSet",
369:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
370:       "com.google.common.collect.Hashing",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
372:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
374:       "com.google.common.collect.ImmutableList$1"
375:     );
376:   }
377: }

[MASTER] 13:13:54.477 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(4669, "");
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertEquals(4669, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(node0);

boolean boolean0 = node0.isComma();
assertFalse(boolean0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertEquals(4669, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean1 = node0.isStringKey();
assertFalse(boolean1);
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertEquals(4669, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertTrue(boolean1 == boolean0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

Node node1 = Node.newNumber((double) 15, 31, 37);
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertEquals(37, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isLabelName());
assertEquals(31, node1.getLineno());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertEquals(39, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertEquals(127013, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotNull(node1);

node0.setWasEmptyNode(false);
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertEquals(4669, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.equals((Object)node1));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean2 = node1.isCall();
assertFalse(boolean2);
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertEquals(37, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isLabelName());
assertEquals(31, node1.getLineno());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertEquals(39, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertEquals(127013, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

StringWriter stringWriter0 = new StringWriter(4669);
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

node1.appendStringTree(stringWriter0);
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertEquals(37, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isLabelName());
assertEquals(31, node1.getLineno());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertEquals(39, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertEquals(127013, node1.getSourcePosition());
assertFalse(node1.isIn());
assertEquals("NUMBER 15.0 31\n", stringWriter0.toString());
assertFalse(node1.equals((Object)node0));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

boolean boolean3 = node1.hasChildren();
assertFalse(boolean3);
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertEquals(37, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isLabelName());
assertEquals(31, node1.getLineno());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertEquals(39, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertEquals(127013, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertEquals(37, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isLabelName());
assertEquals(31, node1.getLineno());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertEquals(39, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertEquals(127013, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertFalse(iterable0.contains(node0));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotNull(iterable0);

Node node2 = Node.newString("Object#Key");
assertNotSame(node2, node0);
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isScript());
assertFalse(node2.isDo());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isComma());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isIn());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertTrue(node2.isString());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertNotNull(node2);

boolean boolean4 = node1.hasChildren();
assertFalse(boolean4);
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertEquals(37, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isLabelName());
assertEquals(31, node1.getLineno());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertEquals(39, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertEquals(127013, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

boolean boolean5 = node0.isQualifiedName();
assertNotSame(node0, node2);
assertFalse(boolean5);
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertEquals(4669, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean6 = node2.isScript();
assertNotSame(node2, node0);
assertFalse(boolean6);
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isScript());
assertFalse(node2.isDo());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isComma());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isIn());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertTrue(node2.isString());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean2);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);


* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-100/tests/9
* Done!

* Computation finished
