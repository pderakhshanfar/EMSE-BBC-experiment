* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 12357
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1451161186
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 13:07:38.592 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 13:07:56.719 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 13:13:37.323 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 207,0,0| Number of FF evals: 238
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 42,0,0| Number of FF evals: 63
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 207,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 207,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 12610,11587,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 207,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 207,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 207,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 1418,618,0| Number of FF evals: 2540
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 4733,0,0| Number of FF evals: 1343
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 1311,1169,31| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - true: 42,0,0| Number of FF evals: 263
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 1430,1228,132| Number of FF evals: 11926
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 147,0,0| Number of FF evals: 222
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 4125,2456,11| Number of FF evals: 3285
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 147,0,0| Number of FF evals: 222
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 207,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 147,0,0| Number of FF evals: 222
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 207,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 6090,1089,0| Number of FF evals: 1768
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 147,0,0| Number of FF evals: 222
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 4157,3764,0| Number of FF evals: 10523
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 1280,0,0| Number of FF evals: 894
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 1186,29,0| Number of FF evals: 1440
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 1294,0,0| Number of FF evals: 1269
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 147,0,0| Number of FF evals: 222
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 49521,44247,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 124,0,0| Number of FF evals: 607
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 618,0,0| Number of FF evals: 579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 7289,4351,0| Number of FF evals: 6971
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 50,0,0| Number of FF evals: 486
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 1419,0,0| Number of FF evals: 759
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 9893,9078,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 1909,0,0| Number of FF evals: 1037
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 5093,0,0| Number of FF evals: 1784
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 42,0,0| Number of FF evals: 615
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 2453,1997,313| Number of FF evals: 10851
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 4026,0,0| Number of FF evals: 1135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 7193,6916,0| Number of FF evals: 9167
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 1599,0,0| Number of FF evals: 861
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 1625,0,0| Number of FF evals: 947
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 138,0,0| Number of FF evals: 285
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 8666,7849,11| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 895,758,1| Number of FF evals: 10429
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 208,0,0| Number of FF evals: 582
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 100,0,0| Number of FF evals: 658
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 615,338,0| Number of FF evals: 2583
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 121,0,0| Number of FF evals: 284
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 2081,1882,278| Number of FF evals: 11587
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 1419,0,0| Number of FF evals: 823
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 1716,0,0| Number of FF evals: 606
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 845,0,0| Number of FF evals: 542
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 1748,0,0| Number of FF evals: 1022
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 1863,0,0| Number of FF evals: 873
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 10976,9092,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 1137,0,0| Number of FF evals: 486
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1168: 3350,0,0| Number of FF evals: 1001
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 5711,449,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1169: 3350,0,0| Number of FF evals: 1001
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 6959,6084,158| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 115,0,0| Number of FF evals: 528
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 1835,221,0| Number of FF evals: 1595
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 863,0,0| Number of FF evals: 765
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 2345,301,0| Number of FF evals: 6157
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 387,206,64| Number of FF evals: 5094
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 1090,952,47| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 207,0,0| Number of FF evals: 148
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 5093,0,0| Number of FF evals: 1381
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1164: 3350,0,0| Number of FF evals: 1001
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 6559,4954,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1165: 3350,0,0| Number of FF evals: 1001
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 2963,1651,0| Number of FF evals: 4409
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 2182,1969,231| Number of FF evals: 11926
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - false: 504,0,0| Number of FF evals: 846
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 438,0,0| Number of FF evals: 1178
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 49521,44247,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: root-Branch: 618,0,0| Number of FF evals: 394
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 49521,44247,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 18,0,0| Number of FF evals: 309
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 1835,166,0| Number of FF evals: 1593
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 1996,382,0| Number of FF evals: 1703
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 1582,1426,69| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 2847,922,0| Number of FF evals: 4222
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 2828,903,0| Number of FF evals: 4082
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 121,0,0| Number of FF evals: 168
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 2844,2576,0| Number of FF evals: 11695
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 15244,14412,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 1835,221,0| Number of FF evals: 1579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 243,0,0| Number of FF evals: 191
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 302,0,0| Number of FF evals: 554
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - false: 42,0,0| Number of FF evals: 1090
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 14569,12658,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 2,0,0| Number of FF evals: 71
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 2,0,0| Number of FF evals: 71
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 399,0,0| Number of FF evals: 222
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 2,0,0| Number of FF evals: 71
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 418,0,0| Number of FF evals: 452
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 121,0,0| Number of FF evals: 217
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 815,602,64| Number of FF evals: 4775
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 512,0,0| Number of FF evals: 539
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 5877,5125,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 418,0,0| Number of FF evals: 452
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 49521,44247,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 4739,4328,37| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 10104,9833,0| Number of FF evals: 11926
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - false: 42,0,0| Number of FF evals: 361
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 72,0,0| Number of FF evals: 583
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 7851,5912,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 6606,4558,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 49521,44247,36059| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 49521,44428,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 108,0,0| Number of FF evals: 662
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 49521,44247,36009| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 1065,928,1| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 1863,0,0| Number of FF evals: 895
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 1165,1034,84| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 1126,764,0| Number of FF evals: 3658
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: root-Branch: 302,0,0| Number of FF evals: 636
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 51,0,0| Number of FF evals: 524
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 1174,1032,42| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 753,0,0| Number of FF evals: 835
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 7259,5099,0| Number of FF evals: 5068
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 1137,0,0| Number of FF evals: 1038
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 2019,0,0| Number of FF evals: 657
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 65,0,0| Number of FF evals: 427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 402,0,0| Number of FF evals: 779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 10735,10336,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 7611,6709,0| Number of FF evals: 11530
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 49521,44247,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 49521,44247,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 207,0,0| Number of FF evals: 420
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - true: 2,0,0| Number of FF evals: 331
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 5078,1716,0| Number of FF evals: 2531
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 207,0,0| Number of FF evals: 148
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 11631,10212,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 42,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 1165,1034,84| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 399,0,0| Number of FF evals: 209
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 137,0,0| Number of FF evals: 1140
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 1089,952,47| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 42,0,0| Number of FF evals: 50
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 28,0,0| Number of FF evals: 338
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 316,0,0| Number of FF evals: 845
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 2692,2432,774| Number of FF evals: 11926
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 49521,44247,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 1479,1205,27| Number of FF evals: 11926
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 615,338,0| Number of FF evals: 2583
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 49521,44247,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 1172,325,0| Number of FF evals: 2402
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 49521,44247,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 3461,3105,202| Number of FF evals: 11926
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 596,0,0| Number of FF evals: 877
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 504,0,0| Number of FF evals: 252
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 49521,44428,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 49521,44428,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 13,0,0| Number of FF evals: 264
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 740,0,0| Number of FF evals: 325
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 25,0,0| Number of FF evals: 321
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 123,0,0| Number of FF evals: 532
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 3020,0,0| Number of FF evals: 936
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 42,0,0| Number of FF evals: 59
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 42,0,0| Number of FF evals: 59
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 1842,0,0| Number of FF evals: 912
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 399,0,0| Number of FF evals: 525
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 23749,22645,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 302,0,0| Number of FF evals: 194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 763,623,1| Number of FF evals: 8602
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 512,0,0| Number of FF evals: 590
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 3482,1081,0| Number of FF evals: 10720
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getCharno()I: Line 1144: 2180,0,0| Number of FF evals: 704
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 998,0,0| Number of FF evals: 554
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 42,0,0| Number of FF evals: 58
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 357,0,0| Number of FF evals: 520
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 262,0,0| Number of FF evals: 432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 42,0,0| Number of FF evals: 50
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 4026,0,0| Number of FF evals: 1425
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 430,0,0| Number of FF evals: 540
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 6055,1828,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 1014,0,0| Number of FF evals: 1153
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 3470,2914,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 49521,44428,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 418,0,0| Number of FF evals: 479
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 418,0,0| Number of FF evals: 532
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 49521,44428,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 510,0,0| Number of FF evals: 591
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: root-Branch: 504,0,0| Number of FF evals: 500
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 998,0,0| Number of FF evals: 474
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 49521,44428,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 740,0,0| Number of FF evals: 582
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 4372,0,0| Number of FF evals: 1583
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 207,0,0| Number of FF evals: 698
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - true: 504,0,0| Number of FF evals: 846
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 49521,44247,35979| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 49521,44428,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 5931,4831,0| Number of FF evals: 7891
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 42,0,0| Number of FF evals: 75
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 10577,9773,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 10748,10397,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 207,0,0| Number of FF evals: 466
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 504,0,0| Number of FF evals: 451
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 50,0,0| Number of FF evals: 460
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 5931,4831,0| Number of FF evals: 7891
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 1495,1146,0| Number of FF evals: 5141
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 207,0,0| Number of FF evals: 160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 2020,1397,0| Number of FF evals: 8026
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 207,0,0| Number of FF evals: 160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 302,0,0| Number of FF evals: 459
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 207,0,0| Number of FF evals: 160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1200,1068,17| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 49521,44428,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 16,0,0| Number of FF evals: 107
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 1137,0,0| Number of FF evals: 471
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 92,0,0| Number of FF evals: 193
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 618,0,0| Number of FF evals: 573
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 49521,44428,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 184,0,0| Number of FF evals: 438
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 1137,0,0| Number of FF evals: 603
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 2850,0,0| Number of FF evals: 882
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 49521,44428,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 8655,7853,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 863,0,0| Number of FF evals: 359
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 998,0,0| Number of FF evals: 436
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 3891,3422,0| Number of FF evals: 5304
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 8087,6521,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 302,0,0| Number of FF evals: 193
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 6289,4943,0| Number of FF evals: 6028
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 302,0,0| Number of FF evals: 193
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 196,0,0| Number of FF evals: 475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 1137,0,0| Number of FF evals: 580
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 49521,44428,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 1489,0,0| Number of FF evals: 951
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 42,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 1080,927,1| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 42,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 121,0,0| Number of FF evals: 212
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 1147,1013,1| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 4908,0,0| Number of FF evals: 1351
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 483,0,0| Number of FF evals: 1104
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 398,0,0| Number of FF evals: 477
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 1325,1188,79| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 4813,4169,0| Number of FF evals: 11926
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 373,0,0| Number of FF evals: 613
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 343,162,43| Number of FF evals: 4043
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 49521,44428,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 1543,899,0| Number of FF evals: 3068
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 863,0,0| Number of FF evals: 358
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 460: 47,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 461: 47,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 462: 47,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 2800,2421,0| Number of FF evals: 11625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 14481,9687,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 4904,4339,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 12847,10479,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1895: 302,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 2800,2421,0| Number of FF evals: 11625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1894: 302,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: Line 2166: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 49521,44428,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 1479,1205,27| Number of FF evals: 11926
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 302,0,0| Number of FF evals: 516
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 42,0,0| Number of FF evals: 50
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 1276,459,0| Number of FF evals: 2150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 6643,5038,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - false: 42,0,0| Number of FF evals: 281
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 3216,2630,0| Number of FF evals: 9946
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1791: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 42,0,0| Number of FF evals: 50
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1792: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: Line 2403: 42,0,0| Number of FF evals: 50
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 1479,1205,27| Number of FF evals: 11926
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 127,0,0| Number of FF evals: 301
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1099: 618,0,0| Number of FF evals: 313
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 3331,1366,0| Number of FF evals: 4241
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1797: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 1419,0,0| Number of FF evals: 546
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 112,0,0| Number of FF evals: 341
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 1419,0,0| Number of FF evals: 546
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 50,0,0| Number of FF evals: 295
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1752: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 50,0,0| Number of FF evals: 295
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 49521,44428,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 1419,0,0| Number of FF evals: 546
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 20897,18429,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 504,0,0| Number of FF evals: 288
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1747: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 1419,0,0| Number of FF evals: 546
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1100: 618,0,0| Number of FF evals: 313
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 121,0,0| Number of FF evals: 437
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 1419,0,0| Number of FF evals: 546
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 1419,0,0| Number of FF evals: 546
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1743: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 4026,0,0| Number of FF evals: 1278
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 986,849,77| Number of FF evals: 8558
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 3194,2828,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 3114,2576,0| Number of FF evals: 11530
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 50,0,0| Number of FF evals: 295
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - false: 504,0,0| Number of FF evals: 846
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 3439,1654,0| Number of FF evals: 6006
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 50,0,0| Number of FF evals: 295
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 50,0,0| Number of FF evals: 295
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 302,0,0| Number of FF evals: 191
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 50,0,0| Number of FF evals: 295
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 3439,1654,0| Number of FF evals: 6006
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 49521,44247,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 3439,1654,0| Number of FF evals: 6006
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 18315,13222,0| Number of FF evals: 8016
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 3439,1654,0| Number of FF evals: 6006
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 1361,801,0| Number of FF evals: 2488
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 1090,958,10| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 343,162,43| Number of FF evals: 4044
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 8262,3169,0| Number of FF evals: 2251
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 1274,1136,66| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 3573,3106,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 4733,0,0| Number of FF evals: 1294
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLocalResultCall()Z: Line 2156: 998,0,0| Number of FF evals: 436
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 6965,6184,0| Number of FF evals: 11928
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 998,0,0| Number of FF evals: 436
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 17048,15127,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 1817,1616,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 9092,7456,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 399,0,0| Number of FF evals: 613
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: Line 1616: 504,0,0| Number of FF evals: 240
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 42,0,0| Number of FF evals: 279
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 1093,0,0| Number of FF evals: 904
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 1716,0,0| Number of FF evals: 653
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 863,0,0| Number of FF evals: 454
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: Line 546: 302,0,0| Number of FF evals: 182
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 121,0,0| Number of FF evals: 107
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 92,0,0| Number of FF evals: 1027
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 997,622,0| Number of FF evals: 4870
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 49521,44428,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 7580,3668,2805| Number of FF evals: 2653
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 207,0,0| Number of FF evals: 475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 1419,0,0| Number of FF evals: 539
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 345,0,0| Number of FF evals: 313
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 17606,15419,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 998,0,0| Number of FF evals: 418
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 1311,756,0| Number of FF evals: 7922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 11632,8058,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 2489,0,0| Number of FF evals: 1333
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 943,0,0| Number of FF evals: 672
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 3350,0,0| Number of FF evals: 1271
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 18,0,0| Number of FF evals: 310
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 53,0,0| Number of FF evals: 696
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 998,0,0| Number of FF evals: 409
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 2850,0,0| Number of FF evals: 1200
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 504,0,0| Number of FF evals: 241
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 13848,12561,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 1043,292,0| Number of FF evals: 5344
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 491,0,0| Number of FF evals: 1075
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: Line 2351: 121,0,0| Number of FF evals: 99
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 42,0,0| Number of FF evals: 669
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 3653,0,0| Number of FF evals: 1341
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 188,0,0| Number of FF evals: 1203
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 6778,5899,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 4161,3961,590| Number of FF evals: 11734
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - false: 207,0,0| Number of FF evals: 365
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 13140,9730,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 5139,4235,0| Number of FF evals: 7891
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 167,0,0| Number of FF evals: 593
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 3270,2901,0| Number of FF evals: 9130
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 1137,0,0| Number of FF evals: 477
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 29,0,0| Number of FF evals: 188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 10456,9386,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 2180,0,0| Number of FF evals: 914
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 725,326,0| Number of FF evals: 5049
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 42,0,0| Number of FF evals: 531
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - false: 74,0,0| Number of FF evals: 1097
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 42,0,0| Number of FF evals: 75
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 49521,44247,36008| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 885,0,0| Number of FF evals: 904
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;)V: I9 Branch 284 IF_ACMPNE L194 - false: 213,0,0| Number of FF evals: 306
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 262,0,0| Number of FF evals: 431
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 302,0,0| Number of FF evals: 349
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 8761,7916,78| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 59,0,0| Number of FF evals: 443
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 547,0,0| Number of FF evals: 1429
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 2544,2069,272| Number of FF evals: 11828
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 225,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 69,0,0| Number of FF evals: 318
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 2403,1928,272| Number of FF evals: 10753
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 618,0,0| Number of FF evals: 313
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 3318,1876,0| Number of FF evals: 3306
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 743,543,64| Number of FF evals: 4583
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 399,0,0| Number of FF evals: 196
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 399,0,0| Number of FF evals: 322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 262,0,0| Number of FF evals: 431
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 998,0,0| Number of FF evals: 588
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 262,0,0| Number of FF evals: 431
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 262,0,0| Number of FF evals: 431
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 1718,1511,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 504,0,0| Number of FF evals: 241
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 58,0,0| Number of FF evals: 503
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 262,0,0| Number of FF evals: 431
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 17521,15351,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 262,0,0| Number of FF evals: 431
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 262,0,0| Number of FF evals: 431
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 520,0,0| Number of FF evals: 1153
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 618,0,0| Number of FF evals: 311
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 101,0,0| Number of FF evals: 445
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 4372,0,0| Number of FF evals: 1215
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 4690,4199,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 4690,4199,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 50,0,0| Number of FF evals: 486
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 207,0,0| Number of FF evals: 146
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 5329,4742,4| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 42,0,0| Number of FF evals: 287
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: root-Branch: 302,0,0| Number of FF evals: 464
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 800,0,0| Number of FF evals: 826
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - false: 42,0,0| Number of FF evals: 285
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 262,0,0| Number of FF evals: 436
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 49521,44247,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 430,0,0| Number of FF evals: 1028
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 7159,6177,0| Number of FF evals: 11926
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 49521,44247,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 518,316,4| Number of FF evals: 3533
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 3020,0,0| Number of FF evals: 1166
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 2466,0,0| Number of FF evals: 1339
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getCharno()I: root-Branch: 2180,0,0| Number of FF evals: 1154
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 998,0,0| Number of FF evals: 471
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 60,0,0| Number of FF evals: 505
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 1354,1152,81| Number of FF evals: 11926
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 42,0,0| Number of FF evals: 201
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 11384,7351,0| Number of FF evals: 7123
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 4026,0,0| Number of FF evals: 1157
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 4026,0,0| Number of FF evals: 1157
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 252,0,0| Number of FF evals: 452
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 399,0,0| Number of FF evals: 273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 1137,0,0| Number of FF evals: 455
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 207,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 4483,2872,0| Number of FF evals: 3288
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 2019,0,0| Number of FF evals: 1023
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 207,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 2899,2520,0| Number of FF evals: 11625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 389,0,0| Number of FF evals: 501
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 72,0,0| Number of FF evals: 613
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 151,0,0| Number of FF evals: 202
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 2899,2520,0| Number of FF evals: 11625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 1093,0,0| Number of FF evals: 888
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 1828,410,0| Number of FF evals: 6166
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 1093,0,0| Number of FF evals: 888
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 863,0,0| Number of FF evals: 392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 1201,404,0| Number of FF evals: 2041
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 254,0,0| Number of FF evals: 439
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 189,0,0| Number of FF evals: 410
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 207,0,0| Number of FF evals: 184
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I70 Branch 122 IF_ICMPNE L966 - true: 39,0,0| Number of FF evals: 717
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 8716,7889,36| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - true: 74,0,0| Number of FF evals: 1097
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 46,0,0| Number of FF evals: 196
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 8865,5551,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 605,0,0| Number of FF evals: 1093
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 13,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 399,0,0| Number of FF evals: 222
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: Line 2124: 504,0,0| Number of FF evals: 252
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 102,0,0| Number of FF evals: 554
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 620,578,92| Number of FF evals: 8100
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 2800,2421,0| Number of FF evals: 11625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 147,0,0| Number of FF evals: 333
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 3607,122,0| Number of FF evals: 1567
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 302,0,0| Number of FF evals: 465
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 11499,9840,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 348,0,0| Number of FF evals: 307
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 863,0,0| Number of FF evals: 397
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 28876,27262,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 121,0,0| Number of FF evals: 87
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 1835,221,0| Number of FF evals: 1575
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 117,0,0| Number of FF evals: 1216
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 2639,2164,272| Number of FF evals: 11828
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 1817,1616,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 740,0,0| Number of FF evals: 351
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 302,0,0| Number of FF evals: 193
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 6809,5955,29| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 518,316,4| Number of FF evals: 3533
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 1137,0,0| Number of FF evals: 844
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 7655,5924,0| Number of FF evals: 9144
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 12988,10146,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - false: 15,0,0| Number of FF evals: 169
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 998,0,0| Number of FF evals: 984
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 2180,0,0| Number of FF evals: 703
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 1419,0,0| Number of FF evals: 534
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 570,353,0| Number of FF evals: 3644
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 57,0,0| Number of FF evals: 423
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 456,0,0| Number of FF evals: 453
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 3896,2646,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1128: 42,0,0| Number of FF evals: 66
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1127: 42,0,0| Number of FF evals: 66
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 370,0,0| Number of FF evals: 950
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 1368,908,15| Number of FF evals: 5003
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 2,0,0| Number of FF evals: 281
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 743,606,31| Number of FF evals: 6356
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 1137,0,0| Number of FF evals: 475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 6643,5038,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 1425,1278,75| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 1987,1789,227| Number of FF evals: 11587
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 1137,0,0| Number of FF evals: 475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 121,0,0| Number of FF evals: 86
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 1137,0,0| Number of FF evals: 475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 1137,0,0| Number of FF evals: 475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 6643,5038,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 1137,0,0| Number of FF evals: 475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 53,0,0| Number of FF evals: 453
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 1137,0,0| Number of FF evals: 475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 16,0,0| Number of FF evals: 97
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 511,0,0| Number of FF evals: 1100
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 1835,221,0| Number of FF evals: 1525
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 201,0,0| Number of FF evals: 456
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 1137,0,0| Number of FF evals: 441
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 1303,1169,2| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 1835,221,0| Number of FF evals: 1525
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 8262,3169,0| Number of FF evals: 2053
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 1835,221,0| Number of FF evals: 1525
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 1835,221,0| Number of FF evals: 1525
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 6616,1500,0| Number of FF evals: 4623
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 325,0,0| Number of FF evals: 412
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 1835,221,0| Number of FF evals: 1525
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 1835,221,0| Number of FF evals: 1525
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 345,0,0| Number of FF evals: 313
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 1835,221,0| Number of FF evals: 1525
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 4908,0,0| Number of FF evals: 1454
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 1835,221,0| Number of FF evals: 1525
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 1835,221,0| Number of FF evals: 1525
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 11063,10180,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 207,0,0| Number of FF evals: 184
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 121,0,0| Number of FF evals: 88
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 1835,221,0| Number of FF evals: 1525
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 356,0,0| Number of FF evals: 321
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 1835,221,0| Number of FF evals: 1525
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 5544,4926,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 5544,4926,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 7280,6558,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 49521,44428,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 7398,6674,116| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 998,0,0| Number of FF evals: 436
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - false: 42,0,0| Number of FF evals: 381
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 1535,923,0| Number of FF evals: 3064
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 1863,0,0| Number of FF evals: 902
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 5952,5302,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 16431,15385,608| Number of FF evals: 11931
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 863,0,0| Number of FF evals: 375
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 42,0,0| Number of FF evals: 858
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 504,0,0| Number of FF evals: 270
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 3624,3273,719| Number of FF evals: 11926
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 49521,44247,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 42,0,0| Number of FF evals: 433
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 171,0,0| Number of FF evals: 531
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 8488,7992,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 11420,9901,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 3786,2529,0| Number of FF evals: 4550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 804,603,0| Number of FF evals: 7594
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 504,0,0| Number of FF evals: 252
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 504,0,0| Number of FF evals: 252
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 4465,2680,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 186,0,0| Number of FF evals: 316
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 4457,3023,0| Number of FF evals: 9754
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 42,0,0| Number of FF evals: 302
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 302,0,0| Number of FF evals: 550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 2871,2065,693| Number of FF evals: 11926
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 42,0,0| Number of FF evals: 61
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 7806,6107,0| Number of FF evals: 9661
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 40,0,0| Number of FF evals: 146
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 1424,1167,78| Number of FF evals: 10851
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 1863,0,0| Number of FF evals: 648
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 805,0,0| Number of FF evals: 1211
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 309,0,0| Number of FF evals: 746
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 147,0,0| Number of FF evals: 419
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 10875,8997,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 863,0,0| Number of FF evals: 880
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 42,0,0| Number of FF evals: 594
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 11804,10740,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;II)V: Line 450: 30,0,0| Number of FF evals: 44
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 740,0,0| Number of FF evals: 794
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;II)V: Line 449: 30,0,0| Number of FF evals: 44
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 14532,12106,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLocalResultCall()Z: root-Branch: 998,0,0| Number of FF evals: 532
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 42,0,0| Number of FF evals: 243
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 1863,0,0| Number of FF evals: 648
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 11128,9265,0| Number of FF evals: 11434
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 3439,1654,0| Number of FF evals: 6055
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 1863,0,0| Number of FF evals: 648
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 12006,11509,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 302,0,0| Number of FF evals: 184
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;II)V: Line 451: 30,0,0| Number of FF evals: 44
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 11128,9265,0| Number of FF evals: 11434
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 42,0,0| Number of FF evals: 339
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 10422,10087,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 302,0,0| Number of FF evals: 182
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 162,0,0| Number of FF evals: 524
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 171,0,0| Number of FF evals: 531
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 6501,5631,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 110,0,0| Number of FF evals: 1203
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 50,0,0| Number of FF evals: 469
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 837: 207,0,0| Number of FF evals: 160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 50,0,0| Number of FF evals: 468
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 838: 207,0,0| Number of FF evals: 160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 1419,0,0| Number of FF evals: 521
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 16524,14680,0| Number of FF evals: 11625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 49521,44247,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 1419,0,0| Number of FF evals: 521
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 121,0,0| Number of FF evals: 108
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 121,0,0| Number of FF evals: 108
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 60,0,0| Number of FF evals: 355
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 121,0,0| Number of FF evals: 108
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 121,0,0| Number of FF evals: 108
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1818: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 121,0,0| Number of FF evals: 108
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1813: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 1217,858,0| Number of FF evals: 3055
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 612,478,1| Number of FF evals: 6216
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1809: 42,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 49521,44428,0| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 769,632,31| Number of FF evals: 6778
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 16524,14680,0| Number of FF evals: 11625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 115,0,0| Number of FF evals: 361
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 3292,1540,0| Number of FF evals: 6055
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 49521,44247,36000| Number of FF evals: 11922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - false: 726,0,0| Number of FF evals: 1225
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 2845,2577,1| Number of FF evals: 11695
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 1419,0,0| Number of FF evals: 547
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 24,0,0| Number of FF evals: 180
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - false: 42,0,0| Number of FF evals: 1069
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 207,0,0| Number of FF evals: 151
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 1280,0,0| Number of FF evals: 489
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 121,0,0| Number of FF evals: 253
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 1419,0,0| Number of FF evals: 675
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 1863,0,0| Number of FF evals: 633
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 535,0,0| Number of FF evals: 455
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 4006,1996,0| Number of FF evals: 4838
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 2930,662,0| Number of FF evals: 1592
* Search finished after 605s and 284 generations, 172355 statements, best individual has fitness: 3064.0
* Minimizing test suite
[MASTER] 13:19:01.928 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 91%
* Total number of goals: 853
* Number of covered goals: 778
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 81%
* Total number of goals: 714
* Number of covered goals: 577
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 94
* Number of covered goals: 94
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 84%
* Total number of goals: 530
* Number of covered goals: 446
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 47%
* Total number of goals: 4536
* Number of covered goals: 2114
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 75%
* Total number of goals: 714
* Number of covered goals: 536
* Generated 686 tests with total length 11482
* Resulting test suite's coverage: 74% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 13:20:09.038 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6755666666666666% of time used, but only 37/686 tests minimized), falling back to using all assertions
[MASTER] 13:20:28.676 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 10%
* Compiling and checking tests
[MASTER] 13:20:40.228 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 11 seconds more than allowed.
[MASTER] 13:20:48.235 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_56_1628256048104/com/google/javascript/rhino/Node_56_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_56_1628256048104/com/google/javascript/rhino/Node_56_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:48.235 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:48.235 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:48.240 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 822
[MASTER] 13:20:48.241 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_56_1628256048104/com/google/javascript/rhino/Node_56_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:48 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.util.Iterator;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_56_tmp__ESTest extends Node_56_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1838);
22:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
23:       assertEquals(1838, node_SideEffectFlags0.valueOf());
24:       assertNotNull(node_SideEffectFlags0);
25:       
26:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
27:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
28:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
29:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
30:       assertEquals(31, node_SideEffectFlags0.valueOf());
31:       assertEquals(31, node_SideEffectFlags1.valueOf());
32:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
33:       assertNotNull(node_SideEffectFlags1);
34:       
35:       Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1838);
36:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
37:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
38:       assertEquals(1838, node_SideEffectFlags2.valueOf());
39:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
40:       assertNotNull(node_SideEffectFlags2);
41:       
42:       boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
43:       assertNotSame(node_SideEffectFlags0, node_SideEffectFlags2);
44:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
45:       assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags2));
46:       assertFalse(boolean0);
47:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
48:       assertEquals(31, node_SideEffectFlags0.valueOf());
49:       
50:       Node node0 = new Node((-2735), 1838, 4433);
51:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
52:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
53:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
54:       assertEquals(47, Node.IS_DISPATCHER);
55:       assertEquals(29, Node.JSDOC_INFO_PROP);
56:       assertEquals(53, Node.INPUT_ID);
57:       assertEquals(32, Node.INCRDECR_PROP);
58:       assertEquals(12, Node.COLUMN_BITS);
59:       assertEquals(4095, Node.COLUMN_MASK);
60:       assertEquals(55, Node.INFERRED_FUNCTION);
61:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
62:       assertEquals(8, Node.FLAG_NO_THROWS);
63:       assertEquals(56, Node.CHANGE_TIME);
64:       assertEquals(36, Node.QUOTED_PROP);
65:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
66:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
67:       assertEquals(37, Node.OPT_ARG_NAME);
68:       assertEquals(48, Node.DIRECTIVES);
69:       assertEquals(49, Node.DIRECT_EVAL);
70:       assertEquals(57, Node.REFLECTED_OBJECT);
71:       assertEquals(40, Node.ORIGINALNAME_PROP);
72:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
73:       assertEquals(52, Node.LENGTH);
74:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
75:       assertEquals(50, Node.FREE_CALL);
76:       assertEquals(15, Node.NO_SIDE_EFFECTS);
77:       assertEquals(57, Node.LAST_PROP);
78:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
79:       assertEquals(39, Node.EMPTY_BLOCK);
80:       assertEquals(1, Node.DECR_FLAG);
81:       assertEquals(51, Node.STATIC_SOURCE_FILE);
82:       assertEquals(46, Node.IS_NAMESPACE);
83:       assertEquals(2, Node.POST_FLAG);
84:       assertEquals(30, Node.VAR_ARGS_NAME);
85:       assertEquals(43, Node.IS_CONSTANT_NAME);
86:       assertEquals(54, Node.SLASH_V);
87:       assertFalse(node0.isHook());
88:       assertFalse(node0.isInc());
89:       assertEquals(4095, node0.getCharno());
90:       assertFalse(node0.isFalse());
91:       assertFalse(node0.isBreak());
92:       assertFalse(node0.isSwitch());
93:       assertFalse(node0.isGetProp());
94:       assertFalse(node0.isThis());
95:       assertFalse(node0.isComma());
96:       assertFalse(node0.isInstanceOf());
97:       assertFalse(node0.isGetterDef());
98:       assertFalse(node0.isObjectLit());
99:       assertFalse(node0.isString());
100:       assertFalse(node0.isCase());
101:       assertFalse(node0.isScript());
102:       assertFalse(node0.isFor());
103:       assertEquals(1838, node0.getLineno());
104:       assertFalse(node0.isTry());
105:       assertFalse(node0.isExprResult());
106:       assertFalse(node0.isTrue());
107:       assertFalse(node0.isLabelName());
108:       assertFalse(node0.isGetElem());
109:       assertFalse(node0.isArrayLit());
110:       assertFalse(node0.isVoid());
111:       assertFalse(node0.isDelProp());
112:       assertFalse(node0.isAssignAdd());
113:       assertFalse(node0.isOr());
114:       assertFalse(node0.isLabel());
115:       assertEquals(0, node0.getChildCount());
116:       assertFalse(node0.isDo());
117:       assertFalse(node0.isEmpty());
118:       assertFalse(node0.isVar());
119:       assertFalse(node0.isDefaultCase());
120:       assertEquals(7532543, node0.getSourcePosition());
121:       assertFalse(node0.isNew());
122:       assertFalse(node0.isBlock());
123:       assertFalse(node0.isAdd());
124:       assertFalse(node0.isStringKey());
125:       assertFalse(node0.isNull());
126:       assertFalse(node0.isCall());
127:       assertFalse(node0.isParamList());
128:       assertFalse(node0.isName());
129:       assertFalse(node0.isReturn());
130:       assertFalse(node0.isCatch());
131:       assertFalse(node0.hasMoreThanOneChild());
132:       assertFalse(node0.isDec());
133:       assertFalse(node0.isTypeOf());
134:       assertFalse(node0.isNumber());
135:       assertFalse(node0.isAssign());
136:       assertFalse(node0.isWhile());
137:       assertFalse(node0.hasChildren());
138:       assertFalse(node0.hasOneChild());
139:       assertFalse(node0.isCast());
140:       assertFalse(node0.isDebugger());
141:       assertFalse(node0.isFunction());
142:       assertFalse(node0.isRegExp());
143:       assertFalse(node0.isNot());
144:       assertFalse(node0.isWith());
145:       assertFalse(node0.isNE());
146:       assertFalse(node0.isAnd());
147:       assertFalse(node0.isIf());
148:       assertEquals((-2735), node0.getType());
149:       assertFalse(node0.isIn());
150:       assertFalse(node0.isContinue());
151:       assertFalse(node0.isThrow());
152:       assertFalse(node0.isSetterDef());
153:       assertNotNull(node0);
154:       
155:       Node node1 = new Node(77, node0, node0, node0, node0, 37, (-782));
156:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
158:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
159:       assertEquals(47, Node.IS_DISPATCHER);
160:       assertEquals(29, Node.JSDOC_INFO_PROP);
161:       assertEquals(53, Node.INPUT_ID);
162:       assertEquals(32, Node.INCRDECR_PROP);
163:       assertEquals(12, Node.COLUMN_BITS);
164:       assertEquals(4095, Node.COLUMN_MASK);
165:       assertEquals(55, Node.INFERRED_FUNCTION);
166:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
167:       assertEquals(8, Node.FLAG_NO_THROWS);
168:       assertEquals(56, Node.CHANGE_TIME);
169:       assertEquals(36, Node.QUOTED_PROP);
170:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
171:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
172:       assertEquals(37, Node.OPT_ARG_NAME);
173:       assertEquals(48, Node.DIRECTIVES);
174:       assertEquals(49, Node.DIRECT_EVAL);
175:       assertEquals(57, Node.REFLECTED_OBJECT);
176:       assertEquals(40, Node.ORIGINALNAME_PROP);
177:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
178:       assertEquals(52, Node.LENGTH);
179:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
180:       assertEquals(50, Node.FREE_CALL);
181:       assertEquals(15, Node.NO_SIDE_EFFECTS);
182:       assertEquals(57, Node.LAST_PROP);
183:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
184:       assertEquals(39, Node.EMPTY_BLOCK);
185:       assertEquals(1, Node.DECR_FLAG);
186:       assertEquals(51, Node.STATIC_SOURCE_FILE);
187:       assertEquals(46, Node.IS_NAMESPACE);
188:       assertEquals(2, Node.POST_FLAG);
189:       assertEquals(30, Node.VAR_ARGS_NAME);
190:       assertEquals(43, Node.IS_CONSTANT_NAME);
191:       assertEquals(54, Node.SLASH_V);
192:       assertEquals(51, Node.STATIC_SOURCE_FILE);
193:       assertEquals(1, Node.DECR_FLAG);
194:       assertEquals(30, Node.VAR_ARGS_NAME);
195:       assertEquals(49, Node.DIRECT_EVAL);
196:       assertEquals(32, Node.INCRDECR_PROP);
197:       assertEquals(15, Node.NO_SIDE_EFFECTS);
198:       assertEquals(37, Node.OPT_ARG_NAME);
199:       assertEquals(56, Node.CHANGE_TIME);
200:       assertEquals(57, Node.REFLECTED_OBJECT);
201:       assertEquals(46, Node.IS_NAMESPACE);
202:       assertEquals(54, Node.SLASH_V);
203:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
204:       assertEquals(50, Node.FREE_CALL);
205:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
206:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
207:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
208:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
209:       assertEquals(12, Node.COLUMN_BITS);
210:       assertEquals(55, Node.INFERRED_FUNCTION);
211:       assertEquals(4095, Node.COLUMN_MASK);
212:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
213:       assertEquals(8, Node.FLAG_NO_THROWS);
214:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
215:       assertEquals(36, Node.QUOTED_PROP);
216:       assertEquals(48, Node.DIRECTIVES);
217:       assertEquals(43, Node.IS_CONSTANT_NAME);
218:       assertEquals(40, Node.ORIGINALNAME_PROP);
219:       assertEquals(52, Node.LENGTH);
220:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
221:       assertEquals(53, Node.INPUT_ID);
222:       assertEquals(29, Node.JSDOC_INFO_PROP);
223:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
224:       assertEquals(39, Node.EMPTY_BLOCK);
225:       assertEquals(2, Node.POST_FLAG);
226:       assertEquals(57, Node.LAST_PROP);
227:       assertEquals(47, Node.IS_DISPATCHER);
228:       assertFalse(node1.equals((Object)node0));
229:       assertFalse(node0.isHook());
230:       assertFalse(node0.isInc());
231:       assertEquals(4095, node0.getCharno());
232:       assertFalse(node0.isFalse());
233:       assertFalse(node0.isBreak());
234:       assertFalse(node0.isSwitch());
235:       assertFalse(node0.isGetProp());
236:       assertFalse(node0.isThis());
237:       assertFalse(node0.isComma());
238:       assertFalse(node0.isInstanceOf());
239:       assertFalse(node0.isGetterDef());
240:       assertFalse(node0.isObjectLit());
241:       assertFalse(node0.isString());
242:       assertFalse(node0.isCase());
243:       assertFalse(node0.isScript());
244:       assertFalse(node0.isFor());
245:       assertEquals(1838, node0.getLineno());
246:       assertFalse(node0.isTry());
247:       assertFalse(node0.isExprResult());
248:       assertFalse(node0.isTrue());
249:       assertFalse(node0.isLabelName());
250:       assertFalse(node0.isGetElem());
251:       assertFalse(node0.isArrayLit());
252:       assertFalse(node0.isVoid());
253:       assertFalse(node0.isDelProp());
254:       assertFalse(node0.isAssignAdd());
255:       assertFalse(node0.isOr());
256:       assertFalse(node0.isLabel());
257:       assertEquals(0, node0.getChildCount());
258:       assertFalse(node0.isDo());
259:       assertFalse(node0.isEmpty());
260:       assertFalse(node0.isVar());
261:       assertFalse(node0.isDefaultCase());
262:       assertEquals(7532543, node0.getSourcePosition());
263:       assertFalse(node0.isNew());
264:       assertFalse(node0.isBlock());
265:       assertFalse(node0.isAdd());
266:       assertFalse(node0.isStringKey());
267:       assertFalse(node0.isNull());
268:       assertFalse(node0.isCall());
269:       assertFalse(node0.isParamList());
270:       assertFalse(node0.isName());
271:       assertFalse(node0.isReturn());
272:       assertFalse(node0.isCatch());
273:       assertFalse(node0.hasMoreThanOneChild());
274:       assertFalse(node0.isDec());
275:       assertFalse(node0.isTypeOf());
276:       assertFalse(node0.isNumber());
277:       assertFalse(node0.isAssign());
278:       assertFalse(node0.isWhile());
279:       assertFalse(node0.hasChildren());
280:       assertFalse(node0.hasOneChild());
281:       assertFalse(node0.isCast());
282:       assertFalse(node0.isDebugger());
283:       assertFalse(node0.isFunction());
284:       assertFalse(node0.isRegExp());
285:       assertFalse(node0.isNot());
286:       assertFalse(node0.isWith());
287:       assertFalse(node0.isNE());
288:       assertFalse(node0.isAnd());
289:       assertFalse(node0.isIf());
290:       assertEquals((-2735), node0.getType());
291:       assertFalse(node0.isIn());
292:       assertFalse(node0.isContinue());
293:       assertFalse(node0.isThrow());
294:       assertFalse(node0.isSetterDef());
295:       assertEquals(77, node1.getType());
296:       assertFalse(node1.isCatch());
297:       assertFalse(node1.isSetterDef());
298:       assertFalse(node1.isDefaultCase());
299:       assertFalse(node1.isRegExp());
300:       assertFalse(node1.isFunction());
301:       assertFalse(node1.isVar());
302:       assertFalse(node1.isArrayLit());
303:       assertFalse(node1.isGetterDef());
304:       assertFalse(node1.isDebugger());
305:       assertFalse(node1.isParamList());
306:       assertFalse(node1.isStringKey());
307:       assertFalse(node1.isAssignAdd());
308:       assertFalse(node1.isOr());
309:       assertFalse(node1.isDec());
310:       assertFalse(node1.isWhile());
311:       assertFalse(node1.isAssign());
312:       assertFalse(node1.isDo());
313:       assertFalse(node1.isTypeOf());
314:       assertTrue(node1.isTry());
315:       assertFalse(node1.isLabel());
316:       assertTrue(node1.hasOneChild());
317:       assertFalse(node1.isReturn());
318:       assertFalse(node1.isVoid());
319:       assertFalse(node1.isNew());
320:       assertFalse(node1.isAdd());
321:       assertFalse(node1.isEmpty());
322:       assertFalse(node1.isGetElem());
323:       assertFalse(node1.isExprResult());
324:       assertFalse(node1.isCall());
325:       assertFalse(node1.isBreak());
326:       assertFalse(node1.isDelProp());
327:       assertFalse(node1.isName());
328:       assertFalse(node1.isNull());
329:       assertFalse(node1.isTrue());
330:       assertFalse(node1.isInstanceOf());
331:       assertFalse(node1.isGetProp());
332:       assertFalse(node1.isWith());
333:       assertFalse(node1.isFalse());
334:       assertFalse(node1.isThrow());
335:       assertFalse(node1.isComma());
336:       assertFalse(node1.isHook());
337:       assertFalse(node1.isThis());
338:       assertFalse(node1.isScript());
339:       assertFalse(node1.isCast());
340:       assertEquals((-1), node1.getSourcePosition());
341:       assertFalse(node1.isString());
342:       assertFalse(node1.isNot());
343:       assertFalse(node1.isLabelName());
344:       assertFalse(node1.isSwitch());
345:       assertFalse(node1.isNumber());
346:       assertFalse(node1.isObjectLit());
347:       assertFalse(node1.isAnd());
348:       assertEquals((-1), node1.getCharno());
349:       assertFalse(node1.isIn());
350:       assertEquals(1, node1.getChildCount());
351:       assertEquals((-1), node1.getLineno());
352:       assertFalse(node1.hasMoreThanOneChild());
353:       assertFalse(node1.isContinue());
354:       assertFalse(node1.isCase());
355:       assertTrue(node1.hasChildren());
356:       assertFalse(node1.isFor());
357:       assertFalse(node1.isBlock());
358:       assertFalse(node1.isInc());
359:       assertFalse(node1.isIf());
360:       assertFalse(node1.isNE());
361:       assertNotNull(node1);
362:       
363:       Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
364:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
365:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
366:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
367:       assertEquals(47, Node.IS_DISPATCHER);
368:       assertEquals(29, Node.JSDOC_INFO_PROP);
369:       assertEquals(53, Node.INPUT_ID);
370:       assertEquals(32, Node.INCRDECR_PROP);
371:       assertEquals(12, Node.COLUMN_BITS);
372:       assertEquals(4095, Node.COLUMN_MASK);
373:       assertEquals(55, Node.INFERRED_FUNCTION);
374:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
375:       assertEquals(8, Node.FLAG_NO_THROWS);
376:       assertEquals(56, Node.CHANGE_TIME);
377:       assertEquals(36, Node.QUOTED_PROP);
378:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
379:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
380:       assertEquals(37, Node.OPT_ARG_NAME);
381:       assertEquals(48, Node.DIRECTIVES);
382:       assertEquals(49, Node.DIRECT_EVAL);
383:       assertEquals(57, Node.REFLECTED_OBJECT);
384:       assertEquals(40, Node.ORIGINALNAME_PROP);
385:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
386:       assertEquals(52, Node.LENGTH);
387:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
388:       assertEquals(50, Node.FREE_CALL);
389:       assertEquals(15, Node.NO_SIDE_EFFECTS);
390:       assertEquals(57, Node.LAST_PROP);
391:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
392:       assertEquals(39, Node.EMPTY_BLOCK);
393:       assertEquals(1, Node.DECR_FLAG);
394:       assertEquals(51, Node.STATIC_SOURCE_FILE);
395:       assertEquals(46, Node.IS_NAMESPACE);
396:       assertEquals(2, Node.POST_FLAG);
397:       assertEquals(30, Node.VAR_ARGS_NAME);
398:       assertEquals(43, Node.IS_CONSTANT_NAME);
399:       assertEquals(54, Node.SLASH_V);
400:       assertEquals(51, Node.STATIC_SOURCE_FILE);
401:       assertEquals(1, Node.DECR_FLAG);
402:       assertEquals(30, Node.VAR_ARGS_NAME);
403:       assertEquals(49, Node.DIRECT_EVAL);
404:       assertEquals(32, Node.INCRDECR_PROP);
405:       assertEquals(15, Node.NO_SIDE_EFFECTS);
406:       assertEquals(37, Node.OPT_ARG_NAME);
407:       assertEquals(56, Node.CHANGE_TIME);
408:       assertEquals(57, Node.REFLECTED_OBJECT);
409:       assertEquals(46, Node.IS_NAMESPACE);
410:       assertEquals(54, Node.SLASH_V);
411:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
412:       assertEquals(50, Node.FREE_CALL);
413:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
414:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
415:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
416:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
417:       assertEquals(12, Node.COLUMN_BITS);
418:       assertEquals(55, Node.INFERRED_FUNCTION);
419:       assertEquals(4095, Node.COLUMN_MASK);
420:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
421:       assertEquals(8, Node.FLAG_NO_THROWS);
422:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
423:       assertEquals(36, Node.QUOTED_PROP);
424:       assertEquals(48, Node.DIRECTIVES);
425:       assertEquals(43, Node.IS_CONSTANT_NAME);
426:       assertEquals(40, Node.ORIGINALNAME_PROP);
427:       assertEquals(52, Node.LENGTH);
428:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
429:       assertEquals(53, Node.INPUT_ID);
430:       assertEquals(29, Node.JSDOC_INFO_PROP);
431:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
432:       assertEquals(39, Node.EMPTY_BLOCK);
433:       assertEquals(2, Node.POST_FLAG);
434:       assertEquals(57, Node.LAST_PROP);
435:       assertEquals(47, Node.IS_DISPATCHER);
436:       assertNotSame(node0, node1);
437:       assertNotSame(node1, node0);
438:       assertFalse(node0.equals((Object)node1));
439:       assertFalse(node1.equals((Object)node0));
440:       assertFalse(node0.isHook());
441:       assertFalse(node0.isInc());
442:       assertEquals(4095, node0.getCharno());
443:       assertFalse(node0.isFalse());
444:       assertFalse(node0.isBreak());
445:       assertFalse(node0.isSwitch());
446:       assertFalse(node0.isGetProp());
447:       assertFalse(node0.isThis());
448:       assertFalse(node0.isComma());
449:       assertFalse(node0.isInstanceOf());
450:       assertFalse(node0.isGetterDef());
451:       assertFalse(node0.isObjectLit());
452:       assertFalse(node0.isString());
453:       assertFalse(node0.isCase());
454:       assertFalse(node0.isScript());
455:       assertFalse(node0.isFor());
456:       assertEquals(1838, node0.getLineno());
457:       assertFalse(node0.isTry());
458:       assertFalse(node0.isExprResult());
459:       assertFalse(node0.isTrue());
460:       assertFalse(node0.isLabelName());
461:       assertFalse(node0.isGetElem());
462:       assertFalse(node0.isArrayLit());
463:       assertFalse(node0.isVoid());
464:       assertFalse(node0.isDelProp());
465:       assertFalse(node0.isAssignAdd());
466:       assertFalse(node0.isOr());
467:       assertFalse(node0.isLabel());
468:       assertEquals(0, node0.getChildCount());
469:       assertFalse(node0.isDo());
470:       assertFalse(node0.isEmpty());
471:       assertFalse(node0.isVar());
472:       assertFalse(node0.isDefaultCase());
473:       assertEquals(7532543, node0.getSourcePosition());
474:       assertFalse(node0.isNew());
475:       assertFalse(node0.isBlock());
476:       assertFalse(node0.isAdd());
477:       assertFalse(node0.isStringKey());
478:       assertFalse(node0.isNull());
479:       assertFalse(node0.isCall());
480:       assertFalse(node0.isParamList());
481:       assertFalse(node0.isName());
482:       assertFalse(node0.isReturn());
483:       assertFalse(node0.isCatch());
484:       assertFalse(node0.hasMoreThanOneChild());
485:       assertFalse(node0.isDec());
486:       assertFalse(node0.isTypeOf());
487:       assertFalse(node0.isNumber());
488:       assertFalse(node0.isAssign());
489:       assertFalse(node0.isWhile());
490:       assertFalse(node0.hasChildren());
491:       assertFalse(node0.hasOneChild());
492:       assertFalse(node0.isCast());
493:       assertFalse(node0.isDebugger());
494:       assertFalse(node0.isFunction());
495:       assertFalse(node0.isRegExp());
496:       assertFalse(node0.isNot());
497:       assertFalse(node0.isWith());
498:       assertFalse(node0.isNE());
499:       assertFalse(node0.isAnd());
500:       assertFalse(node0.isIf());
501:       assertEquals((-2735), node0.getType());
502:       assertFalse(node0.isIn());
503:       assertFalse(node0.isContinue());
504:       assertFalse(node0.isThrow());
505:       assertFalse(node0.isSetterDef());
506:       assertEquals(77, node1.getType());
507:       assertFalse(node1.isCatch());
508:       assertFalse(node1.isSetterDef());
509:       assertFalse(node1.isDefaultCase());
510:       assertFalse(node1.isRegExp());
511:       assertFalse(node1.isFunction());
512:       assertFalse(node1.isVar());
513:       assertFalse(node1.isArrayLit());
514:       assertFalse(node1.isGetterDef());
515:       assertFalse(node1.isDebugger());
516:       assertFalse(node1.isParamList());
517:       assertFalse(node1.isStringKey());
518:       assertFalse(node1.isAssignAdd());
519:       assertFalse(node1.isOr());
520:       assertFalse(node1.isDec());
521:       assertFalse(node1.isWhile());
522:       assertFalse(node1.isAssign());
523:       assertFalse(node1.isDo());
524:       assertFalse(node1.isTypeOf());
525:       assertTrue(node1.isTry());
526:       assertFalse(node1.isLabel());
527:       assertTrue(node1.hasOneChild());
528:       assertFalse(node1.isReturn());
529:       assertFalse(node1.isVoid());
530:       assertFalse(node1.isNew());
531:       assertFalse(node1.isAdd());
532:       assertFalse(node1.isEmpty());
533:       assertFalse(node1.isGetElem());
534:       assertFalse(node1.isExprResult());
535:       assertFalse(node1.isCall());
536:       assertFalse(node1.isBreak());
537:       assertFalse(node1.isDelProp());
538:       assertFalse(node1.isName());
539:       assertFalse(node1.isNull());
540:       assertFalse(node1.isTrue());
541:       assertFalse(node1.isInstanceOf());
542:       assertFalse(node1.isGetProp());
543:       assertFalse(node1.isWith());
544:       assertFalse(node1.isFalse());
545:       assertFalse(node1.isThrow());
546:       assertFalse(node1.isComma());
547:       assertFalse(node1.isHook());
548:       assertFalse(node1.isThis());
549:       assertFalse(node1.isScript());
550:       assertFalse(node1.isCast());
551:       assertEquals((-1), node1.getSourcePosition());
552:       assertFalse(node1.isString());
553:       assertFalse(node1.isNot());
554:       assertFalse(node1.isLabelName());
555:       assertFalse(node1.isSwitch());
556:       assertFalse(node1.isNumber());
557:       assertFalse(node1.isObjectLit());
558:       assertFalse(node1.isAnd());
559:       assertEquals((-1), node1.getCharno());
560:       assertFalse(node1.isIn());
561:       assertEquals(1, node1.getChildCount());
562:       assertEquals((-1), node1.getLineno());
563:       assertFalse(node1.hasMoreThanOneChild());
564:       assertFalse(node1.isContinue());
565:       assertFalse(node1.isCase());
566:       assertTrue(node1.hasChildren());
567:       assertFalse(node1.isFor());
568:       assertFalse(node1.isBlock());
569:       assertFalse(node1.isInc());
570:       assertFalse(node1.isIf());
571:       assertFalse(node1.isNE());
572:       assertNotNull(node_AncestorIterable0);
573:       
574:       Iterator<Node> iterator0 = node_AncestorIterable0.iterator();
575:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
576:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
577:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
578:       assertEquals(47, Node.IS_DISPATCHER);
579:       assertEquals(29, Node.JSDOC_INFO_PROP);
580:       assertEquals(53, Node.INPUT_ID);
581:       assertEquals(32, Node.INCRDECR_PROP);
582:       assertEquals(12, Node.COLUMN_BITS);
583:       assertEquals(4095, Node.COLUMN_MASK);
584:       assertEquals(55, Node.INFERRED_FUNCTION);
585:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
586:       assertEquals(8, Node.FLAG_NO_THROWS);
587:       assertEquals(56, Node.CHANGE_TIME);
588:       assertEquals(36, Node.QUOTED_PROP);
589:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
590:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
591:       assertEquals(37, Node.OPT_ARG_NAME);
592:       assertEquals(48, Node.DIRECTIVES);
593:       assertEquals(49, Node.DIRECT_EVAL);
594:       assertEquals(57, Node.REFLECTED_OBJECT);
595:       assertEquals(40, Node.ORIGINALNAME_PROP);
596:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
597:       assertEquals(52, Node.LENGTH);
598:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
599:       assertEquals(50, Node.FREE_CALL);
600:       assertEquals(15, Node.NO_SIDE_EFFECTS);
601:       assertEquals(57, Node.LAST_PROP);
602:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
603:       assertEquals(39, Node.EMPTY_BLOCK);
604:       assertEquals(1, Node.DECR_FLAG);
605:       assertEquals(51, Node.STATIC_SOURCE_FILE);
606:       assertEquals(46, Node.IS_NAMESPACE);
607:       assertEquals(2, Node.POST_FLAG);
608:       assertEquals(30, Node.VAR_ARGS_NAME);
609:       assertEquals(43, Node.IS_CONSTANT_NAME);
610:       assertEquals(54, Node.SLASH_V);
611:       assertEquals(51, Node.STATIC_SOURCE_FILE);
612:       assertEquals(1, Node.DECR_FLAG);
613:       assertEquals(30, Node.VAR_ARGS_NAME);
614:       assertEquals(49, Node.DIRECT_EVAL);
615:       assertEquals(32, Node.INCRDECR_PROP);
616:       assertEquals(15, Node.NO_SIDE_EFFECTS);
617:       assertEquals(37, Node.OPT_ARG_NAME);
618:       assertEquals(56, Node.CHANGE_TIME);
619:       assertEquals(57, Node.REFLECTED_OBJECT);
620:       assertEquals(46, Node.IS_NAMESPACE);
621:       assertEquals(54, Node.SLASH_V);
622:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
623:       assertEquals(50, Node.FREE_CALL);
624:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
625:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
626:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
627:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
628:       assertEquals(12, Node.COLUMN_BITS);
629:       assertEquals(55, Node.INFERRED_FUNCTION);
630:       assertEquals(4095, Node.COLUMN_MASK);
631:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
632:       assertEquals(8, Node.FLAG_NO_THROWS);
633:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
634:       assertEquals(36, Node.QUOTED_PROP);
635:       assertEquals(48, Node.DIRECTIVES);
636:       assertEquals(43, Node.IS_CONSTANT_NAME);
637:       assertEquals(40, Node.ORIGINALNAME_PROP);
638:       assertEquals(52, Node.LENGTH);
639:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
640:       assertEquals(53, Node.INPUT_ID);
641:       assertEquals(29, Node.JSDOC_INFO_PROP);
642:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
643:       assertEquals(39, Node.EMPTY_BLOCK);
644:       assertEquals(2, Node.POST_FLAG);
645:       assertEquals(57, Node.LAST_PROP);
646:       assertEquals(47, Node.IS_DISPATCHER);
647:       assertNotSame(node0, node1);
648:       assertNotSame(node1, node0);
649:       assertFalse(node0.equals((Object)node1));
650:       assertFalse(node1.equals((Object)node0));
651:       assertFalse(node0.isHook());
652:       assertFalse(node0.isInc());
653:       assertEquals(4095, node0.getCharno());
654:       assertFalse(node0.isFalse());
655:       assertFalse(node0.isBreak());
656:       assertFalse(node0.isSwitch());
657:       assertFalse(node0.isGetProp());
658:       assertFalse(node0.isThis());
659:       assertFalse(node0.isComma());
660:       assertFalse(node0.isInstanceOf());
661:       assertFalse(node0.isGetterDef());
662:       assertFalse(node0.isObjectLit());
663:       assertFalse(node0.isString());
664:       assertFalse(node0.isCase());
665:       assertFalse(node0.isScript());
666:       assertFalse(node0.isFor());
667:       assertEquals(1838, node0.getLineno());
668:       assertFalse(node0.isTry());
669:       assertFalse(node0.isExprResult());
670:       assertFalse(node0.isTrue());
671:       assertFalse(node0.isLabelName());
672:       assertFalse(node0.isGetElem());
673:       assertFalse(node0.isArrayLit());
674:       assertFalse(node0.isVoid());
675:       assertFalse(node0.isDelProp());
676:       assertFalse(node0.isAssignAdd());
677:       assertFalse(node0.isOr());
678:       assertFalse(node0.isLabel());
679:       assertEquals(0, node0.getChildCount());
680:       assertFalse(node0.isDo());
681:       assertFalse(node0.isEmpty());
682:       assertFalse(node0.isVar());
683:       assertFalse(node0.isDefaultCase());
684:       assertEquals(7532543, node0.getSourcePosition());
685:       assertFalse(node0.isNew());
686:       assertFalse(node0.isBlock());
687:       assertFalse(node0.isAdd());
688:       assertFalse(node0.isStringKey());
689:       assertFalse(node0.isNull());
690:       assertFalse(node0.isCall());
691:       assertFalse(node0.isParamList());
692:       assertFalse(node0.isName());
693:       assertFalse(node0.isReturn());
694:       assertFalse(node0.isCatch());
695:       assertFalse(node0.hasMoreThanOneChild());
696:       assertFalse(node0.isDec());
697:       assertFalse(node0.isTypeOf());
698:       assertFalse(node0.isNumber());
699:       assertFalse(node0.isAssign());
700:       assertFalse(node0.isWhile());
701:       assertFalse(node0.hasChildren());
702:       assertFalse(node0.hasOneChild());
703:       assertFalse(node0.isCast());
704:       assertFalse(node0.isDebugger());
705:       assertFalse(node0.isFunction());
706:       assertFalse(node0.isRegExp());
707:       assertFalse(node0.isNot());
708:       assertFalse(node0.isWith());
709:       assertFalse(node0.isNE());
710:       assertFalse(node0.isAnd());
711:       assertFalse(node0.isIf());
712:       assertEquals((-2735), node0.getType());
713:       assertFalse(node0.isIn());
714:       assertFalse(node0.isContinue());
715:       assertFalse(node0.isThrow());
716:       assertFalse(node0.isSetterDef());
717:       assertEquals(77, node1.getType());
718:       assertFalse(node1.isCatch());
719:       assertFalse(node1.isSetterDef());
720:       assertFalse(node1.isDefaultCase());
721:       assertFalse(node1.isRegExp());
722:       assertFalse(node1.isFunction());
723:       assertFalse(node1.isVar());
724:       assertFalse(node1.isArrayLit());
725:       assertFalse(node1.isGetterDef());
726:       assertFalse(node1.isDebugger());
727:       assertFalse(node1.isParamList());
728:       assertFalse(node1.isStringKey());
729:       assertFalse(node1.isAssignAdd());
730:       assertFalse(node1.isOr());
731:       assertFalse(node1.isDec());
732:       assertFalse(node1.isWhile());
733:       assertFalse(node1.isAssign());
734:       assertFalse(node1.isDo());
735:       assertFalse(node1.isTypeOf());
736:       assertTrue(node1.isTry());
737:       assertFalse(node1.isLabel());
738:       assertTrue(node1.hasOneChild());
739:       assertFalse(node1.isReturn());
740:       assertFalse(node1.isVoid());
741:       assertFalse(node1.isNew());
742:       assertFalse(node1.isAdd());
743:       assertFalse(node1.isEmpty());
744:       assertFalse(node1.isGetElem());
745:       assertFalse(node1.isExprResult());
746:       assertFalse(node1.isCall());
747:       assertFalse(node1.isBreak());
748:       assertFalse(node1.isDelProp());
749:       assertFalse(node1.isName());
750:       assertFalse(node1.isNull());
751:       assertFalse(node1.isTrue());
752:       assertFalse(node1.isInstanceOf());
753:       assertFalse(node1.isGetProp());
754:       assertFalse(node1.isWith());
755:       assertFalse(node1.isFalse());
756:       assertFalse(node1.isThrow());
757:       assertFalse(node1.isComma());
758:       assertFalse(node1.isHook());
759:       assertFalse(node1.isThis());
760:       assertFalse(node1.isScript());
761:       assertFalse(node1.isCast());
762:       assertEquals((-1), node1.getSourcePosition());
763:       assertFalse(node1.isString());
764:       assertFalse(node1.isNot());
765:       assertFalse(node1.isLabelName());
766:       assertFalse(node1.isSwitch());
767:       assertFalse(node1.isNumber());
768:       assertFalse(node1.isObjectLit());
769:       assertFalse(node1.isAnd());
770:       assertEquals((-1), node1.getCharno());
771:       assertFalse(node1.isIn());
772:       assertEquals(1, node1.getChildCount());
773:       assertEquals((-1), node1.getLineno());
774:       assertFalse(node1.hasMoreThanOneChild());
775:       assertFalse(node1.isContinue());
776:       assertFalse(node1.isCase());
777:       assertTrue(node1.hasChildren());
778:       assertFalse(node1.isFor());
779:       assertFalse(node1.isBlock());
780:       assertFalse(node1.isInc());
781:       assertFalse(node1.isIf());
782:       assertFalse(node1.isNE());
783:       assertNotNull(iterator0);
784:       
785:       Iterable<Node> iterable0 = node0.children();
786:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
787:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
788:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
789:       assertEquals(47, Node.IS_DISPATCHER);
790:       assertEquals(29, Node.JSDOC_INFO_PROP);
791:       assertEquals(53, Node.INPUT_ID);
792:       assertEquals(32, Node.INCRDECR_PROP);
793:       assertEquals(12, Node.COLUMN_BITS);
794:       assertEquals(4095, Node.COLUMN_MASK);
795:       assertEquals(55, Node.INFERRED_FUNCTION);
796:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
797:       assertEquals(8, Node.FLAG_NO_THROWS);
798:       assertEquals(56, Node.CHANGE_TIME);
799:       assertEquals(36, Node.QUOTED_PROP);
800:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
801:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
802:       assertEquals(37, Node.OPT_ARG_NAME);
803:       assertEquals(48, Node.DIRECTIVES);
804:       assertEquals(49, Node.DIRECT_EVAL);
805:       assertEquals(57, Node.REFLECTED_OBJECT);
806:       assertEquals(40, Node.ORIGINALNAME_PROP);
807:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
808:       assertEquals(52, Node.LENGTH);
809:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
810:       assertEquals(50, Node.FREE_CALL);
811:       assertEquals(15, Node.NO_SIDE_EFFECTS);
812:       assertEquals(57, Node.LAST_PROP);
813:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
814:       assertEquals(39, Node.EMPTY_BLOCK);
815:       assertEquals(1, Node.DECR_FLAG);
816:       assertEquals(51, Node.STATIC_SOURCE_FILE);
817:       assertEquals(46, Node.IS_NAMESPACE);
818:       assertEquals(2, Node.POST_FLAG);
819:       assertEquals(30, Node.VAR_ARGS_NAME);
820:       assertEquals(43, Node.IS_CONSTANT_NAME);
821:       assertEquals(54, Node.SLASH_V);
822:       assertFalse(iterable0.contains(node1));
823:       assertNotSame(node0, node1);
824:       assertFalse(node0.equals((Object)node1));
825:       assertFalse(node0.isHook());
826:       assertFalse(node0.isInc());
827:       assertEquals(4095, node0.getCharno());
828:       assertFalse(node0.isFalse());
829:       assertFalse(node0.isBreak());
830:       assertFalse(node0.isSwitch());
831:       assertFalse(node0.isGetProp());
832:       assertFalse(node0.isThis());
833:       assertFalse(node0.isComma());
834:       assertFalse(node0.isInstanceOf());
835:       assertFalse(node0.isGetterDef());
836:       assertFalse(node0.isObjectLit());
837:       assertFalse(node0.isString());
838:       assertFalse(node0.isCase());
839:       assertFalse(node0.isScript());
840:       assertFalse(node0.isFor());
841:       assertEquals(1838, node0.getLineno());
842:       assertFalse(node0.isTry());
843:       assertFalse(node0.isExprResult());
844:       assertFalse(node0.isTrue());
845:       assertFalse(node0.isLabelName());
846:       assertFalse(node0.isGetElem());
847:       assertFalse(node0.isArrayLit());
848:       assertFalse(node0.isVoid());
849:       assertFalse(node0.isDelProp());
850:       assertFalse(node0.isAssignAdd());
851:       assertFalse(node0.isOr());
852:       assertFalse(node0.isLabel());
853:       assertEquals(0, node0.getChildCount());
854:       assertFalse(node0.isDo());
855:       assertFalse(node0.isEmpty());
856:       assertFalse(node0.isVar());
857:       assertFalse(node0.isDefaultCase());
858:       assertEquals(7532543, node0.getSourcePosition());
859:       assertFalse(node0.isNew());
860:       assertFalse(node0.isBlock());
861:       assertFalse(node0.isAdd());
862:       assertFalse(node0.isStringKey());
863:       assertFalse(node0.isNull());
864:       assertFalse(node0.isCall());
865:       assertFalse(node0.isParamList());
866:       assertFalse(node0.isName());
867:       assertFalse(node0.isReturn());
868:       assertFalse(node0.isCatch());
869:       assertFalse(node0.hasMoreThanOneChild());
870:       assertFalse(node0.isDec());
871:       assertFalse(node0.isTypeOf());
872:       assertFalse(node0.isNumber());
873:       assertFalse(node0.isAssign());
874:       assertFalse(node0.isWhile());
875:       assertFalse(node0.hasChildren());
876:       assertFalse(node0.hasOneChild());
877:       assertFalse(node0.isCast());
878:       assertFalse(node0.isDebugger());
879:       assertFalse(node0.isFunction());
880:       assertFalse(node0.isRegExp());
881:       assertFalse(node0.isNot());
882:       assertFalse(node0.isWith());
883:       assertFalse(node0.isNE());
884:       assertFalse(node0.isAnd());
885:       assertFalse(node0.isIf());
886:       assertEquals((-2735), node0.getType());
887:       assertFalse(node0.isIn());
888:       assertFalse(node0.isContinue());
889:       assertFalse(node0.isThrow());
890:       assertFalse(node0.isSetterDef());
891:       assertNotNull(iterable0);
892:       
893:       node0.putIntProp(57, (-632));
894:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
895:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
896:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
897:       assertEquals(47, Node.IS_DISPATCHER);
898:       assertEquals(29, Node.JSDOC_INFO_PROP);
899:       assertEquals(53, Node.INPUT_ID);
900:       assertEquals(32, Node.INCRDECR_PROP);
901:       assertEquals(12, Node.COLUMN_BITS);
902:       assertEquals(4095, Node.COLUMN_MASK);
903:       assertEquals(55, Node.INFERRED_FUNCTION);
904:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
905:       assertEquals(8, Node.FLAG_NO_THROWS);
906:       assertEquals(56, Node.CHANGE_TIME);
907:       assertEquals(36, Node.QUOTED_PROP);
908:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
909:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
910:       assertEquals(37, Node.OPT_ARG_NAME);
911:       assertEquals(48, Node.DIRECTIVES);
912:       assertEquals(49, Node.DIRECT_EVAL);
913:       assertEquals(57, Node.REFLECTED_OBJECT);
914:       assertEquals(40, Node.ORIGINALNAME_PROP);
915:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
916:       assertEquals(52, Node.LENGTH);
917:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
918:       assertEquals(50, Node.FREE_CALL);
919:       assertEquals(15, Node.NO_SIDE_EFFECTS);
920:       assertEquals(57, Node.LAST_PROP);
921:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
922:       assertEquals(39, Node.EMPTY_BLOCK);
923:       assertEquals(1, Node.DECR_FLAG);
924:       assertEquals(51, Node.STATIC_SOURCE_FILE);
925:       assertEquals(46, Node.IS_NAMESPACE);
926:       assertEquals(2, Node.POST_FLAG);
927:       assertEquals(30, Node.VAR_ARGS_NAME);
928:       assertEquals(43, Node.IS_CONSTANT_NAME);
929:       assertEquals(54, Node.SLASH_V);
930:       assertNotSame(node0, node1);
931:       assertFalse(node0.equals((Object)node1));
932:       assertFalse(node0.isHook());
933:       assertFalse(node0.isInc());
934:       assertEquals(4095, node0.getCharno());
935:       assertFalse(node0.isFalse());
936:       assertFalse(node0.isBreak());
937:       assertFalse(node0.isSwitch());
938:       assertFalse(node0.isGetProp());
939:       assertFalse(node0.isThis());
940:       assertFalse(node0.isComma());
941:       assertFalse(node0.isInstanceOf());
942:       assertFalse(node0.isGetterDef());
943:       assertFalse(node0.isObjectLit());
944:       assertFalse(node0.isString());
945:       assertFalse(node0.isCase());
946:       assertFalse(node0.isScript());
947:       assertFalse(node0.isFor());
948:       assertEquals(1838, node0.getLineno());
949:       assertFalse(node0.isTry());
950:       assertFalse(node0.isExprResult());
951:       assertFalse(node0.isTrue());
952:       assertFalse(node0.isLabelName());
953:       assertFalse(node0.isGetElem());
954:       assertFalse(node0.isArrayLit());
955:       assertFalse(node0.isVoid());
956:       assertFalse(node0.isDelProp());
957:       assertFalse(node0.isAssignAdd());
958:       assertFalse(node0.isOr());
959:       assertFalse(node0.isLabel());
960:       assertEquals(0, node0.getChildCount());
961:       assertFalse(node0.isDo());
962:       assertFalse(node0.isEmpty());
963:       assertFalse(node0.isVar());
964:       assertFalse(node0.isDefaultCase());
965:       assertEquals(7532543, node0.getSourcePosition());
966:       assertFalse(node0.isNew());
967:       assertFalse(node0.isBlock());
968:       assertFalse(node0.isAdd());
969:       assertFalse(node0.isStringKey());
970:       assertFalse(node0.isNull());
971:       assertFalse(node0.isCall());
972:       assertFalse(node0.isParamList());
973:       assertFalse(node0.isName());
974:       assertFalse(node0.isReturn());
975:       assertFalse(node0.isCatch());
976:       assertFalse(node0.hasMoreThanOneChild());
977:       assertFalse(node0.isDec());
978:       assertFalse(node0.isTypeOf());
979:       assertFalse(node0.isNumber());
980:       assertFalse(node0.isAssign());
981:       assertFalse(node0.isWhile());
982:       assertFalse(node0.hasChildren());
983:       assertFalse(node0.hasOneChild());
984:       assertFalse(node0.isCast());
985:       assertFalse(node0.isDebugger());
986:       assertFalse(node0.isFunction());
987:       assertFalse(node0.isRegExp());
988:       assertFalse(node0.isNot());
989:       assertFalse(node0.isWith());
990:       assertFalse(node0.isNE());
991:       assertFalse(node0.isAnd());
992:       assertFalse(node0.isIf());
993:       assertEquals((-2735), node0.getType());
994:       assertFalse(node0.isIn());
995:       assertFalse(node0.isContinue());
996:       assertFalse(node0.isThrow());
997:       assertFalse(node0.isSetterDef());
998:   }
999: }
RegularFileObject[/tmp/EvoSuite_56_1628256048104/com/google/javascript/rhino/Node_56_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:48 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_56_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_56_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
183:       "com.google.javascript.rhino.Node$AncestorIterable",
184:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
185:       "com.google.common.collect.Lists$RandomAccessListWrapper",
186:       "com.google.common.collect.ImmutableEnumSet",
187:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
188:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
189:       "com.google.javascript.rhino.jstype.EnumElementType",
190:       "com.google.javascript.rhino.jstype.UnionType",
191:       "com.google.common.base.Objects",
192:       "com.google.javascript.rhino.Node$NumberNode",
193:       "com.google.common.collect.SingletonImmutableList",
194:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
195:       "com.google.common.collect.ImmutableCollection$Builder",
196:       "com.google.javascript.rhino.jstype.StaticSlot",
197:       "com.google.common.collect.Iterators$6",
198:       "com.google.common.collect.BiMap",
199:       "com.google.common.collect.Iterators$7",
200:       "com.google.common.collect.AbstractSetMultimap",
201:       "com.google.common.base.Function",
202:       "com.google.common.collect.ImmutableSet",
203:       "com.google.common.collect.Lists$AbstractListWrapper",
204:       "com.google.common.collect.ImmutableMap",
205:       "com.google.common.collect.AbstractIndexedListIterator",
206:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
207:       "com.google.common.collect.Maps$1",
208:       "com.google.javascript.rhino.jstype.EnumType",
209:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
210:       "com.google.common.collect.Iterators$1",
211:       "com.google.common.collect.Iterators$2",
212:       "com.google.javascript.rhino.jstype.NamespaceType",
213:       "com.google.common.collect.Iterators$3",
214:       "com.google.common.collect.Sets",
215:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
216:       "com.google.javascript.rhino.Node$ObjectPropListItem",
217:       "com.google.common.collect.Lists$StringAsImmutableList",
218:       "com.google.common.collect.Lists$2",
219:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
220:       "com.google.common.collect.ImmutableList$Builder",
221:       "com.google.common.collect.Lists$1",
222:       "com.google.javascript.rhino.jstype.StaticReference",
223:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
224:       "com.google.common.collect.Multiset",
225:       "com.google.common.collect.AbstractMultimap",
226:       "com.google.common.collect.Multimap",
227:       "com.google.common.collect.Iterators",
228:       "com.google.common.collect.Maps$ImprovedAbstractMap",
229:       "com.google.common.collect.ImmutableBiMap",
230:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
232:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
233:       "com.google.common.collect.ImmutableList",
234:       "com.google.common.collect.SingletonImmutableBiMap",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
236:       "com.google.javascript.rhino.jstype.StringType",
237:       "com.google.javascript.rhino.Node$AbstractPropListItem",
238:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
239:       "com.google.javascript.rhino.jstype.TemplatizedType",
240:       "com.google.javascript.rhino.jstype.Visitor",
241:       "com.google.javascript.rhino.jstype.NoResolvedType",
242:       "com.google.javascript.rhino.jstype.JSTypeNative",
243:       "com.google.javascript.rhino.jstype.AllType",
244:       "com.google.common.collect.Maps",
245:       "com.google.common.collect.SetMultimap",
246:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
247:       "com.google.common.collect.Maps$EntryTransformer",
248:       "com.google.javascript.rhino.JSTypeExpression",
249:       "com.google.common.collect.Iterators$MergingIterator"
250:     );
251:   } 
252: 
253:   private static void resetClasses() {
254:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_56_tmp__ESTest_scaffolding.class.getClassLoader()); 
255: 
256:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
257:       "com.google.javascript.rhino.Node",
258:       "com.google.javascript.rhino.Node$NumberNode",
259:       "com.google.javascript.rhino.Node$StringNode",
260:       "com.google.javascript.rhino.Node$AbstractPropListItem",
261:       "com.google.javascript.rhino.Node$ObjectPropListItem",
262:       "com.google.javascript.rhino.Node$IntPropListItem",
263:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
264:       "com.google.javascript.rhino.Node$AncestorIterable",
265:       "com.google.javascript.rhino.Node$NodeMismatch",
266:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
267:       "com.google.javascript.rhino.Node$SideEffectFlags",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Preconditions",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.Token",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
342:       "com.google.common.collect.Sets",
343:       "com.google.javascript.rhino.JSDocInfo$Visibility",
344:       "com.google.common.base.Objects",
345:       "com.google.javascript.rhino.jstype.EnumType",
346:       "com.google.javascript.rhino.jstype.EnumElementType",
347:       "com.google.javascript.rhino.InputId",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.jstype.TemplatizedType",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
358:       "com.google.javascript.rhino.jstype.JSType$TypePair",
359:       "com.google.common.collect.AbstractIndexedListIterator",
360:       "com.google.common.collect.Iterators$11",
361:       "com.google.javascript.rhino.jstype.NamedType",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
363:       "com.google.common.collect.Platform",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
371:       "com.google.common.collect.Sets$ImprovedAbstractSet",
372:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
373:       "com.google.common.collect.Hashing",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
375:       "com.google.javascript.rhino.JSTypeExpression",
376:       "com.google.common.collect.ImmutableList$1",
377:       "com.google.common.collect.Iterators$12"
378:     );
379:   }
380: }

[MASTER] 13:20:48.268 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1838);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(1838, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1838);
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
assertEquals(1838, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags2);

boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
assertNotSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags2));
assertFalse(boolean0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());

Node node0 = new Node((-2735), 1838, 4433);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertEquals(1838, node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals(7532543, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertEquals((-2735), node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertNotNull(node0);

Node node1 = new Node(77, node0, node0, node0, node0, 37, (-782));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertEquals(1838, node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals(7532543, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertEquals((-2735), node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertEquals(77, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isTypeOf());
assertTrue(node1.isTry());
assertFalse(node1.isLabel());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertNotNull(node1);

Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertEquals(1838, node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals(7532543, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertEquals((-2735), node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertEquals(77, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isTypeOf());
assertTrue(node1.isTry());
assertFalse(node1.isLabel());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertNotNull(node_AncestorIterable0);

Iterator<Node> iterator0 = node_AncestorIterable0.iterator();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertEquals(1838, node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals(7532543, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertEquals((-2735), node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertEquals(77, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isTypeOf());
assertTrue(node1.isTry());
assertFalse(node1.isLabel());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertNotNull(iterator0);

Iterable<Node> iterable0 = node0.children();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertFalse(iterable0.contains(node1));
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertEquals(1838, node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals(7532543, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertEquals((-2735), node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertNotNull(iterable0);

node0.putIntProp(57, (-632));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertEquals(1838, node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals(7532543, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIf());
assertEquals((-2735), node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());


[MASTER] 13:20:53.052 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_79_1628256052959/com/google/javascript/rhino/Node_79_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_79_1628256052959/com/google/javascript/rhino/Node_79_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:53.052 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:53.052 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:53.053 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 823
[MASTER] 13:20:53.054 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_79_1628256052959/com/google/javascript/rhino/Node_79_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:52 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.util.Iterator;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_79_tmp__ESTest extends Node_79_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1838);
23:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
24:       assertEquals(1838, node_SideEffectFlags0.valueOf());
25:       assertNotNull(node_SideEffectFlags0);
26:       
27:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
28:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
29:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
30:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
31:       assertEquals(31, node_SideEffectFlags0.valueOf());
32:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
33:       assertEquals(31, node_SideEffectFlags1.valueOf());
34:       assertNotNull(node_SideEffectFlags1);
35:       
36:       Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1838);
37:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
38:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
39:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
40:       assertEquals(1838, node_SideEffectFlags2.valueOf());
41:       assertNotNull(node_SideEffectFlags2);
42:       
43:       boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
44:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
45:       assertNotSame(node_SideEffectFlags0, node_SideEffectFlags2);
46:       assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags2));
47:       assertFalse(boolean0);
48:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
49:       assertEquals(31, node_SideEffectFlags0.valueOf());
50:       
51:       Node node0 = new Node((-2735), 1838, 4433);
52:       assertEquals(43, Node.IS_CONSTANT_NAME);
53:       assertEquals(36, Node.QUOTED_PROP);
54:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
55:       assertEquals(53, Node.INPUT_ID);
56:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
57:       assertEquals(4095, Node.COLUMN_MASK);
58:       assertEquals(8, Node.FLAG_NO_THROWS);
59:       assertEquals(39, Node.EMPTY_BLOCK);
60:       assertEquals(47, Node.IS_DISPATCHER);
61:       assertEquals(56, Node.CHANGE_TIME);
62:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
63:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
64:       assertEquals(29, Node.JSDOC_INFO_PROP);
65:       assertEquals(37, Node.OPT_ARG_NAME);
66:       assertEquals(48, Node.DIRECTIVES);
67:       assertEquals(57, Node.REFLECTED_OBJECT);
68:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
69:       assertEquals(55, Node.INFERRED_FUNCTION);
70:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
71:       assertEquals(52, Node.LENGTH);
72:       assertEquals(15, Node.NO_SIDE_EFFECTS);
73:       assertEquals(57, Node.LAST_PROP);
74:       assertEquals(54, Node.SLASH_V);
75:       assertEquals(49, Node.DIRECT_EVAL);
76:       assertEquals(1, Node.DECR_FLAG);
77:       assertEquals(12, Node.COLUMN_BITS);
78:       assertEquals(40, Node.ORIGINALNAME_PROP);
79:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
80:       assertEquals(2, Node.POST_FLAG);
81:       assertEquals(30, Node.VAR_ARGS_NAME);
82:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
83:       assertEquals(32, Node.INCRDECR_PROP);
84:       assertEquals(51, Node.STATIC_SOURCE_FILE);
85:       assertEquals(46, Node.IS_NAMESPACE);
86:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
87:       assertEquals(50, Node.FREE_CALL);
88:       assertFalse(node0.isString());
89:       assertFalse(node0.isCase());
90:       assertFalse(node0.isInc());
91:       assertFalse(node0.isSwitch());
92:       assertFalse(node0.isIn());
93:       assertFalse(node0.isGetterDef());
94:       assertEquals(4095, node0.getCharno());
95:       assertFalse(node0.isBreak());
96:       assertFalse(node0.isFor());
97:       assertFalse(node0.isNE());
98:       assertFalse(node0.isIf());
99:       assertEquals(1838, node0.getLineno());
100:       assertFalse(node0.isDelProp());
101:       assertFalse(node0.isHook());
102:       assertFalse(node0.isInstanceOf());
103:       assertFalse(node0.isComma());
104:       assertFalse(node0.isThis());
105:       assertFalse(node0.isRegExp());
106:       assertFalse(node0.isNot());
107:       assertFalse(node0.isWith());
108:       assertFalse(node0.isAnd());
109:       assertEquals((-2735), node0.getType());
110:       assertFalse(node0.isGetProp());
111:       assertFalse(node0.isDebugger());
112:       assertFalse(node0.isObjectLit());
113:       assertFalse(node0.isThrow());
114:       assertFalse(node0.isSetterDef());
115:       assertEquals(7532543, node0.getSourcePosition());
116:       assertFalse(node0.isCast());
117:       assertFalse(node0.isFunction());
118:       assertFalse(node0.isContinue());
119:       assertFalse(node0.isFalse());
120:       assertFalse(node0.isDo());
121:       assertFalse(node0.isWhile());
122:       assertFalse(node0.isOr());
123:       assertFalse(node0.isNew());
124:       assertFalse(node0.isAdd());
125:       assertFalse(node0.isNumber());
126:       assertFalse(node0.isAssign());
127:       assertFalse(node0.hasChildren());
128:       assertFalse(node0.isGetElem());
129:       assertFalse(node0.isNull());
130:       assertFalse(node0.isCall());
131:       assertFalse(node0.hasOneChild());
132:       assertFalse(node0.isName());
133:       assertFalse(node0.isReturn());
134:       assertFalse(node0.isExprResult());
135:       assertFalse(node0.isBlock());
136:       assertFalse(node0.isCatch());
137:       assertFalse(node0.hasMoreThanOneChild());
138:       assertFalse(node0.isDec());
139:       assertFalse(node0.isTypeOf());
140:       assertFalse(node0.isScript());
141:       assertFalse(node0.isDefaultCase());
142:       assertFalse(node0.isTry());
143:       assertFalse(node0.isVoid());
144:       assertFalse(node0.isTrue());
145:       assertFalse(node0.isStringKey());
146:       assertFalse(node0.isEmpty());
147:       assertFalse(node0.isParamList());
148:       assertFalse(node0.isArrayLit());
149:       assertFalse(node0.isLabelName());
150:       assertFalse(node0.isAssignAdd());
151:       assertFalse(node0.isLabel());
152:       assertFalse(node0.isVar());
153:       assertEquals(0, node0.getChildCount());
154:       assertNotNull(node0);
155:       
156:       Node node1 = new Node(77, node0, node0, node0, node0, 37, (-782));
157:       assertEquals(43, Node.IS_CONSTANT_NAME);
158:       assertEquals(36, Node.QUOTED_PROP);
159:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
160:       assertEquals(53, Node.INPUT_ID);
161:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
162:       assertEquals(4095, Node.COLUMN_MASK);
163:       assertEquals(8, Node.FLAG_NO_THROWS);
164:       assertEquals(39, Node.EMPTY_BLOCK);
165:       assertEquals(47, Node.IS_DISPATCHER);
166:       assertEquals(56, Node.CHANGE_TIME);
167:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
168:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
169:       assertEquals(29, Node.JSDOC_INFO_PROP);
170:       assertEquals(37, Node.OPT_ARG_NAME);
171:       assertEquals(48, Node.DIRECTIVES);
172:       assertEquals(57, Node.REFLECTED_OBJECT);
173:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
174:       assertEquals(55, Node.INFERRED_FUNCTION);
175:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
176:       assertEquals(52, Node.LENGTH);
177:       assertEquals(15, Node.NO_SIDE_EFFECTS);
178:       assertEquals(57, Node.LAST_PROP);
179:       assertEquals(54, Node.SLASH_V);
180:       assertEquals(49, Node.DIRECT_EVAL);
181:       assertEquals(1, Node.DECR_FLAG);
182:       assertEquals(12, Node.COLUMN_BITS);
183:       assertEquals(40, Node.ORIGINALNAME_PROP);
184:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
185:       assertEquals(2, Node.POST_FLAG);
186:       assertEquals(30, Node.VAR_ARGS_NAME);
187:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
188:       assertEquals(32, Node.INCRDECR_PROP);
189:       assertEquals(51, Node.STATIC_SOURCE_FILE);
190:       assertEquals(46, Node.IS_NAMESPACE);
191:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
192:       assertEquals(50, Node.FREE_CALL);
193:       assertEquals(57, Node.REFLECTED_OBJECT);
194:       assertEquals(52, Node.LENGTH);
195:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
196:       assertEquals(54, Node.SLASH_V);
197:       assertEquals(50, Node.FREE_CALL);
198:       assertEquals(15, Node.NO_SIDE_EFFECTS);
199:       assertEquals(57, Node.LAST_PROP);
200:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
201:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
202:       assertEquals(1, Node.DECR_FLAG);
203:       assertEquals(39, Node.EMPTY_BLOCK);
204:       assertEquals(46, Node.IS_NAMESPACE);
205:       assertEquals(2, Node.POST_FLAG);
206:       assertEquals(30, Node.VAR_ARGS_NAME);
207:       assertEquals(51, Node.STATIC_SOURCE_FILE);
208:       assertEquals(43, Node.IS_CONSTANT_NAME);
209:       assertEquals(40, Node.ORIGINALNAME_PROP);
210:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
211:       assertEquals(36, Node.QUOTED_PROP);
212:       assertEquals(47, Node.IS_DISPATCHER);
213:       assertEquals(29, Node.JSDOC_INFO_PROP);
214:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
215:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
216:       assertEquals(53, Node.INPUT_ID);
217:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
218:       assertEquals(32, Node.INCRDECR_PROP);
219:       assertEquals(12, Node.COLUMN_BITS);
220:       assertEquals(55, Node.INFERRED_FUNCTION);
221:       assertEquals(4095, Node.COLUMN_MASK);
222:       assertEquals(8, Node.FLAG_NO_THROWS);
223:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
224:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
225:       assertEquals(56, Node.CHANGE_TIME);
226:       assertEquals(48, Node.DIRECTIVES);
227:       assertEquals(49, Node.DIRECT_EVAL);
228:       assertEquals(37, Node.OPT_ARG_NAME);
229:       assertFalse(node1.equals((Object)node0));
230:       assertFalse(node0.isString());
231:       assertFalse(node0.isCase());
232:       assertFalse(node0.isInc());
233:       assertFalse(node0.isSwitch());
234:       assertFalse(node0.isIn());
235:       assertFalse(node0.isGetterDef());
236:       assertEquals(4095, node0.getCharno());
237:       assertFalse(node0.isBreak());
238:       assertFalse(node0.isFor());
239:       assertFalse(node0.isNE());
240:       assertFalse(node0.isIf());
241:       assertEquals(1838, node0.getLineno());
242:       assertFalse(node0.isDelProp());
243:       assertFalse(node0.isHook());
244:       assertFalse(node0.isInstanceOf());
245:       assertFalse(node0.isComma());
246:       assertFalse(node0.isThis());
247:       assertFalse(node0.isRegExp());
248:       assertFalse(node0.isNot());
249:       assertFalse(node0.isWith());
250:       assertFalse(node0.isAnd());
251:       assertEquals((-2735), node0.getType());
252:       assertFalse(node0.isGetProp());
253:       assertFalse(node0.isDebugger());
254:       assertFalse(node0.isObjectLit());
255:       assertFalse(node0.isThrow());
256:       assertFalse(node0.isSetterDef());
257:       assertEquals(7532543, node0.getSourcePosition());
258:       assertFalse(node0.isCast());
259:       assertFalse(node0.isFunction());
260:       assertFalse(node0.isContinue());
261:       assertFalse(node0.isFalse());
262:       assertFalse(node0.isDo());
263:       assertFalse(node0.isWhile());
264:       assertFalse(node0.isOr());
265:       assertFalse(node0.isNew());
266:       assertFalse(node0.isAdd());
267:       assertFalse(node0.isNumber());
268:       assertFalse(node0.isAssign());
269:       assertFalse(node0.hasChildren());
270:       assertFalse(node0.isGetElem());
271:       assertFalse(node0.isNull());
272:       assertFalse(node0.isCall());
273:       assertFalse(node0.hasOneChild());
274:       assertFalse(node0.isName());
275:       assertFalse(node0.isReturn());
276:       assertFalse(node0.isExprResult());
277:       assertFalse(node0.isBlock());
278:       assertFalse(node0.isCatch());
279:       assertFalse(node0.hasMoreThanOneChild());
280:       assertFalse(node0.isDec());
281:       assertFalse(node0.isTypeOf());
282:       assertFalse(node0.isScript());
283:       assertFalse(node0.isDefaultCase());
284:       assertFalse(node0.isTry());
285:       assertFalse(node0.isVoid());
286:       assertFalse(node0.isTrue());
287:       assertFalse(node0.isStringKey());
288:       assertFalse(node0.isEmpty());
289:       assertFalse(node0.isParamList());
290:       assertFalse(node0.isArrayLit());
291:       assertFalse(node0.isLabelName());
292:       assertFalse(node0.isAssignAdd());
293:       assertFalse(node0.isLabel());
294:       assertFalse(node0.isVar());
295:       assertEquals(0, node0.getChildCount());
296:       assertFalse(node1.isTrue());
297:       assertFalse(node1.isRegExp());
298:       assertFalse(node1.isFunction());
299:       assertFalse(node1.isDebugger());
300:       assertFalse(node1.isCatch());
301:       assertFalse(node1.isArrayLit());
302:       assertFalse(node1.isIf());
303:       assertFalse(node1.isDelProp());
304:       assertFalse(node1.isVoid());
305:       assertFalse(node1.isSetterDef());
306:       assertFalse(node1.isNE());
307:       assertFalse(node1.isNull());
308:       assertFalse(node1.isIn());
309:       assertFalse(node1.isEmpty());
310:       assertFalse(node1.isVar());
311:       assertFalse(node1.isDefaultCase());
312:       assertEquals(77, node1.getType());
313:       assertFalse(node1.isNew());
314:       assertFalse(node1.isAdd());
315:       assertFalse(node1.isFalse());
316:       assertFalse(node1.isName());
317:       assertFalse(node1.isContinue());
318:       assertFalse(node1.isCall());
319:       assertFalse(node1.isBreak());
320:       assertFalse(node1.isGetProp());
321:       assertFalse(node1.isReturn());
322:       assertEquals((-1), node1.getSourcePosition());
323:       assertFalse(node1.isTypeOf());
324:       assertFalse(node1.isObjectLit());
325:       assertFalse(node1.isComma());
326:       assertFalse(node1.isDec());
327:       assertFalse(node1.isAssign());
328:       assertTrue(node1.isTry());
329:       assertTrue(node1.hasOneChild());
330:       assertFalse(node1.isWhile());
331:       assertFalse(node1.isString());
332:       assertFalse(node1.isExprResult());
333:       assertFalse(node1.isScript());
334:       assertFalse(node1.isNot());
335:       assertFalse(node1.isGetElem());
336:       assertFalse(node1.isWith());
337:       assertFalse(node1.isAnd());
338:       assertFalse(node1.isCast());
339:       assertFalse(node1.isLabelName());
340:       assertFalse(node1.isAssignAdd());
341:       assertFalse(node1.isLabel());
342:       assertFalse(node1.isOr());
343:       assertFalse(node1.isThrow());
344:       assertFalse(node1.isDo());
345:       assertFalse(node1.isBlock());
346:       assertEquals((-1), node1.getCharno());
347:       assertFalse(node1.isInc());
348:       assertFalse(node1.isHook());
349:       assertFalse(node1.isStringKey());
350:       assertFalse(node1.isSwitch());
351:       assertEquals((-1), node1.getLineno());
352:       assertFalse(node1.isThis());
353:       assertFalse(node1.isParamList());
354:       assertTrue(node1.hasChildren());
355:       assertFalse(node1.isInstanceOf());
356:       assertFalse(node1.isNumber());
357:       assertFalse(node1.hasMoreThanOneChild());
358:       assertEquals(1, node1.getChildCount());
359:       assertFalse(node1.isGetterDef());
360:       assertFalse(node1.isCase());
361:       assertFalse(node1.isFor());
362:       assertNotNull(node1);
363:       
364:       Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
365:       assertEquals(43, Node.IS_CONSTANT_NAME);
366:       assertEquals(36, Node.QUOTED_PROP);
367:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
368:       assertEquals(53, Node.INPUT_ID);
369:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
370:       assertEquals(4095, Node.COLUMN_MASK);
371:       assertEquals(8, Node.FLAG_NO_THROWS);
372:       assertEquals(39, Node.EMPTY_BLOCK);
373:       assertEquals(47, Node.IS_DISPATCHER);
374:       assertEquals(56, Node.CHANGE_TIME);
375:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
376:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
377:       assertEquals(29, Node.JSDOC_INFO_PROP);
378:       assertEquals(37, Node.OPT_ARG_NAME);
379:       assertEquals(48, Node.DIRECTIVES);
380:       assertEquals(57, Node.REFLECTED_OBJECT);
381:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
382:       assertEquals(55, Node.INFERRED_FUNCTION);
383:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
384:       assertEquals(52, Node.LENGTH);
385:       assertEquals(15, Node.NO_SIDE_EFFECTS);
386:       assertEquals(57, Node.LAST_PROP);
387:       assertEquals(54, Node.SLASH_V);
388:       assertEquals(49, Node.DIRECT_EVAL);
389:       assertEquals(1, Node.DECR_FLAG);
390:       assertEquals(12, Node.COLUMN_BITS);
391:       assertEquals(40, Node.ORIGINALNAME_PROP);
392:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
393:       assertEquals(2, Node.POST_FLAG);
394:       assertEquals(30, Node.VAR_ARGS_NAME);
395:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
396:       assertEquals(32, Node.INCRDECR_PROP);
397:       assertEquals(51, Node.STATIC_SOURCE_FILE);
398:       assertEquals(46, Node.IS_NAMESPACE);
399:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
400:       assertEquals(50, Node.FREE_CALL);
401:       assertEquals(57, Node.REFLECTED_OBJECT);
402:       assertEquals(52, Node.LENGTH);
403:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
404:       assertEquals(54, Node.SLASH_V);
405:       assertEquals(50, Node.FREE_CALL);
406:       assertEquals(15, Node.NO_SIDE_EFFECTS);
407:       assertEquals(57, Node.LAST_PROP);
408:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
409:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
410:       assertEquals(1, Node.DECR_FLAG);
411:       assertEquals(39, Node.EMPTY_BLOCK);
412:       assertEquals(46, Node.IS_NAMESPACE);
413:       assertEquals(2, Node.POST_FLAG);
414:       assertEquals(30, Node.VAR_ARGS_NAME);
415:       assertEquals(51, Node.STATIC_SOURCE_FILE);
416:       assertEquals(43, Node.IS_CONSTANT_NAME);
417:       assertEquals(40, Node.ORIGINALNAME_PROP);
418:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
419:       assertEquals(36, Node.QUOTED_PROP);
420:       assertEquals(47, Node.IS_DISPATCHER);
421:       assertEquals(29, Node.JSDOC_INFO_PROP);
422:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
423:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
424:       assertEquals(53, Node.INPUT_ID);
425:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
426:       assertEquals(32, Node.INCRDECR_PROP);
427:       assertEquals(12, Node.COLUMN_BITS);
428:       assertEquals(55, Node.INFERRED_FUNCTION);
429:       assertEquals(4095, Node.COLUMN_MASK);
430:       assertEquals(8, Node.FLAG_NO_THROWS);
431:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
432:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
433:       assertEquals(56, Node.CHANGE_TIME);
434:       assertEquals(48, Node.DIRECTIVES);
435:       assertEquals(49, Node.DIRECT_EVAL);
436:       assertEquals(37, Node.OPT_ARG_NAME);
437:       assertNotSame(node0, node1);
438:       assertNotSame(node1, node0);
439:       assertFalse(node0.equals((Object)node1));
440:       assertFalse(node1.equals((Object)node0));
441:       assertFalse(node0.isString());
442:       assertFalse(node0.isCase());
443:       assertFalse(node0.isInc());
444:       assertFalse(node0.isSwitch());
445:       assertFalse(node0.isIn());
446:       assertFalse(node0.isGetterDef());
447:       assertEquals(4095, node0.getCharno());
448:       assertFalse(node0.isBreak());
449:       assertFalse(node0.isFor());
450:       assertFalse(node0.isNE());
451:       assertFalse(node0.isIf());
452:       assertEquals(1838, node0.getLineno());
453:       assertFalse(node0.isDelProp());
454:       assertFalse(node0.isHook());
455:       assertFalse(node0.isInstanceOf());
456:       assertFalse(node0.isComma());
457:       assertFalse(node0.isThis());
458:       assertFalse(node0.isRegExp());
459:       assertFalse(node0.isNot());
460:       assertFalse(node0.isWith());
461:       assertFalse(node0.isAnd());
462:       assertEquals((-2735), node0.getType());
463:       assertFalse(node0.isGetProp());
464:       assertFalse(node0.isDebugger());
465:       assertFalse(node0.isObjectLit());
466:       assertFalse(node0.isThrow());
467:       assertFalse(node0.isSetterDef());
468:       assertEquals(7532543, node0.getSourcePosition());
469:       assertFalse(node0.isCast());
470:       assertFalse(node0.isFunction());
471:       assertFalse(node0.isContinue());
472:       assertFalse(node0.isFalse());
473:       assertFalse(node0.isDo());
474:       assertFalse(node0.isWhile());
475:       assertFalse(node0.isOr());
476:       assertFalse(node0.isNew());
477:       assertFalse(node0.isAdd());
478:       assertFalse(node0.isNumber());
479:       assertFalse(node0.isAssign());
480:       assertFalse(node0.hasChildren());
481:       assertFalse(node0.isGetElem());
482:       assertFalse(node0.isNull());
483:       assertFalse(node0.isCall());
484:       assertFalse(node0.hasOneChild());
485:       assertFalse(node0.isName());
486:       assertFalse(node0.isReturn());
487:       assertFalse(node0.isExprResult());
488:       assertFalse(node0.isBlock());
489:       assertFalse(node0.isCatch());
490:       assertFalse(node0.hasMoreThanOneChild());
491:       assertFalse(node0.isDec());
492:       assertFalse(node0.isTypeOf());
493:       assertFalse(node0.isScript());
494:       assertFalse(node0.isDefaultCase());
495:       assertFalse(node0.isTry());
496:       assertFalse(node0.isVoid());
497:       assertFalse(node0.isTrue());
498:       assertFalse(node0.isStringKey());
499:       assertFalse(node0.isEmpty());
500:       assertFalse(node0.isParamList());
501:       assertFalse(node0.isArrayLit());
502:       assertFalse(node0.isLabelName());
503:       assertFalse(node0.isAssignAdd());
504:       assertFalse(node0.isLabel());
505:       assertFalse(node0.isVar());
506:       assertEquals(0, node0.getChildCount());
507:       assertFalse(node1.isTrue());
508:       assertFalse(node1.isRegExp());
509:       assertFalse(node1.isFunction());
510:       assertFalse(node1.isDebugger());
511:       assertFalse(node1.isCatch());
512:       assertFalse(node1.isArrayLit());
513:       assertFalse(node1.isIf());
514:       assertFalse(node1.isDelProp());
515:       assertFalse(node1.isVoid());
516:       assertFalse(node1.isSetterDef());
517:       assertFalse(node1.isNE());
518:       assertFalse(node1.isNull());
519:       assertFalse(node1.isIn());
520:       assertFalse(node1.isEmpty());
521:       assertFalse(node1.isVar());
522:       assertFalse(node1.isDefaultCase());
523:       assertEquals(77, node1.getType());
524:       assertFalse(node1.isNew());
525:       assertFalse(node1.isAdd());
526:       assertFalse(node1.isFalse());
527:       assertFalse(node1.isName());
528:       assertFalse(node1.isContinue());
529:       assertFalse(node1.isCall());
530:       assertFalse(node1.isBreak());
531:       assertFalse(node1.isGetProp());
532:       assertFalse(node1.isReturn());
533:       assertEquals((-1), node1.getSourcePosition());
534:       assertFalse(node1.isTypeOf());
535:       assertFalse(node1.isObjectLit());
536:       assertFalse(node1.isComma());
537:       assertFalse(node1.isDec());
538:       assertFalse(node1.isAssign());
539:       assertTrue(node1.isTry());
540:       assertTrue(node1.hasOneChild());
541:       assertFalse(node1.isWhile());
542:       assertFalse(node1.isString());
543:       assertFalse(node1.isExprResult());
544:       assertFalse(node1.isScript());
545:       assertFalse(node1.isNot());
546:       assertFalse(node1.isGetElem());
547:       assertFalse(node1.isWith());
548:       assertFalse(node1.isAnd());
549:       assertFalse(node1.isCast());
550:       assertFalse(node1.isLabelName());
551:       assertFalse(node1.isAssignAdd());
552:       assertFalse(node1.isLabel());
553:       assertFalse(node1.isOr());
554:       assertFalse(node1.isThrow());
555:       assertFalse(node1.isDo());
556:       assertFalse(node1.isBlock());
557:       assertEquals((-1), node1.getCharno());
558:       assertFalse(node1.isInc());
559:       assertFalse(node1.isHook());
560:       assertFalse(node1.isStringKey());
561:       assertFalse(node1.isSwitch());
562:       assertEquals((-1), node1.getLineno());
563:       assertFalse(node1.isThis());
564:       assertFalse(node1.isParamList());
565:       assertTrue(node1.hasChildren());
566:       assertFalse(node1.isInstanceOf());
567:       assertFalse(node1.isNumber());
568:       assertFalse(node1.hasMoreThanOneChild());
569:       assertEquals(1, node1.getChildCount());
570:       assertFalse(node1.isGetterDef());
571:       assertFalse(node1.isCase());
572:       assertFalse(node1.isFor());
573:       assertNotNull(node_AncestorIterable0);
574:       
575:       Iterator<Node> iterator0 = node_AncestorIterable0.iterator();
576:       assertEquals(43, Node.IS_CONSTANT_NAME);
577:       assertEquals(36, Node.QUOTED_PROP);
578:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
579:       assertEquals(53, Node.INPUT_ID);
580:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
581:       assertEquals(4095, Node.COLUMN_MASK);
582:       assertEquals(8, Node.FLAG_NO_THROWS);
583:       assertEquals(39, Node.EMPTY_BLOCK);
584:       assertEquals(47, Node.IS_DISPATCHER);
585:       assertEquals(56, Node.CHANGE_TIME);
586:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
587:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
588:       assertEquals(29, Node.JSDOC_INFO_PROP);
589:       assertEquals(37, Node.OPT_ARG_NAME);
590:       assertEquals(48, Node.DIRECTIVES);
591:       assertEquals(57, Node.REFLECTED_OBJECT);
592:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
593:       assertEquals(55, Node.INFERRED_FUNCTION);
594:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
595:       assertEquals(52, Node.LENGTH);
596:       assertEquals(15, Node.NO_SIDE_EFFECTS);
597:       assertEquals(57, Node.LAST_PROP);
598:       assertEquals(54, Node.SLASH_V);
599:       assertEquals(49, Node.DIRECT_EVAL);
600:       assertEquals(1, Node.DECR_FLAG);
601:       assertEquals(12, Node.COLUMN_BITS);
602:       assertEquals(40, Node.ORIGINALNAME_PROP);
603:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
604:       assertEquals(2, Node.POST_FLAG);
605:       assertEquals(30, Node.VAR_ARGS_NAME);
606:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
607:       assertEquals(32, Node.INCRDECR_PROP);
608:       assertEquals(51, Node.STATIC_SOURCE_FILE);
609:       assertEquals(46, Node.IS_NAMESPACE);
610:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
611:       assertEquals(50, Node.FREE_CALL);
612:       assertEquals(57, Node.REFLECTED_OBJECT);
613:       assertEquals(52, Node.LENGTH);
614:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
615:       assertEquals(54, Node.SLASH_V);
616:       assertEquals(50, Node.FREE_CALL);
617:       assertEquals(15, Node.NO_SIDE_EFFECTS);
618:       assertEquals(57, Node.LAST_PROP);
619:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
620:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
621:       assertEquals(1, Node.DECR_FLAG);
622:       assertEquals(39, Node.EMPTY_BLOCK);
623:       assertEquals(46, Node.IS_NAMESPACE);
624:       assertEquals(2, Node.POST_FLAG);
625:       assertEquals(30, Node.VAR_ARGS_NAME);
626:       assertEquals(51, Node.STATIC_SOURCE_FILE);
627:       assertEquals(43, Node.IS_CONSTANT_NAME);
628:       assertEquals(40, Node.ORIGINALNAME_PROP);
629:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
630:       assertEquals(36, Node.QUOTED_PROP);
631:       assertEquals(47, Node.IS_DISPATCHER);
632:       assertEquals(29, Node.JSDOC_INFO_PROP);
633:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
634:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
635:       assertEquals(53, Node.INPUT_ID);
636:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
637:       assertEquals(32, Node.INCRDECR_PROP);
638:       assertEquals(12, Node.COLUMN_BITS);
639:       assertEquals(55, Node.INFERRED_FUNCTION);
640:       assertEquals(4095, Node.COLUMN_MASK);
641:       assertEquals(8, Node.FLAG_NO_THROWS);
642:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
643:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
644:       assertEquals(56, Node.CHANGE_TIME);
645:       assertEquals(48, Node.DIRECTIVES);
646:       assertEquals(49, Node.DIRECT_EVAL);
647:       assertEquals(37, Node.OPT_ARG_NAME);
648:       assertNotSame(node0, node1);
649:       assertNotSame(node1, node0);
650:       assertFalse(node0.equals((Object)node1));
651:       assertFalse(node1.equals((Object)node0));
652:       assertFalse(node0.isString());
653:       assertFalse(node0.isCase());
654:       assertFalse(node0.isInc());
655:       assertFalse(node0.isSwitch());
656:       assertFalse(node0.isIn());
657:       assertFalse(node0.isGetterDef());
658:       assertEquals(4095, node0.getCharno());
659:       assertFalse(node0.isBreak());
660:       assertFalse(node0.isFor());
661:       assertFalse(node0.isNE());
662:       assertFalse(node0.isIf());
663:       assertEquals(1838, node0.getLineno());
664:       assertFalse(node0.isDelProp());
665:       assertFalse(node0.isHook());
666:       assertFalse(node0.isInstanceOf());
667:       assertFalse(node0.isComma());
668:       assertFalse(node0.isThis());
669:       assertFalse(node0.isRegExp());
670:       assertFalse(node0.isNot());
671:       assertFalse(node0.isWith());
672:       assertFalse(node0.isAnd());
673:       assertEquals((-2735), node0.getType());
674:       assertFalse(node0.isGetProp());
675:       assertFalse(node0.isDebugger());
676:       assertFalse(node0.isObjectLit());
677:       assertFalse(node0.isThrow());
678:       assertFalse(node0.isSetterDef());
679:       assertEquals(7532543, node0.getSourcePosition());
680:       assertFalse(node0.isCast());
681:       assertFalse(node0.isFunction());
682:       assertFalse(node0.isContinue());
683:       assertFalse(node0.isFalse());
684:       assertFalse(node0.isDo());
685:       assertFalse(node0.isWhile());
686:       assertFalse(node0.isOr());
687:       assertFalse(node0.isNew());
688:       assertFalse(node0.isAdd());
689:       assertFalse(node0.isNumber());
690:       assertFalse(node0.isAssign());
691:       assertFalse(node0.hasChildren());
692:       assertFalse(node0.isGetElem());
693:       assertFalse(node0.isNull());
694:       assertFalse(node0.isCall());
695:       assertFalse(node0.hasOneChild());
696:       assertFalse(node0.isName());
697:       assertFalse(node0.isReturn());
698:       assertFalse(node0.isExprResult());
699:       assertFalse(node0.isBlock());
700:       assertFalse(node0.isCatch());
701:       assertFalse(node0.hasMoreThanOneChild());
702:       assertFalse(node0.isDec());
703:       assertFalse(node0.isTypeOf());
704:       assertFalse(node0.isScript());
705:       assertFalse(node0.isDefaultCase());
706:       assertFalse(node0.isTry());
707:       assertFalse(node0.isVoid());
708:       assertFalse(node0.isTrue());
709:       assertFalse(node0.isStringKey());
710:       assertFalse(node0.isEmpty());
711:       assertFalse(node0.isParamList());
712:       assertFalse(node0.isArrayLit());
713:       assertFalse(node0.isLabelName());
714:       assertFalse(node0.isAssignAdd());
715:       assertFalse(node0.isLabel());
716:       assertFalse(node0.isVar());
717:       assertEquals(0, node0.getChildCount());
718:       assertFalse(node1.isTrue());
719:       assertFalse(node1.isRegExp());
720:       assertFalse(node1.isFunction());
721:       assertFalse(node1.isDebugger());
722:       assertFalse(node1.isCatch());
723:       assertFalse(node1.isArrayLit());
724:       assertFalse(node1.isIf());
725:       assertFalse(node1.isDelProp());
726:       assertFalse(node1.isVoid());
727:       assertFalse(node1.isSetterDef());
728:       assertFalse(node1.isNE());
729:       assertFalse(node1.isNull());
730:       assertFalse(node1.isIn());
731:       assertFalse(node1.isEmpty());
732:       assertFalse(node1.isVar());
733:       assertFalse(node1.isDefaultCase());
734:       assertEquals(77, node1.getType());
735:       assertFalse(node1.isNew());
736:       assertFalse(node1.isAdd());
737:       assertFalse(node1.isFalse());
738:       assertFalse(node1.isName());
739:       assertFalse(node1.isContinue());
740:       assertFalse(node1.isCall());
741:       assertFalse(node1.isBreak());
742:       assertFalse(node1.isGetProp());
743:       assertFalse(node1.isReturn());
744:       assertEquals((-1), node1.getSourcePosition());
745:       assertFalse(node1.isTypeOf());
746:       assertFalse(node1.isObjectLit());
747:       assertFalse(node1.isComma());
748:       assertFalse(node1.isDec());
749:       assertFalse(node1.isAssign());
750:       assertTrue(node1.isTry());
751:       assertTrue(node1.hasOneChild());
752:       assertFalse(node1.isWhile());
753:       assertFalse(node1.isString());
754:       assertFalse(node1.isExprResult());
755:       assertFalse(node1.isScript());
756:       assertFalse(node1.isNot());
757:       assertFalse(node1.isGetElem());
758:       assertFalse(node1.isWith());
759:       assertFalse(node1.isAnd());
760:       assertFalse(node1.isCast());
761:       assertFalse(node1.isLabelName());
762:       assertFalse(node1.isAssignAdd());
763:       assertFalse(node1.isLabel());
764:       assertFalse(node1.isOr());
765:       assertFalse(node1.isThrow());
766:       assertFalse(node1.isDo());
767:       assertFalse(node1.isBlock());
768:       assertEquals((-1), node1.getCharno());
769:       assertFalse(node1.isInc());
770:       assertFalse(node1.isHook());
771:       assertFalse(node1.isStringKey());
772:       assertFalse(node1.isSwitch());
773:       assertEquals((-1), node1.getLineno());
774:       assertFalse(node1.isThis());
775:       assertFalse(node1.isParamList());
776:       assertTrue(node1.hasChildren());
777:       assertFalse(node1.isInstanceOf());
778:       assertFalse(node1.isNumber());
779:       assertFalse(node1.hasMoreThanOneChild());
780:       assertEquals(1, node1.getChildCount());
781:       assertFalse(node1.isGetterDef());
782:       assertFalse(node1.isCase());
783:       assertFalse(node1.isFor());
784:       assertNotNull(iterator0);
785:       
786:       Iterable<Node> iterable0 = node0.children();
787:       assertEquals(43, Node.IS_CONSTANT_NAME);
788:       assertEquals(36, Node.QUOTED_PROP);
789:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
790:       assertEquals(53, Node.INPUT_ID);
791:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
792:       assertEquals(4095, Node.COLUMN_MASK);
793:       assertEquals(8, Node.FLAG_NO_THROWS);
794:       assertEquals(39, Node.EMPTY_BLOCK);
795:       assertEquals(47, Node.IS_DISPATCHER);
796:       assertEquals(56, Node.CHANGE_TIME);
797:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
798:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
799:       assertEquals(29, Node.JSDOC_INFO_PROP);
800:       assertEquals(37, Node.OPT_ARG_NAME);
801:       assertEquals(48, Node.DIRECTIVES);
802:       assertEquals(57, Node.REFLECTED_OBJECT);
803:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
804:       assertEquals(55, Node.INFERRED_FUNCTION);
805:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
806:       assertEquals(52, Node.LENGTH);
807:       assertEquals(15, Node.NO_SIDE_EFFECTS);
808:       assertEquals(57, Node.LAST_PROP);
809:       assertEquals(54, Node.SLASH_V);
810:       assertEquals(49, Node.DIRECT_EVAL);
811:       assertEquals(1, Node.DECR_FLAG);
812:       assertEquals(12, Node.COLUMN_BITS);
813:       assertEquals(40, Node.ORIGINALNAME_PROP);
814:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
815:       assertEquals(2, Node.POST_FLAG);
816:       assertEquals(30, Node.VAR_ARGS_NAME);
817:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
818:       assertEquals(32, Node.INCRDECR_PROP);
819:       assertEquals(51, Node.STATIC_SOURCE_FILE);
820:       assertEquals(46, Node.IS_NAMESPACE);
821:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
822:       assertEquals(50, Node.FREE_CALL);
823:       assertFalse(iterable0.contains(node0));
824:       assertNotSame(node0, node1);
825:       assertFalse(node0.equals((Object)node1));
826:       assertFalse(node0.isString());
827:       assertFalse(node0.isCase());
828:       assertFalse(node0.isInc());
829:       assertFalse(node0.isSwitch());
830:       assertFalse(node0.isIn());
831:       assertFalse(node0.isGetterDef());
832:       assertEquals(4095, node0.getCharno());
833:       assertFalse(node0.isBreak());
834:       assertFalse(node0.isFor());
835:       assertFalse(node0.isNE());
836:       assertFalse(node0.isIf());
837:       assertEquals(1838, node0.getLineno());
838:       assertFalse(node0.isDelProp());
839:       assertFalse(node0.isHook());
840:       assertFalse(node0.isInstanceOf());
841:       assertFalse(node0.isComma());
842:       assertFalse(node0.isThis());
843:       assertFalse(node0.isRegExp());
844:       assertFalse(node0.isNot());
845:       assertFalse(node0.isWith());
846:       assertFalse(node0.isAnd());
847:       assertEquals((-2735), node0.getType());
848:       assertFalse(node0.isGetProp());
849:       assertFalse(node0.isDebugger());
850:       assertFalse(node0.isObjectLit());
851:       assertFalse(node0.isThrow());
852:       assertFalse(node0.isSetterDef());
853:       assertEquals(7532543, node0.getSourcePosition());
854:       assertFalse(node0.isCast());
855:       assertFalse(node0.isFunction());
856:       assertFalse(node0.isContinue());
857:       assertFalse(node0.isFalse());
858:       assertFalse(node0.isDo());
859:       assertFalse(node0.isWhile());
860:       assertFalse(node0.isOr());
861:       assertFalse(node0.isNew());
862:       assertFalse(node0.isAdd());
863:       assertFalse(node0.isNumber());
864:       assertFalse(node0.isAssign());
865:       assertFalse(node0.hasChildren());
866:       assertFalse(node0.isGetElem());
867:       assertFalse(node0.isNull());
868:       assertFalse(node0.isCall());
869:       assertFalse(node0.hasOneChild());
870:       assertFalse(node0.isName());
871:       assertFalse(node0.isReturn());
872:       assertFalse(node0.isExprResult());
873:       assertFalse(node0.isBlock());
874:       assertFalse(node0.isCatch());
875:       assertFalse(node0.hasMoreThanOneChild());
876:       assertFalse(node0.isDec());
877:       assertFalse(node0.isTypeOf());
878:       assertFalse(node0.isScript());
879:       assertFalse(node0.isDefaultCase());
880:       assertFalse(node0.isTry());
881:       assertFalse(node0.isVoid());
882:       assertFalse(node0.isTrue());
883:       assertFalse(node0.isStringKey());
884:       assertFalse(node0.isEmpty());
885:       assertFalse(node0.isParamList());
886:       assertFalse(node0.isArrayLit());
887:       assertFalse(node0.isLabelName());
888:       assertFalse(node0.isAssignAdd());
889:       assertFalse(node0.isLabel());
890:       assertFalse(node0.isVar());
891:       assertEquals(0, node0.getChildCount());
892:       assertNotNull(iterable0);
893:       
894:       Node node2 = null;
895:       try {
896:         node2 = new Node(29, node1, node1, node0, node0, (-2294), 1024);
897:         fail("Expecting exception: IllegalArgumentException");
898:       
899:       } catch(IllegalArgumentException e) {
900:          //
901:          // no message in exception (getMessage() returned null)
902:          //
903:          verifyException("com.google.common.base.Preconditions", e);
904:       }
905:   }
906: }
RegularFileObject[/tmp/EvoSuite_79_1628256052959/com/google/javascript/rhino/Node_79_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:53 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_79_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_79_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
183:       "com.google.javascript.rhino.Node$AncestorIterable",
184:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
185:       "com.google.common.collect.Lists$RandomAccessListWrapper",
186:       "com.google.common.collect.ImmutableEnumSet",
187:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
188:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
189:       "com.google.javascript.rhino.jstype.EnumElementType",
190:       "com.google.javascript.rhino.jstype.UnionType",
191:       "com.google.common.base.Objects",
192:       "com.google.javascript.rhino.Node$NumberNode",
193:       "com.google.common.collect.SingletonImmutableList",
194:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
195:       "com.google.common.collect.ImmutableCollection$Builder",
196:       "com.google.javascript.rhino.jstype.StaticSlot",
197:       "com.google.common.collect.Iterators$6",
198:       "com.google.common.collect.BiMap",
199:       "com.google.common.collect.Iterators$7",
200:       "com.google.common.collect.AbstractSetMultimap",
201:       "com.google.common.base.Function",
202:       "com.google.common.collect.ImmutableSet",
203:       "com.google.common.collect.Lists$AbstractListWrapper",
204:       "com.google.common.collect.ImmutableMap",
205:       "com.google.common.collect.AbstractIndexedListIterator",
206:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
207:       "com.google.common.collect.Maps$1",
208:       "com.google.javascript.rhino.jstype.EnumType",
209:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
210:       "com.google.common.collect.Iterators$1",
211:       "com.google.common.collect.Iterators$2",
212:       "com.google.javascript.rhino.jstype.NamespaceType",
213:       "com.google.common.collect.Iterators$3",
214:       "com.google.common.collect.Sets",
215:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
216:       "com.google.javascript.rhino.Node$ObjectPropListItem",
217:       "com.google.common.collect.Lists$StringAsImmutableList",
218:       "com.google.common.collect.Lists$2",
219:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
220:       "com.google.common.collect.ImmutableList$Builder",
221:       "com.google.common.collect.Lists$1",
222:       "com.google.javascript.rhino.jstype.StaticReference",
223:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
224:       "com.google.common.collect.Multiset",
225:       "com.google.common.collect.AbstractMultimap",
226:       "com.google.common.collect.Multimap",
227:       "com.google.common.collect.Iterators",
228:       "com.google.common.collect.Maps$ImprovedAbstractMap",
229:       "com.google.common.collect.ImmutableBiMap",
230:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
232:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
233:       "com.google.common.collect.ImmutableList",
234:       "com.google.common.collect.SingletonImmutableBiMap",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
236:       "com.google.javascript.rhino.jstype.StringType",
237:       "com.google.javascript.rhino.Node$AbstractPropListItem",
238:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
239:       "com.google.javascript.rhino.jstype.TemplatizedType",
240:       "com.google.javascript.rhino.jstype.Visitor",
241:       "com.google.javascript.rhino.jstype.NoResolvedType",
242:       "com.google.javascript.rhino.jstype.JSTypeNative",
243:       "com.google.javascript.rhino.jstype.AllType",
244:       "com.google.common.collect.Maps",
245:       "com.google.common.collect.SetMultimap",
246:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
247:       "com.google.common.collect.Maps$EntryTransformer",
248:       "com.google.javascript.rhino.JSTypeExpression",
249:       "com.google.common.collect.Iterators$MergingIterator"
250:     );
251:   } 
252: 
253:   private static void resetClasses() {
254:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_79_tmp__ESTest_scaffolding.class.getClassLoader()); 
255: 
256:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
257:       "com.google.javascript.rhino.Node",
258:       "com.google.javascript.rhino.Node$NumberNode",
259:       "com.google.javascript.rhino.Node$StringNode",
260:       "com.google.javascript.rhino.Node$AbstractPropListItem",
261:       "com.google.javascript.rhino.Node$ObjectPropListItem",
262:       "com.google.javascript.rhino.Node$IntPropListItem",
263:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
264:       "com.google.javascript.rhino.Node$AncestorIterable",
265:       "com.google.javascript.rhino.Node$NodeMismatch",
266:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
267:       "com.google.javascript.rhino.Node$SideEffectFlags",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Preconditions",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.Token",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
342:       "com.google.common.collect.Sets",
343:       "com.google.javascript.rhino.JSDocInfo$Visibility",
344:       "com.google.common.base.Objects",
345:       "com.google.javascript.rhino.jstype.EnumType",
346:       "com.google.javascript.rhino.jstype.EnumElementType",
347:       "com.google.javascript.rhino.InputId",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.jstype.TemplatizedType",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
358:       "com.google.javascript.rhino.jstype.JSType$TypePair",
359:       "com.google.common.collect.AbstractIndexedListIterator",
360:       "com.google.common.collect.Iterators$11",
361:       "com.google.javascript.rhino.jstype.NamedType",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
363:       "com.google.common.collect.Platform",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
371:       "com.google.common.collect.Sets$ImprovedAbstractSet",
372:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
373:       "com.google.common.collect.Hashing",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
375:       "com.google.javascript.rhino.JSTypeExpression",
376:       "com.google.common.collect.ImmutableList$1",
377:       "com.google.common.collect.Iterators$12"
378:     );
379:   }
380: }

[MASTER] 13:20:53.078 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1838);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(1838, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1838);
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(1838, node_SideEffectFlags2.valueOf());
assertNotNull(node_SideEffectFlags2);

boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags2));
assertFalse(boolean0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());

Node node0 = new Node((-2735), 1838, 4433);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(1838, node0.getLineno());
assertFalse(node0.isDelProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertEquals((-2735), node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertEquals(7532543, node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.hasOneChild());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertNotNull(node0);

Node node1 = new Node(77, node0, node0, node0, node0, 37, (-782));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(1838, node0.getLineno());
assertFalse(node0.isDelProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertEquals((-2735), node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertEquals(7532543, node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.hasOneChild());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertEquals(77, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertTrue(node1.isTry());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isThrow());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertNotNull(node1);

Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(1838, node0.getLineno());
assertFalse(node0.isDelProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertEquals((-2735), node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertEquals(7532543, node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.hasOneChild());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertEquals(77, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertTrue(node1.isTry());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isThrow());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertNotNull(node_AncestorIterable0);

Iterator<Node> iterator0 = node_AncestorIterable0.iterator();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(1838, node0.getLineno());
assertFalse(node0.isDelProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertEquals((-2735), node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertEquals(7532543, node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.hasOneChild());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertEquals(77, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertTrue(node1.isTry());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isThrow());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertNotNull(iterator0);

Iterable<Node> iterable0 = node0.children();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(iterable0.contains(node0));
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(1838, node0.getLineno());
assertFalse(node0.isDelProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertEquals((-2735), node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertEquals(7532543, node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.hasOneChild());
assertFalse(node0.isName());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertNotNull(iterable0);

Node node2 = new Node(29, node1, node1, node0, node0, (-2294), 1024);

[MASTER] 13:21:00.216 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_110_1628256060034/com/google/javascript/rhino/Node_110_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_110_1628256060034/com/google/javascript/rhino/Node_110_tmp__ESTest_scaffolding.java]]
[MASTER] 13:21:00.216 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:00.216 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:00.217 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 823
[MASTER] 13:21:00.218 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_110_1628256060034/com/google/javascript/rhino/Node_110_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:21:00 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.JSDocInfo;
11: import com.google.javascript.rhino.Node;
12: import java.util.Iterator;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_110_tmp__ESTest extends Node_110_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1838);
23:       assertEquals(1838, node_SideEffectFlags0.valueOf());
24:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
25:       assertNotNull(node_SideEffectFlags0);
26:       
27:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
28:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
29:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
30:       assertEquals(31, node_SideEffectFlags0.valueOf());
31:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
32:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
33:       assertEquals(31, node_SideEffectFlags1.valueOf());
34:       assertNotNull(node_SideEffectFlags1);
35:       
36:       Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1838);
37:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
38:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
39:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
40:       assertEquals(1838, node_SideEffectFlags2.valueOf());
41:       assertNotNull(node_SideEffectFlags2);
42:       
43:       boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
44:       assertNotSame(node_SideEffectFlags0, node_SideEffectFlags2);
45:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
46:       assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags2));
47:       assertFalse(boolean0);
48:       assertEquals(31, node_SideEffectFlags0.valueOf());
49:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
50:       
51:       Node node0 = new Node((-2735), 1838, 4433);
52:       assertEquals(48, Node.DIRECTIVES);
53:       assertEquals(4095, Node.COLUMN_MASK);
54:       assertEquals(8, Node.FLAG_NO_THROWS);
55:       assertEquals(39, Node.EMPTY_BLOCK);
56:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
57:       assertEquals(55, Node.INFERRED_FUNCTION);
58:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
59:       assertEquals(50, Node.FREE_CALL);
60:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
61:       assertEquals(43, Node.IS_CONSTANT_NAME);
62:       assertEquals(36, Node.QUOTED_PROP);
63:       assertEquals(57, Node.REFLECTED_OBJECT);
64:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
65:       assertEquals(53, Node.INPUT_ID);
66:       assertEquals(52, Node.LENGTH);
67:       assertEquals(15, Node.NO_SIDE_EFFECTS);
68:       assertEquals(40, Node.ORIGINALNAME_PROP);
69:       assertEquals(30, Node.VAR_ARGS_NAME);
70:       assertEquals(57, Node.LAST_PROP);
71:       assertEquals(47, Node.IS_DISPATCHER);
72:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
73:       assertEquals(37, Node.OPT_ARG_NAME);
74:       assertEquals(32, Node.INCRDECR_PROP);
75:       assertEquals(2, Node.POST_FLAG);
76:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
77:       assertEquals(29, Node.JSDOC_INFO_PROP);
78:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
79:       assertEquals(49, Node.DIRECT_EVAL);
80:       assertEquals(51, Node.STATIC_SOURCE_FILE);
81:       assertEquals(46, Node.IS_NAMESPACE);
82:       assertEquals(56, Node.CHANGE_TIME);
83:       assertEquals(54, Node.SLASH_V);
84:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
85:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
86:       assertEquals(1, Node.DECR_FLAG);
87:       assertEquals(12, Node.COLUMN_BITS);
88:       assertFalse(node0.isNE());
89:       assertFalse(node0.isIf());
90:       assertFalse(node0.isDelProp());
91:       assertFalse(node0.isGetterDef());
92:       assertFalse(node0.isEmpty());
93:       assertEquals(1838, node0.getLineno());
94:       assertFalse(node0.isFor());
95:       assertFalse(node0.isDefaultCase());
96:       assertFalse(node0.isRegExp());
97:       assertFalse(node0.isVoid());
98:       assertFalse(node0.isInc());
99:       assertFalse(node0.isIn());
100:       assertFalse(node0.isTrue());
101:       assertFalse(node0.isThis());
102:       assertFalse(node0.isParamList());
103:       assertFalse(node0.isInstanceOf());
104:       assertFalse(node0.isCatch());
105:       assertEquals(0, node0.getChildCount());
106:       assertFalse(node0.isHook());
107:       assertFalse(node0.isBlock());
108:       assertFalse(node0.isVar());
109:       assertFalse(node0.isSwitch());
110:       assertFalse(node0.isTry());
111:       assertEquals(4095, node0.getCharno());
112:       assertFalse(node0.isCase());
113:       assertFalse(node0.isScript());
114:       assertFalse(node0.isArrayLit());
115:       assertFalse(node0.isStringKey());
116:       assertFalse(node0.isDec());
117:       assertFalse(node0.isNumber());
118:       assertFalse(node0.isTypeOf());
119:       assertFalse(node0.isLabelName());
120:       assertFalse(node0.isGetElem());
121:       assertFalse(node0.isCast());
122:       assertFalse(node0.hasMoreThanOneChild());
123:       assertFalse(node0.isContinue());
124:       assertFalse(node0.hasOneChild());
125:       assertFalse(node0.isAssign());
126:       assertFalse(node0.isReturn());
127:       assertFalse(node0.isAssignAdd());
128:       assertFalse(node0.isWhile());
129:       assertFalse(node0.isLabel());
130:       assertFalse(node0.hasChildren());
131:       assertFalse(node0.isWith());
132:       assertFalse(node0.isDo());
133:       assertFalse(node0.isNew());
134:       assertFalse(node0.isExprResult());
135:       assertFalse(node0.isAdd());
136:       assertFalse(node0.isName());
137:       assertFalse(node0.isOr());
138:       assertFalse(node0.isNull());
139:       assertFalse(node0.isComma());
140:       assertFalse(node0.isSetterDef());
141:       assertFalse(node0.isBreak());
142:       assertEquals((-2735), node0.getType());
143:       assertFalse(node0.isGetProp());
144:       assertFalse(node0.isCall());
145:       assertFalse(node0.isFalse());
146:       assertEquals(7532543, node0.getSourcePosition());
147:       assertFalse(node0.isThrow());
148:       assertFalse(node0.isDebugger());
149:       assertFalse(node0.isFunction());
150:       assertFalse(node0.isString());
151:       assertFalse(node0.isAnd());
152:       assertFalse(node0.isObjectLit());
153:       assertFalse(node0.isNot());
154:       assertNotNull(node0);
155:       
156:       Node node1 = new Node(77, node0, node0, node0, node0, 37, (-782));
157:       assertEquals(48, Node.DIRECTIVES);
158:       assertEquals(4095, Node.COLUMN_MASK);
159:       assertEquals(8, Node.FLAG_NO_THROWS);
160:       assertEquals(39, Node.EMPTY_BLOCK);
161:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
162:       assertEquals(55, Node.INFERRED_FUNCTION);
163:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
164:       assertEquals(50, Node.FREE_CALL);
165:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
166:       assertEquals(43, Node.IS_CONSTANT_NAME);
167:       assertEquals(36, Node.QUOTED_PROP);
168:       assertEquals(57, Node.REFLECTED_OBJECT);
169:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
170:       assertEquals(53, Node.INPUT_ID);
171:       assertEquals(52, Node.LENGTH);
172:       assertEquals(15, Node.NO_SIDE_EFFECTS);
173:       assertEquals(40, Node.ORIGINALNAME_PROP);
174:       assertEquals(30, Node.VAR_ARGS_NAME);
175:       assertEquals(57, Node.LAST_PROP);
176:       assertEquals(47, Node.IS_DISPATCHER);
177:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
178:       assertEquals(37, Node.OPT_ARG_NAME);
179:       assertEquals(32, Node.INCRDECR_PROP);
180:       assertEquals(2, Node.POST_FLAG);
181:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
182:       assertEquals(29, Node.JSDOC_INFO_PROP);
183:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
184:       assertEquals(49, Node.DIRECT_EVAL);
185:       assertEquals(51, Node.STATIC_SOURCE_FILE);
186:       assertEquals(46, Node.IS_NAMESPACE);
187:       assertEquals(56, Node.CHANGE_TIME);
188:       assertEquals(54, Node.SLASH_V);
189:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
190:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
191:       assertEquals(1, Node.DECR_FLAG);
192:       assertEquals(12, Node.COLUMN_BITS);
193:       assertEquals(12, Node.COLUMN_BITS);
194:       assertEquals(51, Node.STATIC_SOURCE_FILE);
195:       assertEquals(32, Node.INCRDECR_PROP);
196:       assertEquals(49, Node.DIRECT_EVAL);
197:       assertEquals(1, Node.DECR_FLAG);
198:       assertEquals(37, Node.OPT_ARG_NAME);
199:       assertEquals(15, Node.NO_SIDE_EFFECTS);
200:       assertEquals(56, Node.CHANGE_TIME);
201:       assertEquals(46, Node.IS_NAMESPACE);
202:       assertEquals(54, Node.SLASH_V);
203:       assertEquals(57, Node.REFLECTED_OBJECT);
204:       assertEquals(52, Node.LENGTH);
205:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
206:       assertEquals(29, Node.JSDOC_INFO_PROP);
207:       assertEquals(53, Node.INPUT_ID);
208:       assertEquals(40, Node.ORIGINALNAME_PROP);
209:       assertEquals(2, Node.POST_FLAG);
210:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
211:       assertEquals(57, Node.LAST_PROP);
212:       assertEquals(30, Node.VAR_ARGS_NAME);
213:       assertEquals(47, Node.IS_DISPATCHER);
214:       assertEquals(4095, Node.COLUMN_MASK);
215:       assertEquals(55, Node.INFERRED_FUNCTION);
216:       assertEquals(48, Node.DIRECTIVES);
217:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
218:       assertEquals(39, Node.EMPTY_BLOCK);
219:       assertEquals(36, Node.QUOTED_PROP);
220:       assertEquals(43, Node.IS_CONSTANT_NAME);
221:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
222:       assertEquals(8, Node.FLAG_NO_THROWS);
223:       assertEquals(50, Node.FREE_CALL);
224:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
225:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
226:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
227:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
228:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
229:       assertFalse(node1.equals((Object)node0));
230:       assertFalse(node0.isNE());
231:       assertFalse(node0.isIf());
232:       assertFalse(node0.isDelProp());
233:       assertFalse(node0.isGetterDef());
234:       assertFalse(node0.isEmpty());
235:       assertEquals(1838, node0.getLineno());
236:       assertFalse(node0.isFor());
237:       assertFalse(node0.isDefaultCase());
238:       assertFalse(node0.isRegExp());
239:       assertFalse(node0.isVoid());
240:       assertFalse(node0.isInc());
241:       assertFalse(node0.isIn());
242:       assertFalse(node0.isTrue());
243:       assertFalse(node0.isThis());
244:       assertFalse(node0.isParamList());
245:       assertFalse(node0.isInstanceOf());
246:       assertFalse(node0.isCatch());
247:       assertEquals(0, node0.getChildCount());
248:       assertFalse(node0.isHook());
249:       assertFalse(node0.isBlock());
250:       assertFalse(node0.isVar());
251:       assertFalse(node0.isSwitch());
252:       assertFalse(node0.isTry());
253:       assertEquals(4095, node0.getCharno());
254:       assertFalse(node0.isCase());
255:       assertFalse(node0.isScript());
256:       assertFalse(node0.isArrayLit());
257:       assertFalse(node0.isStringKey());
258:       assertFalse(node0.isDec());
259:       assertFalse(node0.isNumber());
260:       assertFalse(node0.isTypeOf());
261:       assertFalse(node0.isLabelName());
262:       assertFalse(node0.isGetElem());
263:       assertFalse(node0.isCast());
264:       assertFalse(node0.hasMoreThanOneChild());
265:       assertFalse(node0.isContinue());
266:       assertFalse(node0.hasOneChild());
267:       assertFalse(node0.isAssign());
268:       assertFalse(node0.isReturn());
269:       assertFalse(node0.isAssignAdd());
270:       assertFalse(node0.isWhile());
271:       assertFalse(node0.isLabel());
272:       assertFalse(node0.hasChildren());
273:       assertFalse(node0.isWith());
274:       assertFalse(node0.isDo());
275:       assertFalse(node0.isNew());
276:       assertFalse(node0.isExprResult());
277:       assertFalse(node0.isAdd());
278:       assertFalse(node0.isName());
279:       assertFalse(node0.isOr());
280:       assertFalse(node0.isNull());
281:       assertFalse(node0.isComma());
282:       assertFalse(node0.isSetterDef());
283:       assertFalse(node0.isBreak());
284:       assertEquals((-2735), node0.getType());
285:       assertFalse(node0.isGetProp());
286:       assertFalse(node0.isCall());
287:       assertFalse(node0.isFalse());
288:       assertEquals(7532543, node0.getSourcePosition());
289:       assertFalse(node0.isThrow());
290:       assertFalse(node0.isDebugger());
291:       assertFalse(node0.isFunction());
292:       assertFalse(node0.isString());
293:       assertFalse(node0.isAnd());
294:       assertFalse(node0.isObjectLit());
295:       assertFalse(node0.isNot());
296:       assertEquals(77, node1.getType());
297:       assertFalse(node1.isCatch());
298:       assertFalse(node1.isSetterDef());
299:       assertFalse(node1.isDefaultCase());
300:       assertFalse(node1.isFunction());
301:       assertFalse(node1.isRegExp());
302:       assertFalse(node1.isVar());
303:       assertFalse(node1.isAdd());
304:       assertFalse(node1.isCall());
305:       assertFalse(node1.isVoid());
306:       assertFalse(node1.isNew());
307:       assertFalse(node1.isDelProp());
308:       assertFalse(node1.isName());
309:       assertFalse(node1.isEmpty());
310:       assertFalse(node1.isIf());
311:       assertFalse(node1.isNE());
312:       assertFalse(node1.isNull());
313:       assertFalse(node1.isTrue());
314:       assertEquals(1, node1.getChildCount());
315:       assertEquals((-1), node1.getLineno());
316:       assertTrue(node1.hasChildren());
317:       assertFalse(node1.isOr());
318:       assertFalse(node1.isAssignAdd());
319:       assertFalse(node1.isCase());
320:       assertFalse(node1.isFor());
321:       assertFalse(node1.isDo());
322:       assertFalse(node1.hasMoreThanOneChild());
323:       assertFalse(node1.isBlock());
324:       assertFalse(node1.isLabel());
325:       assertFalse(node1.isSwitch());
326:       assertFalse(node1.isScript());
327:       assertFalse(node1.isArrayLit());
328:       assertFalse(node1.isGetterDef());
329:       assertFalse(node1.isLabelName());
330:       assertFalse(node1.isNumber());
331:       assertFalse(node1.isStringKey());
332:       assertFalse(node1.isParamList());
333:       assertEquals((-1), node1.getCharno());
334:       assertFalse(node1.isInstanceOf());
335:       assertFalse(node1.isGetProp());
336:       assertFalse(node1.isBreak());
337:       assertFalse(node1.isWith());
338:       assertFalse(node1.isFalse());
339:       assertFalse(node1.isComma());
340:       assertFalse(node1.isThis());
341:       assertFalse(node1.isThrow());
342:       assertFalse(node1.isHook());
343:       assertFalse(node1.isInc());
344:       assertFalse(node1.isExprResult());
345:       assertFalse(node1.isGetElem());
346:       assertFalse(node1.isReturn());
347:       assertFalse(node1.isIn());
348:       assertTrue(node1.hasOneChild());
349:       assertFalse(node1.isWhile());
350:       assertFalse(node1.isAssign());
351:       assertFalse(node1.isContinue());
352:       assertFalse(node1.isTypeOf());
353:       assertFalse(node1.isDec());
354:       assertTrue(node1.isTry());
355:       assertFalse(node1.isCast());
356:       assertFalse(node1.isNot());
357:       assertFalse(node1.isAnd());
358:       assertFalse(node1.isString());
359:       assertFalse(node1.isObjectLit());
360:       assertEquals((-1), node1.getSourcePosition());
361:       assertFalse(node1.isDebugger());
362:       assertNotNull(node1);
363:       
364:       Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
365:       assertEquals(48, Node.DIRECTIVES);
366:       assertEquals(4095, Node.COLUMN_MASK);
367:       assertEquals(8, Node.FLAG_NO_THROWS);
368:       assertEquals(39, Node.EMPTY_BLOCK);
369:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
370:       assertEquals(55, Node.INFERRED_FUNCTION);
371:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
372:       assertEquals(50, Node.FREE_CALL);
373:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
374:       assertEquals(43, Node.IS_CONSTANT_NAME);
375:       assertEquals(36, Node.QUOTED_PROP);
376:       assertEquals(57, Node.REFLECTED_OBJECT);
377:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
378:       assertEquals(53, Node.INPUT_ID);
379:       assertEquals(52, Node.LENGTH);
380:       assertEquals(15, Node.NO_SIDE_EFFECTS);
381:       assertEquals(40, Node.ORIGINALNAME_PROP);
382:       assertEquals(30, Node.VAR_ARGS_NAME);
383:       assertEquals(57, Node.LAST_PROP);
384:       assertEquals(47, Node.IS_DISPATCHER);
385:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
386:       assertEquals(37, Node.OPT_ARG_NAME);
387:       assertEquals(32, Node.INCRDECR_PROP);
388:       assertEquals(2, Node.POST_FLAG);
389:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
390:       assertEquals(29, Node.JSDOC_INFO_PROP);
391:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
392:       assertEquals(49, Node.DIRECT_EVAL);
393:       assertEquals(51, Node.STATIC_SOURCE_FILE);
394:       assertEquals(46, Node.IS_NAMESPACE);
395:       assertEquals(56, Node.CHANGE_TIME);
396:       assertEquals(54, Node.SLASH_V);
397:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
398:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
399:       assertEquals(1, Node.DECR_FLAG);
400:       assertEquals(12, Node.COLUMN_BITS);
401:       assertEquals(12, Node.COLUMN_BITS);
402:       assertEquals(51, Node.STATIC_SOURCE_FILE);
403:       assertEquals(32, Node.INCRDECR_PROP);
404:       assertEquals(49, Node.DIRECT_EVAL);
405:       assertEquals(1, Node.DECR_FLAG);
406:       assertEquals(37, Node.OPT_ARG_NAME);
407:       assertEquals(15, Node.NO_SIDE_EFFECTS);
408:       assertEquals(56, Node.CHANGE_TIME);
409:       assertEquals(46, Node.IS_NAMESPACE);
410:       assertEquals(54, Node.SLASH_V);
411:       assertEquals(57, Node.REFLECTED_OBJECT);
412:       assertEquals(52, Node.LENGTH);
413:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
414:       assertEquals(29, Node.JSDOC_INFO_PROP);
415:       assertEquals(53, Node.INPUT_ID);
416:       assertEquals(40, Node.ORIGINALNAME_PROP);
417:       assertEquals(2, Node.POST_FLAG);
418:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
419:       assertEquals(57, Node.LAST_PROP);
420:       assertEquals(30, Node.VAR_ARGS_NAME);
421:       assertEquals(47, Node.IS_DISPATCHER);
422:       assertEquals(4095, Node.COLUMN_MASK);
423:       assertEquals(55, Node.INFERRED_FUNCTION);
424:       assertEquals(48, Node.DIRECTIVES);
425:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
426:       assertEquals(39, Node.EMPTY_BLOCK);
427:       assertEquals(36, Node.QUOTED_PROP);
428:       assertEquals(43, Node.IS_CONSTANT_NAME);
429:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
430:       assertEquals(8, Node.FLAG_NO_THROWS);
431:       assertEquals(50, Node.FREE_CALL);
432:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
433:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
434:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
435:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
436:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
437:       assertNotSame(node0, node1);
438:       assertNotSame(node1, node0);
439:       assertFalse(node0.equals((Object)node1));
440:       assertFalse(node1.equals((Object)node0));
441:       assertFalse(node0.isNE());
442:       assertFalse(node0.isIf());
443:       assertFalse(node0.isDelProp());
444:       assertFalse(node0.isGetterDef());
445:       assertFalse(node0.isEmpty());
446:       assertEquals(1838, node0.getLineno());
447:       assertFalse(node0.isFor());
448:       assertFalse(node0.isDefaultCase());
449:       assertFalse(node0.isRegExp());
450:       assertFalse(node0.isVoid());
451:       assertFalse(node0.isInc());
452:       assertFalse(node0.isIn());
453:       assertFalse(node0.isTrue());
454:       assertFalse(node0.isThis());
455:       assertFalse(node0.isParamList());
456:       assertFalse(node0.isInstanceOf());
457:       assertFalse(node0.isCatch());
458:       assertEquals(0, node0.getChildCount());
459:       assertFalse(node0.isHook());
460:       assertFalse(node0.isBlock());
461:       assertFalse(node0.isVar());
462:       assertFalse(node0.isSwitch());
463:       assertFalse(node0.isTry());
464:       assertEquals(4095, node0.getCharno());
465:       assertFalse(node0.isCase());
466:       assertFalse(node0.isScript());
467:       assertFalse(node0.isArrayLit());
468:       assertFalse(node0.isStringKey());
469:       assertFalse(node0.isDec());
470:       assertFalse(node0.isNumber());
471:       assertFalse(node0.isTypeOf());
472:       assertFalse(node0.isLabelName());
473:       assertFalse(node0.isGetElem());
474:       assertFalse(node0.isCast());
475:       assertFalse(node0.hasMoreThanOneChild());
476:       assertFalse(node0.isContinue());
477:       assertFalse(node0.hasOneChild());
478:       assertFalse(node0.isAssign());
479:       assertFalse(node0.isReturn());
480:       assertFalse(node0.isAssignAdd());
481:       assertFalse(node0.isWhile());
482:       assertFalse(node0.isLabel());
483:       assertFalse(node0.hasChildren());
484:       assertFalse(node0.isWith());
485:       assertFalse(node0.isDo());
486:       assertFalse(node0.isNew());
487:       assertFalse(node0.isExprResult());
488:       assertFalse(node0.isAdd());
489:       assertFalse(node0.isName());
490:       assertFalse(node0.isOr());
491:       assertFalse(node0.isNull());
492:       assertFalse(node0.isComma());
493:       assertFalse(node0.isSetterDef());
494:       assertFalse(node0.isBreak());
495:       assertEquals((-2735), node0.getType());
496:       assertFalse(node0.isGetProp());
497:       assertFalse(node0.isCall());
498:       assertFalse(node0.isFalse());
499:       assertEquals(7532543, node0.getSourcePosition());
500:       assertFalse(node0.isThrow());
501:       assertFalse(node0.isDebugger());
502:       assertFalse(node0.isFunction());
503:       assertFalse(node0.isString());
504:       assertFalse(node0.isAnd());
505:       assertFalse(node0.isObjectLit());
506:       assertFalse(node0.isNot());
507:       assertEquals(77, node1.getType());
508:       assertFalse(node1.isCatch());
509:       assertFalse(node1.isSetterDef());
510:       assertFalse(node1.isDefaultCase());
511:       assertFalse(node1.isFunction());
512:       assertFalse(node1.isRegExp());
513:       assertFalse(node1.isVar());
514:       assertFalse(node1.isAdd());
515:       assertFalse(node1.isCall());
516:       assertFalse(node1.isVoid());
517:       assertFalse(node1.isNew());
518:       assertFalse(node1.isDelProp());
519:       assertFalse(node1.isName());
520:       assertFalse(node1.isEmpty());
521:       assertFalse(node1.isIf());
522:       assertFalse(node1.isNE());
523:       assertFalse(node1.isNull());
524:       assertFalse(node1.isTrue());
525:       assertEquals(1, node1.getChildCount());
526:       assertEquals((-1), node1.getLineno());
527:       assertTrue(node1.hasChildren());
528:       assertFalse(node1.isOr());
529:       assertFalse(node1.isAssignAdd());
530:       assertFalse(node1.isCase());
531:       assertFalse(node1.isFor());
532:       assertFalse(node1.isDo());
533:       assertFalse(node1.hasMoreThanOneChild());
534:       assertFalse(node1.isBlock());
535:       assertFalse(node1.isLabel());
536:       assertFalse(node1.isSwitch());
537:       assertFalse(node1.isScript());
538:       assertFalse(node1.isArrayLit());
539:       assertFalse(node1.isGetterDef());
540:       assertFalse(node1.isLabelName());
541:       assertFalse(node1.isNumber());
542:       assertFalse(node1.isStringKey());
543:       assertFalse(node1.isParamList());
544:       assertEquals((-1), node1.getCharno());
545:       assertFalse(node1.isInstanceOf());
546:       assertFalse(node1.isGetProp());
547:       assertFalse(node1.isBreak());
548:       assertFalse(node1.isWith());
549:       assertFalse(node1.isFalse());
550:       assertFalse(node1.isComma());
551:       assertFalse(node1.isThis());
552:       assertFalse(node1.isThrow());
553:       assertFalse(node1.isHook());
554:       assertFalse(node1.isInc());
555:       assertFalse(node1.isExprResult());
556:       assertFalse(node1.isGetElem());
557:       assertFalse(node1.isReturn());
558:       assertFalse(node1.isIn());
559:       assertTrue(node1.hasOneChild());
560:       assertFalse(node1.isWhile());
561:       assertFalse(node1.isAssign());
562:       assertFalse(node1.isContinue());
563:       assertFalse(node1.isTypeOf());
564:       assertFalse(node1.isDec());
565:       assertTrue(node1.isTry());
566:       assertFalse(node1.isCast());
567:       assertFalse(node1.isNot());
568:       assertFalse(node1.isAnd());
569:       assertFalse(node1.isString());
570:       assertFalse(node1.isObjectLit());
571:       assertEquals((-1), node1.getSourcePosition());
572:       assertFalse(node1.isDebugger());
573:       assertNotNull(node_AncestorIterable0);
574:       
575:       Iterator<Node> iterator0 = node_AncestorIterable0.iterator();
576:       assertEquals(48, Node.DIRECTIVES);
577:       assertEquals(4095, Node.COLUMN_MASK);
578:       assertEquals(8, Node.FLAG_NO_THROWS);
579:       assertEquals(39, Node.EMPTY_BLOCK);
580:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
581:       assertEquals(55, Node.INFERRED_FUNCTION);
582:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
583:       assertEquals(50, Node.FREE_CALL);
584:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
585:       assertEquals(43, Node.IS_CONSTANT_NAME);
586:       assertEquals(36, Node.QUOTED_PROP);
587:       assertEquals(57, Node.REFLECTED_OBJECT);
588:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
589:       assertEquals(53, Node.INPUT_ID);
590:       assertEquals(52, Node.LENGTH);
591:       assertEquals(15, Node.NO_SIDE_EFFECTS);
592:       assertEquals(40, Node.ORIGINALNAME_PROP);
593:       assertEquals(30, Node.VAR_ARGS_NAME);
594:       assertEquals(57, Node.LAST_PROP);
595:       assertEquals(47, Node.IS_DISPATCHER);
596:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
597:       assertEquals(37, Node.OPT_ARG_NAME);
598:       assertEquals(32, Node.INCRDECR_PROP);
599:       assertEquals(2, Node.POST_FLAG);
600:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
601:       assertEquals(29, Node.JSDOC_INFO_PROP);
602:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
603:       assertEquals(49, Node.DIRECT_EVAL);
604:       assertEquals(51, Node.STATIC_SOURCE_FILE);
605:       assertEquals(46, Node.IS_NAMESPACE);
606:       assertEquals(56, Node.CHANGE_TIME);
607:       assertEquals(54, Node.SLASH_V);
608:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
609:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
610:       assertEquals(1, Node.DECR_FLAG);
611:       assertEquals(12, Node.COLUMN_BITS);
612:       assertEquals(12, Node.COLUMN_BITS);
613:       assertEquals(51, Node.STATIC_SOURCE_FILE);
614:       assertEquals(32, Node.INCRDECR_PROP);
615:       assertEquals(49, Node.DIRECT_EVAL);
616:       assertEquals(1, Node.DECR_FLAG);
617:       assertEquals(37, Node.OPT_ARG_NAME);
618:       assertEquals(15, Node.NO_SIDE_EFFECTS);
619:       assertEquals(56, Node.CHANGE_TIME);
620:       assertEquals(46, Node.IS_NAMESPACE);
621:       assertEquals(54, Node.SLASH_V);
622:       assertEquals(57, Node.REFLECTED_OBJECT);
623:       assertEquals(52, Node.LENGTH);
624:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
625:       assertEquals(29, Node.JSDOC_INFO_PROP);
626:       assertEquals(53, Node.INPUT_ID);
627:       assertEquals(40, Node.ORIGINALNAME_PROP);
628:       assertEquals(2, Node.POST_FLAG);
629:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
630:       assertEquals(57, Node.LAST_PROP);
631:       assertEquals(30, Node.VAR_ARGS_NAME);
632:       assertEquals(47, Node.IS_DISPATCHER);
633:       assertEquals(4095, Node.COLUMN_MASK);
634:       assertEquals(55, Node.INFERRED_FUNCTION);
635:       assertEquals(48, Node.DIRECTIVES);
636:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
637:       assertEquals(39, Node.EMPTY_BLOCK);
638:       assertEquals(36, Node.QUOTED_PROP);
639:       assertEquals(43, Node.IS_CONSTANT_NAME);
640:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
641:       assertEquals(8, Node.FLAG_NO_THROWS);
642:       assertEquals(50, Node.FREE_CALL);
643:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
644:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
645:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
646:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
647:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
648:       assertNotSame(node0, node1);
649:       assertNotSame(node1, node0);
650:       assertFalse(node0.equals((Object)node1));
651:       assertFalse(node1.equals((Object)node0));
652:       assertFalse(node0.isNE());
653:       assertFalse(node0.isIf());
654:       assertFalse(node0.isDelProp());
655:       assertFalse(node0.isGetterDef());
656:       assertFalse(node0.isEmpty());
657:       assertEquals(1838, node0.getLineno());
658:       assertFalse(node0.isFor());
659:       assertFalse(node0.isDefaultCase());
660:       assertFalse(node0.isRegExp());
661:       assertFalse(node0.isVoid());
662:       assertFalse(node0.isInc());
663:       assertFalse(node0.isIn());
664:       assertFalse(node0.isTrue());
665:       assertFalse(node0.isThis());
666:       assertFalse(node0.isParamList());
667:       assertFalse(node0.isInstanceOf());
668:       assertFalse(node0.isCatch());
669:       assertEquals(0, node0.getChildCount());
670:       assertFalse(node0.isHook());
671:       assertFalse(node0.isBlock());
672:       assertFalse(node0.isVar());
673:       assertFalse(node0.isSwitch());
674:       assertFalse(node0.isTry());
675:       assertEquals(4095, node0.getCharno());
676:       assertFalse(node0.isCase());
677:       assertFalse(node0.isScript());
678:       assertFalse(node0.isArrayLit());
679:       assertFalse(node0.isStringKey());
680:       assertFalse(node0.isDec());
681:       assertFalse(node0.isNumber());
682:       assertFalse(node0.isTypeOf());
683:       assertFalse(node0.isLabelName());
684:       assertFalse(node0.isGetElem());
685:       assertFalse(node0.isCast());
686:       assertFalse(node0.hasMoreThanOneChild());
687:       assertFalse(node0.isContinue());
688:       assertFalse(node0.hasOneChild());
689:       assertFalse(node0.isAssign());
690:       assertFalse(node0.isReturn());
691:       assertFalse(node0.isAssignAdd());
692:       assertFalse(node0.isWhile());
693:       assertFalse(node0.isLabel());
694:       assertFalse(node0.hasChildren());
695:       assertFalse(node0.isWith());
696:       assertFalse(node0.isDo());
697:       assertFalse(node0.isNew());
698:       assertFalse(node0.isExprResult());
699:       assertFalse(node0.isAdd());
700:       assertFalse(node0.isName());
701:       assertFalse(node0.isOr());
702:       assertFalse(node0.isNull());
703:       assertFalse(node0.isComma());
704:       assertFalse(node0.isSetterDef());
705:       assertFalse(node0.isBreak());
706:       assertEquals((-2735), node0.getType());
707:       assertFalse(node0.isGetProp());
708:       assertFalse(node0.isCall());
709:       assertFalse(node0.isFalse());
710:       assertEquals(7532543, node0.getSourcePosition());
711:       assertFalse(node0.isThrow());
712:       assertFalse(node0.isDebugger());
713:       assertFalse(node0.isFunction());
714:       assertFalse(node0.isString());
715:       assertFalse(node0.isAnd());
716:       assertFalse(node0.isObjectLit());
717:       assertFalse(node0.isNot());
718:       assertEquals(77, node1.getType());
719:       assertFalse(node1.isCatch());
720:       assertFalse(node1.isSetterDef());
721:       assertFalse(node1.isDefaultCase());
722:       assertFalse(node1.isFunction());
723:       assertFalse(node1.isRegExp());
724:       assertFalse(node1.isVar());
725:       assertFalse(node1.isAdd());
726:       assertFalse(node1.isCall());
727:       assertFalse(node1.isVoid());
728:       assertFalse(node1.isNew());
729:       assertFalse(node1.isDelProp());
730:       assertFalse(node1.isName());
731:       assertFalse(node1.isEmpty());
732:       assertFalse(node1.isIf());
733:       assertFalse(node1.isNE());
734:       assertFalse(node1.isNull());
735:       assertFalse(node1.isTrue());
736:       assertEquals(1, node1.getChildCount());
737:       assertEquals((-1), node1.getLineno());
738:       assertTrue(node1.hasChildren());
739:       assertFalse(node1.isOr());
740:       assertFalse(node1.isAssignAdd());
741:       assertFalse(node1.isCase());
742:       assertFalse(node1.isFor());
743:       assertFalse(node1.isDo());
744:       assertFalse(node1.hasMoreThanOneChild());
745:       assertFalse(node1.isBlock());
746:       assertFalse(node1.isLabel());
747:       assertFalse(node1.isSwitch());
748:       assertFalse(node1.isScript());
749:       assertFalse(node1.isArrayLit());
750:       assertFalse(node1.isGetterDef());
751:       assertFalse(node1.isLabelName());
752:       assertFalse(node1.isNumber());
753:       assertFalse(node1.isStringKey());
754:       assertFalse(node1.isParamList());
755:       assertEquals((-1), node1.getCharno());
756:       assertFalse(node1.isInstanceOf());
757:       assertFalse(node1.isGetProp());
758:       assertFalse(node1.isBreak());
759:       assertFalse(node1.isWith());
760:       assertFalse(node1.isFalse());
761:       assertFalse(node1.isComma());
762:       assertFalse(node1.isThis());
763:       assertFalse(node1.isThrow());
764:       assertFalse(node1.isHook());
765:       assertFalse(node1.isInc());
766:       assertFalse(node1.isExprResult());
767:       assertFalse(node1.isGetElem());
768:       assertFalse(node1.isReturn());
769:       assertFalse(node1.isIn());
770:       assertTrue(node1.hasOneChild());
771:       assertFalse(node1.isWhile());
772:       assertFalse(node1.isAssign());
773:       assertFalse(node1.isContinue());
774:       assertFalse(node1.isTypeOf());
775:       assertFalse(node1.isDec());
776:       assertTrue(node1.isTry());
777:       assertFalse(node1.isCast());
778:       assertFalse(node1.isNot());
779:       assertFalse(node1.isAnd());
780:       assertFalse(node1.isString());
781:       assertFalse(node1.isObjectLit());
782:       assertEquals((-1), node1.getSourcePosition());
783:       assertFalse(node1.isDebugger());
784:       assertNotNull(iterator0);
785:       
786:       Iterable<Node> iterable0 = node0.children();
787:       assertEquals(48, Node.DIRECTIVES);
788:       assertEquals(4095, Node.COLUMN_MASK);
789:       assertEquals(8, Node.FLAG_NO_THROWS);
790:       assertEquals(39, Node.EMPTY_BLOCK);
791:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
792:       assertEquals(55, Node.INFERRED_FUNCTION);
793:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
794:       assertEquals(50, Node.FREE_CALL);
795:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
796:       assertEquals(43, Node.IS_CONSTANT_NAME);
797:       assertEquals(36, Node.QUOTED_PROP);
798:       assertEquals(57, Node.REFLECTED_OBJECT);
799:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
800:       assertEquals(53, Node.INPUT_ID);
801:       assertEquals(52, Node.LENGTH);
802:       assertEquals(15, Node.NO_SIDE_EFFECTS);
803:       assertEquals(40, Node.ORIGINALNAME_PROP);
804:       assertEquals(30, Node.VAR_ARGS_NAME);
805:       assertEquals(57, Node.LAST_PROP);
806:       assertEquals(47, Node.IS_DISPATCHER);
807:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
808:       assertEquals(37, Node.OPT_ARG_NAME);
809:       assertEquals(32, Node.INCRDECR_PROP);
810:       assertEquals(2, Node.POST_FLAG);
811:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
812:       assertEquals(29, Node.JSDOC_INFO_PROP);
813:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
814:       assertEquals(49, Node.DIRECT_EVAL);
815:       assertEquals(51, Node.STATIC_SOURCE_FILE);
816:       assertEquals(46, Node.IS_NAMESPACE);
817:       assertEquals(56, Node.CHANGE_TIME);
818:       assertEquals(54, Node.SLASH_V);
819:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
820:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
821:       assertEquals(1, Node.DECR_FLAG);
822:       assertEquals(12, Node.COLUMN_BITS);
823:       assertFalse(iterable0.contains(node1));
824:       assertNotSame(node0, node1);
825:       assertFalse(node0.equals((Object)node1));
826:       assertFalse(node0.isNE());
827:       assertFalse(node0.isIf());
828:       assertFalse(node0.isDelProp());
829:       assertFalse(node0.isGetterDef());
830:       assertFalse(node0.isEmpty());
831:       assertEquals(1838, node0.getLineno());
832:       assertFalse(node0.isFor());
833:       assertFalse(node0.isDefaultCase());
834:       assertFalse(node0.isRegExp());
835:       assertFalse(node0.isVoid());
836:       assertFalse(node0.isInc());
837:       assertFalse(node0.isIn());
838:       assertFalse(node0.isTrue());
839:       assertFalse(node0.isThis());
840:       assertFalse(node0.isParamList());
841:       assertFalse(node0.isInstanceOf());
842:       assertFalse(node0.isCatch());
843:       assertEquals(0, node0.getChildCount());
844:       assertFalse(node0.isHook());
845:       assertFalse(node0.isBlock());
846:       assertFalse(node0.isVar());
847:       assertFalse(node0.isSwitch());
848:       assertFalse(node0.isTry());
849:       assertEquals(4095, node0.getCharno());
850:       assertFalse(node0.isCase());
851:       assertFalse(node0.isScript());
852:       assertFalse(node0.isArrayLit());
853:       assertFalse(node0.isStringKey());
854:       assertFalse(node0.isDec());
855:       assertFalse(node0.isNumber());
856:       assertFalse(node0.isTypeOf());
857:       assertFalse(node0.isLabelName());
858:       assertFalse(node0.isGetElem());
859:       assertFalse(node0.isCast());
860:       assertFalse(node0.hasMoreThanOneChild());
861:       assertFalse(node0.isContinue());
862:       assertFalse(node0.hasOneChild());
863:       assertFalse(node0.isAssign());
864:       assertFalse(node0.isReturn());
865:       assertFalse(node0.isAssignAdd());
866:       assertFalse(node0.isWhile());
867:       assertFalse(node0.isLabel());
868:       assertFalse(node0.hasChildren());
869:       assertFalse(node0.isWith());
870:       assertFalse(node0.isDo());
871:       assertFalse(node0.isNew());
872:       assertFalse(node0.isExprResult());
873:       assertFalse(node0.isAdd());
874:       assertFalse(node0.isName());
875:       assertFalse(node0.isOr());
876:       assertFalse(node0.isNull());
877:       assertFalse(node0.isComma());
878:       assertFalse(node0.isSetterDef());
879:       assertFalse(node0.isBreak());
880:       assertEquals((-2735), node0.getType());
881:       assertFalse(node0.isGetProp());
882:       assertFalse(node0.isCall());
883:       assertFalse(node0.isFalse());
884:       assertEquals(7532543, node0.getSourcePosition());
885:       assertFalse(node0.isThrow());
886:       assertFalse(node0.isDebugger());
887:       assertFalse(node0.isFunction());
888:       assertFalse(node0.isString());
889:       assertFalse(node0.isAnd());
890:       assertFalse(node0.isObjectLit());
891:       assertFalse(node0.isNot());
892:       assertNotNull(iterable0);
893:       
894:       Node node2 = Node.newNumber(2144.489857984);
895:       assertEquals(49, Node.DIRECT_EVAL);
896:       assertEquals(30, Node.VAR_ARGS_NAME);
897:       assertEquals(51, Node.STATIC_SOURCE_FILE);
898:       assertEquals(1, Node.DECR_FLAG);
899:       assertEquals(32, Node.INCRDECR_PROP);
900:       assertEquals(46, Node.IS_NAMESPACE);
901:       assertEquals(57, Node.LAST_PROP);
902:       assertEquals(12, Node.COLUMN_BITS);
903:       assertEquals(54, Node.SLASH_V);
904:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
905:       assertEquals(52, Node.LENGTH);
906:       assertEquals(15, Node.NO_SIDE_EFFECTS);
907:       assertEquals(29, Node.JSDOC_INFO_PROP);
908:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
909:       assertEquals(57, Node.REFLECTED_OBJECT);
910:       assertEquals(56, Node.CHANGE_TIME);
911:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
912:       assertEquals(37, Node.OPT_ARG_NAME);
913:       assertEquals(48, Node.DIRECTIVES);
914:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
915:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
916:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
917:       assertEquals(4095, Node.COLUMN_MASK);
918:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
919:       assertEquals(43, Node.IS_CONSTANT_NAME);
920:       assertEquals(8, Node.FLAG_NO_THROWS);
921:       assertEquals(39, Node.EMPTY_BLOCK);
922:       assertEquals(36, Node.QUOTED_PROP);
923:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
924:       assertEquals(53, Node.INPUT_ID);
925:       assertEquals(55, Node.INFERRED_FUNCTION);
926:       assertEquals(40, Node.ORIGINALNAME_PROP);
927:       assertEquals(50, Node.FREE_CALL);
928:       assertEquals(47, Node.IS_DISPATCHER);
929:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
930:       assertEquals(2, Node.POST_FLAG);
931:       assertFalse(node2.equals((Object)node1));
932:       assertFalse(node2.equals((Object)node0));
933:       assertEquals(0, node2.getChildCount());
934:       assertFalse(node2.isParamList());
935:       assertFalse(node2.isFunction());
936:       assertFalse(node2.isRegExp());
937:       assertFalse(node2.isVoid());
938:       assertFalse(node2.isCatch());
939:       assertFalse(node2.isCall());
940:       assertFalse(node2.isArrayLit());
941:       assertFalse(node2.isTry());
942:       assertFalse(node2.isBlock());
943:       assertFalse(node2.isStringKey());
944:       assertFalse(node2.isDebugger());
945:       assertFalse(node2.isFor());
946:       assertFalse(node2.isGetterDef());
947:       assertFalse(node2.isIn());
948:       assertEquals((-1), node2.getLineno());
949:       assertFalse(node2.hasMoreThanOneChild());
950:       assertEquals(39, node2.getType());
951:       assertFalse(node2.isNE());
952:       assertFalse(node2.isIf());
953:       assertFalse(node2.isContinue());
954:       assertFalse(node2.isCast());
955:       assertFalse(node2.isThrow());
956:       assertFalse(node2.isInc());
957:       assertFalse(node2.isSetterDef());
958:       assertFalse(node2.isInstanceOf());
959:       assertFalse(node2.isObjectLit());
960:       assertFalse(node2.isAnd());
961:       assertFalse(node2.isThis());
962:       assertFalse(node2.isBreak());
963:       assertFalse(node2.isComma());
964:       assertFalse(node2.isWith());
965:       assertFalse(node2.isFalse());
966:       assertFalse(node2.isExprResult());
967:       assertFalse(node2.hasOneChild());
968:       assertFalse(node2.isHook());
969:       assertEquals((-1), node2.getCharno());
970:       assertEquals((-1), node2.getSourcePosition());
971:       assertFalse(node2.isNot());
972:       assertFalse(node2.isCase());
973:       assertFalse(node2.isGetProp());
974:       assertFalse(node2.isString());
975:       assertFalse(node2.isScript());
976:       assertTrue(node2.isNumber());
977:       assertFalse(node2.isOr());
978:       assertFalse(node2.isAssignAdd());
979:       assertFalse(node2.isLabel());
980:       assertFalse(node2.isReturn());
981:       assertFalse(node2.isWhile());
982:       assertFalse(node2.isTypeOf());
983:       assertFalse(node2.isDec());
984:       assertFalse(node2.hasChildren());
985:       assertFalse(node2.isSwitch());
986:       assertFalse(node2.isAssign());
987:       assertFalse(node2.isDelProp());
988:       assertFalse(node2.isLabelName());
989:       assertFalse(node2.isGetElem());
990:       assertFalse(node2.isName());
991:       assertFalse(node2.isTrue());
992:       assertFalse(node2.isVar());
993:       assertFalse(node2.isNull());
994:       assertFalse(node2.isDefaultCase());
995:       assertFalse(node2.isDo());
996:       assertFalse(node2.isNew());
997:       assertFalse(node2.isAdd());
998:       assertFalse(node2.isEmpty());
999:       assertNotNull(node2);
1000:       
1001:       JSDocInfo jSDocInfo0 = new JSDocInfo(true);
1002:       assertFalse(jSDocInfo0.hasEnumParameterType());
1003:       assertFalse(jSDocInfo0.hasBaseType());
1004:       assertEquals(0, jSDocInfo0.getParameterCount());
1005:       assertFalse(jSDocInfo0.isExport());
1006:       assertFalse(jSDocInfo0.containsDeclaration());
1007:       assertFalse(jSDocInfo0.hasTypedefType());
1008:       assertNull(jSDocInfo0.getReturnDescription());
1009:       assertFalse(jSDocInfo0.shouldPreserveTry());
1010:       assertNull(jSDocInfo0.getLicense());
1011:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1012:       assertNull(jSDocInfo0.getDescription());
1013:       assertFalse(jSDocInfo0.hasReturnType());
1014:       assertFalse(jSDocInfo0.isNoAlias());
1015:       assertFalse(jSDocInfo0.isNoTypeCheck());
1016:       assertNull(jSDocInfo0.getOriginalCommentString());
1017:       assertFalse(jSDocInfo0.isJaggerProvide());
1018:       assertNull(jSDocInfo0.getMeaning());
1019:       assertFalse(jSDocInfo0.isStableIdGenerator());
1020:       assertNull(jSDocInfo0.getLendsName());
1021:       assertFalse(jSDocInfo0.hasType());
1022:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1023:       assertFalse(jSDocInfo0.isDisposes());
1024:       assertFalse(jSDocInfo0.hasModifies());
1025:       assertFalse(jSDocInfo0.isDeprecated());
1026:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1027:       assertFalse(jSDocInfo0.isNoShadow());
1028:       assertFalse(jSDocInfo0.isHidden());
1029:       assertFalse(jSDocInfo0.isExpose());
1030:       assertFalse(jSDocInfo0.isExterns());
1031:       assertFalse(jSDocInfo0.isIdGenerator());
1032:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1033:       assertFalse(jSDocInfo0.isJaggerModule());
1034:       assertFalse(jSDocInfo0.isNoCompile());
1035:       assertFalse(jSDocInfo0.isOverride());
1036:       assertFalse(jSDocInfo0.isNgInject());
1037:       assertFalse(jSDocInfo0.isWizaction());
1038:       assertFalse(jSDocInfo0.makesDicts());
1039:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1040:       assertNull(jSDocInfo0.getVersion());
1041:       assertFalse(jSDocInfo0.makesStructs());
1042:       assertFalse(jSDocInfo0.isNoSideEffects());
1043:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1044:       assertFalse(jSDocInfo0.isConstant());
1045:       assertFalse(jSDocInfo0.hasThisType());
1046:       assertFalse(jSDocInfo0.isJavaDispatch());
1047:       assertNull(jSDocInfo0.getVisibility());
1048:       assertNull(jSDocInfo0.getFileOverview());
1049:       assertFalse(jSDocInfo0.isDefine());
1050:       assertFalse(jSDocInfo0.isConstructor());
1051:       assertFalse(jSDocInfo0.isImplicitCast());
1052:       assertFalse(jSDocInfo0.isInterface());
1053:       assertFalse(jSDocInfo0.hasFileOverview());
1054:       assertFalse(jSDocInfo0.isJaggerInject());
1055:       assertNull(jSDocInfo0.getDeprecationReason());
1056:       assertNull(jSDocInfo0.getBlockDescription());
1057:       assertNotNull(jSDocInfo0);
1058:       
1059:       Node node3 = Node.newNumber((double) 4095, 37, 38);
1060:       assertEquals(43, Node.IS_CONSTANT_NAME);
1061:       assertEquals(36, Node.QUOTED_PROP);
1062:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1063:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1064:       assertEquals(4095, Node.COLUMN_MASK);
1065:       assertEquals(48, Node.DIRECTIVES);
1066:       assertEquals(29, Node.JSDOC_INFO_PROP);
1067:       assertEquals(56, Node.CHANGE_TIME);
1068:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1069:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1070:       assertEquals(8, Node.FLAG_NO_THROWS);
1071:       assertEquals(2, Node.POST_FLAG);
1072:       assertEquals(47, Node.IS_DISPATCHER);
1073:       assertEquals(57, Node.REFLECTED_OBJECT);
1074:       assertEquals(52, Node.LENGTH);
1075:       assertEquals(53, Node.INPUT_ID);
1076:       assertEquals(55, Node.INFERRED_FUNCTION);
1077:       assertEquals(39, Node.EMPTY_BLOCK);
1078:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1079:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1080:       assertEquals(30, Node.VAR_ARGS_NAME);
1081:       assertEquals(49, Node.DIRECT_EVAL);
1082:       assertEquals(57, Node.LAST_PROP);
1083:       assertEquals(12, Node.COLUMN_BITS);
1084:       assertEquals(54, Node.SLASH_V);
1085:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1086:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1087:       assertEquals(46, Node.IS_NAMESPACE);
1088:       assertEquals(40, Node.ORIGINALNAME_PROP);
1089:       assertEquals(37, Node.OPT_ARG_NAME);
1090:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1091:       assertEquals(50, Node.FREE_CALL);
1092:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1093:       assertEquals(32, Node.INCRDECR_PROP);
1094:       assertEquals(1, Node.DECR_FLAG);
1095:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1096:       assertNotSame(node3, node2);
1097:       assertFalse(node3.equals((Object)node2));
1098:       assertFalse(node3.equals((Object)node0));
1099:       assertFalse(node3.equals((Object)node1));
1100:       assertFalse(node3.isIn());
1101:       assertFalse(node3.isString());
1102:       assertFalse(node3.isInc());
1103:       assertFalse(node3.isCase());
1104:       assertTrue(node3.isNumber());
1105:       assertFalse(node3.isFor());
1106:       assertFalse(node3.isEmpty());
1107:       assertFalse(node3.isHook());
1108:       assertFalse(node3.isComma());
1109:       assertFalse(node3.isTrue());
1110:       assertFalse(node3.isVoid());
1111:       assertFalse(node3.isNE());
1112:       assertFalse(node3.isBreak());
1113:       assertFalse(node3.isDelProp());
1114:       assertFalse(node3.isIf());
1115:       assertFalse(node3.isObjectLit());
1116:       assertFalse(node3.isAnd());
1117:       assertFalse(node3.isNot());
1118:       assertEquals(151590, node3.getSourcePosition());
1119:       assertFalse(node3.isGetProp());
1120:       assertFalse(node3.isSetterDef());
1121:       assertFalse(node3.isFalse());
1122:       assertFalse(node3.isCast());
1123:       assertFalse(node3.isThrow());
1124:       assertEquals(37, node3.getLineno());
1125:       assertFalse(node3.isDebugger());
1126:       assertFalse(node3.isFunction());
1127:       assertEquals(38, node3.getCharno());
1128:       assertFalse(node3.isContinue());
1129:       assertFalse(node3.hasMoreThanOneChild());
1130:       assertFalse(node3.isWhile());
1131:       assertFalse(node3.isReturn());
1132:       assertEquals(39, node3.getType());
1133:       assertFalse(node3.isOr());
1134:       assertFalse(node3.isLabel());
1135:       assertFalse(node3.isBlock());
1136:       assertFalse(node3.isAssignAdd());
1137:       assertFalse(node3.isAdd());
1138:       assertFalse(node3.isDo());
1139:       assertFalse(node3.isNew());
1140:       assertFalse(node3.isCall());
1141:       assertFalse(node3.isGetElem());
1142:       assertFalse(node3.hasChildren());
1143:       assertFalse(node3.isTypeOf());
1144:       assertFalse(node3.isAssign());
1145:       assertFalse(node3.isDec());
1146:       assertFalse(node3.isExprResult());
1147:       assertFalse(node3.isNull());
1148:       assertFalse(node3.isName());
1149:       assertFalse(node3.isInstanceOf());
1150:       assertFalse(node3.isCatch());
1151:       assertFalse(node3.isWith());
1152:       assertFalse(node3.isRegExp());
1153:       assertEquals(0, node3.getChildCount());
1154:       assertFalse(node3.isThis());
1155:       assertFalse(node3.isScript());
1156:       assertFalse(node3.isDefaultCase());
1157:       assertFalse(node3.isTry());
1158:       assertFalse(node3.hasOneChild());
1159:       assertFalse(node3.isVar());
1160:       assertFalse(node3.isStringKey());
1161:       assertFalse(node3.isGetterDef());
1162:       assertFalse(node3.isSwitch());
1163:       assertFalse(node3.isParamList());
1164:       assertFalse(node3.isArrayLit());
1165:       assertFalse(node3.isLabelName());
1166:       assertNotNull(node3);
1167:       
1168:       boolean boolean1 = node1.isNumber();
1169:       assertEquals(48, Node.DIRECTIVES);
1170:       assertEquals(4095, Node.COLUMN_MASK);
1171:       assertEquals(8, Node.FLAG_NO_THROWS);
1172:       assertEquals(39, Node.EMPTY_BLOCK);
1173:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1174:       assertEquals(55, Node.INFERRED_FUNCTION);
1175:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1176:       assertEquals(50, Node.FREE_CALL);
1177:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1178:       assertEquals(43, Node.IS_CONSTANT_NAME);
1179:       assertEquals(36, Node.QUOTED_PROP);
1180:       assertEquals(57, Node.REFLECTED_OBJECT);
1181:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1182:       assertEquals(53, Node.INPUT_ID);
1183:       assertEquals(52, Node.LENGTH);
1184:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1185:       assertEquals(40, Node.ORIGINALNAME_PROP);
1186:       assertEquals(30, Node.VAR_ARGS_NAME);
1187:       assertEquals(57, Node.LAST_PROP);
1188:       assertEquals(47, Node.IS_DISPATCHER);
1189:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1190:       assertEquals(37, Node.OPT_ARG_NAME);
1191:       assertEquals(32, Node.INCRDECR_PROP);
1192:       assertEquals(2, Node.POST_FLAG);
1193:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1194:       assertEquals(29, Node.JSDOC_INFO_PROP);
1195:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1196:       assertEquals(49, Node.DIRECT_EVAL);
1197:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1198:       assertEquals(46, Node.IS_NAMESPACE);
1199:       assertEquals(56, Node.CHANGE_TIME);
1200:       assertEquals(54, Node.SLASH_V);
1201:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1202:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1203:       assertEquals(1, Node.DECR_FLAG);
1204:       assertEquals(12, Node.COLUMN_BITS);
1205:       assertEquals(12, Node.COLUMN_BITS);
1206:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1207:       assertEquals(32, Node.INCRDECR_PROP);
1208:       assertEquals(49, Node.DIRECT_EVAL);
1209:       assertEquals(1, Node.DECR_FLAG);
1210:       assertEquals(37, Node.OPT_ARG_NAME);
1211:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1212:       assertEquals(56, Node.CHANGE_TIME);
1213:       assertEquals(46, Node.IS_NAMESPACE);
1214:       assertEquals(54, Node.SLASH_V);
1215:       assertEquals(57, Node.REFLECTED_OBJECT);
1216:       assertEquals(52, Node.LENGTH);
1217:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1218:       assertEquals(29, Node.JSDOC_INFO_PROP);
1219:       assertEquals(53, Node.INPUT_ID);
1220:       assertEquals(40, Node.ORIGINALNAME_PROP);
1221:       assertEquals(2, Node.POST_FLAG);
1222:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1223:       assertEquals(57, Node.LAST_PROP);
1224:       assertEquals(30, Node.VAR_ARGS_NAME);
1225:       assertEquals(47, Node.IS_DISPATCHER);
1226:       assertEquals(4095, Node.COLUMN_MASK);
1227:       assertEquals(55, Node.INFERRED_FUNCTION);
1228:       assertEquals(48, Node.DIRECTIVES);
1229:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1230:       assertEquals(39, Node.EMPTY_BLOCK);
1231:       assertEquals(36, Node.QUOTED_PROP);
1232:       assertEquals(43, Node.IS_CONSTANT_NAME);
1233:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1234:       assertEquals(8, Node.FLAG_NO_THROWS);
1235:       assertEquals(50, Node.FREE_CALL);
1236:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1237:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1238:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1239:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1240:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1241:       assertNotSame(node0, node1);
1242:       assertNotSame(node1, node0);
1243:       assertFalse(node0.equals((Object)node3));
1244:       assertFalse(node0.equals((Object)node1));
1245:       assertFalse(node0.equals((Object)node2));
1246:       assertFalse(node1.equals((Object)node3));
1247:       assertFalse(node1.equals((Object)node0));
1248:       assertFalse(node1.equals((Object)node2));
1249:       assertTrue(boolean1 == boolean0);
1250:       assertFalse(boolean1);
1251:       assertFalse(node0.isNE());
1252:       assertFalse(node0.isIf());
1253:       assertFalse(node0.isDelProp());
1254:       assertFalse(node0.isGetterDef());
1255:       assertFalse(node0.isEmpty());
1256:       assertEquals(1838, node0.getLineno());
1257:       assertFalse(node0.isFor());
1258:       assertFalse(node0.isDefaultCase());
1259:       assertFalse(node0.isRegExp());
1260:       assertFalse(node0.isVoid());
1261:       assertFalse(node0.isInc());
1262:       assertFalse(node0.isIn());
1263:       assertFalse(node0.isTrue());
1264:       assertFalse(node0.isThis());
1265:       assertFalse(node0.isParamList());
1266:       assertFalse(node0.isInstanceOf());
1267:       assertFalse(node0.isCatch());
1268:       assertEquals(0, node0.getChildCount());
1269:       assertFalse(node0.isHook());
1270:       assertFalse(node0.isBlock());
1271:       assertFalse(node0.isVar());
1272:       assertFalse(node0.isSwitch());
1273:       assertFalse(node0.isTry());
1274:       assertEquals(4095, node0.getCharno());
1275:       assertFalse(node0.isCase());
1276:       assertFalse(node0.isScript());
1277:       assertFalse(node0.isArrayLit());
1278:       assertFalse(node0.isStringKey());
1279:       assertFalse(node0.isDec());
1280:       assertFalse(node0.isNumber());
1281:       assertFalse(node0.isTypeOf());
1282:       assertFalse(node0.isLabelName());
1283:       assertFalse(node0.isGetElem());
1284:       assertFalse(node0.isCast());
1285:       assertFalse(node0.hasMoreThanOneChild());
1286:       assertFalse(node0.isContinue());
1287:       assertFalse(node0.hasOneChild());
1288:       assertFalse(node0.isAssign());
1289:       assertFalse(node0.isReturn());
1290:       assertFalse(node0.isAssignAdd());
1291:       assertFalse(node0.isWhile());
1292:       assertFalse(node0.isLabel());
1293:       assertFalse(node0.hasChildren());
1294:       assertFalse(node0.isWith());
1295:       assertFalse(node0.isDo());
1296:       assertFalse(node0.isNew());
1297:       assertFalse(node0.isExprResult());
1298:       assertFalse(node0.isAdd());
1299:       assertFalse(node0.isName());
1300:       assertFalse(node0.isOr());
1301:       assertFalse(node0.isNull());
1302:       assertFalse(node0.isComma());
1303:       assertFalse(node0.isSetterDef());
1304:       assertFalse(node0.isBreak());
1305:       assertEquals((-2735), node0.getType());
1306:       assertFalse(node0.isGetProp());
1307:       assertFalse(node0.isCall());
1308:       assertFalse(node0.isFalse());
1309:       assertEquals(7532543, node0.getSourcePosition());
1310:       assertFalse(node0.isThrow());
1311:       assertFalse(node0.isDebugger());
1312:       assertFalse(node0.isFunction());
1313:       assertFalse(node0.isString());
1314:       assertFalse(node0.isAnd());
1315:       assertFalse(node0.isObjectLit());
1316:       assertFalse(node0.isNot());
1317:       assertEquals(77, node1.getType());
1318:       assertFalse(node1.isCatch());
1319:       assertFalse(node1.isSetterDef());
1320:       assertFalse(node1.isDefaultCase());
1321:       assertFalse(node1.isFunction());
1322:       assertFalse(node1.isRegExp());
1323:       assertFalse(node1.isVar());
1324:       assertFalse(node1.isAdd());
1325:       assertFalse(node1.isCall());
1326:       assertFalse(node1.isVoid());
1327:       assertFalse(node1.isNew());
1328:       assertFalse(node1.isDelProp());
1329:       assertFalse(node1.isName());
1330:       assertFalse(node1.isEmpty());
1331:       assertFalse(node1.isIf());
1332:       assertFalse(node1.isNE());
1333:       assertFalse(node1.isNull());
1334:       assertFalse(node1.isTrue());
1335:       assertEquals(1, node1.getChildCount());
1336:       assertEquals((-1), node1.getLineno());
1337:       assertTrue(node1.hasChildren());
1338:       assertFalse(node1.isOr());
1339:       assertFalse(node1.isAssignAdd());
1340:       assertFalse(node1.isCase());
1341:       assertFalse(node1.isFor());
1342:       assertFalse(node1.isDo());
1343:       assertFalse(node1.hasMoreThanOneChild());
1344:       assertFalse(node1.isBlock());
1345:       assertFalse(node1.isLabel());
1346:       assertFalse(node1.isSwitch());
1347:       assertFalse(node1.isScript());
1348:       assertFalse(node1.isArrayLit());
1349:       assertFalse(node1.isGetterDef());
1350:       assertFalse(node1.isLabelName());
1351:       assertFalse(node1.isNumber());
1352:       assertFalse(node1.isStringKey());
1353:       assertFalse(node1.isParamList());
1354:       assertEquals((-1), node1.getCharno());
1355:       assertFalse(node1.isInstanceOf());
1356:       assertFalse(node1.isGetProp());
1357:       assertFalse(node1.isBreak());
1358:       assertFalse(node1.isWith());
1359:       assertFalse(node1.isFalse());
1360:       assertFalse(node1.isComma());
1361:       assertFalse(node1.isThis());
1362:       assertFalse(node1.isThrow());
1363:       assertFalse(node1.isHook());
1364:       assertFalse(node1.isInc());
1365:       assertFalse(node1.isExprResult());
1366:       assertFalse(node1.isGetElem());
1367:       assertFalse(node1.isReturn());
1368:       assertFalse(node1.isIn());
1369:       assertTrue(node1.hasOneChild());
1370:       assertFalse(node1.isWhile());
1371:       assertFalse(node1.isAssign());
1372:       assertFalse(node1.isContinue());
1373:       assertFalse(node1.isTypeOf());
1374:       assertFalse(node1.isDec());
1375:       assertTrue(node1.isTry());
1376:       assertFalse(node1.isCast());
1377:       assertFalse(node1.isNot());
1378:       assertFalse(node1.isAnd());
1379:       assertFalse(node1.isString());
1380:       assertFalse(node1.isObjectLit());
1381:       assertEquals((-1), node1.getSourcePosition());
1382:       assertFalse(node1.isDebugger());
1383:   }
1384: }
RegularFileObject[/tmp/EvoSuite_110_1628256060034/com/google/javascript/rhino/Node_110_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:21:00 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_110_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_110_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
183:       "com.google.javascript.rhino.Node$AncestorIterable",
184:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
185:       "com.google.common.collect.Lists$RandomAccessListWrapper",
186:       "com.google.common.collect.ImmutableEnumSet",
187:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
188:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
189:       "com.google.javascript.rhino.jstype.EnumElementType",
190:       "com.google.javascript.rhino.jstype.UnionType",
191:       "com.google.common.base.Objects",
192:       "com.google.javascript.rhino.Node$NumberNode",
193:       "com.google.common.collect.SingletonImmutableList",
194:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
195:       "com.google.common.collect.ImmutableCollection$Builder",
196:       "com.google.javascript.rhino.jstype.StaticSlot",
197:       "com.google.common.collect.Iterators$6",
198:       "com.google.common.collect.BiMap",
199:       "com.google.common.collect.Iterators$7",
200:       "com.google.common.collect.AbstractSetMultimap",
201:       "com.google.common.base.Function",
202:       "com.google.common.collect.ImmutableSet",
203:       "com.google.common.collect.Lists$AbstractListWrapper",
204:       "com.google.common.collect.ImmutableMap",
205:       "com.google.common.collect.AbstractIndexedListIterator",
206:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
207:       "com.google.common.collect.Maps$1",
208:       "com.google.javascript.rhino.jstype.EnumType",
209:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
210:       "com.google.common.collect.Iterators$1",
211:       "com.google.common.collect.Iterators$2",
212:       "com.google.javascript.rhino.jstype.NamespaceType",
213:       "com.google.common.collect.Iterators$3",
214:       "com.google.common.collect.Sets",
215:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
216:       "com.google.javascript.rhino.Node$ObjectPropListItem",
217:       "com.google.common.collect.Lists$StringAsImmutableList",
218:       "com.google.common.collect.Lists$2",
219:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
220:       "com.google.common.collect.ImmutableList$Builder",
221:       "com.google.common.collect.Lists$1",
222:       "com.google.javascript.rhino.jstype.StaticReference",
223:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
224:       "com.google.common.collect.Multiset",
225:       "com.google.common.collect.AbstractMultimap",
226:       "com.google.common.collect.Multimap",
227:       "com.google.common.collect.Iterators",
228:       "com.google.common.collect.Maps$ImprovedAbstractMap",
229:       "com.google.common.collect.ImmutableBiMap",
230:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
232:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
233:       "com.google.common.collect.ImmutableList",
234:       "com.google.common.collect.SingletonImmutableBiMap",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
236:       "com.google.javascript.rhino.jstype.StringType",
237:       "com.google.javascript.rhino.Node$AbstractPropListItem",
238:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
239:       "com.google.javascript.rhino.jstype.TemplatizedType",
240:       "com.google.javascript.rhino.jstype.Visitor",
241:       "com.google.javascript.rhino.jstype.NoResolvedType",
242:       "com.google.javascript.rhino.jstype.JSTypeNative",
243:       "com.google.javascript.rhino.jstype.AllType",
244:       "com.google.common.collect.Maps",
245:       "com.google.common.collect.SetMultimap",
246:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
247:       "com.google.common.collect.Maps$EntryTransformer",
248:       "com.google.javascript.rhino.JSTypeExpression",
249:       "com.google.common.collect.Iterators$MergingIterator"
250:     );
251:   } 
252: 
253:   private static void resetClasses() {
254:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_110_tmp__ESTest_scaffolding.class.getClassLoader()); 
255: 
256:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
257:       "com.google.javascript.rhino.Node",
258:       "com.google.javascript.rhino.Node$NumberNode",
259:       "com.google.javascript.rhino.Node$StringNode",
260:       "com.google.javascript.rhino.Node$AbstractPropListItem",
261:       "com.google.javascript.rhino.Node$ObjectPropListItem",
262:       "com.google.javascript.rhino.Node$IntPropListItem",
263:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
264:       "com.google.javascript.rhino.Node$AncestorIterable",
265:       "com.google.javascript.rhino.Node$NodeMismatch",
266:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
267:       "com.google.javascript.rhino.Node$SideEffectFlags",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Preconditions",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.Token",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
342:       "com.google.common.collect.Sets",
343:       "com.google.javascript.rhino.JSDocInfo$Visibility",
344:       "com.google.common.base.Objects",
345:       "com.google.javascript.rhino.jstype.EnumType",
346:       "com.google.javascript.rhino.jstype.EnumElementType",
347:       "com.google.javascript.rhino.InputId",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.jstype.TemplatizedType",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
358:       "com.google.javascript.rhino.jstype.JSType$TypePair",
359:       "com.google.common.collect.AbstractIndexedListIterator",
360:       "com.google.common.collect.Iterators$11",
361:       "com.google.javascript.rhino.jstype.NamedType",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
363:       "com.google.common.collect.Platform",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
371:       "com.google.common.collect.Sets$ImprovedAbstractSet",
372:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
373:       "com.google.common.collect.Hashing",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
375:       "com.google.javascript.rhino.JSTypeExpression",
376:       "com.google.common.collect.ImmutableList$1",
377:       "com.google.common.collect.Iterators$12"
378:     );
379:   }
380: }

[MASTER] 13:21:00.266 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1838);
assertEquals(1838, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(1838);
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(1838, node_SideEffectFlags2.valueOf());
assertNotNull(node_SideEffectFlags2);

boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
assertNotSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags2));
assertFalse(boolean0);
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());

Node node0 = new Node((-2735), 1838, 4433);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals(1838, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertEquals((-2735), node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertEquals(7532543, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertNotNull(node0);

Node node1 = new Node(77, node0, node0, node0, node0, 37, (-782));
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals(1838, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertEquals((-2735), node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertEquals(7532543, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(77, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertEquals(1, node1.getChildCount());
assertEquals((-1), node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertTrue(node1.isTry());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertNotNull(node1);

Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals(1838, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertEquals((-2735), node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertEquals(7532543, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(77, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertEquals(1, node1.getChildCount());
assertEquals((-1), node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertTrue(node1.isTry());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertNotNull(node_AncestorIterable0);

Iterator<Node> iterator0 = node_AncestorIterable0.iterator();
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals(1838, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertEquals((-2735), node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertEquals(7532543, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(77, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertEquals(1, node1.getChildCount());
assertEquals((-1), node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertTrue(node1.isTry());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertNotNull(iterator0);

Iterable<Node> iterable0 = node0.children();
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(iterable0.contains(node1));
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals(1838, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertEquals((-2735), node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertEquals(7532543, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertNotNull(iterable0);

Node node2 = Node.newNumber(2144.489857984);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isStringKey());
assertFalse(node2.isDebugger());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(39, node2.getType());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isFalse());
assertFalse(node2.isExprResult());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNot());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isScript());
assertTrue(node2.isNumber());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isSwitch());
assertFalse(node2.isAssign());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertNotNull(node2);

JSDocInfo jSDocInfo0 = new JSDocInfo(true);
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.hasBaseType());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.hasTypedefType());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.hasType());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.makesDicts());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isNoSideEffects());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isJaggerInject());
assertNull(jSDocInfo0.getDeprecationReason());
assertNull(jSDocInfo0.getBlockDescription());
assertNotNull(jSDocInfo0);

Node node3 = Node.newNumber((double) 4095, 37, 38);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotSame(node3, node2);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertFalse(node3.isInc());
assertFalse(node3.isCase());
assertTrue(node3.isNumber());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isHook());
assertFalse(node3.isComma());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isNE());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertEquals(151590, node3.getSourcePosition());
assertFalse(node3.isGetProp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertEquals(37, node3.getLineno());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertEquals(38, node3.getCharno());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWhile());
assertFalse(node3.isReturn());
assertEquals(39, node3.getType());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isBlock());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isAdd());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertFalse(node3.hasChildren());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isExprResult());
assertFalse(node3.isNull());
assertFalse(node3.isName());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isThis());
assertFalse(node3.isScript());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.hasOneChild());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isGetterDef());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertNotNull(node3);

boolean boolean1 = node1.isNumber();
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals(1838, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertEquals((-2735), node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertEquals(7532543, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(77, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertEquals(1, node1.getChildCount());
assertEquals((-1), node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertTrue(node1.isTry());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());


[MASTER] 13:21:28.176 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:28.569 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:28.862 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:29.190 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:30.262 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:30.565 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:30.833 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:31.082 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:31.350 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:31.584 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:31.847 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:32.071 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:32.361 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:32.585 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-100/tests/25
* Done!

* Computation finished
