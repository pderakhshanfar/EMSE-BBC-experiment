* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 3671
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2746628133
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 13:09:01.964 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 13:09:04.339 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: root-Branch in context: com.google.javascript.rhino.Node:getNext()Lcom/google/javascript/rhino/Node;
[MASTER] 13:09:04.383 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 13:09:04.383 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 13:09:04.464 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;
[MASTER] 13:09:04.480 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;
[MASTER] 13:09:04.483 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;
[MASTER] 13:09:04.516 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch in context: com.google.javascript.rhino.Node:getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 13:13:37.408 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 3900,0,0| Number of FF evals: 1060
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 44,0,0| Number of FF evals: 547
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 1257,0,0| Number of FF evals: 426
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 1257,0,0| Number of FF evals: 426
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 27012,24898,0| Number of FF evals: 12668
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 1257,0,0| Number of FF evals: 426
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 44,0,0| Number of FF evals: 284
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 1257,0,0| Number of FF evals: 426
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 1257,0,0| Number of FF evals: 426
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 65,0,0| Number of FF evals: 337
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 5823,5128,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 1565,0,0| Number of FF evals: 515
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 27,0,0| Number of FF evals: 368
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 17,0,0| Number of FF evals: 164
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 1145,942,62| Number of FF evals: 8222
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 8,0,0| Number of FF evals: 557
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 121,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 1290,1179,0| Number of FF evals: 13751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 10941,9370,88| Number of FF evals: 9861
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 121,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 1257,0,0| Number of FF evals: 426
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 121,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 1257,0,0| Number of FF evals: 426
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 7835,7406,0| Number of FF evals: 5413
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 121,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 937,595,0| Number of FF evals: 2738
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 532,0,0| Number of FF evals: 347
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 9175,8560,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 11279,10697,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 121,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 121,0,0| Number of FF evals: 1269
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 121,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 4840,189,0| Number of FF evals: 1262
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 121,0,0| Number of FF evals: 498
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 121,0,0| Number of FF evals: 731
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 44,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 206,0,0| Number of FF evals: 146
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 1788,0,0| Number of FF evals: 1159
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 48,0,0| Number of FF evals: 899
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 206,0,0| Number of FF evals: 146
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 549,34,0| Number of FF evals: 1443
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChangeTime()I: root-Branch: 121,0,0| Number of FF evals: 363
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 3321,1016,0| Number of FF evals: 3072
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 216,0,0| Number of FF evals: 203
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 1565,0,0| Number of FF evals: 1017
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 1175,1083,12| Number of FF evals: 7376
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 413,0,0| Number of FF evals: 219
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 44,0,0| Number of FF evals: 61
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 9628,7508,0| Number of FF evals: 8439
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 316,0,0| Number of FF evals: 805
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 387,0,0| Number of FF evals: 927
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 7,0,0| Number of FF evals: 555
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 8299,7571,29| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 1856,1653,90| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 1247,893,242| Number of FF evals: 2964
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 7,0,0| Number of FF evals: 185
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 12469,10349,0| Number of FF evals: 11359
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 184,0,0| Number of FF evals: 1042
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 316,0,0| Number of FF evals: 962
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 117,0,0| Number of FF evals: 164
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: Line 1847: 532,0,0| Number of FF evals: 241
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 445,0,0| Number of FF evals: 556
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 44,0,0| Number of FF evals: 530
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 21136,17968,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 736,0,0| Number of FF evals: 794
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 1076,941,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 12886,11900,174| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 33,0,0| Number of FF evals: 446
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 4186,2615,0| Number of FF evals: 3157
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 1409,0,0| Number of FF evals: 783
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 669,502,0| Number of FF evals: 5468
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 189,24,1| Number of FF evals: 1576
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 1640,1462,75| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 206,0,0| Number of FF evals: 116
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 44,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 3411,2559,0| Number of FF evals: 4200
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 14909,12207,0| Number of FF evals: 9118
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - false: 413,0,0| Number of FF evals: 739
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 2739,2537,547| Number of FF evals: 13751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 19,0,0| Number of FF evals: 299
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 40918,36267,0| Number of FF evals: 9539
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: root-Branch: 532,0,0| Number of FF evals: 481
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 57563,52912,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 4186,2615,0| Number of FF evals: 3155
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 1565,0,0| Number of FF evals: 751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 4186,2615,0| Number of FF evals: 3122
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 1704,1526,57| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 1275,0,0| Number of FF evals: 977
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 174,0,0| Number of FF evals: 232
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 206,0,0| Number of FF evals: 214
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 3048,2584,22| Number of FF evals: 9840
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 44,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 3309,2995,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 4520,2949,0| Number of FF evals: 3344
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 206,0,0| Number of FF evals: 167
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 18,0,0| Number of FF evals: 100
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 18,0,0| Number of FF evals: 100
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 13446,12775,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.getDouble()D: Line 162: 44,0,0| Number of FF evals: 52
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 2207,480,0| Number of FF evals: 1591
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 206,0,0| Number of FF evals: 268
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 121,0,0| Number of FF evals: 813
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 2401,1067,374| Number of FF evals: 3086
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 5549,3822,0| Number of FF evals: 3331
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 1278,0,0| Number of FF evals: 635
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 3672,1945,0| Number of FF evals: 2487
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 14858,10207,0| Number of FF evals: 3424
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 121,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 3762,3419,8| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 44,0,0| Number of FF evals: 334
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 13026,11008,11| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - false: 955,0,0| Number of FF evals: 682
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 9662,8881,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 206,0,0| Number of FF evals: 876
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 4693,4531,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 121,0,0| Number of FF evals: 584
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 57563,52912,34471| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 19765,15114,0| Number of FF evals: 4538
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 7,0,0| Number of FF evals: 185
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 57563,52912,34555| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 1665,1462,8| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 1648,1470,63| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 367,0,0| Number of FF evals: 1014
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 28,0,0| Number of FF evals: 381
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 1850,1647,230| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 44,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 3567,1708,0| Number of FF evals: 2274
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 44,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 19416,19030,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesGlobalState()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2091: 44,0,0| Number of FF evals: 75
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 532,0,0| Number of FF evals: 713
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 24,0,0| Number of FF evals: 562
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesGlobalState()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2092: 44,0,0| Number of FF evals: 75
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 262,0,0| Number of FF evals: 1224
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 6460,4504,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 87,0,0| Number of FF evals: 286
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 4840,189,0| Number of FF evals: 1434
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 121,0,0| Number of FF evals: 114
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 5027,376,0| Number of FF evals: 1563
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 2445,1163,0| Number of FF evals: 3078
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 44,0,0| Number of FF evals: 61
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - true: 14,0,0| Number of FF evals: 608
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 304,0,0| Number of FF evals: 186
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 10834,8288,0| Number of FF evals: 9629
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 1257,0,0| Number of FF evals: 451
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 281,103,0| Number of FF evals: 2205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 3328,0,0| Number of FF evals: 927
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 44,0,0| Number of FF evals: 502
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 82,0,0| Number of FF evals: 720
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 1536,1358,1| Number of FF evals: 13052
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 660,0,0| Number of FF evals: 284
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 723,523,27| Number of FF evals: 3416
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 38,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 44,0,0| Number of FF evals: 542
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 8,0,0| Number of FF evals: 486
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 4063,3942,906| Number of FF evals: 13784
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 28512,23861,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 1644,1551,18| Number of FF evals: 13751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: Line 2161: 304,0,0| Number of FF evals: 162
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 9628,7508,0| Number of FF evals: 8440
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 14858,10207,0| Number of FF evals: 3496
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 1636,376,0| Number of FF evals: 1626
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 1565,0,0| Number of FF evals: 503
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: root-Branch: 206,0,0| Number of FF evals: 370
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesGlobalState()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2089: 44,0,0| Number of FF evals: 75
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 57563,52912,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesGlobalState()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2090: 44,0,0| Number of FF evals: 75
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 4967,4260,712| Number of FF evals: 13780
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 1563,615,0| Number of FF evals: 2310
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 121,0,0| Number of FF evals: 88
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 5567,916,0| Number of FF evals: 1416
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 57563,52912,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 1,0,0| Number of FF evals: 88
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 413,0,0| Number of FF evals: 202
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 5,0,0| Number of FF evals: 163
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 44,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 550: 121,0,0| Number of FF evals: 103
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 35,0,0| Number of FF evals: 447
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 323,0,0| Number of FF evals: 250
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 3328,0,0| Number of FF evals: 1711
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 20445,18718,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 1676,1473,8| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 5549,3822,0| Number of FF evals: 3391
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 8632,4538,0| Number of FF evals: 12834
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 206,0,0| Number of FF evals: 295
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 44,0,0| Number of FF evals: 77
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 8145,7022,0| Number of FF evals: 9344
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 11477,10354,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 121,0,0| Number of FF evals: 85
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 44,0,0| Number of FF evals: 429
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 2217,406,0| Number of FF evals: 1700
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 3082,2770,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 2207,480,0| Number of FF evals: 1605
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 5213,4510,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 17537,12886,0| Number of FF evals: 5168
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 3672,1945,0| Number of FF evals: 2515
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 3621,1894,0| Number of FF evals: 2577
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - false: 304,0,0| Number of FF evals: 949
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 14858,10207,0| Number of FF evals: 3496
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 5518,3791,0| Number of FF evals: 3391
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2026: 121,0,0| Number of FF evals: 112
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 121,0,0| Number of FF evals: 137
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 28512,23861,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 121,0,0| Number of FF evals: 258
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 44,0,0| Number of FF evals: 506
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - true: 413,0,0| Number of FF evals: 701
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 57563,52912,34049| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 14858,10207,0| Number of FF evals: 3496
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 4216,3071,0| Number of FF evals: 5432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 14160,12947,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 234,0,0| Number of FF evals: 523
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 1557,306,0| Number of FF evals: 1495
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 206,0,0| Number of FF evals: 147
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 206,0,0| Number of FF evals: 147
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 304,0,0| Number of FF evals: 742
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 121,0,0| Number of FF evals: 516
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 206,0,0| Number of FF evals: 332
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 4216,3071,0| Number of FF evals: 5432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 121,0,0| Number of FF evals: 459
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 1,0,0| Number of FF evals: 1167
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 1092,452,0| Number of FF evals: 2726
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 2583,1871,0| Number of FF evals: 8684
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1657,1479,1| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 32979,28328,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 206,0,0| Number of FF evals: 284
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 17,0,0| Number of FF evals: 164
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 19,0,0| Number of FF evals: 93
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 44,0,0| Number of FF evals: 570
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 40918,36267,0| Number of FF evals: 9539
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 216,0,0| Number of FF evals: 217
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 121,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 5567,916,0| Number of FF evals: 1563
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 8268,7542,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 806,0,0| Number of FF evals: 350
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 206,0,0| Number of FF evals: 144
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 1126,736,0| Number of FF evals: 1932
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 4018,2985,0| Number of FF evals: 4238
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 413,0,0| Number of FF evals: 219
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 4130,3296,0| Number of FF evals: 10653
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 413,0,0| Number of FF evals: 219
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.getDouble()D: root-Branch: 44,0,0| Number of FF evals: 684
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 1077,627,0| Number of FF evals: 3092
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 44,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 121,0,0| Number of FF evals: 147
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 57563,52912,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 190,0,0| Number of FF evals: 1239
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1039: 12,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 44,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 1679,1476,9| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 1257,0,0| Number of FF evals: 470
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1033: 12,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1036: 68,0,0| Number of FF evals: 449
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1034: 12,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 1852,1674,21| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 44,0,0| Number of FF evals: 537
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 636,179,0| Number of FF evals: 1645
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 44,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 464,0,0| Number of FF evals: 827
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 688,485,9| Number of FF evals: 5130
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 1692,1036,0| Number of FF evals: 3577
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 4897,3648,0| Number of FF evals: 6118
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 44,0,0| Number of FF evals: 69
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 441,276,34| Number of FF evals: 3578
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 57563,52912,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 1409,0,0| Number of FF evals: 489
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 3719,3519,33| Number of FF evals: 13722
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 1103,0,0| Number of FF evals: 1185
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 4866,4593,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 28501,24606,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 3719,3519,33| Number of FF evals: 13722
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 57563,52912,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 1644,1551,18| Number of FF evals: 13751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 2592,0,0| Number of FF evals: 960
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 138,0,0| Number of FF evals: 365
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 4625,3773,0| Number of FF evals: 5522
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChangeTime()I: Line 1899: 121,0,0| Number of FF evals: 85
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 4307,3493,0| Number of FF evals: 5752
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 1644,1551,18| Number of FF evals: 13751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 380,0,0| Number of FF evals: 291
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 1101,450,0| Number of FF evals: 2179
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 316,0,0| Number of FF evals: 764
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 206,0,0| Number of FF evals: 128
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 206,0,0| Number of FF evals: 128
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 4651,0,0| Number of FF evals: 1211
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 568,36,0| Number of FF evals: 1287
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 2673,112,0| Number of FF evals: 1290
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 206,0,0| Number of FF evals: 176
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 568,36,0| Number of FF evals: 1287
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 1731,0,0| Number of FF evals: 657
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 568,36,0| Number of FF evals: 1287
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 44,0,0| Number of FF evals: 527
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 568,36,0| Number of FF evals: 1287
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 121,0,0| Number of FF evals: 177
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 362,159,9| Number of FF evals: 2480
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 121,0,0| Number of FF evals: 893
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 596: 206,0,0| Number of FF evals: 128
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 4206,4052,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 3126,2782,0| Number of FF evals: 12641
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 206,0,0| Number of FF evals: 128
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - false: 413,0,0| Number of FF evals: 701
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 44,0,0| Number of FF evals: 507
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 2673,2141,0| Number of FF evals: 8032
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 206,0,0| Number of FF evals: 128
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 206,0,0| Number of FF evals: 128
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 206,0,0| Number of FF evals: 128
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 2673,2141,0| Number of FF evals: 8032
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 17698,13047,0| Number of FF evals: 4057
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 2673,2141,0| Number of FF evals: 8032
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.newString(Ljava/lang/String;II)Lcom/google/javascript/rhino/Node;: Line 518: 121,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 10631,6222,0| Number of FF evals: 4469
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 2673,2141,0| Number of FF evals: 8032
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 10016,8917,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 44,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 567,364,9| Number of FF evals: 4019
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 121,0,0| Number of FF evals: 442
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 189,18,0| Number of FF evals: 1612
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 3900,0,0| Number of FF evals: 1341
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 1644,1466,2| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 807,154,0| Number of FF evals: 1531
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 125,0,0| Number of FF evals: 443
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1732: 206,0,0| Number of FF evals: 116
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 10474,10000,0| Number of FF evals: 13784
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 206,0,0| Number of FF evals: 153
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 2471,1917,0| Number of FF evals: 4334
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 351,0,0| Number of FF evals: 978
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 180,19,0| Number of FF evals: 1479
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1720: 206,0,0| Number of FF evals: 116
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1721: 206,0,0| Number of FF evals: 116
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: Line 1616: 413,0,0| Number of FF evals: 226
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 44,0,0| Number of FF evals: 528
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 121,0,0| Number of FF evals: 211
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 413,0,0| Number of FF evals: 461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 121,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 121,0,0| Number of FF evals: 183
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 206,0,0| Number of FF evals: 120
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 1285,530,0| Number of FF evals: 4038
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 1175,997,52| Number of FF evals: 10413
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 385,186,0| Number of FF evals: 2247
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.putBooleanProp(IZ)V: I5 Branch 109 IFEQ L852 - true: 11,0,0| Number of FF evals: 567
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 14858,10207,0| Number of FF evals: 3424
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 206,0,0| Number of FF evals: 359
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 405,0,0| Number of FF evals: 1117
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 206,0,0| Number of FF evals: 436
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 44,0,0| Number of FF evals: 52
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 1578,0,0| Number of FF evals: 890
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 14455,13688,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - true: 9,0,0| Number of FF evals: 831
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 3520,0,0| Number of FF evals: 976
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 1978,1249,0| Number of FF evals: 5802
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 3742,3517,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 4481,439,0| Number of FF evals: 1506
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 32,0,0| Number of FF evals: 553
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 104,0,0| Number of FF evals: 272
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 2615,2119,33| Number of FF evals: 9006
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 44,0,0| Number of FF evals: 334
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 44,0,0| Number of FF evals: 531
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 1005,606,0| Number of FF evals: 2873
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 206,0,0| Number of FF evals: 153
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 121,0,0| Number of FF evals: 724
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 174: 27,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 44,0,0| Number of FF evals: 71
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 304,0,0| Number of FF evals: 182
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 121,0,0| Number of FF evals: 109
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 7701,7289,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 8570,8096,0| Number of FF evals: 11528
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 636,162,0| Number of FF evals: 1649
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: Line 2351: 1731,0,0| Number of FF evals: 567
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 44,0,0| Number of FF evals: 476
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 186,0,0| Number of FF evals: 1079
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 12702,11726,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - false: 121,0,0| Number of FF evals: 623
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 11735,10401,4769| Number of FF evals: 13669
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 15710,12347,0| Number of FF evals: 9580
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 12123,11044,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 30,0,0| Number of FF evals: 343
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 1692,1036,0| Number of FF evals: 3577
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 347,0,0| Number of FF evals: 570
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 2118,1888,0| Number of FF evals: 3452
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 2078,0,0| Number of FF evals: 975
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 1056,321,0| Number of FF evals: 2304
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 57563,52912,34069| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 8014,6287,131| Number of FF evals: 4205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesArguments()Lcom/google/javascript/rhino/Node$SideEffectFlags;: root-Branch: 44,0,0| Number of FF evals: 380
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 413,0,0| Number of FF evals: 314
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 8441,7708,166| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 30,0,0| Number of FF evals: 307
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - true: 123,0,0| Number of FF evals: 322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 2003,1892,159| Number of FF evals: 13212
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 999,164,0| Number of FF evals: 2839
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 155,0,0| Number of FF evals: 1113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 1127,1016,12| Number of FF evals: 6837
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 121,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 3601,2630,0| Number of FF evals: 6174
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 2,0,0| Number of FF evals: 481
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 2401,1067,375| Number of FF evals: 3086
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 44,0,0| Number of FF evals: 483
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 8145,7022,0| Number of FF evals: 9322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 44,0,0| Number of FF evals: 502
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 206,0,0| Number of FF evals: 298
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 121,0,0| Number of FF evals: 713
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 8145,7022,0| Number of FF evals: 9322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - false: 123,0,0| Number of FF evals: 358
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 8145,7022,0| Number of FF evals: 9322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 2783,2054,0| Number of FF evals: 4202
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 44,0,0| Number of FF evals: 71
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 430,227,9| Number of FF evals: 2968
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 8145,7022,0| Number of FF evals: 9322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 19595,17830,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 8145,7022,0| Number of FF evals: 9322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 8145,7022,0| Number of FF evals: 9322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 2772,0,0| Number of FF evals: 791
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 27,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 44,0,0| Number of FF evals: 62
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 1,0,0| Number of FF evals: 285
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 6504,6089,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 6504,6089,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 48,0,0| Number of FF evals: 898
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 44,0,0| Number of FF evals: 61
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1017: 12,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 1,0,0| Number of FF evals: 985
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 13074,12260,5| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1858: 413,0,0| Number of FF evals: 208
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1025: 12,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 7753,6644,0| Number of FF evals: 9344
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 17698,13047,0| Number of FF evals: 4056
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 44,0,0| Number of FF evals: 52
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 3436,2443,0| Number of FF evals: 5405
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 44,0,0| Number of FF evals: 512
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 57563,52912,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 1409,0,0| Number of FF evals: 500
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 1290,1179,0| Number of FF evals: 13751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 1409,0,0| Number of FF evals: 500
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 4470,430,0| Number of FF evals: 1513
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 3520,0,0| Number of FF evals: 1029
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 206,28,0| Number of FF evals: 1542
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 1290,1179,0| Number of FF evals: 13751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 9613,8218,0| Number of FF evals: 10376
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 121,0,0| Number of FF evals: 112
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1103: 121,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 121,0,0| Number of FF evals: 112
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 1902,0,0| Number of FF evals: 596
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 1409,0,0| Number of FF evals: 500
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 467,0,0| Number of FF evals: 837
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1104: 121,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 1731,0,0| Number of FF evals: 556
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 113,0,0| Number of FF evals: 226
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 206,0,0| Number of FF evals: 204
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 50,0,0| Number of FF evals: 259
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 3783,3583,0| Number of FF evals: 13722
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 7655,6506,63| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 38,0,0| Number of FF evals: 291
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 1173,973,0| Number of FF evals: 4377
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 121,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 10940,10295,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 121,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 413,0,0| Number of FF evals: 481
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 121,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 1667,0,0| Number of FF evals: 685
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 7590,7012,1091| Number of FF evals: 6722
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 121,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 1257,0,0| Number of FF evals: 572
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - false: 121,0,0| Number of FF evals: 334
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 1285,538,0| Number of FF evals: 4038
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 1409,0,0| Number of FF evals: 538
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I70 Branch 122 IF_ICMPNE L966 - false: 7,0,0| Number of FF evals: 575
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 8391,7661,119| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 20028,17281,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 121,0,0| Number of FF evals: 290
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 3298,1549,0| Number of FF evals: 2054
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 82,0,0| Number of FF evals: 760
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 818,733,63| Number of FF evals: 6987
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 1260,1060,0| Number of FF evals: 4899
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 252,167,21| Number of FF evals: 2245
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 7669,6881,3| Number of FF evals: 6720
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 1613,261,0| Number of FF evals: 1971
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - false: 95,0,0| Number of FF evals: 179
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 12359,11051,0| Number of FF evals: 8713
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 291,0,0| Number of FF evals: 406
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 806,0,0| Number of FF evals: 578
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 21208,19637,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 121,0,0| Number of FF evals: 87
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 9575,8004,0| Number of FF evals: 7545
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesArguments()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2107: 44,0,0| Number of FF evals: 75
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 1858,1655,195| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 1241,1130,46| Number of FF evals: 7654
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 12885,12156,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 44,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 121,0,0| Number of FF evals: 112
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 2592,0,0| Number of FF evals: 753
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 12746,11768,42| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesArguments()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2106: 44,0,0| Number of FF evals: 75
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 121,0,0| Number of FF evals: 403
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 660,0,0| Number of FF evals: 289
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 1290,1179,0| Number of FF evals: 13751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.newString(Ljava/lang/String;II)Lcom/google/javascript/rhino/Node;: root-Branch: 121,0,0| Number of FF evals: 932
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 10677,10021,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 654,0,0| Number of FF evals: 1079
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 121,0,0| Number of FF evals: 712
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 206,0,0| Number of FF evals: 589
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 2078,0,0| Number of FF evals: 629
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 2772,0,0| Number of FF evals: 803
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 1152,411,0| Number of FF evals: 1630
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 29,0,0| Number of FF evals: 566
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 1986,1121,0| Number of FF evals: 2328
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 435,36,0| Number of FF evals: 1721
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1128: 955,0,0| Number of FF evals: 365
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1127: 955,0,0| Number of FF evals: 365
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 98,0,0| Number of FF evals: 598
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 55,0,0| Number of FF evals: 341
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 870,219,0| Number of FF evals: 1529
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 44,0,0| Number of FF evals: 132
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 121,0,0| Number of FF evals: 96
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 10255,9403,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 447,269,0| Number of FF evals: 3247
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 2474,2267,360| Number of FF evals: 13247
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 121,0,0| Number of FF evals: 96
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 216,0,0| Number of FF evals: 163
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 216,0,0| Number of FF evals: 163
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 5970,5118,0| Number of FF evals: 6927
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 216,0,0| Number of FF evals: 163
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 1407,1229,221| Number of FF evals: 9579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - true: 121,0,0| Number of FF evals: 426
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 641,434,29| Number of FF evals: 2912
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 216,0,0| Number of FF evals: 163
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 44,0,0| Number of FF evals: 526
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 17,0,0| Number of FF evals: 161
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;II)V: I11 Branch 285 IF_ACMPNE L202 - false: 15,0,0| Number of FF evals: 180
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 121,0,0| Number of FF evals: 297
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 9575,8004,0| Number of FF evals: 7515
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 1731,0,0| Number of FF evals: 545
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 1754,1551,95| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 9575,8004,0| Number of FF evals: 7515
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 44,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 3900,0,0| Number of FF evals: 1044
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 9575,8004,0| Number of FF evals: 7515
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 9575,8004,0| Number of FF evals: 7515
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 6488,5618,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 156,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 4532,2961,0| Number of FF evals: 3310
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 9575,8004,0| Number of FF evals: 7515
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 1441,0,0| Number of FF evals: 558
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 9575,8004,0| Number of FF evals: 7515
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 4532,2961,0| Number of FF evals: 3310
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 4532,2961,0| Number of FF evals: 3310
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 44,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 7219,6724,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 1257,0,0| Number of FF evals: 568
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 4186,2615,0| Number of FF evals: 3061
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 125,0,0| Number of FF evals: 163
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 4186,2615,0| Number of FF evals: 3061
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 7434,6545,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 7434,6545,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 13400,12682,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 14858,10207,0| Number of FF evals: 3424
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 13454,12732,50| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 121,0,0| Number of FF evals: 103
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - true: 206,0,0| Number of FF evals: 310
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 206,0,0| Number of FF evals: 196
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 11147,9391,2| Number of FF evals: 6033
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 6463,5454,0| Number of FF evals: 4127
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 5422,4974,110| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: Line 2060: 206,0,0| Number of FF evals: 153
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 9047,4396,0| Number of FF evals: 2179
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 206,0,0| Number of FF evals: 251
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 44,0,0| Number of FF evals: 244
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 6308,5663,1577| Number of FF evals: 13784
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 19765,15114,0| Number of FF evals: 4538
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 660,0,0| Number of FF evals: 685
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 772,127,82| Number of FF evals: 1548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: Line 889: 44,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 12756,11830,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 16972,12617,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 532,0,0| Number of FF evals: 240
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 13876,10446,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 18,0,0| Number of FF evals: 357
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 351,0,0| Number of FF evals: 1008
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 206,0,0| Number of FF evals: 153
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 2772,0,0| Number of FF evals: 1028
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 206,0,0| Number of FF evals: 153
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 3681,3149,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 121,0,0| Number of FF evals: 589
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 13905,12067,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 3900,0,0| Number of FF evals: 1349
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 1833,1254,365| Number of FF evals: 4058
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 206,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 660,0,0| Number of FF evals: 304
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 22091,17440,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 813,0,0| Number of FF evals: 494
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 743,632,0| Number of FF evals: 7376
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 420,0,0| Number of FF evals: 679
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 78,0,0| Number of FF evals: 406
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 206,0,0| Number of FF evals: 138
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 121,0,0| Number of FF evals: 284
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 9562,8446,0| Number of FF evals: 8976
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 9047,4396,0| Number of FF evals: 2382
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 5086,2421,0| Number of FF evals: 3877
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 413,0,0| Number of FF evals: 592
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 7863,7568,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 2073,1363,0| Number of FF evals: 7278
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 2673,2141,0| Number of FF evals: 8052
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 206,0,0| Number of FF evals: 120
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 206,0,0| Number of FF evals: 132
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 21307,20478,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 654,0,0| Number of FF evals: 1038
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 12907,12267,4| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 304,0,0| Number of FF evals: 475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 14,0,0| Number of FF evals: 219
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 772,127,82| Number of FF evals: 1548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 121,0,0| Number of FF evals: 88
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 8470,5987,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 44,0,0| Number of FF evals: 547
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 1641,1463,76| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 206,0,0| Number of FF evals: 354
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 121,0,0| Number of FF evals: 88
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 206,0,0| Number of FF evals: 354
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 98,0,0| Number of FF evals: 223
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 2772,0,0| Number of FF evals: 784
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 19389,17676,0| Number of FF evals: 13722
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 4651,0,0| Number of FF evals: 1212
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 2772,0,0| Number of FF evals: 784
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesGlobalState()Lcom/google/javascript/rhino/Node$SideEffectFlags;: root-Branch: 44,0,0| Number of FF evals: 339
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 121,0,0| Number of FF evals: 88
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 206,0,0| Number of FF evals: 153
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 44,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 206,0,0| Number of FF evals: 153
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 337,0,0| Number of FF evals: 441
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 206,0,0| Number of FF evals: 153
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 206,0,0| Number of FF evals: 153
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 206,0,0| Number of FF evals: 153
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 10643,9362,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 206,0,0| Number of FF evals: 188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 798,595,15| Number of FF evals: 5988
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 44,0,0| Number of FF evals: 507
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 57563,52912,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 1715,1512,206| Number of FF evals: 13017
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 44,0,0| Number of FF evals: 547
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 1902,0,0| Number of FF evals: 1101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 19389,17676,0| Number of FF evals: 13722
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 64,0,0| Number of FF evals: 335
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 2493,1961,0| Number of FF evals: 8052
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 57563,52912,34179| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 4333,3578,22| Number of FF evals: 13644
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 568,36,0| Number of FF evals: 1287
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 114,0,0| Number of FF evals: 405
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 532,0,0| Number of FF evals: 265
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 121,0,0| Number of FF evals: 196
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 44,0,0| Number of FF evals: 257
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 44,0,0| Number of FF evals: 51
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 675,0,0| Number of FF evals: 556
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 3344,3045,0| Number of FF evals: 13779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 279,0,0| Number of FF evals: 750
* Search finished after 605s and 328 generations, 171970 statements, best individual has fitness: 2903.0
* Minimizing test suite
[MASTER] 13:20:16.396 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 853
* Number of covered goals: 807
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 714
* Number of covered goals: 607
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 102
* Number of covered goals: 102
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 530
* Number of covered goals: 462
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 48%
* Total number of goals: 4536
* Number of covered goals: 2178
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 78%
* Total number of goals: 714
* Number of covered goals: 560
* Generated 661 tests with total length 9600
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 13:21:26.737 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.672% of time used, but only 39/661 tests minimized), falling back to using all assertions
[MASTER] 13:21:46.669 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
[MASTER] 13:21:55.728 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 9 seconds more than allowed.
[MASTER] 13:21:59.046 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_45_1628256118719/com/google/javascript/rhino/Node_45_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_45_1628256118719/com/google/javascript/rhino/Node_45_tmp__ESTest_scaffolding.java]]
[MASTER] 13:21:59.046 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:59.046 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:59.049 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 168
[MASTER] 13:21:59.053 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_45_1628256118719/com/google/javascript/rhino/Node_45_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:21:58 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.ErrorReporter;
12: import com.google.javascript.rhino.JSDocInfo;
13: import com.google.javascript.rhino.Node;
14: import com.google.javascript.rhino.jstype.JSType;
15: import com.google.javascript.rhino.jstype.JSTypeRegistry;
16: import java.util.List;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_45_tmp__ESTest extends Node_45_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Node node0 = Node.newString((-2535), "");
27:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
28:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
29:       assertEquals(29, Node.JSDOC_INFO_PROP);
30:       assertEquals(53, Node.INPUT_ID);
31:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
32:       assertEquals(37, Node.OPT_ARG_NAME);
33:       assertEquals(43, Node.IS_CONSTANT_NAME);
34:       assertEquals(56, Node.CHANGE_TIME);
35:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
36:       assertEquals(46, Node.IS_NAMESPACE);
37:       assertEquals(51, Node.STATIC_SOURCE_FILE);
38:       assertEquals(36, Node.QUOTED_PROP);
39:       assertEquals(55, Node.INFERRED_FUNCTION);
40:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
41:       assertEquals(15, Node.NO_SIDE_EFFECTS);
42:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
43:       assertEquals(2, Node.POST_FLAG);
44:       assertEquals(57, Node.LAST_PROP);
45:       assertEquals(30, Node.VAR_ARGS_NAME);
46:       assertEquals(47, Node.IS_DISPATCHER);
47:       assertEquals(40, Node.ORIGINALNAME_PROP);
48:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
49:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
50:       assertEquals(8, Node.FLAG_NO_THROWS);
51:       assertEquals(39, Node.EMPTY_BLOCK);
52:       assertEquals(48, Node.DIRECTIVES);
53:       assertEquals(54, Node.SLASH_V);
54:       assertEquals(52, Node.LENGTH);
55:       assertEquals(50, Node.FREE_CALL);
56:       assertEquals(57, Node.REFLECTED_OBJECT);
57:       assertEquals(12, Node.COLUMN_BITS);
58:       assertEquals(4095, Node.COLUMN_MASK);
59:       assertEquals(49, Node.DIRECT_EVAL);
60:       assertEquals(32, Node.INCRDECR_PROP);
61:       assertEquals(1, Node.DECR_FLAG);
62:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
63:       assertEquals(0, node0.getChildCount());
64:       assertFalse(node0.isCatch());
65:       assertFalse(node0.isRegExp());
66:       assertFalse(node0.isSetterDef());
67:       assertFalse(node0.isTry());
68:       assertFalse(node0.isDefaultCase());
69:       assertFalse(node0.isArrayLit());
70:       assertFalse(node0.isVar());
71:       assertFalse(node0.isGetterDef());
72:       assertFalse(node0.isFunction());
73:       assertFalse(node0.isDebugger());
74:       assertFalse(node0.isStringKey());
75:       assertFalse(node0.isParamList());
76:       assertFalse(node0.isReturn());
77:       assertFalse(node0.isLabel());
78:       assertFalse(node0.isOr());
79:       assertFalse(node0.isString());
80:       assertFalse(node0.isTypeOf());
81:       assertFalse(node0.isDec());
82:       assertFalse(node0.hasChildren());
83:       assertFalse(node0.isNew());
84:       assertFalse(node0.isDo());
85:       assertFalse(node0.isWhile());
86:       assertFalse(node0.isAssignAdd());
87:       assertFalse(node0.isCall());
88:       assertFalse(node0.isAdd());
89:       assertFalse(node0.isGetElem());
90:       assertFalse(node0.isEmpty());
91:       assertFalse(node0.isAssign());
92:       assertFalse(node0.isNull());
93:       assertFalse(node0.isTrue());
94:       assertFalse(node0.isExprResult());
95:       assertFalse(node0.isBreak());
96:       assertFalse(node0.isName());
97:       assertEquals((-2535), node0.getType());
98:       assertFalse(node0.isVoid());
99:       assertFalse(node0.isDelProp());
100:       assertFalse(node0.isInstanceOf());
101:       assertFalse(node0.isNot());
102:       assertFalse(node0.isObjectLit());
103:       assertFalse(node0.isWith());
104:       assertFalse(node0.isScript());
105:       assertFalse(node0.isComma());
106:       assertFalse(node0.isGetProp());
107:       assertFalse(node0.isThis());
108:       assertFalse(node0.isThrow());
109:       assertFalse(node0.hasOneChild());
110:       assertFalse(node0.isCast());
111:       assertFalse(node0.isFalse());
112:       assertFalse(node0.isNumber());
113:       assertEquals((-1), node0.getSourcePosition());
114:       assertEquals((-1), node0.getCharno());
115:       assertFalse(node0.isLabelName());
116:       assertFalse(node0.isAnd());
117:       assertFalse(node0.isSwitch());
118:       assertEquals((-1), node0.getLineno());
119:       assertFalse(node0.isContinue());
120:       assertFalse(node0.isIn());
121:       assertFalse(node0.hasMoreThanOneChild());
122:       assertFalse(node0.isInc());
123:       assertFalse(node0.isCase());
124:       assertFalse(node0.isFor());
125:       assertFalse(node0.isBlock());
126:       assertFalse(node0.isHook());
127:       assertFalse(node0.isNE());
128:       assertFalse(node0.isIf());
129:       assertNotNull(node0);
130:       
131:       Iterable<Node> iterable0 = node0.children();
132:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
133:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
134:       assertEquals(29, Node.JSDOC_INFO_PROP);
135:       assertEquals(53, Node.INPUT_ID);
136:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
137:       assertEquals(37, Node.OPT_ARG_NAME);
138:       assertEquals(43, Node.IS_CONSTANT_NAME);
139:       assertEquals(56, Node.CHANGE_TIME);
140:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
141:       assertEquals(46, Node.IS_NAMESPACE);
142:       assertEquals(51, Node.STATIC_SOURCE_FILE);
143:       assertEquals(36, Node.QUOTED_PROP);
144:       assertEquals(55, Node.INFERRED_FUNCTION);
145:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
146:       assertEquals(15, Node.NO_SIDE_EFFECTS);
147:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
148:       assertEquals(2, Node.POST_FLAG);
149:       assertEquals(57, Node.LAST_PROP);
150:       assertEquals(30, Node.VAR_ARGS_NAME);
151:       assertEquals(47, Node.IS_DISPATCHER);
152:       assertEquals(40, Node.ORIGINALNAME_PROP);
153:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
154:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
155:       assertEquals(8, Node.FLAG_NO_THROWS);
156:       assertEquals(39, Node.EMPTY_BLOCK);
157:       assertEquals(48, Node.DIRECTIVES);
158:       assertEquals(54, Node.SLASH_V);
159:       assertEquals(52, Node.LENGTH);
160:       assertEquals(50, Node.FREE_CALL);
161:       assertEquals(57, Node.REFLECTED_OBJECT);
162:       assertEquals(12, Node.COLUMN_BITS);
163:       assertEquals(4095, Node.COLUMN_MASK);
164:       assertEquals(49, Node.DIRECT_EVAL);
165:       assertEquals(32, Node.INCRDECR_PROP);
166:       assertEquals(1, Node.DECR_FLAG);
167:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
168:       assertFalse(iterable0.contains(node0));
169:       assertEquals(0, node0.getChildCount());
170:       assertFalse(node0.isCatch());
171:       assertFalse(node0.isRegExp());
172:       assertFalse(node0.isSetterDef());
173:       assertFalse(node0.isTry());
174:       assertFalse(node0.isDefaultCase());
175:       assertFalse(node0.isArrayLit());
176:       assertFalse(node0.isVar());
177:       assertFalse(node0.isGetterDef());
178:       assertFalse(node0.isFunction());
179:       assertFalse(node0.isDebugger());
180:       assertFalse(node0.isStringKey());
181:       assertFalse(node0.isParamList());
182:       assertFalse(node0.isReturn());
183:       assertFalse(node0.isLabel());
184:       assertFalse(node0.isOr());
185:       assertFalse(node0.isString());
186:       assertFalse(node0.isTypeOf());
187:       assertFalse(node0.isDec());
188:       assertFalse(node0.hasChildren());
189:       assertFalse(node0.isNew());
190:       assertFalse(node0.isDo());
191:       assertFalse(node0.isWhile());
192:       assertFalse(node0.isAssignAdd());
193:       assertFalse(node0.isCall());
194:       assertFalse(node0.isAdd());
195:       assertFalse(node0.isGetElem());
196:       assertFalse(node0.isEmpty());
197:       assertFalse(node0.isAssign());
198:       assertFalse(node0.isNull());
199:       assertFalse(node0.isTrue());
200:       assertFalse(node0.isExprResult());
201:       assertFalse(node0.isBreak());
202:       assertFalse(node0.isName());
203:       assertEquals((-2535), node0.getType());
204:       assertFalse(node0.isVoid());
205:       assertFalse(node0.isDelProp());
206:       assertFalse(node0.isInstanceOf());
207:       assertFalse(node0.isNot());
208:       assertFalse(node0.isObjectLit());
209:       assertFalse(node0.isWith());
210:       assertFalse(node0.isScript());
211:       assertFalse(node0.isComma());
212:       assertFalse(node0.isGetProp());
213:       assertFalse(node0.isThis());
214:       assertFalse(node0.isThrow());
215:       assertFalse(node0.hasOneChild());
216:       assertFalse(node0.isCast());
217:       assertFalse(node0.isFalse());
218:       assertFalse(node0.isNumber());
219:       assertEquals((-1), node0.getSourcePosition());
220:       assertEquals((-1), node0.getCharno());
221:       assertFalse(node0.isLabelName());
222:       assertFalse(node0.isAnd());
223:       assertFalse(node0.isSwitch());
224:       assertEquals((-1), node0.getLineno());
225:       assertFalse(node0.isContinue());
226:       assertFalse(node0.isIn());
227:       assertFalse(node0.hasMoreThanOneChild());
228:       assertFalse(node0.isInc());
229:       assertFalse(node0.isCase());
230:       assertFalse(node0.isFor());
231:       assertFalse(node0.isBlock());
232:       assertFalse(node0.isHook());
233:       assertFalse(node0.isNE());
234:       assertFalse(node0.isIf());
235:       assertNotNull(iterable0);
236:       
237:       int int0 = node0.getLength();
238:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
239:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
240:       assertEquals(29, Node.JSDOC_INFO_PROP);
241:       assertEquals(53, Node.INPUT_ID);
242:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
243:       assertEquals(37, Node.OPT_ARG_NAME);
244:       assertEquals(43, Node.IS_CONSTANT_NAME);
245:       assertEquals(56, Node.CHANGE_TIME);
246:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
247:       assertEquals(46, Node.IS_NAMESPACE);
248:       assertEquals(51, Node.STATIC_SOURCE_FILE);
249:       assertEquals(36, Node.QUOTED_PROP);
250:       assertEquals(55, Node.INFERRED_FUNCTION);
251:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
252:       assertEquals(15, Node.NO_SIDE_EFFECTS);
253:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
254:       assertEquals(2, Node.POST_FLAG);
255:       assertEquals(57, Node.LAST_PROP);
256:       assertEquals(30, Node.VAR_ARGS_NAME);
257:       assertEquals(47, Node.IS_DISPATCHER);
258:       assertEquals(40, Node.ORIGINALNAME_PROP);
259:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
260:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
261:       assertEquals(8, Node.FLAG_NO_THROWS);
262:       assertEquals(39, Node.EMPTY_BLOCK);
263:       assertEquals(48, Node.DIRECTIVES);
264:       assertEquals(54, Node.SLASH_V);
265:       assertEquals(52, Node.LENGTH);
266:       assertEquals(50, Node.FREE_CALL);
267:       assertEquals(57, Node.REFLECTED_OBJECT);
268:       assertEquals(12, Node.COLUMN_BITS);
269:       assertEquals(4095, Node.COLUMN_MASK);
270:       assertEquals(49, Node.DIRECT_EVAL);
271:       assertEquals(32, Node.INCRDECR_PROP);
272:       assertEquals(1, Node.DECR_FLAG);
273:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
274:       assertEquals(0, node0.getChildCount());
275:       assertFalse(node0.isCatch());
276:       assertFalse(node0.isRegExp());
277:       assertFalse(node0.isSetterDef());
278:       assertFalse(node0.isTry());
279:       assertFalse(node0.isDefaultCase());
280:       assertFalse(node0.isArrayLit());
281:       assertFalse(node0.isVar());
282:       assertFalse(node0.isGetterDef());
283:       assertFalse(node0.isFunction());
284:       assertFalse(node0.isDebugger());
285:       assertFalse(node0.isStringKey());
286:       assertFalse(node0.isParamList());
287:       assertFalse(node0.isReturn());
288:       assertFalse(node0.isLabel());
289:       assertFalse(node0.isOr());
290:       assertFalse(node0.isString());
291:       assertFalse(node0.isTypeOf());
292:       assertFalse(node0.isDec());
293:       assertFalse(node0.hasChildren());
294:       assertFalse(node0.isNew());
295:       assertFalse(node0.isDo());
296:       assertFalse(node0.isWhile());
297:       assertFalse(node0.isAssignAdd());
298:       assertFalse(node0.isCall());
299:       assertFalse(node0.isAdd());
300:       assertFalse(node0.isGetElem());
301:       assertFalse(node0.isEmpty());
302:       assertFalse(node0.isAssign());
303:       assertFalse(node0.isNull());
304:       assertFalse(node0.isTrue());
305:       assertFalse(node0.isExprResult());
306:       assertFalse(node0.isBreak());
307:       assertFalse(node0.isName());
308:       assertEquals((-2535), node0.getType());
309:       assertFalse(node0.isVoid());
310:       assertFalse(node0.isDelProp());
311:       assertFalse(node0.isInstanceOf());
312:       assertFalse(node0.isNot());
313:       assertFalse(node0.isObjectLit());
314:       assertFalse(node0.isWith());
315:       assertFalse(node0.isScript());
316:       assertFalse(node0.isComma());
317:       assertFalse(node0.isGetProp());
318:       assertFalse(node0.isThis());
319:       assertFalse(node0.isThrow());
320:       assertFalse(node0.hasOneChild());
321:       assertFalse(node0.isCast());
322:       assertFalse(node0.isFalse());
323:       assertFalse(node0.isNumber());
324:       assertEquals((-1), node0.getSourcePosition());
325:       assertEquals((-1), node0.getCharno());
326:       assertFalse(node0.isLabelName());
327:       assertFalse(node0.isAnd());
328:       assertFalse(node0.isSwitch());
329:       assertEquals((-1), node0.getLineno());
330:       assertFalse(node0.isContinue());
331:       assertFalse(node0.isIn());
332:       assertFalse(node0.hasMoreThanOneChild());
333:       assertFalse(node0.isInc());
334:       assertFalse(node0.isCase());
335:       assertFalse(node0.isFor());
336:       assertFalse(node0.isBlock());
337:       assertFalse(node0.isHook());
338:       assertFalse(node0.isNE());
339:       assertFalse(node0.isIf());
340:       assertEquals(0, int0);
341:       
342:       int int1 = node0.getSideEffectFlags();
343:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
344:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
345:       assertEquals(29, Node.JSDOC_INFO_PROP);
346:       assertEquals(53, Node.INPUT_ID);
347:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
348:       assertEquals(37, Node.OPT_ARG_NAME);
349:       assertEquals(43, Node.IS_CONSTANT_NAME);
350:       assertEquals(56, Node.CHANGE_TIME);
351:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
352:       assertEquals(46, Node.IS_NAMESPACE);
353:       assertEquals(51, Node.STATIC_SOURCE_FILE);
354:       assertEquals(36, Node.QUOTED_PROP);
355:       assertEquals(55, Node.INFERRED_FUNCTION);
356:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
357:       assertEquals(15, Node.NO_SIDE_EFFECTS);
358:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
359:       assertEquals(2, Node.POST_FLAG);
360:       assertEquals(57, Node.LAST_PROP);
361:       assertEquals(30, Node.VAR_ARGS_NAME);
362:       assertEquals(47, Node.IS_DISPATCHER);
363:       assertEquals(40, Node.ORIGINALNAME_PROP);
364:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
365:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
366:       assertEquals(8, Node.FLAG_NO_THROWS);
367:       assertEquals(39, Node.EMPTY_BLOCK);
368:       assertEquals(48, Node.DIRECTIVES);
369:       assertEquals(54, Node.SLASH_V);
370:       assertEquals(52, Node.LENGTH);
371:       assertEquals(50, Node.FREE_CALL);
372:       assertEquals(57, Node.REFLECTED_OBJECT);
373:       assertEquals(12, Node.COLUMN_BITS);
374:       assertEquals(4095, Node.COLUMN_MASK);
375:       assertEquals(49, Node.DIRECT_EVAL);
376:       assertEquals(32, Node.INCRDECR_PROP);
377:       assertEquals(1, Node.DECR_FLAG);
378:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
379:       assertTrue(int1 == int0);
380:       assertEquals(0, node0.getChildCount());
381:       assertFalse(node0.isCatch());
382:       assertFalse(node0.isRegExp());
383:       assertFalse(node0.isSetterDef());
384:       assertFalse(node0.isTry());
385:       assertFalse(node0.isDefaultCase());
386:       assertFalse(node0.isArrayLit());
387:       assertFalse(node0.isVar());
388:       assertFalse(node0.isGetterDef());
389:       assertFalse(node0.isFunction());
390:       assertFalse(node0.isDebugger());
391:       assertFalse(node0.isStringKey());
392:       assertFalse(node0.isParamList());
393:       assertFalse(node0.isReturn());
394:       assertFalse(node0.isLabel());
395:       assertFalse(node0.isOr());
396:       assertFalse(node0.isString());
397:       assertFalse(node0.isTypeOf());
398:       assertFalse(node0.isDec());
399:       assertFalse(node0.hasChildren());
400:       assertFalse(node0.isNew());
401:       assertFalse(node0.isDo());
402:       assertFalse(node0.isWhile());
403:       assertFalse(node0.isAssignAdd());
404:       assertFalse(node0.isCall());
405:       assertFalse(node0.isAdd());
406:       assertFalse(node0.isGetElem());
407:       assertFalse(node0.isEmpty());
408:       assertFalse(node0.isAssign());
409:       assertFalse(node0.isNull());
410:       assertFalse(node0.isTrue());
411:       assertFalse(node0.isExprResult());
412:       assertFalse(node0.isBreak());
413:       assertFalse(node0.isName());
414:       assertEquals((-2535), node0.getType());
415:       assertFalse(node0.isVoid());
416:       assertFalse(node0.isDelProp());
417:       assertFalse(node0.isInstanceOf());
418:       assertFalse(node0.isNot());
419:       assertFalse(node0.isObjectLit());
420:       assertFalse(node0.isWith());
421:       assertFalse(node0.isScript());
422:       assertFalse(node0.isComma());
423:       assertFalse(node0.isGetProp());
424:       assertFalse(node0.isThis());
425:       assertFalse(node0.isThrow());
426:       assertFalse(node0.hasOneChild());
427:       assertFalse(node0.isCast());
428:       assertFalse(node0.isFalse());
429:       assertFalse(node0.isNumber());
430:       assertEquals((-1), node0.getSourcePosition());
431:       assertEquals((-1), node0.getCharno());
432:       assertFalse(node0.isLabelName());
433:       assertFalse(node0.isAnd());
434:       assertFalse(node0.isSwitch());
435:       assertEquals((-1), node0.getLineno());
436:       assertFalse(node0.isContinue());
437:       assertFalse(node0.isIn());
438:       assertFalse(node0.hasMoreThanOneChild());
439:       assertFalse(node0.isInc());
440:       assertFalse(node0.isCase());
441:       assertFalse(node0.isFor());
442:       assertFalse(node0.isBlock());
443:       assertFalse(node0.isHook());
444:       assertFalse(node0.isNE());
445:       assertFalse(node0.isIf());
446:       assertEquals(0, int1);
447:       
448:       int int2 = node0.getSourcePosition();
449:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
450:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
451:       assertEquals(29, Node.JSDOC_INFO_PROP);
452:       assertEquals(53, Node.INPUT_ID);
453:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
454:       assertEquals(37, Node.OPT_ARG_NAME);
455:       assertEquals(43, Node.IS_CONSTANT_NAME);
456:       assertEquals(56, Node.CHANGE_TIME);
457:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
458:       assertEquals(46, Node.IS_NAMESPACE);
459:       assertEquals(51, Node.STATIC_SOURCE_FILE);
460:       assertEquals(36, Node.QUOTED_PROP);
461:       assertEquals(55, Node.INFERRED_FUNCTION);
462:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
463:       assertEquals(15, Node.NO_SIDE_EFFECTS);
464:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
465:       assertEquals(2, Node.POST_FLAG);
466:       assertEquals(57, Node.LAST_PROP);
467:       assertEquals(30, Node.VAR_ARGS_NAME);
468:       assertEquals(47, Node.IS_DISPATCHER);
469:       assertEquals(40, Node.ORIGINALNAME_PROP);
470:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
471:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
472:       assertEquals(8, Node.FLAG_NO_THROWS);
473:       assertEquals(39, Node.EMPTY_BLOCK);
474:       assertEquals(48, Node.DIRECTIVES);
475:       assertEquals(54, Node.SLASH_V);
476:       assertEquals(52, Node.LENGTH);
477:       assertEquals(50, Node.FREE_CALL);
478:       assertEquals(57, Node.REFLECTED_OBJECT);
479:       assertEquals(12, Node.COLUMN_BITS);
480:       assertEquals(4095, Node.COLUMN_MASK);
481:       assertEquals(49, Node.DIRECT_EVAL);
482:       assertEquals(32, Node.INCRDECR_PROP);
483:       assertEquals(1, Node.DECR_FLAG);
484:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
485:       assertFalse(int2 == int1);
486:       assertFalse(int2 == int0);
487:       assertEquals(0, node0.getChildCount());
488:       assertFalse(node0.isCatch());
489:       assertFalse(node0.isRegExp());
490:       assertFalse(node0.isSetterDef());
491:       assertFalse(node0.isTry());
492:       assertFalse(node0.isDefaultCase());
493:       assertFalse(node0.isArrayLit());
494:       assertFalse(node0.isVar());
495:       assertFalse(node0.isGetterDef());
496:       assertFalse(node0.isFunction());
497:       assertFalse(node0.isDebugger());
498:       assertFalse(node0.isStringKey());
499:       assertFalse(node0.isParamList());
500:       assertFalse(node0.isReturn());
501:       assertFalse(node0.isLabel());
502:       assertFalse(node0.isOr());
503:       assertFalse(node0.isString());
504:       assertFalse(node0.isTypeOf());
505:       assertFalse(node0.isDec());
506:       assertFalse(node0.hasChildren());
507:       assertFalse(node0.isNew());
508:       assertFalse(node0.isDo());
509:       assertFalse(node0.isWhile());
510:       assertFalse(node0.isAssignAdd());
511:       assertFalse(node0.isCall());
512:       assertFalse(node0.isAdd());
513:       assertFalse(node0.isGetElem());
514:       assertFalse(node0.isEmpty());
515:       assertFalse(node0.isAssign());
516:       assertFalse(node0.isNull());
517:       assertFalse(node0.isTrue());
518:       assertFalse(node0.isExprResult());
519:       assertFalse(node0.isBreak());
520:       assertFalse(node0.isName());
521:       assertEquals((-2535), node0.getType());
522:       assertFalse(node0.isVoid());
523:       assertFalse(node0.isDelProp());
524:       assertFalse(node0.isInstanceOf());
525:       assertFalse(node0.isNot());
526:       assertFalse(node0.isObjectLit());
527:       assertFalse(node0.isWith());
528:       assertFalse(node0.isScript());
529:       assertFalse(node0.isComma());
530:       assertFalse(node0.isGetProp());
531:       assertFalse(node0.isThis());
532:       assertFalse(node0.isThrow());
533:       assertFalse(node0.hasOneChild());
534:       assertFalse(node0.isCast());
535:       assertFalse(node0.isFalse());
536:       assertFalse(node0.isNumber());
537:       assertEquals((-1), node0.getSourcePosition());
538:       assertEquals((-1), node0.getCharno());
539:       assertFalse(node0.isLabelName());
540:       assertFalse(node0.isAnd());
541:       assertFalse(node0.isSwitch());
542:       assertEquals((-1), node0.getLineno());
543:       assertFalse(node0.isContinue());
544:       assertFalse(node0.isIn());
545:       assertFalse(node0.hasMoreThanOneChild());
546:       assertFalse(node0.isInc());
547:       assertFalse(node0.isCase());
548:       assertFalse(node0.isFor());
549:       assertFalse(node0.isBlock());
550:       assertFalse(node0.isHook());
551:       assertFalse(node0.isNE());
552:       assertFalse(node0.isIf());
553:       assertEquals((-1), int2);
554:       
555:       boolean boolean0 = node0.isGetProp();
556:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
557:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
558:       assertEquals(29, Node.JSDOC_INFO_PROP);
559:       assertEquals(53, Node.INPUT_ID);
560:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
561:       assertEquals(37, Node.OPT_ARG_NAME);
562:       assertEquals(43, Node.IS_CONSTANT_NAME);
563:       assertEquals(56, Node.CHANGE_TIME);
564:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
565:       assertEquals(46, Node.IS_NAMESPACE);
566:       assertEquals(51, Node.STATIC_SOURCE_FILE);
567:       assertEquals(36, Node.QUOTED_PROP);
568:       assertEquals(55, Node.INFERRED_FUNCTION);
569:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
570:       assertEquals(15, Node.NO_SIDE_EFFECTS);
571:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
572:       assertEquals(2, Node.POST_FLAG);
573:       assertEquals(57, Node.LAST_PROP);
574:       assertEquals(30, Node.VAR_ARGS_NAME);
575:       assertEquals(47, Node.IS_DISPATCHER);
576:       assertEquals(40, Node.ORIGINALNAME_PROP);
577:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
578:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
579:       assertEquals(8, Node.FLAG_NO_THROWS);
580:       assertEquals(39, Node.EMPTY_BLOCK);
581:       assertEquals(48, Node.DIRECTIVES);
582:       assertEquals(54, Node.SLASH_V);
583:       assertEquals(52, Node.LENGTH);
584:       assertEquals(50, Node.FREE_CALL);
585:       assertEquals(57, Node.REFLECTED_OBJECT);
586:       assertEquals(12, Node.COLUMN_BITS);
587:       assertEquals(4095, Node.COLUMN_MASK);
588:       assertEquals(49, Node.DIRECT_EVAL);
589:       assertEquals(32, Node.INCRDECR_PROP);
590:       assertEquals(1, Node.DECR_FLAG);
591:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
592:       assertEquals(0, node0.getChildCount());
593:       assertFalse(node0.isCatch());
594:       assertFalse(node0.isRegExp());
595:       assertFalse(node0.isSetterDef());
596:       assertFalse(node0.isTry());
597:       assertFalse(node0.isDefaultCase());
598:       assertFalse(node0.isArrayLit());
599:       assertFalse(node0.isVar());
600:       assertFalse(node0.isGetterDef());
601:       assertFalse(node0.isFunction());
602:       assertFalse(node0.isDebugger());
603:       assertFalse(node0.isStringKey());
604:       assertFalse(node0.isParamList());
605:       assertFalse(node0.isReturn());
606:       assertFalse(node0.isLabel());
607:       assertFalse(node0.isOr());
608:       assertFalse(node0.isString());
609:       assertFalse(node0.isTypeOf());
610:       assertFalse(node0.isDec());
611:       assertFalse(node0.hasChildren());
612:       assertFalse(node0.isNew());
613:       assertFalse(node0.isDo());
614:       assertFalse(node0.isWhile());
615:       assertFalse(node0.isAssignAdd());
616:       assertFalse(node0.isCall());
617:       assertFalse(node0.isAdd());
618:       assertFalse(node0.isGetElem());
619:       assertFalse(node0.isEmpty());
620:       assertFalse(node0.isAssign());
621:       assertFalse(node0.isNull());
622:       assertFalse(node0.isTrue());
623:       assertFalse(node0.isExprResult());
624:       assertFalse(node0.isBreak());
625:       assertFalse(node0.isName());
626:       assertEquals((-2535), node0.getType());
627:       assertFalse(node0.isVoid());
628:       assertFalse(node0.isDelProp());
629:       assertFalse(node0.isInstanceOf());
630:       assertFalse(node0.isNot());
631:       assertFalse(node0.isObjectLit());
632:       assertFalse(node0.isWith());
633:       assertFalse(node0.isScript());
634:       assertFalse(node0.isComma());
635:       assertFalse(node0.isGetProp());
636:       assertFalse(node0.isThis());
637:       assertFalse(node0.isThrow());
638:       assertFalse(node0.hasOneChild());
639:       assertFalse(node0.isCast());
640:       assertFalse(node0.isFalse());
641:       assertFalse(node0.isNumber());
642:       assertEquals((-1), node0.getSourcePosition());
643:       assertEquals((-1), node0.getCharno());
644:       assertFalse(node0.isLabelName());
645:       assertFalse(node0.isAnd());
646:       assertFalse(node0.isSwitch());
647:       assertEquals((-1), node0.getLineno());
648:       assertFalse(node0.isContinue());
649:       assertFalse(node0.isIn());
650:       assertFalse(node0.hasMoreThanOneChild());
651:       assertFalse(node0.isInc());
652:       assertFalse(node0.isCase());
653:       assertFalse(node0.isFor());
654:       assertFalse(node0.isBlock());
655:       assertFalse(node0.isHook());
656:       assertFalse(node0.isNE());
657:       assertFalse(node0.isIf());
658:       assertFalse(boolean0);
659:       
660:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1237));
661:       assertEquals((-1237), node_SideEffectFlags0.valueOf());
662:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
663:       assertNotNull(node_SideEffectFlags0);
664:       
665:       boolean boolean1 = node0.isSwitch();
666:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
667:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
668:       assertEquals(29, Node.JSDOC_INFO_PROP);
669:       assertEquals(53, Node.INPUT_ID);
670:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
671:       assertEquals(37, Node.OPT_ARG_NAME);
672:       assertEquals(43, Node.IS_CONSTANT_NAME);
673:       assertEquals(56, Node.CHANGE_TIME);
674:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
675:       assertEquals(46, Node.IS_NAMESPACE);
676:       assertEquals(51, Node.STATIC_SOURCE_FILE);
677:       assertEquals(36, Node.QUOTED_PROP);
678:       assertEquals(55, Node.INFERRED_FUNCTION);
679:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
680:       assertEquals(15, Node.NO_SIDE_EFFECTS);
681:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
682:       assertEquals(2, Node.POST_FLAG);
683:       assertEquals(57, Node.LAST_PROP);
684:       assertEquals(30, Node.VAR_ARGS_NAME);
685:       assertEquals(47, Node.IS_DISPATCHER);
686:       assertEquals(40, Node.ORIGINALNAME_PROP);
687:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
688:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
689:       assertEquals(8, Node.FLAG_NO_THROWS);
690:       assertEquals(39, Node.EMPTY_BLOCK);
691:       assertEquals(48, Node.DIRECTIVES);
692:       assertEquals(54, Node.SLASH_V);
693:       assertEquals(52, Node.LENGTH);
694:       assertEquals(50, Node.FREE_CALL);
695:       assertEquals(57, Node.REFLECTED_OBJECT);
696:       assertEquals(12, Node.COLUMN_BITS);
697:       assertEquals(4095, Node.COLUMN_MASK);
698:       assertEquals(49, Node.DIRECT_EVAL);
699:       assertEquals(32, Node.INCRDECR_PROP);
700:       assertEquals(1, Node.DECR_FLAG);
701:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
702:       assertTrue(boolean1 == boolean0);
703:       assertEquals(0, node0.getChildCount());
704:       assertFalse(node0.isCatch());
705:       assertFalse(node0.isRegExp());
706:       assertFalse(node0.isSetterDef());
707:       assertFalse(node0.isTry());
708:       assertFalse(node0.isDefaultCase());
709:       assertFalse(node0.isArrayLit());
710:       assertFalse(node0.isVar());
711:       assertFalse(node0.isGetterDef());
712:       assertFalse(node0.isFunction());
713:       assertFalse(node0.isDebugger());
714:       assertFalse(node0.isStringKey());
715:       assertFalse(node0.isParamList());
716:       assertFalse(node0.isReturn());
717:       assertFalse(node0.isLabel());
718:       assertFalse(node0.isOr());
719:       assertFalse(node0.isString());
720:       assertFalse(node0.isTypeOf());
721:       assertFalse(node0.isDec());
722:       assertFalse(node0.hasChildren());
723:       assertFalse(node0.isNew());
724:       assertFalse(node0.isDo());
725:       assertFalse(node0.isWhile());
726:       assertFalse(node0.isAssignAdd());
727:       assertFalse(node0.isCall());
728:       assertFalse(node0.isAdd());
729:       assertFalse(node0.isGetElem());
730:       assertFalse(node0.isEmpty());
731:       assertFalse(node0.isAssign());
732:       assertFalse(node0.isNull());
733:       assertFalse(node0.isTrue());
734:       assertFalse(node0.isExprResult());
735:       assertFalse(node0.isBreak());
736:       assertFalse(node0.isName());
737:       assertEquals((-2535), node0.getType());
738:       assertFalse(node0.isVoid());
739:       assertFalse(node0.isDelProp());
740:       assertFalse(node0.isInstanceOf());
741:       assertFalse(node0.isNot());
742:       assertFalse(node0.isObjectLit());
743:       assertFalse(node0.isWith());
744:       assertFalse(node0.isScript());
745:       assertFalse(node0.isComma());
746:       assertFalse(node0.isGetProp());
747:       assertFalse(node0.isThis());
748:       assertFalse(node0.isThrow());
749:       assertFalse(node0.hasOneChild());
750:       assertFalse(node0.isCast());
751:       assertFalse(node0.isFalse());
752:       assertFalse(node0.isNumber());
753:       assertEquals((-1), node0.getSourcePosition());
754:       assertEquals((-1), node0.getCharno());
755:       assertFalse(node0.isLabelName());
756:       assertFalse(node0.isAnd());
757:       assertFalse(node0.isSwitch());
758:       assertEquals((-1), node0.getLineno());
759:       assertFalse(node0.isContinue());
760:       assertFalse(node0.isIn());
761:       assertFalse(node0.hasMoreThanOneChild());
762:       assertFalse(node0.isInc());
763:       assertFalse(node0.isCase());
764:       assertFalse(node0.isFor());
765:       assertFalse(node0.isBlock());
766:       assertFalse(node0.isHook());
767:       assertFalse(node0.isNE());
768:       assertFalse(node0.isIf());
769:       assertFalse(boolean1);
770:       
771:       node0.setSourceEncodedPositionForTree(537);
772:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
773:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
774:       assertEquals(29, Node.JSDOC_INFO_PROP);
775:       assertEquals(53, Node.INPUT_ID);
776:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
777:       assertEquals(37, Node.OPT_ARG_NAME);
778:       assertEquals(43, Node.IS_CONSTANT_NAME);
779:       assertEquals(56, Node.CHANGE_TIME);
780:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
781:       assertEquals(46, Node.IS_NAMESPACE);
782:       assertEquals(51, Node.STATIC_SOURCE_FILE);
783:       assertEquals(36, Node.QUOTED_PROP);
784:       assertEquals(55, Node.INFERRED_FUNCTION);
785:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
786:       assertEquals(15, Node.NO_SIDE_EFFECTS);
787:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
788:       assertEquals(2, Node.POST_FLAG);
789:       assertEquals(57, Node.LAST_PROP);
790:       assertEquals(30, Node.VAR_ARGS_NAME);
791:       assertEquals(47, Node.IS_DISPATCHER);
792:       assertEquals(40, Node.ORIGINALNAME_PROP);
793:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
794:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
795:       assertEquals(8, Node.FLAG_NO_THROWS);
796:       assertEquals(39, Node.EMPTY_BLOCK);
797:       assertEquals(48, Node.DIRECTIVES);
798:       assertEquals(54, Node.SLASH_V);
799:       assertEquals(52, Node.LENGTH);
800:       assertEquals(50, Node.FREE_CALL);
801:       assertEquals(57, Node.REFLECTED_OBJECT);
802:       assertEquals(12, Node.COLUMN_BITS);
803:       assertEquals(4095, Node.COLUMN_MASK);
804:       assertEquals(49, Node.DIRECT_EVAL);
805:       assertEquals(32, Node.INCRDECR_PROP);
806:       assertEquals(1, Node.DECR_FLAG);
807:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
808:       assertEquals(0, node0.getChildCount());
809:       assertFalse(node0.isCatch());
810:       assertEquals(537, node0.getSourcePosition());
811:       assertEquals(0, node0.getLineno());
812:       assertFalse(node0.isRegExp());
813:       assertFalse(node0.isSetterDef());
814:       assertFalse(node0.isTry());
815:       assertFalse(node0.isDefaultCase());
816:       assertFalse(node0.isArrayLit());
817:       assertFalse(node0.isVar());
818:       assertFalse(node0.isGetterDef());
819:       assertFalse(node0.isFunction());
820:       assertFalse(node0.isDebugger());
821:       assertFalse(node0.isStringKey());
822:       assertFalse(node0.isParamList());
823:       assertFalse(node0.isReturn());
824:       assertFalse(node0.isLabel());
825:       assertFalse(node0.isOr());
826:       assertFalse(node0.isString());
827:       assertFalse(node0.isTypeOf());
828:       assertFalse(node0.isDec());
829:       assertFalse(node0.hasChildren());
830:       assertFalse(node0.isNew());
831:       assertFalse(node0.isDo());
832:       assertFalse(node0.isWhile());
833:       assertFalse(node0.isAssignAdd());
834:       assertFalse(node0.isCall());
835:       assertFalse(node0.isAdd());
836:       assertFalse(node0.isGetElem());
837:       assertFalse(node0.isEmpty());
838:       assertFalse(node0.isAssign());
839:       assertFalse(node0.isNull());
840:       assertFalse(node0.isTrue());
841:       assertFalse(node0.isExprResult());
842:       assertFalse(node0.isBreak());
843:       assertFalse(node0.isName());
844:       assertEquals((-2535), node0.getType());
845:       assertFalse(node0.isVoid());
846:       assertFalse(node0.isDelProp());
847:       assertFalse(node0.isInstanceOf());
848:       assertFalse(node0.isNot());
849:       assertFalse(node0.isObjectLit());
850:       assertFalse(node0.isWith());
851:       assertFalse(node0.isScript());
852:       assertFalse(node0.isComma());
853:       assertFalse(node0.isGetProp());
854:       assertFalse(node0.isThis());
855:       assertFalse(node0.isThrow());
856:       assertFalse(node0.hasOneChild());
857:       assertFalse(node0.isCast());
858:       assertFalse(node0.isFalse());
859:       assertFalse(node0.isNumber());
860:       assertFalse(node0.isLabelName());
861:       assertFalse(node0.isAnd());
862:       assertFalse(node0.isSwitch());
863:       assertFalse(node0.isContinue());
864:       assertFalse(node0.isIn());
865:       assertFalse(node0.hasMoreThanOneChild());
866:       assertFalse(node0.isInc());
867:       assertFalse(node0.isCase());
868:       assertFalse(node0.isFor());
869:       assertFalse(node0.isBlock());
870:       assertEquals(537, node0.getCharno());
871:       assertFalse(node0.isHook());
872:       assertFalse(node0.isNE());
873:       assertFalse(node0.isIf());
874:       
875:       boolean boolean2 = node0.isAssignAdd();
876:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
877:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
878:       assertEquals(29, Node.JSDOC_INFO_PROP);
879:       assertEquals(53, Node.INPUT_ID);
880:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
881:       assertEquals(37, Node.OPT_ARG_NAME);
882:       assertEquals(43, Node.IS_CONSTANT_NAME);
883:       assertEquals(56, Node.CHANGE_TIME);
884:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
885:       assertEquals(46, Node.IS_NAMESPACE);
886:       assertEquals(51, Node.STATIC_SOURCE_FILE);
887:       assertEquals(36, Node.QUOTED_PROP);
888:       assertEquals(55, Node.INFERRED_FUNCTION);
889:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
890:       assertEquals(15, Node.NO_SIDE_EFFECTS);
891:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
892:       assertEquals(2, Node.POST_FLAG);
893:       assertEquals(57, Node.LAST_PROP);
894:       assertEquals(30, Node.VAR_ARGS_NAME);
895:       assertEquals(47, Node.IS_DISPATCHER);
896:       assertEquals(40, Node.ORIGINALNAME_PROP);
897:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
898:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
899:       assertEquals(8, Node.FLAG_NO_THROWS);
900:       assertEquals(39, Node.EMPTY_BLOCK);
901:       assertEquals(48, Node.DIRECTIVES);
902:       assertEquals(54, Node.SLASH_V);
903:       assertEquals(52, Node.LENGTH);
904:       assertEquals(50, Node.FREE_CALL);
905:       assertEquals(57, Node.REFLECTED_OBJECT);
906:       assertEquals(12, Node.COLUMN_BITS);
907:       assertEquals(4095, Node.COLUMN_MASK);
908:       assertEquals(49, Node.DIRECT_EVAL);
909:       assertEquals(32, Node.INCRDECR_PROP);
910:       assertEquals(1, Node.DECR_FLAG);
911:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
912:       assertTrue(boolean2 == boolean1);
913:       assertTrue(boolean2 == boolean0);
914:       assertEquals(0, node0.getChildCount());
915:       assertFalse(node0.isCatch());
916:       assertEquals(537, node0.getSourcePosition());
917:       assertEquals(0, node0.getLineno());
918:       assertFalse(node0.isRegExp());
919:       assertFalse(node0.isSetterDef());
920:       assertFalse(node0.isTry());
921:       assertFalse(node0.isDefaultCase());
922:       assertFalse(node0.isArrayLit());
923:       assertFalse(node0.isVar());
924:       assertFalse(node0.isGetterDef());
925:       assertFalse(node0.isFunction());
926:       assertFalse(node0.isDebugger());
927:       assertFalse(node0.isStringKey());
928:       assertFalse(node0.isParamList());
929:       assertFalse(node0.isReturn());
930:       assertFalse(node0.isLabel());
931:       assertFalse(node0.isOr());
932:       assertFalse(node0.isString());
933:       assertFalse(node0.isTypeOf());
934:       assertFalse(node0.isDec());
935:       assertFalse(node0.hasChildren());
936:       assertFalse(node0.isNew());
937:       assertFalse(node0.isDo());
938:       assertFalse(node0.isWhile());
939:       assertFalse(node0.isAssignAdd());
940:       assertFalse(node0.isCall());
941:       assertFalse(node0.isAdd());
942:       assertFalse(node0.isGetElem());
943:       assertFalse(node0.isEmpty());
944:       assertFalse(node0.isAssign());
945:       assertFalse(node0.isNull());
946:       assertFalse(node0.isTrue());
947:       assertFalse(node0.isExprResult());
948:       assertFalse(node0.isBreak());
949:       assertFalse(node0.isName());
950:       assertEquals((-2535), node0.getType());
951:       assertFalse(node0.isVoid());
952:       assertFalse(node0.isDelProp());
953:       assertFalse(node0.isInstanceOf());
954:       assertFalse(node0.isNot());
955:       assertFalse(node0.isObjectLit());
956:       assertFalse(node0.isWith());
957:       assertFalse(node0.isScript());
958:       assertFalse(node0.isComma());
959:       assertFalse(node0.isGetProp());
960:       assertFalse(node0.isThis());
961:       assertFalse(node0.isThrow());
962:       assertFalse(node0.hasOneChild());
963:       assertFalse(node0.isCast());
964:       assertFalse(node0.isFalse());
965:       assertFalse(node0.isNumber());
966:       assertFalse(node0.isLabelName());
967:       assertFalse(node0.isAnd());
968:       assertFalse(node0.isSwitch());
969:       assertFalse(node0.isContinue());
970:       assertFalse(node0.isIn());
971:       assertFalse(node0.hasMoreThanOneChild());
972:       assertFalse(node0.isInc());
973:       assertFalse(node0.isCase());
974:       assertFalse(node0.isFor());
975:       assertFalse(node0.isBlock());
976:       assertEquals(537, node0.getCharno());
977:       assertFalse(node0.isHook());
978:       assertFalse(node0.isNE());
979:       assertFalse(node0.isIf());
980:       assertFalse(boolean2);
981:       
982:       JSDocInfo jSDocInfo0 = new JSDocInfo(true);
983:       assertFalse(jSDocInfo0.makesDicts());
984:       assertFalse(jSDocInfo0.isJaggerModule());
985:       assertFalse(jSDocInfo0.isDeprecated());
986:       assertFalse(jSDocInfo0.isHidden());
987:       assertFalse(jSDocInfo0.isNoSideEffects());
988:       assertFalse(jSDocInfo0.isJavaDispatch());
989:       assertFalse(jSDocInfo0.isNoCompile());
990:       assertFalse(jSDocInfo0.isNoShadow());
991:       assertFalse(jSDocInfo0.isInterface());
992:       assertFalse(jSDocInfo0.isExterns());
993:       assertFalse(jSDocInfo0.isMappedIdGenerator());
994:       assertFalse(jSDocInfo0.isIdGenerator());
995:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
996:       assertNull(jSDocInfo0.getDeprecationReason());
997:       assertNull(jSDocInfo0.getBlockDescription());
998:       assertFalse(jSDocInfo0.isExpose());
999:       assertNull(jSDocInfo0.getLendsName());
1000:       assertNull(jSDocInfo0.getFileOverview());
1001:       assertNull(jSDocInfo0.getVisibility());
1002:       assertNull(jSDocInfo0.getMeaning());
1003:       assertFalse(jSDocInfo0.isNgInject());
1004:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1005:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1006:       assertFalse(jSDocInfo0.isDefine());
1007:       assertEquals(0, jSDocInfo0.getParameterCount());
1008:       assertNull(jSDocInfo0.getDescription());
1009:       assertFalse(jSDocInfo0.hasReturnType());
1010:       assertFalse(jSDocInfo0.makesStructs());
1011:       assertFalse(jSDocInfo0.isNoAlias());
1012:       assertFalse(jSDocInfo0.shouldPreserveTry());
1013:       assertFalse(jSDocInfo0.hasEnumParameterType());
1014:       assertFalse(jSDocInfo0.isConstructor());
1015:       assertFalse(jSDocInfo0.hasTypedefType());
1016:       assertFalse(jSDocInfo0.containsDeclaration());
1017:       assertFalse(jSDocInfo0.isExport());
1018:       assertFalse(jSDocInfo0.hasThisType());
1019:       assertFalse(jSDocInfo0.hasModifies());
1020:       assertFalse(jSDocInfo0.hasFileOverview());
1021:       assertFalse(jSDocInfo0.isJaggerInject());
1022:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1023:       assertNull(jSDocInfo0.getLicense());
1024:       assertFalse(jSDocInfo0.isStableIdGenerator());
1025:       assertFalse(jSDocInfo0.isImplicitCast());
1026:       assertFalse(jSDocInfo0.isJaggerProvide());
1027:       assertFalse(jSDocInfo0.isWizaction());
1028:       assertNull(jSDocInfo0.getReturnDescription());
1029:       assertNull(jSDocInfo0.getOriginalCommentString());
1030:       assertNull(jSDocInfo0.getVersion());
1031:       assertFalse(jSDocInfo0.isDisposes());
1032:       assertFalse(jSDocInfo0.isOverride());
1033:       assertFalse(jSDocInfo0.hasType());
1034:       assertFalse(jSDocInfo0.isConstant());
1035:       assertFalse(jSDocInfo0.hasBaseType());
1036:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1037:       assertFalse(jSDocInfo0.isNoTypeCheck());
1038:       assertNotNull(jSDocInfo0);
1039:       
1040:       Node node1 = Node.newString("");
1041:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1042:       assertEquals(1, Node.DECR_FLAG);
1043:       assertEquals(32, Node.INCRDECR_PROP);
1044:       assertEquals(49, Node.DIRECT_EVAL);
1045:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1046:       assertEquals(37, Node.OPT_ARG_NAME);
1047:       assertEquals(56, Node.CHANGE_TIME);
1048:       assertEquals(46, Node.IS_NAMESPACE);
1049:       assertEquals(54, Node.SLASH_V);
1050:       assertEquals(57, Node.REFLECTED_OBJECT);
1051:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1052:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1053:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1054:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1055:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1056:       assertEquals(12, Node.COLUMN_BITS);
1057:       assertEquals(55, Node.INFERRED_FUNCTION);
1058:       assertEquals(4095, Node.COLUMN_MASK);
1059:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1060:       assertEquals(8, Node.FLAG_NO_THROWS);
1061:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1062:       assertEquals(43, Node.IS_CONSTANT_NAME);
1063:       assertEquals(36, Node.QUOTED_PROP);
1064:       assertEquals(48, Node.DIRECTIVES);
1065:       assertEquals(50, Node.FREE_CALL);
1066:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1067:       assertEquals(29, Node.JSDOC_INFO_PROP);
1068:       assertEquals(52, Node.LENGTH);
1069:       assertEquals(40, Node.ORIGINALNAME_PROP);
1070:       assertEquals(53, Node.INPUT_ID);
1071:       assertEquals(2, Node.POST_FLAG);
1072:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1073:       assertEquals(39, Node.EMPTY_BLOCK);
1074:       assertEquals(57, Node.LAST_PROP);
1075:       assertEquals(30, Node.VAR_ARGS_NAME);
1076:       assertEquals(47, Node.IS_DISPATCHER);
1077:       assertFalse(node1.equals((Object)node0));
1078:       assertFalse(node1.hasOneChild());
1079:       assertFalse(node1.isCast());
1080:       assertFalse(node1.isAssign());
1081:       assertFalse(node1.isDec());
1082:       assertFalse(node1.isNumber());
1083:       assertFalse(node1.hasChildren());
1084:       assertFalse(node1.isScript());
1085:       assertFalse(node1.isAssignAdd());
1086:       assertFalse(node1.isInstanceOf());
1087:       assertFalse(node1.isReturn());
1088:       assertFalse(node1.isComma());
1089:       assertFalse(node1.hasMoreThanOneChild());
1090:       assertFalse(node1.isWith());
1091:       assertFalse(node1.isTypeOf());
1092:       assertFalse(node1.isOr());
1093:       assertFalse(node1.isBreak());
1094:       assertFalse(node1.isExprResult());
1095:       assertFalse(node1.isGetElem());
1096:       assertEquals((-1), node1.getLineno());
1097:       assertFalse(node1.isHook());
1098:       assertFalse(node1.isAdd());
1099:       assertFalse(node1.isVar());
1100:       assertFalse(node1.isBlock());
1101:       assertEquals((-1), node1.getCharno());
1102:       assertFalse(node1.isThis());
1103:       assertFalse(node1.isNew());
1104:       assertFalse(node1.isCase());
1105:       assertTrue(node1.isString());
1106:       assertFalse(node1.isDo());
1107:       assertFalse(node1.isLabel());
1108:       assertEquals(0, node1.getChildCount());
1109:       assertFalse(node1.isParamList());
1110:       assertFalse(node1.isStringKey());
1111:       assertFalse(node1.isSwitch());
1112:       assertFalse(node1.isLabelName());
1113:       assertFalse(node1.isArrayLit());
1114:       assertFalse(node1.isDebugger());
1115:       assertFalse(node1.isFunction());
1116:       assertFalse(node1.isGetterDef());
1117:       assertFalse(node1.isRegExp());
1118:       assertFalse(node1.isDefaultCase());
1119:       assertFalse(node1.isEmpty());
1120:       assertFalse(node1.isFor());
1121:       assertFalse(node1.isTry());
1122:       assertFalse(node1.isIn());
1123:       assertFalse(node1.isCatch());
1124:       assertFalse(node1.isIf());
1125:       assertFalse(node1.isNE());
1126:       assertFalse(node1.isTrue());
1127:       assertFalse(node1.isNull());
1128:       assertFalse(node1.isDelProp());
1129:       assertFalse(node1.isVoid());
1130:       assertFalse(node1.isName());
1131:       assertFalse(node1.isCall());
1132:       assertFalse(node1.isFalse());
1133:       assertFalse(node1.isInc());
1134:       assertFalse(node1.isWhile());
1135:       assertFalse(node1.isSetterDef());
1136:       assertFalse(node1.isGetProp());
1137:       assertFalse(node1.isThrow());
1138:       assertEquals(40, node1.getType());
1139:       assertFalse(node1.isContinue());
1140:       assertFalse(node1.isObjectLit());
1141:       assertFalse(node1.isNot());
1142:       assertEquals((-1), node1.getSourcePosition());
1143:       assertFalse(node1.isAnd());
1144:       assertNotNull(node1);
1145:       assertNotSame(node1, node0);
1146:       
1147:       Node node2 = node1.setJSDocInfo(jSDocInfo0);
1148:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1149:       assertEquals(1, Node.DECR_FLAG);
1150:       assertEquals(32, Node.INCRDECR_PROP);
1151:       assertEquals(49, Node.DIRECT_EVAL);
1152:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1153:       assertEquals(37, Node.OPT_ARG_NAME);
1154:       assertEquals(56, Node.CHANGE_TIME);
1155:       assertEquals(46, Node.IS_NAMESPACE);
1156:       assertEquals(54, Node.SLASH_V);
1157:       assertEquals(57, Node.REFLECTED_OBJECT);
1158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1160:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1161:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1162:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1163:       assertEquals(12, Node.COLUMN_BITS);
1164:       assertEquals(55, Node.INFERRED_FUNCTION);
1165:       assertEquals(4095, Node.COLUMN_MASK);
1166:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1167:       assertEquals(8, Node.FLAG_NO_THROWS);
1168:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1169:       assertEquals(43, Node.IS_CONSTANT_NAME);
1170:       assertEquals(36, Node.QUOTED_PROP);
1171:       assertEquals(48, Node.DIRECTIVES);
1172:       assertEquals(50, Node.FREE_CALL);
1173:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1174:       assertEquals(29, Node.JSDOC_INFO_PROP);
1175:       assertEquals(52, Node.LENGTH);
1176:       assertEquals(40, Node.ORIGINALNAME_PROP);
1177:       assertEquals(53, Node.INPUT_ID);
1178:       assertEquals(2, Node.POST_FLAG);
1179:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1180:       assertEquals(39, Node.EMPTY_BLOCK);
1181:       assertEquals(57, Node.LAST_PROP);
1182:       assertEquals(30, Node.VAR_ARGS_NAME);
1183:       assertEquals(47, Node.IS_DISPATCHER);
1184:       assertEquals(53, Node.INPUT_ID);
1185:       assertEquals(43, Node.IS_CONSTANT_NAME);
1186:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1187:       assertEquals(47, Node.IS_DISPATCHER);
1188:       assertEquals(2, Node.POST_FLAG);
1189:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1190:       assertEquals(4095, Node.COLUMN_MASK);
1191:       assertEquals(46, Node.IS_NAMESPACE);
1192:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1193:       assertEquals(12, Node.COLUMN_BITS);
1194:       assertEquals(32, Node.INCRDECR_PROP);
1195:       assertEquals(50, Node.FREE_CALL);
1196:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1197:       assertEquals(1, Node.DECR_FLAG);
1198:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1199:       assertEquals(54, Node.SLASH_V);
1200:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1201:       assertEquals(57, Node.REFLECTED_OBJECT);
1202:       assertEquals(57, Node.LAST_PROP);
1203:       assertEquals(49, Node.DIRECT_EVAL);
1204:       assertEquals(30, Node.VAR_ARGS_NAME);
1205:       assertEquals(40, Node.ORIGINALNAME_PROP);
1206:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1207:       assertEquals(37, Node.OPT_ARG_NAME);
1208:       assertEquals(39, Node.EMPTY_BLOCK);
1209:       assertEquals(56, Node.CHANGE_TIME);
1210:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1211:       assertEquals(48, Node.DIRECTIVES);
1212:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1213:       assertEquals(29, Node.JSDOC_INFO_PROP);
1214:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1215:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1216:       assertEquals(55, Node.INFERRED_FUNCTION);
1217:       assertEquals(36, Node.QUOTED_PROP);
1218:       assertEquals(52, Node.LENGTH);
1219:       assertEquals(8, Node.FLAG_NO_THROWS);
1220:       assertFalse(node1.equals((Object)node0));
1221:       assertFalse(node2.equals((Object)node0));
1222:       assertFalse(jSDocInfo0.makesDicts());
1223:       assertFalse(jSDocInfo0.isJaggerModule());
1224:       assertFalse(jSDocInfo0.isDeprecated());
1225:       assertFalse(jSDocInfo0.isHidden());
1226:       assertFalse(jSDocInfo0.isNoSideEffects());
1227:       assertFalse(jSDocInfo0.isJavaDispatch());
1228:       assertFalse(jSDocInfo0.isNoCompile());
1229:       assertFalse(jSDocInfo0.isNoShadow());
1230:       assertFalse(jSDocInfo0.isInterface());
1231:       assertFalse(jSDocInfo0.isExterns());
1232:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1233:       assertFalse(jSDocInfo0.isIdGenerator());
1234:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1235:       assertNull(jSDocInfo0.getDeprecationReason());
1236:       assertNull(jSDocInfo0.getBlockDescription());
1237:       assertFalse(jSDocInfo0.isExpose());
1238:       assertNull(jSDocInfo0.getLendsName());
1239:       assertNull(jSDocInfo0.getFileOverview());
1240:       assertNull(jSDocInfo0.getVisibility());
1241:       assertNull(jSDocInfo0.getMeaning());
1242:       assertFalse(jSDocInfo0.isNgInject());
1243:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1244:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1245:       assertFalse(jSDocInfo0.isDefine());
1246:       assertEquals(0, jSDocInfo0.getParameterCount());
1247:       assertNull(jSDocInfo0.getDescription());
1248:       assertFalse(jSDocInfo0.hasReturnType());
1249:       assertFalse(jSDocInfo0.makesStructs());
1250:       assertFalse(jSDocInfo0.isNoAlias());
1251:       assertFalse(jSDocInfo0.shouldPreserveTry());
1252:       assertFalse(jSDocInfo0.hasEnumParameterType());
1253:       assertFalse(jSDocInfo0.isConstructor());
1254:       assertFalse(jSDocInfo0.hasTypedefType());
1255:       assertFalse(jSDocInfo0.containsDeclaration());
1256:       assertFalse(jSDocInfo0.isExport());
1257:       assertFalse(jSDocInfo0.hasThisType());
1258:       assertFalse(jSDocInfo0.hasModifies());
1259:       assertFalse(jSDocInfo0.hasFileOverview());
1260:       assertFalse(jSDocInfo0.isJaggerInject());
1261:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1262:       assertNull(jSDocInfo0.getLicense());
1263:       assertFalse(jSDocInfo0.isStableIdGenerator());
1264:       assertFalse(jSDocInfo0.isImplicitCast());
1265:       assertFalse(jSDocInfo0.isJaggerProvide());
1266:       assertFalse(jSDocInfo0.isWizaction());
1267:       assertNull(jSDocInfo0.getReturnDescription());
1268:       assertNull(jSDocInfo0.getOriginalCommentString());
1269:       assertNull(jSDocInfo0.getVersion());
1270:       assertFalse(jSDocInfo0.isDisposes());
1271:       assertFalse(jSDocInfo0.isOverride());
1272:       assertFalse(jSDocInfo0.hasType());
1273:       assertFalse(jSDocInfo0.isConstant());
1274:       assertFalse(jSDocInfo0.hasBaseType());
1275:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1276:       assertFalse(jSDocInfo0.isNoTypeCheck());
1277:       assertFalse(node1.hasOneChild());
1278:       assertFalse(node1.isCast());
1279:       assertFalse(node1.isAssign());
1280:       assertFalse(node1.isDec());
1281:       assertFalse(node1.isNumber());
1282:       assertFalse(node1.hasChildren());
1283:       assertFalse(node1.isScript());
1284:       assertFalse(node1.isAssignAdd());
1285:       assertFalse(node1.isInstanceOf());
1286:       assertFalse(node1.isReturn());
1287:       assertFalse(node1.isComma());
1288:       assertFalse(node1.hasMoreThanOneChild());
1289:       assertFalse(node1.isWith());
1290:       assertFalse(node1.isTypeOf());
1291:       assertFalse(node1.isOr());
1292:       assertFalse(node1.isBreak());
1293:       assertFalse(node1.isExprResult());
1294:       assertFalse(node1.isGetElem());
1295:       assertEquals((-1), node1.getLineno());
1296:       assertFalse(node1.isHook());
1297:       assertFalse(node1.isAdd());
1298:       assertFalse(node1.isVar());
1299:       assertFalse(node1.isBlock());
1300:       assertEquals((-1), node1.getCharno());
1301:       assertFalse(node1.isThis());
1302:       assertFalse(node1.isNew());
1303:       assertFalse(node1.isCase());
1304:       assertTrue(node1.isString());
1305:       assertFalse(node1.isDo());
1306:       assertFalse(node1.isLabel());
1307:       assertEquals(0, node1.getChildCount());
1308:       assertFalse(node1.isParamList());
1309:       assertFalse(node1.isStringKey());
1310:       assertFalse(node1.isSwitch());
1311:       assertFalse(node1.isLabelName());
1312:       assertFalse(node1.isArrayLit());
1313:       assertFalse(node1.isDebugger());
1314:       assertFalse(node1.isFunction());
1315:       assertFalse(node1.isGetterDef());
1316:       assertFalse(node1.isRegExp());
1317:       assertFalse(node1.isDefaultCase());
1318:       assertFalse(node1.isEmpty());
1319:       assertFalse(node1.isFor());
1320:       assertFalse(node1.isTry());
1321:       assertFalse(node1.isIn());
1322:       assertFalse(node1.isCatch());
1323:       assertFalse(node1.isIf());
1324:       assertFalse(node1.isNE());
1325:       assertFalse(node1.isTrue());
1326:       assertFalse(node1.isNull());
1327:       assertFalse(node1.isDelProp());
1328:       assertFalse(node1.isVoid());
1329:       assertFalse(node1.isName());
1330:       assertFalse(node1.isCall());
1331:       assertFalse(node1.isFalse());
1332:       assertFalse(node1.isInc());
1333:       assertFalse(node1.isWhile());
1334:       assertFalse(node1.isSetterDef());
1335:       assertFalse(node1.isGetProp());
1336:       assertFalse(node1.isThrow());
1337:       assertEquals(40, node1.getType());
1338:       assertFalse(node1.isContinue());
1339:       assertFalse(node1.isObjectLit());
1340:       assertFalse(node1.isNot());
1341:       assertEquals((-1), node1.getSourcePosition());
1342:       assertFalse(node1.isAnd());
1343:       assertFalse(node2.isParamList());
1344:       assertFalse(node2.isSetterDef());
1345:       assertFalse(node2.isCatch());
1346:       assertFalse(node2.isStringKey());
1347:       assertFalse(node2.isName());
1348:       assertFalse(node2.isTrue());
1349:       assertFalse(node2.isNull());
1350:       assertFalse(node2.isVoid());
1351:       assertFalse(node2.isDebugger());
1352:       assertFalse(node2.isTry());
1353:       assertTrue(node2.isString());
1354:       assertFalse(node2.isRegExp());
1355:       assertFalse(node2.isCall());
1356:       assertFalse(node2.hasMoreThanOneChild());
1357:       assertFalse(node2.isWhile());
1358:       assertFalse(node2.isReturn());
1359:       assertFalse(node2.isFor());
1360:       assertFalse(node2.isBlock());
1361:       assertFalse(node2.isIn());
1362:       assertEquals((-1), node2.getLineno());
1363:       assertFalse(node2.isIf());
1364:       assertEquals((-1), node2.getSourcePosition());
1365:       assertFalse(node2.isNE());
1366:       assertFalse(node2.isFunction());
1367:       assertFalse(node2.isCast());
1368:       assertFalse(node2.isInc());
1369:       assertFalse(node2.isContinue());
1370:       assertFalse(node2.isThrow());
1371:       assertFalse(node2.isFalse());
1372:       assertEquals(40, node2.getType());
1373:       assertFalse(node2.isGetProp());
1374:       assertFalse(node2.isComma());
1375:       assertFalse(node2.isBreak());
1376:       assertFalse(node2.isInstanceOf());
1377:       assertFalse(node2.isAnd());
1378:       assertFalse(node2.isNot());
1379:       assertFalse(node2.isObjectLit());
1380:       assertEquals((-1), node2.getCharno());
1381:       assertFalse(node2.hasOneChild());
1382:       assertFalse(node2.isExprResult());
1383:       assertFalse(node2.isScript());
1384:       assertFalse(node2.isCase());
1385:       assertFalse(node2.isAssign());
1386:       assertFalse(node2.isWith());
1387:       assertFalse(node2.hasChildren());
1388:       assertFalse(node2.isDec());
1389:       assertFalse(node2.isHook());
1390:       assertFalse(node2.isThis());
1391:       assertFalse(node2.isOr());
1392:       assertFalse(node2.isAssignAdd());
1393:       assertFalse(node2.isTypeOf());
1394:       assertFalse(node2.isNumber());
1395:       assertFalse(node2.isEmpty());
1396:       assertFalse(node2.isGetElem());
1397:       assertFalse(node2.isLabelName());
1398:       assertFalse(node2.isDelProp());
1399:       assertFalse(node2.isGetterDef());
1400:       assertFalse(node2.isNew());
1401:       assertFalse(node2.isSwitch());
1402:       assertFalse(node2.isArrayLit());
1403:       assertFalse(node2.isAdd());
1404:       assertFalse(node2.isDo());
1405:       assertFalse(node2.isDefaultCase());
1406:       assertEquals(0, node2.getChildCount());
1407:       assertFalse(node2.isLabel());
1408:       assertFalse(node2.isVar());
1409:       assertNotNull(node2);
1410:       assertNotSame(node1, node0);
1411:       assertSame(node1, node2);
1412:       assertSame(node2, node1);
1413:       assertNotSame(node2, node0);
1414:       
1415:       boolean boolean3 = node0.isSwitch();
1416:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1417:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1418:       assertEquals(29, Node.JSDOC_INFO_PROP);
1419:       assertEquals(53, Node.INPUT_ID);
1420:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1421:       assertEquals(37, Node.OPT_ARG_NAME);
1422:       assertEquals(43, Node.IS_CONSTANT_NAME);
1423:       assertEquals(56, Node.CHANGE_TIME);
1424:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1425:       assertEquals(46, Node.IS_NAMESPACE);
1426:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1427:       assertEquals(36, Node.QUOTED_PROP);
1428:       assertEquals(55, Node.INFERRED_FUNCTION);
1429:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1430:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1431:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1432:       assertEquals(2, Node.POST_FLAG);
1433:       assertEquals(57, Node.LAST_PROP);
1434:       assertEquals(30, Node.VAR_ARGS_NAME);
1435:       assertEquals(47, Node.IS_DISPATCHER);
1436:       assertEquals(40, Node.ORIGINALNAME_PROP);
1437:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1438:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1439:       assertEquals(8, Node.FLAG_NO_THROWS);
1440:       assertEquals(39, Node.EMPTY_BLOCK);
1441:       assertEquals(48, Node.DIRECTIVES);
1442:       assertEquals(54, Node.SLASH_V);
1443:       assertEquals(52, Node.LENGTH);
1444:       assertEquals(50, Node.FREE_CALL);
1445:       assertEquals(57, Node.REFLECTED_OBJECT);
1446:       assertEquals(12, Node.COLUMN_BITS);
1447:       assertEquals(4095, Node.COLUMN_MASK);
1448:       assertEquals(49, Node.DIRECT_EVAL);
1449:       assertEquals(32, Node.INCRDECR_PROP);
1450:       assertEquals(1, Node.DECR_FLAG);
1451:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1452:       assertFalse(node0.equals((Object)node1));
1453:       assertFalse(node0.equals((Object)node2));
1454:       assertTrue(boolean3 == boolean0);
1455:       assertTrue(boolean3 == boolean1);
1456:       assertTrue(boolean3 == boolean2);
1457:       assertEquals(0, node0.getChildCount());
1458:       assertFalse(node0.isCatch());
1459:       assertEquals(537, node0.getSourcePosition());
1460:       assertEquals(0, node0.getLineno());
1461:       assertFalse(node0.isRegExp());
1462:       assertFalse(node0.isSetterDef());
1463:       assertFalse(node0.isTry());
1464:       assertFalse(node0.isDefaultCase());
1465:       assertFalse(node0.isArrayLit());
1466:       assertFalse(node0.isVar());
1467:       assertFalse(node0.isGetterDef());
1468:       assertFalse(node0.isFunction());
1469:       assertFalse(node0.isDebugger());
1470:       assertFalse(node0.isStringKey());
1471:       assertFalse(node0.isParamList());
1472:       assertFalse(node0.isReturn());
1473:       assertFalse(node0.isLabel());
1474:       assertFalse(node0.isOr());
1475:       assertFalse(node0.isString());
1476:       assertFalse(node0.isTypeOf());
1477:       assertFalse(node0.isDec());
1478:       assertFalse(node0.hasChildren());
1479:       assertFalse(node0.isNew());
1480:       assertFalse(node0.isDo());
1481:       assertFalse(node0.isWhile());
1482:       assertFalse(node0.isAssignAdd());
1483:       assertFalse(node0.isCall());
1484:       assertFalse(node0.isAdd());
1485:       assertFalse(node0.isGetElem());
1486:       assertFalse(node0.isEmpty());
1487:       assertFalse(node0.isAssign());
1488:       assertFalse(node0.isNull());
1489:       assertFalse(node0.isTrue());
1490:       assertFalse(node0.isExprResult());
1491:       assertFalse(node0.isBreak());
1492:       assertFalse(node0.isName());
1493:       assertEquals((-2535), node0.getType());
1494:       assertFalse(node0.isVoid());
1495:       assertFalse(node0.isDelProp());
1496:       assertFalse(node0.isInstanceOf());
1497:       assertFalse(node0.isNot());
1498:       assertFalse(node0.isObjectLit());
1499:       assertFalse(node0.isWith());
1500:       assertFalse(node0.isScript());
1501:       assertFalse(node0.isComma());
1502:       assertFalse(node0.isGetProp());
1503:       assertFalse(node0.isThis());
1504:       assertFalse(node0.isThrow());
1505:       assertFalse(node0.hasOneChild());
1506:       assertFalse(node0.isCast());
1507:       assertFalse(node0.isFalse());
1508:       assertFalse(node0.isNumber());
1509:       assertFalse(node0.isLabelName());
1510:       assertFalse(node0.isAnd());
1511:       assertFalse(node0.isSwitch());
1512:       assertFalse(node0.isContinue());
1513:       assertFalse(node0.isIn());
1514:       assertFalse(node0.hasMoreThanOneChild());
1515:       assertFalse(node0.isInc());
1516:       assertFalse(node0.isCase());
1517:       assertFalse(node0.isFor());
1518:       assertFalse(node0.isBlock());
1519:       assertEquals(537, node0.getCharno());
1520:       assertFalse(node0.isHook());
1521:       assertFalse(node0.isNE());
1522:       assertFalse(node0.isIf());
1523:       assertFalse(boolean3);
1524:       assertNotSame(node0, node1);
1525:       assertNotSame(node0, node2);
1526:       
1527:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
1528:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1529:       assertNotNull(jSTypeRegistry0);
1530:       
1531:       // Undeclared exception!
1532:       try { 
1533:         jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) null);
1534:         fail("Expecting exception: NullPointerException");
1535:       
1536:       } catch(NullPointerException e) {
1537:          //
1538:          // no message in exception (getMessage() returned null)
1539:          //
1540:          verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
1541:       }
1542:   }
1543: }
RegularFileObject[/tmp/EvoSuite_45_1628256118719/com/google/javascript/rhino/Node_45_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:21:58 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_45_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_45_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.common.collect.Iterables",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_45_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.Token",
267:       "com.google.common.base.Preconditions",
268:       "com.google.common.base.Objects",
269:       "com.google.javascript.rhino.SimpleErrorReporter",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.common.collect.Sets",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.Iterators$12",
347:       "com.google.common.collect.AbstractIndexedListIterator",
348:       "com.google.common.collect.Iterators$11",
349:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
350:       "com.google.javascript.rhino.InputId",
351:       "com.google.javascript.rhino.JSTypeExpression",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Platform",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
364:       "com.google.javascript.rhino.jstype.NamedType",
365:       "com.google.common.collect.AbstractMultimap$Values",
366:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
367:       "com.google.common.collect.AbstractMapBasedMultimap$1",
368:       "com.google.common.collect.Multimaps$Entries",
369:       "com.google.common.collect.AbstractMultimap$Entries",
370:       "com.google.common.collect.AbstractMapBasedMultimap$2",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
373:     );
374:   }
375: }

[MASTER] 13:21:59.142 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-2535), "");
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals((-2535), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(iterable0.contains(node0));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals((-2535), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertNotNull(iterable0);

int int0 = node0.getLength();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals((-2535), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(0, int0);

int int1 = node0.getSideEffectFlags();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertTrue(int1 == int0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals((-2535), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(0, int1);

int int2 = node0.getSourcePosition();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(int2 == int1);
assertFalse(int2 == int0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals((-2535), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), int2);

boolean boolean0 = node0.isGetProp();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals((-2535), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(boolean0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1237));
assertEquals((-1237), node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

boolean boolean1 = node0.isSwitch();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertTrue(boolean1 == boolean0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals((-2535), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(boolean1);

node0.setSourceEncodedPositionForTree(537);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertEquals(537, node0.getSourcePosition());
assertEquals(0, node0.getLineno());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals((-2535), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertEquals(537, node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());

boolean boolean2 = node0.isAssignAdd();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertEquals(537, node0.getSourcePosition());
assertEquals(0, node0.getLineno());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals((-2535), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertEquals(537, node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(boolean2);

JSDocInfo jSDocInfo0 = new JSDocInfo(true);
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertNull(jSDocInfo0.getDeprecationReason());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isExpose());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isNgInject());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isDefine());
assertEquals(0, jSDocInfo0.getParameterCount());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isWizaction());
assertNull(jSDocInfo0.getReturnDescription());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.hasBaseType());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNotNull(jSDocInfo0);

Node node1 = Node.newString("");
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isHook());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThis());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isGetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertEquals(40, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertNotNull(node1);
assertNotSame(node1, node0);

Node node2 = node1.setJSDocInfo(jSDocInfo0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertNull(jSDocInfo0.getDeprecationReason());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isExpose());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isNgInject());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isDefine());
assertEquals(0, jSDocInfo0.getParameterCount());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isWizaction());
assertNull(jSDocInfo0.getReturnDescription());
assertNull(jSDocInfo0.getOriginalCommentString());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.hasBaseType());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isHook());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThis());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isGetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertEquals(40, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertTrue(node2.isString());
assertFalse(node2.isRegExp());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNE());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isInc());
assertFalse(node2.isContinue());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(40, node2.getType());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.hasOneChild());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertNotNull(node2);
assertNotSame(node1, node0);
assertSame(node1, node2);
assertSame(node2, node1);
assertNotSame(node2, node0);

boolean boolean3 = node0.isSwitch();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertEquals(537, node0.getSourcePosition());
assertEquals(0, node0.getLineno());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals((-2535), node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertEquals(537, node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(boolean3);
assertNotSame(node0, node1);
assertNotSame(node0, node2);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) null);

[MASTER] 13:22:00.469 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_56_1628256120220/com/google/javascript/rhino/Node_56_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_56_1628256120220/com/google/javascript/rhino/Node_56_tmp__ESTest_scaffolding.java]]
[MASTER] 13:22:00.469 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:22:00.469 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:22:00.470 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 170
[MASTER] 13:22:00.472 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_56_1628256120220/com/google/javascript/rhino/Node_56_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:22:00 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.ErrorReporter;
12: import com.google.javascript.rhino.JSDocInfo;
13: import com.google.javascript.rhino.JSTypeExpression;
14: import com.google.javascript.rhino.Node;
15: import com.google.javascript.rhino.jstype.JSType;
16: import com.google.javascript.rhino.jstype.JSTypeRegistry;
17: import java.util.List;
18: import java.util.Set;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class Node_56_tmp__ESTest extends Node_56_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       Node node0 = Node.newString((-2535), "");
29:       assertEquals(15, Node.NO_SIDE_EFFECTS);
30:       assertEquals(30, Node.VAR_ARGS_NAME);
31:       assertEquals(52, Node.LENGTH);
32:       assertEquals(40, Node.ORIGINALNAME_PROP);
33:       assertEquals(57, Node.REFLECTED_OBJECT);
34:       assertEquals(51, Node.STATIC_SOURCE_FILE);
35:       assertEquals(49, Node.DIRECT_EVAL);
36:       assertEquals(46, Node.IS_NAMESPACE);
37:       assertEquals(54, Node.SLASH_V);
38:       assertEquals(2, Node.POST_FLAG);
39:       assertEquals(8, Node.FLAG_NO_THROWS);
40:       assertEquals(39, Node.EMPTY_BLOCK);
41:       assertEquals(47, Node.IS_DISPATCHER);
42:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
43:       assertEquals(29, Node.JSDOC_INFO_PROP);
44:       assertEquals(55, Node.INFERRED_FUNCTION);
45:       assertEquals(57, Node.LAST_PROP);
46:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
47:       assertEquals(36, Node.QUOTED_PROP);
48:       assertEquals(53, Node.INPUT_ID);
49:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
50:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
51:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
52:       assertEquals(43, Node.IS_CONSTANT_NAME);
53:       assertEquals(56, Node.CHANGE_TIME);
54:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
55:       assertEquals(48, Node.DIRECTIVES);
56:       assertEquals(37, Node.OPT_ARG_NAME);
57:       assertEquals(50, Node.FREE_CALL);
58:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
59:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
60:       assertEquals(12, Node.COLUMN_BITS);
61:       assertEquals(4095, Node.COLUMN_MASK);
62:       assertEquals(32, Node.INCRDECR_PROP);
63:       assertEquals(1, Node.DECR_FLAG);
64:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
65:       assertFalse(node0.isIf());
66:       assertFalse(node0.isDelProp());
67:       assertFalse(node0.isGetterDef());
68:       assertFalse(node0.isNE());
69:       assertFalse(node0.isFor());
70:       assertFalse(node0.isIn());
71:       assertFalse(node0.isEmpty());
72:       assertFalse(node0.isTry());
73:       assertFalse(node0.isCase());
74:       assertFalse(node0.isDefaultCase());
75:       assertFalse(node0.isSwitch());
76:       assertFalse(node0.isString());
77:       assertFalse(node0.isFunction());
78:       assertEquals((-1), node0.getCharno());
79:       assertFalse(node0.isDebugger());
80:       assertEquals(0, node0.getChildCount());
81:       assertFalse(node0.isArrayLit());
82:       assertFalse(node0.isParamList());
83:       assertFalse(node0.isFalse());
84:       assertFalse(node0.isThrow());
85:       assertFalse(node0.isStringKey());
86:       assertFalse(node0.isThis());
87:       assertFalse(node0.isHook());
88:       assertFalse(node0.isInc());
89:       assertFalse(node0.isSetterDef());
90:       assertFalse(node0.isRegExp());
91:       assertFalse(node0.isWith());
92:       assertFalse(node0.isBlock());
93:       assertFalse(node0.isInstanceOf());
94:       assertFalse(node0.isCatch());
95:       assertFalse(node0.hasMoreThanOneChild());
96:       assertEquals((-1), node0.getLineno());
97:       assertFalse(node0.hasChildren());
98:       assertFalse(node0.isDec());
99:       assertFalse(node0.isNumber());
100:       assertFalse(node0.isTypeOf());
101:       assertFalse(node0.isReturn());
102:       assertFalse(node0.isAssign());
103:       assertFalse(node0.isOr());
104:       assertEquals((-1), node0.getSourcePosition());
105:       assertFalse(node0.isLabel());
106:       assertFalse(node0.hasOneChild());
107:       assertFalse(node0.isAssignAdd());
108:       assertFalse(node0.isDo());
109:       assertFalse(node0.isScript());
110:       assertFalse(node0.isObjectLit());
111:       assertFalse(node0.isNot());
112:       assertFalse(node0.isCast());
113:       assertFalse(node0.isAnd());
114:       assertFalse(node0.isContinue());
115:       assertFalse(node0.isLabelName());
116:       assertFalse(node0.isBreak());
117:       assertFalse(node0.isNull());
118:       assertEquals((-2535), node0.getType());
119:       assertFalse(node0.isComma());
120:       assertFalse(node0.isVar());
121:       assertFalse(node0.isGetProp());
122:       assertFalse(node0.isAdd());
123:       assertFalse(node0.isNew());
124:       assertFalse(node0.isWhile());
125:       assertFalse(node0.isTrue());
126:       assertFalse(node0.isGetElem());
127:       assertFalse(node0.isVoid());
128:       assertFalse(node0.isName());
129:       assertFalse(node0.isCall());
130:       assertFalse(node0.isExprResult());
131:       assertNotNull(node0);
132:       
133:       Iterable<Node> iterable0 = node0.children();
134:       assertEquals(15, Node.NO_SIDE_EFFECTS);
135:       assertEquals(30, Node.VAR_ARGS_NAME);
136:       assertEquals(52, Node.LENGTH);
137:       assertEquals(40, Node.ORIGINALNAME_PROP);
138:       assertEquals(57, Node.REFLECTED_OBJECT);
139:       assertEquals(51, Node.STATIC_SOURCE_FILE);
140:       assertEquals(49, Node.DIRECT_EVAL);
141:       assertEquals(46, Node.IS_NAMESPACE);
142:       assertEquals(54, Node.SLASH_V);
143:       assertEquals(2, Node.POST_FLAG);
144:       assertEquals(8, Node.FLAG_NO_THROWS);
145:       assertEquals(39, Node.EMPTY_BLOCK);
146:       assertEquals(47, Node.IS_DISPATCHER);
147:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
148:       assertEquals(29, Node.JSDOC_INFO_PROP);
149:       assertEquals(55, Node.INFERRED_FUNCTION);
150:       assertEquals(57, Node.LAST_PROP);
151:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
152:       assertEquals(36, Node.QUOTED_PROP);
153:       assertEquals(53, Node.INPUT_ID);
154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
155:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
156:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
157:       assertEquals(43, Node.IS_CONSTANT_NAME);
158:       assertEquals(56, Node.CHANGE_TIME);
159:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
160:       assertEquals(48, Node.DIRECTIVES);
161:       assertEquals(37, Node.OPT_ARG_NAME);
162:       assertEquals(50, Node.FREE_CALL);
163:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
164:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
165:       assertEquals(12, Node.COLUMN_BITS);
166:       assertEquals(4095, Node.COLUMN_MASK);
167:       assertEquals(32, Node.INCRDECR_PROP);
168:       assertEquals(1, Node.DECR_FLAG);
169:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
170:       assertFalse(iterable0.contains(node0));
171:       assertFalse(node0.isIf());
172:       assertFalse(node0.isDelProp());
173:       assertFalse(node0.isGetterDef());
174:       assertFalse(node0.isNE());
175:       assertFalse(node0.isFor());
176:       assertFalse(node0.isIn());
177:       assertFalse(node0.isEmpty());
178:       assertFalse(node0.isTry());
179:       assertFalse(node0.isCase());
180:       assertFalse(node0.isDefaultCase());
181:       assertFalse(node0.isSwitch());
182:       assertFalse(node0.isString());
183:       assertFalse(node0.isFunction());
184:       assertEquals((-1), node0.getCharno());
185:       assertFalse(node0.isDebugger());
186:       assertEquals(0, node0.getChildCount());
187:       assertFalse(node0.isArrayLit());
188:       assertFalse(node0.isParamList());
189:       assertFalse(node0.isFalse());
190:       assertFalse(node0.isThrow());
191:       assertFalse(node0.isStringKey());
192:       assertFalse(node0.isThis());
193:       assertFalse(node0.isHook());
194:       assertFalse(node0.isInc());
195:       assertFalse(node0.isSetterDef());
196:       assertFalse(node0.isRegExp());
197:       assertFalse(node0.isWith());
198:       assertFalse(node0.isBlock());
199:       assertFalse(node0.isInstanceOf());
200:       assertFalse(node0.isCatch());
201:       assertFalse(node0.hasMoreThanOneChild());
202:       assertEquals((-1), node0.getLineno());
203:       assertFalse(node0.hasChildren());
204:       assertFalse(node0.isDec());
205:       assertFalse(node0.isNumber());
206:       assertFalse(node0.isTypeOf());
207:       assertFalse(node0.isReturn());
208:       assertFalse(node0.isAssign());
209:       assertFalse(node0.isOr());
210:       assertEquals((-1), node0.getSourcePosition());
211:       assertFalse(node0.isLabel());
212:       assertFalse(node0.hasOneChild());
213:       assertFalse(node0.isAssignAdd());
214:       assertFalse(node0.isDo());
215:       assertFalse(node0.isScript());
216:       assertFalse(node0.isObjectLit());
217:       assertFalse(node0.isNot());
218:       assertFalse(node0.isCast());
219:       assertFalse(node0.isAnd());
220:       assertFalse(node0.isContinue());
221:       assertFalse(node0.isLabelName());
222:       assertFalse(node0.isBreak());
223:       assertFalse(node0.isNull());
224:       assertEquals((-2535), node0.getType());
225:       assertFalse(node0.isComma());
226:       assertFalse(node0.isVar());
227:       assertFalse(node0.isGetProp());
228:       assertFalse(node0.isAdd());
229:       assertFalse(node0.isNew());
230:       assertFalse(node0.isWhile());
231:       assertFalse(node0.isTrue());
232:       assertFalse(node0.isGetElem());
233:       assertFalse(node0.isVoid());
234:       assertFalse(node0.isName());
235:       assertFalse(node0.isCall());
236:       assertFalse(node0.isExprResult());
237:       assertNotNull(iterable0);
238:       
239:       int int0 = node0.getLength();
240:       assertEquals(15, Node.NO_SIDE_EFFECTS);
241:       assertEquals(30, Node.VAR_ARGS_NAME);
242:       assertEquals(52, Node.LENGTH);
243:       assertEquals(40, Node.ORIGINALNAME_PROP);
244:       assertEquals(57, Node.REFLECTED_OBJECT);
245:       assertEquals(51, Node.STATIC_SOURCE_FILE);
246:       assertEquals(49, Node.DIRECT_EVAL);
247:       assertEquals(46, Node.IS_NAMESPACE);
248:       assertEquals(54, Node.SLASH_V);
249:       assertEquals(2, Node.POST_FLAG);
250:       assertEquals(8, Node.FLAG_NO_THROWS);
251:       assertEquals(39, Node.EMPTY_BLOCK);
252:       assertEquals(47, Node.IS_DISPATCHER);
253:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
254:       assertEquals(29, Node.JSDOC_INFO_PROP);
255:       assertEquals(55, Node.INFERRED_FUNCTION);
256:       assertEquals(57, Node.LAST_PROP);
257:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
258:       assertEquals(36, Node.QUOTED_PROP);
259:       assertEquals(53, Node.INPUT_ID);
260:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
261:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
262:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
263:       assertEquals(43, Node.IS_CONSTANT_NAME);
264:       assertEquals(56, Node.CHANGE_TIME);
265:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
266:       assertEquals(48, Node.DIRECTIVES);
267:       assertEquals(37, Node.OPT_ARG_NAME);
268:       assertEquals(50, Node.FREE_CALL);
269:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
270:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
271:       assertEquals(12, Node.COLUMN_BITS);
272:       assertEquals(4095, Node.COLUMN_MASK);
273:       assertEquals(32, Node.INCRDECR_PROP);
274:       assertEquals(1, Node.DECR_FLAG);
275:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
276:       assertFalse(node0.isIf());
277:       assertFalse(node0.isDelProp());
278:       assertFalse(node0.isGetterDef());
279:       assertFalse(node0.isNE());
280:       assertFalse(node0.isFor());
281:       assertFalse(node0.isIn());
282:       assertFalse(node0.isEmpty());
283:       assertFalse(node0.isTry());
284:       assertFalse(node0.isCase());
285:       assertFalse(node0.isDefaultCase());
286:       assertFalse(node0.isSwitch());
287:       assertFalse(node0.isString());
288:       assertFalse(node0.isFunction());
289:       assertEquals((-1), node0.getCharno());
290:       assertFalse(node0.isDebugger());
291:       assertEquals(0, node0.getChildCount());
292:       assertFalse(node0.isArrayLit());
293:       assertFalse(node0.isParamList());
294:       assertFalse(node0.isFalse());
295:       assertFalse(node0.isThrow());
296:       assertFalse(node0.isStringKey());
297:       assertFalse(node0.isThis());
298:       assertFalse(node0.isHook());
299:       assertFalse(node0.isInc());
300:       assertFalse(node0.isSetterDef());
301:       assertFalse(node0.isRegExp());
302:       assertFalse(node0.isWith());
303:       assertFalse(node0.isBlock());
304:       assertFalse(node0.isInstanceOf());
305:       assertFalse(node0.isCatch());
306:       assertFalse(node0.hasMoreThanOneChild());
307:       assertEquals((-1), node0.getLineno());
308:       assertFalse(node0.hasChildren());
309:       assertFalse(node0.isDec());
310:       assertFalse(node0.isNumber());
311:       assertFalse(node0.isTypeOf());
312:       assertFalse(node0.isReturn());
313:       assertFalse(node0.isAssign());
314:       assertFalse(node0.isOr());
315:       assertEquals((-1), node0.getSourcePosition());
316:       assertFalse(node0.isLabel());
317:       assertFalse(node0.hasOneChild());
318:       assertFalse(node0.isAssignAdd());
319:       assertFalse(node0.isDo());
320:       assertFalse(node0.isScript());
321:       assertFalse(node0.isObjectLit());
322:       assertFalse(node0.isNot());
323:       assertFalse(node0.isCast());
324:       assertFalse(node0.isAnd());
325:       assertFalse(node0.isContinue());
326:       assertFalse(node0.isLabelName());
327:       assertFalse(node0.isBreak());
328:       assertFalse(node0.isNull());
329:       assertEquals((-2535), node0.getType());
330:       assertFalse(node0.isComma());
331:       assertFalse(node0.isVar());
332:       assertFalse(node0.isGetProp());
333:       assertFalse(node0.isAdd());
334:       assertFalse(node0.isNew());
335:       assertFalse(node0.isWhile());
336:       assertFalse(node0.isTrue());
337:       assertFalse(node0.isGetElem());
338:       assertFalse(node0.isVoid());
339:       assertFalse(node0.isName());
340:       assertFalse(node0.isCall());
341:       assertFalse(node0.isExprResult());
342:       assertEquals(0, int0);
343:       
344:       int int1 = node0.getSourcePosition();
345:       assertEquals(15, Node.NO_SIDE_EFFECTS);
346:       assertEquals(30, Node.VAR_ARGS_NAME);
347:       assertEquals(52, Node.LENGTH);
348:       assertEquals(40, Node.ORIGINALNAME_PROP);
349:       assertEquals(57, Node.REFLECTED_OBJECT);
350:       assertEquals(51, Node.STATIC_SOURCE_FILE);
351:       assertEquals(49, Node.DIRECT_EVAL);
352:       assertEquals(46, Node.IS_NAMESPACE);
353:       assertEquals(54, Node.SLASH_V);
354:       assertEquals(2, Node.POST_FLAG);
355:       assertEquals(8, Node.FLAG_NO_THROWS);
356:       assertEquals(39, Node.EMPTY_BLOCK);
357:       assertEquals(47, Node.IS_DISPATCHER);
358:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
359:       assertEquals(29, Node.JSDOC_INFO_PROP);
360:       assertEquals(55, Node.INFERRED_FUNCTION);
361:       assertEquals(57, Node.LAST_PROP);
362:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
363:       assertEquals(36, Node.QUOTED_PROP);
364:       assertEquals(53, Node.INPUT_ID);
365:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
366:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
367:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
368:       assertEquals(43, Node.IS_CONSTANT_NAME);
369:       assertEquals(56, Node.CHANGE_TIME);
370:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
371:       assertEquals(48, Node.DIRECTIVES);
372:       assertEquals(37, Node.OPT_ARG_NAME);
373:       assertEquals(50, Node.FREE_CALL);
374:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
375:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
376:       assertEquals(12, Node.COLUMN_BITS);
377:       assertEquals(4095, Node.COLUMN_MASK);
378:       assertEquals(32, Node.INCRDECR_PROP);
379:       assertEquals(1, Node.DECR_FLAG);
380:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
381:       assertFalse(int1 == int0);
382:       assertFalse(node0.isIf());
383:       assertFalse(node0.isDelProp());
384:       assertFalse(node0.isGetterDef());
385:       assertFalse(node0.isNE());
386:       assertFalse(node0.isFor());
387:       assertFalse(node0.isIn());
388:       assertFalse(node0.isEmpty());
389:       assertFalse(node0.isTry());
390:       assertFalse(node0.isCase());
391:       assertFalse(node0.isDefaultCase());
392:       assertFalse(node0.isSwitch());
393:       assertFalse(node0.isString());
394:       assertFalse(node0.isFunction());
395:       assertEquals((-1), node0.getCharno());
396:       assertFalse(node0.isDebugger());
397:       assertEquals(0, node0.getChildCount());
398:       assertFalse(node0.isArrayLit());
399:       assertFalse(node0.isParamList());
400:       assertFalse(node0.isFalse());
401:       assertFalse(node0.isThrow());
402:       assertFalse(node0.isStringKey());
403:       assertFalse(node0.isThis());
404:       assertFalse(node0.isHook());
405:       assertFalse(node0.isInc());
406:       assertFalse(node0.isSetterDef());
407:       assertFalse(node0.isRegExp());
408:       assertFalse(node0.isWith());
409:       assertFalse(node0.isBlock());
410:       assertFalse(node0.isInstanceOf());
411:       assertFalse(node0.isCatch());
412:       assertFalse(node0.hasMoreThanOneChild());
413:       assertEquals((-1), node0.getLineno());
414:       assertFalse(node0.hasChildren());
415:       assertFalse(node0.isDec());
416:       assertFalse(node0.isNumber());
417:       assertFalse(node0.isTypeOf());
418:       assertFalse(node0.isReturn());
419:       assertFalse(node0.isAssign());
420:       assertFalse(node0.isOr());
421:       assertEquals((-1), node0.getSourcePosition());
422:       assertFalse(node0.isLabel());
423:       assertFalse(node0.hasOneChild());
424:       assertFalse(node0.isAssignAdd());
425:       assertFalse(node0.isDo());
426:       assertFalse(node0.isScript());
427:       assertFalse(node0.isObjectLit());
428:       assertFalse(node0.isNot());
429:       assertFalse(node0.isCast());
430:       assertFalse(node0.isAnd());
431:       assertFalse(node0.isContinue());
432:       assertFalse(node0.isLabelName());
433:       assertFalse(node0.isBreak());
434:       assertFalse(node0.isNull());
435:       assertEquals((-2535), node0.getType());
436:       assertFalse(node0.isComma());
437:       assertFalse(node0.isVar());
438:       assertFalse(node0.isGetProp());
439:       assertFalse(node0.isAdd());
440:       assertFalse(node0.isNew());
441:       assertFalse(node0.isWhile());
442:       assertFalse(node0.isTrue());
443:       assertFalse(node0.isGetElem());
444:       assertFalse(node0.isVoid());
445:       assertFalse(node0.isName());
446:       assertFalse(node0.isCall());
447:       assertFalse(node0.isExprResult());
448:       assertEquals((-1), int1);
449:       
450:       boolean boolean0 = node0.isGetProp();
451:       assertEquals(15, Node.NO_SIDE_EFFECTS);
452:       assertEquals(30, Node.VAR_ARGS_NAME);
453:       assertEquals(52, Node.LENGTH);
454:       assertEquals(40, Node.ORIGINALNAME_PROP);
455:       assertEquals(57, Node.REFLECTED_OBJECT);
456:       assertEquals(51, Node.STATIC_SOURCE_FILE);
457:       assertEquals(49, Node.DIRECT_EVAL);
458:       assertEquals(46, Node.IS_NAMESPACE);
459:       assertEquals(54, Node.SLASH_V);
460:       assertEquals(2, Node.POST_FLAG);
461:       assertEquals(8, Node.FLAG_NO_THROWS);
462:       assertEquals(39, Node.EMPTY_BLOCK);
463:       assertEquals(47, Node.IS_DISPATCHER);
464:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
465:       assertEquals(29, Node.JSDOC_INFO_PROP);
466:       assertEquals(55, Node.INFERRED_FUNCTION);
467:       assertEquals(57, Node.LAST_PROP);
468:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
469:       assertEquals(36, Node.QUOTED_PROP);
470:       assertEquals(53, Node.INPUT_ID);
471:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
472:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
473:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
474:       assertEquals(43, Node.IS_CONSTANT_NAME);
475:       assertEquals(56, Node.CHANGE_TIME);
476:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
477:       assertEquals(48, Node.DIRECTIVES);
478:       assertEquals(37, Node.OPT_ARG_NAME);
479:       assertEquals(50, Node.FREE_CALL);
480:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
481:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
482:       assertEquals(12, Node.COLUMN_BITS);
483:       assertEquals(4095, Node.COLUMN_MASK);
484:       assertEquals(32, Node.INCRDECR_PROP);
485:       assertEquals(1, Node.DECR_FLAG);
486:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
487:       assertFalse(node0.isIf());
488:       assertFalse(node0.isDelProp());
489:       assertFalse(node0.isGetterDef());
490:       assertFalse(node0.isNE());
491:       assertFalse(node0.isFor());
492:       assertFalse(node0.isIn());
493:       assertFalse(node0.isEmpty());
494:       assertFalse(node0.isTry());
495:       assertFalse(node0.isCase());
496:       assertFalse(node0.isDefaultCase());
497:       assertFalse(node0.isSwitch());
498:       assertFalse(node0.isString());
499:       assertFalse(node0.isFunction());
500:       assertEquals((-1), node0.getCharno());
501:       assertFalse(node0.isDebugger());
502:       assertEquals(0, node0.getChildCount());
503:       assertFalse(node0.isArrayLit());
504:       assertFalse(node0.isParamList());
505:       assertFalse(node0.isFalse());
506:       assertFalse(node0.isThrow());
507:       assertFalse(node0.isStringKey());
508:       assertFalse(node0.isThis());
509:       assertFalse(node0.isHook());
510:       assertFalse(node0.isInc());
511:       assertFalse(node0.isSetterDef());
512:       assertFalse(node0.isRegExp());
513:       assertFalse(node0.isWith());
514:       assertFalse(node0.isBlock());
515:       assertFalse(node0.isInstanceOf());
516:       assertFalse(node0.isCatch());
517:       assertFalse(node0.hasMoreThanOneChild());
518:       assertEquals((-1), node0.getLineno());
519:       assertFalse(node0.hasChildren());
520:       assertFalse(node0.isDec());
521:       assertFalse(node0.isNumber());
522:       assertFalse(node0.isTypeOf());
523:       assertFalse(node0.isReturn());
524:       assertFalse(node0.isAssign());
525:       assertFalse(node0.isOr());
526:       assertEquals((-1), node0.getSourcePosition());
527:       assertFalse(node0.isLabel());
528:       assertFalse(node0.hasOneChild());
529:       assertFalse(node0.isAssignAdd());
530:       assertFalse(node0.isDo());
531:       assertFalse(node0.isScript());
532:       assertFalse(node0.isObjectLit());
533:       assertFalse(node0.isNot());
534:       assertFalse(node0.isCast());
535:       assertFalse(node0.isAnd());
536:       assertFalse(node0.isContinue());
537:       assertFalse(node0.isLabelName());
538:       assertFalse(node0.isBreak());
539:       assertFalse(node0.isNull());
540:       assertEquals((-2535), node0.getType());
541:       assertFalse(node0.isComma());
542:       assertFalse(node0.isVar());
543:       assertFalse(node0.isGetProp());
544:       assertFalse(node0.isAdd());
545:       assertFalse(node0.isNew());
546:       assertFalse(node0.isWhile());
547:       assertFalse(node0.isTrue());
548:       assertFalse(node0.isGetElem());
549:       assertFalse(node0.isVoid());
550:       assertFalse(node0.isName());
551:       assertFalse(node0.isCall());
552:       assertFalse(node0.isExprResult());
553:       assertFalse(boolean0);
554:       
555:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1237));
556:       assertEquals((-1237), node_SideEffectFlags0.valueOf());
557:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
558:       assertNotNull(node_SideEffectFlags0);
559:       
560:       boolean boolean1 = node0.isSwitch();
561:       assertEquals(15, Node.NO_SIDE_EFFECTS);
562:       assertEquals(30, Node.VAR_ARGS_NAME);
563:       assertEquals(52, Node.LENGTH);
564:       assertEquals(40, Node.ORIGINALNAME_PROP);
565:       assertEquals(57, Node.REFLECTED_OBJECT);
566:       assertEquals(51, Node.STATIC_SOURCE_FILE);
567:       assertEquals(49, Node.DIRECT_EVAL);
568:       assertEquals(46, Node.IS_NAMESPACE);
569:       assertEquals(54, Node.SLASH_V);
570:       assertEquals(2, Node.POST_FLAG);
571:       assertEquals(8, Node.FLAG_NO_THROWS);
572:       assertEquals(39, Node.EMPTY_BLOCK);
573:       assertEquals(47, Node.IS_DISPATCHER);
574:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
575:       assertEquals(29, Node.JSDOC_INFO_PROP);
576:       assertEquals(55, Node.INFERRED_FUNCTION);
577:       assertEquals(57, Node.LAST_PROP);
578:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
579:       assertEquals(36, Node.QUOTED_PROP);
580:       assertEquals(53, Node.INPUT_ID);
581:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
582:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
583:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
584:       assertEquals(43, Node.IS_CONSTANT_NAME);
585:       assertEquals(56, Node.CHANGE_TIME);
586:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
587:       assertEquals(48, Node.DIRECTIVES);
588:       assertEquals(37, Node.OPT_ARG_NAME);
589:       assertEquals(50, Node.FREE_CALL);
590:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
591:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
592:       assertEquals(12, Node.COLUMN_BITS);
593:       assertEquals(4095, Node.COLUMN_MASK);
594:       assertEquals(32, Node.INCRDECR_PROP);
595:       assertEquals(1, Node.DECR_FLAG);
596:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
597:       assertTrue(boolean1 == boolean0);
598:       assertFalse(node0.isIf());
599:       assertFalse(node0.isDelProp());
600:       assertFalse(node0.isGetterDef());
601:       assertFalse(node0.isNE());
602:       assertFalse(node0.isFor());
603:       assertFalse(node0.isIn());
604:       assertFalse(node0.isEmpty());
605:       assertFalse(node0.isTry());
606:       assertFalse(node0.isCase());
607:       assertFalse(node0.isDefaultCase());
608:       assertFalse(node0.isSwitch());
609:       assertFalse(node0.isString());
610:       assertFalse(node0.isFunction());
611:       assertEquals((-1), node0.getCharno());
612:       assertFalse(node0.isDebugger());
613:       assertEquals(0, node0.getChildCount());
614:       assertFalse(node0.isArrayLit());
615:       assertFalse(node0.isParamList());
616:       assertFalse(node0.isFalse());
617:       assertFalse(node0.isThrow());
618:       assertFalse(node0.isStringKey());
619:       assertFalse(node0.isThis());
620:       assertFalse(node0.isHook());
621:       assertFalse(node0.isInc());
622:       assertFalse(node0.isSetterDef());
623:       assertFalse(node0.isRegExp());
624:       assertFalse(node0.isWith());
625:       assertFalse(node0.isBlock());
626:       assertFalse(node0.isInstanceOf());
627:       assertFalse(node0.isCatch());
628:       assertFalse(node0.hasMoreThanOneChild());
629:       assertEquals((-1), node0.getLineno());
630:       assertFalse(node0.hasChildren());
631:       assertFalse(node0.isDec());
632:       assertFalse(node0.isNumber());
633:       assertFalse(node0.isTypeOf());
634:       assertFalse(node0.isReturn());
635:       assertFalse(node0.isAssign());
636:       assertFalse(node0.isOr());
637:       assertEquals((-1), node0.getSourcePosition());
638:       assertFalse(node0.isLabel());
639:       assertFalse(node0.hasOneChild());
640:       assertFalse(node0.isAssignAdd());
641:       assertFalse(node0.isDo());
642:       assertFalse(node0.isScript());
643:       assertFalse(node0.isObjectLit());
644:       assertFalse(node0.isNot());
645:       assertFalse(node0.isCast());
646:       assertFalse(node0.isAnd());
647:       assertFalse(node0.isContinue());
648:       assertFalse(node0.isLabelName());
649:       assertFalse(node0.isBreak());
650:       assertFalse(node0.isNull());
651:       assertEquals((-2535), node0.getType());
652:       assertFalse(node0.isComma());
653:       assertFalse(node0.isVar());
654:       assertFalse(node0.isGetProp());
655:       assertFalse(node0.isAdd());
656:       assertFalse(node0.isNew());
657:       assertFalse(node0.isWhile());
658:       assertFalse(node0.isTrue());
659:       assertFalse(node0.isGetElem());
660:       assertFalse(node0.isVoid());
661:       assertFalse(node0.isName());
662:       assertFalse(node0.isCall());
663:       assertFalse(node0.isExprResult());
664:       assertFalse(boolean1);
665:       
666:       node0.setSourceEncodedPositionForTree(537);
667:       assertEquals(15, Node.NO_SIDE_EFFECTS);
668:       assertEquals(30, Node.VAR_ARGS_NAME);
669:       assertEquals(52, Node.LENGTH);
670:       assertEquals(40, Node.ORIGINALNAME_PROP);
671:       assertEquals(57, Node.REFLECTED_OBJECT);
672:       assertEquals(51, Node.STATIC_SOURCE_FILE);
673:       assertEquals(49, Node.DIRECT_EVAL);
674:       assertEquals(46, Node.IS_NAMESPACE);
675:       assertEquals(54, Node.SLASH_V);
676:       assertEquals(2, Node.POST_FLAG);
677:       assertEquals(8, Node.FLAG_NO_THROWS);
678:       assertEquals(39, Node.EMPTY_BLOCK);
679:       assertEquals(47, Node.IS_DISPATCHER);
680:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
681:       assertEquals(29, Node.JSDOC_INFO_PROP);
682:       assertEquals(55, Node.INFERRED_FUNCTION);
683:       assertEquals(57, Node.LAST_PROP);
684:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
685:       assertEquals(36, Node.QUOTED_PROP);
686:       assertEquals(53, Node.INPUT_ID);
687:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
688:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
689:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
690:       assertEquals(43, Node.IS_CONSTANT_NAME);
691:       assertEquals(56, Node.CHANGE_TIME);
692:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
693:       assertEquals(48, Node.DIRECTIVES);
694:       assertEquals(37, Node.OPT_ARG_NAME);
695:       assertEquals(50, Node.FREE_CALL);
696:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
697:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
698:       assertEquals(12, Node.COLUMN_BITS);
699:       assertEquals(4095, Node.COLUMN_MASK);
700:       assertEquals(32, Node.INCRDECR_PROP);
701:       assertEquals(1, Node.DECR_FLAG);
702:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
703:       assertFalse(node0.isIf());
704:       assertFalse(node0.isDelProp());
705:       assertFalse(node0.isGetterDef());
706:       assertFalse(node0.isNE());
707:       assertFalse(node0.isFor());
708:       assertFalse(node0.isIn());
709:       assertFalse(node0.isEmpty());
710:       assertFalse(node0.isTry());
711:       assertFalse(node0.isCase());
712:       assertFalse(node0.isDefaultCase());
713:       assertFalse(node0.isSwitch());
714:       assertFalse(node0.isString());
715:       assertFalse(node0.isFunction());
716:       assertFalse(node0.isDebugger());
717:       assertEquals(0, node0.getChildCount());
718:       assertEquals(0, node0.getLineno());
719:       assertFalse(node0.isArrayLit());
720:       assertFalse(node0.isParamList());
721:       assertFalse(node0.isFalse());
722:       assertFalse(node0.isThrow());
723:       assertFalse(node0.isStringKey());
724:       assertFalse(node0.isThis());
725:       assertFalse(node0.isHook());
726:       assertFalse(node0.isInc());
727:       assertFalse(node0.isSetterDef());
728:       assertFalse(node0.isRegExp());
729:       assertFalse(node0.isWith());
730:       assertFalse(node0.isBlock());
731:       assertFalse(node0.isInstanceOf());
732:       assertFalse(node0.isCatch());
733:       assertFalse(node0.hasMoreThanOneChild());
734:       assertFalse(node0.hasChildren());
735:       assertFalse(node0.isDec());
736:       assertFalse(node0.isNumber());
737:       assertFalse(node0.isTypeOf());
738:       assertFalse(node0.isReturn());
739:       assertFalse(node0.isAssign());
740:       assertFalse(node0.isOr());
741:       assertFalse(node0.isLabel());
742:       assertFalse(node0.hasOneChild());
743:       assertEquals(537, node0.getCharno());
744:       assertFalse(node0.isAssignAdd());
745:       assertFalse(node0.isDo());
746:       assertFalse(node0.isScript());
747:       assertFalse(node0.isObjectLit());
748:       assertFalse(node0.isNot());
749:       assertFalse(node0.isCast());
750:       assertFalse(node0.isAnd());
751:       assertFalse(node0.isContinue());
752:       assertFalse(node0.isLabelName());
753:       assertFalse(node0.isBreak());
754:       assertFalse(node0.isNull());
755:       assertEquals((-2535), node0.getType());
756:       assertFalse(node0.isComma());
757:       assertFalse(node0.isVar());
758:       assertFalse(node0.isGetProp());
759:       assertFalse(node0.isAdd());
760:       assertEquals(537, node0.getSourcePosition());
761:       assertFalse(node0.isNew());
762:       assertFalse(node0.isWhile());
763:       assertFalse(node0.isTrue());
764:       assertFalse(node0.isGetElem());
765:       assertFalse(node0.isVoid());
766:       assertFalse(node0.isName());
767:       assertFalse(node0.isCall());
768:       assertFalse(node0.isExprResult());
769:       
770:       boolean boolean2 = node0.isAssignAdd();
771:       assertEquals(15, Node.NO_SIDE_EFFECTS);
772:       assertEquals(30, Node.VAR_ARGS_NAME);
773:       assertEquals(52, Node.LENGTH);
774:       assertEquals(40, Node.ORIGINALNAME_PROP);
775:       assertEquals(57, Node.REFLECTED_OBJECT);
776:       assertEquals(51, Node.STATIC_SOURCE_FILE);
777:       assertEquals(49, Node.DIRECT_EVAL);
778:       assertEquals(46, Node.IS_NAMESPACE);
779:       assertEquals(54, Node.SLASH_V);
780:       assertEquals(2, Node.POST_FLAG);
781:       assertEquals(8, Node.FLAG_NO_THROWS);
782:       assertEquals(39, Node.EMPTY_BLOCK);
783:       assertEquals(47, Node.IS_DISPATCHER);
784:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
785:       assertEquals(29, Node.JSDOC_INFO_PROP);
786:       assertEquals(55, Node.INFERRED_FUNCTION);
787:       assertEquals(57, Node.LAST_PROP);
788:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
789:       assertEquals(36, Node.QUOTED_PROP);
790:       assertEquals(53, Node.INPUT_ID);
791:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
792:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
793:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
794:       assertEquals(43, Node.IS_CONSTANT_NAME);
795:       assertEquals(56, Node.CHANGE_TIME);
796:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
797:       assertEquals(48, Node.DIRECTIVES);
798:       assertEquals(37, Node.OPT_ARG_NAME);
799:       assertEquals(50, Node.FREE_CALL);
800:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
801:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
802:       assertEquals(12, Node.COLUMN_BITS);
803:       assertEquals(4095, Node.COLUMN_MASK);
804:       assertEquals(32, Node.INCRDECR_PROP);
805:       assertEquals(1, Node.DECR_FLAG);
806:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
807:       assertTrue(boolean2 == boolean0);
808:       assertTrue(boolean2 == boolean1);
809:       assertFalse(node0.isIf());
810:       assertFalse(node0.isDelProp());
811:       assertFalse(node0.isGetterDef());
812:       assertFalse(node0.isNE());
813:       assertFalse(node0.isFor());
814:       assertFalse(node0.isIn());
815:       assertFalse(node0.isEmpty());
816:       assertFalse(node0.isTry());
817:       assertFalse(node0.isCase());
818:       assertFalse(node0.isDefaultCase());
819:       assertFalse(node0.isSwitch());
820:       assertFalse(node0.isString());
821:       assertFalse(node0.isFunction());
822:       assertFalse(node0.isDebugger());
823:       assertEquals(0, node0.getChildCount());
824:       assertEquals(0, node0.getLineno());
825:       assertFalse(node0.isArrayLit());
826:       assertFalse(node0.isParamList());
827:       assertFalse(node0.isFalse());
828:       assertFalse(node0.isThrow());
829:       assertFalse(node0.isStringKey());
830:       assertFalse(node0.isThis());
831:       assertFalse(node0.isHook());
832:       assertFalse(node0.isInc());
833:       assertFalse(node0.isSetterDef());
834:       assertFalse(node0.isRegExp());
835:       assertFalse(node0.isWith());
836:       assertFalse(node0.isBlock());
837:       assertFalse(node0.isInstanceOf());
838:       assertFalse(node0.isCatch());
839:       assertFalse(node0.hasMoreThanOneChild());
840:       assertFalse(node0.hasChildren());
841:       assertFalse(node0.isDec());
842:       assertFalse(node0.isNumber());
843:       assertFalse(node0.isTypeOf());
844:       assertFalse(node0.isReturn());
845:       assertFalse(node0.isAssign());
846:       assertFalse(node0.isOr());
847:       assertFalse(node0.isLabel());
848:       assertFalse(node0.hasOneChild());
849:       assertEquals(537, node0.getCharno());
850:       assertFalse(node0.isAssignAdd());
851:       assertFalse(node0.isDo());
852:       assertFalse(node0.isScript());
853:       assertFalse(node0.isObjectLit());
854:       assertFalse(node0.isNot());
855:       assertFalse(node0.isCast());
856:       assertFalse(node0.isAnd());
857:       assertFalse(node0.isContinue());
858:       assertFalse(node0.isLabelName());
859:       assertFalse(node0.isBreak());
860:       assertFalse(node0.isNull());
861:       assertEquals((-2535), node0.getType());
862:       assertFalse(node0.isComma());
863:       assertFalse(node0.isVar());
864:       assertFalse(node0.isGetProp());
865:       assertFalse(node0.isAdd());
866:       assertEquals(537, node0.getSourcePosition());
867:       assertFalse(node0.isNew());
868:       assertFalse(node0.isWhile());
869:       assertFalse(node0.isTrue());
870:       assertFalse(node0.isGetElem());
871:       assertFalse(node0.isVoid());
872:       assertFalse(node0.isName());
873:       assertFalse(node0.isCall());
874:       assertFalse(node0.isExprResult());
875:       assertFalse(boolean2);
876:       
877:       JSDocInfo jSDocInfo0 = new JSDocInfo(true);
878:       assertNull(jSDocInfo0.getVisibility());
879:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
880:       assertFalse(jSDocInfo0.isConstant());
881:       assertNull(jSDocInfo0.getMeaning());
882:       assertFalse(jSDocInfo0.hasThisType());
883:       assertNull(jSDocInfo0.getFileOverview());
884:       assertFalse(jSDocInfo0.isConstructor());
885:       assertFalse(jSDocInfo0.hasModifies());
886:       assertNull(jSDocInfo0.getLendsName());
887:       assertFalse(jSDocInfo0.isInterface());
888:       assertFalse(jSDocInfo0.isNoShadow());
889:       assertFalse(jSDocInfo0.isExpose());
890:       assertFalse(jSDocInfo0.isJaggerInject());
891:       assertNull(jSDocInfo0.getBlockDescription());
892:       assertFalse(jSDocInfo0.isNoAlias());
893:       assertFalse(jSDocInfo0.isIdGenerator());
894:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
895:       assertFalse(jSDocInfo0.isNoCompile());
896:       assertEquals(0, jSDocInfo0.getParameterCount());
897:       assertFalse(jSDocInfo0.containsDeclaration());
898:       assertFalse(jSDocInfo0.isNgInject());
899:       assertFalse(jSDocInfo0.makesDicts());
900:       assertFalse(jSDocInfo0.hasEnumParameterType());
901:       assertEquals("JSDocInfo", jSDocInfo0.toString());
902:       assertFalse(jSDocInfo0.shouldPreserveTry());
903:       assertFalse(jSDocInfo0.makesStructs());
904:       assertFalse(jSDocInfo0.isNoSideEffects());
905:       assertNull(jSDocInfo0.getDescription());
906:       assertFalse(jSDocInfo0.hasReturnType());
907:       assertFalse(jSDocInfo0.isJaggerProvide());
908:       assertNull(jSDocInfo0.getOriginalCommentString());
909:       assertFalse(jSDocInfo0.isStableIdGenerator());
910:       assertFalse(jSDocInfo0.hasType());
911:       assertFalse(jSDocInfo0.isDisposes());
912:       assertFalse(jSDocInfo0.isJavaDispatch());
913:       assertFalse(jSDocInfo0.isDefine());
914:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
915:       assertFalse(jSDocInfo0.isImplicitCast());
916:       assertFalse(jSDocInfo0.isMappedIdGenerator());
917:       assertFalse(jSDocInfo0.isDeprecated());
918:       assertFalse(jSDocInfo0.isHidden());
919:       assertNull(jSDocInfo0.getDeprecationReason());
920:       assertFalse(jSDocInfo0.hasFileOverview());
921:       assertFalse(jSDocInfo0.isExterns());
922:       assertFalse(jSDocInfo0.isJaggerModule());
923:       assertFalse(jSDocInfo0.isExport());
924:       assertFalse(jSDocInfo0.hasTypedefType());
925:       assertFalse(jSDocInfo0.isOverride());
926:       assertFalse(jSDocInfo0.isWizaction());
927:       assertNull(jSDocInfo0.getReturnDescription());
928:       assertNull(jSDocInfo0.getVersion());
929:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
930:       assertNull(jSDocInfo0.getLicense());
931:       assertFalse(jSDocInfo0.hasBaseType());
932:       assertFalse(jSDocInfo0.isNoTypeCheck());
933:       assertNotNull(jSDocInfo0);
934:       
935:       JSTypeExpression jSTypeExpression0 = jSDocInfo0.getType();
936:       assertNull(jSDocInfo0.getVisibility());
937:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
938:       assertFalse(jSDocInfo0.isConstant());
939:       assertNull(jSDocInfo0.getMeaning());
940:       assertFalse(jSDocInfo0.hasThisType());
941:       assertNull(jSDocInfo0.getFileOverview());
942:       assertFalse(jSDocInfo0.isConstructor());
943:       assertFalse(jSDocInfo0.hasModifies());
944:       assertNull(jSDocInfo0.getLendsName());
945:       assertFalse(jSDocInfo0.isInterface());
946:       assertFalse(jSDocInfo0.isNoShadow());
947:       assertFalse(jSDocInfo0.isExpose());
948:       assertFalse(jSDocInfo0.isJaggerInject());
949:       assertNull(jSDocInfo0.getBlockDescription());
950:       assertFalse(jSDocInfo0.isNoAlias());
951:       assertFalse(jSDocInfo0.isIdGenerator());
952:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
953:       assertFalse(jSDocInfo0.isNoCompile());
954:       assertEquals(0, jSDocInfo0.getParameterCount());
955:       assertFalse(jSDocInfo0.containsDeclaration());
956:       assertFalse(jSDocInfo0.isNgInject());
957:       assertFalse(jSDocInfo0.makesDicts());
958:       assertFalse(jSDocInfo0.hasEnumParameterType());
959:       assertEquals("JSDocInfo", jSDocInfo0.toString());
960:       assertFalse(jSDocInfo0.shouldPreserveTry());
961:       assertFalse(jSDocInfo0.makesStructs());
962:       assertFalse(jSDocInfo0.isNoSideEffects());
963:       assertNull(jSDocInfo0.getDescription());
964:       assertFalse(jSDocInfo0.hasReturnType());
965:       assertFalse(jSDocInfo0.isJaggerProvide());
966:       assertNull(jSDocInfo0.getOriginalCommentString());
967:       assertFalse(jSDocInfo0.isStableIdGenerator());
968:       assertFalse(jSDocInfo0.hasType());
969:       assertFalse(jSDocInfo0.isDisposes());
970:       assertFalse(jSDocInfo0.isJavaDispatch());
971:       assertFalse(jSDocInfo0.isDefine());
972:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
973:       assertFalse(jSDocInfo0.isImplicitCast());
974:       assertFalse(jSDocInfo0.isMappedIdGenerator());
975:       assertFalse(jSDocInfo0.isDeprecated());
976:       assertFalse(jSDocInfo0.isHidden());
977:       assertNull(jSDocInfo0.getDeprecationReason());
978:       assertFalse(jSDocInfo0.hasFileOverview());
979:       assertFalse(jSDocInfo0.isExterns());
980:       assertFalse(jSDocInfo0.isJaggerModule());
981:       assertFalse(jSDocInfo0.isExport());
982:       assertFalse(jSDocInfo0.hasTypedefType());
983:       assertFalse(jSDocInfo0.isOverride());
984:       assertFalse(jSDocInfo0.isWizaction());
985:       assertNull(jSDocInfo0.getReturnDescription());
986:       assertNull(jSDocInfo0.getVersion());
987:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
988:       assertNull(jSDocInfo0.getLicense());
989:       assertFalse(jSDocInfo0.hasBaseType());
990:       assertFalse(jSDocInfo0.isNoTypeCheck());
991:       assertNull(jSTypeExpression0);
992:       
993:       boolean boolean3 = jSDocInfo0.documentThrows((JSTypeExpression) null, "");
994:       assertFalse(boolean3 == boolean0);
995:       assertFalse(boolean3 == boolean1);
996:       assertFalse(boolean3 == boolean2);
997:       assertNull(jSDocInfo0.getVisibility());
998:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
999:       assertFalse(jSDocInfo0.isConstant());
1000:       assertNull(jSDocInfo0.getMeaning());
1001:       assertFalse(jSDocInfo0.hasThisType());
1002:       assertNull(jSDocInfo0.getFileOverview());
1003:       assertFalse(jSDocInfo0.isConstructor());
1004:       assertFalse(jSDocInfo0.hasModifies());
1005:       assertNull(jSDocInfo0.getLendsName());
1006:       assertFalse(jSDocInfo0.isInterface());
1007:       assertFalse(jSDocInfo0.isNoShadow());
1008:       assertFalse(jSDocInfo0.isExpose());
1009:       assertFalse(jSDocInfo0.isJaggerInject());
1010:       assertNull(jSDocInfo0.getBlockDescription());
1011:       assertFalse(jSDocInfo0.isNoAlias());
1012:       assertFalse(jSDocInfo0.isIdGenerator());
1013:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1014:       assertFalse(jSDocInfo0.isNoCompile());
1015:       assertEquals(0, jSDocInfo0.getParameterCount());
1016:       assertFalse(jSDocInfo0.containsDeclaration());
1017:       assertFalse(jSDocInfo0.isNgInject());
1018:       assertFalse(jSDocInfo0.makesDicts());
1019:       assertFalse(jSDocInfo0.hasEnumParameterType());
1020:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1021:       assertFalse(jSDocInfo0.shouldPreserveTry());
1022:       assertFalse(jSDocInfo0.makesStructs());
1023:       assertFalse(jSDocInfo0.isNoSideEffects());
1024:       assertNull(jSDocInfo0.getDescription());
1025:       assertFalse(jSDocInfo0.hasReturnType());
1026:       assertFalse(jSDocInfo0.isJaggerProvide());
1027:       assertNull(jSDocInfo0.getOriginalCommentString());
1028:       assertFalse(jSDocInfo0.isStableIdGenerator());
1029:       assertFalse(jSDocInfo0.hasType());
1030:       assertFalse(jSDocInfo0.isDisposes());
1031:       assertFalse(jSDocInfo0.isJavaDispatch());
1032:       assertFalse(jSDocInfo0.isDefine());
1033:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1034:       assertFalse(jSDocInfo0.isImplicitCast());
1035:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1036:       assertFalse(jSDocInfo0.isDeprecated());
1037:       assertFalse(jSDocInfo0.isHidden());
1038:       assertNull(jSDocInfo0.getDeprecationReason());
1039:       assertFalse(jSDocInfo0.hasFileOverview());
1040:       assertFalse(jSDocInfo0.isExterns());
1041:       assertFalse(jSDocInfo0.isJaggerModule());
1042:       assertFalse(jSDocInfo0.isExport());
1043:       assertFalse(jSDocInfo0.hasTypedefType());
1044:       assertFalse(jSDocInfo0.isOverride());
1045:       assertFalse(jSDocInfo0.isWizaction());
1046:       assertNull(jSDocInfo0.getReturnDescription());
1047:       assertNull(jSDocInfo0.getVersion());
1048:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1049:       assertNull(jSDocInfo0.getLicense());
1050:       assertFalse(jSDocInfo0.hasBaseType());
1051:       assertFalse(jSDocInfo0.isNoTypeCheck());
1052:       assertTrue(boolean3);
1053:       
1054:       Node node1 = Node.newString("");
1055:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1056:       assertEquals(53, Node.INPUT_ID);
1057:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1058:       assertEquals(55, Node.INFERRED_FUNCTION);
1059:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1060:       assertEquals(43, Node.IS_CONSTANT_NAME);
1061:       assertEquals(56, Node.CHANGE_TIME);
1062:       assertEquals(36, Node.QUOTED_PROP);
1063:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1064:       assertEquals(2, Node.POST_FLAG);
1065:       assertEquals(8, Node.FLAG_NO_THROWS);
1066:       assertEquals(29, Node.JSDOC_INFO_PROP);
1067:       assertEquals(39, Node.EMPTY_BLOCK);
1068:       assertEquals(30, Node.VAR_ARGS_NAME);
1069:       assertEquals(57, Node.LAST_PROP);
1070:       assertEquals(47, Node.IS_DISPATCHER);
1071:       assertEquals(54, Node.SLASH_V);
1072:       assertEquals(52, Node.LENGTH);
1073:       assertEquals(40, Node.ORIGINALNAME_PROP);
1074:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1075:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1076:       assertEquals(49, Node.DIRECT_EVAL);
1077:       assertEquals(50, Node.FREE_CALL);
1078:       assertEquals(46, Node.IS_NAMESPACE);
1079:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1080:       assertEquals(57, Node.REFLECTED_OBJECT);
1081:       assertEquals(48, Node.DIRECTIVES);
1082:       assertEquals(37, Node.OPT_ARG_NAME);
1083:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1084:       assertEquals(32, Node.INCRDECR_PROP);
1085:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1086:       assertEquals(1, Node.DECR_FLAG);
1087:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1088:       assertEquals(4095, Node.COLUMN_MASK);
1089:       assertEquals(12, Node.COLUMN_BITS);
1090:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1091:       assertFalse(node1.equals((Object)node0));
1092:       assertFalse(node1.isSetterDef());
1093:       assertFalse(node1.isParamList());
1094:       assertFalse(node1.isNull());
1095:       assertEquals(0, node1.getChildCount());
1096:       assertFalse(node1.isVar());
1097:       assertEquals(40, node1.getType());
1098:       assertFalse(node1.isNew());
1099:       assertFalse(node1.isDefaultCase());
1100:       assertTrue(node1.isString());
1101:       assertFalse(node1.isDebugger());
1102:       assertFalse(node1.isFunction());
1103:       assertFalse(node1.isArrayLit());
1104:       assertFalse(node1.isContinue());
1105:       assertFalse(node1.isStringKey());
1106:       assertFalse(node1.isNE());
1107:       assertFalse(node1.isIn());
1108:       assertFalse(node1.isNumber());
1109:       assertFalse(node1.isGetterDef());
1110:       assertFalse(node1.isFor());
1111:       assertFalse(node1.isTry());
1112:       assertFalse(node1.isCase());
1113:       assertFalse(node1.hasOneChild());
1114:       assertFalse(node1.isInc());
1115:       assertFalse(node1.isBlock());
1116:       assertFalse(node1.isWith());
1117:       assertFalse(node1.isRegExp());
1118:       assertFalse(node1.isCatch());
1119:       assertFalse(node1.hasMoreThanOneChild());
1120:       assertFalse(node1.isInstanceOf());
1121:       assertEquals((-1), node1.getLineno());
1122:       assertFalse(node1.isIf());
1123:       assertFalse(node1.isComma());
1124:       assertFalse(node1.isBreak());
1125:       assertFalse(node1.isGetProp());
1126:       assertFalse(node1.isThis());
1127:       assertFalse(node1.isFalse());
1128:       assertFalse(node1.isThrow());
1129:       assertFalse(node1.isHook());
1130:       assertFalse(node1.isSwitch());
1131:       assertEquals((-1), node1.getCharno());
1132:       assertFalse(node1.isScript());
1133:       assertFalse(node1.isNot());
1134:       assertFalse(node1.isObjectLit());
1135:       assertFalse(node1.isCast());
1136:       assertFalse(node1.isAnd());
1137:       assertFalse(node1.isLabelName());
1138:       assertEquals((-1), node1.getSourcePosition());
1139:       assertFalse(node1.hasChildren());
1140:       assertFalse(node1.isEmpty());
1141:       assertFalse(node1.isAssign());
1142:       assertFalse(node1.isOr());
1143:       assertFalse(node1.isLabel());
1144:       assertFalse(node1.isDec());
1145:       assertFalse(node1.isTypeOf());
1146:       assertFalse(node1.isReturn());
1147:       assertFalse(node1.isDo());
1148:       assertFalse(node1.isAssignAdd());
1149:       assertFalse(node1.isWhile());
1150:       assertFalse(node1.isTrue());
1151:       assertFalse(node1.isAdd());
1152:       assertFalse(node1.isExprResult());
1153:       assertFalse(node1.isCall());
1154:       assertFalse(node1.isGetElem());
1155:       assertFalse(node1.isVoid());
1156:       assertFalse(node1.isDelProp());
1157:       assertFalse(node1.isName());
1158:       assertNotNull(node1);
1159:       assertNotSame(node1, node0);
1160:       
1161:       Node node2 = jSDocInfo0.getAssociatedNode();
1162:       assertNull(jSDocInfo0.getVisibility());
1163:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
1164:       assertFalse(jSDocInfo0.isConstant());
1165:       assertNull(jSDocInfo0.getMeaning());
1166:       assertFalse(jSDocInfo0.hasThisType());
1167:       assertNull(jSDocInfo0.getFileOverview());
1168:       assertFalse(jSDocInfo0.isConstructor());
1169:       assertFalse(jSDocInfo0.hasModifies());
1170:       assertNull(jSDocInfo0.getLendsName());
1171:       assertFalse(jSDocInfo0.isInterface());
1172:       assertFalse(jSDocInfo0.isNoShadow());
1173:       assertFalse(jSDocInfo0.isExpose());
1174:       assertFalse(jSDocInfo0.isJaggerInject());
1175:       assertNull(jSDocInfo0.getBlockDescription());
1176:       assertFalse(jSDocInfo0.isNoAlias());
1177:       assertFalse(jSDocInfo0.isIdGenerator());
1178:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
1179:       assertFalse(jSDocInfo0.isNoCompile());
1180:       assertEquals(0, jSDocInfo0.getParameterCount());
1181:       assertFalse(jSDocInfo0.containsDeclaration());
1182:       assertFalse(jSDocInfo0.isNgInject());
1183:       assertFalse(jSDocInfo0.makesDicts());
1184:       assertFalse(jSDocInfo0.hasEnumParameterType());
1185:       assertEquals("JSDocInfo", jSDocInfo0.toString());
1186:       assertFalse(jSDocInfo0.shouldPreserveTry());
1187:       assertFalse(jSDocInfo0.makesStructs());
1188:       assertFalse(jSDocInfo0.isNoSideEffects());
1189:       assertNull(jSDocInfo0.getDescription());
1190:       assertFalse(jSDocInfo0.hasReturnType());
1191:       assertFalse(jSDocInfo0.isJaggerProvide());
1192:       assertNull(jSDocInfo0.getOriginalCommentString());
1193:       assertFalse(jSDocInfo0.isStableIdGenerator());
1194:       assertFalse(jSDocInfo0.hasType());
1195:       assertFalse(jSDocInfo0.isDisposes());
1196:       assertFalse(jSDocInfo0.isJavaDispatch());
1197:       assertFalse(jSDocInfo0.isDefine());
1198:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
1199:       assertFalse(jSDocInfo0.isImplicitCast());
1200:       assertFalse(jSDocInfo0.isMappedIdGenerator());
1201:       assertFalse(jSDocInfo0.isDeprecated());
1202:       assertFalse(jSDocInfo0.isHidden());
1203:       assertNull(jSDocInfo0.getDeprecationReason());
1204:       assertFalse(jSDocInfo0.hasFileOverview());
1205:       assertFalse(jSDocInfo0.isExterns());
1206:       assertFalse(jSDocInfo0.isJaggerModule());
1207:       assertFalse(jSDocInfo0.isExport());
1208:       assertFalse(jSDocInfo0.hasTypedefType());
1209:       assertFalse(jSDocInfo0.isOverride());
1210:       assertFalse(jSDocInfo0.isWizaction());
1211:       assertNull(jSDocInfo0.getReturnDescription());
1212:       assertNull(jSDocInfo0.getVersion());
1213:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
1214:       assertNull(jSDocInfo0.getLicense());
1215:       assertFalse(jSDocInfo0.hasBaseType());
1216:       assertFalse(jSDocInfo0.isNoTypeCheck());
1217:       assertNull(node2);
1218:       
1219:       boolean boolean4 = node0.isSwitch();
1220:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1221:       assertEquals(30, Node.VAR_ARGS_NAME);
1222:       assertEquals(52, Node.LENGTH);
1223:       assertEquals(40, Node.ORIGINALNAME_PROP);
1224:       assertEquals(57, Node.REFLECTED_OBJECT);
1225:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1226:       assertEquals(49, Node.DIRECT_EVAL);
1227:       assertEquals(46, Node.IS_NAMESPACE);
1228:       assertEquals(54, Node.SLASH_V);
1229:       assertEquals(2, Node.POST_FLAG);
1230:       assertEquals(8, Node.FLAG_NO_THROWS);
1231:       assertEquals(39, Node.EMPTY_BLOCK);
1232:       assertEquals(47, Node.IS_DISPATCHER);
1233:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1234:       assertEquals(29, Node.JSDOC_INFO_PROP);
1235:       assertEquals(55, Node.INFERRED_FUNCTION);
1236:       assertEquals(57, Node.LAST_PROP);
1237:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1238:       assertEquals(36, Node.QUOTED_PROP);
1239:       assertEquals(53, Node.INPUT_ID);
1240:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1241:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1242:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1243:       assertEquals(43, Node.IS_CONSTANT_NAME);
1244:       assertEquals(56, Node.CHANGE_TIME);
1245:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1246:       assertEquals(48, Node.DIRECTIVES);
1247:       assertEquals(37, Node.OPT_ARG_NAME);
1248:       assertEquals(50, Node.FREE_CALL);
1249:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1250:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1251:       assertEquals(12, Node.COLUMN_BITS);
1252:       assertEquals(4095, Node.COLUMN_MASK);
1253:       assertEquals(32, Node.INCRDECR_PROP);
1254:       assertEquals(1, Node.DECR_FLAG);
1255:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1256:       assertFalse(node0.equals((Object)node1));
1257:       assertFalse(boolean4 == boolean3);
1258:       assertTrue(boolean4 == boolean2);
1259:       assertTrue(boolean4 == boolean1);
1260:       assertTrue(boolean4 == boolean0);
1261:       assertFalse(node0.isIf());
1262:       assertFalse(node0.isDelProp());
1263:       assertFalse(node0.isGetterDef());
1264:       assertFalse(node0.isNE());
1265:       assertFalse(node0.isFor());
1266:       assertFalse(node0.isIn());
1267:       assertFalse(node0.isEmpty());
1268:       assertFalse(node0.isTry());
1269:       assertFalse(node0.isCase());
1270:       assertFalse(node0.isDefaultCase());
1271:       assertFalse(node0.isSwitch());
1272:       assertFalse(node0.isString());
1273:       assertFalse(node0.isFunction());
1274:       assertFalse(node0.isDebugger());
1275:       assertEquals(0, node0.getChildCount());
1276:       assertEquals(0, node0.getLineno());
1277:       assertFalse(node0.isArrayLit());
1278:       assertFalse(node0.isParamList());
1279:       assertFalse(node0.isFalse());
1280:       assertFalse(node0.isThrow());
1281:       assertFalse(node0.isStringKey());
1282:       assertFalse(node0.isThis());
1283:       assertFalse(node0.isHook());
1284:       assertFalse(node0.isInc());
1285:       assertFalse(node0.isSetterDef());
1286:       assertFalse(node0.isRegExp());
1287:       assertFalse(node0.isWith());
1288:       assertFalse(node0.isBlock());
1289:       assertFalse(node0.isInstanceOf());
1290:       assertFalse(node0.isCatch());
1291:       assertFalse(node0.hasMoreThanOneChild());
1292:       assertFalse(node0.hasChildren());
1293:       assertFalse(node0.isDec());
1294:       assertFalse(node0.isNumber());
1295:       assertFalse(node0.isTypeOf());
1296:       assertFalse(node0.isReturn());
1297:       assertFalse(node0.isAssign());
1298:       assertFalse(node0.isOr());
1299:       assertFalse(node0.isLabel());
1300:       assertFalse(node0.hasOneChild());
1301:       assertEquals(537, node0.getCharno());
1302:       assertFalse(node0.isAssignAdd());
1303:       assertFalse(node0.isDo());
1304:       assertFalse(node0.isScript());
1305:       assertFalse(node0.isObjectLit());
1306:       assertFalse(node0.isNot());
1307:       assertFalse(node0.isCast());
1308:       assertFalse(node0.isAnd());
1309:       assertFalse(node0.isContinue());
1310:       assertFalse(node0.isLabelName());
1311:       assertFalse(node0.isBreak());
1312:       assertFalse(node0.isNull());
1313:       assertEquals((-2535), node0.getType());
1314:       assertFalse(node0.isComma());
1315:       assertFalse(node0.isVar());
1316:       assertFalse(node0.isGetProp());
1317:       assertFalse(node0.isAdd());
1318:       assertEquals(537, node0.getSourcePosition());
1319:       assertFalse(node0.isNew());
1320:       assertFalse(node0.isWhile());
1321:       assertFalse(node0.isTrue());
1322:       assertFalse(node0.isGetElem());
1323:       assertFalse(node0.isVoid());
1324:       assertFalse(node0.isName());
1325:       assertFalse(node0.isCall());
1326:       assertFalse(node0.isExprResult());
1327:       assertFalse(boolean4);
1328:       assertNotSame(node0, node1);
1329:       
1330:       Set<String> set0 = node1.getDirectives();
1331:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1332:       assertEquals(53, Node.INPUT_ID);
1333:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1334:       assertEquals(55, Node.INFERRED_FUNCTION);
1335:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1336:       assertEquals(43, Node.IS_CONSTANT_NAME);
1337:       assertEquals(56, Node.CHANGE_TIME);
1338:       assertEquals(36, Node.QUOTED_PROP);
1339:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1340:       assertEquals(2, Node.POST_FLAG);
1341:       assertEquals(8, Node.FLAG_NO_THROWS);
1342:       assertEquals(29, Node.JSDOC_INFO_PROP);
1343:       assertEquals(39, Node.EMPTY_BLOCK);
1344:       assertEquals(30, Node.VAR_ARGS_NAME);
1345:       assertEquals(57, Node.LAST_PROP);
1346:       assertEquals(47, Node.IS_DISPATCHER);
1347:       assertEquals(54, Node.SLASH_V);
1348:       assertEquals(52, Node.LENGTH);
1349:       assertEquals(40, Node.ORIGINALNAME_PROP);
1350:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1351:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1352:       assertEquals(49, Node.DIRECT_EVAL);
1353:       assertEquals(50, Node.FREE_CALL);
1354:       assertEquals(46, Node.IS_NAMESPACE);
1355:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1356:       assertEquals(57, Node.REFLECTED_OBJECT);
1357:       assertEquals(48, Node.DIRECTIVES);
1358:       assertEquals(37, Node.OPT_ARG_NAME);
1359:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1360:       assertEquals(32, Node.INCRDECR_PROP);
1361:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1362:       assertEquals(1, Node.DECR_FLAG);
1363:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1364:       assertEquals(4095, Node.COLUMN_MASK);
1365:       assertEquals(12, Node.COLUMN_BITS);
1366:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1367:       assertFalse(node1.equals((Object)node0));
1368:       assertFalse(node1.isSetterDef());
1369:       assertFalse(node1.isParamList());
1370:       assertFalse(node1.isNull());
1371:       assertEquals(0, node1.getChildCount());
1372:       assertFalse(node1.isVar());
1373:       assertEquals(40, node1.getType());
1374:       assertFalse(node1.isNew());
1375:       assertFalse(node1.isDefaultCase());
1376:       assertTrue(node1.isString());
1377:       assertFalse(node1.isDebugger());
1378:       assertFalse(node1.isFunction());
1379:       assertFalse(node1.isArrayLit());
1380:       assertFalse(node1.isContinue());
1381:       assertFalse(node1.isStringKey());
1382:       assertFalse(node1.isNE());
1383:       assertFalse(node1.isIn());
1384:       assertFalse(node1.isNumber());
1385:       assertFalse(node1.isGetterDef());
1386:       assertFalse(node1.isFor());
1387:       assertFalse(node1.isTry());
1388:       assertFalse(node1.isCase());
1389:       assertFalse(node1.hasOneChild());
1390:       assertFalse(node1.isInc());
1391:       assertFalse(node1.isBlock());
1392:       assertFalse(node1.isWith());
1393:       assertFalse(node1.isRegExp());
1394:       assertFalse(node1.isCatch());
1395:       assertFalse(node1.hasMoreThanOneChild());
1396:       assertFalse(node1.isInstanceOf());
1397:       assertEquals((-1), node1.getLineno());
1398:       assertFalse(node1.isIf());
1399:       assertFalse(node1.isComma());
1400:       assertFalse(node1.isBreak());
1401:       assertFalse(node1.isGetProp());
1402:       assertFalse(node1.isThis());
1403:       assertFalse(node1.isFalse());
1404:       assertFalse(node1.isThrow());
1405:       assertFalse(node1.isHook());
1406:       assertFalse(node1.isSwitch());
1407:       assertEquals((-1), node1.getCharno());
1408:       assertFalse(node1.isScript());
1409:       assertFalse(node1.isNot());
1410:       assertFalse(node1.isObjectLit());
1411:       assertFalse(node1.isCast());
1412:       assertFalse(node1.isAnd());
1413:       assertFalse(node1.isLabelName());
1414:       assertEquals((-1), node1.getSourcePosition());
1415:       assertFalse(node1.hasChildren());
1416:       assertFalse(node1.isEmpty());
1417:       assertFalse(node1.isAssign());
1418:       assertFalse(node1.isOr());
1419:       assertFalse(node1.isLabel());
1420:       assertFalse(node1.isDec());
1421:       assertFalse(node1.isTypeOf());
1422:       assertFalse(node1.isReturn());
1423:       assertFalse(node1.isDo());
1424:       assertFalse(node1.isAssignAdd());
1425:       assertFalse(node1.isWhile());
1426:       assertFalse(node1.isTrue());
1427:       assertFalse(node1.isAdd());
1428:       assertFalse(node1.isExprResult());
1429:       assertFalse(node1.isCall());
1430:       assertFalse(node1.isGetElem());
1431:       assertFalse(node1.isVoid());
1432:       assertFalse(node1.isDelProp());
1433:       assertFalse(node1.isName());
1434:       assertNull(set0);
1435:       assertNotSame(node1, node0);
1436:       
1437:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
1438:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1439:       assertNotNull(jSTypeRegistry0);
1440:       
1441:       // Undeclared exception!
1442:       try { 
1443:         jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) null);
1444:         fail("Expecting exception: NullPointerException");
1445:       
1446:       } catch(NullPointerException e) {
1447:          //
1448:          // no message in exception (getMessage() returned null)
1449:          //
1450:          verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
1451:       }
1452:   }
1453: }
RegularFileObject[/tmp/EvoSuite_56_1628256120220/com/google/javascript/rhino/Node_56_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:22:00 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_56_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_56_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.common.collect.Iterables",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_56_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.Token",
267:       "com.google.common.base.Preconditions",
268:       "com.google.common.base.Objects",
269:       "com.google.javascript.rhino.SimpleErrorReporter",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.common.collect.Sets",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.Iterators$12",
347:       "com.google.common.collect.AbstractIndexedListIterator",
348:       "com.google.common.collect.Iterators$11",
349:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
350:       "com.google.javascript.rhino.InputId",
351:       "com.google.javascript.rhino.JSTypeExpression",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Platform",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
364:       "com.google.javascript.rhino.jstype.NamedType",
365:       "com.google.common.collect.AbstractMultimap$Values",
366:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
367:       "com.google.common.collect.AbstractMapBasedMultimap$1",
368:       "com.google.common.collect.Multimaps$Entries",
369:       "com.google.common.collect.AbstractMultimap$Entries",
370:       "com.google.common.collect.AbstractMapBasedMultimap$2",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
373:     );
374:   }
375: }

[MASTER] 13:22:00.650 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-2535), "");
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isFunction());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertEquals((-2535), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isFunction());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertEquals((-2535), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertNotNull(iterable0);

int int0 = node0.getLength();
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isFunction());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertEquals((-2535), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertEquals(0, int0);

int int1 = node0.getSourcePosition();
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(int1 == int0);
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isFunction());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertEquals((-2535), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertEquals((-1), int1);

boolean boolean0 = node0.isGetProp();
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isFunction());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertEquals((-2535), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(boolean0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1237));
assertEquals((-1237), node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

boolean boolean1 = node0.isSwitch();
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isFunction());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertEquals((-2535), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(boolean1);

node0.setSourceEncodedPositionForTree(537);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertEquals(537, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertEquals((-2535), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertEquals(537, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());

boolean boolean2 = node0.isAssignAdd();
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertEquals(537, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertEquals((-2535), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertEquals(537, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(boolean2);

JSDocInfo jSDocInfo0 = new JSDocInfo(true);
assertNull(jSDocInfo0.getVisibility());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.hasThisType());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasModifies());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isJaggerInject());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isNoCompile());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isDefine());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isHidden());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isWizaction());
assertNull(jSDocInfo0.getReturnDescription());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNotNull(jSDocInfo0);

JSTypeExpression jSTypeExpression0 = jSDocInfo0.getType();
assertNull(jSDocInfo0.getVisibility());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.hasThisType());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasModifies());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isJaggerInject());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isNoCompile());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isDefine());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isHidden());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isWizaction());
assertNull(jSDocInfo0.getReturnDescription());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(jSTypeExpression0);

boolean boolean3 = jSDocInfo0.documentThrows((JSTypeExpression) null, "");
assertFalse(boolean3 == boolean0);
assertFalse(boolean3 == boolean1);
assertFalse(boolean3 == boolean2);
assertNull(jSDocInfo0.getVisibility());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.hasThisType());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasModifies());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isJaggerInject());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isNoCompile());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isDefine());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isHidden());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isWizaction());
assertNull(jSDocInfo0.getReturnDescription());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertTrue(boolean3);

Node node1 = Node.newString("");
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertEquals(40, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertTrue(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertNotNull(node1);
assertNotSame(node1, node0);

Node node2 = jSDocInfo0.getAssociatedNode();
assertNull(jSDocInfo0.getVisibility());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.hasThisType());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasModifies());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isJaggerInject());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.isIdGenerator());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isNoCompile());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isDefine());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isHidden());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isWizaction());
assertNull(jSDocInfo0.getReturnDescription());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(node2);

boolean boolean4 = node0.isSwitch();
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertEquals(537, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertEquals((-2535), node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertEquals(537, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(boolean4);
assertNotSame(node0, node1);

Set<String> set0 = node1.getDirectives();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertEquals(40, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertTrue(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertNull(set0);
assertNotSame(node1, node0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) null);

[MASTER] 13:22:01.211 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_60_1628256120913/com/google/javascript/rhino/Node_60_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_60_1628256120913/com/google/javascript/rhino/Node_60_tmp__ESTest_scaffolding.java]]
[MASTER] 13:22:01.211 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:22:01.211 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:22:01.211 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 162
[MASTER] 13:22:01.213 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_60_1628256120913/com/google/javascript/rhino/Node_60_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:22:00 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_60_tmp__ESTest extends Node_60_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("");
21:       assertEquals(30, Node.VAR_ARGS_NAME);
22:       assertEquals(49, Node.DIRECT_EVAL);
23:       assertEquals(15, Node.NO_SIDE_EFFECTS);
24:       assertEquals(1, Node.DECR_FLAG);
25:       assertEquals(12, Node.COLUMN_BITS);
26:       assertEquals(54, Node.SLASH_V);
27:       assertEquals(57, Node.LAST_PROP);
28:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
29:       assertEquals(40, Node.ORIGINALNAME_PROP);
30:       assertEquals(2, Node.POST_FLAG);
31:       assertEquals(29, Node.JSDOC_INFO_PROP);
32:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
33:       assertEquals(47, Node.IS_DISPATCHER);
34:       assertEquals(37, Node.OPT_ARG_NAME);
35:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
36:       assertEquals(48, Node.DIRECTIVES);
37:       assertEquals(56, Node.CHANGE_TIME);
38:       assertEquals(52, Node.LENGTH);
39:       assertEquals(53, Node.INPUT_ID);
40:       assertEquals(57, Node.REFLECTED_OBJECT);
41:       assertEquals(8, Node.FLAG_NO_THROWS);
42:       assertEquals(39, Node.EMPTY_BLOCK);
43:       assertEquals(55, Node.INFERRED_FUNCTION);
44:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
45:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
46:       assertEquals(36, Node.QUOTED_PROP);
47:       assertEquals(43, Node.IS_CONSTANT_NAME);
48:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
49:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
50:       assertEquals(4095, Node.COLUMN_MASK);
51:       assertEquals(50, Node.FREE_CALL);
52:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
53:       assertEquals(32, Node.INCRDECR_PROP);
54:       assertEquals(46, Node.IS_NAMESPACE);
55:       assertEquals(51, Node.STATIC_SOURCE_FILE);
56:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
57:       assertFalse(node0.isAssign());
58:       assertFalse(node0.isLabelName());
59:       assertFalse(node0.isNumber());
60:       assertFalse(node0.hasOneChild());
61:       assertFalse(node0.isCast());
62:       assertFalse(node0.isGetElem());
63:       assertFalse(node0.isOr());
64:       assertEquals((-1), node0.getSourcePosition());
65:       assertFalse(node0.isDo());
66:       assertFalse(node0.isAnd());
67:       assertFalse(node0.isContinue());
68:       assertFalse(node0.isNew());
69:       assertFalse(node0.isLabel());
70:       assertFalse(node0.isAssignAdd());
71:       assertFalse(node0.isVar());
72:       assertFalse(node0.isThrow());
73:       assertFalse(node0.isStringKey());
74:       assertFalse(node0.isSetterDef());
75:       assertFalse(node0.isParamList());
76:       assertFalse(node0.isSwitch());
77:       assertEquals((-1), node0.getCharno());
78:       assertFalse(node0.isCase());
79:       assertFalse(node0.hasMoreThanOneChild());
80:       assertFalse(node0.isWith());
81:       assertFalse(node0.isScript());
82:       assertFalse(node0.isCatch());
83:       assertFalse(node0.isInstanceOf());
84:       assertEquals((-1), node0.getLineno());
85:       assertTrue(node0.isString());
86:       assertFalse(node0.isTry());
87:       assertFalse(node0.isBlock());
88:       assertFalse(node0.isRegExp());
89:       assertFalse(node0.isHook());
90:       assertFalse(node0.isThis());
91:       assertFalse(node0.isEmpty());
92:       assertFalse(node0.isFor());
93:       assertFalse(node0.isDelProp());
94:       assertFalse(node0.isGetterDef());
95:       assertFalse(node0.isIf());
96:       assertFalse(node0.isArrayLit());
97:       assertFalse(node0.isVoid());
98:       assertFalse(node0.isIn());
99:       assertFalse(node0.isNE());
100:       assertFalse(node0.isDebugger());
101:       assertFalse(node0.isTrue());
102:       assertEquals(40, node0.getType());
103:       assertFalse(node0.isDefaultCase());
104:       assertFalse(node0.isInc());
105:       assertFalse(node0.isFunction());
106:       assertEquals(0, node0.getChildCount());
107:       assertFalse(node0.isName());
108:       assertFalse(node0.isFalse());
109:       assertFalse(node0.isCall());
110:       assertFalse(node0.isBreak());
111:       assertFalse(node0.isGetProp());
112:       assertFalse(node0.isAdd());
113:       assertFalse(node0.isNull());
114:       assertFalse(node0.isNot());
115:       assertFalse(node0.isObjectLit());
116:       assertFalse(node0.isWhile());
117:       assertFalse(node0.isExprResult());
118:       assertFalse(node0.isTypeOf());
119:       assertFalse(node0.isComma());
120:       assertFalse(node0.isDec());
121:       assertFalse(node0.hasChildren());
122:       assertFalse(node0.isReturn());
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertEquals(30, Node.VAR_ARGS_NAME);
127:       assertEquals(49, Node.DIRECT_EVAL);
128:       assertEquals(15, Node.NO_SIDE_EFFECTS);
129:       assertEquals(1, Node.DECR_FLAG);
130:       assertEquals(12, Node.COLUMN_BITS);
131:       assertEquals(54, Node.SLASH_V);
132:       assertEquals(57, Node.LAST_PROP);
133:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
134:       assertEquals(40, Node.ORIGINALNAME_PROP);
135:       assertEquals(2, Node.POST_FLAG);
136:       assertEquals(29, Node.JSDOC_INFO_PROP);
137:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
138:       assertEquals(47, Node.IS_DISPATCHER);
139:       assertEquals(37, Node.OPT_ARG_NAME);
140:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
141:       assertEquals(48, Node.DIRECTIVES);
142:       assertEquals(56, Node.CHANGE_TIME);
143:       assertEquals(52, Node.LENGTH);
144:       assertEquals(53, Node.INPUT_ID);
145:       assertEquals(57, Node.REFLECTED_OBJECT);
146:       assertEquals(8, Node.FLAG_NO_THROWS);
147:       assertEquals(39, Node.EMPTY_BLOCK);
148:       assertEquals(55, Node.INFERRED_FUNCTION);
149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
150:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
151:       assertEquals(36, Node.QUOTED_PROP);
152:       assertEquals(43, Node.IS_CONSTANT_NAME);
153:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
154:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
155:       assertEquals(4095, Node.COLUMN_MASK);
156:       assertEquals(50, Node.FREE_CALL);
157:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
158:       assertEquals(32, Node.INCRDECR_PROP);
159:       assertEquals(46, Node.IS_NAMESPACE);
160:       assertEquals(51, Node.STATIC_SOURCE_FILE);
161:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
162:       assertFalse(iterable0.contains(node0));
163:       assertFalse(node0.isAssign());
164:       assertFalse(node0.isLabelName());
165:       assertFalse(node0.isNumber());
166:       assertFalse(node0.hasOneChild());
167:       assertFalse(node0.isCast());
168:       assertFalse(node0.isGetElem());
169:       assertFalse(node0.isOr());
170:       assertEquals((-1), node0.getSourcePosition());
171:       assertFalse(node0.isDo());
172:       assertFalse(node0.isAnd());
173:       assertFalse(node0.isContinue());
174:       assertFalse(node0.isNew());
175:       assertFalse(node0.isLabel());
176:       assertFalse(node0.isAssignAdd());
177:       assertFalse(node0.isVar());
178:       assertFalse(node0.isThrow());
179:       assertFalse(node0.isStringKey());
180:       assertFalse(node0.isSetterDef());
181:       assertFalse(node0.isParamList());
182:       assertFalse(node0.isSwitch());
183:       assertEquals((-1), node0.getCharno());
184:       assertFalse(node0.isCase());
185:       assertFalse(node0.hasMoreThanOneChild());
186:       assertFalse(node0.isWith());
187:       assertFalse(node0.isScript());
188:       assertFalse(node0.isCatch());
189:       assertFalse(node0.isInstanceOf());
190:       assertEquals((-1), node0.getLineno());
191:       assertTrue(node0.isString());
192:       assertFalse(node0.isTry());
193:       assertFalse(node0.isBlock());
194:       assertFalse(node0.isRegExp());
195:       assertFalse(node0.isHook());
196:       assertFalse(node0.isThis());
197:       assertFalse(node0.isEmpty());
198:       assertFalse(node0.isFor());
199:       assertFalse(node0.isDelProp());
200:       assertFalse(node0.isGetterDef());
201:       assertFalse(node0.isIf());
202:       assertFalse(node0.isArrayLit());
203:       assertFalse(node0.isVoid());
204:       assertFalse(node0.isIn());
205:       assertFalse(node0.isNE());
206:       assertFalse(node0.isDebugger());
207:       assertFalse(node0.isTrue());
208:       assertEquals(40, node0.getType());
209:       assertFalse(node0.isDefaultCase());
210:       assertFalse(node0.isInc());
211:       assertFalse(node0.isFunction());
212:       assertEquals(0, node0.getChildCount());
213:       assertFalse(node0.isName());
214:       assertFalse(node0.isFalse());
215:       assertFalse(node0.isCall());
216:       assertFalse(node0.isBreak());
217:       assertFalse(node0.isGetProp());
218:       assertFalse(node0.isAdd());
219:       assertFalse(node0.isNull());
220:       assertFalse(node0.isNot());
221:       assertFalse(node0.isObjectLit());
222:       assertFalse(node0.isWhile());
223:       assertFalse(node0.isExprResult());
224:       assertFalse(node0.isTypeOf());
225:       assertFalse(node0.isComma());
226:       assertFalse(node0.isDec());
227:       assertFalse(node0.hasChildren());
228:       assertFalse(node0.isReturn());
229:       assertNotNull(iterable0);
230:       
231:       int int0 = node0.getLength();
232:       assertEquals(30, Node.VAR_ARGS_NAME);
233:       assertEquals(49, Node.DIRECT_EVAL);
234:       assertEquals(15, Node.NO_SIDE_EFFECTS);
235:       assertEquals(1, Node.DECR_FLAG);
236:       assertEquals(12, Node.COLUMN_BITS);
237:       assertEquals(54, Node.SLASH_V);
238:       assertEquals(57, Node.LAST_PROP);
239:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
240:       assertEquals(40, Node.ORIGINALNAME_PROP);
241:       assertEquals(2, Node.POST_FLAG);
242:       assertEquals(29, Node.JSDOC_INFO_PROP);
243:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
244:       assertEquals(47, Node.IS_DISPATCHER);
245:       assertEquals(37, Node.OPT_ARG_NAME);
246:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
247:       assertEquals(48, Node.DIRECTIVES);
248:       assertEquals(56, Node.CHANGE_TIME);
249:       assertEquals(52, Node.LENGTH);
250:       assertEquals(53, Node.INPUT_ID);
251:       assertEquals(57, Node.REFLECTED_OBJECT);
252:       assertEquals(8, Node.FLAG_NO_THROWS);
253:       assertEquals(39, Node.EMPTY_BLOCK);
254:       assertEquals(55, Node.INFERRED_FUNCTION);
255:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
256:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
257:       assertEquals(36, Node.QUOTED_PROP);
258:       assertEquals(43, Node.IS_CONSTANT_NAME);
259:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
260:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
261:       assertEquals(4095, Node.COLUMN_MASK);
262:       assertEquals(50, Node.FREE_CALL);
263:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
264:       assertEquals(32, Node.INCRDECR_PROP);
265:       assertEquals(46, Node.IS_NAMESPACE);
266:       assertEquals(51, Node.STATIC_SOURCE_FILE);
267:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
268:       assertFalse(node0.isAssign());
269:       assertFalse(node0.isLabelName());
270:       assertFalse(node0.isNumber());
271:       assertFalse(node0.hasOneChild());
272:       assertFalse(node0.isCast());
273:       assertFalse(node0.isGetElem());
274:       assertFalse(node0.isOr());
275:       assertEquals((-1), node0.getSourcePosition());
276:       assertFalse(node0.isDo());
277:       assertFalse(node0.isAnd());
278:       assertFalse(node0.isContinue());
279:       assertFalse(node0.isNew());
280:       assertFalse(node0.isLabel());
281:       assertFalse(node0.isAssignAdd());
282:       assertFalse(node0.isVar());
283:       assertFalse(node0.isThrow());
284:       assertFalse(node0.isStringKey());
285:       assertFalse(node0.isSetterDef());
286:       assertFalse(node0.isParamList());
287:       assertFalse(node0.isSwitch());
288:       assertEquals((-1), node0.getCharno());
289:       assertFalse(node0.isCase());
290:       assertFalse(node0.hasMoreThanOneChild());
291:       assertFalse(node0.isWith());
292:       assertFalse(node0.isScript());
293:       assertFalse(node0.isCatch());
294:       assertFalse(node0.isInstanceOf());
295:       assertEquals((-1), node0.getLineno());
296:       assertTrue(node0.isString());
297:       assertFalse(node0.isTry());
298:       assertFalse(node0.isBlock());
299:       assertFalse(node0.isRegExp());
300:       assertFalse(node0.isHook());
301:       assertFalse(node0.isThis());
302:       assertFalse(node0.isEmpty());
303:       assertFalse(node0.isFor());
304:       assertFalse(node0.isDelProp());
305:       assertFalse(node0.isGetterDef());
306:       assertFalse(node0.isIf());
307:       assertFalse(node0.isArrayLit());
308:       assertFalse(node0.isVoid());
309:       assertFalse(node0.isIn());
310:       assertFalse(node0.isNE());
311:       assertFalse(node0.isDebugger());
312:       assertFalse(node0.isTrue());
313:       assertEquals(40, node0.getType());
314:       assertFalse(node0.isDefaultCase());
315:       assertFalse(node0.isInc());
316:       assertFalse(node0.isFunction());
317:       assertEquals(0, node0.getChildCount());
318:       assertFalse(node0.isName());
319:       assertFalse(node0.isFalse());
320:       assertFalse(node0.isCall());
321:       assertFalse(node0.isBreak());
322:       assertFalse(node0.isGetProp());
323:       assertFalse(node0.isAdd());
324:       assertFalse(node0.isNull());
325:       assertFalse(node0.isNot());
326:       assertFalse(node0.isObjectLit());
327:       assertFalse(node0.isWhile());
328:       assertFalse(node0.isExprResult());
329:       assertFalse(node0.isTypeOf());
330:       assertFalse(node0.isComma());
331:       assertFalse(node0.isDec());
332:       assertFalse(node0.hasChildren());
333:       assertFalse(node0.isReturn());
334:       assertEquals(0, int0);
335:       
336:       int int1 = node0.getSideEffectFlags();
337:       assertEquals(30, Node.VAR_ARGS_NAME);
338:       assertEquals(49, Node.DIRECT_EVAL);
339:       assertEquals(15, Node.NO_SIDE_EFFECTS);
340:       assertEquals(1, Node.DECR_FLAG);
341:       assertEquals(12, Node.COLUMN_BITS);
342:       assertEquals(54, Node.SLASH_V);
343:       assertEquals(57, Node.LAST_PROP);
344:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
345:       assertEquals(40, Node.ORIGINALNAME_PROP);
346:       assertEquals(2, Node.POST_FLAG);
347:       assertEquals(29, Node.JSDOC_INFO_PROP);
348:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
349:       assertEquals(47, Node.IS_DISPATCHER);
350:       assertEquals(37, Node.OPT_ARG_NAME);
351:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
352:       assertEquals(48, Node.DIRECTIVES);
353:       assertEquals(56, Node.CHANGE_TIME);
354:       assertEquals(52, Node.LENGTH);
355:       assertEquals(53, Node.INPUT_ID);
356:       assertEquals(57, Node.REFLECTED_OBJECT);
357:       assertEquals(8, Node.FLAG_NO_THROWS);
358:       assertEquals(39, Node.EMPTY_BLOCK);
359:       assertEquals(55, Node.INFERRED_FUNCTION);
360:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
361:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
362:       assertEquals(36, Node.QUOTED_PROP);
363:       assertEquals(43, Node.IS_CONSTANT_NAME);
364:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
365:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
366:       assertEquals(4095, Node.COLUMN_MASK);
367:       assertEquals(50, Node.FREE_CALL);
368:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
369:       assertEquals(32, Node.INCRDECR_PROP);
370:       assertEquals(46, Node.IS_NAMESPACE);
371:       assertEquals(51, Node.STATIC_SOURCE_FILE);
372:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
373:       assertTrue(int1 == int0);
374:       assertFalse(node0.isAssign());
375:       assertFalse(node0.isLabelName());
376:       assertFalse(node0.isNumber());
377:       assertFalse(node0.hasOneChild());
378:       assertFalse(node0.isCast());
379:       assertFalse(node0.isGetElem());
380:       assertFalse(node0.isOr());
381:       assertEquals((-1), node0.getSourcePosition());
382:       assertFalse(node0.isDo());
383:       assertFalse(node0.isAnd());
384:       assertFalse(node0.isContinue());
385:       assertFalse(node0.isNew());
386:       assertFalse(node0.isLabel());
387:       assertFalse(node0.isAssignAdd());
388:       assertFalse(node0.isVar());
389:       assertFalse(node0.isThrow());
390:       assertFalse(node0.isStringKey());
391:       assertFalse(node0.isSetterDef());
392:       assertFalse(node0.isParamList());
393:       assertFalse(node0.isSwitch());
394:       assertEquals((-1), node0.getCharno());
395:       assertFalse(node0.isCase());
396:       assertFalse(node0.hasMoreThanOneChild());
397:       assertFalse(node0.isWith());
398:       assertFalse(node0.isScript());
399:       assertFalse(node0.isCatch());
400:       assertFalse(node0.isInstanceOf());
401:       assertEquals((-1), node0.getLineno());
402:       assertTrue(node0.isString());
403:       assertFalse(node0.isTry());
404:       assertFalse(node0.isBlock());
405:       assertFalse(node0.isRegExp());
406:       assertFalse(node0.isHook());
407:       assertFalse(node0.isThis());
408:       assertFalse(node0.isEmpty());
409:       assertFalse(node0.isFor());
410:       assertFalse(node0.isDelProp());
411:       assertFalse(node0.isGetterDef());
412:       assertFalse(node0.isIf());
413:       assertFalse(node0.isArrayLit());
414:       assertFalse(node0.isVoid());
415:       assertFalse(node0.isIn());
416:       assertFalse(node0.isNE());
417:       assertFalse(node0.isDebugger());
418:       assertFalse(node0.isTrue());
419:       assertEquals(40, node0.getType());
420:       assertFalse(node0.isDefaultCase());
421:       assertFalse(node0.isInc());
422:       assertFalse(node0.isFunction());
423:       assertEquals(0, node0.getChildCount());
424:       assertFalse(node0.isName());
425:       assertFalse(node0.isFalse());
426:       assertFalse(node0.isCall());
427:       assertFalse(node0.isBreak());
428:       assertFalse(node0.isGetProp());
429:       assertFalse(node0.isAdd());
430:       assertFalse(node0.isNull());
431:       assertFalse(node0.isNot());
432:       assertFalse(node0.isObjectLit());
433:       assertFalse(node0.isWhile());
434:       assertFalse(node0.isExprResult());
435:       assertFalse(node0.isTypeOf());
436:       assertFalse(node0.isComma());
437:       assertFalse(node0.isDec());
438:       assertFalse(node0.hasChildren());
439:       assertFalse(node0.isReturn());
440:       assertEquals(0, int1);
441:       
442:       int int2 = node0.getSourcePosition();
443:       assertEquals(30, Node.VAR_ARGS_NAME);
444:       assertEquals(49, Node.DIRECT_EVAL);
445:       assertEquals(15, Node.NO_SIDE_EFFECTS);
446:       assertEquals(1, Node.DECR_FLAG);
447:       assertEquals(12, Node.COLUMN_BITS);
448:       assertEquals(54, Node.SLASH_V);
449:       assertEquals(57, Node.LAST_PROP);
450:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
451:       assertEquals(40, Node.ORIGINALNAME_PROP);
452:       assertEquals(2, Node.POST_FLAG);
453:       assertEquals(29, Node.JSDOC_INFO_PROP);
454:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
455:       assertEquals(47, Node.IS_DISPATCHER);
456:       assertEquals(37, Node.OPT_ARG_NAME);
457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
458:       assertEquals(48, Node.DIRECTIVES);
459:       assertEquals(56, Node.CHANGE_TIME);
460:       assertEquals(52, Node.LENGTH);
461:       assertEquals(53, Node.INPUT_ID);
462:       assertEquals(57, Node.REFLECTED_OBJECT);
463:       assertEquals(8, Node.FLAG_NO_THROWS);
464:       assertEquals(39, Node.EMPTY_BLOCK);
465:       assertEquals(55, Node.INFERRED_FUNCTION);
466:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
467:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
468:       assertEquals(36, Node.QUOTED_PROP);
469:       assertEquals(43, Node.IS_CONSTANT_NAME);
470:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
471:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
472:       assertEquals(4095, Node.COLUMN_MASK);
473:       assertEquals(50, Node.FREE_CALL);
474:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
475:       assertEquals(32, Node.INCRDECR_PROP);
476:       assertEquals(46, Node.IS_NAMESPACE);
477:       assertEquals(51, Node.STATIC_SOURCE_FILE);
478:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
479:       assertFalse(int2 == int1);
480:       assertFalse(int2 == int0);
481:       assertFalse(node0.isAssign());
482:       assertFalse(node0.isLabelName());
483:       assertFalse(node0.isNumber());
484:       assertFalse(node0.hasOneChild());
485:       assertFalse(node0.isCast());
486:       assertFalse(node0.isGetElem());
487:       assertFalse(node0.isOr());
488:       assertEquals((-1), node0.getSourcePosition());
489:       assertFalse(node0.isDo());
490:       assertFalse(node0.isAnd());
491:       assertFalse(node0.isContinue());
492:       assertFalse(node0.isNew());
493:       assertFalse(node0.isLabel());
494:       assertFalse(node0.isAssignAdd());
495:       assertFalse(node0.isVar());
496:       assertFalse(node0.isThrow());
497:       assertFalse(node0.isStringKey());
498:       assertFalse(node0.isSetterDef());
499:       assertFalse(node0.isParamList());
500:       assertFalse(node0.isSwitch());
501:       assertEquals((-1), node0.getCharno());
502:       assertFalse(node0.isCase());
503:       assertFalse(node0.hasMoreThanOneChild());
504:       assertFalse(node0.isWith());
505:       assertFalse(node0.isScript());
506:       assertFalse(node0.isCatch());
507:       assertFalse(node0.isInstanceOf());
508:       assertEquals((-1), node0.getLineno());
509:       assertTrue(node0.isString());
510:       assertFalse(node0.isTry());
511:       assertFalse(node0.isBlock());
512:       assertFalse(node0.isRegExp());
513:       assertFalse(node0.isHook());
514:       assertFalse(node0.isThis());
515:       assertFalse(node0.isEmpty());
516:       assertFalse(node0.isFor());
517:       assertFalse(node0.isDelProp());
518:       assertFalse(node0.isGetterDef());
519:       assertFalse(node0.isIf());
520:       assertFalse(node0.isArrayLit());
521:       assertFalse(node0.isVoid());
522:       assertFalse(node0.isIn());
523:       assertFalse(node0.isNE());
524:       assertFalse(node0.isDebugger());
525:       assertFalse(node0.isTrue());
526:       assertEquals(40, node0.getType());
527:       assertFalse(node0.isDefaultCase());
528:       assertFalse(node0.isInc());
529:       assertFalse(node0.isFunction());
530:       assertEquals(0, node0.getChildCount());
531:       assertFalse(node0.isName());
532:       assertFalse(node0.isFalse());
533:       assertFalse(node0.isCall());
534:       assertFalse(node0.isBreak());
535:       assertFalse(node0.isGetProp());
536:       assertFalse(node0.isAdd());
537:       assertFalse(node0.isNull());
538:       assertFalse(node0.isNot());
539:       assertFalse(node0.isObjectLit());
540:       assertFalse(node0.isWhile());
541:       assertFalse(node0.isExprResult());
542:       assertFalse(node0.isTypeOf());
543:       assertFalse(node0.isComma());
544:       assertFalse(node0.isDec());
545:       assertFalse(node0.hasChildren());
546:       assertFalse(node0.isReturn());
547:       assertEquals((-1), int2);
548:       
549:       boolean boolean0 = node0.isFalse();
550:       assertEquals(30, Node.VAR_ARGS_NAME);
551:       assertEquals(49, Node.DIRECT_EVAL);
552:       assertEquals(15, Node.NO_SIDE_EFFECTS);
553:       assertEquals(1, Node.DECR_FLAG);
554:       assertEquals(12, Node.COLUMN_BITS);
555:       assertEquals(54, Node.SLASH_V);
556:       assertEquals(57, Node.LAST_PROP);
557:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
558:       assertEquals(40, Node.ORIGINALNAME_PROP);
559:       assertEquals(2, Node.POST_FLAG);
560:       assertEquals(29, Node.JSDOC_INFO_PROP);
561:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
562:       assertEquals(47, Node.IS_DISPATCHER);
563:       assertEquals(37, Node.OPT_ARG_NAME);
564:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
565:       assertEquals(48, Node.DIRECTIVES);
566:       assertEquals(56, Node.CHANGE_TIME);
567:       assertEquals(52, Node.LENGTH);
568:       assertEquals(53, Node.INPUT_ID);
569:       assertEquals(57, Node.REFLECTED_OBJECT);
570:       assertEquals(8, Node.FLAG_NO_THROWS);
571:       assertEquals(39, Node.EMPTY_BLOCK);
572:       assertEquals(55, Node.INFERRED_FUNCTION);
573:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
574:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
575:       assertEquals(36, Node.QUOTED_PROP);
576:       assertEquals(43, Node.IS_CONSTANT_NAME);
577:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
578:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
579:       assertEquals(4095, Node.COLUMN_MASK);
580:       assertEquals(50, Node.FREE_CALL);
581:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
582:       assertEquals(32, Node.INCRDECR_PROP);
583:       assertEquals(46, Node.IS_NAMESPACE);
584:       assertEquals(51, Node.STATIC_SOURCE_FILE);
585:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
586:       assertFalse(node0.isAssign());
587:       assertFalse(node0.isLabelName());
588:       assertFalse(node0.isNumber());
589:       assertFalse(node0.hasOneChild());
590:       assertFalse(node0.isCast());
591:       assertFalse(node0.isGetElem());
592:       assertFalse(node0.isOr());
593:       assertEquals((-1), node0.getSourcePosition());
594:       assertFalse(node0.isDo());
595:       assertFalse(node0.isAnd());
596:       assertFalse(node0.isContinue());
597:       assertFalse(node0.isNew());
598:       assertFalse(node0.isLabel());
599:       assertFalse(node0.isAssignAdd());
600:       assertFalse(node0.isVar());
601:       assertFalse(node0.isThrow());
602:       assertFalse(node0.isStringKey());
603:       assertFalse(node0.isSetterDef());
604:       assertFalse(node0.isParamList());
605:       assertFalse(node0.isSwitch());
606:       assertEquals((-1), node0.getCharno());
607:       assertFalse(node0.isCase());
608:       assertFalse(node0.hasMoreThanOneChild());
609:       assertFalse(node0.isWith());
610:       assertFalse(node0.isScript());
611:       assertFalse(node0.isCatch());
612:       assertFalse(node0.isInstanceOf());
613:       assertEquals((-1), node0.getLineno());
614:       assertTrue(node0.isString());
615:       assertFalse(node0.isTry());
616:       assertFalse(node0.isBlock());
617:       assertFalse(node0.isRegExp());
618:       assertFalse(node0.isHook());
619:       assertFalse(node0.isThis());
620:       assertFalse(node0.isEmpty());
621:       assertFalse(node0.isFor());
622:       assertFalse(node0.isDelProp());
623:       assertFalse(node0.isGetterDef());
624:       assertFalse(node0.isIf());
625:       assertFalse(node0.isArrayLit());
626:       assertFalse(node0.isVoid());
627:       assertFalse(node0.isIn());
628:       assertFalse(node0.isNE());
629:       assertFalse(node0.isDebugger());
630:       assertFalse(node0.isTrue());
631:       assertEquals(40, node0.getType());
632:       assertFalse(node0.isDefaultCase());
633:       assertFalse(node0.isInc());
634:       assertFalse(node0.isFunction());
635:       assertEquals(0, node0.getChildCount());
636:       assertFalse(node0.isName());
637:       assertFalse(node0.isFalse());
638:       assertFalse(node0.isCall());
639:       assertFalse(node0.isBreak());
640:       assertFalse(node0.isGetProp());
641:       assertFalse(node0.isAdd());
642:       assertFalse(node0.isNull());
643:       assertFalse(node0.isNot());
644:       assertFalse(node0.isObjectLit());
645:       assertFalse(node0.isWhile());
646:       assertFalse(node0.isExprResult());
647:       assertFalse(node0.isTypeOf());
648:       assertFalse(node0.isComma());
649:       assertFalse(node0.isDec());
650:       assertFalse(node0.hasChildren());
651:       assertFalse(node0.isReturn());
652:       assertFalse(boolean0);
653:       
654:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1237));
655:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
656:       assertEquals((-1237), node_SideEffectFlags0.valueOf());
657:       assertNotNull(node_SideEffectFlags0);
658:       
659:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
660:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
661:       assertEquals((-1245), node_SideEffectFlags0.valueOf());
662:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
663:       assertEquals((-1245), node_SideEffectFlags1.valueOf());
664:       assertNotNull(node_SideEffectFlags1);
665:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
666:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
667:       
668:       node_SideEffectFlags0.clearSideEffectFlags();
669:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
670:       assertEquals((-1233), node_SideEffectFlags0.valueOf());
671:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
672:       
673:       Node node1 = Node.newString(51, "", (-2881), 38);
674:       assertEquals(4095, Node.COLUMN_MASK);
675:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
676:       assertEquals(55, Node.INFERRED_FUNCTION);
677:       assertEquals(36, Node.QUOTED_PROP);
678:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
679:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
680:       assertEquals(43, Node.IS_CONSTANT_NAME);
681:       assertEquals(48, Node.DIRECTIVES);
682:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
683:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
684:       assertEquals(50, Node.FREE_CALL);
685:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
686:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
687:       assertEquals(32, Node.INCRDECR_PROP);
688:       assertEquals(1, Node.DECR_FLAG);
689:       assertEquals(12, Node.COLUMN_BITS);
690:       assertEquals(46, Node.IS_NAMESPACE);
691:       assertEquals(30, Node.VAR_ARGS_NAME);
692:       assertEquals(51, Node.STATIC_SOURCE_FILE);
693:       assertEquals(2, Node.POST_FLAG);
694:       assertEquals(54, Node.SLASH_V);
695:       assertEquals(56, Node.CHANGE_TIME);
696:       assertEquals(49, Node.DIRECT_EVAL);
697:       assertEquals(37, Node.OPT_ARG_NAME);
698:       assertEquals(40, Node.ORIGINALNAME_PROP);
699:       assertEquals(57, Node.REFLECTED_OBJECT);
700:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
701:       assertEquals(52, Node.LENGTH);
702:       assertEquals(15, Node.NO_SIDE_EFFECTS);
703:       assertEquals(8, Node.FLAG_NO_THROWS);
704:       assertEquals(39, Node.EMPTY_BLOCK);
705:       assertEquals(47, Node.IS_DISPATCHER);
706:       assertEquals(57, Node.LAST_PROP);
707:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
708:       assertEquals(29, Node.JSDOC_INFO_PROP);
709:       assertEquals(53, Node.INPUT_ID);
710:       assertFalse(node1.equals((Object)node0));
711:       assertFalse(node1.isHook());
712:       assertFalse(node1.isThrow());
713:       assertFalse(node1.isSwitch());
714:       assertEquals((-1), node1.getCharno());
715:       assertFalse(node1.isCase());
716:       assertFalse(node1.isGetProp());
717:       assertFalse(node1.isInc());
718:       assertFalse(node1.isString());
719:       assertFalse(node1.isInstanceOf());
720:       assertFalse(node1.isThis());
721:       assertFalse(node1.isNE());
722:       assertFalse(node1.isIf());
723:       assertFalse(node1.isBreak());
724:       assertFalse(node1.isDelProp());
725:       assertFalse(node1.isComma());
726:       assertFalse(node1.isExprResult());
727:       assertFalse(node1.isWith());
728:       assertFalse(node1.hasOneChild());
729:       assertFalse(node1.isTry());
730:       assertFalse(node1.isArrayLit());
731:       assertFalse(node1.isVoid());
732:       assertFalse(node1.isTrue());
733:       assertFalse(node1.isFor());
734:       assertFalse(node1.isDefaultCase());
735:       assertFalse(node1.isNumber());
736:       assertFalse(node1.isGetterDef());
737:       assertFalse(node1.isScript());
738:       assertFalse(node1.isEmpty());
739:       assertEquals(51, node1.getType());
740:       assertEquals(0, node1.getChildCount());
741:       assertFalse(node1.isLabel());
742:       assertFalse(node1.isAssignAdd());
743:       assertFalse(node1.isParamList());
744:       assertFalse(node1.isLabelName());
745:       assertFalse(node1.isNew());
746:       assertFalse(node1.isStringKey());
747:       assertFalse(node1.isName());
748:       assertFalse(node1.isBlock());
749:       assertFalse(node1.isVar());
750:       assertFalse(node1.isNull());
751:       assertTrue(node1.isIn());
752:       assertFalse(node1.isDo());
753:       assertFalse(node1.isSetterDef());
754:       assertFalse(node1.isAdd());
755:       assertFalse(node1.isReturn());
756:       assertFalse(node1.isOr());
757:       assertEquals((-1), node1.getLineno());
758:       assertFalse(node1.isWhile());
759:       assertFalse(node1.hasChildren());
760:       assertFalse(node1.isDec());
761:       assertFalse(node1.isTypeOf());
762:       assertFalse(node1.isRegExp());
763:       assertFalse(node1.isAssign());
764:       assertFalse(node1.isCall());
765:       assertFalse(node1.isGetElem());
766:       assertFalse(node1.isCatch());
767:       assertFalse(node1.hasMoreThanOneChild());
768:       assertFalse(node1.isNot());
769:       assertFalse(node1.isDebugger());
770:       assertEquals((-1), node1.getSourcePosition());
771:       assertFalse(node1.isObjectLit());
772:       assertFalse(node1.isAnd());
773:       assertFalse(node1.isFalse());
774:       assertFalse(node1.isFunction());
775:       assertFalse(node1.isCast());
776:       assertFalse(node1.isContinue());
777:       assertNotNull(node1);
778:       assertNotSame(node1, node0);
779:       
780:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
781:       assertEquals(0, node_SideEffectFlags0.valueOf());
782:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
783:       assertEquals(0, node_SideEffectFlags2.valueOf());
784:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
785:       assertNotNull(node_SideEffectFlags2);
786:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
787:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
788:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
789:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
790:       
791:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
792:       assertEquals(0, node_SideEffectFlags0.valueOf());
793:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
794:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
795:       assertEquals(0, node_SideEffectFlags3.valueOf());
796:       assertNotNull(node_SideEffectFlags3);
797:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
798:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
799:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
800:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
801:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
802:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
803:       
804:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setAllFlags();
805:       assertEquals(0, node_SideEffectFlags0.valueOf());
806:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
807:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
808:       assertEquals(0, node_SideEffectFlags4.valueOf());
809:       assertNotNull(node_SideEffectFlags4);
810:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
811:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
812:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
813:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
814:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
815:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
816:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
817:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
818:       
819:       node_SideEffectFlags0.clearSideEffectFlags();
820:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
821:       assertEquals(15, node_SideEffectFlags0.valueOf());
822:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
823:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
824:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
825:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
826:       
827:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setAllFlags();
828:       assertEquals(0, node_SideEffectFlags0.valueOf());
829:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
830:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
831:       assertEquals(0, node_SideEffectFlags5.valueOf());
832:       assertNotNull(node_SideEffectFlags5);
833:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
834:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
835:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
836:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
837:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
838:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
839:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
840:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
841:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
842:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
843:       
844:       Node node2 = new Node(51, node0, node0);
845:       assertEquals(30, Node.VAR_ARGS_NAME);
846:       assertEquals(49, Node.DIRECT_EVAL);
847:       assertEquals(15, Node.NO_SIDE_EFFECTS);
848:       assertEquals(1, Node.DECR_FLAG);
849:       assertEquals(12, Node.COLUMN_BITS);
850:       assertEquals(54, Node.SLASH_V);
851:       assertEquals(57, Node.LAST_PROP);
852:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
853:       assertEquals(40, Node.ORIGINALNAME_PROP);
854:       assertEquals(2, Node.POST_FLAG);
855:       assertEquals(29, Node.JSDOC_INFO_PROP);
856:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
857:       assertEquals(47, Node.IS_DISPATCHER);
858:       assertEquals(37, Node.OPT_ARG_NAME);
859:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
860:       assertEquals(48, Node.DIRECTIVES);
861:       assertEquals(56, Node.CHANGE_TIME);
862:       assertEquals(52, Node.LENGTH);
863:       assertEquals(53, Node.INPUT_ID);
864:       assertEquals(57, Node.REFLECTED_OBJECT);
865:       assertEquals(8, Node.FLAG_NO_THROWS);
866:       assertEquals(39, Node.EMPTY_BLOCK);
867:       assertEquals(55, Node.INFERRED_FUNCTION);
868:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
869:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
870:       assertEquals(36, Node.QUOTED_PROP);
871:       assertEquals(43, Node.IS_CONSTANT_NAME);
872:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
873:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
874:       assertEquals(4095, Node.COLUMN_MASK);
875:       assertEquals(50, Node.FREE_CALL);
876:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
877:       assertEquals(32, Node.INCRDECR_PROP);
878:       assertEquals(46, Node.IS_NAMESPACE);
879:       assertEquals(51, Node.STATIC_SOURCE_FILE);
880:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
881:       assertEquals(55, Node.INFERRED_FUNCTION);
882:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
883:       assertEquals(4095, Node.COLUMN_MASK);
884:       assertEquals(8, Node.FLAG_NO_THROWS);
885:       assertEquals(39, Node.EMPTY_BLOCK);
886:       assertEquals(48, Node.DIRECTIVES);
887:       assertEquals(43, Node.IS_CONSTANT_NAME);
888:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
889:       assertEquals(50, Node.FREE_CALL);
890:       assertEquals(36, Node.QUOTED_PROP);
891:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
892:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
893:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
894:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
895:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
896:       assertEquals(12, Node.COLUMN_BITS);
897:       assertEquals(49, Node.DIRECT_EVAL);
898:       assertEquals(32, Node.INCRDECR_PROP);
899:       assertEquals(15, Node.NO_SIDE_EFFECTS);
900:       assertEquals(1, Node.DECR_FLAG);
901:       assertEquals(37, Node.OPT_ARG_NAME);
902:       assertEquals(54, Node.SLASH_V);
903:       assertEquals(56, Node.CHANGE_TIME);
904:       assertEquals(52, Node.LENGTH);
905:       assertEquals(46, Node.IS_NAMESPACE);
906:       assertEquals(51, Node.STATIC_SOURCE_FILE);
907:       assertEquals(57, Node.REFLECTED_OBJECT);
908:       assertEquals(40, Node.ORIGINALNAME_PROP);
909:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
910:       assertEquals(29, Node.JSDOC_INFO_PROP);
911:       assertEquals(53, Node.INPUT_ID);
912:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
913:       assertEquals(2, Node.POST_FLAG);
914:       assertEquals(57, Node.LAST_PROP);
915:       assertEquals(30, Node.VAR_ARGS_NAME);
916:       assertEquals(47, Node.IS_DISPATCHER);
917:       assertFalse(node0.equals((Object)node1));
918:       assertFalse(node2.equals((Object)node1));
919:       assertFalse(node2.equals((Object)node0));
920:       assertFalse(node0.isAssign());
921:       assertFalse(node0.isLabelName());
922:       assertFalse(node0.isNumber());
923:       assertFalse(node0.hasOneChild());
924:       assertFalse(node0.isCast());
925:       assertFalse(node0.isGetElem());
926:       assertFalse(node0.isOr());
927:       assertEquals((-1), node0.getSourcePosition());
928:       assertFalse(node0.isDo());
929:       assertFalse(node0.isAnd());
930:       assertFalse(node0.isContinue());
931:       assertFalse(node0.isNew());
932:       assertFalse(node0.isLabel());
933:       assertFalse(node0.isAssignAdd());
934:       assertFalse(node0.isVar());
935:       assertFalse(node0.isThrow());
936:       assertFalse(node0.isStringKey());
937:       assertFalse(node0.isSetterDef());
938:       assertFalse(node0.isParamList());
939:       assertFalse(node0.isSwitch());
940:       assertEquals((-1), node0.getCharno());
941:       assertFalse(node0.isCase());
942:       assertFalse(node0.hasMoreThanOneChild());
943:       assertFalse(node0.isWith());
944:       assertFalse(node0.isScript());
945:       assertFalse(node0.isCatch());
946:       assertFalse(node0.isInstanceOf());
947:       assertEquals((-1), node0.getLineno());
948:       assertTrue(node0.isString());
949:       assertFalse(node0.isTry());
950:       assertFalse(node0.isBlock());
951:       assertFalse(node0.isRegExp());
952:       assertFalse(node0.isHook());
953:       assertFalse(node0.isThis());
954:       assertFalse(node0.isEmpty());
955:       assertFalse(node0.isFor());
956:       assertFalse(node0.isDelProp());
957:       assertFalse(node0.isGetterDef());
958:       assertFalse(node0.isIf());
959:       assertFalse(node0.isArrayLit());
960:       assertFalse(node0.isVoid());
961:       assertFalse(node0.isIn());
962:       assertFalse(node0.isNE());
963:       assertFalse(node0.isDebugger());
964:       assertFalse(node0.isTrue());
965:       assertEquals(40, node0.getType());
966:       assertFalse(node0.isDefaultCase());
967:       assertFalse(node0.isInc());
968:       assertFalse(node0.isFunction());
969:       assertEquals(0, node0.getChildCount());
970:       assertFalse(node0.isName());
971:       assertFalse(node0.isFalse());
972:       assertFalse(node0.isCall());
973:       assertFalse(node0.isBreak());
974:       assertFalse(node0.isGetProp());
975:       assertFalse(node0.isAdd());
976:       assertFalse(node0.isNull());
977:       assertFalse(node0.isNot());
978:       assertFalse(node0.isObjectLit());
979:       assertFalse(node0.isWhile());
980:       assertFalse(node0.isExprResult());
981:       assertFalse(node0.isTypeOf());
982:       assertFalse(node0.isComma());
983:       assertFalse(node0.isDec());
984:       assertFalse(node0.hasChildren());
985:       assertFalse(node0.isReturn());
986:       assertFalse(node2.isVar());
987:       assertFalse(node2.isCall());
988:       assertFalse(node2.isAdd());
989:       assertFalse(node2.isSetterDef());
990:       assertFalse(node2.isNew());
991:       assertFalse(node2.isBlock());
992:       assertTrue(node2.isIn());
993:       assertFalse(node2.isDo());
994:       assertFalse(node2.isWhile());
995:       assertFalse(node2.isCatch());
996:       assertEquals((-1), node2.getLineno());
997:       assertFalse(node2.isReturn());
998:       assertFalse(node2.isOr());
999:       assertFalse(node2.hasMoreThanOneChild());
1000:       assertFalse(node2.isNull());
1001:       assertFalse(node2.isTrue());
1002:       assertFalse(node2.isName());
1003:       assertFalse(node2.isVoid());
1004:       assertFalse(node2.isArrayLit());
1005:       assertFalse(node2.isEmpty());
1006:       assertFalse(node2.isGetterDef());
1007:       assertFalse(node2.isNumber());
1008:       assertFalse(node2.isScript());
1009:       assertFalse(node2.isRegExp());
1010:       assertFalse(node2.isFor());
1011:       assertFalse(node2.isTry());
1012:       assertFalse(node2.isDefaultCase());
1013:       assertFalse(node2.isAssignAdd());
1014:       assertFalse(node2.isLabel());
1015:       assertEquals(51, node2.getType());
1016:       assertEquals((-1), node2.getCharno());
1017:       assertFalse(node2.isLabelName());
1018:       assertFalse(node2.isStringKey());
1019:       assertFalse(node2.isParamList());
1020:       assertFalse(node2.isSwitch());
1021:       assertFalse(node2.isHook());
1022:       assertFalse(node2.isFalse());
1023:       assertFalse(node2.isComma());
1024:       assertFalse(node2.isInc());
1025:       assertFalse(node2.isGetProp());
1026:       assertFalse(node2.isThis());
1027:       assertFalse(node2.isCase());
1028:       assertFalse(node2.isThrow());
1029:       assertFalse(node2.isInstanceOf());
1030:       assertEquals(1, node2.getChildCount());
1031:       assertTrue(node2.hasChildren());
1032:       assertFalse(node2.isWith());
1033:       assertFalse(node2.isNE());
1034:       assertFalse(node2.isExprResult());
1035:       assertFalse(node2.isBreak());
1036:       assertFalse(node2.isDelProp());
1037:       assertFalse(node2.isIf());
1038:       assertFalse(node2.isCast());
1039:       assertFalse(node2.isGetElem());
1040:       assertFalse(node2.isAssign());
1041:       assertFalse(node2.isFunction());
1042:       assertFalse(node2.isTypeOf());
1043:       assertFalse(node2.isDec());
1044:       assertTrue(node2.hasOneChild());
1045:       assertFalse(node2.isNot());
1046:       assertFalse(node2.isObjectLit());
1047:       assertFalse(node2.isString());
1048:       assertFalse(node2.isContinue());
1049:       assertEquals((-1), node2.getSourcePosition());
1050:       assertFalse(node2.isDebugger());
1051:       assertFalse(node2.isAnd());
1052:       assertNotNull(node2);
1053:       
1054:       node1.addChildToBack(node2);
1055:       assertEquals(30, Node.VAR_ARGS_NAME);
1056:       assertEquals(49, Node.DIRECT_EVAL);
1057:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1058:       assertEquals(1, Node.DECR_FLAG);
1059:       assertEquals(12, Node.COLUMN_BITS);
1060:       assertEquals(54, Node.SLASH_V);
1061:       assertEquals(57, Node.LAST_PROP);
1062:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1063:       assertEquals(40, Node.ORIGINALNAME_PROP);
1064:       assertEquals(2, Node.POST_FLAG);
1065:       assertEquals(29, Node.JSDOC_INFO_PROP);
1066:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1067:       assertEquals(47, Node.IS_DISPATCHER);
1068:       assertEquals(37, Node.OPT_ARG_NAME);
1069:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1070:       assertEquals(48, Node.DIRECTIVES);
1071:       assertEquals(56, Node.CHANGE_TIME);
1072:       assertEquals(52, Node.LENGTH);
1073:       assertEquals(53, Node.INPUT_ID);
1074:       assertEquals(57, Node.REFLECTED_OBJECT);
1075:       assertEquals(8, Node.FLAG_NO_THROWS);
1076:       assertEquals(39, Node.EMPTY_BLOCK);
1077:       assertEquals(55, Node.INFERRED_FUNCTION);
1078:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1079:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1080:       assertEquals(36, Node.QUOTED_PROP);
1081:       assertEquals(43, Node.IS_CONSTANT_NAME);
1082:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1083:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1084:       assertEquals(4095, Node.COLUMN_MASK);
1085:       assertEquals(50, Node.FREE_CALL);
1086:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1087:       assertEquals(32, Node.INCRDECR_PROP);
1088:       assertEquals(46, Node.IS_NAMESPACE);
1089:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1090:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1091:       assertEquals(4095, Node.COLUMN_MASK);
1092:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1093:       assertEquals(55, Node.INFERRED_FUNCTION);
1094:       assertEquals(36, Node.QUOTED_PROP);
1095:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1096:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1097:       assertEquals(43, Node.IS_CONSTANT_NAME);
1098:       assertEquals(48, Node.DIRECTIVES);
1099:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1100:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1101:       assertEquals(50, Node.FREE_CALL);
1102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1103:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1104:       assertEquals(32, Node.INCRDECR_PROP);
1105:       assertEquals(1, Node.DECR_FLAG);
1106:       assertEquals(12, Node.COLUMN_BITS);
1107:       assertEquals(46, Node.IS_NAMESPACE);
1108:       assertEquals(30, Node.VAR_ARGS_NAME);
1109:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1110:       assertEquals(2, Node.POST_FLAG);
1111:       assertEquals(54, Node.SLASH_V);
1112:       assertEquals(56, Node.CHANGE_TIME);
1113:       assertEquals(49, Node.DIRECT_EVAL);
1114:       assertEquals(37, Node.OPT_ARG_NAME);
1115:       assertEquals(40, Node.ORIGINALNAME_PROP);
1116:       assertEquals(57, Node.REFLECTED_OBJECT);
1117:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1118:       assertEquals(52, Node.LENGTH);
1119:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1120:       assertEquals(8, Node.FLAG_NO_THROWS);
1121:       assertEquals(39, Node.EMPTY_BLOCK);
1122:       assertEquals(47, Node.IS_DISPATCHER);
1123:       assertEquals(57, Node.LAST_PROP);
1124:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1125:       assertEquals(29, Node.JSDOC_INFO_PROP);
1126:       assertEquals(53, Node.INPUT_ID);
1127:       assertEquals(55, Node.INFERRED_FUNCTION);
1128:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1129:       assertEquals(4095, Node.COLUMN_MASK);
1130:       assertEquals(8, Node.FLAG_NO_THROWS);
1131:       assertEquals(39, Node.EMPTY_BLOCK);
1132:       assertEquals(48, Node.DIRECTIVES);
1133:       assertEquals(43, Node.IS_CONSTANT_NAME);
1134:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1135:       assertEquals(50, Node.FREE_CALL);
1136:       assertEquals(36, Node.QUOTED_PROP);
1137:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1138:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1139:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1140:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1141:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1142:       assertEquals(12, Node.COLUMN_BITS);
1143:       assertEquals(49, Node.DIRECT_EVAL);
1144:       assertEquals(32, Node.INCRDECR_PROP);
1145:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1146:       assertEquals(1, Node.DECR_FLAG);
1147:       assertEquals(37, Node.OPT_ARG_NAME);
1148:       assertEquals(54, Node.SLASH_V);
1149:       assertEquals(56, Node.CHANGE_TIME);
1150:       assertEquals(52, Node.LENGTH);
1151:       assertEquals(46, Node.IS_NAMESPACE);
1152:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1153:       assertEquals(57, Node.REFLECTED_OBJECT);
1154:       assertEquals(40, Node.ORIGINALNAME_PROP);
1155:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1156:       assertEquals(29, Node.JSDOC_INFO_PROP);
1157:       assertEquals(53, Node.INPUT_ID);
1158:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1159:       assertEquals(2, Node.POST_FLAG);
1160:       assertEquals(57, Node.LAST_PROP);
1161:       assertEquals(30, Node.VAR_ARGS_NAME);
1162:       assertEquals(47, Node.IS_DISPATCHER);
1163:       assertFalse(node0.equals((Object)node1));
1164:       assertFalse(node0.equals((Object)node2));
1165:       assertFalse(node1.equals((Object)node0));
1166:       assertFalse(node1.equals((Object)node2));
1167:       assertFalse(node2.equals((Object)node1));
1168:       assertFalse(node2.equals((Object)node0));
1169:       assertFalse(node0.isAssign());
1170:       assertFalse(node0.isLabelName());
1171:       assertFalse(node0.isNumber());
1172:       assertFalse(node0.hasOneChild());
1173:       assertFalse(node0.isCast());
1174:       assertFalse(node0.isGetElem());
1175:       assertFalse(node0.isOr());
1176:       assertEquals((-1), node0.getSourcePosition());
1177:       assertFalse(node0.isDo());
1178:       assertFalse(node0.isAnd());
1179:       assertFalse(node0.isContinue());
1180:       assertFalse(node0.isNew());
1181:       assertFalse(node0.isLabel());
1182:       assertFalse(node0.isAssignAdd());
1183:       assertFalse(node0.isVar());
1184:       assertFalse(node0.isThrow());
1185:       assertFalse(node0.isStringKey());
1186:       assertFalse(node0.isSetterDef());
1187:       assertFalse(node0.isParamList());
1188:       assertFalse(node0.isSwitch());
1189:       assertEquals((-1), node0.getCharno());
1190:       assertFalse(node0.isCase());
1191:       assertFalse(node0.hasMoreThanOneChild());
1192:       assertFalse(node0.isWith());
1193:       assertFalse(node0.isScript());
1194:       assertFalse(node0.isCatch());
1195:       assertFalse(node0.isInstanceOf());
1196:       assertEquals((-1), node0.getLineno());
1197:       assertTrue(node0.isString());
1198:       assertFalse(node0.isTry());
1199:       assertFalse(node0.isBlock());
1200:       assertFalse(node0.isRegExp());
1201:       assertFalse(node0.isHook());
1202:       assertFalse(node0.isThis());
1203:       assertFalse(node0.isEmpty());
1204:       assertFalse(node0.isFor());
1205:       assertFalse(node0.isDelProp());
1206:       assertFalse(node0.isGetterDef());
1207:       assertFalse(node0.isIf());
1208:       assertFalse(node0.isArrayLit());
1209:       assertFalse(node0.isVoid());
1210:       assertFalse(node0.isIn());
1211:       assertFalse(node0.isNE());
1212:       assertFalse(node0.isDebugger());
1213:       assertFalse(node0.isTrue());
1214:       assertEquals(40, node0.getType());
1215:       assertFalse(node0.isDefaultCase());
1216:       assertFalse(node0.isInc());
1217:       assertFalse(node0.isFunction());
1218:       assertEquals(0, node0.getChildCount());
1219:       assertFalse(node0.isName());
1220:       assertFalse(node0.isFalse());
1221:       assertFalse(node0.isCall());
1222:       assertFalse(node0.isBreak());
1223:       assertFalse(node0.isGetProp());
1224:       assertFalse(node0.isAdd());
1225:       assertFalse(node0.isNull());
1226:       assertFalse(node0.isNot());
1227:       assertFalse(node0.isObjectLit());
1228:       assertFalse(node0.isWhile());
1229:       assertFalse(node0.isExprResult());
1230:       assertFalse(node0.isTypeOf());
1231:       assertFalse(node0.isComma());
1232:       assertFalse(node0.isDec());
1233:       assertFalse(node0.hasChildren());
1234:       assertFalse(node0.isReturn());
1235:       assertFalse(node1.isHook());
1236:       assertFalse(node1.isThrow());
1237:       assertFalse(node1.isSwitch());
1238:       assertEquals((-1), node1.getCharno());
1239:       assertFalse(node1.isCase());
1240:       assertFalse(node1.isGetProp());
1241:       assertFalse(node1.isInc());
1242:       assertFalse(node1.isString());
1243:       assertFalse(node1.isInstanceOf());
1244:       assertEquals(1, node1.getChildCount());
1245:       assertFalse(node1.isThis());
1246:       assertFalse(node1.isNE());
1247:       assertFalse(node1.isIf());
1248:       assertFalse(node1.isBreak());
1249:       assertFalse(node1.isDelProp());
1250:       assertFalse(node1.isComma());
1251:       assertTrue(node1.hasOneChild());
1252:       assertFalse(node1.isExprResult());
1253:       assertTrue(node1.hasChildren());
1254:       assertFalse(node1.isWith());
1255:       assertFalse(node1.isTry());
1256:       assertFalse(node1.isArrayLit());
1257:       assertFalse(node1.isVoid());
1258:       assertFalse(node1.isTrue());
1259:       assertFalse(node1.isFor());
1260:       assertFalse(node1.isDefaultCase());
1261:       assertFalse(node1.isNumber());
1262:       assertFalse(node1.isGetterDef());
1263:       assertFalse(node1.isScript());
1264:       assertFalse(node1.isEmpty());
1265:       assertEquals(51, node1.getType());
1266:       assertFalse(node1.isLabel());
1267:       assertFalse(node1.isAssignAdd());
1268:       assertFalse(node1.isParamList());
1269:       assertFalse(node1.isLabelName());
1270:       assertFalse(node1.isNew());
1271:       assertFalse(node1.isStringKey());
1272:       assertFalse(node1.isName());
1273:       assertFalse(node1.isBlock());
1274:       assertFalse(node1.isVar());
1275:       assertFalse(node1.isNull());
1276:       assertTrue(node1.isIn());
1277:       assertFalse(node1.isDo());
1278:       assertFalse(node1.isSetterDef());
1279:       assertFalse(node1.isAdd());
1280:       assertFalse(node1.isReturn());
1281:       assertFalse(node1.isOr());
1282:       assertEquals((-1), node1.getLineno());
1283:       assertFalse(node1.isWhile());
1284:       assertFalse(node1.isDec());
1285:       assertFalse(node1.isTypeOf());
1286:       assertFalse(node1.isRegExp());
1287:       assertFalse(node1.isAssign());
1288:       assertFalse(node1.isCall());
1289:       assertFalse(node1.isGetElem());
1290:       assertFalse(node1.isCatch());
1291:       assertFalse(node1.hasMoreThanOneChild());
1292:       assertFalse(node1.isNot());
1293:       assertFalse(node1.isDebugger());
1294:       assertEquals((-1), node1.getSourcePosition());
1295:       assertFalse(node1.isObjectLit());
1296:       assertFalse(node1.isAnd());
1297:       assertFalse(node1.isFalse());
1298:       assertFalse(node1.isFunction());
1299:       assertFalse(node1.isCast());
1300:       assertFalse(node1.isContinue());
1301:       assertFalse(node2.isVar());
1302:       assertFalse(node2.isCall());
1303:       assertFalse(node2.isAdd());
1304:       assertFalse(node2.isSetterDef());
1305:       assertFalse(node2.isNew());
1306:       assertFalse(node2.isBlock());
1307:       assertTrue(node2.isIn());
1308:       assertFalse(node2.isDo());
1309:       assertFalse(node2.isWhile());
1310:       assertFalse(node2.isCatch());
1311:       assertEquals((-1), node2.getLineno());
1312:       assertFalse(node2.isReturn());
1313:       assertFalse(node2.isOr());
1314:       assertFalse(node2.hasMoreThanOneChild());
1315:       assertFalse(node2.isNull());
1316:       assertFalse(node2.isTrue());
1317:       assertFalse(node2.isName());
1318:       assertFalse(node2.isVoid());
1319:       assertFalse(node2.isArrayLit());
1320:       assertFalse(node2.isEmpty());
1321:       assertFalse(node2.isGetterDef());
1322:       assertFalse(node2.isNumber());
1323:       assertFalse(node2.isScript());
1324:       assertFalse(node2.isRegExp());
1325:       assertFalse(node2.isFor());
1326:       assertFalse(node2.isTry());
1327:       assertFalse(node2.isDefaultCase());
1328:       assertFalse(node2.isAssignAdd());
1329:       assertFalse(node2.isLabel());
1330:       assertEquals(51, node2.getType());
1331:       assertEquals((-1), node2.getCharno());
1332:       assertFalse(node2.isLabelName());
1333:       assertFalse(node2.isStringKey());
1334:       assertFalse(node2.isParamList());
1335:       assertFalse(node2.isSwitch());
1336:       assertFalse(node2.isHook());
1337:       assertFalse(node2.isFalse());
1338:       assertFalse(node2.isComma());
1339:       assertFalse(node2.isInc());
1340:       assertFalse(node2.isGetProp());
1341:       assertFalse(node2.isThis());
1342:       assertFalse(node2.isCase());
1343:       assertFalse(node2.isThrow());
1344:       assertFalse(node2.isInstanceOf());
1345:       assertEquals(1, node2.getChildCount());
1346:       assertTrue(node2.hasChildren());
1347:       assertFalse(node2.isWith());
1348:       assertFalse(node2.isNE());
1349:       assertFalse(node2.isExprResult());
1350:       assertFalse(node2.isBreak());
1351:       assertFalse(node2.isDelProp());
1352:       assertFalse(node2.isIf());
1353:       assertFalse(node2.isCast());
1354:       assertFalse(node2.isGetElem());
1355:       assertFalse(node2.isAssign());
1356:       assertFalse(node2.isFunction());
1357:       assertFalse(node2.isTypeOf());
1358:       assertFalse(node2.isDec());
1359:       assertTrue(node2.hasOneChild());
1360:       assertFalse(node2.isNot());
1361:       assertFalse(node2.isObjectLit());
1362:       assertFalse(node2.isString());
1363:       assertFalse(node2.isContinue());
1364:       assertEquals((-1), node2.getSourcePosition());
1365:       assertFalse(node2.isDebugger());
1366:       assertFalse(node2.isAnd());
1367:       assertNotSame(node0, node1);
1368:       assertNotSame(node1, node0);
1369:       
1370:       Node node3 = node1.useSourceInfoFromForTree(node0);
1371:       assertEquals(30, Node.VAR_ARGS_NAME);
1372:       assertEquals(49, Node.DIRECT_EVAL);
1373:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1374:       assertEquals(1, Node.DECR_FLAG);
1375:       assertEquals(12, Node.COLUMN_BITS);
1376:       assertEquals(54, Node.SLASH_V);
1377:       assertEquals(57, Node.LAST_PROP);
1378:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1379:       assertEquals(40, Node.ORIGINALNAME_PROP);
1380:       assertEquals(2, Node.POST_FLAG);
1381:       assertEquals(29, Node.JSDOC_INFO_PROP);
1382:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1383:       assertEquals(47, Node.IS_DISPATCHER);
1384:       assertEquals(37, Node.OPT_ARG_NAME);
1385:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1386:       assertEquals(48, Node.DIRECTIVES);
1387:       assertEquals(56, Node.CHANGE_TIME);
1388:       assertEquals(52, Node.LENGTH);
1389:       assertEquals(53, Node.INPUT_ID);
1390:       assertEquals(57, Node.REFLECTED_OBJECT);
1391:       assertEquals(8, Node.FLAG_NO_THROWS);
1392:       assertEquals(39, Node.EMPTY_BLOCK);
1393:       assertEquals(55, Node.INFERRED_FUNCTION);
1394:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1395:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1396:       assertEquals(36, Node.QUOTED_PROP);
1397:       assertEquals(43, Node.IS_CONSTANT_NAME);
1398:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1399:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1400:       assertEquals(4095, Node.COLUMN_MASK);
1401:       assertEquals(50, Node.FREE_CALL);
1402:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1403:       assertEquals(32, Node.INCRDECR_PROP);
1404:       assertEquals(46, Node.IS_NAMESPACE);
1405:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1406:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1407:       assertEquals(52, Node.LENGTH);
1408:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1409:       assertEquals(54, Node.SLASH_V);
1410:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1411:       assertEquals(57, Node.LAST_PROP);
1412:       assertEquals(49, Node.DIRECT_EVAL);
1413:       assertEquals(40, Node.ORIGINALNAME_PROP);
1414:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1415:       assertEquals(12, Node.COLUMN_BITS);
1416:       assertEquals(30, Node.VAR_ARGS_NAME);
1417:       assertEquals(39, Node.EMPTY_BLOCK);
1418:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1419:       assertEquals(56, Node.CHANGE_TIME);
1420:       assertEquals(37, Node.OPT_ARG_NAME);
1421:       assertEquals(48, Node.DIRECTIVES);
1422:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1423:       assertEquals(55, Node.INFERRED_FUNCTION);
1424:       assertEquals(29, Node.JSDOC_INFO_PROP);
1425:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1426:       assertEquals(36, Node.QUOTED_PROP);
1427:       assertEquals(57, Node.REFLECTED_OBJECT);
1428:       assertEquals(8, Node.FLAG_NO_THROWS);
1429:       assertEquals(53, Node.INPUT_ID);
1430:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1431:       assertEquals(43, Node.IS_CONSTANT_NAME);
1432:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1433:       assertEquals(47, Node.IS_DISPATCHER);
1434:       assertEquals(4095, Node.COLUMN_MASK);
1435:       assertEquals(2, Node.POST_FLAG);
1436:       assertEquals(46, Node.IS_NAMESPACE);
1437:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1438:       assertEquals(32, Node.INCRDECR_PROP);
1439:       assertEquals(1, Node.DECR_FLAG);
1440:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1441:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1442:       assertEquals(50, Node.FREE_CALL);
1443:       assertEquals(4095, Node.COLUMN_MASK);
1444:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1445:       assertEquals(55, Node.INFERRED_FUNCTION);
1446:       assertEquals(36, Node.QUOTED_PROP);
1447:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1448:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1449:       assertEquals(43, Node.IS_CONSTANT_NAME);
1450:       assertEquals(48, Node.DIRECTIVES);
1451:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1452:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1453:       assertEquals(50, Node.FREE_CALL);
1454:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1455:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1456:       assertEquals(32, Node.INCRDECR_PROP);
1457:       assertEquals(1, Node.DECR_FLAG);
1458:       assertEquals(12, Node.COLUMN_BITS);
1459:       assertEquals(46, Node.IS_NAMESPACE);
1460:       assertEquals(30, Node.VAR_ARGS_NAME);
1461:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1462:       assertEquals(2, Node.POST_FLAG);
1463:       assertEquals(54, Node.SLASH_V);
1464:       assertEquals(56, Node.CHANGE_TIME);
1465:       assertEquals(49, Node.DIRECT_EVAL);
1466:       assertEquals(37, Node.OPT_ARG_NAME);
1467:       assertEquals(40, Node.ORIGINALNAME_PROP);
1468:       assertEquals(57, Node.REFLECTED_OBJECT);
1469:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1470:       assertEquals(52, Node.LENGTH);
1471:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1472:       assertEquals(8, Node.FLAG_NO_THROWS);
1473:       assertEquals(39, Node.EMPTY_BLOCK);
1474:       assertEquals(47, Node.IS_DISPATCHER);
1475:       assertEquals(57, Node.LAST_PROP);
1476:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1477:       assertEquals(29, Node.JSDOC_INFO_PROP);
1478:       assertEquals(53, Node.INPUT_ID);
1479:       assertFalse(node0.equals((Object)node1));
1480:       assertFalse(node0.equals((Object)node2));
1481:       assertFalse(node3.equals((Object)node0));
1482:       assertFalse(node3.equals((Object)node2));
1483:       assertFalse(node1.equals((Object)node0));
1484:       assertFalse(node1.equals((Object)node2));
1485:       assertFalse(node0.isAssign());
1486:       assertFalse(node0.isLabelName());
1487:       assertFalse(node0.isNumber());
1488:       assertFalse(node0.hasOneChild());
1489:       assertFalse(node0.isCast());
1490:       assertFalse(node0.isGetElem());
1491:       assertFalse(node0.isOr());
1492:       assertEquals((-1), node0.getSourcePosition());
1493:       assertFalse(node0.isDo());
1494:       assertFalse(node0.isAnd());
1495:       assertFalse(node0.isContinue());
1496:       assertFalse(node0.isNew());
1497:       assertFalse(node0.isLabel());
1498:       assertFalse(node0.isAssignAdd());
1499:       assertFalse(node0.isVar());
1500:       assertFalse(node0.isThrow());
1501:       assertFalse(node0.isStringKey());
1502:       assertFalse(node0.isSetterDef());
1503:       assertFalse(node0.isParamList());
1504:       assertFalse(node0.isSwitch());
1505:       assertEquals((-1), node0.getCharno());
1506:       assertFalse(node0.isCase());
1507:       assertFalse(node0.hasMoreThanOneChild());
1508:       assertFalse(node0.isWith());
1509:       assertFalse(node0.isScript());
1510:       assertFalse(node0.isCatch());
1511:       assertFalse(node0.isInstanceOf());
1512:       assertEquals((-1), node0.getLineno());
1513:       assertTrue(node0.isString());
1514:       assertFalse(node0.isTry());
1515:       assertFalse(node0.isBlock());
1516:       assertFalse(node0.isRegExp());
1517:       assertFalse(node0.isHook());
1518:       assertFalse(node0.isThis());
1519:       assertFalse(node0.isEmpty());
1520:       assertFalse(node0.isFor());
1521:       assertFalse(node0.isDelProp());
1522:       assertFalse(node0.isGetterDef());
1523:       assertFalse(node0.isIf());
1524:       assertFalse(node0.isArrayLit());
1525:       assertFalse(node0.isVoid());
1526:       assertFalse(node0.isIn());
1527:       assertFalse(node0.isNE());
1528:       assertFalse(node0.isDebugger());
1529:       assertFalse(node0.isTrue());
1530:       assertEquals(40, node0.getType());
1531:       assertFalse(node0.isDefaultCase());
1532:       assertFalse(node0.isInc());
1533:       assertFalse(node0.isFunction());
1534:       assertEquals(0, node0.getChildCount());
1535:       assertFalse(node0.isName());
1536:       assertFalse(node0.isFalse());
1537:       assertFalse(node0.isCall());
1538:       assertFalse(node0.isBreak());
1539:       assertFalse(node0.isGetProp());
1540:       assertFalse(node0.isAdd());
1541:       assertFalse(node0.isNull());
1542:       assertFalse(node0.isNot());
1543:       assertFalse(node0.isObjectLit());
1544:       assertFalse(node0.isWhile());
1545:       assertFalse(node0.isExprResult());
1546:       assertFalse(node0.isTypeOf());
1547:       assertFalse(node0.isComma());
1548:       assertFalse(node0.isDec());
1549:       assertFalse(node0.hasChildren());
1550:       assertFalse(node0.isReturn());
1551:       assertEquals(51, node3.getType());
1552:       assertFalse(node3.isTypeOf());
1553:       assertEquals((-1), node3.getSourcePosition());
1554:       assertFalse(node3.isLabel());
1555:       assertFalse(node3.isDec());
1556:       assertFalse(node3.isOr());
1557:       assertEquals((-1), node3.getLineno());
1558:       assertFalse(node3.isNumber());
1559:       assertFalse(node3.isGetElem());
1560:       assertFalse(node3.isLabelName());
1561:       assertFalse(node3.isNew());
1562:       assertFalse(node3.isAdd());
1563:       assertFalse(node3.isCast());
1564:       assertFalse(node3.isContinue());
1565:       assertTrue(node3.isIn());
1566:       assertFalse(node3.isDo());
1567:       assertFalse(node3.isAssignAdd());
1568:       assertFalse(node3.isVar());
1569:       assertFalse(node3.isParamList());
1570:       assertFalse(node3.isSetterDef());
1571:       assertFalse(node3.isThis());
1572:       assertFalse(node3.isCatch());
1573:       assertFalse(node3.isInstanceOf());
1574:       assertFalse(node3.isStringKey());
1575:       assertEquals((-1), node3.getCharno());
1576:       assertFalse(node3.isRegExp());
1577:       assertFalse(node3.isTry());
1578:       assertFalse(node3.isWith());
1579:       assertFalse(node3.isScript());
1580:       assertFalse(node3.hasMoreThanOneChild());
1581:       assertFalse(node3.isCase());
1582:       assertEquals(1, node3.getChildCount());
1583:       assertFalse(node3.isHook());
1584:       assertFalse(node3.isFor());
1585:       assertFalse(node3.isBlock());
1586:       assertFalse(node3.isGetterDef());
1587:       assertFalse(node3.isEmpty());
1588:       assertTrue(node3.hasChildren());
1589:       assertFalse(node3.isArrayLit());
1590:       assertFalse(node3.isDelProp());
1591:       assertFalse(node3.isIf());
1592:       assertFalse(node3.isNE());
1593:       assertFalse(node3.isTrue());
1594:       assertFalse(node3.isInc());
1595:       assertFalse(node3.isFunction());
1596:       assertFalse(node3.isSwitch());
1597:       assertFalse(node3.isFalse());
1598:       assertFalse(node3.isDefaultCase());
1599:       assertFalse(node3.isThrow());
1600:       assertFalse(node3.isGetProp());
1601:       assertFalse(node3.isComma());
1602:       assertFalse(node3.isBreak());
1603:       assertFalse(node3.isCall());
1604:       assertFalse(node3.isObjectLit());
1605:       assertFalse(node3.isAnd());
1606:       assertFalse(node3.isName());
1607:       assertFalse(node3.isNot());
1608:       assertFalse(node3.isNull());
1609:       assertFalse(node3.isDebugger());
1610:       assertFalse(node3.isVoid());
1611:       assertFalse(node3.isExprResult());
1612:       assertFalse(node3.isString());
1613:       assertFalse(node3.isAssign());
1614:       assertFalse(node3.isWhile());
1615:       assertFalse(node3.isReturn());
1616:       assertTrue(node3.hasOneChild());
1617:       assertFalse(node1.isHook());
1618:       assertFalse(node1.isThrow());
1619:       assertFalse(node1.isSwitch());
1620:       assertEquals((-1), node1.getCharno());
1621:       assertFalse(node1.isCase());
1622:       assertFalse(node1.isGetProp());
1623:       assertFalse(node1.isInc());
1624:       assertFalse(node1.isString());
1625:       assertFalse(node1.isInstanceOf());
1626:       assertEquals(1, node1.getChildCount());
1627:       assertFalse(node1.isThis());
1628:       assertFalse(node1.isNE());
1629:       assertFalse(node1.isIf());
1630:       assertFalse(node1.isBreak());
1631:       assertFalse(node1.isDelProp());
1632:       assertFalse(node1.isComma());
1633:       assertTrue(node1.hasOneChild());
1634:       assertFalse(node1.isExprResult());
1635:       assertTrue(node1.hasChildren());
1636:       assertFalse(node1.isWith());
1637:       assertFalse(node1.isTry());
1638:       assertFalse(node1.isArrayLit());
1639:       assertFalse(node1.isVoid());
1640:       assertFalse(node1.isTrue());
1641:       assertFalse(node1.isFor());
1642:       assertFalse(node1.isDefaultCase());
1643:       assertFalse(node1.isNumber());
1644:       assertFalse(node1.isGetterDef());
1645:       assertFalse(node1.isScript());
1646:       assertFalse(node1.isEmpty());
1647:       assertEquals(51, node1.getType());
1648:       assertFalse(node1.isLabel());
1649:       assertFalse(node1.isAssignAdd());
1650:       assertFalse(node1.isParamList());
1651:       assertFalse(node1.isLabelName());
1652:       assertFalse(node1.isNew());
1653:       assertFalse(node1.isStringKey());
1654:       assertFalse(node1.isName());
1655:       assertFalse(node1.isBlock());
1656:       assertFalse(node1.isVar());
1657:       assertFalse(node1.isNull());
1658:       assertTrue(node1.isIn());
1659:       assertFalse(node1.isDo());
1660:       assertFalse(node1.isSetterDef());
1661:       assertFalse(node1.isAdd());
1662:       assertFalse(node1.isReturn());
1663:       assertFalse(node1.isOr());
1664:       assertEquals((-1), node1.getLineno());
1665:       assertFalse(node1.isWhile());
1666:       assertFalse(node1.isDec());
1667:       assertFalse(node1.isTypeOf());
1668:       assertFalse(node1.isRegExp());
1669:       assertFalse(node1.isAssign());
1670:       assertFalse(node1.isCall());
1671:       assertFalse(node1.isGetElem());
1672:       assertFalse(node1.isCatch());
1673:       assertFalse(node1.hasMoreThanOneChild());
1674:       assertFalse(node1.isNot());
1675:       assertFalse(node1.isDebugger());
1676:       assertEquals((-1), node1.getSourcePosition());
1677:       assertFalse(node1.isObjectLit());
1678:       assertFalse(node1.isAnd());
1679:       assertFalse(node1.isFalse());
1680:       assertFalse(node1.isFunction());
1681:       assertFalse(node1.isCast());
1682:       assertFalse(node1.isContinue());
1683:       assertNotNull(node3);
1684:       assertNotSame(node0, node1);
1685:       assertNotSame(node0, node3);
1686:       assertSame(node3, node1);
1687:       assertNotSame(node3, node0);
1688:       assertSame(node1, node3);
1689:       assertNotSame(node1, node0);
1690:       
1691:       Node node4 = node0.getNext();
1692:       assertEquals(30, Node.VAR_ARGS_NAME);
1693:       assertEquals(49, Node.DIRECT_EVAL);
1694:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1695:       assertEquals(1, Node.DECR_FLAG);
1696:       assertEquals(12, Node.COLUMN_BITS);
1697:       assertEquals(54, Node.SLASH_V);
1698:       assertEquals(57, Node.LAST_PROP);
1699:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1700:       assertEquals(40, Node.ORIGINALNAME_PROP);
1701:       assertEquals(2, Node.POST_FLAG);
1702:       assertEquals(29, Node.JSDOC_INFO_PROP);
1703:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1704:       assertEquals(47, Node.IS_DISPATCHER);
1705:       assertEquals(37, Node.OPT_ARG_NAME);
1706:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1707:       assertEquals(48, Node.DIRECTIVES);
1708:       assertEquals(56, Node.CHANGE_TIME);
1709:       assertEquals(52, Node.LENGTH);
1710:       assertEquals(53, Node.INPUT_ID);
1711:       assertEquals(57, Node.REFLECTED_OBJECT);
1712:       assertEquals(8, Node.FLAG_NO_THROWS);
1713:       assertEquals(39, Node.EMPTY_BLOCK);
1714:       assertEquals(55, Node.INFERRED_FUNCTION);
1715:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1716:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1717:       assertEquals(36, Node.QUOTED_PROP);
1718:       assertEquals(43, Node.IS_CONSTANT_NAME);
1719:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1720:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1721:       assertEquals(4095, Node.COLUMN_MASK);
1722:       assertEquals(50, Node.FREE_CALL);
1723:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1724:       assertEquals(32, Node.INCRDECR_PROP);
1725:       assertEquals(46, Node.IS_NAMESPACE);
1726:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1727:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1728:       assertFalse(node0.equals((Object)node1));
1729:       assertFalse(node0.equals((Object)node3));
1730:       assertFalse(node0.equals((Object)node2));
1731:       assertFalse(node0.isAssign());
1732:       assertFalse(node0.isLabelName());
1733:       assertFalse(node0.isNumber());
1734:       assertFalse(node0.hasOneChild());
1735:       assertFalse(node0.isCast());
1736:       assertFalse(node0.isGetElem());
1737:       assertFalse(node0.isOr());
1738:       assertEquals((-1), node0.getSourcePosition());
1739:       assertFalse(node0.isDo());
1740:       assertFalse(node0.isAnd());
1741:       assertFalse(node0.isContinue());
1742:       assertFalse(node0.isNew());
1743:       assertFalse(node0.isLabel());
1744:       assertFalse(node0.isAssignAdd());
1745:       assertFalse(node0.isVar());
1746:       assertFalse(node0.isThrow());
1747:       assertFalse(node0.isStringKey());
1748:       assertFalse(node0.isSetterDef());
1749:       assertFalse(node0.isParamList());
1750:       assertFalse(node0.isSwitch());
1751:       assertEquals((-1), node0.getCharno());
1752:       assertFalse(node0.isCase());
1753:       assertFalse(node0.hasMoreThanOneChild());
1754:       assertFalse(node0.isWith());
1755:       assertFalse(node0.isScript());
1756:       assertFalse(node0.isCatch());
1757:       assertFalse(node0.isInstanceOf());
1758:       assertEquals((-1), node0.getLineno());
1759:       assertTrue(node0.isString());
1760:       assertFalse(node0.isTry());
1761:       assertFalse(node0.isBlock());
1762:       assertFalse(node0.isRegExp());
1763:       assertFalse(node0.isHook());
1764:       assertFalse(node0.isThis());
1765:       assertFalse(node0.isEmpty());
1766:       assertFalse(node0.isFor());
1767:       assertFalse(node0.isDelProp());
1768:       assertFalse(node0.isGetterDef());
1769:       assertFalse(node0.isIf());
1770:       assertFalse(node0.isArrayLit());
1771:       assertFalse(node0.isVoid());
1772:       assertFalse(node0.isIn());
1773:       assertFalse(node0.isNE());
1774:       assertFalse(node0.isDebugger());
1775:       assertFalse(node0.isTrue());
1776:       assertEquals(40, node0.getType());
1777:       assertFalse(node0.isDefaultCase());
1778:       assertFalse(node0.isInc());
1779:       assertFalse(node0.isFunction());
1780:       assertEquals(0, node0.getChildCount());
1781:       assertFalse(node0.isName());
1782:       assertFalse(node0.isFalse());
1783:       assertFalse(node0.isCall());
1784:       assertFalse(node0.isBreak());
1785:       assertFalse(node0.isGetProp());
1786:       assertFalse(node0.isAdd());
1787:       assertFalse(node0.isNull());
1788:       assertFalse(node0.isNot());
1789:       assertFalse(node0.isObjectLit());
1790:       assertFalse(node0.isWhile());
1791:       assertFalse(node0.isExprResult());
1792:       assertFalse(node0.isTypeOf());
1793:       assertFalse(node0.isComma());
1794:       assertFalse(node0.isDec());
1795:       assertFalse(node0.hasChildren());
1796:       assertFalse(node0.isReturn());
1797:       assertNull(node4);
1798:       assertNotSame(node0, node1);
1799:       assertNotSame(node0, node3);
1800:   }
1801: }
RegularFileObject[/tmp/EvoSuite_60_1628256120913/com/google/javascript/rhino/Node_60_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:22:01 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_60_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_60_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.common.collect.Iterables",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_60_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.Token",
267:       "com.google.common.base.Preconditions",
268:       "com.google.common.base.Objects",
269:       "com.google.javascript.rhino.SimpleErrorReporter",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.common.collect.Sets",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.Iterators$12",
347:       "com.google.common.collect.AbstractIndexedListIterator",
348:       "com.google.common.collect.Iterators$11",
349:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
350:       "com.google.javascript.rhino.InputId",
351:       "com.google.javascript.rhino.JSTypeExpression",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Platform",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
364:       "com.google.javascript.rhino.jstype.NamedType",
365:       "com.google.common.collect.AbstractMultimap$Values",
366:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
367:       "com.google.common.collect.AbstractMapBasedMultimap$1",
368:       "com.google.common.collect.Multimaps$Entries",
369:       "com.google.common.collect.AbstractMultimap$Entries",
370:       "com.google.common.collect.AbstractMapBasedMultimap$2",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
373:     );
374:   }
375: }

[MASTER] 13:22:01.351 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertNotNull(iterable0);

int int0 = node0.getLength();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertEquals(0, int0);

int int1 = node0.getSideEffectFlags();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertTrue(int1 == int0);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertEquals(0, int1);

int int2 = node0.getSourcePosition();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(int2 == int1);
assertFalse(int2 == int0);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertEquals((-1), int2);

boolean boolean0 = node0.isFalse();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(boolean0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1237));
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1237), node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1245), node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals((-1245), node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);

node_SideEffectFlags0.clearSideEffectFlags();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1233), node_SideEffectFlags0.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);

Node node1 = Node.newString(51, "", (-2881), 38);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isEmpty());
assertEquals(51, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertTrue(node1.isIn());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertNotNull(node1);
assertNotSame(node1, node0);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertNotNull(node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setAllFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);

node_SideEffectFlags0.clearSideEffectFlags();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags0.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setAllFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertNotNull(node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);

Node node2 = new Node(51, node0, node0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertTrue(node2.isIn());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isCatch());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertEquals(51, node2.getType());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isThis());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isInstanceOf());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isWith());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isFunction());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertTrue(node2.hasOneChild());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isString());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertNotNull(node2);

node1.addChildToBack(node2);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isInstanceOf());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isComma());
assertTrue(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertTrue(node1.hasChildren());
assertFalse(node1.isWith());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isEmpty());
assertEquals(51, node1.getType());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertTrue(node1.isIn());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertTrue(node2.isIn());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isCatch());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertEquals(51, node2.getType());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isThis());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isInstanceOf());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isWith());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isFunction());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertTrue(node2.hasOneChild());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isString());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertNotSame(node0, node1);
assertNotSame(node1, node0);

Node node3 = node1.useSourceInfoFromForTree(node0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertEquals(51, node3.getType());
assertFalse(node3.isTypeOf());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isLabel());
assertFalse(node3.isDec());
assertFalse(node3.isOr());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isNumber());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertTrue(node3.isIn());
assertFalse(node3.isDo());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertFalse(node3.isSetterDef());
assertFalse(node3.isThis());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isStringKey());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isRegExp());
assertFalse(node3.isTry());
assertFalse(node3.isWith());
assertFalse(node3.isScript());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCase());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isHook());
assertFalse(node3.isFor());
assertFalse(node3.isBlock());
assertFalse(node3.isGetterDef());
assertFalse(node3.isEmpty());
assertTrue(node3.hasChildren());
assertFalse(node3.isArrayLit());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isTrue());
assertFalse(node3.isInc());
assertFalse(node3.isFunction());
assertFalse(node3.isSwitch());
assertFalse(node3.isFalse());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isThrow());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isBreak());
assertFalse(node3.isCall());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isName());
assertFalse(node3.isNot());
assertFalse(node3.isNull());
assertFalse(node3.isDebugger());
assertFalse(node3.isVoid());
assertFalse(node3.isExprResult());
assertFalse(node3.isString());
assertFalse(node3.isAssign());
assertFalse(node3.isWhile());
assertFalse(node3.isReturn());
assertTrue(node3.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isInstanceOf());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isComma());
assertTrue(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertTrue(node1.hasChildren());
assertFalse(node1.isWith());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isEmpty());
assertEquals(51, node1.getType());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertTrue(node1.isIn());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertNotNull(node3);
assertNotSame(node0, node1);
assertNotSame(node0, node3);
assertSame(node3, node1);
assertNotSame(node3, node0);
assertSame(node1, node3);
assertNotSame(node1, node0);

Node node4 = node0.getNext();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertNull(node4);
assertNotSame(node0, node1);
assertNotSame(node0, node3);


[MASTER] 13:22:06.933 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_90_1628256126526/com/google/javascript/rhino/Node_90_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_90_1628256126526/com/google/javascript/rhino/Node_90_tmp__ESTest_scaffolding.java]]
[MASTER] 13:22:06.933 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:22:06.933 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:22:06.935 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 655
[MASTER] 13:22:06.937 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_90_1628256126526/com/google/javascript/rhino/Node_90_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:22:06 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.util.ArrayList;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_90_tmp__ESTest extends Node_90_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node[] nodeArray0 = new Node[0];
23:       Node node0 = new Node(117, nodeArray0, 1148, 115);
24:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
25:       assertEquals(4095, Node.COLUMN_MASK);
26:       assertEquals(55, Node.INFERRED_FUNCTION);
27:       assertEquals(36, Node.QUOTED_PROP);
28:       assertEquals(8, Node.FLAG_NO_THROWS);
29:       assertEquals(39, Node.EMPTY_BLOCK);
30:       assertEquals(53, Node.INPUT_ID);
31:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
32:       assertEquals(40, Node.ORIGINALNAME_PROP);
33:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
34:       assertEquals(47, Node.IS_DISPATCHER);
35:       assertEquals(50, Node.FREE_CALL);
36:       assertEquals(2, Node.POST_FLAG);
37:       assertEquals(54, Node.SLASH_V);
38:       assertEquals(43, Node.IS_CONSTANT_NAME);
39:       assertEquals(12, Node.COLUMN_BITS);
40:       assertEquals(46, Node.IS_NAMESPACE);
41:       assertEquals(51, Node.STATIC_SOURCE_FILE);
42:       assertEquals(30, Node.VAR_ARGS_NAME);
43:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
44:       assertEquals(32, Node.INCRDECR_PROP);
45:       assertEquals(15, Node.NO_SIDE_EFFECTS);
46:       assertEquals(57, Node.LAST_PROP);
47:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
48:       assertEquals(1, Node.DECR_FLAG);
49:       assertEquals(29, Node.JSDOC_INFO_PROP);
50:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
51:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
52:       assertEquals(52, Node.LENGTH);
53:       assertEquals(57, Node.REFLECTED_OBJECT);
54:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
55:       assertEquals(37, Node.OPT_ARG_NAME);
56:       assertEquals(56, Node.CHANGE_TIME);
57:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
58:       assertEquals(49, Node.DIRECT_EVAL);
59:       assertEquals(48, Node.DIRECTIVES);
60:       assertEquals(0, nodeArray0.length);
61:       assertFalse(node0.isHook());
62:       assertEquals(115, node0.getCharno());
63:       assertFalse(node0.isThrow());
64:       assertEquals(4702323, node0.getSourcePosition());
65:       assertTrue(node0.isContinue());
66:       assertFalse(node0.isSwitch());
67:       assertFalse(node0.isThis());
68:       assertFalse(node0.isBreak());
69:       assertFalse(node0.isComma());
70:       assertFalse(node0.isFalse());
71:       assertFalse(node0.isInstanceOf());
72:       assertFalse(node0.isObjectLit());
73:       assertFalse(node0.isCase());
74:       assertFalse(node0.isAnd());
75:       assertFalse(node0.isScript());
76:       assertFalse(node0.isGetterDef());
77:       assertFalse(node0.isGetProp());
78:       assertFalse(node0.isNot());
79:       assertFalse(node0.isString());
80:       assertFalse(node0.isArrayLit());
81:       assertFalse(node0.isLabelName());
82:       assertFalse(node0.isExprResult());
83:       assertFalse(node0.isTypeOf());
84:       assertFalse(node0.isDelProp());
85:       assertFalse(node0.isVoid());
86:       assertFalse(node0.hasChildren());
87:       assertFalse(node0.isDec());
88:       assertFalse(node0.isAssign());
89:       assertFalse(node0.isGetElem());
90:       assertEquals(0, node0.getChildCount());
91:       assertFalse(node0.isDo());
92:       assertFalse(node0.isAssignAdd());
93:       assertFalse(node0.isLabel());
94:       assertFalse(node0.isDefaultCase());
95:       assertFalse(node0.isTrue());
96:       assertFalse(node0.isNull());
97:       assertFalse(node0.isNew());
98:       assertFalse(node0.isEmpty());
99:       assertFalse(node0.isAdd());
100:       assertFalse(node0.isOr());
101:       assertFalse(node0.isVar());
102:       assertFalse(node0.isCall());
103:       assertFalse(node0.isName());
104:       assertFalse(node0.isBlock());
105:       assertFalse(node0.isStringKey());
106:       assertFalse(node0.hasMoreThanOneChild());
107:       assertFalse(node0.isReturn());
108:       assertFalse(node0.isWhile());
109:       assertEquals(1148, node0.getLineno());
110:       assertFalse(node0.isParamList());
111:       assertFalse(node0.isNumber());
112:       assertFalse(node0.isDebugger());
113:       assertEquals(117, node0.getType());
114:       assertFalse(node0.isCast());
115:       assertFalse(node0.hasOneChild());
116:       assertFalse(node0.isTry());
117:       assertFalse(node0.isFor());
118:       assertFalse(node0.isIf());
119:       assertFalse(node0.isFunction());
120:       assertFalse(node0.isRegExp());
121:       assertFalse(node0.isWith());
122:       assertFalse(node0.isCatch());
123:       assertFalse(node0.isNE());
124:       assertFalse(node0.isInc());
125:       assertFalse(node0.isSetterDef());
126:       assertFalse(node0.isIn());
127:       
128:       int int0 = node0.getSourceOffset();
129:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
130:       assertEquals(4095, Node.COLUMN_MASK);
131:       assertEquals(55, Node.INFERRED_FUNCTION);
132:       assertEquals(36, Node.QUOTED_PROP);
133:       assertEquals(8, Node.FLAG_NO_THROWS);
134:       assertEquals(39, Node.EMPTY_BLOCK);
135:       assertEquals(53, Node.INPUT_ID);
136:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
137:       assertEquals(40, Node.ORIGINALNAME_PROP);
138:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
139:       assertEquals(47, Node.IS_DISPATCHER);
140:       assertEquals(50, Node.FREE_CALL);
141:       assertEquals(2, Node.POST_FLAG);
142:       assertEquals(54, Node.SLASH_V);
143:       assertEquals(43, Node.IS_CONSTANT_NAME);
144:       assertEquals(12, Node.COLUMN_BITS);
145:       assertEquals(46, Node.IS_NAMESPACE);
146:       assertEquals(51, Node.STATIC_SOURCE_FILE);
147:       assertEquals(30, Node.VAR_ARGS_NAME);
148:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
149:       assertEquals(32, Node.INCRDECR_PROP);
150:       assertEquals(15, Node.NO_SIDE_EFFECTS);
151:       assertEquals(57, Node.LAST_PROP);
152:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
153:       assertEquals(1, Node.DECR_FLAG);
154:       assertEquals(29, Node.JSDOC_INFO_PROP);
155:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
156:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
157:       assertEquals(52, Node.LENGTH);
158:       assertEquals(57, Node.REFLECTED_OBJECT);
159:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
160:       assertEquals(37, Node.OPT_ARG_NAME);
161:       assertEquals(56, Node.CHANGE_TIME);
162:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
163:       assertEquals(49, Node.DIRECT_EVAL);
164:       assertEquals(48, Node.DIRECTIVES);
165:       assertEquals(0, nodeArray0.length);
166:       assertFalse(node0.isHook());
167:       assertEquals(115, node0.getCharno());
168:       assertFalse(node0.isThrow());
169:       assertEquals(4702323, node0.getSourcePosition());
170:       assertTrue(node0.isContinue());
171:       assertFalse(node0.isSwitch());
172:       assertFalse(node0.isThis());
173:       assertFalse(node0.isBreak());
174:       assertFalse(node0.isComma());
175:       assertFalse(node0.isFalse());
176:       assertFalse(node0.isInstanceOf());
177:       assertFalse(node0.isObjectLit());
178:       assertFalse(node0.isCase());
179:       assertFalse(node0.isAnd());
180:       assertFalse(node0.isScript());
181:       assertFalse(node0.isGetterDef());
182:       assertFalse(node0.isGetProp());
183:       assertFalse(node0.isNot());
184:       assertFalse(node0.isString());
185:       assertFalse(node0.isArrayLit());
186:       assertFalse(node0.isLabelName());
187:       assertFalse(node0.isExprResult());
188:       assertFalse(node0.isTypeOf());
189:       assertFalse(node0.isDelProp());
190:       assertFalse(node0.isVoid());
191:       assertFalse(node0.hasChildren());
192:       assertFalse(node0.isDec());
193:       assertFalse(node0.isAssign());
194:       assertFalse(node0.isGetElem());
195:       assertEquals(0, node0.getChildCount());
196:       assertFalse(node0.isDo());
197:       assertFalse(node0.isAssignAdd());
198:       assertFalse(node0.isLabel());
199:       assertFalse(node0.isDefaultCase());
200:       assertFalse(node0.isTrue());
201:       assertFalse(node0.isNull());
202:       assertFalse(node0.isNew());
203:       assertFalse(node0.isEmpty());
204:       assertFalse(node0.isAdd());
205:       assertFalse(node0.isOr());
206:       assertFalse(node0.isVar());
207:       assertFalse(node0.isCall());
208:       assertFalse(node0.isName());
209:       assertFalse(node0.isBlock());
210:       assertFalse(node0.isStringKey());
211:       assertFalse(node0.hasMoreThanOneChild());
212:       assertFalse(node0.isReturn());
213:       assertFalse(node0.isWhile());
214:       assertEquals(1148, node0.getLineno());
215:       assertFalse(node0.isParamList());
216:       assertFalse(node0.isNumber());
217:       assertFalse(node0.isDebugger());
218:       assertEquals(117, node0.getType());
219:       assertFalse(node0.isCast());
220:       assertFalse(node0.hasOneChild());
221:       assertFalse(node0.isTry());
222:       assertFalse(node0.isFor());
223:       assertFalse(node0.isIf());
224:       assertFalse(node0.isFunction());
225:       assertFalse(node0.isRegExp());
226:       assertFalse(node0.isWith());
227:       assertFalse(node0.isCatch());
228:       assertFalse(node0.isNE());
229:       assertFalse(node0.isInc());
230:       assertFalse(node0.isSetterDef());
231:       assertFalse(node0.isIn());
232:       
233:       boolean boolean0 = node0.hasChildren();
234:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
235:       assertEquals(4095, Node.COLUMN_MASK);
236:       assertEquals(55, Node.INFERRED_FUNCTION);
237:       assertEquals(36, Node.QUOTED_PROP);
238:       assertEquals(8, Node.FLAG_NO_THROWS);
239:       assertEquals(39, Node.EMPTY_BLOCK);
240:       assertEquals(53, Node.INPUT_ID);
241:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
242:       assertEquals(40, Node.ORIGINALNAME_PROP);
243:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
244:       assertEquals(47, Node.IS_DISPATCHER);
245:       assertEquals(50, Node.FREE_CALL);
246:       assertEquals(2, Node.POST_FLAG);
247:       assertEquals(54, Node.SLASH_V);
248:       assertEquals(43, Node.IS_CONSTANT_NAME);
249:       assertEquals(12, Node.COLUMN_BITS);
250:       assertEquals(46, Node.IS_NAMESPACE);
251:       assertEquals(51, Node.STATIC_SOURCE_FILE);
252:       assertEquals(30, Node.VAR_ARGS_NAME);
253:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
254:       assertEquals(32, Node.INCRDECR_PROP);
255:       assertEquals(15, Node.NO_SIDE_EFFECTS);
256:       assertEquals(57, Node.LAST_PROP);
257:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
258:       assertEquals(1, Node.DECR_FLAG);
259:       assertEquals(29, Node.JSDOC_INFO_PROP);
260:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
261:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
262:       assertEquals(52, Node.LENGTH);
263:       assertEquals(57, Node.REFLECTED_OBJECT);
264:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
265:       assertEquals(37, Node.OPT_ARG_NAME);
266:       assertEquals(56, Node.CHANGE_TIME);
267:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
268:       assertEquals(49, Node.DIRECT_EVAL);
269:       assertEquals(48, Node.DIRECTIVES);
270:       assertEquals(0, nodeArray0.length);
271:       assertFalse(node0.isHook());
272:       assertEquals(115, node0.getCharno());
273:       assertFalse(node0.isThrow());
274:       assertEquals(4702323, node0.getSourcePosition());
275:       assertTrue(node0.isContinue());
276:       assertFalse(node0.isSwitch());
277:       assertFalse(node0.isThis());
278:       assertFalse(node0.isBreak());
279:       assertFalse(node0.isComma());
280:       assertFalse(node0.isFalse());
281:       assertFalse(node0.isInstanceOf());
282:       assertFalse(node0.isObjectLit());
283:       assertFalse(node0.isCase());
284:       assertFalse(node0.isAnd());
285:       assertFalse(node0.isScript());
286:       assertFalse(node0.isGetterDef());
287:       assertFalse(node0.isGetProp());
288:       assertFalse(node0.isNot());
289:       assertFalse(node0.isString());
290:       assertFalse(node0.isArrayLit());
291:       assertFalse(node0.isLabelName());
292:       assertFalse(node0.isExprResult());
293:       assertFalse(node0.isTypeOf());
294:       assertFalse(node0.isDelProp());
295:       assertFalse(node0.isVoid());
296:       assertFalse(node0.hasChildren());
297:       assertFalse(node0.isDec());
298:       assertFalse(node0.isAssign());
299:       assertFalse(node0.isGetElem());
300:       assertEquals(0, node0.getChildCount());
301:       assertFalse(node0.isDo());
302:       assertFalse(node0.isAssignAdd());
303:       assertFalse(node0.isLabel());
304:       assertFalse(node0.isDefaultCase());
305:       assertFalse(node0.isTrue());
306:       assertFalse(node0.isNull());
307:       assertFalse(node0.isNew());
308:       assertFalse(node0.isEmpty());
309:       assertFalse(node0.isAdd());
310:       assertFalse(node0.isOr());
311:       assertFalse(node0.isVar());
312:       assertFalse(node0.isCall());
313:       assertFalse(node0.isName());
314:       assertFalse(node0.isBlock());
315:       assertFalse(node0.isStringKey());
316:       assertFalse(node0.hasMoreThanOneChild());
317:       assertFalse(node0.isReturn());
318:       assertFalse(node0.isWhile());
319:       assertEquals(1148, node0.getLineno());
320:       assertFalse(node0.isParamList());
321:       assertFalse(node0.isNumber());
322:       assertFalse(node0.isDebugger());
323:       assertEquals(117, node0.getType());
324:       assertFalse(node0.isCast());
325:       assertFalse(node0.hasOneChild());
326:       assertFalse(node0.isTry());
327:       assertFalse(node0.isFor());
328:       assertFalse(node0.isIf());
329:       assertFalse(node0.isFunction());
330:       assertFalse(node0.isRegExp());
331:       assertFalse(node0.isWith());
332:       assertFalse(node0.isCatch());
333:       assertFalse(node0.isNE());
334:       assertFalse(node0.isInc());
335:       assertFalse(node0.isSetterDef());
336:       assertFalse(node0.isIn());
337:       
338:       int int1 = node0.getCharno();
339:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
340:       assertEquals(4095, Node.COLUMN_MASK);
341:       assertEquals(55, Node.INFERRED_FUNCTION);
342:       assertEquals(36, Node.QUOTED_PROP);
343:       assertEquals(8, Node.FLAG_NO_THROWS);
344:       assertEquals(39, Node.EMPTY_BLOCK);
345:       assertEquals(53, Node.INPUT_ID);
346:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
347:       assertEquals(40, Node.ORIGINALNAME_PROP);
348:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
349:       assertEquals(47, Node.IS_DISPATCHER);
350:       assertEquals(50, Node.FREE_CALL);
351:       assertEquals(2, Node.POST_FLAG);
352:       assertEquals(54, Node.SLASH_V);
353:       assertEquals(43, Node.IS_CONSTANT_NAME);
354:       assertEquals(12, Node.COLUMN_BITS);
355:       assertEquals(46, Node.IS_NAMESPACE);
356:       assertEquals(51, Node.STATIC_SOURCE_FILE);
357:       assertEquals(30, Node.VAR_ARGS_NAME);
358:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
359:       assertEquals(32, Node.INCRDECR_PROP);
360:       assertEquals(15, Node.NO_SIDE_EFFECTS);
361:       assertEquals(57, Node.LAST_PROP);
362:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
363:       assertEquals(1, Node.DECR_FLAG);
364:       assertEquals(29, Node.JSDOC_INFO_PROP);
365:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
366:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
367:       assertEquals(52, Node.LENGTH);
368:       assertEquals(57, Node.REFLECTED_OBJECT);
369:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
370:       assertEquals(37, Node.OPT_ARG_NAME);
371:       assertEquals(56, Node.CHANGE_TIME);
372:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
373:       assertEquals(49, Node.DIRECT_EVAL);
374:       assertEquals(48, Node.DIRECTIVES);
375:       assertFalse(int1 == int0);
376:       assertEquals(0, nodeArray0.length);
377:       assertFalse(node0.isHook());
378:       assertEquals(115, node0.getCharno());
379:       assertFalse(node0.isThrow());
380:       assertEquals(4702323, node0.getSourcePosition());
381:       assertTrue(node0.isContinue());
382:       assertFalse(node0.isSwitch());
383:       assertFalse(node0.isThis());
384:       assertFalse(node0.isBreak());
385:       assertFalse(node0.isComma());
386:       assertFalse(node0.isFalse());
387:       assertFalse(node0.isInstanceOf());
388:       assertFalse(node0.isObjectLit());
389:       assertFalse(node0.isCase());
390:       assertFalse(node0.isAnd());
391:       assertFalse(node0.isScript());
392:       assertFalse(node0.isGetterDef());
393:       assertFalse(node0.isGetProp());
394:       assertFalse(node0.isNot());
395:       assertFalse(node0.isString());
396:       assertFalse(node0.isArrayLit());
397:       assertFalse(node0.isLabelName());
398:       assertFalse(node0.isExprResult());
399:       assertFalse(node0.isTypeOf());
400:       assertFalse(node0.isDelProp());
401:       assertFalse(node0.isVoid());
402:       assertFalse(node0.hasChildren());
403:       assertFalse(node0.isDec());
404:       assertFalse(node0.isAssign());
405:       assertFalse(node0.isGetElem());
406:       assertEquals(0, node0.getChildCount());
407:       assertFalse(node0.isDo());
408:       assertFalse(node0.isAssignAdd());
409:       assertFalse(node0.isLabel());
410:       assertFalse(node0.isDefaultCase());
411:       assertFalse(node0.isTrue());
412:       assertFalse(node0.isNull());
413:       assertFalse(node0.isNew());
414:       assertFalse(node0.isEmpty());
415:       assertFalse(node0.isAdd());
416:       assertFalse(node0.isOr());
417:       assertFalse(node0.isVar());
418:       assertFalse(node0.isCall());
419:       assertFalse(node0.isName());
420:       assertFalse(node0.isBlock());
421:       assertFalse(node0.isStringKey());
422:       assertFalse(node0.hasMoreThanOneChild());
423:       assertFalse(node0.isReturn());
424:       assertFalse(node0.isWhile());
425:       assertEquals(1148, node0.getLineno());
426:       assertFalse(node0.isParamList());
427:       assertFalse(node0.isNumber());
428:       assertFalse(node0.isDebugger());
429:       assertEquals(117, node0.getType());
430:       assertFalse(node0.isCast());
431:       assertFalse(node0.hasOneChild());
432:       assertFalse(node0.isTry());
433:       assertFalse(node0.isFor());
434:       assertFalse(node0.isIf());
435:       assertFalse(node0.isFunction());
436:       assertFalse(node0.isRegExp());
437:       assertFalse(node0.isWith());
438:       assertFalse(node0.isCatch());
439:       assertFalse(node0.isNE());
440:       assertFalse(node0.isInc());
441:       assertFalse(node0.isSetterDef());
442:       assertFalse(node0.isIn());
443:       
444:       node0.putBooleanProp(117, false);
445:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
446:       assertEquals(4095, Node.COLUMN_MASK);
447:       assertEquals(55, Node.INFERRED_FUNCTION);
448:       assertEquals(36, Node.QUOTED_PROP);
449:       assertEquals(8, Node.FLAG_NO_THROWS);
450:       assertEquals(39, Node.EMPTY_BLOCK);
451:       assertEquals(53, Node.INPUT_ID);
452:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
453:       assertEquals(40, Node.ORIGINALNAME_PROP);
454:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
455:       assertEquals(47, Node.IS_DISPATCHER);
456:       assertEquals(50, Node.FREE_CALL);
457:       assertEquals(2, Node.POST_FLAG);
458:       assertEquals(54, Node.SLASH_V);
459:       assertEquals(43, Node.IS_CONSTANT_NAME);
460:       assertEquals(12, Node.COLUMN_BITS);
461:       assertEquals(46, Node.IS_NAMESPACE);
462:       assertEquals(51, Node.STATIC_SOURCE_FILE);
463:       assertEquals(30, Node.VAR_ARGS_NAME);
464:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
465:       assertEquals(32, Node.INCRDECR_PROP);
466:       assertEquals(15, Node.NO_SIDE_EFFECTS);
467:       assertEquals(57, Node.LAST_PROP);
468:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
469:       assertEquals(1, Node.DECR_FLAG);
470:       assertEquals(29, Node.JSDOC_INFO_PROP);
471:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
472:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
473:       assertEquals(52, Node.LENGTH);
474:       assertEquals(57, Node.REFLECTED_OBJECT);
475:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
476:       assertEquals(37, Node.OPT_ARG_NAME);
477:       assertEquals(56, Node.CHANGE_TIME);
478:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
479:       assertEquals(49, Node.DIRECT_EVAL);
480:       assertEquals(48, Node.DIRECTIVES);
481:       assertEquals(0, nodeArray0.length);
482:       assertFalse(node0.isHook());
483:       assertEquals(115, node0.getCharno());
484:       assertFalse(node0.isThrow());
485:       assertEquals(4702323, node0.getSourcePosition());
486:       assertTrue(node0.isContinue());
487:       assertFalse(node0.isSwitch());
488:       assertFalse(node0.isThis());
489:       assertFalse(node0.isBreak());
490:       assertFalse(node0.isComma());
491:       assertFalse(node0.isFalse());
492:       assertFalse(node0.isInstanceOf());
493:       assertFalse(node0.isObjectLit());
494:       assertFalse(node0.isCase());
495:       assertFalse(node0.isAnd());
496:       assertFalse(node0.isScript());
497:       assertFalse(node0.isGetterDef());
498:       assertFalse(node0.isGetProp());
499:       assertFalse(node0.isNot());
500:       assertFalse(node0.isString());
501:       assertFalse(node0.isArrayLit());
502:       assertFalse(node0.isLabelName());
503:       assertFalse(node0.isExprResult());
504:       assertFalse(node0.isTypeOf());
505:       assertFalse(node0.isDelProp());
506:       assertFalse(node0.isVoid());
507:       assertFalse(node0.hasChildren());
508:       assertFalse(node0.isDec());
509:       assertFalse(node0.isAssign());
510:       assertFalse(node0.isGetElem());
511:       assertEquals(0, node0.getChildCount());
512:       assertFalse(node0.isDo());
513:       assertFalse(node0.isAssignAdd());
514:       assertFalse(node0.isLabel());
515:       assertFalse(node0.isDefaultCase());
516:       assertFalse(node0.isTrue());
517:       assertFalse(node0.isNull());
518:       assertFalse(node0.isNew());
519:       assertFalse(node0.isEmpty());
520:       assertFalse(node0.isAdd());
521:       assertFalse(node0.isOr());
522:       assertFalse(node0.isVar());
523:       assertFalse(node0.isCall());
524:       assertFalse(node0.isName());
525:       assertFalse(node0.isBlock());
526:       assertFalse(node0.isStringKey());
527:       assertFalse(node0.hasMoreThanOneChild());
528:       assertFalse(node0.isReturn());
529:       assertFalse(node0.isWhile());
530:       assertEquals(1148, node0.getLineno());
531:       assertFalse(node0.isParamList());
532:       assertFalse(node0.isNumber());
533:       assertFalse(node0.isDebugger());
534:       assertEquals(117, node0.getType());
535:       assertFalse(node0.isCast());
536:       assertFalse(node0.hasOneChild());
537:       assertFalse(node0.isTry());
538:       assertFalse(node0.isFor());
539:       assertFalse(node0.isIf());
540:       assertFalse(node0.isFunction());
541:       assertFalse(node0.isRegExp());
542:       assertFalse(node0.isWith());
543:       assertFalse(node0.isCatch());
544:       assertFalse(node0.isNE());
545:       assertFalse(node0.isInc());
546:       assertFalse(node0.isSetterDef());
547:       assertFalse(node0.isIn());
548:       
549:       Node node1 = Node.newString("");
550:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
551:       assertEquals(29, Node.JSDOC_INFO_PROP);
552:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
553:       assertEquals(53, Node.INPUT_ID);
554:       assertEquals(43, Node.IS_CONSTANT_NAME);
555:       assertEquals(36, Node.QUOTED_PROP);
556:       assertEquals(37, Node.OPT_ARG_NAME);
557:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
558:       assertEquals(46, Node.IS_NAMESPACE);
559:       assertEquals(56, Node.CHANGE_TIME);
560:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
561:       assertEquals(55, Node.INFERRED_FUNCTION);
562:       assertEquals(15, Node.NO_SIDE_EFFECTS);
563:       assertEquals(39, Node.EMPTY_BLOCK);
564:       assertEquals(57, Node.LAST_PROP);
565:       assertEquals(47, Node.IS_DISPATCHER);
566:       assertEquals(2, Node.POST_FLAG);
567:       assertEquals(30, Node.VAR_ARGS_NAME);
568:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
569:       assertEquals(57, Node.REFLECTED_OBJECT);
570:       assertEquals(50, Node.FREE_CALL);
571:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
572:       assertEquals(52, Node.LENGTH);
573:       assertEquals(40, Node.ORIGINALNAME_PROP);
574:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
575:       assertEquals(8, Node.FLAG_NO_THROWS);
576:       assertEquals(48, Node.DIRECTIVES);
577:       assertEquals(49, Node.DIRECT_EVAL);
578:       assertEquals(54, Node.SLASH_V);
579:       assertEquals(51, Node.STATIC_SOURCE_FILE);
580:       assertEquals(12, Node.COLUMN_BITS);
581:       assertEquals(4095, Node.COLUMN_MASK);
582:       assertEquals(32, Node.INCRDECR_PROP);
583:       assertEquals(1, Node.DECR_FLAG);
584:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
585:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
586:       assertFalse(node1.equals((Object)node0));
587:       assertFalse(node1.isInstanceOf());
588:       assertFalse(node1.isObjectLit());
589:       assertFalse(node1.isThis());
590:       assertFalse(node1.isNot());
591:       assertFalse(node1.isComma());
592:       assertFalse(node1.isScript());
593:       assertFalse(node1.isGetProp());
594:       assertFalse(node1.isCast());
595:       assertEquals((-1), node1.getCharno());
596:       assertFalse(node1.isThrow());
597:       assertFalse(node1.isFalse());
598:       assertFalse(node1.isAnd());
599:       assertFalse(node1.isSwitch());
600:       assertFalse(node1.isLabelName());
601:       assertFalse(node1.isIn());
602:       assertFalse(node1.isContinue());
603:       assertFalse(node1.hasMoreThanOneChild());
604:       assertFalse(node1.isGetterDef());
605:       assertFalse(node1.isNumber());
606:       assertFalse(node1.isFor());
607:       assertFalse(node1.isInc());
608:       assertTrue(node1.isString());
609:       assertFalse(node1.hasOneChild());
610:       assertFalse(node1.isCase());
611:       assertFalse(node1.isHook());
612:       assertFalse(node1.isBlock());
613:       assertFalse(node1.isRegExp());
614:       assertFalse(node1.isIf());
615:       assertFalse(node1.isWith());
616:       assertFalse(node1.isNE());
617:       assertEquals((-1), node1.getLineno());
618:       assertEquals(0, node1.getChildCount());
619:       assertFalse(node1.isCatch());
620:       assertEquals(40, node1.getType());
621:       assertFalse(node1.isDefaultCase());
622:       assertFalse(node1.isSetterDef());
623:       assertFalse(node1.isTry());
624:       assertFalse(node1.isVar());
625:       assertFalse(node1.isDebugger());
626:       assertFalse(node1.isFunction());
627:       assertFalse(node1.isStringKey());
628:       assertFalse(node1.isParamList());
629:       assertFalse(node1.isArrayLit());
630:       assertFalse(node1.isReturn());
631:       assertFalse(node1.isAssignAdd());
632:       assertFalse(node1.isOr());
633:       assertFalse(node1.isLabel());
634:       assertFalse(node1.isDec());
635:       assertEquals((-1), node1.getSourcePosition());
636:       assertFalse(node1.hasChildren());
637:       assertFalse(node1.isEmpty());
638:       assertFalse(node1.isWhile());
639:       assertFalse(node1.isDo());
640:       assertFalse(node1.isNew());
641:       assertFalse(node1.isAdd());
642:       assertFalse(node1.isTrue());
643:       assertFalse(node1.isAssign());
644:       assertFalse(node1.isDelProp());
645:       assertFalse(node1.isBreak());
646:       assertFalse(node1.isNull());
647:       assertFalse(node1.isTypeOf());
648:       assertFalse(node1.isVoid());
649:       assertFalse(node1.isName());
650:       assertFalse(node1.isCall());
651:       assertFalse(node1.isExprResult());
652:       assertFalse(node1.isGetElem());
653:       
654:       Iterable<Node> iterable0 = new ArrayList<Node>();
655:       assertFalse(iterable0.contains(node0));
656:       
657:       node1.getInputId();
658:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
659:       assertEquals(29, Node.JSDOC_INFO_PROP);
660:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
661:       assertEquals(53, Node.INPUT_ID);
662:       assertEquals(43, Node.IS_CONSTANT_NAME);
663:       assertEquals(36, Node.QUOTED_PROP);
664:       assertEquals(37, Node.OPT_ARG_NAME);
665:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
666:       assertEquals(46, Node.IS_NAMESPACE);
667:       assertEquals(56, Node.CHANGE_TIME);
668:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
669:       assertEquals(55, Node.INFERRED_FUNCTION);
670:       assertEquals(15, Node.NO_SIDE_EFFECTS);
671:       assertEquals(39, Node.EMPTY_BLOCK);
672:       assertEquals(57, Node.LAST_PROP);
673:       assertEquals(47, Node.IS_DISPATCHER);
674:       assertEquals(2, Node.POST_FLAG);
675:       assertEquals(30, Node.VAR_ARGS_NAME);
676:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
677:       assertEquals(57, Node.REFLECTED_OBJECT);
678:       assertEquals(50, Node.FREE_CALL);
679:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
680:       assertEquals(52, Node.LENGTH);
681:       assertEquals(40, Node.ORIGINALNAME_PROP);
682:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
683:       assertEquals(8, Node.FLAG_NO_THROWS);
684:       assertEquals(48, Node.DIRECTIVES);
685:       assertEquals(49, Node.DIRECT_EVAL);
686:       assertEquals(54, Node.SLASH_V);
687:       assertEquals(51, Node.STATIC_SOURCE_FILE);
688:       assertEquals(12, Node.COLUMN_BITS);
689:       assertEquals(4095, Node.COLUMN_MASK);
690:       assertEquals(32, Node.INCRDECR_PROP);
691:       assertEquals(1, Node.DECR_FLAG);
692:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
693:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
694:       assertFalse(node1.equals((Object)node0));
695:       assertFalse(node1.isInstanceOf());
696:       assertFalse(node1.isObjectLit());
697:       assertFalse(node1.isThis());
698:       assertFalse(node1.isNot());
699:       assertFalse(node1.isComma());
700:       assertFalse(node1.isScript());
701:       assertFalse(node1.isGetProp());
702:       assertFalse(node1.isCast());
703:       assertEquals((-1), node1.getCharno());
704:       assertFalse(node1.isThrow());
705:       assertFalse(node1.isFalse());
706:       assertFalse(node1.isAnd());
707:       assertFalse(node1.isSwitch());
708:       assertFalse(node1.isLabelName());
709:       assertFalse(node1.isIn());
710:       assertFalse(node1.isContinue());
711:       assertFalse(node1.hasMoreThanOneChild());
712:       assertFalse(node1.isGetterDef());
713:       assertFalse(node1.isNumber());
714:       assertFalse(node1.isFor());
715:       assertFalse(node1.isInc());
716:       assertTrue(node1.isString());
717:       assertFalse(node1.hasOneChild());
718:       assertFalse(node1.isCase());
719:       assertFalse(node1.isHook());
720:       assertFalse(node1.isBlock());
721:       assertFalse(node1.isRegExp());
722:       assertFalse(node1.isIf());
723:       assertFalse(node1.isWith());
724:       assertFalse(node1.isNE());
725:       assertEquals((-1), node1.getLineno());
726:       assertEquals(0, node1.getChildCount());
727:       assertFalse(node1.isCatch());
728:       assertEquals(40, node1.getType());
729:       assertFalse(node1.isDefaultCase());
730:       assertFalse(node1.isSetterDef());
731:       assertFalse(node1.isTry());
732:       assertFalse(node1.isVar());
733:       assertFalse(node1.isDebugger());
734:       assertFalse(node1.isFunction());
735:       assertFalse(node1.isStringKey());
736:       assertFalse(node1.isParamList());
737:       assertFalse(node1.isArrayLit());
738:       assertFalse(node1.isReturn());
739:       assertFalse(node1.isAssignAdd());
740:       assertFalse(node1.isOr());
741:       assertFalse(node1.isLabel());
742:       assertFalse(node1.isDec());
743:       assertEquals((-1), node1.getSourcePosition());
744:       assertFalse(node1.hasChildren());
745:       assertFalse(node1.isEmpty());
746:       assertFalse(node1.isWhile());
747:       assertFalse(node1.isDo());
748:       assertFalse(node1.isNew());
749:       assertFalse(node1.isAdd());
750:       assertFalse(node1.isTrue());
751:       assertFalse(node1.isAssign());
752:       assertFalse(node1.isDelProp());
753:       assertFalse(node1.isBreak());
754:       assertFalse(node1.isNull());
755:       assertFalse(node1.isTypeOf());
756:       assertFalse(node1.isVoid());
757:       assertFalse(node1.isName());
758:       assertFalse(node1.isCall());
759:       assertFalse(node1.isExprResult());
760:       assertFalse(node1.isGetElem());
761:       
762:       Node node2 = node1.useSourceInfoFrom(node0);
763:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
764:       assertEquals(4095, Node.COLUMN_MASK);
765:       assertEquals(55, Node.INFERRED_FUNCTION);
766:       assertEquals(36, Node.QUOTED_PROP);
767:       assertEquals(8, Node.FLAG_NO_THROWS);
768:       assertEquals(39, Node.EMPTY_BLOCK);
769:       assertEquals(53, Node.INPUT_ID);
770:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
771:       assertEquals(40, Node.ORIGINALNAME_PROP);
772:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
773:       assertEquals(47, Node.IS_DISPATCHER);
774:       assertEquals(50, Node.FREE_CALL);
775:       assertEquals(2, Node.POST_FLAG);
776:       assertEquals(54, Node.SLASH_V);
777:       assertEquals(43, Node.IS_CONSTANT_NAME);
778:       assertEquals(12, Node.COLUMN_BITS);
779:       assertEquals(46, Node.IS_NAMESPACE);
780:       assertEquals(51, Node.STATIC_SOURCE_FILE);
781:       assertEquals(30, Node.VAR_ARGS_NAME);
782:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
783:       assertEquals(32, Node.INCRDECR_PROP);
784:       assertEquals(15, Node.NO_SIDE_EFFECTS);
785:       assertEquals(57, Node.LAST_PROP);
786:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
787:       assertEquals(1, Node.DECR_FLAG);
788:       assertEquals(29, Node.JSDOC_INFO_PROP);
789:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
790:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
791:       assertEquals(52, Node.LENGTH);
792:       assertEquals(57, Node.REFLECTED_OBJECT);
793:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
794:       assertEquals(37, Node.OPT_ARG_NAME);
795:       assertEquals(56, Node.CHANGE_TIME);
796:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
797:       assertEquals(49, Node.DIRECT_EVAL);
798:       assertEquals(48, Node.DIRECTIVES);
799:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
800:       assertEquals(29, Node.JSDOC_INFO_PROP);
801:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
802:       assertEquals(53, Node.INPUT_ID);
803:       assertEquals(43, Node.IS_CONSTANT_NAME);
804:       assertEquals(36, Node.QUOTED_PROP);
805:       assertEquals(37, Node.OPT_ARG_NAME);
806:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
807:       assertEquals(46, Node.IS_NAMESPACE);
808:       assertEquals(56, Node.CHANGE_TIME);
809:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
810:       assertEquals(55, Node.INFERRED_FUNCTION);
811:       assertEquals(15, Node.NO_SIDE_EFFECTS);
812:       assertEquals(39, Node.EMPTY_BLOCK);
813:       assertEquals(57, Node.LAST_PROP);
814:       assertEquals(47, Node.IS_DISPATCHER);
815:       assertEquals(2, Node.POST_FLAG);
816:       assertEquals(30, Node.VAR_ARGS_NAME);
817:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
818:       assertEquals(57, Node.REFLECTED_OBJECT);
819:       assertEquals(50, Node.FREE_CALL);
820:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
821:       assertEquals(52, Node.LENGTH);
822:       assertEquals(40, Node.ORIGINALNAME_PROP);
823:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
824:       assertEquals(8, Node.FLAG_NO_THROWS);
825:       assertEquals(48, Node.DIRECTIVES);
826:       assertEquals(49, Node.DIRECT_EVAL);
827:       assertEquals(54, Node.SLASH_V);
828:       assertEquals(51, Node.STATIC_SOURCE_FILE);
829:       assertEquals(12, Node.COLUMN_BITS);
830:       assertEquals(4095, Node.COLUMN_MASK);
831:       assertEquals(32, Node.INCRDECR_PROP);
832:       assertEquals(1, Node.DECR_FLAG);
833:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
834:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
835:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
836:       assertEquals(43, Node.IS_CONSTANT_NAME);
837:       assertEquals(36, Node.QUOTED_PROP);
838:       assertEquals(29, Node.JSDOC_INFO_PROP);
839:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
840:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
841:       assertEquals(55, Node.INFERRED_FUNCTION);
842:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
843:       assertEquals(53, Node.INPUT_ID);
844:       assertEquals(2, Node.POST_FLAG);
845:       assertEquals(51, Node.STATIC_SOURCE_FILE);
846:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
847:       assertEquals(46, Node.IS_NAMESPACE);
848:       assertEquals(47, Node.IS_DISPATCHER);
849:       assertEquals(30, Node.VAR_ARGS_NAME);
850:       assertEquals(40, Node.ORIGINALNAME_PROP);
851:       assertEquals(52, Node.LENGTH);
852:       assertEquals(54, Node.SLASH_V);
853:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
854:       assertEquals(57, Node.REFLECTED_OBJECT);
855:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
856:       assertEquals(50, Node.FREE_CALL);
857:       assertEquals(1, Node.DECR_FLAG);
858:       assertEquals(57, Node.LAST_PROP);
859:       assertEquals(15, Node.NO_SIDE_EFFECTS);
860:       assertEquals(39, Node.EMPTY_BLOCK);
861:       assertEquals(48, Node.DIRECTIVES);
862:       assertEquals(32, Node.INCRDECR_PROP);
863:       assertEquals(8, Node.FLAG_NO_THROWS);
864:       assertEquals(12, Node.COLUMN_BITS);
865:       assertEquals(56, Node.CHANGE_TIME);
866:       assertEquals(49, Node.DIRECT_EVAL);
867:       assertEquals(4095, Node.COLUMN_MASK);
868:       assertEquals(37, Node.OPT_ARG_NAME);
869:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
870:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
871:       assertFalse(node0.equals((Object)node1));
872:       assertFalse(node1.equals((Object)node0));
873:       assertFalse(node2.equals((Object)node0));
874:       assertEquals(0, nodeArray0.length);
875:       assertFalse(node0.isHook());
876:       assertEquals(115, node0.getCharno());
877:       assertFalse(node0.isThrow());
878:       assertEquals(4702323, node0.getSourcePosition());
879:       assertTrue(node0.isContinue());
880:       assertFalse(node0.isSwitch());
881:       assertFalse(node0.isThis());
882:       assertFalse(node0.isBreak());
883:       assertFalse(node0.isComma());
884:       assertFalse(node0.isFalse());
885:       assertFalse(node0.isInstanceOf());
886:       assertFalse(node0.isObjectLit());
887:       assertFalse(node0.isCase());
888:       assertFalse(node0.isAnd());
889:       assertFalse(node0.isScript());
890:       assertFalse(node0.isGetterDef());
891:       assertFalse(node0.isGetProp());
892:       assertFalse(node0.isNot());
893:       assertFalse(node0.isString());
894:       assertFalse(node0.isArrayLit());
895:       assertFalse(node0.isLabelName());
896:       assertFalse(node0.isExprResult());
897:       assertFalse(node0.isTypeOf());
898:       assertFalse(node0.isDelProp());
899:       assertFalse(node0.isVoid());
900:       assertFalse(node0.hasChildren());
901:       assertFalse(node0.isDec());
902:       assertFalse(node0.isAssign());
903:       assertFalse(node0.isGetElem());
904:       assertEquals(0, node0.getChildCount());
905:       assertFalse(node0.isDo());
906:       assertFalse(node0.isAssignAdd());
907:       assertFalse(node0.isLabel());
908:       assertFalse(node0.isDefaultCase());
909:       assertFalse(node0.isTrue());
910:       assertFalse(node0.isNull());
911:       assertFalse(node0.isNew());
912:       assertFalse(node0.isEmpty());
913:       assertFalse(node0.isAdd());
914:       assertFalse(node0.isOr());
915:       assertFalse(node0.isVar());
916:       assertFalse(node0.isCall());
917:       assertFalse(node0.isName());
918:       assertFalse(node0.isBlock());
919:       assertFalse(node0.isStringKey());
920:       assertFalse(node0.hasMoreThanOneChild());
921:       assertFalse(node0.isReturn());
922:       assertFalse(node0.isWhile());
923:       assertEquals(1148, node0.getLineno());
924:       assertFalse(node0.isParamList());
925:       assertFalse(node0.isNumber());
926:       assertFalse(node0.isDebugger());
927:       assertEquals(117, node0.getType());
928:       assertFalse(node0.isCast());
929:       assertFalse(node0.hasOneChild());
930:       assertFalse(node0.isTry());
931:       assertFalse(node0.isFor());
932:       assertFalse(node0.isIf());
933:       assertFalse(node0.isFunction());
934:       assertFalse(node0.isRegExp());
935:       assertFalse(node0.isWith());
936:       assertFalse(node0.isCatch());
937:       assertFalse(node0.isNE());
938:       assertFalse(node0.isInc());
939:       assertFalse(node0.isSetterDef());
940:       assertFalse(node0.isIn());
941:       assertFalse(node1.isInstanceOf());
942:       assertFalse(node1.isObjectLit());
943:       assertFalse(node1.isThis());
944:       assertFalse(node1.isNot());
945:       assertFalse(node1.isComma());
946:       assertEquals(115, node1.getCharno());
947:       assertFalse(node1.isScript());
948:       assertFalse(node1.isGetProp());
949:       assertFalse(node1.isCast());
950:       assertFalse(node1.isThrow());
951:       assertFalse(node1.isFalse());
952:       assertEquals(4702323, node1.getSourcePosition());
953:       assertFalse(node1.isAnd());
954:       assertFalse(node1.isSwitch());
955:       assertFalse(node1.isLabelName());
956:       assertFalse(node1.isIn());
957:       assertFalse(node1.isContinue());
958:       assertFalse(node1.hasMoreThanOneChild());
959:       assertFalse(node1.isGetterDef());
960:       assertFalse(node1.isNumber());
961:       assertFalse(node1.isFor());
962:       assertFalse(node1.isInc());
963:       assertTrue(node1.isString());
964:       assertFalse(node1.hasOneChild());
965:       assertFalse(node1.isCase());
966:       assertFalse(node1.isHook());
967:       assertFalse(node1.isBlock());
968:       assertFalse(node1.isRegExp());
969:       assertFalse(node1.isIf());
970:       assertFalse(node1.isWith());
971:       assertFalse(node1.isNE());
972:       assertEquals(0, node1.getChildCount());
973:       assertEquals(1148, node1.getLineno());
974:       assertFalse(node1.isCatch());
975:       assertEquals(40, node1.getType());
976:       assertFalse(node1.isDefaultCase());
977:       assertFalse(node1.isSetterDef());
978:       assertFalse(node1.isTry());
979:       assertFalse(node1.isVar());
980:       assertFalse(node1.isDebugger());
981:       assertFalse(node1.isFunction());
982:       assertFalse(node1.isStringKey());
983:       assertFalse(node1.isParamList());
984:       assertFalse(node1.isArrayLit());
985:       assertFalse(node1.isReturn());
986:       assertFalse(node1.isAssignAdd());
987:       assertFalse(node1.isOr());
988:       assertFalse(node1.isLabel());
989:       assertFalse(node1.isDec());
990:       assertFalse(node1.hasChildren());
991:       assertFalse(node1.isEmpty());
992:       assertFalse(node1.isWhile());
993:       assertFalse(node1.isDo());
994:       assertFalse(node1.isNew());
995:       assertFalse(node1.isAdd());
996:       assertFalse(node1.isTrue());
997:       assertFalse(node1.isAssign());
998:       assertFalse(node1.isDelProp());
999:       assertFalse(node1.isBreak());
1000:       assertFalse(node1.isNull());
1001:       assertFalse(node1.isTypeOf());
1002:       assertFalse(node1.isVoid());
1003:       assertFalse(node1.isName());
1004:       assertFalse(node1.isCall());
1005:       assertFalse(node1.isExprResult());
1006:       assertFalse(node1.isGetElem());
1007:       assertFalse(node2.isParamList());
1008:       assertFalse(node2.isSetterDef());
1009:       assertFalse(node2.isNull());
1010:       assertEquals(1148, node2.getLineno());
1011:       assertFalse(node2.isName());
1012:       assertFalse(node2.isVar());
1013:       assertFalse(node2.isCatch());
1014:       assertFalse(node2.isCall());
1015:       assertEquals(40, node2.getType());
1016:       assertEquals(0, node2.getChildCount());
1017:       assertFalse(node2.isFunction());
1018:       assertFalse(node2.isRegExp());
1019:       assertFalse(node2.isDebugger());
1020:       assertFalse(node2.isBlock());
1021:       assertFalse(node2.isArrayLit());
1022:       assertFalse(node2.isWhile());
1023:       assertTrue(node2.isString());
1024:       assertFalse(node2.isTry());
1025:       assertFalse(node2.isStringKey());
1026:       assertFalse(node2.isGetterDef());
1027:       assertFalse(node2.isLabel());
1028:       assertFalse(node2.isReturn());
1029:       assertFalse(node2.isLabelName());
1030:       assertFalse(node2.isAssignAdd());
1031:       assertFalse(node2.isDelProp());
1032:       assertFalse(node2.isGetElem());
1033:       assertFalse(node2.hasChildren());
1034:       assertFalse(node2.isDec());
1035:       assertFalse(node2.isAssign());
1036:       assertFalse(node2.isTypeOf());
1037:       assertFalse(node2.isNew());
1038:       assertFalse(node2.isTrue());
1039:       assertFalse(node2.isAdd());
1040:       assertFalse(node2.isExprResult());
1041:       assertFalse(node2.isDefaultCase());
1042:       assertFalse(node2.isDo());
1043:       assertFalse(node2.isVoid());
1044:       assertFalse(node2.isEmpty());
1045:       assertFalse(node2.isOr());
1046:       assertFalse(node2.isGetProp());
1047:       assertFalse(node2.isThis());
1048:       assertFalse(node2.isBreak());
1049:       assertEquals(115, node2.getCharno());
1050:       assertFalse(node2.isFalse());
1051:       assertFalse(node2.isThrow());
1052:       assertFalse(node2.isInstanceOf());
1053:       assertFalse(node2.isHook());
1054:       assertFalse(node2.isComma());
1055:       assertFalse(node2.isWith());
1056:       assertFalse(node2.isScript());
1057:       assertFalse(node2.hasOneChild());
1058:       assertFalse(node2.isSwitch());
1059:       assertEquals(4702323, node2.getSourcePosition());
1060:       assertFalse(node2.isAnd());
1061:       assertFalse(node2.isCase());
1062:       assertFalse(node2.isNumber());
1063:       assertFalse(node2.isNot());
1064:       assertFalse(node2.isObjectLit());
1065:       assertFalse(node2.isNE());
1066:       assertFalse(node2.isIf());
1067:       assertFalse(node2.isContinue());
1068:       assertFalse(node2.isCast());
1069:       assertFalse(node2.isFor());
1070:       assertFalse(node2.hasMoreThanOneChild());
1071:       assertFalse(node2.isInc());
1072:       assertFalse(node2.isIn());
1073:       
1074:       Node[] nodeArray1 = new Node[1];
1075:       assertFalse(nodeArray1.equals((Object)nodeArray0));
1076:       
1077:       nodeArray1[0] = node2;
1078:       Node node3 = new Node((-2500), nodeArray1, 75, 1603);
1079:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1080:       assertEquals(57, Node.LAST_PROP);
1081:       assertEquals(54, Node.SLASH_V);
1082:       assertEquals(49, Node.DIRECT_EVAL);
1083:       assertEquals(1, Node.DECR_FLAG);
1084:       assertEquals(57, Node.REFLECTED_OBJECT);
1085:       assertEquals(46, Node.IS_NAMESPACE);
1086:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1087:       assertEquals(50, Node.FREE_CALL);
1088:       assertEquals(52, Node.LENGTH);
1089:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1090:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1091:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1092:       assertEquals(56, Node.CHANGE_TIME);
1093:       assertEquals(48, Node.DIRECTIVES);
1094:       assertEquals(32, Node.INCRDECR_PROP);
1095:       assertEquals(37, Node.OPT_ARG_NAME);
1096:       assertEquals(12, Node.COLUMN_BITS);
1097:       assertEquals(4095, Node.COLUMN_MASK);
1098:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1099:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1100:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1101:       assertEquals(43, Node.IS_CONSTANT_NAME);
1102:       assertEquals(53, Node.INPUT_ID);
1103:       assertEquals(55, Node.INFERRED_FUNCTION);
1104:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1105:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1106:       assertEquals(36, Node.QUOTED_PROP);
1107:       assertEquals(2, Node.POST_FLAG);
1108:       assertEquals(8, Node.FLAG_NO_THROWS);
1109:       assertEquals(39, Node.EMPTY_BLOCK);
1110:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1111:       assertEquals(29, Node.JSDOC_INFO_PROP);
1112:       assertEquals(40, Node.ORIGINALNAME_PROP);
1113:       assertEquals(30, Node.VAR_ARGS_NAME);
1114:       assertEquals(47, Node.IS_DISPATCHER);
1115:       assertFalse(nodeArray1.equals((Object)nodeArray0));
1116:       assertFalse(node3.equals((Object)node2));
1117:       assertFalse(node3.equals((Object)node1));
1118:       assertFalse(node3.equals((Object)node0));
1119:       assertEquals(1, nodeArray1.length);
1120:       assertFalse(node3.isDec());
1121:       assertFalse(node3.isNumber());
1122:       assertFalse(node3.isTypeOf());
1123:       assertFalse(node3.isAssign());
1124:       assertFalse(node3.isLabelName());
1125:       assertFalse(node3.isGetElem());
1126:       assertFalse(node3.isCast());
1127:       assertFalse(node3.isReturn());
1128:       assertFalse(node3.isLabel());
1129:       assertFalse(node3.isAssignAdd());
1130:       assertFalse(node3.isWhile());
1131:       assertFalse(node3.isDo());
1132:       assertFalse(node3.isAdd());
1133:       assertFalse(node3.isExprResult());
1134:       assertFalse(node3.hasMoreThanOneChild());
1135:       assertFalse(node3.isWith());
1136:       assertFalse(node3.isInstanceOf());
1137:       assertFalse(node3.isOr());
1138:       assertEquals((-2500), node3.getType());
1139:       assertFalse(node3.isName());
1140:       assertFalse(node3.isNull());
1141:       assertFalse(node3.isThis());
1142:       assertFalse(node3.isHook());
1143:       assertFalse(node3.isVar());
1144:       assertFalse(node3.isNew());
1145:       assertEquals(308803, node3.getSourcePosition());
1146:       assertFalse(node3.isBlock());
1147:       assertFalse(node3.isScript());
1148:       assertFalse(node3.isCase());
1149:       assertFalse(node3.isArrayLit());
1150:       assertFalse(node3.isStringKey());
1151:       assertFalse(node3.isSwitch());
1152:       assertFalse(node3.isParamList());
1153:       assertFalse(node3.isIf());
1154:       assertFalse(node3.isDelProp());
1155:       assertFalse(node3.isGetterDef());
1156:       assertTrue(node3.hasOneChild());
1157:       assertFalse(node3.isEmpty());
1158:       assertTrue(node3.hasChildren());
1159:       assertEquals(1, node3.getChildCount());
1160:       assertFalse(node3.isTry());
1161:       assertFalse(node3.isFor());
1162:       assertEquals(75, node3.getLineno());
1163:       assertFalse(node3.isDefaultCase());
1164:       assertFalse(node3.isRegExp());
1165:       assertFalse(node3.isInc());
1166:       assertFalse(node3.isCatch());
1167:       assertFalse(node3.isIn());
1168:       assertFalse(node3.isVoid());
1169:       assertFalse(node3.isTrue());
1170:       assertFalse(node3.isNE());
1171:       assertFalse(node3.isBreak());
1172:       assertFalse(node3.isComma());
1173:       assertFalse(node3.isSetterDef());
1174:       assertFalse(node3.isFalse());
1175:       assertFalse(node3.isGetProp());
1176:       assertFalse(node3.isCall());
1177:       assertFalse(node3.isThrow());
1178:       assertFalse(node3.isNot());
1179:       assertFalse(node3.isDebugger());
1180:       assertFalse(node3.isFunction());
1181:       assertFalse(node3.isObjectLit());
1182:       assertFalse(node3.isString());
1183:       assertFalse(node3.isContinue());
1184:       assertEquals(1603, node3.getCharno());
1185:       assertFalse(node3.isAnd());
1186:       
1187:       Node node4 = node2.srcrefTree(node3);
1188:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1189:       assertEquals(4095, Node.COLUMN_MASK);
1190:       assertEquals(55, Node.INFERRED_FUNCTION);
1191:       assertEquals(36, Node.QUOTED_PROP);
1192:       assertEquals(8, Node.FLAG_NO_THROWS);
1193:       assertEquals(39, Node.EMPTY_BLOCK);
1194:       assertEquals(53, Node.INPUT_ID);
1195:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1196:       assertEquals(40, Node.ORIGINALNAME_PROP);
1197:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1198:       assertEquals(47, Node.IS_DISPATCHER);
1199:       assertEquals(50, Node.FREE_CALL);
1200:       assertEquals(2, Node.POST_FLAG);
1201:       assertEquals(54, Node.SLASH_V);
1202:       assertEquals(43, Node.IS_CONSTANT_NAME);
1203:       assertEquals(12, Node.COLUMN_BITS);
1204:       assertEquals(46, Node.IS_NAMESPACE);
1205:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1206:       assertEquals(30, Node.VAR_ARGS_NAME);
1207:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1208:       assertEquals(32, Node.INCRDECR_PROP);
1209:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1210:       assertEquals(57, Node.LAST_PROP);
1211:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1212:       assertEquals(1, Node.DECR_FLAG);
1213:       assertEquals(29, Node.JSDOC_INFO_PROP);
1214:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1215:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1216:       assertEquals(52, Node.LENGTH);
1217:       assertEquals(57, Node.REFLECTED_OBJECT);
1218:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1219:       assertEquals(37, Node.OPT_ARG_NAME);
1220:       assertEquals(56, Node.CHANGE_TIME);
1221:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1222:       assertEquals(49, Node.DIRECT_EVAL);
1223:       assertEquals(48, Node.DIRECTIVES);
1224:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1225:       assertEquals(29, Node.JSDOC_INFO_PROP);
1226:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1227:       assertEquals(53, Node.INPUT_ID);
1228:       assertEquals(43, Node.IS_CONSTANT_NAME);
1229:       assertEquals(36, Node.QUOTED_PROP);
1230:       assertEquals(37, Node.OPT_ARG_NAME);
1231:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1232:       assertEquals(46, Node.IS_NAMESPACE);
1233:       assertEquals(56, Node.CHANGE_TIME);
1234:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1235:       assertEquals(55, Node.INFERRED_FUNCTION);
1236:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1237:       assertEquals(39, Node.EMPTY_BLOCK);
1238:       assertEquals(57, Node.LAST_PROP);
1239:       assertEquals(47, Node.IS_DISPATCHER);
1240:       assertEquals(2, Node.POST_FLAG);
1241:       assertEquals(30, Node.VAR_ARGS_NAME);
1242:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1243:       assertEquals(57, Node.REFLECTED_OBJECT);
1244:       assertEquals(50, Node.FREE_CALL);
1245:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1246:       assertEquals(52, Node.LENGTH);
1247:       assertEquals(40, Node.ORIGINALNAME_PROP);
1248:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1249:       assertEquals(8, Node.FLAG_NO_THROWS);
1250:       assertEquals(48, Node.DIRECTIVES);
1251:       assertEquals(49, Node.DIRECT_EVAL);
1252:       assertEquals(54, Node.SLASH_V);
1253:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1254:       assertEquals(12, Node.COLUMN_BITS);
1255:       assertEquals(4095, Node.COLUMN_MASK);
1256:       assertEquals(32, Node.INCRDECR_PROP);
1257:       assertEquals(1, Node.DECR_FLAG);
1258:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1259:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1260:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1261:       assertEquals(43, Node.IS_CONSTANT_NAME);
1262:       assertEquals(36, Node.QUOTED_PROP);
1263:       assertEquals(29, Node.JSDOC_INFO_PROP);
1264:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1265:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1266:       assertEquals(55, Node.INFERRED_FUNCTION);
1267:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1268:       assertEquals(53, Node.INPUT_ID);
1269:       assertEquals(2, Node.POST_FLAG);
1270:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1271:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1272:       assertEquals(46, Node.IS_NAMESPACE);
1273:       assertEquals(47, Node.IS_DISPATCHER);
1274:       assertEquals(30, Node.VAR_ARGS_NAME);
1275:       assertEquals(40, Node.ORIGINALNAME_PROP);
1276:       assertEquals(52, Node.LENGTH);
1277:       assertEquals(54, Node.SLASH_V);
1278:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1279:       assertEquals(57, Node.REFLECTED_OBJECT);
1280:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1281:       assertEquals(50, Node.FREE_CALL);
1282:       assertEquals(1, Node.DECR_FLAG);
1283:       assertEquals(57, Node.LAST_PROP);
1284:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1285:       assertEquals(39, Node.EMPTY_BLOCK);
1286:       assertEquals(48, Node.DIRECTIVES);
1287:       assertEquals(32, Node.INCRDECR_PROP);
1288:       assertEquals(8, Node.FLAG_NO_THROWS);
1289:       assertEquals(12, Node.COLUMN_BITS);
1290:       assertEquals(56, Node.CHANGE_TIME);
1291:       assertEquals(49, Node.DIRECT_EVAL);
1292:       assertEquals(4095, Node.COLUMN_MASK);
1293:       assertEquals(37, Node.OPT_ARG_NAME);
1294:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1295:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1296:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1297:       assertEquals(57, Node.LAST_PROP);
1298:       assertEquals(54, Node.SLASH_V);
1299:       assertEquals(49, Node.DIRECT_EVAL);
1300:       assertEquals(1, Node.DECR_FLAG);
1301:       assertEquals(57, Node.REFLECTED_OBJECT);
1302:       assertEquals(46, Node.IS_NAMESPACE);
1303:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1304:       assertEquals(50, Node.FREE_CALL);
1305:       assertEquals(52, Node.LENGTH);
1306:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1307:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1308:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1309:       assertEquals(56, Node.CHANGE_TIME);
1310:       assertEquals(48, Node.DIRECTIVES);
1311:       assertEquals(32, Node.INCRDECR_PROP);
1312:       assertEquals(37, Node.OPT_ARG_NAME);
1313:       assertEquals(12, Node.COLUMN_BITS);
1314:       assertEquals(4095, Node.COLUMN_MASK);
1315:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1316:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1317:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1318:       assertEquals(43, Node.IS_CONSTANT_NAME);
1319:       assertEquals(53, Node.INPUT_ID);
1320:       assertEquals(55, Node.INFERRED_FUNCTION);
1321:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1322:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1323:       assertEquals(36, Node.QUOTED_PROP);
1324:       assertEquals(2, Node.POST_FLAG);
1325:       assertEquals(8, Node.FLAG_NO_THROWS);
1326:       assertEquals(39, Node.EMPTY_BLOCK);
1327:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1328:       assertEquals(29, Node.JSDOC_INFO_PROP);
1329:       assertEquals(40, Node.ORIGINALNAME_PROP);
1330:       assertEquals(30, Node.VAR_ARGS_NAME);
1331:       assertEquals(47, Node.IS_DISPATCHER);
1332:       assertEquals(47, Node.IS_DISPATCHER);
1333:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1334:       assertEquals(56, Node.CHANGE_TIME);
1335:       assertEquals(29, Node.JSDOC_INFO_PROP);
1336:       assertEquals(37, Node.OPT_ARG_NAME);
1337:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1338:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1339:       assertEquals(12, Node.COLUMN_BITS);
1340:       assertEquals(2, Node.POST_FLAG);
1341:       assertEquals(30, Node.VAR_ARGS_NAME);
1342:       assertEquals(57, Node.LAST_PROP);
1343:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1344:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1345:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1346:       assertEquals(49, Node.DIRECT_EVAL);
1347:       assertEquals(52, Node.LENGTH);
1348:       assertEquals(53, Node.INPUT_ID);
1349:       assertEquals(57, Node.REFLECTED_OBJECT);
1350:       assertEquals(55, Node.INFERRED_FUNCTION);
1351:       assertEquals(8, Node.FLAG_NO_THROWS);
1352:       assertEquals(36, Node.QUOTED_PROP);
1353:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1354:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1355:       assertEquals(40, Node.ORIGINALNAME_PROP);
1356:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1357:       assertEquals(39, Node.EMPTY_BLOCK);
1358:       assertEquals(48, Node.DIRECTIVES);
1359:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1360:       assertEquals(4095, Node.COLUMN_MASK);
1361:       assertEquals(43, Node.IS_CONSTANT_NAME);
1362:       assertEquals(32, Node.INCRDECR_PROP);
1363:       assertEquals(1, Node.DECR_FLAG);
1364:       assertEquals(46, Node.IS_NAMESPACE);
1365:       assertEquals(54, Node.SLASH_V);
1366:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1367:       assertEquals(50, Node.FREE_CALL);
1368:       assertFalse(nodeArray0.equals((Object)nodeArray1));
1369:       assertFalse(node0.equals((Object)node3));
1370:       assertFalse(node0.equals((Object)node1));
1371:       assertFalse(node0.equals((Object)node2));
1372:       assertFalse(node1.equals((Object)node3));
1373:       assertFalse(node1.equals((Object)node0));
1374:       assertFalse(node2.equals((Object)node3));
1375:       assertFalse(node2.equals((Object)node0));
1376:       assertFalse(nodeArray1.equals((Object)nodeArray0));
1377:       assertFalse(node3.equals((Object)node2));
1378:       assertFalse(node3.equals((Object)node1));
1379:       assertFalse(node3.equals((Object)node0));
1380:       assertFalse(node4.equals((Object)node0));
1381:       assertFalse(node4.equals((Object)node3));
1382:       assertEquals(0, nodeArray0.length);
1383:       assertEquals(1, nodeArray1.length);
1384:       assertFalse(node0.isHook());
1385:       assertEquals(115, node0.getCharno());
1386:       assertFalse(node0.isThrow());
1387:       assertEquals(4702323, node0.getSourcePosition());
1388:       assertTrue(node0.isContinue());
1389:       assertFalse(node0.isSwitch());
1390:       assertFalse(node0.isThis());
1391:       assertFalse(node0.isBreak());
1392:       assertFalse(node0.isComma());
1393:       assertFalse(node0.isFalse());
1394:       assertFalse(node0.isInstanceOf());
1395:       assertFalse(node0.isObjectLit());
1396:       assertFalse(node0.isCase());
1397:       assertFalse(node0.isAnd());
1398:       assertFalse(node0.isScript());
1399:       assertFalse(node0.isGetterDef());
1400:       assertFalse(node0.isGetProp());
1401:       assertFalse(node0.isNot());
1402:       assertFalse(node0.isString());
1403:       assertFalse(node0.isArrayLit());
1404:       assertFalse(node0.isLabelName());
1405:       assertFalse(node0.isExprResult());
1406:       assertFalse(node0.isTypeOf());
1407:       assertFalse(node0.isDelProp());
1408:       assertFalse(node0.isVoid());
1409:       assertFalse(node0.hasChildren());
1410:       assertFalse(node0.isDec());
1411:       assertFalse(node0.isAssign());
1412:       assertFalse(node0.isGetElem());
1413:       assertEquals(0, node0.getChildCount());
1414:       assertFalse(node0.isDo());
1415:       assertFalse(node0.isAssignAdd());
1416:       assertFalse(node0.isLabel());
1417:       assertFalse(node0.isDefaultCase());
1418:       assertFalse(node0.isTrue());
1419:       assertFalse(node0.isNull());
1420:       assertFalse(node0.isNew());
1421:       assertFalse(node0.isEmpty());
1422:       assertFalse(node0.isAdd());
1423:       assertFalse(node0.isOr());
1424:       assertFalse(node0.isVar());
1425:       assertFalse(node0.isCall());
1426:       assertFalse(node0.isName());
1427:       assertFalse(node0.isBlock());
1428:       assertFalse(node0.isStringKey());
1429:       assertFalse(node0.hasMoreThanOneChild());
1430:       assertFalse(node0.isReturn());
1431:       assertFalse(node0.isWhile());
1432:       assertEquals(1148, node0.getLineno());
1433:       assertFalse(node0.isParamList());
1434:       assertFalse(node0.isNumber());
1435:       assertFalse(node0.isDebugger());
1436:       assertEquals(117, node0.getType());
1437:       assertFalse(node0.isCast());
1438:       assertFalse(node0.hasOneChild());
1439:       assertFalse(node0.isTry());
1440:       assertFalse(node0.isFor());
1441:       assertFalse(node0.isIf());
1442:       assertFalse(node0.isFunction());
1443:       assertFalse(node0.isRegExp());
1444:       assertFalse(node0.isWith());
1445:       assertFalse(node0.isCatch());
1446:       assertFalse(node0.isNE());
1447:       assertFalse(node0.isInc());
1448:       assertFalse(node0.isSetterDef());
1449:       assertFalse(node0.isIn());
1450:       assertFalse(node1.isInstanceOf());
1451:       assertFalse(node1.isObjectLit());
1452:       assertFalse(node1.isThis());
1453:       assertFalse(node1.isNot());
1454:       assertFalse(node1.isComma());
1455:       assertFalse(node1.isScript());
1456:       assertFalse(node1.isGetProp());
1457:       assertFalse(node1.isCast());
1458:       assertFalse(node1.isThrow());
1459:       assertFalse(node1.isFalse());
1460:       assertFalse(node1.isAnd());
1461:       assertFalse(node1.isSwitch());
1462:       assertFalse(node1.isLabelName());
1463:       assertFalse(node1.isIn());
1464:       assertFalse(node1.isContinue());
1465:       assertFalse(node1.hasMoreThanOneChild());
1466:       assertFalse(node1.isGetterDef());
1467:       assertFalse(node1.isNumber());
1468:       assertFalse(node1.isFor());
1469:       assertFalse(node1.isInc());
1470:       assertTrue(node1.isString());
1471:       assertFalse(node1.hasOneChild());
1472:       assertFalse(node1.isCase());
1473:       assertFalse(node1.isHook());
1474:       assertFalse(node1.isBlock());
1475:       assertFalse(node1.isRegExp());
1476:       assertFalse(node1.isIf());
1477:       assertFalse(node1.isWith());
1478:       assertFalse(node1.isNE());
1479:       assertEquals(0, node1.getChildCount());
1480:       assertFalse(node1.isCatch());
1481:       assertEquals(308803, node1.getSourcePosition());
1482:       assertEquals(40, node1.getType());
1483:       assertFalse(node1.isDefaultCase());
1484:       assertFalse(node1.isSetterDef());
1485:       assertFalse(node1.isTry());
1486:       assertFalse(node1.isVar());
1487:       assertFalse(node1.isDebugger());
1488:       assertFalse(node1.isFunction());
1489:       assertEquals(1603, node1.getCharno());
1490:       assertFalse(node1.isStringKey());
1491:       assertFalse(node1.isParamList());
1492:       assertFalse(node1.isArrayLit());
1493:       assertFalse(node1.isReturn());
1494:       assertFalse(node1.isAssignAdd());
1495:       assertFalse(node1.isOr());
1496:       assertFalse(node1.isLabel());
1497:       assertFalse(node1.isDec());
1498:       assertFalse(node1.hasChildren());
1499:       assertFalse(node1.isEmpty());
1500:       assertFalse(node1.isWhile());
1501:       assertFalse(node1.isDo());
1502:       assertFalse(node1.isNew());
1503:       assertFalse(node1.isAdd());
1504:       assertEquals(75, node1.getLineno());
1505:       assertFalse(node1.isTrue());
1506:       assertFalse(node1.isAssign());
1507:       assertFalse(node1.isDelProp());
1508:       assertFalse(node1.isBreak());
1509:       assertFalse(node1.isNull());
1510:       assertFalse(node1.isTypeOf());
1511:       assertFalse(node1.isVoid());
1512:       assertFalse(node1.isName());
1513:       assertFalse(node1.isCall());
1514:       assertFalse(node1.isExprResult());
1515:       assertFalse(node1.isGetElem());
1516:       assertFalse(node2.isParamList());
1517:       assertFalse(node2.isSetterDef());
1518:       assertFalse(node2.isNull());
1519:       assertFalse(node2.isName());
1520:       assertFalse(node2.isVar());
1521:       assertFalse(node2.isCatch());
1522:       assertFalse(node2.isCall());
1523:       assertEquals(308803, node2.getSourcePosition());
1524:       assertEquals(40, node2.getType());
1525:       assertEquals(0, node2.getChildCount());
1526:       assertFalse(node2.isFunction());
1527:       assertFalse(node2.isRegExp());
1528:       assertFalse(node2.isDebugger());
1529:       assertFalse(node2.isBlock());
1530:       assertEquals(1603, node2.getCharno());
1531:       assertFalse(node2.isArrayLit());
1532:       assertFalse(node2.isWhile());
1533:       assertTrue(node2.isString());
1534:       assertFalse(node2.isTry());
1535:       assertFalse(node2.isStringKey());
1536:       assertFalse(node2.isGetterDef());
1537:       assertFalse(node2.isLabel());
1538:       assertFalse(node2.isReturn());
1539:       assertFalse(node2.isLabelName());
1540:       assertFalse(node2.isAssignAdd());
1541:       assertFalse(node2.isDelProp());
1542:       assertEquals(75, node2.getLineno());
1543:       assertFalse(node2.isGetElem());
1544:       assertFalse(node2.hasChildren());
1545:       assertFalse(node2.isDec());
1546:       assertFalse(node2.isAssign());
1547:       assertFalse(node2.isTypeOf());
1548:       assertFalse(node2.isNew());
1549:       assertFalse(node2.isTrue());
1550:       assertFalse(node2.isAdd());
1551:       assertFalse(node2.isExprResult());
1552:       assertFalse(node2.isDefaultCase());
1553:       assertFalse(node2.isDo());
1554:       assertFalse(node2.isVoid());
1555:       assertFalse(node2.isEmpty());
1556:       assertFalse(node2.isOr());
1557:       assertFalse(node2.isGetProp());
1558:       assertFalse(node2.isThis());
1559:       assertFalse(node2.isBreak());
1560:       assertFalse(node2.isFalse());
1561:       assertFalse(node2.isThrow());
1562:       assertFalse(node2.isInstanceOf());
1563:       assertFalse(node2.isHook());
1564:       assertFalse(node2.isComma());
1565:       assertFalse(node2.isWith());
1566:       assertFalse(node2.isScript());
1567:       assertFalse(node2.hasOneChild());
1568:       assertFalse(node2.isSwitch());
1569:       assertFalse(node2.isAnd());
1570:       assertFalse(node2.isCase());
1571:       assertFalse(node2.isNumber());
1572:       assertFalse(node2.isNot());
1573:       assertFalse(node2.isObjectLit());
1574:       assertFalse(node2.isNE());
1575:       assertFalse(node2.isIf());
1576:       assertFalse(node2.isContinue());
1577:       assertFalse(node2.isCast());
1578:       assertFalse(node2.isFor());
1579:       assertFalse(node2.hasMoreThanOneChild());
1580:       assertFalse(node2.isInc());
1581:       assertFalse(node2.isIn());
1582:       assertFalse(node3.isDec());
1583:       assertFalse(node3.isNumber());
1584:       assertFalse(node3.isTypeOf());
1585:       assertFalse(node3.isAssign());
1586:       assertFalse(node3.isLabelName());
1587:       assertFalse(node3.isGetElem());
1588:       assertFalse(node3.isCast());
1589:       assertFalse(node3.isReturn());
1590:       assertFalse(node3.isLabel());
1591:       assertFalse(node3.isAssignAdd());
1592:       assertFalse(node3.isWhile());
1593:       assertFalse(node3.isDo());
1594:       assertFalse(node3.isAdd());
1595:       assertFalse(node3.isExprResult());
1596:       assertFalse(node3.hasMoreThanOneChild());
1597:       assertFalse(node3.isWith());
1598:       assertFalse(node3.isInstanceOf());
1599:       assertFalse(node3.isOr());
1600:       assertEquals((-2500), node3.getType());
1601:       assertFalse(node3.isName());
1602:       assertFalse(node3.isNull());
1603:       assertFalse(node3.isThis());
1604:       assertFalse(node3.isHook());
1605:       assertFalse(node3.isVar());
1606:       assertFalse(node3.isNew());
1607:       assertEquals(308803, node3.getSourcePosition());
1608:       assertFalse(node3.isBlock());
1609:       assertFalse(node3.isScript());
1610:       assertFalse(node3.isCase());
1611:       assertFalse(node3.isArrayLit());
1612:       assertFalse(node3.isStringKey());
1613:       assertFalse(node3.isSwitch());
1614:       assertFalse(node3.isParamList());
1615:       assertFalse(node3.isIf());
1616:       assertFalse(node3.isDelProp());
1617:       assertFalse(node3.isGetterDef());
1618:       assertTrue(node3.hasOneChild());
1619:       assertFalse(node3.isEmpty());
1620:       assertTrue(node3.hasChildren());
1621:       assertEquals(1, node3.getChildCount());
1622:       assertFalse(node3.isTry());
1623:       assertFalse(node3.isFor());
1624:       assertEquals(75, node3.getLineno());
1625:       assertFalse(node3.isDefaultCase());
1626:       assertFalse(node3.isRegExp());
1627:       assertFalse(node3.isInc());
1628:       assertFalse(node3.isCatch());
1629:       assertFalse(node3.isIn());
1630:       assertFalse(node3.isVoid());
1631:       assertFalse(node3.isTrue());
1632:       assertFalse(node3.isNE());
1633:       assertFalse(node3.isBreak());
1634:       assertFalse(node3.isComma());
1635:       assertFalse(node3.isSetterDef());
1636:       assertFalse(node3.isFalse());
1637:       assertFalse(node3.isGetProp());
1638:       assertFalse(node3.isCall());
1639:       assertFalse(node3.isThrow());
1640:       assertFalse(node3.isNot());
1641:       assertFalse(node3.isDebugger());
1642:       assertFalse(node3.isFunction());
1643:       assertFalse(node3.isObjectLit());
1644:       assertFalse(node3.isString());
1645:       assertFalse(node3.isContinue());
1646:       assertEquals(1603, node3.getCharno());
1647:       assertFalse(node3.isAnd());
1648:       assertFalse(node4.isWith());
1649:       assertFalse(node4.isObjectLit());
1650:       assertFalse(node4.isNot());
1651:       assertFalse(node4.isScript());
1652:       assertFalse(node4.isExprResult());
1653:       assertFalse(node4.isInstanceOf());
1654:       assertFalse(node4.isAnd());
1655:       assertFalse(node4.isFalse());
1656:       assertFalse(node4.isLabelName());
1657:       assertFalse(node4.isCast());
1658:       assertFalse(node4.isLabel());
1659:       assertFalse(node4.isAssignAdd());
1660:       assertFalse(node4.isThrow());
1661:       assertFalse(node4.isCase());
1662:       assertFalse(node4.isIn());
1663:       assertFalse(node4.isInc());
1664:       assertFalse(node4.hasMoreThanOneChild());
1665:       assertFalse(node4.isIf());
1666:       assertFalse(node4.isSwitch());
1667:       assertFalse(node4.isNE());
1668:       assertFalse(node4.isStringKey());
1669:       assertFalse(node4.isFor());
1670:       assertFalse(node4.isGetterDef());
1671:       assertFalse(node4.isNumber());
1672:       assertTrue(node4.isString());
1673:       assertFalse(node4.isTry());
1674:       assertFalse(node4.isBlock());
1675:       assertFalse(node4.hasOneChild());
1676:       assertFalse(node4.isHook());
1677:       assertFalse(node4.isThis());
1678:       assertEquals(308803, node4.getSourcePosition());
1679:       assertEquals(40, node4.getType());
1680:       assertFalse(node4.isRegExp());
1681:       assertFalse(node4.isCatch());
1682:       assertFalse(node4.isDebugger());
1683:       assertFalse(node4.isVoid());
1684:       assertFalse(node4.isNull());
1685:       assertFalse(node4.isTrue());
1686:       assertFalse(node4.isParamList());
1687:       assertFalse(node4.isEmpty());
1688:       assertFalse(node4.isArrayLit());
1689:       assertFalse(node4.isSetterDef());
1690:       assertFalse(node4.isAdd());
1691:       assertFalse(node4.isNew());
1692:       assertFalse(node4.isFunction());
1693:       assertEquals(0, node4.getChildCount());
1694:       assertFalse(node4.isVar());
1695:       assertFalse(node4.isDefaultCase());
1696:       assertFalse(node4.isDo());
1697:       assertFalse(node4.isContinue());
1698:       assertFalse(node4.isOr());
1699:       assertEquals(1603, node4.getCharno());
1700:       assertFalse(node4.isName());
1701:       assertFalse(node4.isGetElem());
1702:       assertFalse(node4.isDelProp());
1703:       assertFalse(node4.isBreak());
1704:       assertFalse(node4.isDec());
1705:       assertFalse(node4.isAssign());
1706:       assertFalse(node4.isTypeOf());
1707:       assertFalse(node4.isCall());
1708:       assertFalse(node4.isGetProp());
1709:       assertFalse(node4.isReturn());
1710:       assertFalse(node4.isComma());
1711:       assertFalse(node4.hasChildren());
1712:       assertFalse(node4.isWhile());
1713:       assertEquals(75, node4.getLineno());
1714:       
1715:       node0.checkTreeTypeAwareEqualsImpl(node1);
1716:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1717:       assertEquals(4095, Node.COLUMN_MASK);
1718:       assertEquals(55, Node.INFERRED_FUNCTION);
1719:       assertEquals(36, Node.QUOTED_PROP);
1720:       assertEquals(8, Node.FLAG_NO_THROWS);
1721:       assertEquals(39, Node.EMPTY_BLOCK);
1722:       assertEquals(53, Node.INPUT_ID);
1723:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1724:       assertEquals(40, Node.ORIGINALNAME_PROP);
1725:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1726:       assertEquals(47, Node.IS_DISPATCHER);
1727:       assertEquals(50, Node.FREE_CALL);
1728:       assertEquals(2, Node.POST_FLAG);
1729:       assertEquals(54, Node.SLASH_V);
1730:       assertEquals(43, Node.IS_CONSTANT_NAME);
1731:       assertEquals(12, Node.COLUMN_BITS);
1732:       assertEquals(46, Node.IS_NAMESPACE);
1733:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1734:       assertEquals(30, Node.VAR_ARGS_NAME);
1735:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1736:       assertEquals(32, Node.INCRDECR_PROP);
1737:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1738:       assertEquals(57, Node.LAST_PROP);
1739:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1740:       assertEquals(1, Node.DECR_FLAG);
1741:       assertEquals(29, Node.JSDOC_INFO_PROP);
1742:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1743:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1744:       assertEquals(52, Node.LENGTH);
1745:       assertEquals(57, Node.REFLECTED_OBJECT);
1746:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1747:       assertEquals(37, Node.OPT_ARG_NAME);
1748:       assertEquals(56, Node.CHANGE_TIME);
1749:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1750:       assertEquals(49, Node.DIRECT_EVAL);
1751:       assertEquals(48, Node.DIRECTIVES);
1752:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1753:       assertEquals(29, Node.JSDOC_INFO_PROP);
1754:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1755:       assertEquals(53, Node.INPUT_ID);
1756:       assertEquals(43, Node.IS_CONSTANT_NAME);
1757:       assertEquals(36, Node.QUOTED_PROP);
1758:       assertEquals(37, Node.OPT_ARG_NAME);
1759:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1760:       assertEquals(46, Node.IS_NAMESPACE);
1761:       assertEquals(56, Node.CHANGE_TIME);
1762:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1763:       assertEquals(55, Node.INFERRED_FUNCTION);
1764:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1765:       assertEquals(39, Node.EMPTY_BLOCK);
1766:       assertEquals(57, Node.LAST_PROP);
1767:       assertEquals(47, Node.IS_DISPATCHER);
1768:       assertEquals(2, Node.POST_FLAG);
1769:       assertEquals(30, Node.VAR_ARGS_NAME);
1770:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1771:       assertEquals(57, Node.REFLECTED_OBJECT);
1772:       assertEquals(50, Node.FREE_CALL);
1773:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1774:       assertEquals(52, Node.LENGTH);
1775:       assertEquals(40, Node.ORIGINALNAME_PROP);
1776:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1777:       assertEquals(8, Node.FLAG_NO_THROWS);
1778:       assertEquals(48, Node.DIRECTIVES);
1779:       assertEquals(49, Node.DIRECT_EVAL);
1780:       assertEquals(54, Node.SLASH_V);
1781:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1782:       assertEquals(12, Node.COLUMN_BITS);
1783:       assertEquals(4095, Node.COLUMN_MASK);
1784:       assertEquals(32, Node.INCRDECR_PROP);
1785:       assertEquals(1, Node.DECR_FLAG);
1786:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1787:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1788:       assertFalse(nodeArray0.equals((Object)nodeArray1));
1789:       assertFalse(node0.equals((Object)node3));
1790:       assertFalse(node0.equals((Object)node1));
1791:       assertFalse(node0.equals((Object)node4));
1792:       assertFalse(node0.equals((Object)node2));
1793:       assertFalse(node1.equals((Object)node3));
1794:       assertFalse(node1.equals((Object)node0));
1795:       assertEquals(0, nodeArray0.length);
1796:       assertFalse(node0.isHook());
1797:       assertEquals(115, node0.getCharno());
1798:       assertFalse(node0.isThrow());
1799:       assertEquals(4702323, node0.getSourcePosition());
1800:       assertTrue(node0.isContinue());
1801:       assertFalse(node0.isSwitch());
1802:       assertFalse(node0.isThis());
1803:       assertFalse(node0.isBreak());
1804:       assertFalse(node0.isComma());
1805:       assertFalse(node0.isFalse());
1806:       assertFalse(node0.isInstanceOf());
1807:       assertFalse(node0.isObjectLit());
1808:       assertFalse(node0.isCase());
1809:       assertFalse(node0.isAnd());
1810:       assertFalse(node0.isScript());
1811:       assertFalse(node0.isGetterDef());
1812:       assertFalse(node0.isGetProp());
1813:       assertFalse(node0.isNot());
1814:       assertFalse(node0.isString());
1815:       assertFalse(node0.isArrayLit());
1816:       assertFalse(node0.isLabelName());
1817:       assertFalse(node0.isExprResult());
1818:       assertFalse(node0.isTypeOf());
1819:       assertFalse(node0.isDelProp());
1820:       assertFalse(node0.isVoid());
1821:       assertFalse(node0.hasChildren());
1822:       assertFalse(node0.isDec());
1823:       assertFalse(node0.isAssign());
1824:       assertFalse(node0.isGetElem());
1825:       assertEquals(0, node0.getChildCount());
1826:       assertFalse(node0.isDo());
1827:       assertFalse(node0.isAssignAdd());
1828:       assertFalse(node0.isLabel());
1829:       assertFalse(node0.isDefaultCase());
1830:       assertFalse(node0.isTrue());
1831:       assertFalse(node0.isNull());
1832:       assertFalse(node0.isNew());
1833:       assertFalse(node0.isEmpty());
1834:       assertFalse(node0.isAdd());
1835:       assertFalse(node0.isOr());
1836:       assertFalse(node0.isVar());
1837:       assertFalse(node0.isCall());
1838:       assertFalse(node0.isName());
1839:       assertFalse(node0.isBlock());
1840:       assertFalse(node0.isStringKey());
1841:       assertFalse(node0.hasMoreThanOneChild());
1842:       assertFalse(node0.isReturn());
1843:       assertFalse(node0.isWhile());
1844:       assertEquals(1148, node0.getLineno());
1845:       assertFalse(node0.isParamList());
1846:       assertFalse(node0.isNumber());
1847:       assertFalse(node0.isDebugger());
1848:       assertEquals(117, node0.getType());
1849:       assertFalse(node0.isCast());
1850:       assertFalse(node0.hasOneChild());
1851:       assertFalse(node0.isTry());
1852:       assertFalse(node0.isFor());
1853:       assertFalse(node0.isIf());
1854:       assertFalse(node0.isFunction());
1855:       assertFalse(node0.isRegExp());
1856:       assertFalse(node0.isWith());
1857:       assertFalse(node0.isCatch());
1858:       assertFalse(node0.isNE());
1859:       assertFalse(node0.isInc());
1860:       assertFalse(node0.isSetterDef());
1861:       assertFalse(node0.isIn());
1862:       assertFalse(node1.isInstanceOf());
1863:       assertFalse(node1.isObjectLit());
1864:       assertFalse(node1.isThis());
1865:       assertFalse(node1.isNot());
1866:       assertFalse(node1.isComma());
1867:       assertFalse(node1.isScript());
1868:       assertFalse(node1.isGetProp());
1869:       assertFalse(node1.isCast());
1870:       assertFalse(node1.isThrow());
1871:       assertFalse(node1.isFalse());
1872:       assertFalse(node1.isAnd());
1873:       assertFalse(node1.isSwitch());
1874:       assertFalse(node1.isLabelName());
1875:       assertFalse(node1.isIn());
1876:       assertFalse(node1.isContinue());
1877:       assertFalse(node1.hasMoreThanOneChild());
1878:       assertFalse(node1.isGetterDef());
1879:       assertFalse(node1.isNumber());
1880:       assertFalse(node1.isFor());
1881:       assertFalse(node1.isInc());
1882:       assertTrue(node1.isString());
1883:       assertFalse(node1.hasOneChild());
1884:       assertFalse(node1.isCase());
1885:       assertFalse(node1.isHook());
1886:       assertFalse(node1.isBlock());
1887:       assertFalse(node1.isRegExp());
1888:       assertFalse(node1.isIf());
1889:       assertFalse(node1.isWith());
1890:       assertFalse(node1.isNE());
1891:       assertEquals(0, node1.getChildCount());
1892:       assertFalse(node1.isCatch());
1893:       assertEquals(308803, node1.getSourcePosition());
1894:       assertEquals(40, node1.getType());
1895:       assertFalse(node1.isDefaultCase());
1896:       assertFalse(node1.isSetterDef());
1897:       assertFalse(node1.isTry());
1898:       assertFalse(node1.isVar());
1899:       assertFalse(node1.isDebugger());
1900:       assertFalse(node1.isFunction());
1901:       assertEquals(1603, node1.getCharno());
1902:       assertFalse(node1.isStringKey());
1903:       assertFalse(node1.isParamList());
1904:       assertFalse(node1.isArrayLit());
1905:       assertFalse(node1.isReturn());
1906:       assertFalse(node1.isAssignAdd());
1907:       assertFalse(node1.isOr());
1908:       assertFalse(node1.isLabel());
1909:       assertFalse(node1.isDec());
1910:       assertFalse(node1.hasChildren());
1911:       assertFalse(node1.isEmpty());
1912:       assertFalse(node1.isWhile());
1913:       assertFalse(node1.isDo());
1914:       assertFalse(node1.isNew());
1915:       assertFalse(node1.isAdd());
1916:       assertEquals(75, node1.getLineno());
1917:       assertFalse(node1.isTrue());
1918:       assertFalse(node1.isAssign());
1919:       assertFalse(node1.isDelProp());
1920:       assertFalse(node1.isBreak());
1921:       assertFalse(node1.isNull());
1922:       assertFalse(node1.isTypeOf());
1923:       assertFalse(node1.isVoid());
1924:       assertFalse(node1.isName());
1925:       assertFalse(node1.isCall());
1926:       assertFalse(node1.isExprResult());
1927:       assertFalse(node1.isGetElem());
1928:       
1929:       boolean boolean1 = node1.isOnlyModifiesArgumentsCall();
1930:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1931:       assertEquals(29, Node.JSDOC_INFO_PROP);
1932:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1933:       assertEquals(53, Node.INPUT_ID);
1934:       assertEquals(43, Node.IS_CONSTANT_NAME);
1935:       assertEquals(36, Node.QUOTED_PROP);
1936:       assertEquals(37, Node.OPT_ARG_NAME);
1937:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1938:       assertEquals(46, Node.IS_NAMESPACE);
1939:       assertEquals(56, Node.CHANGE_TIME);
1940:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1941:       assertEquals(55, Node.INFERRED_FUNCTION);
1942:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1943:       assertEquals(39, Node.EMPTY_BLOCK);
1944:       assertEquals(57, Node.LAST_PROP);
1945:       assertEquals(47, Node.IS_DISPATCHER);
1946:       assertEquals(2, Node.POST_FLAG);
1947:       assertEquals(30, Node.VAR_ARGS_NAME);
1948:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1949:       assertEquals(57, Node.REFLECTED_OBJECT);
1950:       assertEquals(50, Node.FREE_CALL);
1951:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1952:       assertEquals(52, Node.LENGTH);
1953:       assertEquals(40, Node.ORIGINALNAME_PROP);
1954:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1955:       assertEquals(8, Node.FLAG_NO_THROWS);
1956:       assertEquals(48, Node.DIRECTIVES);
1957:       assertEquals(49, Node.DIRECT_EVAL);
1958:       assertEquals(54, Node.SLASH_V);
1959:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1960:       assertEquals(12, Node.COLUMN_BITS);
1961:       assertEquals(4095, Node.COLUMN_MASK);
1962:       assertEquals(32, Node.INCRDECR_PROP);
1963:       assertEquals(1, Node.DECR_FLAG);
1964:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1965:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1966:       assertFalse(node1.equals((Object)node3));
1967:       assertFalse(node1.equals((Object)node0));
1968:       assertTrue(boolean1 == boolean0);
1969:       assertFalse(node1.isInstanceOf());
1970:       assertFalse(node1.isObjectLit());
1971:       assertFalse(node1.isThis());
1972:       assertFalse(node1.isNot());
1973:       assertFalse(node1.isComma());
1974:       assertFalse(node1.isScript());
1975:       assertFalse(node1.isGetProp());
1976:       assertFalse(node1.isCast());
1977:       assertFalse(node1.isThrow());
1978:       assertFalse(node1.isFalse());
1979:       assertFalse(node1.isAnd());
1980:       assertFalse(node1.isSwitch());
1981:       assertFalse(node1.isLabelName());
1982:       assertFalse(node1.isIn());
1983:       assertFalse(node1.isContinue());
1984:       assertFalse(node1.hasMoreThanOneChild());
1985:       assertFalse(node1.isGetterDef());
1986:       assertFalse(node1.isNumber());
1987:       assertFalse(node1.isFor());
1988:       assertFalse(node1.isInc());
1989:       assertTrue(node1.isString());
1990:       assertFalse(node1.hasOneChild());
1991:       assertFalse(node1.isCase());
1992:       assertFalse(node1.isHook());
1993:       assertFalse(node1.isBlock());
1994:       assertFalse(node1.isRegExp());
1995:       assertFalse(node1.isIf());
1996:       assertFalse(node1.isWith());
1997:       assertFalse(node1.isNE());
1998:       assertEquals(0, node1.getChildCount());
1999:       assertFalse(node1.isCatch());
2000:       assertEquals(308803, node1.getSourcePosition());
2001:       assertEquals(40, node1.getType());
2002:       assertFalse(node1.isDefaultCase());
2003:       assertFalse(node1.isSetterDef());
2004:       assertFalse(node1.isTry());
2005:       assertFalse(node1.isVar());
2006:       assertFalse(node1.isDebugger());
2007:       assertFalse(node1.isFunction());
2008:       assertEquals(1603, node1.getCharno());
2009:       assertFalse(node1.isStringKey());
2010:       assertFalse(node1.isParamList());
2011:       assertFalse(node1.isArrayLit());
2012:       assertFalse(node1.isReturn());
2013:       assertFalse(node1.isAssignAdd());
2014:       assertFalse(node1.isOr());
2015:       assertFalse(node1.isLabel());
2016:       assertFalse(node1.isDec());
2017:       assertFalse(node1.hasChildren());
2018:       assertFalse(node1.isEmpty());
2019:       assertFalse(node1.isWhile());
2020:       assertFalse(node1.isDo());
2021:       assertFalse(node1.isNew());
2022:       assertFalse(node1.isAdd());
2023:       assertEquals(75, node1.getLineno());
2024:       assertFalse(node1.isTrue());
2025:       assertFalse(node1.isAssign());
2026:       assertFalse(node1.isDelProp());
2027:       assertFalse(node1.isBreak());
2028:       assertFalse(node1.isNull());
2029:       assertFalse(node1.isTypeOf());
2030:       assertFalse(node1.isVoid());
2031:       assertFalse(node1.isName());
2032:       assertFalse(node1.isCall());
2033:       assertFalse(node1.isExprResult());
2034:       assertFalse(node1.isGetElem());
2035:       
2036:       boolean boolean2 = node1.isRegExp();
2037:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2038:       assertEquals(29, Node.JSDOC_INFO_PROP);
2039:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2040:       assertEquals(53, Node.INPUT_ID);
2041:       assertEquals(43, Node.IS_CONSTANT_NAME);
2042:       assertEquals(36, Node.QUOTED_PROP);
2043:       assertEquals(37, Node.OPT_ARG_NAME);
2044:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2045:       assertEquals(46, Node.IS_NAMESPACE);
2046:       assertEquals(56, Node.CHANGE_TIME);
2047:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2048:       assertEquals(55, Node.INFERRED_FUNCTION);
2049:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2050:       assertEquals(39, Node.EMPTY_BLOCK);
2051:       assertEquals(57, Node.LAST_PROP);
2052:       assertEquals(47, Node.IS_DISPATCHER);
2053:       assertEquals(2, Node.POST_FLAG);
2054:       assertEquals(30, Node.VAR_ARGS_NAME);
2055:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2056:       assertEquals(57, Node.REFLECTED_OBJECT);
2057:       assertEquals(50, Node.FREE_CALL);
2058:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2059:       assertEquals(52, Node.LENGTH);
2060:       assertEquals(40, Node.ORIGINALNAME_PROP);
2061:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2062:       assertEquals(8, Node.FLAG_NO_THROWS);
2063:       assertEquals(48, Node.DIRECTIVES);
2064:       assertEquals(49, Node.DIRECT_EVAL);
2065:       assertEquals(54, Node.SLASH_V);
2066:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2067:       assertEquals(12, Node.COLUMN_BITS);
2068:       assertEquals(4095, Node.COLUMN_MASK);
2069:       assertEquals(32, Node.INCRDECR_PROP);
2070:       assertEquals(1, Node.DECR_FLAG);
2071:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2072:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2073:       assertTrue(boolean2 == boolean1);
2074:       assertTrue(boolean2 == boolean0);
2075:       assertFalse(node1.equals((Object)node3));
2076:       assertFalse(node1.equals((Object)node0));
2077:       assertFalse(node1.isInstanceOf());
2078:       assertFalse(node1.isObjectLit());
2079:       assertFalse(node1.isThis());
2080:       assertFalse(node1.isNot());
2081:       assertFalse(node1.isComma());
2082:       assertFalse(node1.isScript());
2083:       assertFalse(node1.isGetProp());
2084:       
2085:       boolean boolean3 = node0.isLocalResultCall();
2086:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2087:       assertEquals(4095, Node.COLUMN_MASK);
2088:       assertEquals(55, Node.INFERRED_FUNCTION);
2089:       assertEquals(36, Node.QUOTED_PROP);
2090:       assertEquals(8, Node.FLAG_NO_THROWS);
2091:       assertEquals(39, Node.EMPTY_BLOCK);
2092:       assertEquals(53, Node.INPUT_ID);
2093:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2094:       assertEquals(40, Node.ORIGINALNAME_PROP);
2095:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2096:       assertEquals(47, Node.IS_DISPATCHER);
2097:       assertEquals(50, Node.FREE_CALL);
2098:       assertEquals(2, Node.POST_FLAG);
2099:       assertEquals(54, Node.SLASH_V);
2100:       assertEquals(43, Node.IS_CONSTANT_NAME);
2101:       assertEquals(12, Node.COLUMN_BITS);
2102:       assertEquals(46, Node.IS_NAMESPACE);
2103:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2104:       assertEquals(30, Node.VAR_ARGS_NAME);
2105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2106:       assertEquals(32, Node.INCRDECR_PROP);
2107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2108:       assertEquals(57, Node.LAST_PROP);
2109:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2110:       assertEquals(1, Node.DECR_FLAG);
2111:       assertEquals(29, Node.JSDOC_INFO_PROP);
2112:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2113:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2114:       assertEquals(52, Node.LENGTH);
2115:       assertEquals(57, Node.REFLECTED_OBJECT);
2116:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2117:       assertEquals(37, Node.OPT_ARG_NAME);
2118:       assertEquals(56, Node.CHANGE_TIME);
2119:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2120:       assertEquals(49, Node.DIRECT_EVAL);
2121:       assertEquals(48, Node.DIRECTIVES);
2122:       assertFalse(nodeArray0.equals((Object)nodeArray1));
2123:       assertTrue(boolean3 == boolean0);
2124:       assertTrue(boolean3 == boolean1);
2125:       assertTrue(boolean3 == boolean2);
2126:       assertFalse(node0.equals((Object)node3));
2127:       assertFalse(node0.equals((Object)node1));
2128:       assertFalse(node0.equals((Object)node4));
2129:       assertFalse(node0.equals((Object)node2));
2130:       assertEquals(0, nodeArray0.length);
2131:       
2132:       Node node5 = node1.clonePropsFrom(node4);
2133:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2134:       assertEquals(4095, Node.COLUMN_MASK);
2135:       assertEquals(55, Node.INFERRED_FUNCTION);
2136:       assertEquals(36, Node.QUOTED_PROP);
2137:       assertEquals(8, Node.FLAG_NO_THROWS);
2138:       assertEquals(39, Node.EMPTY_BLOCK);
2139:       assertEquals(53, Node.INPUT_ID);
2140:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2141:       assertEquals(40, Node.ORIGINALNAME_PROP);
2142:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2143:       assertEquals(47, Node.IS_DISPATCHER);
2144:       assertEquals(50, Node.FREE_CALL);
2145:       assertEquals(2, Node.POST_FLAG);
2146:       assertEquals(54, Node.SLASH_V);
2147:       assertEquals(43, Node.IS_CONSTANT_NAME);
2148:       assertEquals(12, Node.COLUMN_BITS);
2149:       assertEquals(46, Node.IS_NAMESPACE);
2150:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2151:       assertEquals(30, Node.VAR_ARGS_NAME);
2152:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2153:       assertEquals(32, Node.INCRDECR_PROP);
2154:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2155:       assertEquals(57, Node.LAST_PROP);
2156:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2157:       assertEquals(1, Node.DECR_FLAG);
2158:       assertEquals(29, Node.JSDOC_INFO_PROP);
2159:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2160:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2161:       assertEquals(52, Node.LENGTH);
2162:       assertEquals(57, Node.REFLECTED_OBJECT);
2163:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2164:       assertEquals(37, Node.OPT_ARG_NAME);
2165:       assertEquals(56, Node.CHANGE_TIME);
2166:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2167:       assertEquals(49, Node.DIRECT_EVAL);
2168:       assertEquals(48, Node.DIRECTIVES);
2169:       assertEquals(40, Node.ORIGINALNAME_PROP);
2170:       assertEquals(50, Node.FREE_CALL);
2171:       assertEquals(57, Node.REFLECTED_OBJECT);
2172:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2173:       assertEquals(54, Node.SLASH_V);
2174:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2175:       assertEquals(48, Node.DIRECTIVES);
2176:       assertEquals(4095, Node.COLUMN_MASK);
2177:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2178:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2179:       assertEquals(1, Node.DECR_FLAG);
2180:       assertEquals(32, Node.INCRDECR_PROP);
2181:       assertEquals(43, Node.IS_CONSTANT_NAME);
2182:       assertEquals(12, Node.COLUMN_BITS);
2183:       assertEquals(46, Node.IS_NAMESPACE);
2184:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2185:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2186:       assertEquals(47, Node.IS_DISPATCHER);
2187:       assertEquals(56, Node.CHANGE_TIME);
2188:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2189:       assertEquals(37, Node.OPT_ARG_NAME);
2190:       assertEquals(2, Node.POST_FLAG);
2191:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2192:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2193:       assertEquals(30, Node.VAR_ARGS_NAME);
2194:       assertEquals(49, Node.DIRECT_EVAL);
2195:       assertEquals(57, Node.LAST_PROP);
2196:       assertEquals(8, Node.FLAG_NO_THROWS);
2197:       assertEquals(39, Node.EMPTY_BLOCK);
2198:       assertEquals(36, Node.QUOTED_PROP);
2199:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2200:       assertEquals(52, Node.LENGTH);
2201:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2202:       assertEquals(53, Node.INPUT_ID);
2203:       assertEquals(55, Node.INFERRED_FUNCTION);
2204:       assertEquals(29, Node.JSDOC_INFO_PROP);
2205:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2206:       assertEquals(29, Node.JSDOC_INFO_PROP);
2207:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2208:       assertEquals(53, Node.INPUT_ID);
2209:       assertEquals(43, Node.IS_CONSTANT_NAME);
2210:       assertEquals(36, Node.QUOTED_PROP);
2211:       assertEquals(37, Node.OPT_ARG_NAME);
2212:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2213:       assertEquals(46, Node.IS_NAMESPACE);
2214:       assertEquals(56, Node.CHANGE_TIME);
2215:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2216:       assertEquals(55, Node.INFERRED_FUNCTION);
2217:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2218:       assertEquals(39, Node.EMPTY_BLOCK);
2219:       assertEquals(57, Node.LAST_PROP);
2220:       assertEquals(47, Node.IS_DISPATCHER);
2221:       assertEquals(2, Node.POST_FLAG);
2222:       assertEquals(30, Node.VAR_ARGS_NAME);
2223:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2224:       assertEquals(57, Node.REFLECTED_OBJECT);
2225:       assertEquals(50, Node.FREE_CALL);
2226:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2227:       assertEquals(52, Node.LENGTH);
2228:       assertEquals(40, Node.ORIGINALNAME_PROP);
2229:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2230:       assertEquals(8, Node.FLAG_NO_THROWS);
2231:       assertEquals(48, Node.DIRECTIVES);
2232:       assertEquals(49, Node.DIRECT_EVAL);
2233:       assertEquals(54, Node.SLASH_V);
2234:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2235:       assertEquals(12, Node.COLUMN_BITS);
2236:       assertEquals(4095, Node.COLUMN_MASK);
2237:       assertEquals(32, Node.INCRDECR_PROP);
2238:       assertEquals(1, Node.DECR_FLAG);
2239:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2240:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2241:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2242:       assertEquals(43, Node.IS_CONSTANT_NAME);
2243:       assertEquals(36, Node.QUOTED_PROP);
2244:       assertEquals(29, Node.JSDOC_INFO_PROP);
2245:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2246:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2247:       assertEquals(55, Node.INFERRED_FUNCTION);
2248:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2249:       assertEquals(53, Node.INPUT_ID);
2250:       assertEquals(2, Node.POST_FLAG);
2251:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2252:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2253:       assertEquals(46, Node.IS_NAMESPACE);
2254:       assertEquals(47, Node.IS_DISPATCHER);
2255:       assertEquals(30, Node.VAR_ARGS_NAME);
2256:       assertEquals(40, Node.ORIGINALNAME_PROP);
2257:       assertEquals(52, Node.LENGTH);
2258:       assertEquals(54, Node.SLASH_V);
2259:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2260:       assertEquals(57, Node.REFLECTED_OBJECT);
2261:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2262:       assertEquals(50, Node.FREE_CALL);
2263:       assertEquals(1, Node.DECR_FLAG);
2264:       assertEquals(57, Node.LAST_PROP);
2265:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2266:       assertEquals(39, Node.EMPTY_BLOCK);
2267:       assertEquals(48, Node.DIRECTIVES);
2268:       assertEquals(32, Node.INCRDECR_PROP);
2269:       assertEquals(8, Node.FLAG_NO_THROWS);
2270:       assertEquals(12, Node.COLUMN_BITS);
2271:       assertEquals(56, Node.CHANGE_TIME);
2272:       assertEquals(49, Node.DIRECT_EVAL);
2273:       assertEquals(4095, Node.COLUMN_MASK);
2274:       assertEquals(37, Node.OPT_ARG_NAME);
2275:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2276:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2277:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2278:       assertEquals(57, Node.LAST_PROP);
2279:       assertEquals(54, Node.SLASH_V);
2280:       assertEquals(49, Node.DIRECT_EVAL);
2281:       assertEquals(1, Node.DECR_FLAG);
2282:       assertEquals(57, Node.REFLECTED_OBJECT);
2283:       assertEquals(46, Node.IS_NAMESPACE);
2284:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2285:       assertEquals(50, Node.FREE_CALL);
2286:       assertEquals(52, Node.LENGTH);
2287:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2288:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2289:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2290:       assertEquals(56, Node.CHANGE_TIME);
2291:       assertEquals(48, Node.DIRECTIVES);
2292:       assertEquals(32, Node.INCRDECR_PROP);
2293:       assertEquals(37, Node.OPT_ARG_NAME);
2294:       assertEquals(12, Node.COLUMN_BITS);
2295:       assertEquals(4095, Node.COLUMN_MASK);
2296:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2297:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2298:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2299:       assertEquals(43, Node.IS_CONSTANT_NAME);
2300:       assertEquals(53, Node.INPUT_ID);
2301:       assertEquals(55, Node.INFERRED_FUNCTION);
2302:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2303:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2304:       assertEquals(36, Node.QUOTED_PROP);
2305:       assertEquals(2, Node.POST_FLAG);
2306:       assertEquals(8, Node.FLAG_NO_THROWS);
2307:       assertEquals(39, Node.EMPTY_BLOCK);
2308:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2309:       assertEquals(29, Node.JSDOC_INFO_PROP);
2310:       assertEquals(40, Node.ORIGINALNAME_PROP);
2311:       assertEquals(30, Node.VAR_ARGS_NAME);
2312:       assertEquals(47, Node.IS_DISPATCHER);
2313:       assertEquals(47, Node.IS_DISPATCHER);
2314:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2315:       assertEquals(56, Node.CHANGE_TIME);
2316:       assertEquals(29, Node.JSDOC_INFO_PROP);
2317:       assertEquals(37, Node.OPT_ARG_NAME);
2318:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2319:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2320:       assertEquals(12, Node.COLUMN_BITS);
2321:       assertEquals(2, Node.POST_FLAG);
2322:       assertEquals(30, Node.VAR_ARGS_NAME);
2323:       assertEquals(57, Node.LAST_PROP);
2324:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2325:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2326:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2327:       assertEquals(49, Node.DIRECT_EVAL);
2328:       assertEquals(52, Node.LENGTH);
2329:       assertEquals(53, Node.INPUT_ID);
2330:       assertEquals(57, Node.REFLECTED_OBJECT);
2331:       assertEquals(55, Node.INFERRED_FUNCTION);
2332:       assertEquals(8, Node.FLAG_NO_THROWS);
2333:       assertEquals(36, Node.QUOTED_PROP);
2334:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2335:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2336:       assertEquals(40, Node.ORIGINALNAME_PROP);
2337:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2338:       assertEquals(39, Node.EMPTY_BLOCK);
2339:       assertEquals(48, Node.DIRECTIVES);
2340:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2341:       assertEquals(4095, Node.COLUMN_MASK);
2342:       assertEquals(43, Node.IS_CONSTANT_NAME);
2343:       assertEquals(32, Node.INCRDECR_PROP);
2344:       assertEquals(1, Node.DECR_FLAG);
2345:       assertEquals(46, Node.IS_NAMESPACE);
2346:       assertEquals(54, Node.SLASH_V);
2347:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2348:       assertEquals(50, Node.FREE_CALL);
2349:       assertFalse(nodeArray0.equals((Object)nodeArray1));
2350:       assertFalse(node0.equals((Object)node3));
2351:       assertFalse(node0.equals((Object)node1));
2352:       assertFalse(node0.equals((Object)node4));
2353:       assertFalse(node0.equals((Object)node2));
2354:       assertFalse(node5.equals((Object)node3));
2355:       assertFalse(node5.equals((Object)node0));
2356:       assertFalse(node1.equals((Object)node3));
2357:       assertFalse(node1.equals((Object)node0));
2358:       assertFalse(node2.equals((Object)node3));
2359:       assertFalse(node2.equals((Object)node0));
2360:       assertFalse(nodeArray1.equals((Object)nodeArray0));
2361:       assertFalse(node3.equals((Object)node2));
2362:       assertFalse(node3.equals((Object)node1));
2363:       assertFalse(node3.equals((Object)node0));
2364:       assertFalse(node3.equals((Object)node4));
2365:       assertFalse(node4.equals((Object)node0));
2366:       assertFalse(node4.equals((Object)node3));
2367:       assertEquals(0, nodeArray0.length);
2368:       assertEquals(1, nodeArray1.length);
2369:       
2370:       Node node6 = Node.newNumber((double) 53);
2371:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2372:       assertEquals(36, Node.QUOTED_PROP);
2373:       assertEquals(43, Node.IS_CONSTANT_NAME);
2374:       assertEquals(55, Node.INFERRED_FUNCTION);
2375:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2376:       assertEquals(29, Node.JSDOC_INFO_PROP);
2377:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2378:       assertEquals(53, Node.INPUT_ID);
2379:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2380:       assertEquals(39, Node.EMPTY_BLOCK);
2381:       assertEquals(2, Node.POST_FLAG);
2382:       assertEquals(47, Node.IS_DISPATCHER);
2383:       assertEquals(46, Node.IS_NAMESPACE);
2384:       assertEquals(40, Node.ORIGINALNAME_PROP);
2385:       assertEquals(57, Node.LAST_PROP);
2386:       assertEquals(30, Node.VAR_ARGS_NAME);
2387:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2388:       assertEquals(57, Node.REFLECTED_OBJECT);
2389:       assertEquals(54, Node.SLASH_V);
2390:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2391:       assertEquals(1, Node.DECR_FLAG);
2392:       assertEquals(32, Node.INCRDECR_PROP);
2393:       assertEquals(50, Node.FREE_CALL);
2394:       assertEquals(52, Node.LENGTH);
2395:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2396:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2397:       assertEquals(8, Node.FLAG_NO_THROWS);
2398:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2399:       assertEquals(37, Node.OPT_ARG_NAME);
2400:       assertEquals(48, Node.DIRECTIVES);
2401:       assertEquals(56, Node.CHANGE_TIME);
2402:       assertEquals(12, Node.COLUMN_BITS);
2403:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2404:       assertEquals(4095, Node.COLUMN_MASK);
2405:       assertEquals(49, Node.DIRECT_EVAL);
2406:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2407:       assertFalse(node6.equals((Object)node5));
2408:       assertFalse(node6.equals((Object)node4));
2409:       assertFalse(node6.equals((Object)node0));
2410:       assertFalse(node6.equals((Object)node3));
2411:       assertFalse(node6.equals((Object)node1));
2412:       assertFalse(node6.equals((Object)node2));
2413:       
2414:       Node node7 = node1.useSourceInfoIfMissingFromForTree(node6);
2415:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2416:       assertEquals(36, Node.QUOTED_PROP);
2417:       assertEquals(43, Node.IS_CONSTANT_NAME);
2418:       assertEquals(55, Node.INFERRED_FUNCTION);
2419:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2420:       assertEquals(29, Node.JSDOC_INFO_PROP);
2421:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2422:       assertEquals(53, Node.INPUT_ID);
2423:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2424:       assertEquals(39, Node.EMPTY_BLOCK);
2425:       assertEquals(2, Node.POST_FLAG);
2426:       assertEquals(47, Node.IS_DISPATCHER);
2427:       assertEquals(46, Node.IS_NAMESPACE);
2428:       assertEquals(40, Node.ORIGINALNAME_PROP);
2429:       assertEquals(57, Node.LAST_PROP);
2430:       assertEquals(30, Node.VAR_ARGS_NAME);
2431:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2432:       assertEquals(57, Node.REFLECTED_OBJECT);
2433:       assertEquals(54, Node.SLASH_V);
2434:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2435:       assertEquals(1, Node.DECR_FLAG);
2436:       assertEquals(32, Node.INCRDECR_PROP);
2437:       assertEquals(50, Node.FREE_CALL);
2438:       assertEquals(52, Node.LENGTH);
2439:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2440:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2441:       assertEquals(8, Node.FLAG_NO_THROWS);
2442:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2443:       assertEquals(37, Node.OPT_ARG_NAME);
2444:       assertEquals(48, Node.DIRECTIVES);
2445:       assertEquals(56, Node.CHANGE_TIME);
2446:       assertEquals(12, Node.COLUMN_BITS);
2447:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2448:       assertEquals(4095, Node.COLUMN_MASK);
2449:       assertEquals(49, Node.DIRECT_EVAL);
2450:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2451:       assertEquals(53, Node.INPUT_ID);
2452:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2453:       assertEquals(43, Node.IS_CONSTANT_NAME);
2454:       assertEquals(47, Node.IS_DISPATCHER);
2455:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2456:       assertEquals(4095, Node.COLUMN_MASK);
2457:       assertEquals(2, Node.POST_FLAG);
2458:       assertEquals(46, Node.IS_NAMESPACE);
2459:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2460:       assertEquals(32, Node.INCRDECR_PROP);
2461:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2462:       assertEquals(1, Node.DECR_FLAG);
2463:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2464:       assertEquals(50, Node.FREE_CALL);
2465:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2466:       assertEquals(54, Node.SLASH_V);
2467:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2468:       assertEquals(57, Node.LAST_PROP);
2469:       assertEquals(49, Node.DIRECT_EVAL);
2470:       assertEquals(40, Node.ORIGINALNAME_PROP);
2471:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2472:       assertEquals(12, Node.COLUMN_BITS);
2473:       assertEquals(30, Node.VAR_ARGS_NAME);
2474:       assertEquals(37, Node.OPT_ARG_NAME);
2475:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2476:       assertEquals(39, Node.EMPTY_BLOCK);
2477:       assertEquals(56, Node.CHANGE_TIME);
2478:       assertEquals(48, Node.DIRECTIVES);
2479:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2480:       assertEquals(55, Node.INFERRED_FUNCTION);
2481:       assertEquals(29, Node.JSDOC_INFO_PROP);
2482:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2483:       assertEquals(36, Node.QUOTED_PROP);
2484:       assertEquals(57, Node.REFLECTED_OBJECT);
2485:       assertEquals(52, Node.LENGTH);
2486:       assertEquals(8, Node.FLAG_NO_THROWS);
2487:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2488:       assertEquals(29, Node.JSDOC_INFO_PROP);
2489:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2490:       assertEquals(53, Node.INPUT_ID);
2491:       assertEquals(43, Node.IS_CONSTANT_NAME);
2492:       assertEquals(36, Node.QUOTED_PROP);
2493:       assertEquals(37, Node.OPT_ARG_NAME);
2494:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2495:       assertEquals(46, Node.IS_NAMESPACE);
2496:       assertEquals(56, Node.CHANGE_TIME);
2497:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2498:       assertEquals(55, Node.INFERRED_FUNCTION);
2499:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2500:       assertEquals(39, Node.EMPTY_BLOCK);
2501:       assertEquals(57, Node.LAST_PROP);
2502:       assertEquals(47, Node.IS_DISPATCHER);
2503:       assertEquals(2, Node.POST_FLAG);
2504:       assertEquals(30, Node.VAR_ARGS_NAME);
2505:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2506:       assertEquals(57, Node.REFLECTED_OBJECT);
2507:       assertEquals(50, Node.FREE_CALL);
2508:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2509:       assertEquals(52, Node.LENGTH);
2510:       assertEquals(40, Node.ORIGINALNAME_PROP);
2511:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2512:       assertEquals(8, Node.FLAG_NO_THROWS);
2513:       assertEquals(48, Node.DIRECTIVES);
2514:       assertEquals(49, Node.DIRECT_EVAL);
2515:       assertEquals(54, Node.SLASH_V);
2516:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2517:       assertEquals(12, Node.COLUMN_BITS);
2518:       assertEquals(4095, Node.COLUMN_MASK);
2519:       assertEquals(32, Node.INCRDECR_PROP);
2520:       assertEquals(1, Node.DECR_FLAG);
2521:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2522:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2523:       assertFalse(node6.equals((Object)node5));
2524:       assertFalse(node6.equals((Object)node4));
2525:       assertFalse(node6.equals((Object)node0));
2526:       assertFalse(node6.equals((Object)node3));
2527:       assertFalse(node6.equals((Object)node1));
2528:       assertFalse(node6.equals((Object)node2));
2529:       assertFalse(node7.equals((Object)node6));
2530:       assertFalse(node7.equals((Object)node0));
2531:       assertFalse(node7.equals((Object)node3));
2532:       assertFalse(node1.equals((Object)node3));
2533:       assertFalse(node1.equals((Object)node6));
2534:       assertFalse(node1.equals((Object)node0));
2535:       
2536:       // Undeclared exception!
2537:       try { 
2538:         node3.addChildAfter(node4, node5);
2539:         fail("Expecting exception: IllegalArgumentException");
2540:       
2541:       } catch(IllegalArgumentException e) {
2542:          //
2543:          // no message in exception (getMessage() returned null)
2544:          //
2545:          verifyException("com.google.common.base.Preconditions", e);
2546:       }
2547:   }
2548: }
RegularFileObject[/tmp/EvoSuite_90_1628256126526/com/google/javascript/rhino/Node_90_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:22:06 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_90_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_90_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.common.collect.Iterables",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_90_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.Token",
267:       "com.google.common.base.Preconditions",
268:       "com.google.common.base.Objects",
269:       "com.google.javascript.rhino.SimpleErrorReporter",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.common.collect.Sets",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.Iterators$12",
347:       "com.google.common.collect.AbstractIndexedListIterator",
348:       "com.google.common.collect.Iterators$11",
349:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
350:       "com.google.javascript.rhino.InputId",
351:       "com.google.javascript.rhino.JSTypeExpression",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Platform",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
364:       "com.google.javascript.rhino.jstype.NamedType",
365:       "com.google.common.collect.AbstractMultimap$Values",
366:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
367:       "com.google.common.collect.AbstractMapBasedMultimap$1",
368:       "com.google.common.collect.Multimaps$Entries",
369:       "com.google.common.collect.AbstractMultimap$Entries",
370:       "com.google.common.collect.AbstractMapBasedMultimap$2",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
373:     );
374:   }
375: }

[MASTER] 13:22:07.235 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node[] nodeArray0 = new Node[0];
Node node0 = new Node(117, nodeArray0, 1148, 115);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, nodeArray0.length);
assertFalse(node0.isHook());
assertEquals(115, node0.getCharno());
assertFalse(node0.isThrow());
assertEquals(4702323, node0.getSourcePosition());
assertTrue(node0.isContinue());
assertFalse(node0.isSwitch());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(1148, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isDebugger());
assertEquals(117, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());

int int0 = node0.getSourceOffset();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, nodeArray0.length);
assertFalse(node0.isHook());
assertEquals(115, node0.getCharno());
assertFalse(node0.isThrow());
assertEquals(4702323, node0.getSourcePosition());
assertTrue(node0.isContinue());
assertFalse(node0.isSwitch());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(1148, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isDebugger());
assertEquals(117, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());

boolean boolean0 = node0.hasChildren();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, nodeArray0.length);
assertFalse(node0.isHook());
assertEquals(115, node0.getCharno());
assertFalse(node0.isThrow());
assertEquals(4702323, node0.getSourcePosition());
assertTrue(node0.isContinue());
assertFalse(node0.isSwitch());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(1148, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isDebugger());
assertEquals(117, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());

int int1 = node0.getCharno();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertFalse(int1 == int0);
assertEquals(0, nodeArray0.length);
assertFalse(node0.isHook());
assertEquals(115, node0.getCharno());
assertFalse(node0.isThrow());
assertEquals(4702323, node0.getSourcePosition());
assertTrue(node0.isContinue());
assertFalse(node0.isSwitch());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(1148, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isDebugger());
assertEquals(117, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());

node0.putBooleanProp(117, false);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, nodeArray0.length);
assertFalse(node0.isHook());
assertEquals(115, node0.getCharno());
assertFalse(node0.isThrow());
assertEquals(4702323, node0.getSourcePosition());
assertTrue(node0.isContinue());
assertFalse(node0.isSwitch());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(1148, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isDebugger());
assertEquals(117, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());

Node node1 = Node.newString("");
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());

Iterable<Node> iterable0 = new ArrayList<Node>();
assertFalse(iterable0.contains(node0));

node1.getInputId();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());

Node node2 = node1.useSourceInfoFrom(node0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertEquals(0, nodeArray0.length);
assertFalse(node0.isHook());
assertEquals(115, node0.getCharno());
assertFalse(node0.isThrow());
assertEquals(4702323, node0.getSourcePosition());
assertTrue(node0.isContinue());
assertFalse(node0.isSwitch());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(1148, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isDebugger());
assertEquals(117, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertEquals(115, node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(4702323, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals(0, node1.getChildCount());
assertEquals(1148, node1.getLineno());
assertFalse(node1.isCatch());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertEquals(1148, node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isBlock());
assertFalse(node2.isArrayLit());
assertFalse(node2.isWhile());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNew());
assertFalse(node2.isTrue());
assertFalse(node2.isAdd());
assertFalse(node2.isExprResult());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isVoid());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isGetProp());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertEquals(115, node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSwitch());
assertEquals(4702323, node2.getSourcePosition());
assertFalse(node2.isAnd());
assertFalse(node2.isCase());
assertFalse(node2.isNumber());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isFor());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInc());
assertFalse(node2.isIn());

Node[] nodeArray1 = new Node[1];
assertFalse(nodeArray1.equals((Object)nodeArray0));

nodeArray1[0] = node2;
Node node3 = new Node((-2500), nodeArray1, 75, 1603);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(nodeArray1.equals((Object)nodeArray0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertEquals(1, nodeArray1.length);
assertFalse(node3.isDec());
assertFalse(node3.isNumber());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCast());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isExprResult());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isOr());
assertEquals((-2500), node3.getType());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isVar());
assertFalse(node3.isNew());
assertEquals(308803, node3.getSourcePosition());
assertFalse(node3.isBlock());
assertFalse(node3.isScript());
assertFalse(node3.isCase());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetterDef());
assertTrue(node3.hasOneChild());
assertFalse(node3.isEmpty());
assertTrue(node3.hasChildren());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isTry());
assertFalse(node3.isFor());
assertEquals(75, node3.getLineno());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isInc());
assertFalse(node3.isCatch());
assertFalse(node3.isIn());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isBreak());
assertFalse(node3.isComma());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFalse());
assertFalse(node3.isGetProp());
assertFalse(node3.isCall());
assertFalse(node3.isThrow());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isObjectLit());
assertFalse(node3.isString());
assertFalse(node3.isContinue());
assertEquals(1603, node3.getCharno());
assertFalse(node3.isAnd());

Node node4 = node2.srcrefTree(node3);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertFalse(nodeArray0.equals((Object)nodeArray1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(nodeArray1.equals((Object)nodeArray0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertEquals(0, nodeArray0.length);
assertEquals(1, nodeArray1.length);
assertFalse(node0.isHook());
assertEquals(115, node0.getCharno());
assertFalse(node0.isThrow());
assertEquals(4702323, node0.getSourcePosition());
assertTrue(node0.isContinue());
assertFalse(node0.isSwitch());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(1148, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isDebugger());
assertEquals(117, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertEquals(308803, node1.getSourcePosition());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals(1603, node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(75, node1.getLineno());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertEquals(308803, node2.getSourcePosition());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isBlock());
assertEquals(1603, node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isWhile());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDelProp());
assertEquals(75, node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNew());
assertFalse(node2.isTrue());
assertFalse(node2.isAdd());
assertFalse(node2.isExprResult());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isVoid());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isGetProp());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isCase());
assertFalse(node2.isNumber());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isFor());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node3.isDec());
assertFalse(node3.isNumber());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCast());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isExprResult());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isOr());
assertEquals((-2500), node3.getType());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isVar());
assertFalse(node3.isNew());
assertEquals(308803, node3.getSourcePosition());
assertFalse(node3.isBlock());
assertFalse(node3.isScript());
assertFalse(node3.isCase());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetterDef());
assertTrue(node3.hasOneChild());
assertFalse(node3.isEmpty());
assertTrue(node3.hasChildren());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isTry());
assertFalse(node3.isFor());
assertEquals(75, node3.getLineno());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isInc());
assertFalse(node3.isCatch());
assertFalse(node3.isIn());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isBreak());
assertFalse(node3.isComma());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFalse());
assertFalse(node3.isGetProp());
assertFalse(node3.isCall());
assertFalse(node3.isThrow());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isObjectLit());
assertFalse(node3.isString());
assertFalse(node3.isContinue());
assertEquals(1603, node3.getCharno());
assertFalse(node3.isAnd());
assertFalse(node4.isWith());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isScript());
assertFalse(node4.isExprResult());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isAnd());
assertFalse(node4.isFalse());
assertFalse(node4.isLabelName());
assertFalse(node4.isCast());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isThrow());
assertFalse(node4.isCase());
assertFalse(node4.isIn());
assertFalse(node4.isInc());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isIf());
assertFalse(node4.isSwitch());
assertFalse(node4.isNE());
assertFalse(node4.isStringKey());
assertFalse(node4.isFor());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertTrue(node4.isString());
assertFalse(node4.isTry());
assertFalse(node4.isBlock());
assertFalse(node4.hasOneChild());
assertFalse(node4.isHook());
assertFalse(node4.isThis());
assertEquals(308803, node4.getSourcePosition());
assertEquals(40, node4.getType());
assertFalse(node4.isRegExp());
assertFalse(node4.isCatch());
assertFalse(node4.isDebugger());
assertFalse(node4.isVoid());
assertFalse(node4.isNull());
assertFalse(node4.isTrue());
assertFalse(node4.isParamList());
assertFalse(node4.isEmpty());
assertFalse(node4.isArrayLit());
assertFalse(node4.isSetterDef());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isFunction());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isVar());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDo());
assertFalse(node4.isContinue());
assertFalse(node4.isOr());
assertEquals(1603, node4.getCharno());
assertFalse(node4.isName());
assertFalse(node4.isGetElem());
assertFalse(node4.isDelProp());
assertFalse(node4.isBreak());
assertFalse(node4.isDec());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isCall());
assertFalse(node4.isGetProp());
assertFalse(node4.isReturn());
assertFalse(node4.isComma());
assertFalse(node4.hasChildren());
assertFalse(node4.isWhile());
assertEquals(75, node4.getLineno());

node0.checkTreeTypeAwareEqualsImpl(node1);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(nodeArray0.equals((Object)nodeArray1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertEquals(0, nodeArray0.length);
assertFalse(node0.isHook());
assertEquals(115, node0.getCharno());
assertFalse(node0.isThrow());
assertEquals(4702323, node0.getSourcePosition());
assertTrue(node0.isContinue());
assertFalse(node0.isSwitch());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(1148, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isDebugger());
assertEquals(117, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertEquals(308803, node1.getSourcePosition());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals(1603, node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(75, node1.getLineno());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());

boolean boolean1 = node1.isOnlyModifiesArgumentsCall();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertEquals(308803, node1.getSourcePosition());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals(1603, node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(75, node1.getLineno());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());

boolean boolean2 = node1.isRegExp();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());

boolean boolean3 = node0.isLocalResultCall();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertFalse(nodeArray0.equals((Object)nodeArray1));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertEquals(0, nodeArray0.length);

Node node5 = node1.clonePropsFrom(node4);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertFalse(nodeArray0.equals((Object)nodeArray1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(nodeArray1.equals((Object)nodeArray0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertEquals(0, nodeArray0.length);
assertEquals(1, nodeArray1.length);

Node node6 = Node.newNumber((double) 53);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node2));

Node node7 = node1.useSourceInfoIfMissingFromForTree(node6);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node2));
assertFalse(node7.equals((Object)node6));
assertFalse(node7.equals((Object)node0));
assertFalse(node7.equals((Object)node3));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node6));
assertFalse(node1.equals((Object)node0));

node3.addChildAfter(node4, node5);

[MASTER] 13:22:09.705 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_102_1628256129499/com/google/javascript/rhino/Node_102_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_102_1628256129499/com/google/javascript/rhino/Node_102_tmp__ESTest_scaffolding.java]]
[MASTER] 13:22:09.705 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:22:09.705 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:22:09.706 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 164
[MASTER] 13:22:09.707 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_102_1628256129499/com/google/javascript/rhino/Node_102_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:22:09 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.EvoSuiteFile;
14: import org.evosuite.runtime.testdata.FileSystemHandling;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_102_tmp__ESTest extends Node_102_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString("");
23:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
24:       assertEquals(53, Node.INPUT_ID);
25:       assertEquals(43, Node.IS_CONSTANT_NAME);
26:       assertEquals(36, Node.QUOTED_PROP);
27:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
28:       assertEquals(29, Node.JSDOC_INFO_PROP);
29:       assertEquals(55, Node.INFERRED_FUNCTION);
30:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
31:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
32:       assertEquals(37, Node.OPT_ARG_NAME);
33:       assertEquals(48, Node.DIRECTIVES);
34:       assertEquals(8, Node.FLAG_NO_THROWS);
35:       assertEquals(39, Node.EMPTY_BLOCK);
36:       assertEquals(56, Node.CHANGE_TIME);
37:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
38:       assertEquals(4095, Node.COLUMN_MASK);
39:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
40:       assertEquals(49, Node.DIRECT_EVAL);
41:       assertEquals(54, Node.SLASH_V);
42:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
43:       assertEquals(52, Node.LENGTH);
44:       assertEquals(57, Node.REFLECTED_OBJECT);
45:       assertEquals(30, Node.VAR_ARGS_NAME);
46:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
47:       assertEquals(12, Node.COLUMN_BITS);
48:       assertEquals(57, Node.LAST_PROP);
49:       assertEquals(32, Node.INCRDECR_PROP);
50:       assertEquals(15, Node.NO_SIDE_EFFECTS);
51:       assertEquals(1, Node.DECR_FLAG);
52:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
53:       assertEquals(46, Node.IS_NAMESPACE);
54:       assertEquals(47, Node.IS_DISPATCHER);
55:       assertEquals(2, Node.POST_FLAG);
56:       assertEquals(50, Node.FREE_CALL);
57:       assertEquals(51, Node.STATIC_SOURCE_FILE);
58:       assertEquals(40, Node.ORIGINALNAME_PROP);
59:       assertFalse(node0.isComma());
60:       assertFalse(node0.isThis());
61:       assertFalse(node0.isBreak());
62:       assertFalse(node0.isGetProp());
63:       assertFalse(node0.isThrow());
64:       assertFalse(node0.isHook());
65:       assertFalse(node0.isWith());
66:       assertFalse(node0.isFalse());
67:       assertFalse(node0.isInstanceOf());
68:       assertFalse(node0.isInc());
69:       assertFalse(node0.isExprResult());
70:       assertFalse(node0.isIn());
71:       assertFalse(node0.isNE());
72:       assertFalse(node0.isLabelName());
73:       assertFalse(node0.isAssignAdd());
74:       assertFalse(node0.isLabel());
75:       assertFalse(node0.isFor());
76:       assertFalse(node0.isIf());
77:       assertFalse(node0.hasMoreThanOneChild());
78:       assertFalse(node0.isArrayLit());
79:       assertEquals((-1), node0.getLineno());
80:       assertFalse(node0.isSwitch());
81:       assertFalse(node0.isScript());
82:       assertFalse(node0.isRegExp());
83:       assertEquals((-1), node0.getCharno());
84:       assertFalse(node0.isTry());
85:       assertTrue(node0.isString());
86:       assertFalse(node0.isBlock());
87:       assertFalse(node0.hasOneChild());
88:       assertFalse(node0.isCase());
89:       assertFalse(node0.isGetterDef());
90:       assertFalse(node0.isNumber());
91:       assertFalse(node0.isSetterDef());
92:       assertFalse(node0.isNull());
93:       assertFalse(node0.isName());
94:       assertFalse(node0.isStringKey());
95:       assertFalse(node0.isParamList());
96:       assertFalse(node0.isVar());
97:       assertFalse(node0.isCatch());
98:       assertFalse(node0.isCall());
99:       assertEquals(0, node0.getChildCount());
100:       assertFalse(node0.isTrue());
101:       assertFalse(node0.isFunction());
102:       assertFalse(node0.isVoid());
103:       assertFalse(node0.isNew());
104:       assertFalse(node0.isDo());
105:       assertEquals(40, node0.getType());
106:       assertFalse(node0.isDefaultCase());
107:       assertFalse(node0.isEmpty());
108:       assertFalse(node0.isOr());
109:       assertFalse(node0.isAdd());
110:       assertFalse(node0.isTypeOf());
111:       assertFalse(node0.hasChildren());
112:       assertFalse(node0.isDec());
113:       assertEquals((-1), node0.getSourcePosition());
114:       assertFalse(node0.isDelProp());
115:       assertFalse(node0.isReturn());
116:       assertFalse(node0.isCast());
117:       assertFalse(node0.isAssign());
118:       assertFalse(node0.isGetElem());
119:       assertFalse(node0.isContinue());
120:       assertFalse(node0.isDebugger());
121:       assertFalse(node0.isWhile());
122:       assertFalse(node0.isAnd());
123:       assertFalse(node0.isObjectLit());
124:       assertFalse(node0.isNot());
125:       assertNotNull(node0);
126:       
127:       Iterable<Node> iterable0 = node0.children();
128:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
129:       assertEquals(53, Node.INPUT_ID);
130:       assertEquals(43, Node.IS_CONSTANT_NAME);
131:       assertEquals(36, Node.QUOTED_PROP);
132:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
133:       assertEquals(29, Node.JSDOC_INFO_PROP);
134:       assertEquals(55, Node.INFERRED_FUNCTION);
135:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
136:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
137:       assertEquals(37, Node.OPT_ARG_NAME);
138:       assertEquals(48, Node.DIRECTIVES);
139:       assertEquals(8, Node.FLAG_NO_THROWS);
140:       assertEquals(39, Node.EMPTY_BLOCK);
141:       assertEquals(56, Node.CHANGE_TIME);
142:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
143:       assertEquals(4095, Node.COLUMN_MASK);
144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
145:       assertEquals(49, Node.DIRECT_EVAL);
146:       assertEquals(54, Node.SLASH_V);
147:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
148:       assertEquals(52, Node.LENGTH);
149:       assertEquals(57, Node.REFLECTED_OBJECT);
150:       assertEquals(30, Node.VAR_ARGS_NAME);
151:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
152:       assertEquals(12, Node.COLUMN_BITS);
153:       assertEquals(57, Node.LAST_PROP);
154:       assertEquals(32, Node.INCRDECR_PROP);
155:       assertEquals(15, Node.NO_SIDE_EFFECTS);
156:       assertEquals(1, Node.DECR_FLAG);
157:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
158:       assertEquals(46, Node.IS_NAMESPACE);
159:       assertEquals(47, Node.IS_DISPATCHER);
160:       assertEquals(2, Node.POST_FLAG);
161:       assertEquals(50, Node.FREE_CALL);
162:       assertEquals(51, Node.STATIC_SOURCE_FILE);
163:       assertEquals(40, Node.ORIGINALNAME_PROP);
164:       assertFalse(iterable0.contains(node0));
165:       assertFalse(node0.isComma());
166:       assertFalse(node0.isThis());
167:       assertFalse(node0.isBreak());
168:       assertFalse(node0.isGetProp());
169:       assertFalse(node0.isThrow());
170:       assertFalse(node0.isHook());
171:       assertFalse(node0.isWith());
172:       assertFalse(node0.isFalse());
173:       assertFalse(node0.isInstanceOf());
174:       assertFalse(node0.isInc());
175:       assertFalse(node0.isExprResult());
176:       assertFalse(node0.isIn());
177:       assertFalse(node0.isNE());
178:       assertFalse(node0.isLabelName());
179:       assertFalse(node0.isAssignAdd());
180:       assertFalse(node0.isLabel());
181:       assertFalse(node0.isFor());
182:       assertFalse(node0.isIf());
183:       assertFalse(node0.hasMoreThanOneChild());
184:       assertFalse(node0.isArrayLit());
185:       assertEquals((-1), node0.getLineno());
186:       assertFalse(node0.isSwitch());
187:       assertFalse(node0.isScript());
188:       assertFalse(node0.isRegExp());
189:       assertEquals((-1), node0.getCharno());
190:       assertFalse(node0.isTry());
191:       assertTrue(node0.isString());
192:       assertFalse(node0.isBlock());
193:       assertFalse(node0.hasOneChild());
194:       assertFalse(node0.isCase());
195:       assertFalse(node0.isGetterDef());
196:       assertFalse(node0.isNumber());
197:       assertFalse(node0.isSetterDef());
198:       assertFalse(node0.isNull());
199:       assertFalse(node0.isName());
200:       assertFalse(node0.isStringKey());
201:       assertFalse(node0.isParamList());
202:       assertFalse(node0.isVar());
203:       assertFalse(node0.isCatch());
204:       assertFalse(node0.isCall());
205:       assertEquals(0, node0.getChildCount());
206:       assertFalse(node0.isTrue());
207:       assertFalse(node0.isFunction());
208:       assertFalse(node0.isVoid());
209:       assertFalse(node0.isNew());
210:       assertFalse(node0.isDo());
211:       assertEquals(40, node0.getType());
212:       assertFalse(node0.isDefaultCase());
213:       assertFalse(node0.isEmpty());
214:       assertFalse(node0.isOr());
215:       assertFalse(node0.isAdd());
216:       assertFalse(node0.isTypeOf());
217:       assertFalse(node0.hasChildren());
218:       assertFalse(node0.isDec());
219:       assertEquals((-1), node0.getSourcePosition());
220:       assertFalse(node0.isDelProp());
221:       assertFalse(node0.isReturn());
222:       assertFalse(node0.isCast());
223:       assertFalse(node0.isAssign());
224:       assertFalse(node0.isGetElem());
225:       assertFalse(node0.isContinue());
226:       assertFalse(node0.isDebugger());
227:       assertFalse(node0.isWhile());
228:       assertFalse(node0.isAnd());
229:       assertFalse(node0.isObjectLit());
230:       assertFalse(node0.isNot());
231:       assertNotNull(iterable0);
232:       
233:       int int0 = node0.getLength();
234:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
235:       assertEquals(53, Node.INPUT_ID);
236:       assertEquals(43, Node.IS_CONSTANT_NAME);
237:       assertEquals(36, Node.QUOTED_PROP);
238:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
239:       assertEquals(29, Node.JSDOC_INFO_PROP);
240:       assertEquals(55, Node.INFERRED_FUNCTION);
241:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
242:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
243:       assertEquals(37, Node.OPT_ARG_NAME);
244:       assertEquals(48, Node.DIRECTIVES);
245:       assertEquals(8, Node.FLAG_NO_THROWS);
246:       assertEquals(39, Node.EMPTY_BLOCK);
247:       assertEquals(56, Node.CHANGE_TIME);
248:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
249:       assertEquals(4095, Node.COLUMN_MASK);
250:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
251:       assertEquals(49, Node.DIRECT_EVAL);
252:       assertEquals(54, Node.SLASH_V);
253:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
254:       assertEquals(52, Node.LENGTH);
255:       assertEquals(57, Node.REFLECTED_OBJECT);
256:       assertEquals(30, Node.VAR_ARGS_NAME);
257:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
258:       assertEquals(12, Node.COLUMN_BITS);
259:       assertEquals(57, Node.LAST_PROP);
260:       assertEquals(32, Node.INCRDECR_PROP);
261:       assertEquals(15, Node.NO_SIDE_EFFECTS);
262:       assertEquals(1, Node.DECR_FLAG);
263:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
264:       assertEquals(46, Node.IS_NAMESPACE);
265:       assertEquals(47, Node.IS_DISPATCHER);
266:       assertEquals(2, Node.POST_FLAG);
267:       assertEquals(50, Node.FREE_CALL);
268:       assertEquals(51, Node.STATIC_SOURCE_FILE);
269:       assertEquals(40, Node.ORIGINALNAME_PROP);
270:       assertFalse(node0.isComma());
271:       assertFalse(node0.isThis());
272:       assertFalse(node0.isBreak());
273:       assertFalse(node0.isGetProp());
274:       assertFalse(node0.isThrow());
275:       assertFalse(node0.isHook());
276:       assertFalse(node0.isWith());
277:       assertFalse(node0.isFalse());
278:       assertFalse(node0.isInstanceOf());
279:       assertFalse(node0.isInc());
280:       assertFalse(node0.isExprResult());
281:       assertFalse(node0.isIn());
282:       assertFalse(node0.isNE());
283:       assertFalse(node0.isLabelName());
284:       assertFalse(node0.isAssignAdd());
285:       assertFalse(node0.isLabel());
286:       assertFalse(node0.isFor());
287:       assertFalse(node0.isIf());
288:       assertFalse(node0.hasMoreThanOneChild());
289:       assertFalse(node0.isArrayLit());
290:       assertEquals((-1), node0.getLineno());
291:       assertFalse(node0.isSwitch());
292:       assertFalse(node0.isScript());
293:       assertFalse(node0.isRegExp());
294:       assertEquals((-1), node0.getCharno());
295:       assertFalse(node0.isTry());
296:       assertTrue(node0.isString());
297:       assertFalse(node0.isBlock());
298:       assertFalse(node0.hasOneChild());
299:       assertFalse(node0.isCase());
300:       assertFalse(node0.isGetterDef());
301:       assertFalse(node0.isNumber());
302:       assertFalse(node0.isSetterDef());
303:       assertFalse(node0.isNull());
304:       assertFalse(node0.isName());
305:       assertFalse(node0.isStringKey());
306:       assertFalse(node0.isParamList());
307:       assertFalse(node0.isVar());
308:       assertFalse(node0.isCatch());
309:       assertFalse(node0.isCall());
310:       assertEquals(0, node0.getChildCount());
311:       assertFalse(node0.isTrue());
312:       assertFalse(node0.isFunction());
313:       assertFalse(node0.isVoid());
314:       assertFalse(node0.isNew());
315:       assertFalse(node0.isDo());
316:       assertEquals(40, node0.getType());
317:       assertFalse(node0.isDefaultCase());
318:       assertFalse(node0.isEmpty());
319:       assertFalse(node0.isOr());
320:       assertFalse(node0.isAdd());
321:       assertFalse(node0.isTypeOf());
322:       assertFalse(node0.hasChildren());
323:       assertFalse(node0.isDec());
324:       assertEquals((-1), node0.getSourcePosition());
325:       assertFalse(node0.isDelProp());
326:       assertFalse(node0.isReturn());
327:       assertFalse(node0.isCast());
328:       assertFalse(node0.isAssign());
329:       assertFalse(node0.isGetElem());
330:       assertFalse(node0.isContinue());
331:       assertFalse(node0.isDebugger());
332:       assertFalse(node0.isWhile());
333:       assertFalse(node0.isAnd());
334:       assertFalse(node0.isObjectLit());
335:       assertFalse(node0.isNot());
336:       assertEquals(0, int0);
337:       
338:       boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
339:       assertFalse(boolean0);
340:       
341:       int int1 = node0.getSideEffectFlags();
342:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
343:       assertEquals(53, Node.INPUT_ID);
344:       assertEquals(43, Node.IS_CONSTANT_NAME);
345:       assertEquals(36, Node.QUOTED_PROP);
346:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
347:       assertEquals(29, Node.JSDOC_INFO_PROP);
348:       assertEquals(55, Node.INFERRED_FUNCTION);
349:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
350:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
351:       assertEquals(37, Node.OPT_ARG_NAME);
352:       assertEquals(48, Node.DIRECTIVES);
353:       assertEquals(8, Node.FLAG_NO_THROWS);
354:       assertEquals(39, Node.EMPTY_BLOCK);
355:       assertEquals(56, Node.CHANGE_TIME);
356:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
357:       assertEquals(4095, Node.COLUMN_MASK);
358:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
359:       assertEquals(49, Node.DIRECT_EVAL);
360:       assertEquals(54, Node.SLASH_V);
361:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
362:       assertEquals(52, Node.LENGTH);
363:       assertEquals(57, Node.REFLECTED_OBJECT);
364:       assertEquals(30, Node.VAR_ARGS_NAME);
365:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
366:       assertEquals(12, Node.COLUMN_BITS);
367:       assertEquals(57, Node.LAST_PROP);
368:       assertEquals(32, Node.INCRDECR_PROP);
369:       assertEquals(15, Node.NO_SIDE_EFFECTS);
370:       assertEquals(1, Node.DECR_FLAG);
371:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
372:       assertEquals(46, Node.IS_NAMESPACE);
373:       assertEquals(47, Node.IS_DISPATCHER);
374:       assertEquals(2, Node.POST_FLAG);
375:       assertEquals(50, Node.FREE_CALL);
376:       assertEquals(51, Node.STATIC_SOURCE_FILE);
377:       assertEquals(40, Node.ORIGINALNAME_PROP);
378:       assertTrue(int1 == int0);
379:       assertFalse(node0.isComma());
380:       assertFalse(node0.isThis());
381:       assertFalse(node0.isBreak());
382:       assertFalse(node0.isGetProp());
383:       assertFalse(node0.isThrow());
384:       assertFalse(node0.isHook());
385:       assertFalse(node0.isWith());
386:       assertFalse(node0.isFalse());
387:       assertFalse(node0.isInstanceOf());
388:       assertFalse(node0.isInc());
389:       assertFalse(node0.isExprResult());
390:       assertFalse(node0.isIn());
391:       assertFalse(node0.isNE());
392:       assertFalse(node0.isLabelName());
393:       assertFalse(node0.isAssignAdd());
394:       assertFalse(node0.isLabel());
395:       assertFalse(node0.isFor());
396:       assertFalse(node0.isIf());
397:       assertFalse(node0.hasMoreThanOneChild());
398:       assertFalse(node0.isArrayLit());
399:       assertEquals((-1), node0.getLineno());
400:       assertFalse(node0.isSwitch());
401:       assertFalse(node0.isScript());
402:       assertFalse(node0.isRegExp());
403:       assertEquals((-1), node0.getCharno());
404:       assertFalse(node0.isTry());
405:       assertTrue(node0.isString());
406:       assertFalse(node0.isBlock());
407:       assertFalse(node0.hasOneChild());
408:       assertFalse(node0.isCase());
409:       assertFalse(node0.isGetterDef());
410:       assertFalse(node0.isNumber());
411:       assertFalse(node0.isSetterDef());
412:       assertFalse(node0.isNull());
413:       assertFalse(node0.isName());
414:       assertFalse(node0.isStringKey());
415:       assertFalse(node0.isParamList());
416:       assertFalse(node0.isVar());
417:       assertFalse(node0.isCatch());
418:       assertFalse(node0.isCall());
419:       assertEquals(0, node0.getChildCount());
420:       assertFalse(node0.isTrue());
421:       assertFalse(node0.isFunction());
422:       assertFalse(node0.isVoid());
423:       assertFalse(node0.isNew());
424:       assertFalse(node0.isDo());
425:       assertEquals(40, node0.getType());
426:       assertFalse(node0.isDefaultCase());
427:       assertFalse(node0.isEmpty());
428:       assertFalse(node0.isOr());
429:       assertFalse(node0.isAdd());
430:       assertFalse(node0.isTypeOf());
431:       assertFalse(node0.hasChildren());
432:       assertFalse(node0.isDec());
433:       assertEquals((-1), node0.getSourcePosition());
434:       assertFalse(node0.isDelProp());
435:       assertFalse(node0.isReturn());
436:       assertFalse(node0.isCast());
437:       assertFalse(node0.isAssign());
438:       assertFalse(node0.isGetElem());
439:       assertFalse(node0.isContinue());
440:       assertFalse(node0.isDebugger());
441:       assertFalse(node0.isWhile());
442:       assertFalse(node0.isAnd());
443:       assertFalse(node0.isObjectLit());
444:       assertFalse(node0.isNot());
445:       assertEquals(0, int1);
446:       
447:       int int2 = node0.getSourcePosition();
448:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
449:       assertEquals(53, Node.INPUT_ID);
450:       assertEquals(43, Node.IS_CONSTANT_NAME);
451:       assertEquals(36, Node.QUOTED_PROP);
452:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
453:       assertEquals(29, Node.JSDOC_INFO_PROP);
454:       assertEquals(55, Node.INFERRED_FUNCTION);
455:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
456:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
457:       assertEquals(37, Node.OPT_ARG_NAME);
458:       assertEquals(48, Node.DIRECTIVES);
459:       assertEquals(8, Node.FLAG_NO_THROWS);
460:       assertEquals(39, Node.EMPTY_BLOCK);
461:       assertEquals(56, Node.CHANGE_TIME);
462:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
463:       assertEquals(4095, Node.COLUMN_MASK);
464:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
465:       assertEquals(49, Node.DIRECT_EVAL);
466:       assertEquals(54, Node.SLASH_V);
467:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
468:       assertEquals(52, Node.LENGTH);
469:       assertEquals(57, Node.REFLECTED_OBJECT);
470:       assertEquals(30, Node.VAR_ARGS_NAME);
471:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
472:       assertEquals(12, Node.COLUMN_BITS);
473:       assertEquals(57, Node.LAST_PROP);
474:       assertEquals(32, Node.INCRDECR_PROP);
475:       assertEquals(15, Node.NO_SIDE_EFFECTS);
476:       assertEquals(1, Node.DECR_FLAG);
477:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
478:       assertEquals(46, Node.IS_NAMESPACE);
479:       assertEquals(47, Node.IS_DISPATCHER);
480:       assertEquals(2, Node.POST_FLAG);
481:       assertEquals(50, Node.FREE_CALL);
482:       assertEquals(51, Node.STATIC_SOURCE_FILE);
483:       assertEquals(40, Node.ORIGINALNAME_PROP);
484:       assertFalse(int2 == int0);
485:       assertFalse(int2 == int1);
486:       assertFalse(node0.isComma());
487:       assertFalse(node0.isThis());
488:       assertFalse(node0.isBreak());
489:       assertFalse(node0.isGetProp());
490:       assertFalse(node0.isThrow());
491:       assertFalse(node0.isHook());
492:       assertFalse(node0.isWith());
493:       assertFalse(node0.isFalse());
494:       assertFalse(node0.isInstanceOf());
495:       assertFalse(node0.isInc());
496:       assertFalse(node0.isExprResult());
497:       assertFalse(node0.isIn());
498:       assertFalse(node0.isNE());
499:       assertFalse(node0.isLabelName());
500:       assertFalse(node0.isAssignAdd());
501:       assertFalse(node0.isLabel());
502:       assertFalse(node0.isFor());
503:       assertFalse(node0.isIf());
504:       assertFalse(node0.hasMoreThanOneChild());
505:       assertFalse(node0.isArrayLit());
506:       assertEquals((-1), node0.getLineno());
507:       assertFalse(node0.isSwitch());
508:       assertFalse(node0.isScript());
509:       assertFalse(node0.isRegExp());
510:       assertEquals((-1), node0.getCharno());
511:       assertFalse(node0.isTry());
512:       assertTrue(node0.isString());
513:       assertFalse(node0.isBlock());
514:       assertFalse(node0.hasOneChild());
515:       assertFalse(node0.isCase());
516:       assertFalse(node0.isGetterDef());
517:       assertFalse(node0.isNumber());
518:       assertFalse(node0.isSetterDef());
519:       assertFalse(node0.isNull());
520:       assertFalse(node0.isName());
521:       assertFalse(node0.isStringKey());
522:       assertFalse(node0.isParamList());
523:       assertFalse(node0.isVar());
524:       assertFalse(node0.isCatch());
525:       assertFalse(node0.isCall());
526:       assertEquals(0, node0.getChildCount());
527:       assertFalse(node0.isTrue());
528:       assertFalse(node0.isFunction());
529:       assertFalse(node0.isVoid());
530:       assertFalse(node0.isNew());
531:       assertFalse(node0.isDo());
532:       assertEquals(40, node0.getType());
533:       assertFalse(node0.isDefaultCase());
534:       assertFalse(node0.isEmpty());
535:       assertFalse(node0.isOr());
536:       assertFalse(node0.isAdd());
537:       assertFalse(node0.isTypeOf());
538:       assertFalse(node0.hasChildren());
539:       assertFalse(node0.isDec());
540:       assertEquals((-1), node0.getSourcePosition());
541:       assertFalse(node0.isDelProp());
542:       assertFalse(node0.isReturn());
543:       assertFalse(node0.isCast());
544:       assertFalse(node0.isAssign());
545:       assertFalse(node0.isGetElem());
546:       assertFalse(node0.isContinue());
547:       assertFalse(node0.isDebugger());
548:       assertFalse(node0.isWhile());
549:       assertFalse(node0.isAnd());
550:       assertFalse(node0.isObjectLit());
551:       assertFalse(node0.isNot());
552:       assertEquals((-1), int2);
553:       
554:       boolean boolean1 = node0.isFalse();
555:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
556:       assertEquals(53, Node.INPUT_ID);
557:       assertEquals(43, Node.IS_CONSTANT_NAME);
558:       assertEquals(36, Node.QUOTED_PROP);
559:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
560:       assertEquals(29, Node.JSDOC_INFO_PROP);
561:       assertEquals(55, Node.INFERRED_FUNCTION);
562:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
563:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
564:       assertEquals(37, Node.OPT_ARG_NAME);
565:       assertEquals(48, Node.DIRECTIVES);
566:       assertEquals(8, Node.FLAG_NO_THROWS);
567:       assertEquals(39, Node.EMPTY_BLOCK);
568:       assertEquals(56, Node.CHANGE_TIME);
569:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
570:       assertEquals(4095, Node.COLUMN_MASK);
571:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
572:       assertEquals(49, Node.DIRECT_EVAL);
573:       assertEquals(54, Node.SLASH_V);
574:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
575:       assertEquals(52, Node.LENGTH);
576:       assertEquals(57, Node.REFLECTED_OBJECT);
577:       assertEquals(30, Node.VAR_ARGS_NAME);
578:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
579:       assertEquals(12, Node.COLUMN_BITS);
580:       assertEquals(57, Node.LAST_PROP);
581:       assertEquals(32, Node.INCRDECR_PROP);
582:       assertEquals(15, Node.NO_SIDE_EFFECTS);
583:       assertEquals(1, Node.DECR_FLAG);
584:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
585:       assertEquals(46, Node.IS_NAMESPACE);
586:       assertEquals(47, Node.IS_DISPATCHER);
587:       assertEquals(2, Node.POST_FLAG);
588:       assertEquals(50, Node.FREE_CALL);
589:       assertEquals(51, Node.STATIC_SOURCE_FILE);
590:       assertEquals(40, Node.ORIGINALNAME_PROP);
591:       assertTrue(boolean1 == boolean0);
592:       assertFalse(node0.isComma());
593:       assertFalse(node0.isThis());
594:       assertFalse(node0.isBreak());
595:       assertFalse(node0.isGetProp());
596:       assertFalse(node0.isThrow());
597:       assertFalse(node0.isHook());
598:       assertFalse(node0.isWith());
599:       assertFalse(node0.isFalse());
600:       assertFalse(node0.isInstanceOf());
601:       assertFalse(node0.isInc());
602:       assertFalse(node0.isExprResult());
603:       assertFalse(node0.isIn());
604:       assertFalse(node0.isNE());
605:       assertFalse(node0.isLabelName());
606:       assertFalse(node0.isAssignAdd());
607:       assertFalse(node0.isLabel());
608:       assertFalse(node0.isFor());
609:       assertFalse(node0.isIf());
610:       assertFalse(node0.hasMoreThanOneChild());
611:       assertFalse(node0.isArrayLit());
612:       assertEquals((-1), node0.getLineno());
613:       assertFalse(node0.isSwitch());
614:       assertFalse(node0.isScript());
615:       assertFalse(node0.isRegExp());
616:       assertEquals((-1), node0.getCharno());
617:       assertFalse(node0.isTry());
618:       assertTrue(node0.isString());
619:       assertFalse(node0.isBlock());
620:       assertFalse(node0.hasOneChild());
621:       assertFalse(node0.isCase());
622:       assertFalse(node0.isGetterDef());
623:       assertFalse(node0.isNumber());
624:       assertFalse(node0.isSetterDef());
625:       assertFalse(node0.isNull());
626:       assertFalse(node0.isName());
627:       assertFalse(node0.isStringKey());
628:       assertFalse(node0.isParamList());
629:       assertFalse(node0.isVar());
630:       assertFalse(node0.isCatch());
631:       assertFalse(node0.isCall());
632:       assertEquals(0, node0.getChildCount());
633:       assertFalse(node0.isTrue());
634:       assertFalse(node0.isFunction());
635:       assertFalse(node0.isVoid());
636:       assertFalse(node0.isNew());
637:       assertFalse(node0.isDo());
638:       assertEquals(40, node0.getType());
639:       assertFalse(node0.isDefaultCase());
640:       assertFalse(node0.isEmpty());
641:       assertFalse(node0.isOr());
642:       assertFalse(node0.isAdd());
643:       assertFalse(node0.isTypeOf());
644:       assertFalse(node0.hasChildren());
645:       assertFalse(node0.isDec());
646:       assertEquals((-1), node0.getSourcePosition());
647:       assertFalse(node0.isDelProp());
648:       assertFalse(node0.isReturn());
649:       assertFalse(node0.isCast());
650:       assertFalse(node0.isAssign());
651:       assertFalse(node0.isGetElem());
652:       assertFalse(node0.isContinue());
653:       assertFalse(node0.isDebugger());
654:       assertFalse(node0.isWhile());
655:       assertFalse(node0.isAnd());
656:       assertFalse(node0.isObjectLit());
657:       assertFalse(node0.isNot());
658:       assertFalse(boolean1);
659:       
660:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1237));
661:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
662:       assertEquals((-1237), node_SideEffectFlags0.valueOf());
663:       assertNotNull(node_SideEffectFlags0);
664:       
665:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
666:       assertEquals((-1245), node_SideEffectFlags0.valueOf());
667:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
668:       assertEquals((-1245), node_SideEffectFlags1.valueOf());
669:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
670:       assertNotNull(node_SideEffectFlags1);
671:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
672:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
673:       
674:       node_SideEffectFlags0.clearSideEffectFlags();
675:       assertEquals((-1233), node_SideEffectFlags0.valueOf());
676:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
677:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
678:       
679:       Node node1 = Node.newString(51, "", (-2881), 38);
680:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
681:       assertEquals(43, Node.IS_CONSTANT_NAME);
682:       assertEquals(36, Node.QUOTED_PROP);
683:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
684:       assertEquals(53, Node.INPUT_ID);
685:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
686:       assertEquals(4095, Node.COLUMN_MASK);
687:       assertEquals(47, Node.IS_DISPATCHER);
688:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
689:       assertEquals(8, Node.FLAG_NO_THROWS);
690:       assertEquals(39, Node.EMPTY_BLOCK);
691:       assertEquals(37, Node.OPT_ARG_NAME);
692:       assertEquals(48, Node.DIRECTIVES);
693:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
694:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
695:       assertEquals(29, Node.JSDOC_INFO_PROP);
696:       assertEquals(55, Node.INFERRED_FUNCTION);
697:       assertEquals(49, Node.DIRECT_EVAL);
698:       assertEquals(56, Node.CHANGE_TIME);
699:       assertEquals(57, Node.REFLECTED_OBJECT);
700:       assertEquals(57, Node.LAST_PROP);
701:       assertEquals(52, Node.LENGTH);
702:       assertEquals(15, Node.NO_SIDE_EFFECTS);
703:       assertEquals(1, Node.DECR_FLAG);
704:       assertEquals(32, Node.INCRDECR_PROP);
705:       assertEquals(30, Node.VAR_ARGS_NAME);
706:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
707:       assertEquals(12, Node.COLUMN_BITS);
708:       assertEquals(2, Node.POST_FLAG);
709:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
710:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
711:       assertEquals(40, Node.ORIGINALNAME_PROP);
712:       assertEquals(51, Node.STATIC_SOURCE_FILE);
713:       assertEquals(50, Node.FREE_CALL);
714:       assertEquals(46, Node.IS_NAMESPACE);
715:       assertEquals(54, Node.SLASH_V);
716:       assertFalse(node1.equals((Object)node0));
717:       assertFalse(node1.isBreak());
718:       assertFalse(node1.isThis());
719:       assertFalse(node1.isFalse());
720:       assertFalse(node1.isComma());
721:       assertFalse(node1.isInstanceOf());
722:       assertFalse(node1.isAnd());
723:       assertFalse(node1.isInc());
724:       assertFalse(node1.isThrow());
725:       assertFalse(node1.isTypeOf());
726:       assertFalse(node1.isDec());
727:       assertEquals((-1), node1.getSourcePosition());
728:       assertFalse(node1.hasChildren());
729:       assertFalse(node1.isEmpty());
730:       assertFalse(node1.isAssign());
731:       assertFalse(node1.isOr());
732:       assertFalse(node1.isCast());
733:       assertFalse(node1.isGetElem());
734:       assertFalse(node1.isDelProp());
735:       assertFalse(node1.isVoid());
736:       assertFalse(node1.isString());
737:       assertFalse(node1.isExprResult());
738:       assertFalse(node1.isWhile());
739:       assertFalse(node1.isDebugger());
740:       assertFalse(node1.isObjectLit());
741:       assertFalse(node1.isNot());
742:       assertFalse(node1.isReturn());
743:       assertFalse(node1.isGetProp());
744:       assertFalse(node1.isNull());
745:       assertFalse(node1.isSetterDef());
746:       assertFalse(node1.isParamList());
747:       assertEquals(0, node1.getChildCount());
748:       assertFalse(node1.isCall());
749:       assertFalse(node1.isCatch());
750:       assertFalse(node1.isName());
751:       assertFalse(node1.isStringKey());
752:       assertFalse(node1.isDefaultCase());
753:       assertFalse(node1.isTrue());
754:       assertFalse(node1.isContinue());
755:       assertFalse(node1.isFunction());
756:       assertFalse(node1.isAdd());
757:       assertFalse(node1.isVar());
758:       assertFalse(node1.isNew());
759:       assertFalse(node1.isAssignAdd());
760:       assertTrue(node1.isIn());
761:       assertFalse(node1.isDo());
762:       assertFalse(node1.isNumber());
763:       assertFalse(node1.isIf());
764:       assertEquals(51, node1.getType());
765:       assertFalse(node1.isNE());
766:       assertFalse(node1.isFor());
767:       assertFalse(node1.isLabel());
768:       assertFalse(node1.isGetterDef());
769:       assertFalse(node1.isArrayLit());
770:       assertEquals((-1), node1.getLineno());
771:       assertFalse(node1.isLabelName());
772:       assertFalse(node1.isSwitch());
773:       assertFalse(node1.isScript());
774:       assertFalse(node1.isBlock());
775:       assertEquals((-1), node1.getCharno());
776:       assertFalse(node1.hasMoreThanOneChild());
777:       assertFalse(node1.isWith());
778:       assertFalse(node1.isRegExp());
779:       assertFalse(node1.hasOneChild());
780:       assertFalse(node1.isHook());
781:       assertFalse(node1.isCase());
782:       assertFalse(node1.isTry());
783:       assertNotNull(node1);
784:       assertNotSame(node1, node0);
785:       
786:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
787:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
788:       assertEquals(0, node_SideEffectFlags0.valueOf());
789:       assertEquals(0, node_SideEffectFlags2.valueOf());
790:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
791:       assertNotNull(node_SideEffectFlags2);
792:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
793:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
794:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
795:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
796:       
797:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
798:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
799:       assertEquals(0, node_SideEffectFlags0.valueOf());
800:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
801:       assertEquals(0, node_SideEffectFlags3.valueOf());
802:       assertNotNull(node_SideEffectFlags3);
803:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
804:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
805:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
806:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
807:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
808:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
809:       
810:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setAllFlags();
811:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
812:       assertEquals(0, node_SideEffectFlags0.valueOf());
813:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
814:       assertEquals(0, node_SideEffectFlags4.valueOf());
815:       assertNotNull(node_SideEffectFlags4);
816:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
817:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
818:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
819:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
820:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
821:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
822:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
823:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
824:       
825:       node_SideEffectFlags0.clearSideEffectFlags();
826:       assertEquals(15, node_SideEffectFlags0.valueOf());
827:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
828:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
829:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
830:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
831:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
832:       
833:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setAllFlags();
834:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
835:       assertEquals(0, node_SideEffectFlags0.valueOf());
836:       assertEquals(0, node_SideEffectFlags5.valueOf());
837:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
838:       assertNotNull(node_SideEffectFlags5);
839:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
840:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
841:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
842:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
843:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
844:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
845:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
846:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
847:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
848:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
849:       
850:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.clearAllFlags();
851:       assertEquals(31, node_SideEffectFlags6.valueOf());
852:       assertFalse(node_SideEffectFlags6.areAllFlagsSet());
853:       assertEquals(31, node_SideEffectFlags0.valueOf());
854:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
855:       assertNotNull(node_SideEffectFlags6);
856:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
857:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
858:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
859:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
860:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
861:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
862:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
863:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
864:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
865:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
866:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
867:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
868:       
869:       boolean boolean2 = node0.isEquivalentTo(node1);
870:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
871:       assertEquals(53, Node.INPUT_ID);
872:       assertEquals(43, Node.IS_CONSTANT_NAME);
873:       assertEquals(36, Node.QUOTED_PROP);
874:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
875:       assertEquals(29, Node.JSDOC_INFO_PROP);
876:       assertEquals(55, Node.INFERRED_FUNCTION);
877:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
878:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
879:       assertEquals(37, Node.OPT_ARG_NAME);
880:       assertEquals(48, Node.DIRECTIVES);
881:       assertEquals(8, Node.FLAG_NO_THROWS);
882:       assertEquals(39, Node.EMPTY_BLOCK);
883:       assertEquals(56, Node.CHANGE_TIME);
884:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
885:       assertEquals(4095, Node.COLUMN_MASK);
886:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
887:       assertEquals(49, Node.DIRECT_EVAL);
888:       assertEquals(54, Node.SLASH_V);
889:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
890:       assertEquals(52, Node.LENGTH);
891:       assertEquals(57, Node.REFLECTED_OBJECT);
892:       assertEquals(30, Node.VAR_ARGS_NAME);
893:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
894:       assertEquals(12, Node.COLUMN_BITS);
895:       assertEquals(57, Node.LAST_PROP);
896:       assertEquals(32, Node.INCRDECR_PROP);
897:       assertEquals(15, Node.NO_SIDE_EFFECTS);
898:       assertEquals(1, Node.DECR_FLAG);
899:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
900:       assertEquals(46, Node.IS_NAMESPACE);
901:       assertEquals(47, Node.IS_DISPATCHER);
902:       assertEquals(2, Node.POST_FLAG);
903:       assertEquals(50, Node.FREE_CALL);
904:       assertEquals(51, Node.STATIC_SOURCE_FILE);
905:       assertEquals(40, Node.ORIGINALNAME_PROP);
906:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
907:       assertEquals(43, Node.IS_CONSTANT_NAME);
908:       assertEquals(36, Node.QUOTED_PROP);
909:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
910:       assertEquals(53, Node.INPUT_ID);
911:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
912:       assertEquals(4095, Node.COLUMN_MASK);
913:       assertEquals(47, Node.IS_DISPATCHER);
914:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
915:       assertEquals(8, Node.FLAG_NO_THROWS);
916:       assertEquals(39, Node.EMPTY_BLOCK);
917:       assertEquals(37, Node.OPT_ARG_NAME);
918:       assertEquals(48, Node.DIRECTIVES);
919:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
920:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
921:       assertEquals(29, Node.JSDOC_INFO_PROP);
922:       assertEquals(55, Node.INFERRED_FUNCTION);
923:       assertEquals(49, Node.DIRECT_EVAL);
924:       assertEquals(56, Node.CHANGE_TIME);
925:       assertEquals(57, Node.REFLECTED_OBJECT);
926:       assertEquals(57, Node.LAST_PROP);
927:       assertEquals(52, Node.LENGTH);
928:       assertEquals(15, Node.NO_SIDE_EFFECTS);
929:       assertEquals(1, Node.DECR_FLAG);
930:       assertEquals(32, Node.INCRDECR_PROP);
931:       assertEquals(30, Node.VAR_ARGS_NAME);
932:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
933:       assertEquals(12, Node.COLUMN_BITS);
934:       assertEquals(2, Node.POST_FLAG);
935:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
936:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
937:       assertEquals(40, Node.ORIGINALNAME_PROP);
938:       assertEquals(51, Node.STATIC_SOURCE_FILE);
939:       assertEquals(50, Node.FREE_CALL);
940:       assertEquals(46, Node.IS_NAMESPACE);
941:       assertEquals(54, Node.SLASH_V);
942:       assertFalse(node0.equals((Object)node1));
943:       assertTrue(boolean2 == boolean1);
944:       assertTrue(boolean2 == boolean0);
945:       assertFalse(node1.equals((Object)node0));
946:       assertFalse(node0.isComma());
947:       assertFalse(node0.isThis());
948:       assertFalse(node0.isBreak());
949:       assertFalse(node0.isGetProp());
950:       assertFalse(node0.isThrow());
951:       assertFalse(node0.isHook());
952:       assertFalse(node0.isWith());
953:       assertFalse(node0.isFalse());
954:       assertFalse(node0.isInstanceOf());
955:       assertFalse(node0.isInc());
956:       assertFalse(node0.isExprResult());
957:       assertFalse(node0.isIn());
958:       assertFalse(node0.isNE());
959:       assertFalse(node0.isLabelName());
960:       assertFalse(node0.isAssignAdd());
961:       assertFalse(node0.isLabel());
962:       assertFalse(node0.isFor());
963:       assertFalse(node0.isIf());
964:       assertFalse(node0.hasMoreThanOneChild());
965:       assertFalse(node0.isArrayLit());
966:       assertEquals((-1), node0.getLineno());
967:       assertFalse(node0.isSwitch());
968:       assertFalse(node0.isScript());
969:       assertFalse(node0.isRegExp());
970:       assertEquals((-1), node0.getCharno());
971:       assertFalse(node0.isTry());
972:       assertTrue(node0.isString());
973:       assertFalse(node0.isBlock());
974:       assertFalse(node0.hasOneChild());
975:       assertFalse(node0.isCase());
976:       assertFalse(node0.isGetterDef());
977:       assertFalse(node0.isNumber());
978:       assertFalse(node0.isSetterDef());
979:       assertFalse(node0.isNull());
980:       assertFalse(node0.isName());
981:       assertFalse(node0.isStringKey());
982:       assertFalse(node0.isParamList());
983:       assertFalse(node0.isVar());
984:       assertFalse(node0.isCatch());
985:       assertFalse(node0.isCall());
986:       assertEquals(0, node0.getChildCount());
987:       assertFalse(node0.isTrue());
988:       assertFalse(node0.isFunction());
989:       assertFalse(node0.isVoid());
990:       assertFalse(node0.isNew());
991:       assertFalse(node0.isDo());
992:       assertEquals(40, node0.getType());
993:       assertFalse(node0.isDefaultCase());
994:       assertFalse(node0.isEmpty());
995:       assertFalse(node0.isOr());
996:       assertFalse(node0.isAdd());
997:       assertFalse(node0.isTypeOf());
998:       assertFalse(node0.hasChildren());
999:       assertFalse(node0.isDec());
1000:       assertEquals((-1), node0.getSourcePosition());
1001:       assertFalse(node0.isDelProp());
1002:       assertFalse(node0.isReturn());
1003:       assertFalse(node0.isCast());
1004:       assertFalse(node0.isAssign());
1005:       assertFalse(node0.isGetElem());
1006:       assertFalse(node0.isContinue());
1007:       assertFalse(node0.isDebugger());
1008:       assertFalse(node0.isWhile());
1009:       assertFalse(node0.isAnd());
1010:       assertFalse(node0.isObjectLit());
1011:       assertFalse(node0.isNot());
1012:       assertFalse(node1.isBreak());
1013:       assertFalse(node1.isThis());
1014:       assertFalse(node1.isFalse());
1015:       assertFalse(node1.isComma());
1016:       assertFalse(node1.isInstanceOf());
1017:       assertFalse(node1.isAnd());
1018:       assertFalse(node1.isInc());
1019:       assertFalse(node1.isThrow());
1020:       assertFalse(node1.isTypeOf());
1021:       assertFalse(node1.isDec());
1022:       assertEquals((-1), node1.getSourcePosition());
1023:       assertFalse(node1.hasChildren());
1024:       assertFalse(node1.isEmpty());
1025:       assertFalse(node1.isAssign());
1026:       assertFalse(node1.isOr());
1027:       assertFalse(node1.isCast());
1028:       assertFalse(node1.isGetElem());
1029:       assertFalse(node1.isDelProp());
1030:       assertFalse(node1.isVoid());
1031:       assertFalse(node1.isString());
1032:       assertFalse(node1.isExprResult());
1033:       assertFalse(node1.isWhile());
1034:       assertFalse(node1.isDebugger());
1035:       assertFalse(node1.isObjectLit());
1036:       assertFalse(node1.isNot());
1037:       assertFalse(node1.isReturn());
1038:       assertFalse(node1.isGetProp());
1039:       assertFalse(node1.isNull());
1040:       assertFalse(node1.isSetterDef());
1041:       assertFalse(node1.isParamList());
1042:       assertEquals(0, node1.getChildCount());
1043:       assertFalse(node1.isCall());
1044:       assertFalse(node1.isCatch());
1045:       assertFalse(node1.isName());
1046:       assertFalse(node1.isStringKey());
1047:       assertFalse(node1.isDefaultCase());
1048:       assertFalse(node1.isTrue());
1049:       assertFalse(node1.isContinue());
1050:       assertFalse(node1.isFunction());
1051:       assertFalse(node1.isAdd());
1052:       assertFalse(node1.isVar());
1053:       assertFalse(node1.isNew());
1054:       assertFalse(node1.isAssignAdd());
1055:       assertTrue(node1.isIn());
1056:       assertFalse(node1.isDo());
1057:       assertFalse(node1.isNumber());
1058:       assertFalse(node1.isIf());
1059:       assertEquals(51, node1.getType());
1060:       assertFalse(node1.isNE());
1061:       assertFalse(node1.isFor());
1062:       assertFalse(node1.isLabel());
1063:       assertFalse(node1.isGetterDef());
1064:       assertFalse(node1.isArrayLit());
1065:       assertEquals((-1), node1.getLineno());
1066:       assertFalse(node1.isLabelName());
1067:       assertFalse(node1.isSwitch());
1068:       assertFalse(node1.isScript());
1069:       assertFalse(node1.isBlock());
1070:       assertEquals((-1), node1.getCharno());
1071:       assertFalse(node1.hasMoreThanOneChild());
1072:       assertFalse(node1.isWith());
1073:       assertFalse(node1.isRegExp());
1074:       assertFalse(node1.hasOneChild());
1075:       assertFalse(node1.isHook());
1076:       assertFalse(node1.isCase());
1077:       assertFalse(node1.isTry());
1078:       assertFalse(boolean2);
1079:       assertNotSame(node0, node1);
1080:       assertNotSame(node1, node0);
1081:       
1082:       boolean boolean3 = node1.isEquivalentTo(node0, true, true, true);
1083:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1084:       assertEquals(53, Node.INPUT_ID);
1085:       assertEquals(43, Node.IS_CONSTANT_NAME);
1086:       assertEquals(36, Node.QUOTED_PROP);
1087:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1088:       assertEquals(29, Node.JSDOC_INFO_PROP);
1089:       assertEquals(55, Node.INFERRED_FUNCTION);
1090:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1091:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1092:       assertEquals(37, Node.OPT_ARG_NAME);
1093:       assertEquals(48, Node.DIRECTIVES);
1094:       assertEquals(8, Node.FLAG_NO_THROWS);
1095:       assertEquals(39, Node.EMPTY_BLOCK);
1096:       assertEquals(56, Node.CHANGE_TIME);
1097:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1098:       assertEquals(4095, Node.COLUMN_MASK);
1099:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1100:       assertEquals(49, Node.DIRECT_EVAL);
1101:       assertEquals(54, Node.SLASH_V);
1102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1103:       assertEquals(52, Node.LENGTH);
1104:       assertEquals(57, Node.REFLECTED_OBJECT);
1105:       assertEquals(30, Node.VAR_ARGS_NAME);
1106:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1107:       assertEquals(12, Node.COLUMN_BITS);
1108:       assertEquals(57, Node.LAST_PROP);
1109:       assertEquals(32, Node.INCRDECR_PROP);
1110:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1111:       assertEquals(1, Node.DECR_FLAG);
1112:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1113:       assertEquals(46, Node.IS_NAMESPACE);
1114:       assertEquals(47, Node.IS_DISPATCHER);
1115:       assertEquals(2, Node.POST_FLAG);
1116:       assertEquals(50, Node.FREE_CALL);
1117:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1118:       assertEquals(40, Node.ORIGINALNAME_PROP);
1119:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1120:       assertEquals(43, Node.IS_CONSTANT_NAME);
1121:       assertEquals(36, Node.QUOTED_PROP);
1122:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1123:       assertEquals(53, Node.INPUT_ID);
1124:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1125:       assertEquals(4095, Node.COLUMN_MASK);
1126:       assertEquals(47, Node.IS_DISPATCHER);
1127:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1128:       assertEquals(8, Node.FLAG_NO_THROWS);
1129:       assertEquals(39, Node.EMPTY_BLOCK);
1130:       assertEquals(37, Node.OPT_ARG_NAME);
1131:       assertEquals(48, Node.DIRECTIVES);
1132:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1133:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1134:       assertEquals(29, Node.JSDOC_INFO_PROP);
1135:       assertEquals(55, Node.INFERRED_FUNCTION);
1136:       assertEquals(49, Node.DIRECT_EVAL);
1137:       assertEquals(56, Node.CHANGE_TIME);
1138:       assertEquals(57, Node.REFLECTED_OBJECT);
1139:       assertEquals(57, Node.LAST_PROP);
1140:       assertEquals(52, Node.LENGTH);
1141:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1142:       assertEquals(1, Node.DECR_FLAG);
1143:       assertEquals(32, Node.INCRDECR_PROP);
1144:       assertEquals(30, Node.VAR_ARGS_NAME);
1145:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1146:       assertEquals(12, Node.COLUMN_BITS);
1147:       assertEquals(2, Node.POST_FLAG);
1148:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1149:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1150:       assertEquals(40, Node.ORIGINALNAME_PROP);
1151:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1152:       assertEquals(50, Node.FREE_CALL);
1153:       assertEquals(46, Node.IS_NAMESPACE);
1154:       assertEquals(54, Node.SLASH_V);
1155:       assertFalse(node0.equals((Object)node1));
1156:       assertTrue(boolean3 == boolean1);
1157:       assertTrue(boolean3 == boolean2);
1158:       assertTrue(boolean3 == boolean0);
1159:       assertFalse(node1.equals((Object)node0));
1160:       assertFalse(node0.isComma());
1161:       assertFalse(node0.isThis());
1162:       assertFalse(node0.isBreak());
1163:       assertFalse(node0.isGetProp());
1164:       assertFalse(node0.isThrow());
1165:       assertFalse(node0.isHook());
1166:       assertFalse(node0.isWith());
1167:       assertFalse(node0.isFalse());
1168:       assertFalse(node0.isInstanceOf());
1169:       assertFalse(node0.isInc());
1170:       assertFalse(node0.isExprResult());
1171:       assertFalse(node0.isIn());
1172:       assertFalse(node0.isNE());
1173:       assertFalse(node0.isLabelName());
1174:       assertFalse(node0.isAssignAdd());
1175:       assertFalse(node0.isLabel());
1176:       assertFalse(node0.isFor());
1177:       assertFalse(node0.isIf());
1178:       assertFalse(node0.hasMoreThanOneChild());
1179:       assertFalse(node0.isArrayLit());
1180:       assertEquals((-1), node0.getLineno());
1181:       assertFalse(node0.isSwitch());
1182:       assertFalse(node0.isScript());
1183:       assertFalse(node0.isRegExp());
1184:       assertEquals((-1), node0.getCharno());
1185:       assertFalse(node0.isTry());
1186:       assertTrue(node0.isString());
1187:       assertFalse(node0.isBlock());
1188:       assertFalse(node0.hasOneChild());
1189:       assertFalse(node0.isCase());
1190:       assertFalse(node0.isGetterDef());
1191:       assertFalse(node0.isNumber());
1192:       assertFalse(node0.isSetterDef());
1193:       assertFalse(node0.isNull());
1194:       assertFalse(node0.isName());
1195:       assertFalse(node0.isStringKey());
1196:       assertFalse(node0.isParamList());
1197:       assertFalse(node0.isVar());
1198:       assertFalse(node0.isCatch());
1199:       assertFalse(node0.isCall());
1200:       assertEquals(0, node0.getChildCount());
1201:       assertFalse(node0.isTrue());
1202:       assertFalse(node0.isFunction());
1203:       assertFalse(node0.isVoid());
1204:       assertFalse(node0.isNew());
1205:       assertFalse(node0.isDo());
1206:       assertEquals(40, node0.getType());
1207:       assertFalse(node0.isDefaultCase());
1208:       assertFalse(node0.isEmpty());
1209:       assertFalse(node0.isOr());
1210:       assertFalse(node0.isAdd());
1211:       assertFalse(node0.isTypeOf());
1212:       assertFalse(node0.hasChildren());
1213:       assertFalse(node0.isDec());
1214:       assertEquals((-1), node0.getSourcePosition());
1215:       assertFalse(node0.isDelProp());
1216:       assertFalse(node0.isReturn());
1217:       assertFalse(node0.isCast());
1218:       assertFalse(node0.isAssign());
1219:       assertFalse(node0.isGetElem());
1220:       assertFalse(node0.isContinue());
1221:       assertFalse(node0.isDebugger());
1222:       assertFalse(node0.isWhile());
1223:       assertFalse(node0.isAnd());
1224:       assertFalse(node0.isObjectLit());
1225:       assertFalse(node0.isNot());
1226:       assertFalse(node1.isBreak());
1227:       assertFalse(node1.isThis());
1228:       assertFalse(node1.isFalse());
1229:       assertFalse(node1.isComma());
1230:       assertFalse(node1.isInstanceOf());
1231:       assertFalse(node1.isAnd());
1232:       assertFalse(node1.isInc());
1233:       assertFalse(node1.isThrow());
1234:       assertFalse(node1.isTypeOf());
1235:       assertFalse(node1.isDec());
1236:       assertEquals((-1), node1.getSourcePosition());
1237:       assertFalse(node1.hasChildren());
1238:       assertFalse(node1.isEmpty());
1239:       assertFalse(node1.isAssign());
1240:       assertFalse(node1.isOr());
1241:       assertFalse(node1.isCast());
1242:       assertFalse(node1.isGetElem());
1243:       assertFalse(node1.isDelProp());
1244:       assertFalse(node1.isVoid());
1245:       assertFalse(node1.isString());
1246:       assertFalse(node1.isExprResult());
1247:       assertFalse(node1.isWhile());
1248:       assertFalse(node1.isDebugger());
1249:       assertFalse(node1.isObjectLit());
1250:       assertFalse(node1.isNot());
1251:       assertFalse(node1.isReturn());
1252:       assertFalse(node1.isGetProp());
1253:       assertFalse(node1.isNull());
1254:       assertFalse(node1.isSetterDef());
1255:       assertFalse(node1.isParamList());
1256:       assertEquals(0, node1.getChildCount());
1257:       assertFalse(node1.isCall());
1258:       assertFalse(node1.isCatch());
1259:       assertFalse(node1.isName());
1260:       assertFalse(node1.isStringKey());
1261:       assertFalse(node1.isDefaultCase());
1262:       assertFalse(node1.isTrue());
1263:       assertFalse(node1.isContinue());
1264:       assertFalse(node1.isFunction());
1265:       assertFalse(node1.isAdd());
1266:       assertFalse(node1.isVar());
1267:       assertFalse(node1.isNew());
1268:       assertFalse(node1.isAssignAdd());
1269:       assertTrue(node1.isIn());
1270:       assertFalse(node1.isDo());
1271:       assertFalse(node1.isNumber());
1272:       assertFalse(node1.isIf());
1273:       assertEquals(51, node1.getType());
1274:       assertFalse(node1.isNE());
1275:       assertFalse(node1.isFor());
1276:       assertFalse(node1.isLabel());
1277:       assertFalse(node1.isGetterDef());
1278:       assertFalse(node1.isArrayLit());
1279:       assertEquals((-1), node1.getLineno());
1280:       assertFalse(node1.isLabelName());
1281:       assertFalse(node1.isSwitch());
1282:       assertFalse(node1.isScript());
1283:       assertFalse(node1.isBlock());
1284:       assertEquals((-1), node1.getCharno());
1285:       assertFalse(node1.hasMoreThanOneChild());
1286:       assertFalse(node1.isWith());
1287:       assertFalse(node1.isRegExp());
1288:       assertFalse(node1.hasOneChild());
1289:       assertFalse(node1.isHook());
1290:       assertFalse(node1.isCase());
1291:       assertFalse(node1.isTry());
1292:       assertFalse(boolean3);
1293:       assertNotSame(node0, node1);
1294:       assertNotSame(node1, node0);
1295:   }
1296: }
RegularFileObject[/tmp/EvoSuite_102_1628256129499/com/google/javascript/rhino/Node_102_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:22:09 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_102_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_102_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.common.collect.Iterables",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_102_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.Token",
267:       "com.google.common.base.Preconditions",
268:       "com.google.common.base.Objects",
269:       "com.google.javascript.rhino.SimpleErrorReporter",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.common.collect.Sets",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.Iterators$12",
347:       "com.google.common.collect.AbstractIndexedListIterator",
348:       "com.google.common.collect.Iterators$11",
349:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
350:       "com.google.javascript.rhino.InputId",
351:       "com.google.javascript.rhino.JSTypeExpression",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Platform",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
364:       "com.google.javascript.rhino.jstype.NamedType",
365:       "com.google.common.collect.AbstractMultimap$Values",
366:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
367:       "com.google.common.collect.AbstractMapBasedMultimap$1",
368:       "com.google.common.collect.Multimaps$Entries",
369:       "com.google.common.collect.AbstractMultimap$Entries",
370:       "com.google.common.collect.AbstractMapBasedMultimap$2",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
373:     );
374:   }
375: }

[MASTER] 13:22:09.751 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertNotNull(iterable0);

int int0 = node0.getLength();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, int0);

boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
assertFalse(boolean0);

int int1 = node0.getSideEffectFlags();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertTrue(int1 == int0);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, int1);

int int2 = node0.getSourcePosition();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(int2 == int0);
assertFalse(int2 == int1);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), int2);

boolean boolean1 = node0.isFalse();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(boolean1);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1237));
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1237), node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
assertEquals((-1245), node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1245), node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);

node_SideEffectFlags0.clearSideEffectFlags();
assertEquals((-1233), node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);

Node node1 = Node.newString(51, "", (-2881), 38);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isIn());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertEquals(51, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertNotNull(node1);
assertNotSame(node1, node0);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertNotNull(node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setAllFlags();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);

node_SideEffectFlags0.clearSideEffectFlags();
assertEquals(15, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setAllFlags();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertNotNull(node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.clearAllFlags();
assertEquals(31, node_SideEffectFlags6.valueOf());
assertFalse(node_SideEffectFlags6.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags6);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);

boolean boolean2 = node0.isEquivalentTo(node1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isIn());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertEquals(51, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(boolean2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);

boolean boolean3 = node1.isEquivalentTo(node0, true, true, true);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isIn());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertEquals(51, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(boolean3);
assertNotSame(node0, node1);
assertNotSame(node1, node0);


[MASTER] 13:22:11.791 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_111_1628256131666/com/google/javascript/rhino/Node_111_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_111_1628256131666/com/google/javascript/rhino/Node_111_tmp__ESTest_scaffolding.java]]
[MASTER] 13:22:11.791 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:22:11.791 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:22:11.792 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 162
[MASTER] 13:22:11.793 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_111_1628256131666/com/google/javascript/rhino/Node_111_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:22:11 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_111_tmp__ESTest extends Node_111_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("");
21:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
22:       assertEquals(29, Node.JSDOC_INFO_PROP);
23:       assertEquals(2, Node.POST_FLAG);
24:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
25:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
26:       assertEquals(53, Node.INPUT_ID);
27:       assertEquals(47, Node.IS_DISPATCHER);
28:       assertEquals(32, Node.INCRDECR_PROP);
29:       assertEquals(1, Node.DECR_FLAG);
30:       assertEquals(30, Node.VAR_ARGS_NAME);
31:       assertEquals(51, Node.STATIC_SOURCE_FILE);
32:       assertEquals(54, Node.SLASH_V);
33:       assertEquals(46, Node.IS_NAMESPACE);
34:       assertEquals(43, Node.IS_CONSTANT_NAME);
35:       assertEquals(40, Node.ORIGINALNAME_PROP);
36:       assertEquals(57, Node.REFLECTED_OBJECT);
37:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
38:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
39:       assertEquals(50, Node.FREE_CALL);
40:       assertEquals(52, Node.LENGTH);
41:       assertEquals(8, Node.FLAG_NO_THROWS);
42:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
43:       assertEquals(15, Node.NO_SIDE_EFFECTS);
44:       assertEquals(39, Node.EMPTY_BLOCK);
45:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
46:       assertEquals(57, Node.LAST_PROP);
47:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
48:       assertEquals(55, Node.INFERRED_FUNCTION);
49:       assertEquals(12, Node.COLUMN_BITS);
50:       assertEquals(4095, Node.COLUMN_MASK);
51:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
52:       assertEquals(37, Node.OPT_ARG_NAME);
53:       assertEquals(48, Node.DIRECTIVES);
54:       assertEquals(36, Node.QUOTED_PROP);
55:       assertEquals(56, Node.CHANGE_TIME);
56:       assertEquals(49, Node.DIRECT_EVAL);
57:       assertFalse(node0.isCatch());
58:       assertEquals(0, node0.getChildCount());
59:       assertEquals(40, node0.getType());
60:       assertFalse(node0.isParamList());
61:       assertFalse(node0.isVoid());
62:       assertFalse(node0.isFunction());
63:       assertFalse(node0.isRegExp());
64:       assertFalse(node0.isCall());
65:       assertFalse(node0.isArrayLit());
66:       assertFalse(node0.isFor());
67:       assertFalse(node0.isStringKey());
68:       assertFalse(node0.isBlock());
69:       assertFalse(node0.isDebugger());
70:       assertFalse(node0.isGetterDef());
71:       assertTrue(node0.isString());
72:       assertFalse(node0.isTry());
73:       assertFalse(node0.hasMoreThanOneChild());
74:       assertFalse(node0.isIn());
75:       assertFalse(node0.isContinue());
76:       assertFalse(node0.isNE());
77:       assertFalse(node0.isIf());
78:       assertEquals((-1), node0.getLineno());
79:       assertFalse(node0.isCast());
80:       assertFalse(node0.isFalse());
81:       assertFalse(node0.isThrow());
82:       assertFalse(node0.isInc());
83:       assertFalse(node0.isSetterDef());
84:       assertFalse(node0.isAnd());
85:       assertFalse(node0.isInstanceOf());
86:       assertFalse(node0.isObjectLit());
87:       assertFalse(node0.isNot());
88:       assertFalse(node0.isThis());
89:       assertFalse(node0.isComma());
90:       assertFalse(node0.isWith());
91:       assertFalse(node0.isBreak());
92:       assertFalse(node0.isExprResult());
93:       assertFalse(node0.hasOneChild());
94:       assertFalse(node0.isAssign());
95:       assertEquals((-1), node0.getCharno());
96:       assertFalse(node0.hasChildren());
97:       assertFalse(node0.isHook());
98:       assertFalse(node0.isScript());
99:       assertEquals((-1), node0.getSourcePosition());
100:       assertFalse(node0.isNumber());
101:       assertFalse(node0.isCase());
102:       assertFalse(node0.isGetProp());
103:       assertFalse(node0.isOr());
104:       assertFalse(node0.isAssignAdd());
105:       assertFalse(node0.isLabel());
106:       assertFalse(node0.isWhile());
107:       assertFalse(node0.isReturn());
108:       assertFalse(node0.isSwitch());
109:       assertFalse(node0.isDec());
110:       assertFalse(node0.isDelProp());
111:       assertFalse(node0.isTypeOf());
112:       assertFalse(node0.isLabelName());
113:       assertFalse(node0.isGetElem());
114:       assertFalse(node0.isVar());
115:       assertFalse(node0.isName());
116:       assertFalse(node0.isTrue());
117:       assertFalse(node0.isNull());
118:       assertFalse(node0.isDefaultCase());
119:       assertFalse(node0.isEmpty());
120:       assertFalse(node0.isDo());
121:       assertFalse(node0.isNew());
122:       assertFalse(node0.isAdd());
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
127:       assertEquals(29, Node.JSDOC_INFO_PROP);
128:       assertEquals(2, Node.POST_FLAG);
129:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
130:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
131:       assertEquals(53, Node.INPUT_ID);
132:       assertEquals(47, Node.IS_DISPATCHER);
133:       assertEquals(32, Node.INCRDECR_PROP);
134:       assertEquals(1, Node.DECR_FLAG);
135:       assertEquals(30, Node.VAR_ARGS_NAME);
136:       assertEquals(51, Node.STATIC_SOURCE_FILE);
137:       assertEquals(54, Node.SLASH_V);
138:       assertEquals(46, Node.IS_NAMESPACE);
139:       assertEquals(43, Node.IS_CONSTANT_NAME);
140:       assertEquals(40, Node.ORIGINALNAME_PROP);
141:       assertEquals(57, Node.REFLECTED_OBJECT);
142:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
143:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
144:       assertEquals(50, Node.FREE_CALL);
145:       assertEquals(52, Node.LENGTH);
146:       assertEquals(8, Node.FLAG_NO_THROWS);
147:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
148:       assertEquals(15, Node.NO_SIDE_EFFECTS);
149:       assertEquals(39, Node.EMPTY_BLOCK);
150:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
151:       assertEquals(57, Node.LAST_PROP);
152:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
153:       assertEquals(55, Node.INFERRED_FUNCTION);
154:       assertEquals(12, Node.COLUMN_BITS);
155:       assertEquals(4095, Node.COLUMN_MASK);
156:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
157:       assertEquals(37, Node.OPT_ARG_NAME);
158:       assertEquals(48, Node.DIRECTIVES);
159:       assertEquals(36, Node.QUOTED_PROP);
160:       assertEquals(56, Node.CHANGE_TIME);
161:       assertEquals(49, Node.DIRECT_EVAL);
162:       assertFalse(iterable0.contains(node0));
163:       assertFalse(node0.isCatch());
164:       assertEquals(0, node0.getChildCount());
165:       assertEquals(40, node0.getType());
166:       assertFalse(node0.isParamList());
167:       assertFalse(node0.isVoid());
168:       assertFalse(node0.isFunction());
169:       assertFalse(node0.isRegExp());
170:       assertFalse(node0.isCall());
171:       assertFalse(node0.isArrayLit());
172:       assertFalse(node0.isFor());
173:       assertFalse(node0.isStringKey());
174:       assertFalse(node0.isBlock());
175:       assertFalse(node0.isDebugger());
176:       assertFalse(node0.isGetterDef());
177:       assertTrue(node0.isString());
178:       assertFalse(node0.isTry());
179:       assertFalse(node0.hasMoreThanOneChild());
180:       assertFalse(node0.isIn());
181:       assertFalse(node0.isContinue());
182:       assertFalse(node0.isNE());
183:       assertFalse(node0.isIf());
184:       assertEquals((-1), node0.getLineno());
185:       assertFalse(node0.isCast());
186:       assertFalse(node0.isFalse());
187:       assertFalse(node0.isThrow());
188:       assertFalse(node0.isInc());
189:       assertFalse(node0.isSetterDef());
190:       assertFalse(node0.isAnd());
191:       assertFalse(node0.isInstanceOf());
192:       assertFalse(node0.isObjectLit());
193:       assertFalse(node0.isNot());
194:       assertFalse(node0.isThis());
195:       assertFalse(node0.isComma());
196:       assertFalse(node0.isWith());
197:       assertFalse(node0.isBreak());
198:       assertFalse(node0.isExprResult());
199:       assertFalse(node0.hasOneChild());
200:       assertFalse(node0.isAssign());
201:       assertEquals((-1), node0.getCharno());
202:       assertFalse(node0.hasChildren());
203:       assertFalse(node0.isHook());
204:       assertFalse(node0.isScript());
205:       assertEquals((-1), node0.getSourcePosition());
206:       assertFalse(node0.isNumber());
207:       assertFalse(node0.isCase());
208:       assertFalse(node0.isGetProp());
209:       assertFalse(node0.isOr());
210:       assertFalse(node0.isAssignAdd());
211:       assertFalse(node0.isLabel());
212:       assertFalse(node0.isWhile());
213:       assertFalse(node0.isReturn());
214:       assertFalse(node0.isSwitch());
215:       assertFalse(node0.isDec());
216:       assertFalse(node0.isDelProp());
217:       assertFalse(node0.isTypeOf());
218:       assertFalse(node0.isLabelName());
219:       assertFalse(node0.isGetElem());
220:       assertFalse(node0.isVar());
221:       assertFalse(node0.isName());
222:       assertFalse(node0.isTrue());
223:       assertFalse(node0.isNull());
224:       assertFalse(node0.isDefaultCase());
225:       assertFalse(node0.isEmpty());
226:       assertFalse(node0.isDo());
227:       assertFalse(node0.isNew());
228:       assertFalse(node0.isAdd());
229:       assertNotNull(iterable0);
230:       
231:       int int0 = node0.getLength();
232:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
233:       assertEquals(29, Node.JSDOC_INFO_PROP);
234:       assertEquals(2, Node.POST_FLAG);
235:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
236:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
237:       assertEquals(53, Node.INPUT_ID);
238:       assertEquals(47, Node.IS_DISPATCHER);
239:       assertEquals(32, Node.INCRDECR_PROP);
240:       assertEquals(1, Node.DECR_FLAG);
241:       assertEquals(30, Node.VAR_ARGS_NAME);
242:       assertEquals(51, Node.STATIC_SOURCE_FILE);
243:       assertEquals(54, Node.SLASH_V);
244:       assertEquals(46, Node.IS_NAMESPACE);
245:       assertEquals(43, Node.IS_CONSTANT_NAME);
246:       assertEquals(40, Node.ORIGINALNAME_PROP);
247:       assertEquals(57, Node.REFLECTED_OBJECT);
248:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
249:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
250:       assertEquals(50, Node.FREE_CALL);
251:       assertEquals(52, Node.LENGTH);
252:       assertEquals(8, Node.FLAG_NO_THROWS);
253:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
254:       assertEquals(15, Node.NO_SIDE_EFFECTS);
255:       assertEquals(39, Node.EMPTY_BLOCK);
256:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
257:       assertEquals(57, Node.LAST_PROP);
258:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
259:       assertEquals(55, Node.INFERRED_FUNCTION);
260:       assertEquals(12, Node.COLUMN_BITS);
261:       assertEquals(4095, Node.COLUMN_MASK);
262:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
263:       assertEquals(37, Node.OPT_ARG_NAME);
264:       assertEquals(48, Node.DIRECTIVES);
265:       assertEquals(36, Node.QUOTED_PROP);
266:       assertEquals(56, Node.CHANGE_TIME);
267:       assertEquals(49, Node.DIRECT_EVAL);
268:       assertFalse(node0.isCatch());
269:       assertEquals(0, node0.getChildCount());
270:       assertEquals(40, node0.getType());
271:       assertFalse(node0.isParamList());
272:       assertFalse(node0.isVoid());
273:       assertFalse(node0.isFunction());
274:       assertFalse(node0.isRegExp());
275:       assertFalse(node0.isCall());
276:       assertFalse(node0.isArrayLit());
277:       assertFalse(node0.isFor());
278:       assertFalse(node0.isStringKey());
279:       assertFalse(node0.isBlock());
280:       assertFalse(node0.isDebugger());
281:       assertFalse(node0.isGetterDef());
282:       assertTrue(node0.isString());
283:       assertFalse(node0.isTry());
284:       assertFalse(node0.hasMoreThanOneChild());
285:       assertFalse(node0.isIn());
286:       assertFalse(node0.isContinue());
287:       assertFalse(node0.isNE());
288:       assertFalse(node0.isIf());
289:       assertEquals((-1), node0.getLineno());
290:       assertFalse(node0.isCast());
291:       assertFalse(node0.isFalse());
292:       assertFalse(node0.isThrow());
293:       assertFalse(node0.isInc());
294:       assertFalse(node0.isSetterDef());
295:       assertFalse(node0.isAnd());
296:       assertFalse(node0.isInstanceOf());
297:       assertFalse(node0.isObjectLit());
298:       assertFalse(node0.isNot());
299:       assertFalse(node0.isThis());
300:       assertFalse(node0.isComma());
301:       assertFalse(node0.isWith());
302:       assertFalse(node0.isBreak());
303:       assertFalse(node0.isExprResult());
304:       assertFalse(node0.hasOneChild());
305:       assertFalse(node0.isAssign());
306:       assertEquals((-1), node0.getCharno());
307:       assertFalse(node0.hasChildren());
308:       assertFalse(node0.isHook());
309:       assertFalse(node0.isScript());
310:       assertEquals((-1), node0.getSourcePosition());
311:       assertFalse(node0.isNumber());
312:       assertFalse(node0.isCase());
313:       assertFalse(node0.isGetProp());
314:       assertFalse(node0.isOr());
315:       assertFalse(node0.isAssignAdd());
316:       assertFalse(node0.isLabel());
317:       assertFalse(node0.isWhile());
318:       assertFalse(node0.isReturn());
319:       assertFalse(node0.isSwitch());
320:       assertFalse(node0.isDec());
321:       assertFalse(node0.isDelProp());
322:       assertFalse(node0.isTypeOf());
323:       assertFalse(node0.isLabelName());
324:       assertFalse(node0.isGetElem());
325:       assertFalse(node0.isVar());
326:       assertFalse(node0.isName());
327:       assertFalse(node0.isTrue());
328:       assertFalse(node0.isNull());
329:       assertFalse(node0.isDefaultCase());
330:       assertFalse(node0.isEmpty());
331:       assertFalse(node0.isDo());
332:       assertFalse(node0.isNew());
333:       assertFalse(node0.isAdd());
334:       assertEquals(0, int0);
335:       
336:       int int1 = node0.getSideEffectFlags();
337:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
338:       assertEquals(29, Node.JSDOC_INFO_PROP);
339:       assertEquals(2, Node.POST_FLAG);
340:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
341:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
342:       assertEquals(53, Node.INPUT_ID);
343:       assertEquals(47, Node.IS_DISPATCHER);
344:       assertEquals(32, Node.INCRDECR_PROP);
345:       assertEquals(1, Node.DECR_FLAG);
346:       assertEquals(30, Node.VAR_ARGS_NAME);
347:       assertEquals(51, Node.STATIC_SOURCE_FILE);
348:       assertEquals(54, Node.SLASH_V);
349:       assertEquals(46, Node.IS_NAMESPACE);
350:       assertEquals(43, Node.IS_CONSTANT_NAME);
351:       assertEquals(40, Node.ORIGINALNAME_PROP);
352:       assertEquals(57, Node.REFLECTED_OBJECT);
353:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
354:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
355:       assertEquals(50, Node.FREE_CALL);
356:       assertEquals(52, Node.LENGTH);
357:       assertEquals(8, Node.FLAG_NO_THROWS);
358:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
359:       assertEquals(15, Node.NO_SIDE_EFFECTS);
360:       assertEquals(39, Node.EMPTY_BLOCK);
361:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
362:       assertEquals(57, Node.LAST_PROP);
363:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
364:       assertEquals(55, Node.INFERRED_FUNCTION);
365:       assertEquals(12, Node.COLUMN_BITS);
366:       assertEquals(4095, Node.COLUMN_MASK);
367:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
368:       assertEquals(37, Node.OPT_ARG_NAME);
369:       assertEquals(48, Node.DIRECTIVES);
370:       assertEquals(36, Node.QUOTED_PROP);
371:       assertEquals(56, Node.CHANGE_TIME);
372:       assertEquals(49, Node.DIRECT_EVAL);
373:       assertTrue(int1 == int0);
374:       assertFalse(node0.isCatch());
375:       assertEquals(0, node0.getChildCount());
376:       assertEquals(40, node0.getType());
377:       assertFalse(node0.isParamList());
378:       assertFalse(node0.isVoid());
379:       assertFalse(node0.isFunction());
380:       assertFalse(node0.isRegExp());
381:       assertFalse(node0.isCall());
382:       assertFalse(node0.isArrayLit());
383:       assertFalse(node0.isFor());
384:       assertFalse(node0.isStringKey());
385:       assertFalse(node0.isBlock());
386:       assertFalse(node0.isDebugger());
387:       assertFalse(node0.isGetterDef());
388:       assertTrue(node0.isString());
389:       assertFalse(node0.isTry());
390:       assertFalse(node0.hasMoreThanOneChild());
391:       assertFalse(node0.isIn());
392:       assertFalse(node0.isContinue());
393:       assertFalse(node0.isNE());
394:       assertFalse(node0.isIf());
395:       assertEquals((-1), node0.getLineno());
396:       assertFalse(node0.isCast());
397:       assertFalse(node0.isFalse());
398:       assertFalse(node0.isThrow());
399:       assertFalse(node0.isInc());
400:       assertFalse(node0.isSetterDef());
401:       assertFalse(node0.isAnd());
402:       assertFalse(node0.isInstanceOf());
403:       assertFalse(node0.isObjectLit());
404:       assertFalse(node0.isNot());
405:       assertFalse(node0.isThis());
406:       assertFalse(node0.isComma());
407:       assertFalse(node0.isWith());
408:       assertFalse(node0.isBreak());
409:       assertFalse(node0.isExprResult());
410:       assertFalse(node0.hasOneChild());
411:       assertFalse(node0.isAssign());
412:       assertEquals((-1), node0.getCharno());
413:       assertFalse(node0.hasChildren());
414:       assertFalse(node0.isHook());
415:       assertFalse(node0.isScript());
416:       assertEquals((-1), node0.getSourcePosition());
417:       assertFalse(node0.isNumber());
418:       assertFalse(node0.isCase());
419:       assertFalse(node0.isGetProp());
420:       assertFalse(node0.isOr());
421:       assertFalse(node0.isAssignAdd());
422:       assertFalse(node0.isLabel());
423:       assertFalse(node0.isWhile());
424:       assertFalse(node0.isReturn());
425:       assertFalse(node0.isSwitch());
426:       assertFalse(node0.isDec());
427:       assertFalse(node0.isDelProp());
428:       assertFalse(node0.isTypeOf());
429:       assertFalse(node0.isLabelName());
430:       assertFalse(node0.isGetElem());
431:       assertFalse(node0.isVar());
432:       assertFalse(node0.isName());
433:       assertFalse(node0.isTrue());
434:       assertFalse(node0.isNull());
435:       assertFalse(node0.isDefaultCase());
436:       assertFalse(node0.isEmpty());
437:       assertFalse(node0.isDo());
438:       assertFalse(node0.isNew());
439:       assertFalse(node0.isAdd());
440:       assertEquals(0, int1);
441:       
442:       int int2 = node0.getSourcePosition();
443:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
444:       assertEquals(29, Node.JSDOC_INFO_PROP);
445:       assertEquals(2, Node.POST_FLAG);
446:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
447:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
448:       assertEquals(53, Node.INPUT_ID);
449:       assertEquals(47, Node.IS_DISPATCHER);
450:       assertEquals(32, Node.INCRDECR_PROP);
451:       assertEquals(1, Node.DECR_FLAG);
452:       assertEquals(30, Node.VAR_ARGS_NAME);
453:       assertEquals(51, Node.STATIC_SOURCE_FILE);
454:       assertEquals(54, Node.SLASH_V);
455:       assertEquals(46, Node.IS_NAMESPACE);
456:       assertEquals(43, Node.IS_CONSTANT_NAME);
457:       assertEquals(40, Node.ORIGINALNAME_PROP);
458:       assertEquals(57, Node.REFLECTED_OBJECT);
459:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
460:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
461:       assertEquals(50, Node.FREE_CALL);
462:       assertEquals(52, Node.LENGTH);
463:       assertEquals(8, Node.FLAG_NO_THROWS);
464:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
465:       assertEquals(15, Node.NO_SIDE_EFFECTS);
466:       assertEquals(39, Node.EMPTY_BLOCK);
467:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
468:       assertEquals(57, Node.LAST_PROP);
469:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
470:       assertEquals(55, Node.INFERRED_FUNCTION);
471:       assertEquals(12, Node.COLUMN_BITS);
472:       assertEquals(4095, Node.COLUMN_MASK);
473:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
474:       assertEquals(37, Node.OPT_ARG_NAME);
475:       assertEquals(48, Node.DIRECTIVES);
476:       assertEquals(36, Node.QUOTED_PROP);
477:       assertEquals(56, Node.CHANGE_TIME);
478:       assertEquals(49, Node.DIRECT_EVAL);
479:       assertFalse(int2 == int0);
480:       assertFalse(int2 == int1);
481:       assertFalse(node0.isCatch());
482:       assertEquals(0, node0.getChildCount());
483:       assertEquals(40, node0.getType());
484:       assertFalse(node0.isParamList());
485:       assertFalse(node0.isVoid());
486:       assertFalse(node0.isFunction());
487:       assertFalse(node0.isRegExp());
488:       assertFalse(node0.isCall());
489:       assertFalse(node0.isArrayLit());
490:       assertFalse(node0.isFor());
491:       assertFalse(node0.isStringKey());
492:       assertFalse(node0.isBlock());
493:       assertFalse(node0.isDebugger());
494:       assertFalse(node0.isGetterDef());
495:       assertTrue(node0.isString());
496:       assertFalse(node0.isTry());
497:       assertFalse(node0.hasMoreThanOneChild());
498:       assertFalse(node0.isIn());
499:       assertFalse(node0.isContinue());
500:       assertFalse(node0.isNE());
501:       assertFalse(node0.isIf());
502:       assertEquals((-1), node0.getLineno());
503:       assertFalse(node0.isCast());
504:       assertFalse(node0.isFalse());
505:       assertFalse(node0.isThrow());
506:       assertFalse(node0.isInc());
507:       assertFalse(node0.isSetterDef());
508:       assertFalse(node0.isAnd());
509:       assertFalse(node0.isInstanceOf());
510:       assertFalse(node0.isObjectLit());
511:       assertFalse(node0.isNot());
512:       assertFalse(node0.isThis());
513:       assertFalse(node0.isComma());
514:       assertFalse(node0.isWith());
515:       assertFalse(node0.isBreak());
516:       assertFalse(node0.isExprResult());
517:       assertFalse(node0.hasOneChild());
518:       assertFalse(node0.isAssign());
519:       assertEquals((-1), node0.getCharno());
520:       assertFalse(node0.hasChildren());
521:       assertFalse(node0.isHook());
522:       assertFalse(node0.isScript());
523:       assertEquals((-1), node0.getSourcePosition());
524:       assertFalse(node0.isNumber());
525:       assertFalse(node0.isCase());
526:       assertFalse(node0.isGetProp());
527:       assertFalse(node0.isOr());
528:       assertFalse(node0.isAssignAdd());
529:       assertFalse(node0.isLabel());
530:       assertFalse(node0.isWhile());
531:       assertFalse(node0.isReturn());
532:       assertFalse(node0.isSwitch());
533:       assertFalse(node0.isDec());
534:       assertFalse(node0.isDelProp());
535:       assertFalse(node0.isTypeOf());
536:       assertFalse(node0.isLabelName());
537:       assertFalse(node0.isGetElem());
538:       assertFalse(node0.isVar());
539:       assertFalse(node0.isName());
540:       assertFalse(node0.isTrue());
541:       assertFalse(node0.isNull());
542:       assertFalse(node0.isDefaultCase());
543:       assertFalse(node0.isEmpty());
544:       assertFalse(node0.isDo());
545:       assertFalse(node0.isNew());
546:       assertFalse(node0.isAdd());
547:       assertEquals((-1), int2);
548:       
549:       boolean boolean0 = node0.isFalse();
550:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
551:       assertEquals(29, Node.JSDOC_INFO_PROP);
552:       assertEquals(2, Node.POST_FLAG);
553:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
554:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
555:       assertEquals(53, Node.INPUT_ID);
556:       assertEquals(47, Node.IS_DISPATCHER);
557:       assertEquals(32, Node.INCRDECR_PROP);
558:       assertEquals(1, Node.DECR_FLAG);
559:       assertEquals(30, Node.VAR_ARGS_NAME);
560:       assertEquals(51, Node.STATIC_SOURCE_FILE);
561:       assertEquals(54, Node.SLASH_V);
562:       assertEquals(46, Node.IS_NAMESPACE);
563:       assertEquals(43, Node.IS_CONSTANT_NAME);
564:       assertEquals(40, Node.ORIGINALNAME_PROP);
565:       assertEquals(57, Node.REFLECTED_OBJECT);
566:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
567:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
568:       assertEquals(50, Node.FREE_CALL);
569:       assertEquals(52, Node.LENGTH);
570:       assertEquals(8, Node.FLAG_NO_THROWS);
571:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
572:       assertEquals(15, Node.NO_SIDE_EFFECTS);
573:       assertEquals(39, Node.EMPTY_BLOCK);
574:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
575:       assertEquals(57, Node.LAST_PROP);
576:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
577:       assertEquals(55, Node.INFERRED_FUNCTION);
578:       assertEquals(12, Node.COLUMN_BITS);
579:       assertEquals(4095, Node.COLUMN_MASK);
580:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
581:       assertEquals(37, Node.OPT_ARG_NAME);
582:       assertEquals(48, Node.DIRECTIVES);
583:       assertEquals(36, Node.QUOTED_PROP);
584:       assertEquals(56, Node.CHANGE_TIME);
585:       assertEquals(49, Node.DIRECT_EVAL);
586:       assertFalse(node0.isCatch());
587:       assertEquals(0, node0.getChildCount());
588:       assertEquals(40, node0.getType());
589:       assertFalse(node0.isParamList());
590:       assertFalse(node0.isVoid());
591:       assertFalse(node0.isFunction());
592:       assertFalse(node0.isRegExp());
593:       assertFalse(node0.isCall());
594:       assertFalse(node0.isArrayLit());
595:       assertFalse(node0.isFor());
596:       assertFalse(node0.isStringKey());
597:       assertFalse(node0.isBlock());
598:       assertFalse(node0.isDebugger());
599:       assertFalse(node0.isGetterDef());
600:       assertTrue(node0.isString());
601:       assertFalse(node0.isTry());
602:       assertFalse(node0.hasMoreThanOneChild());
603:       assertFalse(node0.isIn());
604:       assertFalse(node0.isContinue());
605:       assertFalse(node0.isNE());
606:       assertFalse(node0.isIf());
607:       assertEquals((-1), node0.getLineno());
608:       assertFalse(node0.isCast());
609:       assertFalse(node0.isFalse());
610:       assertFalse(node0.isThrow());
611:       assertFalse(node0.isInc());
612:       assertFalse(node0.isSetterDef());
613:       assertFalse(node0.isAnd());
614:       assertFalse(node0.isInstanceOf());
615:       assertFalse(node0.isObjectLit());
616:       assertFalse(node0.isNot());
617:       assertFalse(node0.isThis());
618:       assertFalse(node0.isComma());
619:       assertFalse(node0.isWith());
620:       assertFalse(node0.isBreak());
621:       assertFalse(node0.isExprResult());
622:       assertFalse(node0.hasOneChild());
623:       assertFalse(node0.isAssign());
624:       assertEquals((-1), node0.getCharno());
625:       assertFalse(node0.hasChildren());
626:       assertFalse(node0.isHook());
627:       assertFalse(node0.isScript());
628:       assertEquals((-1), node0.getSourcePosition());
629:       assertFalse(node0.isNumber());
630:       assertFalse(node0.isCase());
631:       assertFalse(node0.isGetProp());
632:       assertFalse(node0.isOr());
633:       assertFalse(node0.isAssignAdd());
634:       assertFalse(node0.isLabel());
635:       assertFalse(node0.isWhile());
636:       assertFalse(node0.isReturn());
637:       assertFalse(node0.isSwitch());
638:       assertFalse(node0.isDec());
639:       assertFalse(node0.isDelProp());
640:       assertFalse(node0.isTypeOf());
641:       assertFalse(node0.isLabelName());
642:       assertFalse(node0.isGetElem());
643:       assertFalse(node0.isVar());
644:       assertFalse(node0.isName());
645:       assertFalse(node0.isTrue());
646:       assertFalse(node0.isNull());
647:       assertFalse(node0.isDefaultCase());
648:       assertFalse(node0.isEmpty());
649:       assertFalse(node0.isDo());
650:       assertFalse(node0.isNew());
651:       assertFalse(node0.isAdd());
652:       assertFalse(boolean0);
653:       
654:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1237));
655:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
656:       assertEquals((-1237), node_SideEffectFlags0.valueOf());
657:       assertNotNull(node_SideEffectFlags0);
658:       
659:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
660:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
661:       assertEquals(31, node_SideEffectFlags0.valueOf());
662:       assertEquals(31, node_SideEffectFlags1.valueOf());
663:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
664:       assertNotNull(node_SideEffectFlags1);
665:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
666:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
667:       
668:       node_SideEffectFlags0.clearSideEffectFlags();
669:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
670:       assertEquals(31, node_SideEffectFlags0.valueOf());
671:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
672:       
673:       Node node1 = Node.newString(51, "", (-2881), 38);
674:       assertEquals(53, Node.INPUT_ID);
675:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
676:       assertEquals(36, Node.QUOTED_PROP);
677:       assertEquals(29, Node.JSDOC_INFO_PROP);
678:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
679:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
680:       assertEquals(47, Node.IS_DISPATCHER);
681:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
682:       assertEquals(37, Node.OPT_ARG_NAME);
683:       assertEquals(39, Node.EMPTY_BLOCK);
684:       assertEquals(4095, Node.COLUMN_MASK);
685:       assertEquals(55, Node.INFERRED_FUNCTION);
686:       assertEquals(8, Node.FLAG_NO_THROWS);
687:       assertEquals(49, Node.DIRECT_EVAL);
688:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
689:       assertEquals(56, Node.CHANGE_TIME);
690:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
691:       assertEquals(48, Node.DIRECTIVES);
692:       assertEquals(54, Node.SLASH_V);
693:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
694:       assertEquals(57, Node.REFLECTED_OBJECT);
695:       assertEquals(52, Node.LENGTH);
696:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
697:       assertEquals(30, Node.VAR_ARGS_NAME);
698:       assertEquals(1, Node.DECR_FLAG);
699:       assertEquals(15, Node.NO_SIDE_EFFECTS);
700:       assertEquals(12, Node.COLUMN_BITS);
701:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
702:       assertEquals(57, Node.LAST_PROP);
703:       assertEquals(32, Node.INCRDECR_PROP);
704:       assertEquals(46, Node.IS_NAMESPACE);
705:       assertEquals(2, Node.POST_FLAG);
706:       assertEquals(51, Node.STATIC_SOURCE_FILE);
707:       assertEquals(50, Node.FREE_CALL);
708:       assertEquals(40, Node.ORIGINALNAME_PROP);
709:       assertEquals(43, Node.IS_CONSTANT_NAME);
710:       assertFalse(node1.equals((Object)node0));
711:       assertFalse(node1.isParamList());
712:       assertEquals(0, node1.getChildCount());
713:       assertFalse(node1.isNull());
714:       assertFalse(node1.isStringKey());
715:       assertFalse(node1.isName());
716:       assertFalse(node1.isCatch());
717:       assertFalse(node1.isCall());
718:       assertFalse(node1.isVoid());
719:       assertFalse(node1.isNew());
720:       assertFalse(node1.isFunction());
721:       assertFalse(node1.isDefaultCase());
722:       assertFalse(node1.isVar());
723:       assertFalse(node1.isTrue());
724:       assertTrue(node1.isIn());
725:       assertFalse(node1.isDo());
726:       assertFalse(node1.isEmpty());
727:       assertFalse(node1.isSetterDef());
728:       assertFalse(node1.isAdd());
729:       assertFalse(node1.isAssignAdd());
730:       assertEquals(51, node1.getType());
731:       assertFalse(node1.isIf());
732:       assertFalse(node1.isNE());
733:       assertFalse(node1.isLabel());
734:       assertFalse(node1.isFor());
735:       assertFalse(node1.isLabelName());
736:       assertFalse(node1.hasMoreThanOneChild());
737:       assertFalse(node1.isArrayLit());
738:       assertEquals((-1), node1.getLineno());
739:       assertEquals((-1), node1.getCharno());
740:       assertFalse(node1.isSwitch());
741:       assertFalse(node1.isTry());
742:       assertFalse(node1.isRegExp());
743:       assertFalse(node1.isHook());
744:       assertFalse(node1.isBlock());
745:       assertFalse(node1.isCase());
746:       assertFalse(node1.isGetterDef());
747:       assertFalse(node1.isNumber());
748:       assertFalse(node1.hasOneChild());
749:       assertFalse(node1.isScript());
750:       assertFalse(node1.isGetProp());
751:       assertFalse(node1.isComma());
752:       assertFalse(node1.isThis());
753:       assertFalse(node1.isFalse());
754:       assertFalse(node1.isAnd());
755:       assertFalse(node1.isWith());
756:       assertFalse(node1.isBreak());
757:       assertFalse(node1.isInstanceOf());
758:       assertFalse(node1.isExprResult());
759:       assertFalse(node1.isThrow());
760:       assertFalse(node1.isInc());
761:       assertFalse(node1.isOr());
762:       assertFalse(node1.isTypeOf());
763:       assertFalse(node1.hasChildren());
764:       assertFalse(node1.isDec());
765:       assertEquals((-1), node1.getSourcePosition());
766:       assertFalse(node1.isReturn());
767:       assertFalse(node1.isContinue());
768:       assertFalse(node1.isAssign());
769:       assertFalse(node1.isDelProp());
770:       assertFalse(node1.isCast());
771:       assertFalse(node1.isGetElem());
772:       assertFalse(node1.isDebugger());
773:       assertFalse(node1.isWhile());
774:       assertFalse(node1.isNot());
775:       assertFalse(node1.isObjectLit());
776:       assertFalse(node1.isString());
777:       assertNotNull(node1);
778:       assertNotSame(node1, node0);
779:       
780:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
781:       assertEquals(0, node_SideEffectFlags0.valueOf());
782:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
783:       assertEquals(0, node_SideEffectFlags2.valueOf());
784:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
785:       assertNotNull(node_SideEffectFlags2);
786:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
787:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
788:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
789:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
790:       
791:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
792:       assertEquals(0, node_SideEffectFlags0.valueOf());
793:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
794:       assertEquals(0, node_SideEffectFlags3.valueOf());
795:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
796:       assertNotNull(node_SideEffectFlags3);
797:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
798:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
799:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
800:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
801:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
802:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
803:       
804:       node0.setString("");
805:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
806:       assertEquals(29, Node.JSDOC_INFO_PROP);
807:       assertEquals(2, Node.POST_FLAG);
808:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
809:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
810:       assertEquals(53, Node.INPUT_ID);
811:       assertEquals(47, Node.IS_DISPATCHER);
812:       assertEquals(32, Node.INCRDECR_PROP);
813:       assertEquals(1, Node.DECR_FLAG);
814:       assertEquals(30, Node.VAR_ARGS_NAME);
815:       assertEquals(51, Node.STATIC_SOURCE_FILE);
816:       assertEquals(54, Node.SLASH_V);
817:       assertEquals(46, Node.IS_NAMESPACE);
818:       assertEquals(43, Node.IS_CONSTANT_NAME);
819:       assertEquals(40, Node.ORIGINALNAME_PROP);
820:       assertEquals(57, Node.REFLECTED_OBJECT);
821:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
822:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
823:       assertEquals(50, Node.FREE_CALL);
824:       assertEquals(52, Node.LENGTH);
825:       assertEquals(8, Node.FLAG_NO_THROWS);
826:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
827:       assertEquals(15, Node.NO_SIDE_EFFECTS);
828:       assertEquals(39, Node.EMPTY_BLOCK);
829:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
830:       assertEquals(57, Node.LAST_PROP);
831:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
832:       assertEquals(55, Node.INFERRED_FUNCTION);
833:       assertEquals(12, Node.COLUMN_BITS);
834:       assertEquals(4095, Node.COLUMN_MASK);
835:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
836:       assertEquals(37, Node.OPT_ARG_NAME);
837:       assertEquals(48, Node.DIRECTIVES);
838:       assertEquals(36, Node.QUOTED_PROP);
839:       assertEquals(56, Node.CHANGE_TIME);
840:       assertEquals(49, Node.DIRECT_EVAL);
841:       assertFalse(node0.equals((Object)node1));
842:       assertFalse(node0.isCatch());
843:       assertEquals(0, node0.getChildCount());
844:       assertEquals(40, node0.getType());
845:       assertFalse(node0.isParamList());
846:       assertFalse(node0.isVoid());
847:       assertFalse(node0.isFunction());
848:       assertFalse(node0.isRegExp());
849:       assertFalse(node0.isCall());
850:       assertFalse(node0.isArrayLit());
851:       assertFalse(node0.isFor());
852:       assertFalse(node0.isStringKey());
853:       assertFalse(node0.isBlock());
854:       assertFalse(node0.isDebugger());
855:       assertFalse(node0.isGetterDef());
856:       assertTrue(node0.isString());
857:       assertFalse(node0.isTry());
858:       assertFalse(node0.hasMoreThanOneChild());
859:       assertFalse(node0.isIn());
860:       assertFalse(node0.isContinue());
861:       assertFalse(node0.isNE());
862:       assertFalse(node0.isIf());
863:       assertEquals((-1), node0.getLineno());
864:       assertFalse(node0.isCast());
865:       assertFalse(node0.isFalse());
866:       assertFalse(node0.isThrow());
867:       assertFalse(node0.isInc());
868:       assertFalse(node0.isSetterDef());
869:       assertFalse(node0.isAnd());
870:       assertFalse(node0.isInstanceOf());
871:       assertFalse(node0.isObjectLit());
872:       assertFalse(node0.isNot());
873:       assertFalse(node0.isThis());
874:       assertFalse(node0.isComma());
875:       assertFalse(node0.isWith());
876:       assertFalse(node0.isBreak());
877:       assertFalse(node0.isExprResult());
878:       assertFalse(node0.hasOneChild());
879:       assertFalse(node0.isAssign());
880:       assertEquals((-1), node0.getCharno());
881:       assertFalse(node0.hasChildren());
882:       assertFalse(node0.isHook());
883:       assertFalse(node0.isScript());
884:       assertEquals((-1), node0.getSourcePosition());
885:       assertFalse(node0.isNumber());
886:       assertFalse(node0.isCase());
887:       assertFalse(node0.isGetProp());
888:       assertFalse(node0.isOr());
889:       assertFalse(node0.isAssignAdd());
890:       assertFalse(node0.isLabel());
891:       assertFalse(node0.isWhile());
892:       assertFalse(node0.isReturn());
893:       assertFalse(node0.isSwitch());
894:       assertFalse(node0.isDec());
895:       assertFalse(node0.isDelProp());
896:       assertFalse(node0.isTypeOf());
897:       assertFalse(node0.isLabelName());
898:       assertFalse(node0.isGetElem());
899:       assertFalse(node0.isVar());
900:       assertFalse(node0.isName());
901:       assertFalse(node0.isTrue());
902:       assertFalse(node0.isNull());
903:       assertFalse(node0.isDefaultCase());
904:       assertFalse(node0.isEmpty());
905:       assertFalse(node0.isDo());
906:       assertFalse(node0.isNew());
907:       assertFalse(node0.isAdd());
908:       assertNotSame(node0, node1);
909:       
910:       node1.setQuotedString();
911:       assertEquals(53, Node.INPUT_ID);
912:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
913:       assertEquals(36, Node.QUOTED_PROP);
914:       assertEquals(29, Node.JSDOC_INFO_PROP);
915:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
916:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
917:       assertEquals(47, Node.IS_DISPATCHER);
918:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
919:       assertEquals(37, Node.OPT_ARG_NAME);
920:       assertEquals(39, Node.EMPTY_BLOCK);
921:       assertEquals(4095, Node.COLUMN_MASK);
922:       assertEquals(55, Node.INFERRED_FUNCTION);
923:       assertEquals(8, Node.FLAG_NO_THROWS);
924:       assertEquals(49, Node.DIRECT_EVAL);
925:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
926:       assertEquals(56, Node.CHANGE_TIME);
927:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
928:       assertEquals(48, Node.DIRECTIVES);
929:       assertEquals(54, Node.SLASH_V);
930:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
931:       assertEquals(57, Node.REFLECTED_OBJECT);
932:       assertEquals(52, Node.LENGTH);
933:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
934:       assertEquals(30, Node.VAR_ARGS_NAME);
935:       assertEquals(1, Node.DECR_FLAG);
936:       assertEquals(15, Node.NO_SIDE_EFFECTS);
937:       assertEquals(12, Node.COLUMN_BITS);
938:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
939:       assertEquals(57, Node.LAST_PROP);
940:       assertEquals(32, Node.INCRDECR_PROP);
941:       assertEquals(46, Node.IS_NAMESPACE);
942:       assertEquals(2, Node.POST_FLAG);
943:       assertEquals(51, Node.STATIC_SOURCE_FILE);
944:       assertEquals(50, Node.FREE_CALL);
945:       assertEquals(40, Node.ORIGINALNAME_PROP);
946:       assertEquals(43, Node.IS_CONSTANT_NAME);
947:       assertFalse(node1.equals((Object)node0));
948:       assertFalse(node1.isParamList());
949:       assertEquals(0, node1.getChildCount());
950:       assertFalse(node1.isNull());
951:       assertFalse(node1.isStringKey());
952:       assertFalse(node1.isName());
953:       assertFalse(node1.isCatch());
954:       assertFalse(node1.isCall());
955:       assertFalse(node1.isVoid());
956:       assertFalse(node1.isNew());
957:       assertFalse(node1.isFunction());
958:       assertFalse(node1.isDefaultCase());
959:       assertFalse(node1.isVar());
960:       assertFalse(node1.isTrue());
961:       assertTrue(node1.isIn());
962:       assertFalse(node1.isDo());
963:       assertFalse(node1.isEmpty());
964:       assertFalse(node1.isSetterDef());
965:       assertFalse(node1.isAdd());
966:       assertFalse(node1.isAssignAdd());
967:       assertEquals(51, node1.getType());
968:       assertFalse(node1.isIf());
969:       assertFalse(node1.isNE());
970:       assertFalse(node1.isLabel());
971:       assertFalse(node1.isFor());
972:       assertFalse(node1.isLabelName());
973:       assertFalse(node1.hasMoreThanOneChild());
974:       assertFalse(node1.isArrayLit());
975:       assertEquals((-1), node1.getLineno());
976:       assertEquals((-1), node1.getCharno());
977:       assertFalse(node1.isSwitch());
978:       assertFalse(node1.isTry());
979:       assertFalse(node1.isRegExp());
980:       assertFalse(node1.isHook());
981:       assertFalse(node1.isBlock());
982:       assertFalse(node1.isCase());
983:       assertFalse(node1.isGetterDef());
984:       assertFalse(node1.isNumber());
985:       assertFalse(node1.hasOneChild());
986:       assertFalse(node1.isScript());
987:       assertFalse(node1.isGetProp());
988:       assertFalse(node1.isComma());
989:       assertFalse(node1.isThis());
990:       assertFalse(node1.isFalse());
991:       assertFalse(node1.isAnd());
992:       assertFalse(node1.isWith());
993:       assertFalse(node1.isBreak());
994:       assertFalse(node1.isInstanceOf());
995:       assertFalse(node1.isExprResult());
996:       assertFalse(node1.isThrow());
997:       assertFalse(node1.isInc());
998:       assertFalse(node1.isOr());
999:       assertFalse(node1.isTypeOf());
1000:       assertFalse(node1.hasChildren());
1001:       assertFalse(node1.isDec());
1002:       assertEquals((-1), node1.getSourcePosition());
1003:       assertFalse(node1.isReturn());
1004:       assertFalse(node1.isContinue());
1005:       assertFalse(node1.isAssign());
1006:       assertFalse(node1.isDelProp());
1007:       assertFalse(node1.isCast());
1008:       assertFalse(node1.isGetElem());
1009:       assertFalse(node1.isDebugger());
1010:       assertFalse(node1.isWhile());
1011:       assertFalse(node1.isNot());
1012:       assertFalse(node1.isObjectLit());
1013:       assertFalse(node1.isString());
1014:       assertNotSame(node1, node0);
1015:       
1016:       String string0 = node1.getQualifiedName();
1017:       assertEquals(53, Node.INPUT_ID);
1018:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1019:       assertEquals(36, Node.QUOTED_PROP);
1020:       assertEquals(29, Node.JSDOC_INFO_PROP);
1021:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1022:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1023:       assertEquals(47, Node.IS_DISPATCHER);
1024:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1025:       assertEquals(37, Node.OPT_ARG_NAME);
1026:       assertEquals(39, Node.EMPTY_BLOCK);
1027:       assertEquals(4095, Node.COLUMN_MASK);
1028:       assertEquals(55, Node.INFERRED_FUNCTION);
1029:       assertEquals(8, Node.FLAG_NO_THROWS);
1030:       assertEquals(49, Node.DIRECT_EVAL);
1031:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1032:       assertEquals(56, Node.CHANGE_TIME);
1033:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1034:       assertEquals(48, Node.DIRECTIVES);
1035:       assertEquals(54, Node.SLASH_V);
1036:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1037:       assertEquals(57, Node.REFLECTED_OBJECT);
1038:       assertEquals(52, Node.LENGTH);
1039:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1040:       assertEquals(30, Node.VAR_ARGS_NAME);
1041:       assertEquals(1, Node.DECR_FLAG);
1042:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1043:       assertEquals(12, Node.COLUMN_BITS);
1044:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1045:       assertEquals(57, Node.LAST_PROP);
1046:       assertEquals(32, Node.INCRDECR_PROP);
1047:       assertEquals(46, Node.IS_NAMESPACE);
1048:       assertEquals(2, Node.POST_FLAG);
1049:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1050:       assertEquals(50, Node.FREE_CALL);
1051:       assertEquals(40, Node.ORIGINALNAME_PROP);
1052:       assertEquals(43, Node.IS_CONSTANT_NAME);
1053:       assertFalse(node1.equals((Object)node0));
1054:       assertFalse(node1.isParamList());
1055:       assertEquals(0, node1.getChildCount());
1056:       assertFalse(node1.isNull());
1057:       assertFalse(node1.isStringKey());
1058:       assertFalse(node1.isName());
1059:       assertFalse(node1.isCatch());
1060:       assertFalse(node1.isCall());
1061:       assertFalse(node1.isVoid());
1062:       assertFalse(node1.isNew());
1063:       assertFalse(node1.isFunction());
1064:       assertFalse(node1.isDefaultCase());
1065:       assertFalse(node1.isVar());
1066:       assertFalse(node1.isTrue());
1067:       assertTrue(node1.isIn());
1068:       assertFalse(node1.isDo());
1069:       assertFalse(node1.isEmpty());
1070:       assertFalse(node1.isSetterDef());
1071:       assertFalse(node1.isAdd());
1072:       assertFalse(node1.isAssignAdd());
1073:       assertEquals(51, node1.getType());
1074:       assertFalse(node1.isIf());
1075:       assertFalse(node1.isNE());
1076:       assertFalse(node1.isLabel());
1077:       assertFalse(node1.isFor());
1078:       assertFalse(node1.isLabelName());
1079:       assertFalse(node1.hasMoreThanOneChild());
1080:       assertFalse(node1.isArrayLit());
1081:       assertEquals((-1), node1.getLineno());
1082:       assertEquals((-1), node1.getCharno());
1083:       assertFalse(node1.isSwitch());
1084:       assertFalse(node1.isTry());
1085:       assertFalse(node1.isRegExp());
1086:       assertFalse(node1.isHook());
1087:       assertFalse(node1.isBlock());
1088:       assertFalse(node1.isCase());
1089:       assertFalse(node1.isGetterDef());
1090:       assertFalse(node1.isNumber());
1091:       assertFalse(node1.hasOneChild());
1092:       assertFalse(node1.isScript());
1093:       assertFalse(node1.isGetProp());
1094:       assertFalse(node1.isComma());
1095:       assertFalse(node1.isThis());
1096:       assertFalse(node1.isFalse());
1097:       assertFalse(node1.isAnd());
1098:       assertFalse(node1.isWith());
1099:       assertFalse(node1.isBreak());
1100:       assertFalse(node1.isInstanceOf());
1101:       assertFalse(node1.isExprResult());
1102:       assertFalse(node1.isThrow());
1103:       assertFalse(node1.isInc());
1104:       assertFalse(node1.isOr());
1105:       assertFalse(node1.isTypeOf());
1106:       assertFalse(node1.hasChildren());
1107:       assertFalse(node1.isDec());
1108:       assertEquals((-1), node1.getSourcePosition());
1109:       assertFalse(node1.isReturn());
1110:       assertFalse(node1.isContinue());
1111:       assertFalse(node1.isAssign());
1112:       assertFalse(node1.isDelProp());
1113:       assertFalse(node1.isCast());
1114:       assertFalse(node1.isGetElem());
1115:       assertFalse(node1.isDebugger());
1116:       assertFalse(node1.isWhile());
1117:       assertFalse(node1.isNot());
1118:       assertFalse(node1.isObjectLit());
1119:       assertFalse(node1.isString());
1120:       assertNull(string0);
1121:       assertNotSame(node1, node0);
1122:       
1123:       boolean boolean1 = node0.getBooleanProp(32);
1124:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1125:       assertEquals(29, Node.JSDOC_INFO_PROP);
1126:       assertEquals(2, Node.POST_FLAG);
1127:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1128:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1129:       assertEquals(53, Node.INPUT_ID);
1130:       assertEquals(47, Node.IS_DISPATCHER);
1131:       assertEquals(32, Node.INCRDECR_PROP);
1132:       assertEquals(1, Node.DECR_FLAG);
1133:       assertEquals(30, Node.VAR_ARGS_NAME);
1134:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1135:       assertEquals(54, Node.SLASH_V);
1136:       assertEquals(46, Node.IS_NAMESPACE);
1137:       assertEquals(43, Node.IS_CONSTANT_NAME);
1138:       assertEquals(40, Node.ORIGINALNAME_PROP);
1139:       assertEquals(57, Node.REFLECTED_OBJECT);
1140:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1141:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1142:       assertEquals(50, Node.FREE_CALL);
1143:       assertEquals(52, Node.LENGTH);
1144:       assertEquals(8, Node.FLAG_NO_THROWS);
1145:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1146:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1147:       assertEquals(39, Node.EMPTY_BLOCK);
1148:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1149:       assertEquals(57, Node.LAST_PROP);
1150:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1151:       assertEquals(55, Node.INFERRED_FUNCTION);
1152:       assertEquals(12, Node.COLUMN_BITS);
1153:       assertEquals(4095, Node.COLUMN_MASK);
1154:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1155:       assertEquals(37, Node.OPT_ARG_NAME);
1156:       assertEquals(48, Node.DIRECTIVES);
1157:       assertEquals(36, Node.QUOTED_PROP);
1158:       assertEquals(56, Node.CHANGE_TIME);
1159:       assertEquals(49, Node.DIRECT_EVAL);
1160:       assertFalse(node0.equals((Object)node1));
1161:       assertTrue(boolean1 == boolean0);
1162:       assertFalse(node0.isCatch());
1163:       assertEquals(0, node0.getChildCount());
1164:       assertEquals(40, node0.getType());
1165:       assertFalse(node0.isParamList());
1166:       assertFalse(node0.isVoid());
1167:       assertFalse(node0.isFunction());
1168:       assertFalse(node0.isRegExp());
1169:       assertFalse(node0.isCall());
1170:       assertFalse(node0.isArrayLit());
1171:       assertFalse(node0.isFor());
1172:       assertFalse(node0.isStringKey());
1173:       assertFalse(node0.isBlock());
1174:       assertFalse(node0.isDebugger());
1175:       assertFalse(node0.isGetterDef());
1176:       assertTrue(node0.isString());
1177:       assertFalse(node0.isTry());
1178:       assertFalse(node0.hasMoreThanOneChild());
1179:       assertFalse(node0.isIn());
1180:       assertFalse(node0.isContinue());
1181:       assertFalse(node0.isNE());
1182:       assertFalse(node0.isIf());
1183:       assertEquals((-1), node0.getLineno());
1184:       assertFalse(node0.isCast());
1185:       assertFalse(node0.isFalse());
1186:       assertFalse(node0.isThrow());
1187:       assertFalse(node0.isInc());
1188:       assertFalse(node0.isSetterDef());
1189:       assertFalse(node0.isAnd());
1190:       assertFalse(node0.isInstanceOf());
1191:       assertFalse(node0.isObjectLit());
1192:       assertFalse(node0.isNot());
1193:       assertFalse(node0.isThis());
1194:       assertFalse(node0.isComma());
1195:       assertFalse(node0.isWith());
1196:       assertFalse(node0.isBreak());
1197:       assertFalse(node0.isExprResult());
1198:       assertFalse(node0.hasOneChild());
1199:       assertFalse(node0.isAssign());
1200:       assertEquals((-1), node0.getCharno());
1201:       assertFalse(node0.hasChildren());
1202:       assertFalse(node0.isHook());
1203:       assertFalse(node0.isScript());
1204:       assertEquals((-1), node0.getSourcePosition());
1205:       assertFalse(node0.isNumber());
1206:       assertFalse(node0.isCase());
1207:       assertFalse(node0.isGetProp());
1208:       assertFalse(node0.isOr());
1209:       assertFalse(node0.isAssignAdd());
1210:       assertFalse(node0.isLabel());
1211:       assertFalse(node0.isWhile());
1212:       assertFalse(node0.isReturn());
1213:       assertFalse(node0.isSwitch());
1214:       assertFalse(node0.isDec());
1215:       assertFalse(node0.isDelProp());
1216:       assertFalse(node0.isTypeOf());
1217:       assertFalse(node0.isLabelName());
1218:       assertFalse(node0.isGetElem());
1219:       assertFalse(node0.isVar());
1220:       assertFalse(node0.isName());
1221:       assertFalse(node0.isTrue());
1222:       assertFalse(node0.isNull());
1223:       assertFalse(node0.isDefaultCase());
1224:       assertFalse(node0.isEmpty());
1225:       assertFalse(node0.isDo());
1226:       assertFalse(node0.isNew());
1227:       assertFalse(node0.isAdd());
1228:       assertFalse(boolean1);
1229:       assertNotSame(node0, node1);
1230:       
1231:       boolean boolean2 = node0.isCase();
1232:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1233:       assertEquals(29, Node.JSDOC_INFO_PROP);
1234:       assertEquals(2, Node.POST_FLAG);
1235:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1236:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1237:       assertEquals(53, Node.INPUT_ID);
1238:       assertEquals(47, Node.IS_DISPATCHER);
1239:       assertEquals(32, Node.INCRDECR_PROP);
1240:       assertEquals(1, Node.DECR_FLAG);
1241:       assertEquals(30, Node.VAR_ARGS_NAME);
1242:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1243:       assertEquals(54, Node.SLASH_V);
1244:       assertEquals(46, Node.IS_NAMESPACE);
1245:       assertEquals(43, Node.IS_CONSTANT_NAME);
1246:       assertEquals(40, Node.ORIGINALNAME_PROP);
1247:       assertEquals(57, Node.REFLECTED_OBJECT);
1248:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1249:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1250:       assertEquals(50, Node.FREE_CALL);
1251:       assertEquals(52, Node.LENGTH);
1252:       assertEquals(8, Node.FLAG_NO_THROWS);
1253:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1254:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1255:       assertEquals(39, Node.EMPTY_BLOCK);
1256:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1257:       assertEquals(57, Node.LAST_PROP);
1258:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1259:       assertEquals(55, Node.INFERRED_FUNCTION);
1260:       assertEquals(12, Node.COLUMN_BITS);
1261:       assertEquals(4095, Node.COLUMN_MASK);
1262:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1263:       assertEquals(37, Node.OPT_ARG_NAME);
1264:       assertEquals(48, Node.DIRECTIVES);
1265:       assertEquals(36, Node.QUOTED_PROP);
1266:       assertEquals(56, Node.CHANGE_TIME);
1267:       assertEquals(49, Node.DIRECT_EVAL);
1268:       assertTrue(boolean2 == boolean1);
1269:       assertTrue(boolean2 == boolean0);
1270:       assertFalse(node0.equals((Object)node1));
1271:       assertFalse(node0.isCatch());
1272:       assertEquals(0, node0.getChildCount());
1273:       assertEquals(40, node0.getType());
1274:       assertFalse(node0.isParamList());
1275:       assertFalse(node0.isVoid());
1276:       assertFalse(node0.isFunction());
1277:       assertFalse(node0.isRegExp());
1278:       assertFalse(node0.isCall());
1279:       assertFalse(node0.isArrayLit());
1280:       assertFalse(node0.isFor());
1281:       assertFalse(node0.isStringKey());
1282:       assertFalse(node0.isBlock());
1283:       assertFalse(node0.isDebugger());
1284:       assertFalse(node0.isGetterDef());
1285:       assertTrue(node0.isString());
1286:       assertFalse(node0.isTry());
1287:       assertFalse(node0.hasMoreThanOneChild());
1288:       assertFalse(node0.isIn());
1289:       assertFalse(node0.isContinue());
1290:       assertFalse(node0.isNE());
1291:       assertFalse(node0.isIf());
1292:       assertEquals((-1), node0.getLineno());
1293:       assertFalse(node0.isCast());
1294:       assertFalse(node0.isFalse());
1295:       assertFalse(node0.isThrow());
1296:       assertFalse(node0.isInc());
1297:       assertFalse(node0.isSetterDef());
1298:       assertFalse(node0.isAnd());
1299:       assertFalse(node0.isInstanceOf());
1300:       assertFalse(node0.isObjectLit());
1301:       assertFalse(node0.isNot());
1302:       assertFalse(node0.isThis());
1303:       assertFalse(node0.isComma());
1304:       assertFalse(node0.isWith());
1305:       assertFalse(node0.isBreak());
1306:       assertFalse(node0.isExprResult());
1307:       assertFalse(node0.hasOneChild());
1308:       assertFalse(node0.isAssign());
1309:       assertEquals((-1), node0.getCharno());
1310:       assertFalse(node0.hasChildren());
1311:       assertFalse(node0.isHook());
1312:       assertFalse(node0.isScript());
1313:       assertEquals((-1), node0.getSourcePosition());
1314:       assertFalse(node0.isNumber());
1315:       assertFalse(node0.isCase());
1316:       assertFalse(node0.isGetProp());
1317:       assertFalse(node0.isOr());
1318:       assertFalse(node0.isAssignAdd());
1319:       assertFalse(node0.isLabel());
1320:       assertFalse(node0.isWhile());
1321:       assertFalse(node0.isReturn());
1322:       assertFalse(node0.isSwitch());
1323:       assertFalse(node0.isDec());
1324:       assertFalse(node0.isDelProp());
1325:       assertFalse(node0.isTypeOf());
1326:       assertFalse(node0.isLabelName());
1327:       assertFalse(node0.isGetElem());
1328:       assertFalse(node0.isVar());
1329:       assertFalse(node0.isName());
1330:       assertFalse(node0.isTrue());
1331:       assertFalse(node0.isNull());
1332:       assertFalse(node0.isDefaultCase());
1333:       assertFalse(node0.isEmpty());
1334:       assertFalse(node0.isDo());
1335:       assertFalse(node0.isNew());
1336:       assertFalse(node0.isAdd());
1337:       assertFalse(boolean2);
1338:       assertNotSame(node0, node1);
1339:   }
1340: }
RegularFileObject[/tmp/EvoSuite_111_1628256131666/com/google/javascript/rhino/Node_111_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:22:11 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_111_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_111_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.common.collect.Iterables",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_111_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.Token",
267:       "com.google.common.base.Preconditions",
268:       "com.google.common.base.Objects",
269:       "com.google.javascript.rhino.SimpleErrorReporter",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.common.collect.Sets",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.Iterators$12",
347:       "com.google.common.collect.AbstractIndexedListIterator",
348:       "com.google.common.collect.Iterators$11",
349:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
350:       "com.google.javascript.rhino.InputId",
351:       "com.google.javascript.rhino.JSTypeExpression",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Platform",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
364:       "com.google.javascript.rhino.jstype.NamedType",
365:       "com.google.common.collect.AbstractMultimap$Values",
366:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
367:       "com.google.common.collect.AbstractMapBasedMultimap$1",
368:       "com.google.common.collect.Multimaps$Entries",
369:       "com.google.common.collect.AbstractMultimap$Entries",
370:       "com.google.common.collect.AbstractMapBasedMultimap$2",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
373:     );
374:   }
375: }

[MASTER] 13:22:11.857 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isSwitch());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isSwitch());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertNotNull(iterable0);

int int0 = node0.getLength();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isSwitch());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, int0);

int int1 = node0.getSideEffectFlags();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertTrue(int1 == int0);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isSwitch());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, int1);

int int2 = node0.getSourcePosition();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(int2 == int0);
assertFalse(int2 == int1);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isSwitch());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals((-1), int2);

boolean boolean0 = node0.isFalse();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isSwitch());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(boolean0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1237));
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1237), node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);

node_SideEffectFlags0.clearSideEffectFlags();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);

Node node1 = Node.newString(51, "", (-2881), 38);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertTrue(node1.isIn());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertEquals(51, node1.getType());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isLabel());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertNotNull(node1);
assertNotSame(node1, node0);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);

node0.setString("");
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isSwitch());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertNotSame(node0, node1);

node1.setQuotedString();
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertTrue(node1.isIn());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertEquals(51, node1.getType());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isLabel());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertNotSame(node1, node0);

String string0 = node1.getQualifiedName();
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertTrue(node1.isIn());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertEquals(51, node1.getType());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isLabel());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertNull(string0);
assertNotSame(node1, node0);

boolean boolean1 = node0.getBooleanProp(32);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isSwitch());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(boolean1);
assertNotSame(node0, node1);

boolean boolean2 = node0.isCase();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isSwitch());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(boolean2);
assertNotSame(node0, node1);


[MASTER] 13:22:21.318 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_151_1628256141148/com/google/javascript/rhino/Node_151_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_151_1628256141148/com/google/javascript/rhino/Node_151_tmp__ESTest_scaffolding.java]]
[MASTER] 13:22:21.318 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:22:21.318 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:22:21.319 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 162
[MASTER] 13:22:21.320 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_151_1628256141148/com/google/javascript/rhino/Node_151_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:22:21 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_151_tmp__ESTest extends Node_151_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("");
21:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
22:       assertEquals(53, Node.INPUT_ID);
23:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
24:       assertEquals(43, Node.IS_CONSTANT_NAME);
25:       assertEquals(56, Node.CHANGE_TIME);
26:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
27:       assertEquals(36, Node.QUOTED_PROP);
28:       assertEquals(29, Node.JSDOC_INFO_PROP);
29:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
30:       assertEquals(51, Node.STATIC_SOURCE_FILE);
31:       assertEquals(55, Node.INFERRED_FUNCTION);
32:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
33:       assertEquals(46, Node.IS_NAMESPACE);
34:       assertEquals(57, Node.LAST_PROP);
35:       assertEquals(47, Node.IS_DISPATCHER);
36:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
37:       assertEquals(30, Node.VAR_ARGS_NAME);
38:       assertEquals(2, Node.POST_FLAG);
39:       assertEquals(57, Node.REFLECTED_OBJECT);
40:       assertEquals(40, Node.ORIGINALNAME_PROP);
41:       assertEquals(15, Node.NO_SIDE_EFFECTS);
42:       assertEquals(39, Node.EMPTY_BLOCK);
43:       assertEquals(54, Node.SLASH_V);
44:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
45:       assertEquals(52, Node.LENGTH);
46:       assertEquals(8, Node.FLAG_NO_THROWS);
47:       assertEquals(50, Node.FREE_CALL);
48:       assertEquals(4095, Node.COLUMN_MASK);
49:       assertEquals(12, Node.COLUMN_BITS);
50:       assertEquals(48, Node.DIRECTIVES);
51:       assertEquals(1, Node.DECR_FLAG);
52:       assertEquals(37, Node.OPT_ARG_NAME);
53:       assertEquals(49, Node.DIRECT_EVAL);
54:       assertEquals(32, Node.INCRDECR_PROP);
55:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
56:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
57:       assertEquals(0, node0.getChildCount());
58:       assertFalse(node0.isSetterDef());
59:       assertFalse(node0.isCatch());
60:       assertFalse(node0.isDefaultCase());
61:       assertFalse(node0.isRegExp());
62:       assertEquals(40, node0.getType());
63:       assertFalse(node0.isVar());
64:       assertFalse(node0.isArrayLit());
65:       assertTrue(node0.isString());
66:       assertFalse(node0.isTry());
67:       assertFalse(node0.isFunction());
68:       assertFalse(node0.isGetterDef());
69:       assertFalse(node0.isDebugger());
70:       assertFalse(node0.isParamList());
71:       assertFalse(node0.isStringKey());
72:       assertEquals((-1), node0.getLineno());
73:       assertFalse(node0.isIn());
74:       assertFalse(node0.isContinue());
75:       assertFalse(node0.hasMoreThanOneChild());
76:       assertFalse(node0.isCase());
77:       assertFalse(node0.isFor());
78:       assertFalse(node0.isBlock());
79:       assertFalse(node0.isInc());
80:       assertFalse(node0.isIf());
81:       assertFalse(node0.isNE());
82:       assertFalse(node0.isObjectLit());
83:       assertFalse(node0.isGetProp());
84:       assertFalse(node0.isInstanceOf());
85:       assertFalse(node0.isWith());
86:       assertFalse(node0.isFalse());
87:       assertFalse(node0.isComma());
88:       assertFalse(node0.isThis());
89:       assertFalse(node0.isHook());
90:       assertFalse(node0.isThrow());
91:       assertFalse(node0.hasOneChild());
92:       assertFalse(node0.isCast());
93:       assertFalse(node0.isScript());
94:       assertFalse(node0.isNumber());
95:       assertEquals((-1), node0.getSourcePosition());
96:       assertFalse(node0.isNot());
97:       assertFalse(node0.isLabelName());
98:       assertFalse(node0.isAnd());
99:       assertEquals((-1), node0.getCharno());
100:       assertFalse(node0.isSwitch());
101:       assertFalse(node0.isReturn());
102:       assertFalse(node0.isAssignAdd());
103:       assertFalse(node0.isLabel());
104:       assertFalse(node0.isOr());
105:       assertFalse(node0.isWhile());
106:       assertFalse(node0.hasChildren());
107:       assertFalse(node0.isTypeOf());
108:       assertFalse(node0.isDec());
109:       assertFalse(node0.isAssign());
110:       assertFalse(node0.isDo());
111:       assertFalse(node0.isNew());
112:       assertFalse(node0.isVoid());
113:       assertFalse(node0.isCall());
114:       assertFalse(node0.isExprResult());
115:       assertFalse(node0.isAdd());
116:       assertFalse(node0.isGetElem());
117:       assertFalse(node0.isEmpty());
118:       assertFalse(node0.isDelProp());
119:       assertFalse(node0.isBreak());
120:       assertFalse(node0.isName());
121:       assertFalse(node0.isTrue());
122:       assertFalse(node0.isNull());
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
127:       assertEquals(53, Node.INPUT_ID);
128:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
129:       assertEquals(43, Node.IS_CONSTANT_NAME);
130:       assertEquals(56, Node.CHANGE_TIME);
131:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
132:       assertEquals(36, Node.QUOTED_PROP);
133:       assertEquals(29, Node.JSDOC_INFO_PROP);
134:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
135:       assertEquals(51, Node.STATIC_SOURCE_FILE);
136:       assertEquals(55, Node.INFERRED_FUNCTION);
137:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
138:       assertEquals(46, Node.IS_NAMESPACE);
139:       assertEquals(57, Node.LAST_PROP);
140:       assertEquals(47, Node.IS_DISPATCHER);
141:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
142:       assertEquals(30, Node.VAR_ARGS_NAME);
143:       assertEquals(2, Node.POST_FLAG);
144:       assertEquals(57, Node.REFLECTED_OBJECT);
145:       assertEquals(40, Node.ORIGINALNAME_PROP);
146:       assertEquals(15, Node.NO_SIDE_EFFECTS);
147:       assertEquals(39, Node.EMPTY_BLOCK);
148:       assertEquals(54, Node.SLASH_V);
149:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
150:       assertEquals(52, Node.LENGTH);
151:       assertEquals(8, Node.FLAG_NO_THROWS);
152:       assertEquals(50, Node.FREE_CALL);
153:       assertEquals(4095, Node.COLUMN_MASK);
154:       assertEquals(12, Node.COLUMN_BITS);
155:       assertEquals(48, Node.DIRECTIVES);
156:       assertEquals(1, Node.DECR_FLAG);
157:       assertEquals(37, Node.OPT_ARG_NAME);
158:       assertEquals(49, Node.DIRECT_EVAL);
159:       assertEquals(32, Node.INCRDECR_PROP);
160:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
161:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
162:       assertFalse(iterable0.contains(node0));
163:       assertEquals(0, node0.getChildCount());
164:       assertFalse(node0.isSetterDef());
165:       assertFalse(node0.isCatch());
166:       assertFalse(node0.isDefaultCase());
167:       assertFalse(node0.isRegExp());
168:       assertEquals(40, node0.getType());
169:       assertFalse(node0.isVar());
170:       assertFalse(node0.isArrayLit());
171:       assertTrue(node0.isString());
172:       assertFalse(node0.isTry());
173:       assertFalse(node0.isFunction());
174:       assertFalse(node0.isGetterDef());
175:       assertFalse(node0.isDebugger());
176:       assertFalse(node0.isParamList());
177:       assertFalse(node0.isStringKey());
178:       assertEquals((-1), node0.getLineno());
179:       assertFalse(node0.isIn());
180:       assertFalse(node0.isContinue());
181:       assertFalse(node0.hasMoreThanOneChild());
182:       assertFalse(node0.isCase());
183:       assertFalse(node0.isFor());
184:       assertFalse(node0.isBlock());
185:       assertFalse(node0.isInc());
186:       assertFalse(node0.isIf());
187:       assertFalse(node0.isNE());
188:       assertFalse(node0.isObjectLit());
189:       assertFalse(node0.isGetProp());
190:       assertFalse(node0.isInstanceOf());
191:       assertFalse(node0.isWith());
192:       assertFalse(node0.isFalse());
193:       assertFalse(node0.isComma());
194:       assertFalse(node0.isThis());
195:       assertFalse(node0.isHook());
196:       assertFalse(node0.isThrow());
197:       assertFalse(node0.hasOneChild());
198:       assertFalse(node0.isCast());
199:       assertFalse(node0.isScript());
200:       assertFalse(node0.isNumber());
201:       assertEquals((-1), node0.getSourcePosition());
202:       assertFalse(node0.isNot());
203:       assertFalse(node0.isLabelName());
204:       assertFalse(node0.isAnd());
205:       assertEquals((-1), node0.getCharno());
206:       assertFalse(node0.isSwitch());
207:       assertFalse(node0.isReturn());
208:       assertFalse(node0.isAssignAdd());
209:       assertFalse(node0.isLabel());
210:       assertFalse(node0.isOr());
211:       assertFalse(node0.isWhile());
212:       assertFalse(node0.hasChildren());
213:       assertFalse(node0.isTypeOf());
214:       assertFalse(node0.isDec());
215:       assertFalse(node0.isAssign());
216:       assertFalse(node0.isDo());
217:       assertFalse(node0.isNew());
218:       assertFalse(node0.isVoid());
219:       assertFalse(node0.isCall());
220:       assertFalse(node0.isExprResult());
221:       assertFalse(node0.isAdd());
222:       assertFalse(node0.isGetElem());
223:       assertFalse(node0.isEmpty());
224:       assertFalse(node0.isDelProp());
225:       assertFalse(node0.isBreak());
226:       assertFalse(node0.isName());
227:       assertFalse(node0.isTrue());
228:       assertFalse(node0.isNull());
229:       assertNotNull(iterable0);
230:       
231:       int int0 = node0.getLength();
232:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
233:       assertEquals(53, Node.INPUT_ID);
234:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
235:       assertEquals(43, Node.IS_CONSTANT_NAME);
236:       assertEquals(56, Node.CHANGE_TIME);
237:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
238:       assertEquals(36, Node.QUOTED_PROP);
239:       assertEquals(29, Node.JSDOC_INFO_PROP);
240:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
241:       assertEquals(51, Node.STATIC_SOURCE_FILE);
242:       assertEquals(55, Node.INFERRED_FUNCTION);
243:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
244:       assertEquals(46, Node.IS_NAMESPACE);
245:       assertEquals(57, Node.LAST_PROP);
246:       assertEquals(47, Node.IS_DISPATCHER);
247:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
248:       assertEquals(30, Node.VAR_ARGS_NAME);
249:       assertEquals(2, Node.POST_FLAG);
250:       assertEquals(57, Node.REFLECTED_OBJECT);
251:       assertEquals(40, Node.ORIGINALNAME_PROP);
252:       assertEquals(15, Node.NO_SIDE_EFFECTS);
253:       assertEquals(39, Node.EMPTY_BLOCK);
254:       assertEquals(54, Node.SLASH_V);
255:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
256:       assertEquals(52, Node.LENGTH);
257:       assertEquals(8, Node.FLAG_NO_THROWS);
258:       assertEquals(50, Node.FREE_CALL);
259:       assertEquals(4095, Node.COLUMN_MASK);
260:       assertEquals(12, Node.COLUMN_BITS);
261:       assertEquals(48, Node.DIRECTIVES);
262:       assertEquals(1, Node.DECR_FLAG);
263:       assertEquals(37, Node.OPT_ARG_NAME);
264:       assertEquals(49, Node.DIRECT_EVAL);
265:       assertEquals(32, Node.INCRDECR_PROP);
266:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
267:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
268:       assertEquals(0, node0.getChildCount());
269:       assertFalse(node0.isSetterDef());
270:       assertFalse(node0.isCatch());
271:       assertFalse(node0.isDefaultCase());
272:       assertFalse(node0.isRegExp());
273:       assertEquals(40, node0.getType());
274:       assertFalse(node0.isVar());
275:       assertFalse(node0.isArrayLit());
276:       assertTrue(node0.isString());
277:       assertFalse(node0.isTry());
278:       assertFalse(node0.isFunction());
279:       assertFalse(node0.isGetterDef());
280:       assertFalse(node0.isDebugger());
281:       assertFalse(node0.isParamList());
282:       assertFalse(node0.isStringKey());
283:       assertEquals((-1), node0.getLineno());
284:       assertFalse(node0.isIn());
285:       assertFalse(node0.isContinue());
286:       assertFalse(node0.hasMoreThanOneChild());
287:       assertFalse(node0.isCase());
288:       assertFalse(node0.isFor());
289:       assertFalse(node0.isBlock());
290:       assertFalse(node0.isInc());
291:       assertFalse(node0.isIf());
292:       assertFalse(node0.isNE());
293:       assertFalse(node0.isObjectLit());
294:       assertFalse(node0.isGetProp());
295:       assertFalse(node0.isInstanceOf());
296:       assertFalse(node0.isWith());
297:       assertFalse(node0.isFalse());
298:       assertFalse(node0.isComma());
299:       assertFalse(node0.isThis());
300:       assertFalse(node0.isHook());
301:       assertFalse(node0.isThrow());
302:       assertFalse(node0.hasOneChild());
303:       assertFalse(node0.isCast());
304:       assertFalse(node0.isScript());
305:       assertFalse(node0.isNumber());
306:       assertEquals((-1), node0.getSourcePosition());
307:       assertFalse(node0.isNot());
308:       assertFalse(node0.isLabelName());
309:       assertFalse(node0.isAnd());
310:       assertEquals((-1), node0.getCharno());
311:       assertFalse(node0.isSwitch());
312:       assertFalse(node0.isReturn());
313:       assertFalse(node0.isAssignAdd());
314:       assertFalse(node0.isLabel());
315:       assertFalse(node0.isOr());
316:       assertFalse(node0.isWhile());
317:       assertFalse(node0.hasChildren());
318:       assertFalse(node0.isTypeOf());
319:       assertFalse(node0.isDec());
320:       assertFalse(node0.isAssign());
321:       assertFalse(node0.isDo());
322:       assertFalse(node0.isNew());
323:       assertFalse(node0.isVoid());
324:       assertFalse(node0.isCall());
325:       assertFalse(node0.isExprResult());
326:       assertFalse(node0.isAdd());
327:       assertFalse(node0.isGetElem());
328:       assertFalse(node0.isEmpty());
329:       assertFalse(node0.isDelProp());
330:       assertFalse(node0.isBreak());
331:       assertFalse(node0.isName());
332:       assertFalse(node0.isTrue());
333:       assertFalse(node0.isNull());
334:       assertEquals(0, int0);
335:       
336:       boolean boolean0 = node0.isUnscopedQualifiedName();
337:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
338:       assertEquals(53, Node.INPUT_ID);
339:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
340:       assertEquals(43, Node.IS_CONSTANT_NAME);
341:       assertEquals(56, Node.CHANGE_TIME);
342:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
343:       assertEquals(36, Node.QUOTED_PROP);
344:       assertEquals(29, Node.JSDOC_INFO_PROP);
345:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
346:       assertEquals(51, Node.STATIC_SOURCE_FILE);
347:       assertEquals(55, Node.INFERRED_FUNCTION);
348:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
349:       assertEquals(46, Node.IS_NAMESPACE);
350:       assertEquals(57, Node.LAST_PROP);
351:       assertEquals(47, Node.IS_DISPATCHER);
352:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
353:       assertEquals(30, Node.VAR_ARGS_NAME);
354:       assertEquals(2, Node.POST_FLAG);
355:       assertEquals(57, Node.REFLECTED_OBJECT);
356:       assertEquals(40, Node.ORIGINALNAME_PROP);
357:       assertEquals(15, Node.NO_SIDE_EFFECTS);
358:       assertEquals(39, Node.EMPTY_BLOCK);
359:       assertEquals(54, Node.SLASH_V);
360:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
361:       assertEquals(52, Node.LENGTH);
362:       assertEquals(8, Node.FLAG_NO_THROWS);
363:       assertEquals(50, Node.FREE_CALL);
364:       assertEquals(4095, Node.COLUMN_MASK);
365:       assertEquals(12, Node.COLUMN_BITS);
366:       assertEquals(48, Node.DIRECTIVES);
367:       assertEquals(1, Node.DECR_FLAG);
368:       assertEquals(37, Node.OPT_ARG_NAME);
369:       assertEquals(49, Node.DIRECT_EVAL);
370:       assertEquals(32, Node.INCRDECR_PROP);
371:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
372:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
373:       assertEquals(0, node0.getChildCount());
374:       assertFalse(node0.isSetterDef());
375:       assertFalse(node0.isCatch());
376:       assertFalse(node0.isDefaultCase());
377:       assertFalse(node0.isRegExp());
378:       assertEquals(40, node0.getType());
379:       assertFalse(node0.isVar());
380:       assertFalse(node0.isArrayLit());
381:       assertTrue(node0.isString());
382:       assertFalse(node0.isTry());
383:       assertFalse(node0.isFunction());
384:       assertFalse(node0.isGetterDef());
385:       assertFalse(node0.isDebugger());
386:       assertFalse(node0.isParamList());
387:       assertFalse(node0.isStringKey());
388:       assertEquals((-1), node0.getLineno());
389:       assertFalse(node0.isIn());
390:       assertFalse(node0.isContinue());
391:       assertFalse(node0.hasMoreThanOneChild());
392:       assertFalse(node0.isCase());
393:       assertFalse(node0.isFor());
394:       assertFalse(node0.isBlock());
395:       assertFalse(node0.isInc());
396:       assertFalse(node0.isIf());
397:       assertFalse(node0.isNE());
398:       assertFalse(node0.isObjectLit());
399:       assertFalse(node0.isGetProp());
400:       assertFalse(node0.isInstanceOf());
401:       assertFalse(node0.isWith());
402:       assertFalse(node0.isFalse());
403:       assertFalse(node0.isComma());
404:       assertFalse(node0.isThis());
405:       assertFalse(node0.isHook());
406:       assertFalse(node0.isThrow());
407:       assertFalse(node0.hasOneChild());
408:       assertFalse(node0.isCast());
409:       assertFalse(node0.isScript());
410:       assertFalse(node0.isNumber());
411:       assertEquals((-1), node0.getSourcePosition());
412:       assertFalse(node0.isNot());
413:       assertFalse(node0.isLabelName());
414:       assertFalse(node0.isAnd());
415:       assertEquals((-1), node0.getCharno());
416:       assertFalse(node0.isSwitch());
417:       assertFalse(node0.isReturn());
418:       assertFalse(node0.isAssignAdd());
419:       assertFalse(node0.isLabel());
420:       assertFalse(node0.isOr());
421:       assertFalse(node0.isWhile());
422:       assertFalse(node0.hasChildren());
423:       assertFalse(node0.isTypeOf());
424:       assertFalse(node0.isDec());
425:       assertFalse(node0.isAssign());
426:       assertFalse(node0.isDo());
427:       assertFalse(node0.isNew());
428:       assertFalse(node0.isVoid());
429:       assertFalse(node0.isCall());
430:       assertFalse(node0.isExprResult());
431:       assertFalse(node0.isAdd());
432:       assertFalse(node0.isGetElem());
433:       assertFalse(node0.isEmpty());
434:       assertFalse(node0.isDelProp());
435:       assertFalse(node0.isBreak());
436:       assertFalse(node0.isName());
437:       assertFalse(node0.isTrue());
438:       assertFalse(node0.isNull());
439:       assertFalse(boolean0);
440:       
441:       int int1 = node0.getSideEffectFlags();
442:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
443:       assertEquals(53, Node.INPUT_ID);
444:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
445:       assertEquals(43, Node.IS_CONSTANT_NAME);
446:       assertEquals(56, Node.CHANGE_TIME);
447:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
448:       assertEquals(36, Node.QUOTED_PROP);
449:       assertEquals(29, Node.JSDOC_INFO_PROP);
450:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
451:       assertEquals(51, Node.STATIC_SOURCE_FILE);
452:       assertEquals(55, Node.INFERRED_FUNCTION);
453:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
454:       assertEquals(46, Node.IS_NAMESPACE);
455:       assertEquals(57, Node.LAST_PROP);
456:       assertEquals(47, Node.IS_DISPATCHER);
457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
458:       assertEquals(30, Node.VAR_ARGS_NAME);
459:       assertEquals(2, Node.POST_FLAG);
460:       assertEquals(57, Node.REFLECTED_OBJECT);
461:       assertEquals(40, Node.ORIGINALNAME_PROP);
462:       assertEquals(15, Node.NO_SIDE_EFFECTS);
463:       assertEquals(39, Node.EMPTY_BLOCK);
464:       assertEquals(54, Node.SLASH_V);
465:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
466:       assertEquals(52, Node.LENGTH);
467:       assertEquals(8, Node.FLAG_NO_THROWS);
468:       assertEquals(50, Node.FREE_CALL);
469:       assertEquals(4095, Node.COLUMN_MASK);
470:       assertEquals(12, Node.COLUMN_BITS);
471:       assertEquals(48, Node.DIRECTIVES);
472:       assertEquals(1, Node.DECR_FLAG);
473:       assertEquals(37, Node.OPT_ARG_NAME);
474:       assertEquals(49, Node.DIRECT_EVAL);
475:       assertEquals(32, Node.INCRDECR_PROP);
476:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
477:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
478:       assertTrue(int1 == int0);
479:       assertEquals(0, node0.getChildCount());
480:       assertFalse(node0.isSetterDef());
481:       assertFalse(node0.isCatch());
482:       assertFalse(node0.isDefaultCase());
483:       assertFalse(node0.isRegExp());
484:       assertEquals(40, node0.getType());
485:       assertFalse(node0.isVar());
486:       assertFalse(node0.isArrayLit());
487:       assertTrue(node0.isString());
488:       assertFalse(node0.isTry());
489:       assertFalse(node0.isFunction());
490:       assertFalse(node0.isGetterDef());
491:       assertFalse(node0.isDebugger());
492:       assertFalse(node0.isParamList());
493:       assertFalse(node0.isStringKey());
494:       assertEquals((-1), node0.getLineno());
495:       assertFalse(node0.isIn());
496:       assertFalse(node0.isContinue());
497:       assertFalse(node0.hasMoreThanOneChild());
498:       assertFalse(node0.isCase());
499:       assertFalse(node0.isFor());
500:       assertFalse(node0.isBlock());
501:       assertFalse(node0.isInc());
502:       assertFalse(node0.isIf());
503:       assertFalse(node0.isNE());
504:       assertFalse(node0.isObjectLit());
505:       assertFalse(node0.isGetProp());
506:       assertFalse(node0.isInstanceOf());
507:       assertFalse(node0.isWith());
508:       assertFalse(node0.isFalse());
509:       assertFalse(node0.isComma());
510:       assertFalse(node0.isThis());
511:       assertFalse(node0.isHook());
512:       assertFalse(node0.isThrow());
513:       assertFalse(node0.hasOneChild());
514:       assertFalse(node0.isCast());
515:       assertFalse(node0.isScript());
516:       assertFalse(node0.isNumber());
517:       assertEquals((-1), node0.getSourcePosition());
518:       assertFalse(node0.isNot());
519:       assertFalse(node0.isLabelName());
520:       assertFalse(node0.isAnd());
521:       assertEquals((-1), node0.getCharno());
522:       assertFalse(node0.isSwitch());
523:       assertFalse(node0.isReturn());
524:       assertFalse(node0.isAssignAdd());
525:       assertFalse(node0.isLabel());
526:       assertFalse(node0.isOr());
527:       assertFalse(node0.isWhile());
528:       assertFalse(node0.hasChildren());
529:       assertFalse(node0.isTypeOf());
530:       assertFalse(node0.isDec());
531:       assertFalse(node0.isAssign());
532:       assertFalse(node0.isDo());
533:       assertFalse(node0.isNew());
534:       assertFalse(node0.isVoid());
535:       assertFalse(node0.isCall());
536:       assertFalse(node0.isExprResult());
537:       assertFalse(node0.isAdd());
538:       assertFalse(node0.isGetElem());
539:       assertFalse(node0.isEmpty());
540:       assertFalse(node0.isDelProp());
541:       assertFalse(node0.isBreak());
542:       assertFalse(node0.isName());
543:       assertFalse(node0.isTrue());
544:       assertFalse(node0.isNull());
545:       assertEquals(0, int1);
546:       
547:       boolean boolean1 = node0.isFalse();
548:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
549:       assertEquals(53, Node.INPUT_ID);
550:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
551:       assertEquals(43, Node.IS_CONSTANT_NAME);
552:       assertEquals(56, Node.CHANGE_TIME);
553:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
554:       assertEquals(36, Node.QUOTED_PROP);
555:       assertEquals(29, Node.JSDOC_INFO_PROP);
556:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
557:       assertEquals(51, Node.STATIC_SOURCE_FILE);
558:       assertEquals(55, Node.INFERRED_FUNCTION);
559:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
560:       assertEquals(46, Node.IS_NAMESPACE);
561:       assertEquals(57, Node.LAST_PROP);
562:       assertEquals(47, Node.IS_DISPATCHER);
563:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
564:       assertEquals(30, Node.VAR_ARGS_NAME);
565:       assertEquals(2, Node.POST_FLAG);
566:       assertEquals(57, Node.REFLECTED_OBJECT);
567:       assertEquals(40, Node.ORIGINALNAME_PROP);
568:       assertEquals(15, Node.NO_SIDE_EFFECTS);
569:       assertEquals(39, Node.EMPTY_BLOCK);
570:       assertEquals(54, Node.SLASH_V);
571:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
572:       assertEquals(52, Node.LENGTH);
573:       assertEquals(8, Node.FLAG_NO_THROWS);
574:       assertEquals(50, Node.FREE_CALL);
575:       assertEquals(4095, Node.COLUMN_MASK);
576:       assertEquals(12, Node.COLUMN_BITS);
577:       assertEquals(48, Node.DIRECTIVES);
578:       assertEquals(1, Node.DECR_FLAG);
579:       assertEquals(37, Node.OPT_ARG_NAME);
580:       assertEquals(49, Node.DIRECT_EVAL);
581:       assertEquals(32, Node.INCRDECR_PROP);
582:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
583:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
584:       assertTrue(boolean1 == boolean0);
585:       assertEquals(0, node0.getChildCount());
586:       assertFalse(node0.isSetterDef());
587:       assertFalse(node0.isCatch());
588:       assertFalse(node0.isDefaultCase());
589:       assertFalse(node0.isRegExp());
590:       assertEquals(40, node0.getType());
591:       assertFalse(node0.isVar());
592:       assertFalse(node0.isArrayLit());
593:       assertTrue(node0.isString());
594:       assertFalse(node0.isTry());
595:       assertFalse(node0.isFunction());
596:       assertFalse(node0.isGetterDef());
597:       assertFalse(node0.isDebugger());
598:       assertFalse(node0.isParamList());
599:       assertFalse(node0.isStringKey());
600:       assertEquals((-1), node0.getLineno());
601:       assertFalse(node0.isIn());
602:       assertFalse(node0.isContinue());
603:       assertFalse(node0.hasMoreThanOneChild());
604:       assertFalse(node0.isCase());
605:       assertFalse(node0.isFor());
606:       assertFalse(node0.isBlock());
607:       assertFalse(node0.isInc());
608:       assertFalse(node0.isIf());
609:       assertFalse(node0.isNE());
610:       assertFalse(node0.isObjectLit());
611:       assertFalse(node0.isGetProp());
612:       assertFalse(node0.isInstanceOf());
613:       assertFalse(node0.isWith());
614:       assertFalse(node0.isFalse());
615:       assertFalse(node0.isComma());
616:       assertFalse(node0.isThis());
617:       assertFalse(node0.isHook());
618:       assertFalse(node0.isThrow());
619:       assertFalse(node0.hasOneChild());
620:       assertFalse(node0.isCast());
621:       assertFalse(node0.isScript());
622:       assertFalse(node0.isNumber());
623:       assertEquals((-1), node0.getSourcePosition());
624:       assertFalse(node0.isNot());
625:       assertFalse(node0.isLabelName());
626:       assertFalse(node0.isAnd());
627:       assertEquals((-1), node0.getCharno());
628:       assertFalse(node0.isSwitch());
629:       assertFalse(node0.isReturn());
630:       assertFalse(node0.isAssignAdd());
631:       assertFalse(node0.isLabel());
632:       assertFalse(node0.isOr());
633:       assertFalse(node0.isWhile());
634:       assertFalse(node0.hasChildren());
635:       assertFalse(node0.isTypeOf());
636:       assertFalse(node0.isDec());
637:       assertFalse(node0.isAssign());
638:       assertFalse(node0.isDo());
639:       assertFalse(node0.isNew());
640:       assertFalse(node0.isVoid());
641:       assertFalse(node0.isCall());
642:       assertFalse(node0.isExprResult());
643:       assertFalse(node0.isAdd());
644:       assertFalse(node0.isGetElem());
645:       assertFalse(node0.isEmpty());
646:       assertFalse(node0.isDelProp());
647:       assertFalse(node0.isBreak());
648:       assertFalse(node0.isName());
649:       assertFalse(node0.isTrue());
650:       assertFalse(node0.isNull());
651:       assertFalse(boolean1);
652:       
653:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1237));
654:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
655:       assertEquals((-1237), node_SideEffectFlags0.valueOf());
656:       assertNotNull(node_SideEffectFlags0);
657:       
658:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
659:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
660:       assertEquals((-1237), node_SideEffectFlags0.valueOf());
661:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
662:       assertEquals((-1237), node_SideEffectFlags1.valueOf());
663:       assertNotNull(node_SideEffectFlags1);
664:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
665:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
666:       
667:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
668:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
669:       assertEquals(31, node_SideEffectFlags0.valueOf());
670:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
671:       assertEquals(31, node_SideEffectFlags2.valueOf());
672:       assertNotNull(node_SideEffectFlags2);
673:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
674:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
675:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
676:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
677:       
678:       node_SideEffectFlags0.clearSideEffectFlags();
679:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
680:       assertEquals(31, node_SideEffectFlags0.valueOf());
681:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
682:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
683:       
684:       Node node1 = Node.newString(51, "", (-2881), 38);
685:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
686:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
687:       assertEquals(29, Node.JSDOC_INFO_PROP);
688:       assertEquals(53, Node.INPUT_ID);
689:       assertEquals(47, Node.IS_DISPATCHER);
690:       assertEquals(2, Node.POST_FLAG);
691:       assertEquals(51, Node.STATIC_SOURCE_FILE);
692:       assertEquals(32, Node.INCRDECR_PROP);
693:       assertEquals(1, Node.DECR_FLAG);
694:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
695:       assertEquals(43, Node.IS_CONSTANT_NAME);
696:       assertEquals(50, Node.FREE_CALL);
697:       assertEquals(46, Node.IS_NAMESPACE);
698:       assertEquals(54, Node.SLASH_V);
699:       assertEquals(52, Node.LENGTH);
700:       assertEquals(40, Node.ORIGINALNAME_PROP);
701:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
702:       assertEquals(15, Node.NO_SIDE_EFFECTS);
703:       assertEquals(57, Node.LAST_PROP);
704:       assertEquals(30, Node.VAR_ARGS_NAME);
705:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
706:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
707:       assertEquals(12, Node.COLUMN_BITS);
708:       assertEquals(4095, Node.COLUMN_MASK);
709:       assertEquals(48, Node.DIRECTIVES);
710:       assertEquals(37, Node.OPT_ARG_NAME);
711:       assertEquals(55, Node.INFERRED_FUNCTION);
712:       assertEquals(39, Node.EMPTY_BLOCK);
713:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
714:       assertEquals(56, Node.CHANGE_TIME);
715:       assertEquals(36, Node.QUOTED_PROP);
716:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
717:       assertEquals(8, Node.FLAG_NO_THROWS);
718:       assertEquals(49, Node.DIRECT_EVAL);
719:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
720:       assertEquals(57, Node.REFLECTED_OBJECT);
721:       assertFalse(node1.equals((Object)node0));
722:       assertFalse(node1.isInstanceOf());
723:       assertFalse(node1.isComma());
724:       assertFalse(node1.isThis());
725:       assertFalse(node1.isObjectLit());
726:       assertFalse(node1.isNot());
727:       assertFalse(node1.isWith());
728:       assertFalse(node1.isBreak());
729:       assertFalse(node1.isExprResult());
730:       assertFalse(node1.isAnd());
731:       assertFalse(node1.isHook());
732:       assertEquals((-1), node1.getCharno());
733:       assertFalse(node1.isAssign());
734:       assertFalse(node1.isString());
735:       assertFalse(node1.hasChildren());
736:       assertFalse(node1.isScript());
737:       assertFalse(node1.isGetProp());
738:       assertFalse(node1.hasOneChild());
739:       assertFalse(node1.isCase());
740:       assertFalse(node1.isReturn());
741:       assertFalse(node1.isAssignAdd());
742:       assertFalse(node1.isLabel());
743:       assertEquals(51, node1.getType());
744:       assertFalse(node1.isTypeOf());
745:       assertFalse(node1.isDec());
746:       assertFalse(node1.isNumber());
747:       assertFalse(node1.isGetterDef());
748:       assertFalse(node1.isOr());
749:       assertFalse(node1.isGetElem());
750:       assertFalse(node1.isArrayLit());
751:       assertFalse(node1.isSwitch());
752:       assertFalse(node1.isDelProp());
753:       assertFalse(node1.isLabelName());
754:       assertFalse(node1.isAdd());
755:       assertFalse(node1.isVar());
756:       assertFalse(node1.isTrue());
757:       assertFalse(node1.isDefaultCase());
758:       assertFalse(node1.isEmpty());
759:       assertFalse(node1.isNew());
760:       assertTrue(node1.isIn());
761:       assertFalse(node1.isDo());
762:       assertFalse(node1.isCatch());
763:       assertEquals(0, node1.getChildCount());
764:       assertFalse(node1.isNull());
765:       assertFalse(node1.isStringKey());
766:       assertFalse(node1.isCall());
767:       assertFalse(node1.isParamList());
768:       assertFalse(node1.isName());
769:       assertFalse(node1.isVoid());
770:       assertFalse(node1.isBlock());
771:       assertFalse(node1.isDebugger());
772:       assertFalse(node1.isRegExp());
773:       assertFalse(node1.isWhile());
774:       assertFalse(node1.isFor());
775:       assertFalse(node1.isTry());
776:       assertEquals((-1), node1.getLineno());
777:       assertFalse(node1.hasMoreThanOneChild());
778:       assertFalse(node1.isContinue());
779:       assertEquals((-1), node1.getSourcePosition());
780:       assertFalse(node1.isIf());
781:       assertFalse(node1.isNE());
782:       assertFalse(node1.isCast());
783:       assertFalse(node1.isFunction());
784:       assertFalse(node1.isFalse());
785:       assertFalse(node1.isThrow());
786:       assertFalse(node1.isInc());
787:       assertFalse(node1.isSetterDef());
788:       assertNotNull(node1);
789:       assertNotSame(node1, node0);
790:       
791:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
792:       assertEquals(0, node_SideEffectFlags0.valueOf());
793:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
794:       assertEquals(0, node_SideEffectFlags3.valueOf());
795:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
796:       assertNotNull(node_SideEffectFlags3);
797:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
798:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
799:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
800:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
801:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
802:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
803:       
804:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setReturnsTainted();
805:       assertEquals(0, node_SideEffectFlags0.valueOf());
806:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
807:       assertEquals(0, node_SideEffectFlags4.valueOf());
808:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
809:       assertNotNull(node_SideEffectFlags4);
810:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
811:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
812:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
813:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
814:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
815:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
816:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
817:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
818:       
819:       node0.setString("");
820:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
821:       assertEquals(53, Node.INPUT_ID);
822:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
823:       assertEquals(43, Node.IS_CONSTANT_NAME);
824:       assertEquals(56, Node.CHANGE_TIME);
825:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
826:       assertEquals(36, Node.QUOTED_PROP);
827:       assertEquals(29, Node.JSDOC_INFO_PROP);
828:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
829:       assertEquals(51, Node.STATIC_SOURCE_FILE);
830:       assertEquals(55, Node.INFERRED_FUNCTION);
831:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
832:       assertEquals(46, Node.IS_NAMESPACE);
833:       assertEquals(57, Node.LAST_PROP);
834:       assertEquals(47, Node.IS_DISPATCHER);
835:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
836:       assertEquals(30, Node.VAR_ARGS_NAME);
837:       assertEquals(2, Node.POST_FLAG);
838:       assertEquals(57, Node.REFLECTED_OBJECT);
839:       assertEquals(40, Node.ORIGINALNAME_PROP);
840:       assertEquals(15, Node.NO_SIDE_EFFECTS);
841:       assertEquals(39, Node.EMPTY_BLOCK);
842:       assertEquals(54, Node.SLASH_V);
843:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
844:       assertEquals(52, Node.LENGTH);
845:       assertEquals(8, Node.FLAG_NO_THROWS);
846:       assertEquals(50, Node.FREE_CALL);
847:       assertEquals(4095, Node.COLUMN_MASK);
848:       assertEquals(12, Node.COLUMN_BITS);
849:       assertEquals(48, Node.DIRECTIVES);
850:       assertEquals(1, Node.DECR_FLAG);
851:       assertEquals(37, Node.OPT_ARG_NAME);
852:       assertEquals(49, Node.DIRECT_EVAL);
853:       assertEquals(32, Node.INCRDECR_PROP);
854:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
855:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
856:       assertFalse(node0.equals((Object)node1));
857:       assertEquals(0, node0.getChildCount());
858:       assertFalse(node0.isSetterDef());
859:       assertFalse(node0.isCatch());
860:       assertFalse(node0.isDefaultCase());
861:       assertFalse(node0.isRegExp());
862:       assertEquals(40, node0.getType());
863:       assertFalse(node0.isVar());
864:       assertFalse(node0.isArrayLit());
865:       assertTrue(node0.isString());
866:       assertFalse(node0.isTry());
867:       assertFalse(node0.isFunction());
868:       assertFalse(node0.isGetterDef());
869:       assertFalse(node0.isDebugger());
870:       assertFalse(node0.isParamList());
871:       assertFalse(node0.isStringKey());
872:       assertEquals((-1), node0.getLineno());
873:       assertFalse(node0.isIn());
874:       assertFalse(node0.isContinue());
875:       assertFalse(node0.hasMoreThanOneChild());
876:       assertFalse(node0.isCase());
877:       assertFalse(node0.isFor());
878:       assertFalse(node0.isBlock());
879:       assertFalse(node0.isInc());
880:       assertFalse(node0.isIf());
881:       assertFalse(node0.isNE());
882:       assertFalse(node0.isObjectLit());
883:       assertFalse(node0.isGetProp());
884:       assertFalse(node0.isInstanceOf());
885:       assertFalse(node0.isWith());
886:       assertFalse(node0.isFalse());
887:       assertFalse(node0.isComma());
888:       assertFalse(node0.isThis());
889:       assertFalse(node0.isHook());
890:       assertFalse(node0.isThrow());
891:       assertFalse(node0.hasOneChild());
892:       assertFalse(node0.isCast());
893:       assertFalse(node0.isScript());
894:       assertFalse(node0.isNumber());
895:       assertEquals((-1), node0.getSourcePosition());
896:       assertFalse(node0.isNot());
897:       assertFalse(node0.isLabelName());
898:       assertFalse(node0.isAnd());
899:       assertEquals((-1), node0.getCharno());
900:       assertFalse(node0.isSwitch());
901:       assertFalse(node0.isReturn());
902:       assertFalse(node0.isAssignAdd());
903:       assertFalse(node0.isLabel());
904:       assertFalse(node0.isOr());
905:       assertFalse(node0.isWhile());
906:       assertFalse(node0.hasChildren());
907:       assertFalse(node0.isTypeOf());
908:       assertFalse(node0.isDec());
909:       assertFalse(node0.isAssign());
910:       assertFalse(node0.isDo());
911:       assertFalse(node0.isNew());
912:       assertFalse(node0.isVoid());
913:       assertFalse(node0.isCall());
914:       assertFalse(node0.isExprResult());
915:       assertFalse(node0.isAdd());
916:       assertFalse(node0.isGetElem());
917:       assertFalse(node0.isEmpty());
918:       assertFalse(node0.isDelProp());
919:       assertFalse(node0.isBreak());
920:       assertFalse(node0.isName());
921:       assertFalse(node0.isTrue());
922:       assertFalse(node0.isNull());
923:       assertNotSame(node0, node1);
924:       
925:       node1.setQuotedString();
926:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
927:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
928:       assertEquals(29, Node.JSDOC_INFO_PROP);
929:       assertEquals(53, Node.INPUT_ID);
930:       assertEquals(47, Node.IS_DISPATCHER);
931:       assertEquals(2, Node.POST_FLAG);
932:       assertEquals(51, Node.STATIC_SOURCE_FILE);
933:       assertEquals(32, Node.INCRDECR_PROP);
934:       assertEquals(1, Node.DECR_FLAG);
935:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
936:       assertEquals(43, Node.IS_CONSTANT_NAME);
937:       assertEquals(50, Node.FREE_CALL);
938:       assertEquals(46, Node.IS_NAMESPACE);
939:       assertEquals(54, Node.SLASH_V);
940:       assertEquals(52, Node.LENGTH);
941:       assertEquals(40, Node.ORIGINALNAME_PROP);
942:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
943:       assertEquals(15, Node.NO_SIDE_EFFECTS);
944:       assertEquals(57, Node.LAST_PROP);
945:       assertEquals(30, Node.VAR_ARGS_NAME);
946:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
947:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
948:       assertEquals(12, Node.COLUMN_BITS);
949:       assertEquals(4095, Node.COLUMN_MASK);
950:       assertEquals(48, Node.DIRECTIVES);
951:       assertEquals(37, Node.OPT_ARG_NAME);
952:       assertEquals(55, Node.INFERRED_FUNCTION);
953:       assertEquals(39, Node.EMPTY_BLOCK);
954:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
955:       assertEquals(56, Node.CHANGE_TIME);
956:       assertEquals(36, Node.QUOTED_PROP);
957:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
958:       assertEquals(8, Node.FLAG_NO_THROWS);
959:       assertEquals(49, Node.DIRECT_EVAL);
960:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
961:       assertEquals(57, Node.REFLECTED_OBJECT);
962:       assertFalse(node1.equals((Object)node0));
963:       assertFalse(node1.isInstanceOf());
964:       assertFalse(node1.isComma());
965:       assertFalse(node1.isThis());
966:       assertFalse(node1.isObjectLit());
967:       assertFalse(node1.isNot());
968:       assertFalse(node1.isWith());
969:       assertFalse(node1.isBreak());
970:       assertFalse(node1.isExprResult());
971:       assertFalse(node1.isAnd());
972:       assertFalse(node1.isHook());
973:       assertEquals((-1), node1.getCharno());
974:       assertFalse(node1.isAssign());
975:       assertFalse(node1.isString());
976:       assertFalse(node1.hasChildren());
977:       assertFalse(node1.isScript());
978:       assertFalse(node1.isGetProp());
979:       assertFalse(node1.hasOneChild());
980:       assertFalse(node1.isCase());
981:       assertFalse(node1.isReturn());
982:       assertFalse(node1.isAssignAdd());
983:       assertFalse(node1.isLabel());
984:       assertEquals(51, node1.getType());
985:       assertFalse(node1.isTypeOf());
986:       assertFalse(node1.isDec());
987:       assertFalse(node1.isNumber());
988:       assertFalse(node1.isGetterDef());
989:       assertFalse(node1.isOr());
990:       assertFalse(node1.isGetElem());
991:       assertFalse(node1.isArrayLit());
992:       assertFalse(node1.isSwitch());
993:       assertFalse(node1.isDelProp());
994:       assertFalse(node1.isLabelName());
995:       assertFalse(node1.isAdd());
996:       assertFalse(node1.isVar());
997:       assertFalse(node1.isTrue());
998:       assertFalse(node1.isDefaultCase());
999:       assertFalse(node1.isEmpty());
1000:       assertFalse(node1.isNew());
1001:       assertTrue(node1.isIn());
1002:       assertFalse(node1.isDo());
1003:       assertFalse(node1.isCatch());
1004:       assertEquals(0, node1.getChildCount());
1005:       assertFalse(node1.isNull());
1006:       assertFalse(node1.isStringKey());
1007:       assertFalse(node1.isCall());
1008:       assertFalse(node1.isParamList());
1009:       assertFalse(node1.isName());
1010:       assertFalse(node1.isVoid());
1011:       assertFalse(node1.isBlock());
1012:       assertFalse(node1.isDebugger());
1013:       assertFalse(node1.isRegExp());
1014:       assertFalse(node1.isWhile());
1015:       assertFalse(node1.isFor());
1016:       assertFalse(node1.isTry());
1017:       assertEquals((-1), node1.getLineno());
1018:       assertFalse(node1.hasMoreThanOneChild());
1019:       assertFalse(node1.isContinue());
1020:       assertEquals((-1), node1.getSourcePosition());
1021:       assertFalse(node1.isIf());
1022:       assertFalse(node1.isNE());
1023:       assertFalse(node1.isCast());
1024:       assertFalse(node1.isFunction());
1025:       assertFalse(node1.isFalse());
1026:       assertFalse(node1.isThrow());
1027:       assertFalse(node1.isInc());
1028:       assertFalse(node1.isSetterDef());
1029:       assertNotSame(node1, node0);
1030:       
1031:       String string0 = node1.getQualifiedName();
1032:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1033:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1034:       assertEquals(29, Node.JSDOC_INFO_PROP);
1035:       assertEquals(53, Node.INPUT_ID);
1036:       assertEquals(47, Node.IS_DISPATCHER);
1037:       assertEquals(2, Node.POST_FLAG);
1038:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1039:       assertEquals(32, Node.INCRDECR_PROP);
1040:       assertEquals(1, Node.DECR_FLAG);
1041:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1042:       assertEquals(43, Node.IS_CONSTANT_NAME);
1043:       assertEquals(50, Node.FREE_CALL);
1044:       assertEquals(46, Node.IS_NAMESPACE);
1045:       assertEquals(54, Node.SLASH_V);
1046:       assertEquals(52, Node.LENGTH);
1047:       assertEquals(40, Node.ORIGINALNAME_PROP);
1048:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1049:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1050:       assertEquals(57, Node.LAST_PROP);
1051:       assertEquals(30, Node.VAR_ARGS_NAME);
1052:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1053:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1054:       assertEquals(12, Node.COLUMN_BITS);
1055:       assertEquals(4095, Node.COLUMN_MASK);
1056:       assertEquals(48, Node.DIRECTIVES);
1057:       assertEquals(37, Node.OPT_ARG_NAME);
1058:       assertEquals(55, Node.INFERRED_FUNCTION);
1059:       assertEquals(39, Node.EMPTY_BLOCK);
1060:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1061:       assertEquals(56, Node.CHANGE_TIME);
1062:       assertEquals(36, Node.QUOTED_PROP);
1063:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1064:       assertEquals(8, Node.FLAG_NO_THROWS);
1065:       assertEquals(49, Node.DIRECT_EVAL);
1066:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1067:       assertEquals(57, Node.REFLECTED_OBJECT);
1068:       assertFalse(node1.equals((Object)node0));
1069:       assertFalse(node1.isInstanceOf());
1070:       assertFalse(node1.isComma());
1071:       assertFalse(node1.isThis());
1072:       assertFalse(node1.isObjectLit());
1073:       assertFalse(node1.isNot());
1074:       assertFalse(node1.isWith());
1075:       assertFalse(node1.isBreak());
1076:       assertFalse(node1.isExprResult());
1077:       assertFalse(node1.isAnd());
1078:       assertFalse(node1.isHook());
1079:       assertEquals((-1), node1.getCharno());
1080:       assertFalse(node1.isAssign());
1081:       assertFalse(node1.isString());
1082:       assertFalse(node1.hasChildren());
1083:       assertFalse(node1.isScript());
1084:       assertFalse(node1.isGetProp());
1085:       assertFalse(node1.hasOneChild());
1086:       assertFalse(node1.isCase());
1087:       assertFalse(node1.isReturn());
1088:       assertFalse(node1.isAssignAdd());
1089:       assertFalse(node1.isLabel());
1090:       assertEquals(51, node1.getType());
1091:       assertFalse(node1.isTypeOf());
1092:       assertFalse(node1.isDec());
1093:       assertFalse(node1.isNumber());
1094:       assertFalse(node1.isGetterDef());
1095:       assertFalse(node1.isOr());
1096:       assertFalse(node1.isGetElem());
1097:       assertFalse(node1.isArrayLit());
1098:       assertFalse(node1.isSwitch());
1099:       assertFalse(node1.isDelProp());
1100:       assertFalse(node1.isLabelName());
1101:       assertFalse(node1.isAdd());
1102:       assertFalse(node1.isVar());
1103:       assertFalse(node1.isTrue());
1104:       assertFalse(node1.isDefaultCase());
1105:       assertFalse(node1.isEmpty());
1106:       assertFalse(node1.isNew());
1107:       assertTrue(node1.isIn());
1108:       assertFalse(node1.isDo());
1109:       assertFalse(node1.isCatch());
1110:       assertEquals(0, node1.getChildCount());
1111:       assertFalse(node1.isNull());
1112:       assertFalse(node1.isStringKey());
1113:       assertFalse(node1.isCall());
1114:       assertFalse(node1.isParamList());
1115:       assertFalse(node1.isName());
1116:       assertFalse(node1.isVoid());
1117:       assertFalse(node1.isBlock());
1118:       assertFalse(node1.isDebugger());
1119:       assertFalse(node1.isRegExp());
1120:       assertFalse(node1.isWhile());
1121:       assertFalse(node1.isFor());
1122:       assertFalse(node1.isTry());
1123:       assertEquals((-1), node1.getLineno());
1124:       assertFalse(node1.hasMoreThanOneChild());
1125:       assertFalse(node1.isContinue());
1126:       assertEquals((-1), node1.getSourcePosition());
1127:       assertFalse(node1.isIf());
1128:       assertFalse(node1.isNE());
1129:       assertFalse(node1.isCast());
1130:       assertFalse(node1.isFunction());
1131:       assertFalse(node1.isFalse());
1132:       assertFalse(node1.isThrow());
1133:       assertFalse(node1.isInc());
1134:       assertFalse(node1.isSetterDef());
1135:       assertNull(string0);
1136:       assertNotSame(node1, node0);
1137:       
1138:       boolean boolean2 = node0.getBooleanProp(32);
1139:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1140:       assertEquals(53, Node.INPUT_ID);
1141:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1142:       assertEquals(43, Node.IS_CONSTANT_NAME);
1143:       assertEquals(56, Node.CHANGE_TIME);
1144:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1145:       assertEquals(36, Node.QUOTED_PROP);
1146:       assertEquals(29, Node.JSDOC_INFO_PROP);
1147:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1148:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1149:       assertEquals(55, Node.INFERRED_FUNCTION);
1150:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1151:       assertEquals(46, Node.IS_NAMESPACE);
1152:       assertEquals(57, Node.LAST_PROP);
1153:       assertEquals(47, Node.IS_DISPATCHER);
1154:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1155:       assertEquals(30, Node.VAR_ARGS_NAME);
1156:       assertEquals(2, Node.POST_FLAG);
1157:       assertEquals(57, Node.REFLECTED_OBJECT);
1158:       assertEquals(40, Node.ORIGINALNAME_PROP);
1159:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1160:       assertEquals(39, Node.EMPTY_BLOCK);
1161:       assertEquals(54, Node.SLASH_V);
1162:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1163:       assertEquals(52, Node.LENGTH);
1164:       assertEquals(8, Node.FLAG_NO_THROWS);
1165:       assertEquals(50, Node.FREE_CALL);
1166:       assertEquals(4095, Node.COLUMN_MASK);
1167:       assertEquals(12, Node.COLUMN_BITS);
1168:       assertEquals(48, Node.DIRECTIVES);
1169:       assertEquals(1, Node.DECR_FLAG);
1170:       assertEquals(37, Node.OPT_ARG_NAME);
1171:       assertEquals(49, Node.DIRECT_EVAL);
1172:       assertEquals(32, Node.INCRDECR_PROP);
1173:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1174:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1175:       assertTrue(boolean2 == boolean0);
1176:       assertTrue(boolean2 == boolean1);
1177:       assertFalse(node0.equals((Object)node1));
1178:       assertEquals(0, node0.getChildCount());
1179:       assertFalse(node0.isSetterDef());
1180:       assertFalse(node0.isCatch());
1181:       assertFalse(node0.isDefaultCase());
1182:       assertFalse(node0.isRegExp());
1183:       assertEquals(40, node0.getType());
1184:       assertFalse(node0.isVar());
1185:       assertFalse(node0.isArrayLit());
1186:       assertTrue(node0.isString());
1187:       assertFalse(node0.isTry());
1188:       assertFalse(node0.isFunction());
1189:       assertFalse(node0.isGetterDef());
1190:       assertFalse(node0.isDebugger());
1191:       assertFalse(node0.isParamList());
1192:       assertFalse(node0.isStringKey());
1193:       assertEquals((-1), node0.getLineno());
1194:       assertFalse(node0.isIn());
1195:       assertFalse(node0.isContinue());
1196:       assertFalse(node0.hasMoreThanOneChild());
1197:       assertFalse(node0.isCase());
1198:       assertFalse(node0.isFor());
1199:       assertFalse(node0.isBlock());
1200:       assertFalse(node0.isInc());
1201:       assertFalse(node0.isIf());
1202:       assertFalse(node0.isNE());
1203:       assertFalse(node0.isObjectLit());
1204:       assertFalse(node0.isGetProp());
1205:       assertFalse(node0.isInstanceOf());
1206:       assertFalse(node0.isWith());
1207:       assertFalse(node0.isFalse());
1208:       assertFalse(node0.isComma());
1209:       assertFalse(node0.isThis());
1210:       assertFalse(node0.isHook());
1211:       assertFalse(node0.isThrow());
1212:       assertFalse(node0.hasOneChild());
1213:       assertFalse(node0.isCast());
1214:       assertFalse(node0.isScript());
1215:       assertFalse(node0.isNumber());
1216:       assertEquals((-1), node0.getSourcePosition());
1217:       assertFalse(node0.isNot());
1218:       assertFalse(node0.isLabelName());
1219:       assertFalse(node0.isAnd());
1220:       assertEquals((-1), node0.getCharno());
1221:       assertFalse(node0.isSwitch());
1222:       assertFalse(node0.isReturn());
1223:       assertFalse(node0.isAssignAdd());
1224:       assertFalse(node0.isLabel());
1225:       assertFalse(node0.isOr());
1226:       assertFalse(node0.isWhile());
1227:       assertFalse(node0.hasChildren());
1228:       assertFalse(node0.isTypeOf());
1229:       assertFalse(node0.isDec());
1230:       assertFalse(node0.isAssign());
1231:       assertFalse(node0.isDo());
1232:       assertFalse(node0.isNew());
1233:       assertFalse(node0.isVoid());
1234:       assertFalse(node0.isCall());
1235:       assertFalse(node0.isExprResult());
1236:       assertFalse(node0.isAdd());
1237:       assertFalse(node0.isGetElem());
1238:       assertFalse(node0.isEmpty());
1239:       assertFalse(node0.isDelProp());
1240:       assertFalse(node0.isBreak());
1241:       assertFalse(node0.isName());
1242:       assertFalse(node0.isTrue());
1243:       assertFalse(node0.isNull());
1244:       assertFalse(boolean2);
1245:       assertNotSame(node0, node1);
1246:       
1247:       boolean boolean3 = node0.isCase();
1248:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1249:       assertEquals(53, Node.INPUT_ID);
1250:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1251:       assertEquals(43, Node.IS_CONSTANT_NAME);
1252:       assertEquals(56, Node.CHANGE_TIME);
1253:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1254:       assertEquals(36, Node.QUOTED_PROP);
1255:       assertEquals(29, Node.JSDOC_INFO_PROP);
1256:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1257:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1258:       assertEquals(55, Node.INFERRED_FUNCTION);
1259:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1260:       assertEquals(46, Node.IS_NAMESPACE);
1261:       assertEquals(57, Node.LAST_PROP);
1262:       assertEquals(47, Node.IS_DISPATCHER);
1263:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1264:       assertEquals(30, Node.VAR_ARGS_NAME);
1265:       assertEquals(2, Node.POST_FLAG);
1266:       assertEquals(57, Node.REFLECTED_OBJECT);
1267:       assertEquals(40, Node.ORIGINALNAME_PROP);
1268:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1269:       assertEquals(39, Node.EMPTY_BLOCK);
1270:       assertEquals(54, Node.SLASH_V);
1271:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1272:       assertEquals(52, Node.LENGTH);
1273:       assertEquals(8, Node.FLAG_NO_THROWS);
1274:       assertEquals(50, Node.FREE_CALL);
1275:       assertEquals(4095, Node.COLUMN_MASK);
1276:       assertEquals(12, Node.COLUMN_BITS);
1277:       assertEquals(48, Node.DIRECTIVES);
1278:       assertEquals(1, Node.DECR_FLAG);
1279:       assertEquals(37, Node.OPT_ARG_NAME);
1280:       assertEquals(49, Node.DIRECT_EVAL);
1281:       assertEquals(32, Node.INCRDECR_PROP);
1282:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1283:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1284:       assertFalse(node0.equals((Object)node1));
1285:       assertTrue(boolean3 == boolean2);
1286:       assertTrue(boolean3 == boolean0);
1287:       assertTrue(boolean3 == boolean1);
1288:       assertEquals(0, node0.getChildCount());
1289:       assertFalse(node0.isSetterDef());
1290:       assertFalse(node0.isCatch());
1291:       assertFalse(node0.isDefaultCase());
1292:       assertFalse(node0.isRegExp());
1293:       assertEquals(40, node0.getType());
1294:       assertFalse(node0.isVar());
1295:       assertFalse(node0.isArrayLit());
1296:       assertTrue(node0.isString());
1297:       assertFalse(node0.isTry());
1298:       assertFalse(node0.isFunction());
1299:       assertFalse(node0.isGetterDef());
1300:       assertFalse(node0.isDebugger());
1301:       assertFalse(node0.isParamList());
1302:       assertFalse(node0.isStringKey());
1303:       assertEquals((-1), node0.getLineno());
1304:       assertFalse(node0.isIn());
1305:       assertFalse(node0.isContinue());
1306:       assertFalse(node0.hasMoreThanOneChild());
1307:       assertFalse(node0.isCase());
1308:       assertFalse(node0.isFor());
1309:       assertFalse(node0.isBlock());
1310:       assertFalse(node0.isInc());
1311:       assertFalse(node0.isIf());
1312:       assertFalse(node0.isNE());
1313:       assertFalse(node0.isObjectLit());
1314:       assertFalse(node0.isGetProp());
1315:       assertFalse(node0.isInstanceOf());
1316:       assertFalse(node0.isWith());
1317:       assertFalse(node0.isFalse());
1318:       assertFalse(node0.isComma());
1319:       assertFalse(node0.isThis());
1320:       assertFalse(node0.isHook());
1321:       assertFalse(node0.isThrow());
1322:       assertFalse(node0.hasOneChild());
1323:       assertFalse(node0.isCast());
1324:       assertFalse(node0.isScript());
1325:       assertFalse(node0.isNumber());
1326:       assertEquals((-1), node0.getSourcePosition());
1327:       assertFalse(node0.isNot());
1328:       assertFalse(node0.isLabelName());
1329:       assertFalse(node0.isAnd());
1330:       assertEquals((-1), node0.getCharno());
1331:       assertFalse(node0.isSwitch());
1332:       assertFalse(node0.isReturn());
1333:       assertFalse(node0.isAssignAdd());
1334:       assertFalse(node0.isLabel());
1335:       assertFalse(node0.isOr());
1336:       assertFalse(node0.isWhile());
1337:       assertFalse(node0.hasChildren());
1338:       assertFalse(node0.isTypeOf());
1339:       assertFalse(node0.isDec());
1340:       assertFalse(node0.isAssign());
1341:       assertFalse(node0.isDo());
1342:       assertFalse(node0.isNew());
1343:       assertFalse(node0.isVoid());
1344:       assertFalse(node0.isCall());
1345:       assertFalse(node0.isExprResult());
1346:       assertFalse(node0.isAdd());
1347:       assertFalse(node0.isGetElem());
1348:       assertFalse(node0.isEmpty());
1349:       assertFalse(node0.isDelProp());
1350:       assertFalse(node0.isBreak());
1351:       assertFalse(node0.isName());
1352:       assertFalse(node0.isTrue());
1353:       assertFalse(node0.isNull());
1354:       assertFalse(boolean3);
1355:       assertNotSame(node0, node1);
1356:       
1357:       boolean boolean4 = node0.isThrow();
1358:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1359:       assertEquals(53, Node.INPUT_ID);
1360:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1361:       assertEquals(43, Node.IS_CONSTANT_NAME);
1362:       assertEquals(56, Node.CHANGE_TIME);
1363:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1364:       assertEquals(36, Node.QUOTED_PROP);
1365:       assertEquals(29, Node.JSDOC_INFO_PROP);
1366:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1367:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1368:       assertEquals(55, Node.INFERRED_FUNCTION);
1369:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1370:       assertEquals(46, Node.IS_NAMESPACE);
1371:       assertEquals(57, Node.LAST_PROP);
1372:       assertEquals(47, Node.IS_DISPATCHER);
1373:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1374:       assertEquals(30, Node.VAR_ARGS_NAME);
1375:       assertEquals(2, Node.POST_FLAG);
1376:       assertEquals(57, Node.REFLECTED_OBJECT);
1377:       assertEquals(40, Node.ORIGINALNAME_PROP);
1378:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1379:       assertEquals(39, Node.EMPTY_BLOCK);
1380:       assertEquals(54, Node.SLASH_V);
1381:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1382:       assertEquals(52, Node.LENGTH);
1383:       assertEquals(8, Node.FLAG_NO_THROWS);
1384:       assertEquals(50, Node.FREE_CALL);
1385:       assertEquals(4095, Node.COLUMN_MASK);
1386:       assertEquals(12, Node.COLUMN_BITS);
1387:       assertEquals(48, Node.DIRECTIVES);
1388:       assertEquals(1, Node.DECR_FLAG);
1389:       assertEquals(37, Node.OPT_ARG_NAME);
1390:       assertEquals(49, Node.DIRECT_EVAL);
1391:       assertEquals(32, Node.INCRDECR_PROP);
1392:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1393:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1394:       assertFalse(node0.equals((Object)node1));
1395:       assertTrue(boolean4 == boolean1);
1396:       assertTrue(boolean4 == boolean2);
1397:       assertTrue(boolean4 == boolean3);
1398:       assertTrue(boolean4 == boolean0);
1399:       assertEquals(0, node0.getChildCount());
1400:       assertFalse(node0.isSetterDef());
1401:       assertFalse(node0.isCatch());
1402:       assertFalse(node0.isDefaultCase());
1403:       assertFalse(node0.isRegExp());
1404:       assertEquals(40, node0.getType());
1405:       assertFalse(node0.isVar());
1406:       assertFalse(node0.isArrayLit());
1407:       assertTrue(node0.isString());
1408:       assertFalse(node0.isTry());
1409:       assertFalse(node0.isFunction());
1410:       assertFalse(node0.isGetterDef());
1411:       assertFalse(node0.isDebugger());
1412:       assertFalse(node0.isParamList());
1413:       assertFalse(node0.isStringKey());
1414:       assertEquals((-1), node0.getLineno());
1415:       assertFalse(node0.isIn());
1416:       assertFalse(node0.isContinue());
1417:       assertFalse(node0.hasMoreThanOneChild());
1418:       assertFalse(node0.isCase());
1419:       assertFalse(node0.isFor());
1420:       assertFalse(node0.isBlock());
1421:       assertFalse(node0.isInc());
1422:       assertFalse(node0.isIf());
1423:       assertFalse(node0.isNE());
1424:       assertFalse(node0.isObjectLit());
1425:       assertFalse(node0.isGetProp());
1426:       assertFalse(node0.isInstanceOf());
1427:       assertFalse(node0.isWith());
1428:       assertFalse(node0.isFalse());
1429:       assertFalse(node0.isComma());
1430:       assertFalse(node0.isThis());
1431:       assertFalse(node0.isHook());
1432:       assertFalse(node0.isThrow());
1433:       assertFalse(node0.hasOneChild());
1434:       assertFalse(node0.isCast());
1435:       assertFalse(node0.isScript());
1436:       assertFalse(node0.isNumber());
1437:       assertEquals((-1), node0.getSourcePosition());
1438:       assertFalse(node0.isNot());
1439:       assertFalse(node0.isLabelName());
1440:       assertFalse(node0.isAnd());
1441:       assertEquals((-1), node0.getCharno());
1442:       assertFalse(node0.isSwitch());
1443:       assertFalse(node0.isReturn());
1444:       assertFalse(node0.isAssignAdd());
1445:       assertFalse(node0.isLabel());
1446:       assertFalse(node0.isOr());
1447:       assertFalse(node0.isWhile());
1448:       assertFalse(node0.hasChildren());
1449:       assertFalse(node0.isTypeOf());
1450:       assertFalse(node0.isDec());
1451:       assertFalse(node0.isAssign());
1452:       assertFalse(node0.isDo());
1453:       assertFalse(node0.isNew());
1454:       assertFalse(node0.isVoid());
1455:       assertFalse(node0.isCall());
1456:       assertFalse(node0.isExprResult());
1457:       assertFalse(node0.isAdd());
1458:       assertFalse(node0.isGetElem());
1459:       assertFalse(node0.isEmpty());
1460:       assertFalse(node0.isDelProp());
1461:       assertFalse(node0.isBreak());
1462:       assertFalse(node0.isName());
1463:       assertFalse(node0.isTrue());
1464:       assertFalse(node0.isNull());
1465:       assertFalse(boolean4);
1466:       assertNotSame(node0, node1);
1467:   }
1468: }
RegularFileObject[/tmp/EvoSuite_151_1628256141148/com/google/javascript/rhino/Node_151_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:22:21 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_151_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_151_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.common.collect.Iterables",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_151_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.Token",
267:       "com.google.common.base.Preconditions",
268:       "com.google.common.base.Objects",
269:       "com.google.javascript.rhino.SimpleErrorReporter",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.common.collect.Sets",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.Iterators$12",
347:       "com.google.common.collect.AbstractIndexedListIterator",
348:       "com.google.common.collect.Iterators$11",
349:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
350:       "com.google.javascript.rhino.InputId",
351:       "com.google.javascript.rhino.JSTypeExpression",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Platform",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
364:       "com.google.javascript.rhino.jstype.NamedType",
365:       "com.google.common.collect.AbstractMultimap$Values",
366:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
367:       "com.google.common.collect.AbstractMapBasedMultimap$1",
368:       "com.google.common.collect.Multimaps$Entries",
369:       "com.google.common.collect.AbstractMultimap$Entries",
370:       "com.google.common.collect.AbstractMapBasedMultimap$2",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
373:     );
374:   }
375: }

[MASTER] 13:22:21.367 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(iterable0.contains(node0));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertNotNull(iterable0);

int int0 = node0.getLength();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(0, int0);

boolean boolean0 = node0.isUnscopedQualifiedName();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(boolean0);

int int1 = node0.getSideEffectFlags();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertTrue(int1 == int0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(0, int1);

boolean boolean1 = node0.isFalse();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertTrue(boolean1 == boolean0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(boolean1);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1237));
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1237), node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1237), node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals((-1237), node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags2.valueOf());
assertNotNull(node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);

node_SideEffectFlags0.clearSideEffectFlags();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);

Node node1 = Node.newString(51, "", (-2881), 38);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isAnd());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isAssign());
assertFalse(node1.isString());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(51, node1.getType());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isOr());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertTrue(node1.isIn());
assertFalse(node1.isDo());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertNotNull(node1);
assertNotSame(node1, node0);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setReturnsTainted();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertNotNull(node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);

node0.setString("");
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertNotSame(node0, node1);

node1.setQuotedString();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isAnd());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isAssign());
assertFalse(node1.isString());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(51, node1.getType());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isOr());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertTrue(node1.isIn());
assertFalse(node1.isDo());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertNotSame(node1, node0);

String string0 = node1.getQualifiedName();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isAnd());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isAssign());
assertFalse(node1.isString());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(51, node1.getType());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isOr());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertTrue(node1.isIn());
assertFalse(node1.isDo());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertNull(string0);
assertNotSame(node1, node0);

boolean boolean2 = node0.getBooleanProp(32);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.equals((Object)node1));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(boolean2);
assertNotSame(node0, node1);

boolean boolean3 = node0.isCase();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(boolean3);
assertNotSame(node0, node1);

boolean boolean4 = node0.isThrow();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(boolean4);
assertNotSame(node0, node1);


[MASTER] 13:22:39.581 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:39.874 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:40.179 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:40.434 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:40.655 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:40.859 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:41.088 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:41.271 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:41.474 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:41.671 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:41.852 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:42.032 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:42.229 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:42.432 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:42.662 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:42.867 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:43.062 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:43.256 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:44.058 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:44.294 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:44.495 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:44.684 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:44.860 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:45.060 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:45.265 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:45.475 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:45.737 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:45.969 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:46.165 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:46.353 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:46.551 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:46.756 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:46.986 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:47.210 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:47.418 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:47.663 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:47.854 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:48.052 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:48.222 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:48.434 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:48.619 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:48.839 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:49.088 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:49.439 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:49.840 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:50.073 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:50.371 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:50.635 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:50.861 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:51.122 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:51.300 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:51.542 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:51.798 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:52.022 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:52.558 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:52.770 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-100/tests/30
* Done!

* Computation finished
