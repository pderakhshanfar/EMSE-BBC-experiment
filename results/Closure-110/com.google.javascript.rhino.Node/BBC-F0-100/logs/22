* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 17926
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 885103356
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 13:07:15.472 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;: I12 Branch 98 IF_ICMPEQ L764 - true in context: 
[MASTER] 13:07:17.142 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 13:08:50.084 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 13:10:33.603 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 391,0,0| Number of FF evals: 679
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 1863,0,0| Number of FF evals: 691
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 591,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 210,0,0| Number of FF evals: 159
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 210,0,0| Number of FF evals: 159
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 17638,15788,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 210,0,0| Number of FF evals: 159
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 210,0,0| Number of FF evals: 159
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 210,0,0| Number of FF evals: 159
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 1677,0,0| Number of FF evals: 1289
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 3588,2912,0| Number of FF evals: 10265
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 591,0,0| Number of FF evals: 312
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 1539,0,0| Number of FF evals: 1138
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 36,0,0| Number of FF evals: 261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 1719,0,0| Number of FF evals: 782
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 2547,1775,69| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - true: 210,0,0| Number of FF evals: 409
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 83,0,0| Number of FF evals: 770
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 1822,0,0| Number of FF evals: 693
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 1278,1094,10| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 3320,1571,0| Number of FF evals: 2702
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 1822,0,0| Number of FF evals: 693
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 210,0,0| Number of FF evals: 159
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 1822,0,0| Number of FF evals: 693
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 210,0,0| Number of FF evals: 159
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 4963,2171,0| Number of FF evals: 2366
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 1822,0,0| Number of FF evals: 693
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 16,0,0| Number of FF evals: 199
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 2944,0,0| Number of FF evals: 1138
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 1170,401,0| Number of FF evals: 2043
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 3012,834,0| Number of FF evals: 2415
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 1822,0,0| Number of FF evals: 693
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 1719,0,0| Number of FF evals: 630
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 55789,49978,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 293,0,0| Number of FF evals: 1316
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 1582,0,0| Number of FF evals: 815
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 591,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 4150,633,0| Number of FF evals: 4756
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 10006,7872,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 287,0,0| Number of FF evals: 441
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 2010,0,0| Number of FF evals: 995
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 591,0,0| Number of FF evals: 641
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 2024,1772,445| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 3278,0,0| Number of FF evals: 1048
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 2944,0,0| Number of FF evals: 969
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 2092,1245,0| Number of FF evals: 4948
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 252,0,0| Number of FF evals: 890
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 483,0,0| Number of FF evals: 469
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 1077,0,0| Number of FF evals: 1174
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 6108,5156,15| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: Line 1123: 814,0,0| Number of FF evals: 369
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 1845,1073,19| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 1315,927,237| Number of FF evals: 3681
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 1068,0,0| Number of FF evals: 917
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 2821,1974,0| Number of FF evals: 12508
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 483,0,0| Number of FF evals: 512
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 2162,0,0| Number of FF evals: 779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 997,0,0| Number of FF evals: 1001
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mergeLineCharNo(II)I: I15 Branch 141 IFEQ L1197 - false: 209,0,0| Number of FF evals: 384
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 3766,1970,0| Number of FF evals: 3663
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 416,0,0| Number of FF evals: 287
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 814,0,0| Number of FF evals: 551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 10261,8459,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 569,0,0| Number of FF evals: 712
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2195: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1168: 591,0,0| Number of FF evals: 286
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 2617,438,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1169: 591,0,0| Number of FF evals: 286
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 8079,7238,79| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2197: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 292,0,0| Number of FF evals: 518
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2196: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 209,0,0| Number of FF evals: 412
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 591,0,0| Number of FF evals: 703
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 30,0,0| Number of FF evals: 129
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 1251,293,0| Number of FF evals: 7096
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 368,163,59| Number of FF evals: 2255
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: root-Branch: 696,0,0| Number of FF evals: 927
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - true: 162,0,0| Number of FF evals: 1194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 1766,980,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 299,0,0| Number of FF evals: 180
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 2010,0,0| Number of FF evals: 734
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1164: 591,0,0| Number of FF evals: 286
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 591,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 4704,4107,0| Number of FF evals: 5387
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1165: 591,0,0| Number of FF evals: 286
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 2839,522,0| Number of FF evals: 3745
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 1930,1707,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1356: 696,0,0| Number of FF evals: 344
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 106,0,0| Number of FF evals: 608
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 26351,20540,0| Number of FF evals: 6206
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: root-Branch: 299,0,0| Number of FF evals: 373
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 55789,49978,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 97,0,0| Number of FF evals: 858
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 215,0,0| Number of FF evals: 410
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 299,0,0| Number of FF evals: 171
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 1190,0,0| Number of FF evals: 921
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2198: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 299,0,0| Number of FF evals: 171
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 215,0,0| Number of FF evals: 411
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 2094,1308,3| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 210,0,0| Number of FF evals: 542
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 299,0,0| Number of FF evals: 171
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 591,0,0| Number of FF evals: 312
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 591,0,0| Number of FF evals: 312
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 818,0,0| Number of FF evals: 1045
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 483,0,0| Number of FF evals: 251
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 696,0,0| Number of FF evals: 952
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 591,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 10484,8080,0| Number of FF evals: 8555
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - true: 805,619,0| Number of FF evals: 4056
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 28782,27033,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1358: 696,0,0| Number of FF evals: 344
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1357: 696,0,0| Number of FF evals: 344
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 50,0,0| Number of FF evals: 146
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 4111,3048,0| Number of FF evals: 11096
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 6,0,0| Number of FF evals: 103
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 6,0,0| Number of FF evals: 103
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 2464,0,0| Number of FF evals: 846
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 6,0,0| Number of FF evals: 103
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 235,0,0| Number of FF evals: 385
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 210,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 4340,3184,603| Number of FF evals: 8718
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 640: 43,0,0| Number of FF evals: 64
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 2379,1268,0| Number of FF evals: 2233
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 9409,7810,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 235,0,0| Number of FF evals: 385
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 49847,44036,0| Number of FF evals: 12621
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 4125,3523,171| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 391,0,0| Number of FF evals: 772
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 3763,3033,185| Number of FF evals: 14174
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - false: 696,0,0| Number of FF evals: 666
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 1950,1686,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 53,0,0| Number of FF evals: 317
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 299,0,0| Number of FF evals: 665
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 747,465,0| Number of FF evals: 2396
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 591,0,0| Number of FF evals: 739
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 55789,49978,39446| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 55789,49978,0| Number of FF evals: 14337
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 814,0,0| Number of FF evals: 376
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 585,0,0| Number of FF evals: 749
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 55789,49978,39448| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 1884,1096,19| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 492: 151,0,0| Number of FF evals: 1261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 210,0,0| Number of FF evals: 713
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 1803,1017,5| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - false: 1,0,0| Number of FF evals: 307
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 750,0,0| Number of FF evals: 854
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 289,0,0| Number of FF evals: 649
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 1781,1010,33| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - true: 210,0,0| Number of FF evals: 738
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 591,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 13338,11542,0| Number of FF evals: 13831
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 494: 151,0,0| Number of FF evals: 1261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 591,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 11188,9400,0| Number of FF evals: 8739
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 1582,0,0| Number of FF evals: 919
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 245,0,0| Number of FF evals: 766
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: Line 1344: 696,0,0| Number of FF evals: 344
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 1846,0,0| Number of FF evals: 1229
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 7674,4662,0| Number of FF evals: 8392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 6277,5400,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 55789,49978,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 5247,0,0| Number of FF evals: 1471
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 55789,49978,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 1582,0,0| Number of FF evals: 752
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - true: 1,0,0| Number of FF evals: 235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 831,242,0| Number of FF evals: 4514
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 232: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - true: 33,0,0| Number of FF evals: 558
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 2010,0,0| Number of FF evals: 739
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 998,0,0| Number of FF evals: 727
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 483,0,0| Number of FF evals: 251
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 1803,1017,5| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 299,0,0| Number of FF evals: 181
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 591,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 2217,1993,299| Number of FF evals: 12146
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 1786,1000,21| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 814,0,0| Number of FF evals: 363
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: root-Branch: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 2055,1831,295| Number of FF evals: 11100
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 591,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 83,0,0| Number of FF evals: 765
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 3958,3723,1120| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 51789,45978,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 1597,1402,0| Number of FF evals: 14174
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: Line 2161: 814,0,0| Number of FF evals: 373
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 2092,1245,0| Number of FF evals: 4949
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 49847,44036,0| Number of FF evals: 12633
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 12713,10054,0| Number of FF evals: 10011
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 1190,0,0| Number of FF evals: 475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 55789,49978,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 4357,2428,0| Number of FF evals: 3872
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 4542,3862,35| Number of FF evals: 14273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 299,0,0| Number of FF evals: 201
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 210,0,0| Number of FF evals: 137
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 55789,49978,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 55789,49978,0| Number of FF evals: 14337
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 591,0,0| Number of FF evals: 368
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 3611,0,0| Number of FF evals: 1124
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 5,0,0| Number of FF evals: 203
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 591,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 82,0,0| Number of FF evals: 449
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 299,0,0| Number of FF evals: 239
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 2426,0,0| Number of FF evals: 891
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 299,0,0| Number of FF evals: 308
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 27559,26448,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 814,0,0| Number of FF evals: 383
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 2126,1349,23| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 2379,1268,0| Number of FF evals: 2304
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 377,0,0| Number of FF evals: 398
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getCharno()I: Line 1144: 210,0,0| Number of FF evals: 137
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 2010,0,0| Number of FF evals: 895
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 9689,8480,0| Number of FF evals: 13965
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 9939,8730,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 6971,1160,0| Number of FF evals: 1846
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 2944,0,0| Number of FF evals: 1228
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 198,0,0| Number of FF evals: 493
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 5302,2053,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 27442,26438,19| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 3647,2361,0| Number of FF evals: 11572
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 50708,44897,0| Number of FF evals: 13352
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 235,0,0| Number of FF evals: 414
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 235,0,0| Number of FF evals: 487
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - false: 814,0,0| Number of FF evals: 679
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 49847,44036,0| Number of FF evals: 12633
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 1190,0,0| Number of FF evals: 487
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 2244,1240,0| Number of FF evals: 2304
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 934,0,0| Number of FF evals: 489
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 51789,45978,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 1863,0,0| Number of FF evals: 869
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 3278,0,0| Number of FF evals: 1267
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 55789,49978,39450| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 49847,44036,0| Number of FF evals: 12633
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 440,0,0| Number of FF evals: 727
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 934,0,0| Number of FF evals: 398
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 7012,5475,0| Number of FF evals: 11861
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 77,0,0| Number of FF evals: 271
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 5626,0,0| Number of FF evals: 1581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 4293,3556,0| Number of FF evals: 9488
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - true: 210,0,0| Number of FF evals: 1509
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 2010,0,0| Number of FF evals: 1049
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 210,0,0| Number of FF evals: 271
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 123,0,0| Number of FF evals: 595
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 440,0,0| Number of FF evals: 727
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 276,0,0| Number of FF evals: 1026
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 196,0,0| Number of FF evals: 900
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 1582,0,0| Number of FF evals: 626
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 3204,810,0| Number of FF evals: 4823
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 1582,0,0| Number of FF evals: 626
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 483,0,0| Number of FF evals: 702
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 1582,0,0| Number of FF evals: 626
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1305,519,0| Number of FF evals: 7635
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 55789,49978,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 36,0,0| Number of FF evals: 254
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 1719,0,0| Number of FF evals: 669
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 717,0,0| Number of FF evals: 1211
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 591,0,0| Number of FF evals: 688
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 26351,20540,0| Number of FF evals: 6206
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 586,0,0| Number of FF evals: 1484
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 696,0,0| Number of FF evals: 331
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 55789,49978,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 6090,5142,1| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 814,0,0| Number of FF evals: 368
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 2010,0,0| Number of FF evals: 722
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 1738,948,0| Number of FF evals: 4189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 717,32,0| Number of FF evals: 1768
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 483,0,0| Number of FF evals: 249
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 9054,5568,0| Number of FF evals: 7045
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 483,0,0| Number of FF evals: 249
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 1640,1003,0| Number of FF evals: 5446
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 591,0,0| Number of FF evals: 733
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 287,0,0| Number of FF evals: 466
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 55789,49978,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1039: 33,0,0| Number of FF evals: 194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 1034,0,0| Number of FF evals: 471
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 591,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 1883,1106,36| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 483,0,0| Number of FF evals: 325
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1033: 33,0,0| Number of FF evals: 194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 591,0,0| Number of FF evals: 312
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 57,0,0| Number of FF evals: 339
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1036: 283,0,0| Number of FF evals: 1000
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1034: 33,0,0| Number of FF evals: 194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 1764,978,15| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 591,0,0| Number of FF evals: 756
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 1582,0,0| Number of FF evals: 613
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 400,0,0| Number of FF evals: 1306
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 591,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 934,0,0| Number of FF evals: 412
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 1823,1051,20| Number of FF evals: 11938
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 767,193,0| Number of FF evals: 2187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 6969,6157,0| Number of FF evals: 9413
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - false: 210,0,0| Number of FF evals: 887
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 391,0,0| Number of FF evals: 217
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 938,733,146| Number of FF evals: 8075
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 55789,49978,0| Number of FF evals: 14337
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 391,0,0| Number of FF evals: 425
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 232,0,0| Number of FF evals: 788
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 591,0,0| Number of FF evals: 288
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 460: 43,0,0| Number of FF evals: 47
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 461: 43,0,0| Number of FF evals: 47
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 462: 43,0,0| Number of FF evals: 47
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 3086,2535,0| Number of FF evals: 13334
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 20623,16558,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 2241,1845,0| Number of FF evals: 9886
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 13673,13431,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1895: 3784,0,0| Number of FF evals: 1183
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 3086,2535,0| Number of FF evals: 13334
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1894: 3784,0,0| Number of FF evals: 1183
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: Line 2166: 299,0,0| Number of FF evals: 167
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 55789,49978,0| Number of FF evals: 14337
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 1597,1402,0| Number of FF evals: 14174
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 43,0,0| Number of FF evals: 461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 934,0,0| Number of FF evals: 398
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - false: 1,0,0| Number of FF evals: 426
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 171,0,0| Number of FF evals: 556
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 624,27,0| Number of FF evals: 1766
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - false: 591,0,0| Number of FF evals: 914
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 3565,2126,0| Number of FF evals: 4317
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1791: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1792: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: Line 2403: 934,0,0| Number of FF evals: 408
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 625,102,0| Number of FF evals: 1941
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 1597,1402,0| Number of FF evals: 14174
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1099: 299,0,0| Number of FF evals: 198
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 8552,2741,0| Number of FF evals: 2181
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1797: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 2212,1689,0| Number of FF evals: 6706
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 123,0,0| Number of FF evals: 445
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 123,0,0| Number of FF evals: 445
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 55789,49978,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 7942,2910,0| Number of FF evals: 3240
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 8552,2741,0| Number of FF evals: 2200
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1100: 299,0,0| Number of FF evals: 198
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 4320,0,0| Number of FF evals: 1629
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 591,0,0| Number of FF evals: 739
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 299,0,0| Number of FF evals: 585
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 769,0,0| Number of FF evals: 1670
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: root-Branch: 391,0,0| Number of FF evals: 1370
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 2389,2149,0| Number of FF evals: 11572
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 3262,2756,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 123,0,0| Number of FF evals: 445
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 591,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 1484,956,0| Number of FF evals: 3804
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 123,0,0| Number of FF evals: 445
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 123,0,0| Number of FF evals: 445
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 483,0,0| Number of FF evals: 249
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 123,0,0| Number of FF evals: 445
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 1484,956,0| Number of FF evals: 3804
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 51914,46103,0| Number of FF evals: 13208
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 1484,956,0| Number of FF evals: 3804
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 6848,6437,0| Number of FF evals: 7788
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 1484,956,0| Number of FF evals: 3804
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 474,217,0| Number of FF evals: 2952
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 591,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 1782,996,21| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 5247,0,0| Number of FF evals: 1817
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 368,163,59| Number of FF evals: 2275
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 1793,1007,15| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 9304,3877,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 93,0,0| Number of FF evals: 347
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - false: 52,0,0| Number of FF evals: 1043
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1732: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 1719,0,0| Number of FF evals: 661
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1727: 148,0,0| Number of FF evals: 625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLocalResultCall()Z: Line 2156: 299,0,0| Number of FF evals: 198
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1730: 148,0,0| Number of FF evals: 625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 10094,9317,0| Number of FF evals: 14347
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1723: 148,0,0| Number of FF evals: 625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 12224,6413,0| Number of FF evals: 2908
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 1714,356,0| Number of FF evals: 2554
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 2048,495,0| Number of FF evals: 2437
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1724: 148,0,0| Number of FF evals: 625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 1495,669,0| Number of FF evals: 6044
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1720: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 123,0,0| Number of FF evals: 446
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1721: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 591,0,0| Number of FF evals: 280
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 726,0,0| Number of FF evals: 1508
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 1165,0,0| Number of FF evals: 749
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 2162,0,0| Number of FF evals: 928
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 210,0,0| Number of FF evals: 259
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 210,0,0| Number of FF evals: 137
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 689,29,4| Number of FF evals: 1793
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 591,0,0| Number of FF evals: 389
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 1646,1090,0| Number of FF evals: 5475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 49847,44036,0| Number of FF evals: 12621
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 123,0,0| Number of FF evals: 603
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 3536,334,14| Number of FF evals: 2613
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 299,0,0| Number of FF evals: 452
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 299,0,0| Number of FF evals: 188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 210,0,0| Number of FF evals: 189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 5241,3353,0| Number of FF evals: 6367
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 2464,0,0| Number of FF evals: 845
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 3743,471,0| Number of FF evals: 2444
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 4050,2113,0| Number of FF evals: 5594
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 2718,0,0| Number of FF evals: 964
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 106,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 942,0,0| Number of FF evals: 745
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 952,0,0| Number of FF evals: 826
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 97,0,0| Number of FF evals: 859
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 466,197,0| Number of FF evals: 2350
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 2784,0,0| Number of FF evals: 1309
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 591,0,0| Number of FF evals: 758
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 241,0,0| Number of FF evals: 1358
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 3784,0,0| Number of FF evals: 1160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 696,0,0| Number of FF evals: 465
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 174: 1539,0,0| Number of FF evals: 1044
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getStaticSourceFile()Lcom/google/javascript/rhino/jstype/StaticSourceFile;: Line 1109: 123,0,0| Number of FF evals: 111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 1719,0,0| Number of FF evals: 633
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 173: 1062,0,0| Number of FF evals: 446
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 9558,9043,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 9879,9108,0| Number of FF evals: 14347
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getStaticSourceFile()Lcom/google/javascript/rhino/jstype/StaticSourceFile;: root-Branch: 123,0,0| Number of FF evals: 1673
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 404,0,0| Number of FF evals: 1311
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: Line 2351: 4320,0,0| Number of FF evals: 1304
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 591,0,0| Number of FF evals: 527
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 726,0,0| Number of FF evals: 1074
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 7967,7159,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 8826,7679,2973| Number of FF evals: 13223
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - false: 123,0,0| Number of FF evals: 289
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 986,188,0| Number of FF evals: 1908
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 814,0,0| Number of FF evals: 482
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 13034,11542,0| Number of FF evals: 11920
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 4237,1050,0| Number of FF evals: 3572
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 535,15,0| Number of FF evals: 1589
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 26,0,0| Number of FF evals: 130
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 5858,4404,0| Number of FF evals: 6206
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 123,0,0| Number of FF evals: 1574
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - false: 43,0,0| Number of FF evals: 366
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 1751,1233,0| Number of FF evals: 9275
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 1719,0,0| Number of FF evals: 813
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 934,0,0| Number of FF evals: 398
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 55789,49978,39446| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 7638,6527,102| Number of FF evals: 4118
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 28,0,0| Number of FF evals: 88
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 483,0,0| Number of FF evals: 432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 6202,5226,85| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 79,0,0| Number of FF evals: 515
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 2052,0,0| Number of FF evals: 1475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 2024,1782,447| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 3251,1151,0| Number of FF evals: 2746
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: root-Branch: 43,0,0| Number of FF evals: 617
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 920,497,93| Number of FF evals: 3016
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 2024,1782,447| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 1582,0,0| Number of FF evals: 626
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 4721,1469,0| Number of FF evals: 2912
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 6,0,0| Number of FF evals: 641
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 4287,3140,565| Number of FF evals: 8638
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 591,0,0| Number of FF evals: 762
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 123,0,0| Number of FF evals: 92
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 2464,0,0| Number of FF evals: 1712
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 9689,8480,0| Number of FF evals: 13964
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 591,0,0| Number of FF evals: 710
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 12224,6413,0| Number of FF evals: 3061
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 591,0,0| Number of FF evals: 842
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 9689,8480,0| Number of FF evals: 13964
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 25,0,0| Number of FF evals: 380
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 9689,8480,0| Number of FF evals: 13964
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 2020,467,0| Number of FF evals: 2284
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 738,0,0| Number of FF evals: 1298
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 9689,8480,0| Number of FF evals: 13964
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 22835,17024,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 9689,8480,0| Number of FF evals: 13964
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 9689,8480,0| Number of FF evals: 13964
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 2464,0,0| Number of FF evals: 815
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 210,0,0| Number of FF evals: 159
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 106,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 112,0,0| Number of FF evals: 503
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 591,0,0| Number of FF evals: 313
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 566,112,27| Number of FF evals: 1930
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 3278,0,0| Number of FF evals: 1030
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 4739,4022,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 4739,4022,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1017: 35,0,0| Number of FF evals: 194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 13483,12040,30| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 66,0,0| Number of FF evals: 934
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1025: 33,0,0| Number of FF evals: 194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 696,0,0| Number of FF evals: 396
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: root-Branch: 3784,0,0| Number of FF evals: 1404
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 28,0,0| Number of FF evals: 161
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - false: 591,0,0| Number of FF evals: 939
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - false: 6,0,0| Number of FF evals: 726
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 9454,8294,0| Number of FF evals: 13965
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 51914,46103,0| Number of FF evals: 13208
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 696,0,0| Number of FF evals: 362
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 591,0,0| Number of FF evals: 304
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 377,0,0| Number of FF evals: 832
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 591,0,0| Number of FF evals: 765
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 55789,49978,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 696,0,0| Number of FF evals: 331
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 1303,1095,10| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 696,0,0| Number of FF evals: 331
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 2784,0,0| Number of FF evals: 1021
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 2717,0,0| Number of FF evals: 976
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getCharno()I: root-Branch: 210,0,0| Number of FF evals: 450
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 2464,0,0| Number of FF evals: 916
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 1187,401,1| Number of FF evals: 5261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 1303,1095,10| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 210,0,0| Number of FF evals: 335
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 4993,4712,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 299,0,0| Number of FF evals: 181
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1103: 123,0,0| Number of FF evals: 111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 299,0,0| Number of FF evals: 181
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 210,0,0| Number of FF evals: 139
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 696,0,0| Number of FF evals: 331
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 66,0,0| Number of FF evals: 334
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 696,0,0| Number of FF evals: 344
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1104: 123,0,0| Number of FF evals: 111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 6395,584,0| Number of FF evals: 1753
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 391,0,0| Number of FF evals: 217
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 781,0,0| Number of FF evals: 390
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 934,0,0| Number of FF evals: 501
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 138,0,0| Number of FF evals: 316
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 1929,1378,0| Number of FF evals: 6962
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 1520,56,0| Number of FF evals: 1790
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 8377,7206,253| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 188,0,0| Number of FF evals: 488
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 1801,1250,0| Number of FF evals: 6263
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 1165,0,0| Number of FF evals: 693
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 11308,7407,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 1165,0,0| Number of FF evals: 693
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 3278,0,0| Number of FF evals: 1348
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 210,0,0| Number of FF evals: 138
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: root-Branch: 814,0,0| Number of FF evals: 466
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 1007,0,0| Number of FF evals: 838
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 28,0,0| Number of FF evals: 163
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 1477,0,0| Number of FF evals: 1601
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 591,0,0| Number of FF evals: 299
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 210,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - false: 123,0,0| Number of FF evals: 635
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 689,29,4| Number of FF evals: 1793
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 696,0,0| Number of FF evals: 428
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 6143,5187,46| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 8750,7570,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 1822,0,0| Number of FF evals: 837
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 664,0,0| Number of FF evals: 712
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 5626,0,0| Number of FF evals: 1579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 696,0,0| Number of FF evals: 326
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: Line 214: 391,0,0| Number of FF evals: 211
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 2055,1831,302| Number of FF evals: 11100
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 790,579,116| Number of FF evals: 9658
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 2620,2069,0| Number of FF evals: 11106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 570,359,55| Number of FF evals: 6005
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 17062,13626,0| Number of FF evals: 12237
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 20562,18893,0| Number of FF evals: 12094
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - false: 299,0,0| Number of FF evals: 467
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 1688,1162,0| Number of FF evals: 7734
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 814,0,0| Number of FF evals: 804
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 29095,27294,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 123,0,0| Number of FF evals: 87
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 29095,27294,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 2105,1333,64| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 2024,1782,438| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 740,0,0| Number of FF evals: 757
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 591,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 1863,0,0| Number of FF evals: 677
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 43,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 8015,7191,32| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 696,0,0| Number of FF evals: 355
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 696,0,0| Number of FF evals: 355
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 696,0,0| Number of FF evals: 355
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLength()I: root-Branch: 696,0,0| Number of FF evals: 475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 299,0,0| Number of FF evals: 161
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 696,0,0| Number of FF evals: 355
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 1281,1087,10| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setType(I)V: Line 531: 123,0,0| Number of FF evals: 117
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setType(I)V: Line 530: 123,0,0| Number of FF evals: 117
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 1719,0,0| Number of FF evals: 1146
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 2551,114,0| Number of FF evals: 1931
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 16163,12909,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 591,0,0| Number of FF evals: 842
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 3784,0,0| Number of FF evals: 1567
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 123,0,0| Number of FF evals: 117
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 2944,0,0| Number of FF evals: 993
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 4793,3219,0| Number of FF evals: 7225
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 1517: 210,0,0| Number of FF evals: 137
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 290,0,0| Number of FF evals: 770
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 1719,0,0| Number of FF evals: 643
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 1719,0,0| Number of FF evals: 643
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 2709,195,0| Number of FF evals: 1716
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 5343,1288,0| Number of FF evals: 6084
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 1719,0,0| Number of FF evals: 643
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1128: 696,0,0| Number of FF evals: 342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1127: 696,0,0| Number of FF evals: 342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 591,0,0| Number of FF evals: 735
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1446: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 381,0,0| Number of FF evals: 1111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 734,0,0| Number of FF evals: 1225
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 1190,0,0| Number of FF evals: 711
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 151,0,0| Number of FF evals: 1367
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 4578,3981,0| Number of FF evals: 5155
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 1234,448,0| Number of FF evals: 5886
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 622: 299,0,0| Number of FF evals: 386
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 469,240,4| Number of FF evals: 3272
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 287,0,0| Number of FF evals: 380
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 287,0,0| Number of FF evals: 380
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 287,0,0| Number of FF evals: 380
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 624,27,0| Number of FF evals: 1764
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 287,0,0| Number of FF evals: 380
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 1206,420,3| Number of FF evals: 5022
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 287,0,0| Number of FF evals: 380
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 591,0,0| Number of FF evals: 765
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 36,0,0| Number of FF evals: 256
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 138,0,0| Number of FF evals: 863
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 29095,27294,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 119,0,0| Number of FF evals: 305
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 6395,584,0| Number of FF evals: 1713
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 1528,756,15| Number of FF evals: 10156
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 29095,27294,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 591,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 29095,27294,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 29095,27294,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 6423,4407,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 1476,305,26| Number of FF evals: 1888
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 29095,27294,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 29095,27294,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 210,0,0| Number of FF evals: 189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 29095,27294,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 1582,0,0| Number of FF evals: 1041
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: root-Branch: 123,0,0| Number of FF evals: 499
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 29095,27294,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 29095,27294,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - true: 151,0,0| Number of FF evals: 1367
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 591,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 9903,8578,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 210,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1706: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 483,0,0| Number of FF evals: 245
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 215,0,0| Number of FF evals: 307
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 113,0,0| Number of FF evals: 203
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1703: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 215,0,0| Number of FF evals: 307
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 6095,5261,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1709: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1708: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1707: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1713: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1712: 210,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLength()I: Line 1132: 696,0,0| Number of FF evals: 344
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 6095,5261,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 9911,8197,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 49847,44036,0| Number of FF evals: 12621
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 10048,8308,111| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 934,0,0| Number of FF evals: 400
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - true: 210,0,0| Number of FF evals: 367
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - false: 299,0,0| Number of FF evals: 490
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 294,0,0| Number of FF evals: 311
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 1719,0,0| Number of FF evals: 833
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 15609,14454,2| Number of FF evals: 6689
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 6997,4534,0| Number of FF evals: 10375
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 6132,5918,1| Number of FF evals: 14348
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 1582,0,0| Number of FF evals: 592
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 299,0,0| Number of FF evals: 194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 934,0,0| Number of FF evals: 807
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 9832,8948,2636| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 55789,49978,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 391,0,0| Number of FF evals: 231
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 814,0,0| Number of FF evals: 624
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 9832,8948,2630| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: Line 889: 2784,0,0| Number of FF evals: 929
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 11777,10435,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 19560,15963,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 1582,0,0| Number of FF evals: 625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 3491,255,0| Number of FF evals: 1971
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 740,0,0| Number of FF evals: 848
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 8552,2741,0| Number of FF evals: 2170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 2464,0,0| Number of FF evals: 1297
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 8552,2741,0| Number of FF evals: 2170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 3154,2626,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 147,0,0| Number of FF evals: 469
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 591,0,0| Number of FF evals: 745
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 3148,1141,0| Number of FF evals: 2708
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 1863,0,0| Number of FF evals: 975
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 814,0,0| Number of FF evals: 875
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 2784,0,0| Number of FF evals: 900
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 4676,4167,120| Number of FF evals: 13208
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 2784,0,0| Number of FF evals: 900
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 934,0,0| Number of FF evals: 430
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 682,0,0| Number of FF evals: 685
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 2463,0,0| Number of FF evals: 1279
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 299,0,0| Number of FF evals: 344
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 1353,1191,2| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 210,0,0| Number of FF evals: 153
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 11042,7606,0| Number of FF evals: 6450
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 299,0,0| Number of FF evals: 181
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 1822,0,0| Number of FF evals: 829
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 11751,10241,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 1582,0,0| Number of FF evals: 656
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - true: 6,0,0| Number of FF evals: 726
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 6971,1160,0| Number of FF evals: 2100
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 13103,8587,0| Number of FF evals: 7510
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 3611,0,0| Number of FF evals: 1432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 21532,15721,0| Number of FF evals: 14029
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLocalResultCall()Z: root-Branch: 299,0,0| Number of FF evals: 311
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setType(I)V: root-Branch: 123,0,0| Number of FF evals: 838
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 591,0,0| Number of FF evals: 652
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 1719,0,0| Number of FF evals: 643
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 466: 212,0,0| Number of FF evals: 194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 14445,12087,0| Number of FF evals: 13818
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 1484,956,0| Number of FF evals: 3868
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 210,0,0| Number of FF evals: 137
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 123,0,0| Number of FF evals: 117
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 1719,0,0| Number of FF evals: 643
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 8868,5311,0| Number of FF evals: 6034
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 14445,12087,0| Number of FF evals: 13818
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 19247,18572,24| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 1719,0,0| Number of FF evals: 884
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 591,0,0| Number of FF evals: 357
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 467: 212,0,0| Number of FF evals: 194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 468: 212,0,0| Number of FF evals: 194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 9832,8948,2638| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 6567,5519,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 591,0,0| Number of FF evals: 745
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 858,72,0| Number of FF evals: 2114
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 123,0,0| Number of FF evals: 612
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 837: 123,0,0| Number of FF evals: 100
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 123,0,0| Number of FF evals: 612
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 1012,226,0| Number of FF evals: 2967
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 838: 123,0,0| Number of FF evals: 100
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 2944,0,0| Number of FF evals: 961
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 10911,9883,0| Number of FF evals: 11603
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 55789,49978,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 2944,0,0| Number of FF evals: 961
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 591,0,0| Number of FF evals: 709
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1818: 591,0,0| Number of FF evals: 312
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1813: 591,0,0| Number of FF evals: 312
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 20141,16967,0| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 210,0,0| Number of FF evals: 167
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 794,22,0| Number of FF evals: 1867
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 591,0,0| Number of FF evals: 754
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1809: 591,0,0| Number of FF evals: 312
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 55789,49978,0| Number of FF evals: 14337
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 1219,448,7| Number of FF evals: 7102
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 591,0,0| Number of FF evals: 766
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 210,0,0| Number of FF evals: 943
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 10911,9883,0| Number of FF evals: 11603
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 4,0,0| Number of FF evals: 253
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 1399,923,0| Number of FF evals: 3868
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 55789,49978,39446| Number of FF evals: 14342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - false: 97,0,0| Number of FF evals: 395
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 3338,2678,8| Number of FF evals: 14174
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 193,0,0| Number of FF evals: 570
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 934,0,0| Number of FF evals: 435
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - true: 25,0,0| Number of FF evals: 1489
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 2944,0,0| Number of FF evals: 947
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 123,0,0| Number of FF evals: 664
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: root-Branch: 210,0,0| Number of FF evals: 1303
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 299,0,0| Number of FF evals: 457
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 299,0,0| Number of FF evals: 244
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 814,0,0| Number of FF evals: 369
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 3483,262,0| Number of FF evals: 1753
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 3092,1989,0| Number of FF evals: 7766
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 7615,4516,0| Number of FF evals: 3012
* Search finished after 605s and 336 generations, 173757 statements, best individual has fitness: 2990.0
* Minimizing test suite
[MASTER] 13:18:36.944 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 853
* Number of covered goals: 782
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 714
* Number of covered goals: 607
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 100
* Number of covered goals: 100
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 466
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 46%
* Total number of goals: 4536
* Number of covered goals: 2107
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 79%
* Total number of goals: 714
* Number of covered goals: 567
* Generated 699 tests with total length 10737
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 13:19:39.966 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.66775% of time used, but only 47/699 tests minimized), falling back to using all assertions
[MASTER] 13:19:59.915 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 13:20:10.182 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 10 seconds more than allowed.
[MASTER] 13:20:13.812 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_50_1628256013672/com/google/javascript/rhino/Node_50_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_50_1628256013672/com/google/javascript/rhino/Node_50_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:13.812 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:13.812 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:13.816 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 705
[MASTER] 13:20:13.819 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_50_1628256013672/com/google/javascript/rhino/Node_50_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:13 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.io.FileDescriptor;
13: import java.io.IOException;
14: import java.io.OutputStreamWriter;
15: import java.nio.charset.Charset;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_50_tmp__ESTest extends Node_50_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       int int0 = 4;
27:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
28:       assertNotNull(node_SideEffectFlags0);
29:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
30:       assertEquals(4, node_SideEffectFlags0.valueOf());
31:       
32:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
33:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
34:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
35:       assertNotNull(node_SideEffectFlags1);
36:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
37:       assertEquals(0, node_SideEffectFlags0.valueOf());
38:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
39:       assertEquals(0, node_SideEffectFlags1.valueOf());
40:       
41:       node_SideEffectFlags1.clearSideEffectFlags();
42:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
43:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
44:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
45:       assertEquals(15, node_SideEffectFlags0.valueOf());
46:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
47:       assertEquals(15, node_SideEffectFlags1.valueOf());
48:       
49:       node_SideEffectFlags0.clearSideEffectFlags();
50:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
51:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
52:       assertEquals(15, node_SideEffectFlags0.valueOf());
53:       
54:       node_SideEffectFlags0.clearSideEffectFlags();
55:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
56:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
57:       assertEquals(15, node_SideEffectFlags0.valueOf());
58:       
59:       node_SideEffectFlags0.clearSideEffectFlags();
60:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
61:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
62:       assertEquals(15, node_SideEffectFlags0.valueOf());
63:       
64:       Node[] nodeArray0 = new Node[0];
65:       Node node0 = new Node(38, nodeArray0, 2744, 147);
66:       assertEquals(0, nodeArray0.length);
67:       assertNotNull(node0);
68:       assertFalse(node0.isTry());
69:       assertFalse(node0.isVoid());
70:       assertFalse(node0.isFunction());
71:       assertFalse(node0.isDefaultCase());
72:       assertFalse(node0.isArrayLit());
73:       assertFalse(node0.isFor());
74:       assertFalse(node0.isCatch());
75:       assertEquals(147, node0.getCharno());
76:       assertEquals(11239571, node0.getSourcePosition());
77:       assertFalse(node0.isRegExp());
78:       assertEquals(0, node0.getChildCount());
79:       assertFalse(node0.isParamList());
80:       assertFalse(node0.isStringKey());
81:       assertFalse(node0.isString());
82:       assertFalse(node0.isGetterDef());
83:       assertFalse(node0.isDebugger());
84:       assertFalse(node0.isBlock());
85:       assertFalse(node0.isInc());
86:       assertFalse(node0.isCase());
87:       assertFalse(node0.isFalse());
88:       assertFalse(node0.isThrow());
89:       assertFalse(node0.hasMoreThanOneChild());
90:       assertFalse(node0.isContinue());
91:       assertFalse(node0.isHook());
92:       assertFalse(node0.isThis());
93:       assertFalse(node0.isIn());
94:       assertFalse(node0.isInstanceOf());
95:       assertFalse(node0.isSetterDef());
96:       assertFalse(node0.isIf());
97:       assertFalse(node0.isNE());
98:       assertTrue(node0.isName());
99:       assertFalse(node0.isExprResult());
100:       assertFalse(node0.hasOneChild());
101:       assertFalse(node0.isScript());
102:       assertFalse(node0.isGetElem());
103:       assertFalse(node0.isAssign());
104:       assertFalse(node0.isCast());
105:       assertFalse(node0.isWith());
106:       assertFalse(node0.isDec());
107:       assertFalse(node0.isTypeOf());
108:       assertEquals(38, node0.getType());
109:       assertFalse(node0.hasChildren());
110:       assertFalse(node0.isGetProp());
111:       assertEquals(2744, node0.getLineno());
112:       assertFalse(node0.isLabelName());
113:       assertFalse(node0.isNot());
114:       assertFalse(node0.isObjectLit());
115:       assertFalse(node0.isAnd());
116:       assertFalse(node0.isNumber());
117:       assertFalse(node0.isNew());
118:       assertFalse(node0.isAdd());
119:       assertFalse(node0.isSwitch());
120:       assertFalse(node0.isDo());
121:       assertFalse(node0.isCall());
122:       assertFalse(node0.isWhile());
123:       assertFalse(node0.isVar());
124:       assertFalse(node0.isReturn());
125:       assertFalse(node0.isComma());
126:       assertFalse(node0.isLabel());
127:       assertFalse(node0.isOr());
128:       assertFalse(node0.isAssignAdd());
129:       assertFalse(node0.isDelProp());
130:       assertFalse(node0.isBreak());
131:       assertFalse(node0.isEmpty());
132:       assertFalse(node0.isNull());
133:       assertFalse(node0.isTrue());
134:       assertEquals(51, Node.STATIC_SOURCE_FILE);
135:       assertEquals(12, Node.COLUMN_BITS);
136:       assertEquals(32, Node.INCRDECR_PROP);
137:       assertEquals(46, Node.IS_NAMESPACE);
138:       assertEquals(30, Node.VAR_ARGS_NAME);
139:       assertEquals(56, Node.CHANGE_TIME);
140:       assertEquals(2, Node.POST_FLAG);
141:       assertEquals(49, Node.DIRECT_EVAL);
142:       assertEquals(37, Node.OPT_ARG_NAME);
143:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
144:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
145:       assertEquals(50, Node.FREE_CALL);
146:       assertEquals(54, Node.SLASH_V);
147:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
148:       assertEquals(1, Node.DECR_FLAG);
149:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
150:       assertEquals(55, Node.INFERRED_FUNCTION);
151:       assertEquals(4095, Node.COLUMN_MASK);
152:       assertEquals(43, Node.IS_CONSTANT_NAME);
153:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
154:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
155:       assertEquals(48, Node.DIRECTIVES);
156:       assertEquals(40, Node.ORIGINALNAME_PROP);
157:       assertEquals(57, Node.REFLECTED_OBJECT);
158:       assertEquals(52, Node.LENGTH);
159:       assertEquals(15, Node.NO_SIDE_EFFECTS);
160:       assertEquals(36, Node.QUOTED_PROP);
161:       assertEquals(47, Node.IS_DISPATCHER);
162:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
163:       assertEquals(8, Node.FLAG_NO_THROWS);
164:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
165:       assertEquals(57, Node.LAST_PROP);
166:       assertEquals(53, Node.INPUT_ID);
167:       assertEquals(29, Node.JSDOC_INFO_PROP);
168:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
169:       assertEquals(39, Node.EMPTY_BLOCK);
170:       
171:       Node node1 = new Node(38, node0, 51, 446);
172:       assertFalse(node1.equals((Object)node0));
173:       assertEquals(0, nodeArray0.length);
174:       assertNotNull(node1);
175:       assertFalse(node0.isTry());
176:       assertFalse(node0.isVoid());
177:       assertFalse(node0.isFunction());
178:       assertFalse(node0.isDefaultCase());
179:       assertFalse(node0.isArrayLit());
180:       assertFalse(node0.isFor());
181:       assertFalse(node0.isCatch());
182:       assertEquals(147, node0.getCharno());
183:       assertEquals(11239571, node0.getSourcePosition());
184:       assertFalse(node0.isRegExp());
185:       assertEquals(0, node0.getChildCount());
186:       assertFalse(node0.isParamList());
187:       assertFalse(node0.isStringKey());
188:       assertFalse(node0.isString());
189:       assertFalse(node0.isGetterDef());
190:       assertFalse(node0.isDebugger());
191:       assertFalse(node0.isBlock());
192:       assertFalse(node0.isInc());
193:       assertFalse(node0.isCase());
194:       assertFalse(node0.isFalse());
195:       assertFalse(node0.isThrow());
196:       assertFalse(node0.hasMoreThanOneChild());
197:       assertFalse(node0.isContinue());
198:       assertFalse(node0.isHook());
199:       assertFalse(node0.isThis());
200:       assertFalse(node0.isIn());
201:       assertFalse(node0.isInstanceOf());
202:       assertFalse(node0.isSetterDef());
203:       assertFalse(node0.isIf());
204:       assertFalse(node0.isNE());
205:       assertTrue(node0.isName());
206:       assertFalse(node0.isExprResult());
207:       assertFalse(node0.hasOneChild());
208:       assertFalse(node0.isScript());
209:       assertFalse(node0.isGetElem());
210:       assertFalse(node0.isAssign());
211:       assertFalse(node0.isCast());
212:       assertFalse(node0.isWith());
213:       assertFalse(node0.isDec());
214:       assertFalse(node0.isTypeOf());
215:       assertEquals(38, node0.getType());
216:       assertFalse(node0.hasChildren());
217:       assertFalse(node0.isGetProp());
218:       assertEquals(2744, node0.getLineno());
219:       assertFalse(node0.isLabelName());
220:       assertFalse(node0.isNot());
221:       assertFalse(node0.isObjectLit());
222:       assertFalse(node0.isAnd());
223:       assertFalse(node0.isNumber());
224:       assertFalse(node0.isNew());
225:       assertFalse(node0.isAdd());
226:       assertFalse(node0.isSwitch());
227:       assertFalse(node0.isDo());
228:       assertFalse(node0.isCall());
229:       assertFalse(node0.isWhile());
230:       assertFalse(node0.isVar());
231:       assertFalse(node0.isReturn());
232:       assertFalse(node0.isComma());
233:       assertFalse(node0.isLabel());
234:       assertFalse(node0.isOr());
235:       assertFalse(node0.isAssignAdd());
236:       assertFalse(node0.isDelProp());
237:       assertFalse(node0.isBreak());
238:       assertFalse(node0.isEmpty());
239:       assertFalse(node0.isNull());
240:       assertFalse(node0.isTrue());
241:       assertFalse(node1.isCatch());
242:       assertFalse(node1.isRegExp());
243:       assertFalse(node1.isSetterDef());
244:       assertFalse(node1.isTry());
245:       assertFalse(node1.isDefaultCase());
246:       assertFalse(node1.isCall());
247:       assertFalse(node1.isAdd());
248:       assertFalse(node1.isEmpty());
249:       assertFalse(node1.isNull());
250:       assertFalse(node1.isNE());
251:       assertFalse(node1.isTrue());
252:       assertFalse(node1.isVoid());
253:       assertFalse(node1.isDelProp());
254:       assertFalse(node1.isIf());
255:       assertFalse(node1.isReturn());
256:       assertFalse(node1.isString());
257:       assertFalse(node1.isContinue());
258:       assertFalse(node1.isIn());
259:       assertFalse(node1.isTypeOf());
260:       assertFalse(node1.isDec());
261:       assertTrue(node1.hasOneChild());
262:       assertFalse(node1.isInc());
263:       assertFalse(node1.isWhile());
264:       assertFalse(node1.isCast());
265:       assertEquals(209342, node1.getSourcePosition());
266:       assertFalse(node1.isFunction());
267:       assertFalse(node1.isFalse());
268:       assertFalse(node1.isDebugger());
269:       assertFalse(node1.isAnd());
270:       assertFalse(node1.isInstanceOf());
271:       assertFalse(node1.isNot());
272:       assertFalse(node1.isObjectLit());
273:       assertFalse(node1.isWith());
274:       assertFalse(node1.isScript());
275:       assertFalse(node1.isComma());
276:       assertEquals(38, node1.getType());
277:       assertFalse(node1.isThis());
278:       assertFalse(node1.isGetProp());
279:       assertFalse(node1.isThrow());
280:       assertFalse(node1.isGetElem());
281:       assertFalse(node1.isHook());
282:       assertFalse(node1.isAssign());
283:       assertEquals(446, node1.getCharno());
284:       assertFalse(node1.isExprResult());
285:       assertFalse(node1.isBreak());
286:       assertTrue(node1.isName());
287:       assertEquals(1, node1.getChildCount());
288:       assertTrue(node1.hasChildren());
289:       assertFalse(node1.isLabel());
290:       assertFalse(node1.isOr());
291:       assertFalse(node1.hasMoreThanOneChild());
292:       assertEquals(51, node1.getLineno());
293:       assertFalse(node1.isAssignAdd());
294:       assertFalse(node1.isBlock());
295:       assertFalse(node1.isCase());
296:       assertFalse(node1.isFor());
297:       assertFalse(node1.isNew());
298:       assertFalse(node1.isDo());
299:       assertFalse(node1.isVar());
300:       assertFalse(node1.isArrayLit());
301:       assertFalse(node1.isGetterDef());
302:       assertFalse(node1.isNumber());
303:       assertFalse(node1.isLabelName());
304:       assertFalse(node1.isStringKey());
305:       assertFalse(node1.isParamList());
306:       assertFalse(node1.isSwitch());
307:       assertEquals(51, Node.STATIC_SOURCE_FILE);
308:       assertEquals(12, Node.COLUMN_BITS);
309:       assertEquals(32, Node.INCRDECR_PROP);
310:       assertEquals(46, Node.IS_NAMESPACE);
311:       assertEquals(30, Node.VAR_ARGS_NAME);
312:       assertEquals(56, Node.CHANGE_TIME);
313:       assertEquals(2, Node.POST_FLAG);
314:       assertEquals(49, Node.DIRECT_EVAL);
315:       assertEquals(37, Node.OPT_ARG_NAME);
316:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
317:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
318:       assertEquals(50, Node.FREE_CALL);
319:       assertEquals(54, Node.SLASH_V);
320:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
321:       assertEquals(1, Node.DECR_FLAG);
322:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
323:       assertEquals(55, Node.INFERRED_FUNCTION);
324:       assertEquals(4095, Node.COLUMN_MASK);
325:       assertEquals(43, Node.IS_CONSTANT_NAME);
326:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
327:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
328:       assertEquals(48, Node.DIRECTIVES);
329:       assertEquals(40, Node.ORIGINALNAME_PROP);
330:       assertEquals(57, Node.REFLECTED_OBJECT);
331:       assertEquals(52, Node.LENGTH);
332:       assertEquals(15, Node.NO_SIDE_EFFECTS);
333:       assertEquals(36, Node.QUOTED_PROP);
334:       assertEquals(47, Node.IS_DISPATCHER);
335:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
336:       assertEquals(8, Node.FLAG_NO_THROWS);
337:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
338:       assertEquals(57, Node.LAST_PROP);
339:       assertEquals(53, Node.INPUT_ID);
340:       assertEquals(29, Node.JSDOC_INFO_PROP);
341:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
342:       assertEquals(39, Node.EMPTY_BLOCK);
343:       assertEquals(29, Node.JSDOC_INFO_PROP);
344:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
345:       assertEquals(47, Node.IS_DISPATCHER);
346:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
347:       assertEquals(56, Node.CHANGE_TIME);
348:       assertEquals(37, Node.OPT_ARG_NAME);
349:       assertEquals(2, Node.POST_FLAG);
350:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
351:       assertEquals(49, Node.DIRECT_EVAL);
352:       assertEquals(30, Node.VAR_ARGS_NAME);
353:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
354:       assertEquals(15, Node.NO_SIDE_EFFECTS);
355:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
356:       assertEquals(57, Node.LAST_PROP);
357:       assertEquals(53, Node.INPUT_ID);
358:       assertEquals(39, Node.EMPTY_BLOCK);
359:       assertEquals(57, Node.REFLECTED_OBJECT);
360:       assertEquals(55, Node.INFERRED_FUNCTION);
361:       assertEquals(36, Node.QUOTED_PROP);
362:       assertEquals(52, Node.LENGTH);
363:       assertEquals(8, Node.FLAG_NO_THROWS);
364:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
365:       assertEquals(50, Node.FREE_CALL);
366:       assertEquals(40, Node.ORIGINALNAME_PROP);
367:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
368:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
369:       assertEquals(48, Node.DIRECTIVES);
370:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
371:       assertEquals(4095, Node.COLUMN_MASK);
372:       assertEquals(1, Node.DECR_FLAG);
373:       assertEquals(12, Node.COLUMN_BITS);
374:       assertEquals(43, Node.IS_CONSTANT_NAME);
375:       assertEquals(32, Node.INCRDECR_PROP);
376:       assertEquals(46, Node.IS_NAMESPACE);
377:       assertEquals(54, Node.SLASH_V);
378:       assertEquals(51, Node.STATIC_SOURCE_FILE);
379:       
380:       boolean boolean0 = node1.wasEmptyNode();
381:       assertFalse(node0.equals((Object)node1));
382:       assertFalse(node1.equals((Object)node0));
383:       assertNotSame(node0, node1);
384:       assertNotSame(node1, node0);
385:       assertEquals(0, nodeArray0.length);
386:       assertFalse(node0.isTry());
387:       assertFalse(node0.isVoid());
388:       assertFalse(node0.isFunction());
389:       assertFalse(node0.isDefaultCase());
390:       assertFalse(node0.isArrayLit());
391:       assertFalse(node0.isFor());
392:       assertFalse(node0.isCatch());
393:       assertEquals(147, node0.getCharno());
394:       assertEquals(11239571, node0.getSourcePosition());
395:       assertFalse(node0.isRegExp());
396:       assertEquals(0, node0.getChildCount());
397:       assertFalse(node0.isParamList());
398:       assertFalse(node0.isStringKey());
399:       assertFalse(node0.isString());
400:       assertFalse(node0.isGetterDef());
401:       assertFalse(node0.isDebugger());
402:       assertFalse(node0.isBlock());
403:       assertFalse(node0.isInc());
404:       assertFalse(node0.isCase());
405:       assertFalse(node0.isFalse());
406:       assertFalse(node0.isThrow());
407:       assertFalse(node0.hasMoreThanOneChild());
408:       assertFalse(node0.isContinue());
409:       assertFalse(node0.isHook());
410:       assertFalse(node0.isThis());
411:       assertFalse(node0.isIn());
412:       assertFalse(node0.isInstanceOf());
413:       assertFalse(node0.isSetterDef());
414:       assertFalse(node0.isIf());
415:       assertFalse(node0.isNE());
416:       assertTrue(node0.isName());
417:       assertFalse(node0.isExprResult());
418:       assertFalse(node0.hasOneChild());
419:       assertFalse(node0.isScript());
420:       assertFalse(node0.isGetElem());
421:       assertFalse(node0.isAssign());
422:       assertFalse(node0.isCast());
423:       assertFalse(node0.isWith());
424:       assertFalse(node0.isDec());
425:       assertFalse(node0.isTypeOf());
426:       assertEquals(38, node0.getType());
427:       assertFalse(node0.hasChildren());
428:       assertFalse(node0.isGetProp());
429:       assertEquals(2744, node0.getLineno());
430:       assertFalse(node0.isLabelName());
431:       assertFalse(node0.isNot());
432:       assertFalse(node0.isObjectLit());
433:       assertFalse(node0.isAnd());
434:       assertFalse(node0.isNumber());
435:       assertFalse(node0.isNew());
436:       assertFalse(node0.isAdd());
437:       assertFalse(node0.isSwitch());
438:       assertFalse(node0.isDo());
439:       assertFalse(node0.isCall());
440:       assertFalse(node0.isWhile());
441:       assertFalse(node0.isVar());
442:       assertFalse(node0.isReturn());
443:       assertFalse(node0.isComma());
444:       assertFalse(node0.isLabel());
445:       assertFalse(node0.isOr());
446:       assertFalse(node0.isAssignAdd());
447:       assertFalse(node0.isDelProp());
448:       assertFalse(node0.isBreak());
449:       assertFalse(node0.isEmpty());
450:       assertFalse(node0.isNull());
451:       assertFalse(node0.isTrue());
452:       assertFalse(node1.isCatch());
453:       assertFalse(node1.isRegExp());
454:       assertFalse(node1.isSetterDef());
455:       assertFalse(node1.isTry());
456:       assertFalse(node1.isDefaultCase());
457:       assertFalse(node1.isCall());
458:       assertFalse(node1.isAdd());
459:       assertFalse(node1.isEmpty());
460:       assertFalse(node1.isNull());
461:       assertFalse(node1.isNE());
462:       assertFalse(node1.isTrue());
463:       assertFalse(node1.isVoid());
464:       assertFalse(node1.isDelProp());
465:       assertFalse(node1.isIf());
466:       assertFalse(node1.isReturn());
467:       assertFalse(node1.isString());
468:       assertFalse(node1.isContinue());
469:       assertFalse(node1.isIn());
470:       assertFalse(node1.isTypeOf());
471:       assertFalse(node1.isDec());
472:       assertTrue(node1.hasOneChild());
473:       assertFalse(node1.isInc());
474:       assertFalse(node1.isWhile());
475:       assertFalse(node1.isCast());
476:       assertEquals(209342, node1.getSourcePosition());
477:       assertFalse(node1.isFunction());
478:       assertFalse(node1.isFalse());
479:       assertFalse(node1.isDebugger());
480:       assertFalse(node1.isAnd());
481:       assertFalse(node1.isInstanceOf());
482:       assertFalse(node1.isNot());
483:       assertFalse(node1.isObjectLit());
484:       assertFalse(node1.isWith());
485:       assertFalse(node1.isScript());
486:       assertFalse(node1.isComma());
487:       assertEquals(38, node1.getType());
488:       assertFalse(node1.isThis());
489:       assertFalse(node1.isGetProp());
490:       assertFalse(node1.isThrow());
491:       assertFalse(node1.isGetElem());
492:       assertFalse(node1.isHook());
493:       assertFalse(node1.isAssign());
494:       assertEquals(446, node1.getCharno());
495:       assertFalse(node1.isExprResult());
496:       assertFalse(node1.isBreak());
497:       assertTrue(node1.isName());
498:       assertEquals(1, node1.getChildCount());
499:       assertTrue(node1.hasChildren());
500:       assertFalse(node1.isLabel());
501:       assertFalse(node1.isOr());
502:       assertFalse(node1.hasMoreThanOneChild());
503:       assertEquals(51, node1.getLineno());
504:       assertFalse(node1.isAssignAdd());
505:       assertFalse(node1.isBlock());
506:       assertFalse(node1.isCase());
507:       assertFalse(node1.isFor());
508:       assertFalse(node1.isNew());
509:       assertFalse(node1.isDo());
510:       assertFalse(node1.isVar());
511:       assertFalse(node1.isArrayLit());
512:       assertFalse(node1.isGetterDef());
513:       assertFalse(node1.isNumber());
514:       assertFalse(node1.isLabelName());
515:       assertFalse(node1.isStringKey());
516:       assertFalse(node1.isParamList());
517:       assertFalse(node1.isSwitch());
518:       assertFalse(boolean0);
519:       assertEquals(51, Node.STATIC_SOURCE_FILE);
520:       assertEquals(12, Node.COLUMN_BITS);
521:       assertEquals(32, Node.INCRDECR_PROP);
522:       assertEquals(46, Node.IS_NAMESPACE);
523:       assertEquals(30, Node.VAR_ARGS_NAME);
524:       assertEquals(56, Node.CHANGE_TIME);
525:       assertEquals(2, Node.POST_FLAG);
526:       assertEquals(49, Node.DIRECT_EVAL);
527:       assertEquals(37, Node.OPT_ARG_NAME);
528:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
529:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
530:       assertEquals(50, Node.FREE_CALL);
531:       assertEquals(54, Node.SLASH_V);
532:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
533:       assertEquals(1, Node.DECR_FLAG);
534:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
535:       assertEquals(55, Node.INFERRED_FUNCTION);
536:       assertEquals(4095, Node.COLUMN_MASK);
537:       assertEquals(43, Node.IS_CONSTANT_NAME);
538:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
539:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
540:       assertEquals(48, Node.DIRECTIVES);
541:       assertEquals(40, Node.ORIGINALNAME_PROP);
542:       assertEquals(57, Node.REFLECTED_OBJECT);
543:       assertEquals(52, Node.LENGTH);
544:       assertEquals(15, Node.NO_SIDE_EFFECTS);
545:       assertEquals(36, Node.QUOTED_PROP);
546:       assertEquals(47, Node.IS_DISPATCHER);
547:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
548:       assertEquals(8, Node.FLAG_NO_THROWS);
549:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
550:       assertEquals(57, Node.LAST_PROP);
551:       assertEquals(53, Node.INPUT_ID);
552:       assertEquals(29, Node.JSDOC_INFO_PROP);
553:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
554:       assertEquals(39, Node.EMPTY_BLOCK);
555:       assertEquals(29, Node.JSDOC_INFO_PROP);
556:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
557:       assertEquals(47, Node.IS_DISPATCHER);
558:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
559:       assertEquals(56, Node.CHANGE_TIME);
560:       assertEquals(37, Node.OPT_ARG_NAME);
561:       assertEquals(2, Node.POST_FLAG);
562:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
563:       assertEquals(49, Node.DIRECT_EVAL);
564:       assertEquals(30, Node.VAR_ARGS_NAME);
565:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
566:       assertEquals(15, Node.NO_SIDE_EFFECTS);
567:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
568:       assertEquals(57, Node.LAST_PROP);
569:       assertEquals(53, Node.INPUT_ID);
570:       assertEquals(39, Node.EMPTY_BLOCK);
571:       assertEquals(57, Node.REFLECTED_OBJECT);
572:       assertEquals(55, Node.INFERRED_FUNCTION);
573:       assertEquals(36, Node.QUOTED_PROP);
574:       assertEquals(52, Node.LENGTH);
575:       assertEquals(8, Node.FLAG_NO_THROWS);
576:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
577:       assertEquals(50, Node.FREE_CALL);
578:       assertEquals(40, Node.ORIGINALNAME_PROP);
579:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
580:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
581:       assertEquals(48, Node.DIRECTIVES);
582:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
583:       assertEquals(4095, Node.COLUMN_MASK);
584:       assertEquals(1, Node.DECR_FLAG);
585:       assertEquals(12, Node.COLUMN_BITS);
586:       assertEquals(43, Node.IS_CONSTANT_NAME);
587:       assertEquals(32, Node.INCRDECR_PROP);
588:       assertEquals(46, Node.IS_NAMESPACE);
589:       assertEquals(54, Node.SLASH_V);
590:       assertEquals(51, Node.STATIC_SOURCE_FILE);
591:       
592:       boolean boolean1 = node0.isNot();
593:       assertFalse(node0.equals((Object)node1));
594:       assertTrue(boolean1 == boolean0);
595:       assertNotSame(node0, node1);
596:       assertEquals(0, nodeArray0.length);
597:       assertFalse(node0.isTry());
598:       assertFalse(node0.isVoid());
599:       assertFalse(node0.isFunction());
600:       assertFalse(node0.isDefaultCase());
601:       assertFalse(node0.isArrayLit());
602:       assertFalse(node0.isFor());
603:       assertFalse(node0.isCatch());
604:       assertEquals(147, node0.getCharno());
605:       assertEquals(11239571, node0.getSourcePosition());
606:       assertFalse(node0.isRegExp());
607:       assertEquals(0, node0.getChildCount());
608:       assertFalse(node0.isParamList());
609:       assertFalse(node0.isStringKey());
610:       assertFalse(node0.isString());
611:       assertFalse(node0.isGetterDef());
612:       assertFalse(node0.isDebugger());
613:       assertFalse(node0.isBlock());
614:       assertFalse(node0.isInc());
615:       assertFalse(node0.isCase());
616:       assertFalse(node0.isFalse());
617:       assertFalse(node0.isThrow());
618:       assertFalse(node0.hasMoreThanOneChild());
619:       assertFalse(node0.isContinue());
620:       assertFalse(node0.isHook());
621:       assertFalse(node0.isThis());
622:       assertFalse(node0.isIn());
623:       assertFalse(node0.isInstanceOf());
624:       assertFalse(node0.isSetterDef());
625:       assertFalse(node0.isIf());
626:       assertFalse(node0.isNE());
627:       assertTrue(node0.isName());
628:       assertFalse(node0.isExprResult());
629:       assertFalse(node0.hasOneChild());
630:       assertFalse(node0.isScript());
631:       assertFalse(node0.isGetElem());
632:       assertFalse(node0.isAssign());
633:       assertFalse(node0.isCast());
634:       assertFalse(node0.isWith());
635:       assertFalse(node0.isDec());
636:       assertFalse(node0.isTypeOf());
637:       assertEquals(38, node0.getType());
638:       assertFalse(node0.hasChildren());
639:       assertFalse(node0.isGetProp());
640:       assertEquals(2744, node0.getLineno());
641:       assertFalse(node0.isLabelName());
642:       assertFalse(node0.isNot());
643:       assertFalse(node0.isObjectLit());
644:       assertFalse(node0.isAnd());
645:       assertFalse(node0.isNumber());
646:       assertFalse(node0.isNew());
647:       assertFalse(node0.isAdd());
648:       assertFalse(node0.isSwitch());
649:       assertFalse(node0.isDo());
650:       assertFalse(node0.isCall());
651:       assertFalse(node0.isWhile());
652:       assertFalse(node0.isVar());
653:       assertFalse(node0.isReturn());
654:       assertFalse(node0.isComma());
655:       assertFalse(node0.isLabel());
656:       assertFalse(node0.isOr());
657:       assertFalse(node0.isAssignAdd());
658:       assertFalse(node0.isDelProp());
659:       assertFalse(node0.isBreak());
660:       assertFalse(node0.isEmpty());
661:       assertFalse(node0.isNull());
662:       assertFalse(node0.isTrue());
663:       assertFalse(boolean1);
664:       assertEquals(51, Node.STATIC_SOURCE_FILE);
665:       assertEquals(12, Node.COLUMN_BITS);
666:       assertEquals(32, Node.INCRDECR_PROP);
667:       assertEquals(46, Node.IS_NAMESPACE);
668:       assertEquals(30, Node.VAR_ARGS_NAME);
669:       assertEquals(56, Node.CHANGE_TIME);
670:       assertEquals(2, Node.POST_FLAG);
671:       assertEquals(49, Node.DIRECT_EVAL);
672:       assertEquals(37, Node.OPT_ARG_NAME);
673:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
674:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
675:       assertEquals(50, Node.FREE_CALL);
676:       assertEquals(54, Node.SLASH_V);
677:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
678:       assertEquals(1, Node.DECR_FLAG);
679:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
680:       assertEquals(55, Node.INFERRED_FUNCTION);
681:       assertEquals(4095, Node.COLUMN_MASK);
682:       assertEquals(43, Node.IS_CONSTANT_NAME);
683:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
684:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
685:       assertEquals(48, Node.DIRECTIVES);
686:       assertEquals(40, Node.ORIGINALNAME_PROP);
687:       assertEquals(57, Node.REFLECTED_OBJECT);
688:       assertEquals(52, Node.LENGTH);
689:       assertEquals(15, Node.NO_SIDE_EFFECTS);
690:       assertEquals(36, Node.QUOTED_PROP);
691:       assertEquals(47, Node.IS_DISPATCHER);
692:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
693:       assertEquals(8, Node.FLAG_NO_THROWS);
694:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
695:       assertEquals(57, Node.LAST_PROP);
696:       assertEquals(53, Node.INPUT_ID);
697:       assertEquals(29, Node.JSDOC_INFO_PROP);
698:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
699:       assertEquals(39, Node.EMPTY_BLOCK);
700:       
701:       Iterable<Node> iterable0 = node0.children();
702:       assertFalse(node0.equals((Object)node1));
703:       assertNotSame(node0, node1);
704:       assertEquals(0, nodeArray0.length);
705:       assertFalse(iterable0.contains(node1));
706:       assertNotNull(iterable0);
707:       assertFalse(node0.isTry());
708:       assertFalse(node0.isVoid());
709:       assertFalse(node0.isFunction());
710:       assertFalse(node0.isDefaultCase());
711:       assertFalse(node0.isArrayLit());
712:       assertFalse(node0.isFor());
713:       assertFalse(node0.isCatch());
714:       assertEquals(147, node0.getCharno());
715:       assertEquals(11239571, node0.getSourcePosition());
716:       assertFalse(node0.isRegExp());
717:       assertEquals(0, node0.getChildCount());
718:       assertFalse(node0.isParamList());
719:       assertFalse(node0.isStringKey());
720:       assertFalse(node0.isString());
721:       assertFalse(node0.isGetterDef());
722:       assertFalse(node0.isDebugger());
723:       assertFalse(node0.isBlock());
724:       assertFalse(node0.isInc());
725:       assertFalse(node0.isCase());
726:       assertFalse(node0.isFalse());
727:       assertFalse(node0.isThrow());
728:       assertFalse(node0.hasMoreThanOneChild());
729:       assertFalse(node0.isContinue());
730:       assertFalse(node0.isHook());
731:       assertFalse(node0.isThis());
732:       assertFalse(node0.isIn());
733:       assertFalse(node0.isInstanceOf());
734:       assertFalse(node0.isSetterDef());
735:       assertFalse(node0.isIf());
736:       assertFalse(node0.isNE());
737:       assertTrue(node0.isName());
738:       assertFalse(node0.isExprResult());
739:       assertFalse(node0.hasOneChild());
740:       assertFalse(node0.isScript());
741:       assertFalse(node0.isGetElem());
742:       assertFalse(node0.isAssign());
743:       assertFalse(node0.isCast());
744:       assertFalse(node0.isWith());
745:       assertFalse(node0.isDec());
746:       assertFalse(node0.isTypeOf());
747:       assertEquals(38, node0.getType());
748:       assertFalse(node0.hasChildren());
749:       assertFalse(node0.isGetProp());
750:       assertEquals(2744, node0.getLineno());
751:       assertFalse(node0.isLabelName());
752:       assertFalse(node0.isNot());
753:       assertFalse(node0.isObjectLit());
754:       assertFalse(node0.isAnd());
755:       assertFalse(node0.isNumber());
756:       assertFalse(node0.isNew());
757:       assertFalse(node0.isAdd());
758:       assertFalse(node0.isSwitch());
759:       assertFalse(node0.isDo());
760:       assertFalse(node0.isCall());
761:       assertFalse(node0.isWhile());
762:       assertFalse(node0.isVar());
763:       assertFalse(node0.isReturn());
764:       assertFalse(node0.isComma());
765:       assertFalse(node0.isLabel());
766:       assertFalse(node0.isOr());
767:       assertFalse(node0.isAssignAdd());
768:       assertFalse(node0.isDelProp());
769:       assertFalse(node0.isBreak());
770:       assertFalse(node0.isEmpty());
771:       assertFalse(node0.isNull());
772:       assertFalse(node0.isTrue());
773:       assertEquals(51, Node.STATIC_SOURCE_FILE);
774:       assertEquals(12, Node.COLUMN_BITS);
775:       assertEquals(32, Node.INCRDECR_PROP);
776:       assertEquals(46, Node.IS_NAMESPACE);
777:       assertEquals(30, Node.VAR_ARGS_NAME);
778:       assertEquals(56, Node.CHANGE_TIME);
779:       assertEquals(2, Node.POST_FLAG);
780:       assertEquals(49, Node.DIRECT_EVAL);
781:       assertEquals(37, Node.OPT_ARG_NAME);
782:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
783:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
784:       assertEquals(50, Node.FREE_CALL);
785:       assertEquals(54, Node.SLASH_V);
786:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
787:       assertEquals(1, Node.DECR_FLAG);
788:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
789:       assertEquals(55, Node.INFERRED_FUNCTION);
790:       assertEquals(4095, Node.COLUMN_MASK);
791:       assertEquals(43, Node.IS_CONSTANT_NAME);
792:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
793:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
794:       assertEquals(48, Node.DIRECTIVES);
795:       assertEquals(40, Node.ORIGINALNAME_PROP);
796:       assertEquals(57, Node.REFLECTED_OBJECT);
797:       assertEquals(52, Node.LENGTH);
798:       assertEquals(15, Node.NO_SIDE_EFFECTS);
799:       assertEquals(36, Node.QUOTED_PROP);
800:       assertEquals(47, Node.IS_DISPATCHER);
801:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
802:       assertEquals(8, Node.FLAG_NO_THROWS);
803:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
804:       assertEquals(57, Node.LAST_PROP);
805:       assertEquals(53, Node.INPUT_ID);
806:       assertEquals(29, Node.JSDOC_INFO_PROP);
807:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
808:       assertEquals(39, Node.EMPTY_BLOCK);
809:       
810:       FileDescriptor fileDescriptor0 = new FileDescriptor();
811:       assertNotNull(fileDescriptor0);
812:       assertFalse(fileDescriptor0.valid());
813:       
814:       MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
815:       assertNotNull(mockFileOutputStream0);
816:       
817:       MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("R{u}:O'F5_824HF", true);
818:       assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
819:       assertNotNull(mockFileOutputStream1);
820:       
821:       byte[] byteArray0 = new byte[0];
822:       try { 
823:         mockFileOutputStream1.write(byteArray0, 3402, 2);
824:         fail("Expecting exception: IOException");
825:       
826:       } catch(IOException e) {
827:          //
828:          // Error in writing to file
829:          //
830:          verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
831:       }
832:   }
833: }
RegularFileObject[/tmp/EvoSuite_50_1628256013672/com/google/javascript/rhino/Node_50_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:13 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_50_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_50_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_50_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.InputId",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.javascript.rhino.jstype.TemplatizedType",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.Iterables",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.common.collect.Sets$ImprovedAbstractSet",
354:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
355:       "com.google.common.collect.Hashing",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
358:       "com.google.javascript.rhino.JSTypeExpression",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
367:     );
368:   }
369: }

[MASTER] 13:20:13.848 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
int int0 = 4;
Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
assertNotNull(node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(4, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());

node_SideEffectFlags1.clearSideEffectFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags1.valueOf());

node_SideEffectFlags0.clearSideEffectFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags0.valueOf());

node_SideEffectFlags0.clearSideEffectFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags0.valueOf());

node_SideEffectFlags0.clearSideEffectFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags0.valueOf());

Node[] nodeArray0 = new Node[0];
Node node0 = new Node(38, nodeArray0, 2744, 147);
assertEquals(0, nodeArray0.length);
assertNotNull(node0);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertEquals(147, node0.getCharno());
assertEquals(11239571, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertTrue(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals(38, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertEquals(2744, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

Node node1 = new Node(38, node0, 51, 446);
assertFalse(node1.equals((Object)node0));
assertEquals(0, nodeArray0.length);
assertNotNull(node1);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertEquals(147, node0.getCharno());
assertEquals(11239571, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertTrue(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals(38, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertEquals(2744, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertTrue(node1.hasOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertEquals(209342, node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isComma());
assertEquals(38, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertEquals(446, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertTrue(node1.isName());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(51, node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean0 = node1.wasEmptyNode();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertEquals(0, nodeArray0.length);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertEquals(147, node0.getCharno());
assertEquals(11239571, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertTrue(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals(38, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertEquals(2744, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertTrue(node1.hasOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertEquals(209342, node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isComma());
assertEquals(38, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isGetElem());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertEquals(446, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertTrue(node1.isName());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(51, node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(boolean0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean1 = node0.isNot();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertNotSame(node0, node1);
assertEquals(0, nodeArray0.length);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertEquals(147, node0.getCharno());
assertEquals(11239571, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertTrue(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals(38, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertEquals(2744, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(boolean1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertNotSame(node0, node1);
assertEquals(0, nodeArray0.length);
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertEquals(147, node0.getCharno());
assertEquals(11239571, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertTrue(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals(38, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertEquals(2744, node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("R{u}:O'F5_824HF", true);
assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
assertNotNull(mockFileOutputStream1);

byte[] byteArray0 = new byte[0];
mockFileOutputStream1.write(byteArray0, 3402, 2);

[MASTER] 13:20:16.129 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_59_1628256015694/com/google/javascript/rhino/Node_59_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_59_1628256015694/com/google/javascript/rhino/Node_59_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:16.129 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:16.129 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:16.132 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1936
[MASTER] 13:20:16.134 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_59_1628256015694/com/google/javascript/rhino/Node_59_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:15 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.EvoSuiteFile;
14: import org.evosuite.runtime.testdata.FileSystemHandling;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_59_tmp__ESTest extends Node_59_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       byte[] byteArray0 = new byte[2];
23:       byteArray0[1] = (byte)0;
24:       boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
25:       assertEquals(2, byteArray0.length);
26:       assertFalse(boolean0);
27:       assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
28:       
29:       Node node0 = Node.newString("", 2251, (int) (byte)0);
30:       assertNotNull(node0);
31:       assertFalse(node0.isStringKey());
32:       assertFalse(node0.isVar());
33:       assertFalse(node0.isCall());
34:       assertEquals(9220096, node0.getSourcePosition());
35:       assertFalse(node0.isName());
36:       assertTrue(node0.isString());
37:       assertFalse(node0.isBlock());
38:       assertEquals(0, node0.getChildCount());
39:       assertFalse(node0.isContinue());
40:       assertFalse(node0.isWhile());
41:       assertFalse(node0.isDebugger());
42:       assertFalse(node0.isParamList());
43:       assertFalse(node0.isNumber());
44:       assertFalse(node0.isCast());
45:       assertFalse(node0.isFor());
46:       assertFalse(node0.isIf());
47:       assertFalse(node0.hasOneChild());
48:       assertFalse(node0.isTry());
49:       assertFalse(node0.isRegExp());
50:       assertFalse(node0.hasMoreThanOneChild());
51:       assertFalse(node0.isWith());
52:       assertFalse(node0.isFunction());
53:       assertFalse(node0.isCatch());
54:       assertEquals(40, node0.getType());
55:       assertFalse(node0.isNE());
56:       assertEquals(0, node0.getCharno());
57:       assertFalse(node0.isInc());
58:       assertFalse(node0.isSetterDef());
59:       assertFalse(node0.isIn());
60:       assertFalse(node0.isThrow());
61:       assertFalse(node0.isHook());
62:       assertFalse(node0.isBreak());
63:       assertFalse(node0.isComma());
64:       assertFalse(node0.isThis());
65:       assertFalse(node0.isInstanceOf());
66:       assertFalse(node0.isFalse());
67:       assertFalse(node0.isObjectLit());
68:       assertFalse(node0.isAnd());
69:       assertFalse(node0.isCase());
70:       assertFalse(node0.isSwitch());
71:       assertFalse(node0.isGetProp());
72:       assertFalse(node0.isScript());
73:       assertFalse(node0.isGetterDef());
74:       assertFalse(node0.isNot());
75:       assertEquals(2251, node0.getLineno());
76:       assertFalse(node0.isArrayLit());
77:       assertFalse(node0.isEmpty());
78:       assertFalse(node0.isGetElem());
79:       assertFalse(node0.isDelProp());
80:       assertFalse(node0.isLabelName());
81:       assertFalse(node0.isVoid());
82:       assertFalse(node0.isLabel());
83:       assertFalse(node0.isReturn());
84:       assertFalse(node0.isExprResult());
85:       assertFalse(node0.hasChildren());
86:       assertFalse(node0.isDec());
87:       assertFalse(node0.isAssign());
88:       assertFalse(node0.isTypeOf());
89:       assertFalse(node0.isDefaultCase());
90:       assertFalse(node0.isAssignAdd());
91:       assertFalse(node0.isDo());
92:       assertFalse(node0.isNew());
93:       assertFalse(node0.isAdd());
94:       assertFalse(node0.isNull());
95:       assertFalse(node0.isTrue());
96:       assertFalse(node0.isOr());
97:       assertEquals(43, Node.IS_CONSTANT_NAME);
98:       assertEquals(36, Node.QUOTED_PROP);
99:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
100:       assertEquals(4095, Node.COLUMN_MASK);
101:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
102:       assertEquals(48, Node.DIRECTIVES);
103:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
104:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
105:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
106:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
107:       assertEquals(50, Node.FREE_CALL);
108:       assertEquals(32, Node.INCRDECR_PROP);
109:       assertEquals(12, Node.COLUMN_BITS);
110:       assertEquals(1, Node.DECR_FLAG);
111:       assertEquals(57, Node.LAST_PROP);
112:       assertEquals(15, Node.NO_SIDE_EFFECTS);
113:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
114:       assertEquals(30, Node.VAR_ARGS_NAME);
115:       assertEquals(52, Node.LENGTH);
116:       assertEquals(46, Node.IS_NAMESPACE);
117:       assertEquals(51, Node.STATIC_SOURCE_FILE);
118:       assertEquals(40, Node.ORIGINALNAME_PROP);
119:       assertEquals(57, Node.REFLECTED_OBJECT);
120:       assertEquals(54, Node.SLASH_V);
121:       assertEquals(37, Node.OPT_ARG_NAME);
122:       assertEquals(49, Node.DIRECT_EVAL);
123:       assertEquals(47, Node.IS_DISPATCHER);
124:       assertEquals(56, Node.CHANGE_TIME);
125:       assertEquals(29, Node.JSDOC_INFO_PROP);
126:       assertEquals(39, Node.EMPTY_BLOCK);
127:       assertEquals(2, Node.POST_FLAG);
128:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
129:       assertEquals(8, Node.FLAG_NO_THROWS);
130:       assertEquals(55, Node.INFERRED_FUNCTION);
131:       assertEquals(53, Node.INPUT_ID);
132:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
133:       
134:       boolean boolean1 = node0.wasEmptyNode();
135:       assertTrue(boolean1 == boolean0);
136:       assertFalse(node0.isStringKey());
137:       assertFalse(node0.isVar());
138:       assertFalse(node0.isCall());
139:       assertEquals(9220096, node0.getSourcePosition());
140:       assertFalse(node0.isName());
141:       assertTrue(node0.isString());
142:       assertFalse(node0.isBlock());
143:       assertEquals(0, node0.getChildCount());
144:       assertFalse(node0.isContinue());
145:       assertFalse(node0.isWhile());
146:       assertFalse(node0.isDebugger());
147:       assertFalse(node0.isParamList());
148:       assertFalse(node0.isNumber());
149:       assertFalse(node0.isCast());
150:       assertFalse(node0.isFor());
151:       assertFalse(node0.isIf());
152:       assertFalse(node0.hasOneChild());
153:       assertFalse(node0.isTry());
154:       assertFalse(node0.isRegExp());
155:       assertFalse(node0.hasMoreThanOneChild());
156:       assertFalse(node0.isWith());
157:       assertFalse(node0.isFunction());
158:       assertFalse(node0.isCatch());
159:       assertEquals(40, node0.getType());
160:       assertFalse(node0.isNE());
161:       assertEquals(0, node0.getCharno());
162:       assertFalse(node0.isInc());
163:       assertFalse(node0.isSetterDef());
164:       assertFalse(node0.isIn());
165:       assertFalse(node0.isThrow());
166:       assertFalse(node0.isHook());
167:       assertFalse(node0.isBreak());
168:       assertFalse(node0.isComma());
169:       assertFalse(node0.isThis());
170:       assertFalse(node0.isInstanceOf());
171:       assertFalse(node0.isFalse());
172:       assertFalse(node0.isObjectLit());
173:       assertFalse(node0.isAnd());
174:       assertFalse(node0.isCase());
175:       assertFalse(node0.isSwitch());
176:       assertFalse(node0.isGetProp());
177:       assertFalse(node0.isScript());
178:       assertFalse(node0.isGetterDef());
179:       assertFalse(node0.isNot());
180:       assertEquals(2251, node0.getLineno());
181:       assertFalse(node0.isArrayLit());
182:       assertFalse(node0.isEmpty());
183:       assertFalse(node0.isGetElem());
184:       assertFalse(node0.isDelProp());
185:       assertFalse(node0.isLabelName());
186:       assertFalse(node0.isVoid());
187:       assertFalse(node0.isLabel());
188:       assertFalse(node0.isReturn());
189:       assertFalse(node0.isExprResult());
190:       assertFalse(node0.hasChildren());
191:       assertFalse(node0.isDec());
192:       assertFalse(node0.isAssign());
193:       assertFalse(node0.isTypeOf());
194:       assertFalse(node0.isDefaultCase());
195:       assertFalse(node0.isAssignAdd());
196:       assertFalse(node0.isDo());
197:       assertFalse(node0.isNew());
198:       assertFalse(node0.isAdd());
199:       assertFalse(node0.isNull());
200:       assertFalse(node0.isTrue());
201:       assertFalse(node0.isOr());
202:       assertFalse(boolean1);
203:       assertEquals(43, Node.IS_CONSTANT_NAME);
204:       assertEquals(36, Node.QUOTED_PROP);
205:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
206:       assertEquals(4095, Node.COLUMN_MASK);
207:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
208:       assertEquals(48, Node.DIRECTIVES);
209:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
210:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
211:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
212:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
213:       assertEquals(50, Node.FREE_CALL);
214:       assertEquals(32, Node.INCRDECR_PROP);
215:       assertEquals(12, Node.COLUMN_BITS);
216:       assertEquals(1, Node.DECR_FLAG);
217:       assertEquals(57, Node.LAST_PROP);
218:       assertEquals(15, Node.NO_SIDE_EFFECTS);
219:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
220:       assertEquals(30, Node.VAR_ARGS_NAME);
221:       assertEquals(52, Node.LENGTH);
222:       assertEquals(46, Node.IS_NAMESPACE);
223:       assertEquals(51, Node.STATIC_SOURCE_FILE);
224:       assertEquals(40, Node.ORIGINALNAME_PROP);
225:       assertEquals(57, Node.REFLECTED_OBJECT);
226:       assertEquals(54, Node.SLASH_V);
227:       assertEquals(37, Node.OPT_ARG_NAME);
228:       assertEquals(49, Node.DIRECT_EVAL);
229:       assertEquals(47, Node.IS_DISPATCHER);
230:       assertEquals(56, Node.CHANGE_TIME);
231:       assertEquals(29, Node.JSDOC_INFO_PROP);
232:       assertEquals(39, Node.EMPTY_BLOCK);
233:       assertEquals(2, Node.POST_FLAG);
234:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
235:       assertEquals(8, Node.FLAG_NO_THROWS);
236:       assertEquals(55, Node.INFERRED_FUNCTION);
237:       assertEquals(53, Node.INPUT_ID);
238:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
239:       
240:       Node node1 = Node.newNumber(4055.9484, 40, 49);
241:       assertFalse(node1.equals((Object)node0));
242:       assertNotNull(node1);
243:       assertFalse(node1.isVar());
244:       assertFalse(node1.isAdd());
245:       assertFalse(node1.isBlock());
246:       assertFalse(node1.isCall());
247:       assertFalse(node1.isNull());
248:       assertFalse(node1.isParamList());
249:       assertFalse(node1.isStringKey());
250:       assertFalse(node1.isName());
251:       assertFalse(node1.isReturn());
252:       assertFalse(node1.isCatch());
253:       assertFalse(node1.isTypeOf());
254:       assertFalse(node1.hasMoreThanOneChild());
255:       assertFalse(node1.hasChildren());
256:       assertFalse(node1.isWhile());
257:       assertFalse(node1.isAssign());
258:       assertFalse(node1.isDec());
259:       assertEquals(40, node1.getLineno());
260:       assertEquals(39, node1.getType());
261:       assertFalse(node1.isTry());
262:       assertFalse(node1.isDebugger());
263:       assertFalse(node1.isCast());
264:       assertFalse(node1.isRegExp());
265:       assertFalse(node1.isFunction());
266:       assertFalse(node1.isAnd());
267:       assertFalse(node1.isNE());
268:       assertEquals(163889, node1.getSourcePosition());
269:       assertFalse(node1.isIf());
270:       assertFalse(node1.isContinue());
271:       assertFalse(node1.isIn());
272:       assertFalse(node1.isInc());
273:       assertFalse(node1.isSetterDef());
274:       assertFalse(node1.isThrow());
275:       assertFalse(node1.isHook());
276:       assertFalse(node1.isFalse());
277:       assertFalse(node1.isBreak());
278:       assertFalse(node1.isSwitch());
279:       assertFalse(node1.isInstanceOf());
280:       assertTrue(node1.isNumber());
281:       assertFalse(node1.isGetProp());
282:       assertFalse(node1.isObjectLit());
283:       assertFalse(node1.isComma());
284:       assertFalse(node1.isNot());
285:       assertFalse(node1.isWith());
286:       assertFalse(node1.isString());
287:       assertFalse(node1.isScript());
288:       assertFalse(node1.isCase());
289:       assertEquals(49, node1.getCharno());
290:       assertFalse(node1.isFor());
291:       assertFalse(node1.isThis());
292:       assertFalse(node1.hasOneChild());
293:       assertFalse(node1.isArrayLit());
294:       assertFalse(node1.isExprResult());
295:       assertFalse(node1.isGetterDef());
296:       assertFalse(node1.isDelProp());
297:       assertFalse(node1.isGetElem());
298:       assertFalse(node1.isTrue());
299:       assertFalse(node1.isVoid());
300:       assertFalse(node1.isLabelName());
301:       assertFalse(node1.isOr());
302:       assertEquals(0, node1.getChildCount());
303:       assertFalse(node1.isLabel());
304:       assertFalse(node1.isDo());
305:       assertFalse(node1.isEmpty());
306:       assertFalse(node1.isNew());
307:       assertFalse(node1.isAssignAdd());
308:       assertFalse(node1.isDefaultCase());
309:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
310:       assertEquals(55, Node.INFERRED_FUNCTION);
311:       assertEquals(43, Node.IS_CONSTANT_NAME);
312:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
313:       assertEquals(53, Node.INPUT_ID);
314:       assertEquals(39, Node.EMPTY_BLOCK);
315:       assertEquals(36, Node.QUOTED_PROP);
316:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
317:       assertEquals(50, Node.FREE_CALL);
318:       assertEquals(8, Node.FLAG_NO_THROWS);
319:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
320:       assertEquals(57, Node.REFLECTED_OBJECT);
321:       assertEquals(56, Node.CHANGE_TIME);
322:       assertEquals(37, Node.OPT_ARG_NAME);
323:       assertEquals(48, Node.DIRECTIVES);
324:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
325:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
326:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
327:       assertEquals(4095, Node.COLUMN_MASK);
328:       assertEquals(1, Node.DECR_FLAG);
329:       assertEquals(12, Node.COLUMN_BITS);
330:       assertEquals(32, Node.INCRDECR_PROP);
331:       assertEquals(46, Node.IS_NAMESPACE);
332:       assertEquals(49, Node.DIRECT_EVAL);
333:       assertEquals(57, Node.LAST_PROP);
334:       assertEquals(54, Node.SLASH_V);
335:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
336:       assertEquals(15, Node.NO_SIDE_EFFECTS);
337:       assertEquals(51, Node.STATIC_SOURCE_FILE);
338:       assertEquals(52, Node.LENGTH);
339:       assertEquals(40, Node.ORIGINALNAME_PROP);
340:       assertEquals(29, Node.JSDOC_INFO_PROP);
341:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
342:       assertEquals(47, Node.IS_DISPATCHER);
343:       assertEquals(30, Node.VAR_ARGS_NAME);
344:       assertEquals(2, Node.POST_FLAG);
345:       
346:       Node node2 = node0.copyInformationFrom(node1);
347:       assertFalse(node0.equals((Object)node1));
348:       assertFalse(node1.equals((Object)node0));
349:       assertFalse(node2.equals((Object)node1));
350:       assertSame(node0, node2);
351:       assertSame(node2, node0);
352:       assertNotNull(node2);
353:       assertFalse(node0.isStringKey());
354:       assertFalse(node0.isVar());
355:       assertFalse(node0.isCall());
356:       assertFalse(node0.isName());
357:       assertTrue(node0.isString());
358:       assertFalse(node0.isBlock());
359:       assertEquals(0, node0.getChildCount());
360:       assertFalse(node0.isContinue());
361:       assertFalse(node0.isWhile());
362:       assertFalse(node0.isDebugger());
363:       assertFalse(node0.isParamList());
364:       assertFalse(node0.isNumber());
365:       assertFalse(node0.isCast());
366:       assertEquals(40, node0.getLineno());
367:       assertFalse(node0.isFor());
368:       assertFalse(node0.isIf());
369:       assertFalse(node0.hasOneChild());
370:       assertEquals(163889, node0.getSourcePosition());
371:       assertFalse(node0.isTry());
372:       assertFalse(node0.isRegExp());
373:       assertFalse(node0.hasMoreThanOneChild());
374:       assertFalse(node0.isWith());
375:       assertFalse(node0.isFunction());
376:       assertFalse(node0.isCatch());
377:       assertEquals(40, node0.getType());
378:       assertFalse(node0.isNE());
379:       assertFalse(node0.isInc());
380:       assertFalse(node0.isSetterDef());
381:       assertFalse(node0.isIn());
382:       assertFalse(node0.isThrow());
383:       assertFalse(node0.isHook());
384:       assertFalse(node0.isBreak());
385:       assertFalse(node0.isComma());
386:       assertEquals(49, node0.getCharno());
387:       assertFalse(node0.isThis());
388:       assertFalse(node0.isInstanceOf());
389:       assertFalse(node0.isFalse());
390:       assertFalse(node0.isObjectLit());
391:       assertFalse(node0.isAnd());
392:       assertFalse(node0.isCase());
393:       assertFalse(node0.isSwitch());
394:       assertFalse(node0.isGetProp());
395:       assertFalse(node0.isScript());
396:       assertFalse(node0.isGetterDef());
397:       assertFalse(node0.isNot());
398:       assertFalse(node0.isArrayLit());
399:       assertFalse(node0.isEmpty());
400:       assertFalse(node0.isGetElem());
401:       assertFalse(node0.isDelProp());
402:       assertFalse(node0.isLabelName());
403:       assertFalse(node0.isVoid());
404:       assertFalse(node0.isLabel());
405:       assertFalse(node0.isReturn());
406:       assertFalse(node0.isExprResult());
407:       assertFalse(node0.hasChildren());
408:       assertFalse(node0.isDec());
409:       assertFalse(node0.isAssign());
410:       assertFalse(node0.isTypeOf());
411:       assertFalse(node0.isDefaultCase());
412:       assertFalse(node0.isAssignAdd());
413:       assertFalse(node0.isDo());
414:       assertFalse(node0.isNew());
415:       assertFalse(node0.isAdd());
416:       assertFalse(node0.isNull());
417:       assertFalse(node0.isTrue());
418:       assertFalse(node0.isOr());
419:       assertFalse(node1.isVar());
420:       assertFalse(node1.isAdd());
421:       assertFalse(node1.isBlock());
422:       assertFalse(node1.isCall());
423:       assertFalse(node1.isNull());
424:       assertFalse(node1.isParamList());
425:       assertFalse(node1.isStringKey());
426:       assertFalse(node1.isName());
427:       assertFalse(node1.isReturn());
428:       assertFalse(node1.isCatch());
429:       assertFalse(node1.isTypeOf());
430:       assertFalse(node1.hasMoreThanOneChild());
431:       assertFalse(node1.hasChildren());
432:       assertFalse(node1.isWhile());
433:       assertFalse(node1.isAssign());
434:       assertFalse(node1.isDec());
435:       assertEquals(40, node1.getLineno());
436:       assertEquals(39, node1.getType());
437:       assertFalse(node1.isTry());
438:       assertFalse(node1.isDebugger());
439:       assertFalse(node1.isCast());
440:       assertFalse(node1.isRegExp());
441:       assertFalse(node1.isFunction());
442:       assertFalse(node1.isAnd());
443:       assertFalse(node1.isNE());
444:       assertEquals(163889, node1.getSourcePosition());
445:       assertFalse(node1.isIf());
446:       assertFalse(node1.isContinue());
447:       assertFalse(node1.isIn());
448:       assertFalse(node1.isInc());
449:       assertFalse(node1.isSetterDef());
450:       assertFalse(node1.isThrow());
451:       assertFalse(node1.isHook());
452:       assertFalse(node1.isFalse());
453:       assertFalse(node1.isBreak());
454:       assertFalse(node1.isSwitch());
455:       assertFalse(node1.isInstanceOf());
456:       assertTrue(node1.isNumber());
457:       assertFalse(node1.isGetProp());
458:       assertFalse(node1.isObjectLit());
459:       assertFalse(node1.isComma());
460:       assertFalse(node1.isNot());
461:       assertFalse(node1.isWith());
462:       assertFalse(node1.isString());
463:       assertFalse(node1.isScript());
464:       assertFalse(node1.isCase());
465:       assertEquals(49, node1.getCharno());
466:       assertFalse(node1.isFor());
467:       assertFalse(node1.isThis());
468:       assertFalse(node1.hasOneChild());
469:       assertFalse(node1.isArrayLit());
470:       assertFalse(node1.isExprResult());
471:       assertFalse(node1.isGetterDef());
472:       assertFalse(node1.isDelProp());
473:       assertFalse(node1.isGetElem());
474:       assertFalse(node1.isTrue());
475:       assertFalse(node1.isVoid());
476:       assertFalse(node1.isLabelName());
477:       assertFalse(node1.isOr());
478:       assertEquals(0, node1.getChildCount());
479:       assertFalse(node1.isLabel());
480:       assertFalse(node1.isDo());
481:       assertFalse(node1.isEmpty());
482:       assertFalse(node1.isNew());
483:       assertFalse(node1.isAssignAdd());
484:       assertFalse(node1.isDefaultCase());
485:       assertFalse(node2.isArrayLit());
486:       assertFalse(node2.isTry());
487:       assertFalse(node2.isEmpty());
488:       assertFalse(node2.isRegExp());
489:       assertFalse(node2.isDefaultCase());
490:       assertFalse(node2.isFunction());
491:       assertFalse(node2.isFor());
492:       assertEquals(40, node2.getType());
493:       assertEquals(0, node2.getChildCount());
494:       assertFalse(node2.isCase());
495:       assertFalse(node2.isSwitch());
496:       assertFalse(node2.isGetterDef());
497:       assertFalse(node2.isDebugger());
498:       assertFalse(node2.isParamList());
499:       assertFalse(node2.isStringKey());
500:       assertFalse(node2.isAdd());
501:       assertFalse(node2.isNew());
502:       assertFalse(node2.isCall());
503:       assertFalse(node2.isDo());
504:       assertFalse(node2.isComma());
505:       assertFalse(node2.isWhile());
506:       assertFalse(node2.isVar());
507:       assertFalse(node2.isOr());
508:       assertFalse(node2.isNull());
509:       assertFalse(node2.isBreak());
510:       assertFalse(node2.isDelProp());
511:       assertFalse(node2.isVoid());
512:       assertFalse(node2.isName());
513:       assertFalse(node2.isTrue());
514:       assertFalse(node2.hasOneChild());
515:       assertFalse(node2.isGetElem());
516:       assertFalse(node2.isExprResult());
517:       assertFalse(node2.isCast());
518:       assertFalse(node2.isTypeOf());
519:       assertFalse(node2.isScript());
520:       assertFalse(node2.hasChildren());
521:       assertFalse(node2.isAssign());
522:       assertFalse(node2.isDec());
523:       assertFalse(node2.isLabel());
524:       assertFalse(node2.isAssignAdd());
525:       assertEquals(40, node2.getLineno());
526:       assertFalse(node2.isReturn());
527:       assertFalse(node2.isObjectLit());
528:       assertFalse(node2.isGetProp());
529:       assertFalse(node2.isContinue());
530:       assertFalse(node2.isNumber());
531:       assertFalse(node2.isLabelName());
532:       assertFalse(node2.isNot());
533:       assertFalse(node2.isAnd());
534:       assertFalse(node2.isHook());
535:       assertFalse(node2.isFalse());
536:       assertFalse(node2.isInc());
537:       assertEquals(49, node2.getCharno());
538:       assertFalse(node2.isSetterDef());
539:       assertFalse(node2.isBlock());
540:       assertTrue(node2.isString());
541:       assertFalse(node2.isThis());
542:       assertFalse(node2.isThrow());
543:       assertFalse(node2.hasMoreThanOneChild());
544:       assertFalse(node2.isIn());
545:       assertFalse(node2.isWith());
546:       assertFalse(node2.isInstanceOf());
547:       assertFalse(node2.isCatch());
548:       assertEquals(163889, node2.getSourcePosition());
549:       assertFalse(node2.isIf());
550:       assertFalse(node2.isNE());
551:       assertEquals(43, Node.IS_CONSTANT_NAME);
552:       assertEquals(36, Node.QUOTED_PROP);
553:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
554:       assertEquals(4095, Node.COLUMN_MASK);
555:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
556:       assertEquals(48, Node.DIRECTIVES);
557:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
558:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
559:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
560:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
561:       assertEquals(50, Node.FREE_CALL);
562:       assertEquals(32, Node.INCRDECR_PROP);
563:       assertEquals(12, Node.COLUMN_BITS);
564:       assertEquals(1, Node.DECR_FLAG);
565:       assertEquals(57, Node.LAST_PROP);
566:       assertEquals(15, Node.NO_SIDE_EFFECTS);
567:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
568:       assertEquals(30, Node.VAR_ARGS_NAME);
569:       assertEquals(52, Node.LENGTH);
570:       assertEquals(46, Node.IS_NAMESPACE);
571:       assertEquals(51, Node.STATIC_SOURCE_FILE);
572:       assertEquals(40, Node.ORIGINALNAME_PROP);
573:       assertEquals(57, Node.REFLECTED_OBJECT);
574:       assertEquals(54, Node.SLASH_V);
575:       assertEquals(37, Node.OPT_ARG_NAME);
576:       assertEquals(49, Node.DIRECT_EVAL);
577:       assertEquals(47, Node.IS_DISPATCHER);
578:       assertEquals(56, Node.CHANGE_TIME);
579:       assertEquals(29, Node.JSDOC_INFO_PROP);
580:       assertEquals(39, Node.EMPTY_BLOCK);
581:       assertEquals(2, Node.POST_FLAG);
582:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
583:       assertEquals(8, Node.FLAG_NO_THROWS);
584:       assertEquals(55, Node.INFERRED_FUNCTION);
585:       assertEquals(53, Node.INPUT_ID);
586:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
587:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
588:       assertEquals(55, Node.INFERRED_FUNCTION);
589:       assertEquals(43, Node.IS_CONSTANT_NAME);
590:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
591:       assertEquals(53, Node.INPUT_ID);
592:       assertEquals(39, Node.EMPTY_BLOCK);
593:       assertEquals(36, Node.QUOTED_PROP);
594:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
595:       assertEquals(50, Node.FREE_CALL);
596:       assertEquals(8, Node.FLAG_NO_THROWS);
597:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
598:       assertEquals(57, Node.REFLECTED_OBJECT);
599:       assertEquals(56, Node.CHANGE_TIME);
600:       assertEquals(37, Node.OPT_ARG_NAME);
601:       assertEquals(48, Node.DIRECTIVES);
602:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
603:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
604:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
605:       assertEquals(4095, Node.COLUMN_MASK);
606:       assertEquals(1, Node.DECR_FLAG);
607:       assertEquals(12, Node.COLUMN_BITS);
608:       assertEquals(32, Node.INCRDECR_PROP);
609:       assertEquals(46, Node.IS_NAMESPACE);
610:       assertEquals(49, Node.DIRECT_EVAL);
611:       assertEquals(57, Node.LAST_PROP);
612:       assertEquals(54, Node.SLASH_V);
613:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
614:       assertEquals(15, Node.NO_SIDE_EFFECTS);
615:       assertEquals(51, Node.STATIC_SOURCE_FILE);
616:       assertEquals(52, Node.LENGTH);
617:       assertEquals(40, Node.ORIGINALNAME_PROP);
618:       assertEquals(29, Node.JSDOC_INFO_PROP);
619:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
620:       assertEquals(47, Node.IS_DISPATCHER);
621:       assertEquals(30, Node.VAR_ARGS_NAME);
622:       assertEquals(2, Node.POST_FLAG);
623:       assertEquals(49, Node.DIRECT_EVAL);
624:       assertEquals(30, Node.VAR_ARGS_NAME);
625:       assertEquals(1, Node.DECR_FLAG);
626:       assertEquals(51, Node.STATIC_SOURCE_FILE);
627:       assertEquals(12, Node.COLUMN_BITS);
628:       assertEquals(57, Node.LAST_PROP);
629:       assertEquals(46, Node.IS_NAMESPACE);
630:       assertEquals(54, Node.SLASH_V);
631:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
632:       assertEquals(37, Node.OPT_ARG_NAME);
633:       assertEquals(2, Node.POST_FLAG);
634:       assertEquals(40, Node.ORIGINALNAME_PROP);
635:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
636:       assertEquals(50, Node.FREE_CALL);
637:       assertEquals(32, Node.INCRDECR_PROP);
638:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
639:       assertEquals(43, Node.IS_CONSTANT_NAME);
640:       assertEquals(36, Node.QUOTED_PROP);
641:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
642:       assertEquals(48, Node.DIRECTIVES);
643:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
644:       assertEquals(4095, Node.COLUMN_MASK);
645:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
646:       assertEquals(29, Node.JSDOC_INFO_PROP);
647:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
648:       assertEquals(47, Node.IS_DISPATCHER);
649:       assertEquals(57, Node.REFLECTED_OBJECT);
650:       assertEquals(56, Node.CHANGE_TIME);
651:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
652:       assertEquals(53, Node.INPUT_ID);
653:       assertEquals(52, Node.LENGTH);
654:       assertEquals(15, Node.NO_SIDE_EFFECTS);
655:       assertEquals(8, Node.FLAG_NO_THROWS);
656:       assertEquals(39, Node.EMPTY_BLOCK);
657:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
658:       assertEquals(55, Node.INFERRED_FUNCTION);
659:       
660:       boolean boolean2 = node0.getBooleanProp(16);
661:       assertFalse(node0.equals((Object)node1));
662:       assertTrue(boolean2 == boolean0);
663:       assertTrue(boolean2 == boolean1);
664:       assertSame(node0, node2);
665:       assertFalse(node0.isStringKey());
666:       assertFalse(node0.isVar());
667:       assertFalse(node0.isCall());
668:       assertFalse(node0.isName());
669:       assertTrue(node0.isString());
670:       assertFalse(node0.isBlock());
671:       assertEquals(0, node0.getChildCount());
672:       assertFalse(node0.isContinue());
673:       assertFalse(node0.isWhile());
674:       assertFalse(node0.isDebugger());
675:       assertFalse(node0.isParamList());
676:       assertFalse(node0.isNumber());
677:       assertFalse(node0.isCast());
678:       assertEquals(40, node0.getLineno());
679:       assertFalse(node0.isFor());
680:       assertFalse(node0.isIf());
681:       assertFalse(node0.hasOneChild());
682:       assertEquals(163889, node0.getSourcePosition());
683:       assertFalse(node0.isTry());
684:       assertFalse(node0.isRegExp());
685:       assertFalse(node0.hasMoreThanOneChild());
686:       assertFalse(node0.isWith());
687:       assertFalse(node0.isFunction());
688:       assertFalse(node0.isCatch());
689:       assertEquals(40, node0.getType());
690:       assertFalse(node0.isNE());
691:       assertFalse(node0.isInc());
692:       assertFalse(node0.isSetterDef());
693:       assertFalse(node0.isIn());
694:       assertFalse(node0.isThrow());
695:       assertFalse(node0.isHook());
696:       assertFalse(node0.isBreak());
697:       assertFalse(node0.isComma());
698:       assertEquals(49, node0.getCharno());
699:       assertFalse(node0.isThis());
700:       assertFalse(node0.isInstanceOf());
701:       assertFalse(node0.isFalse());
702:       assertFalse(node0.isObjectLit());
703:       assertFalse(node0.isAnd());
704:       assertFalse(node0.isCase());
705:       assertFalse(node0.isSwitch());
706:       assertFalse(node0.isGetProp());
707:       assertFalse(node0.isScript());
708:       assertFalse(node0.isGetterDef());
709:       assertFalse(node0.isNot());
710:       assertFalse(node0.isArrayLit());
711:       assertFalse(node0.isEmpty());
712:       assertFalse(node0.isGetElem());
713:       assertFalse(node0.isDelProp());
714:       assertFalse(node0.isLabelName());
715:       assertFalse(node0.isVoid());
716:       assertFalse(node0.isLabel());
717:       assertFalse(node0.isReturn());
718:       assertFalse(node0.isExprResult());
719:       assertFalse(node0.hasChildren());
720:       assertFalse(node0.isDec());
721:       assertFalse(node0.isAssign());
722:       assertFalse(node0.isTypeOf());
723:       assertFalse(node0.isDefaultCase());
724:       assertFalse(node0.isAssignAdd());
725:       assertFalse(node0.isDo());
726:       assertFalse(node0.isNew());
727:       assertFalse(node0.isAdd());
728:       assertFalse(node0.isNull());
729:       assertFalse(node0.isTrue());
730:       assertFalse(node0.isOr());
731:       assertFalse(boolean2);
732:       assertEquals(43, Node.IS_CONSTANT_NAME);
733:       assertEquals(36, Node.QUOTED_PROP);
734:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
735:       assertEquals(4095, Node.COLUMN_MASK);
736:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
737:       assertEquals(48, Node.DIRECTIVES);
738:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
739:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
740:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
741:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
742:       assertEquals(50, Node.FREE_CALL);
743:       assertEquals(32, Node.INCRDECR_PROP);
744:       assertEquals(12, Node.COLUMN_BITS);
745:       assertEquals(1, Node.DECR_FLAG);
746:       assertEquals(57, Node.LAST_PROP);
747:       assertEquals(15, Node.NO_SIDE_EFFECTS);
748:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
749:       assertEquals(30, Node.VAR_ARGS_NAME);
750:       assertEquals(52, Node.LENGTH);
751:       assertEquals(46, Node.IS_NAMESPACE);
752:       assertEquals(51, Node.STATIC_SOURCE_FILE);
753:       assertEquals(40, Node.ORIGINALNAME_PROP);
754:       assertEquals(57, Node.REFLECTED_OBJECT);
755:       assertEquals(54, Node.SLASH_V);
756:       assertEquals(37, Node.OPT_ARG_NAME);
757:       assertEquals(49, Node.DIRECT_EVAL);
758:       assertEquals(47, Node.IS_DISPATCHER);
759:       assertEquals(56, Node.CHANGE_TIME);
760:       assertEquals(29, Node.JSDOC_INFO_PROP);
761:       assertEquals(39, Node.EMPTY_BLOCK);
762:       assertEquals(2, Node.POST_FLAG);
763:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
764:       assertEquals(8, Node.FLAG_NO_THROWS);
765:       assertEquals(55, Node.INFERRED_FUNCTION);
766:       assertEquals(53, Node.INPUT_ID);
767:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
768:       
769:       boolean boolean3 = node2.isReturn();
770:       assertFalse(node0.equals((Object)node1));
771:       assertFalse(node1.equals((Object)node2));
772:       assertFalse(node1.equals((Object)node0));
773:       assertFalse(node2.equals((Object)node1));
774:       assertTrue(boolean3 == boolean1);
775:       assertTrue(boolean3 == boolean2);
776:       assertTrue(boolean3 == boolean0);
777:       assertSame(node0, node2);
778:       assertSame(node2, node0);
779:       assertFalse(node0.isStringKey());
780:       assertFalse(node0.isVar());
781:       assertFalse(node0.isCall());
782:       assertFalse(node0.isName());
783:       assertTrue(node0.isString());
784:       assertFalse(node0.isBlock());
785:       assertEquals(0, node0.getChildCount());
786:       assertFalse(node0.isContinue());
787:       assertFalse(node0.isWhile());
788:       assertFalse(node0.isDebugger());
789:       assertFalse(node0.isParamList());
790:       assertFalse(node0.isNumber());
791:       assertFalse(node0.isCast());
792:       assertEquals(40, node0.getLineno());
793:       assertFalse(node0.isFor());
794:       assertFalse(node0.isIf());
795:       assertFalse(node0.hasOneChild());
796:       assertEquals(163889, node0.getSourcePosition());
797:       assertFalse(node0.isTry());
798:       assertFalse(node0.isRegExp());
799:       assertFalse(node0.hasMoreThanOneChild());
800:       assertFalse(node0.isWith());
801:       assertFalse(node0.isFunction());
802:       assertFalse(node0.isCatch());
803:       assertEquals(40, node0.getType());
804:       assertFalse(node0.isNE());
805:       assertFalse(node0.isInc());
806:       assertFalse(node0.isSetterDef());
807:       assertFalse(node0.isIn());
808:       assertFalse(node0.isThrow());
809:       assertFalse(node0.isHook());
810:       assertFalse(node0.isBreak());
811:       assertFalse(node0.isComma());
812:       assertEquals(49, node0.getCharno());
813:       assertFalse(node0.isThis());
814:       assertFalse(node0.isInstanceOf());
815:       assertFalse(node0.isFalse());
816:       assertFalse(node0.isObjectLit());
817:       assertFalse(node0.isAnd());
818:       assertFalse(node0.isCase());
819:       assertFalse(node0.isSwitch());
820:       assertFalse(node0.isGetProp());
821:       assertFalse(node0.isScript());
822:       assertFalse(node0.isGetterDef());
823:       assertFalse(node0.isNot());
824:       assertFalse(node0.isArrayLit());
825:       assertFalse(node0.isEmpty());
826:       assertFalse(node0.isGetElem());
827:       assertFalse(node0.isDelProp());
828:       assertFalse(node0.isLabelName());
829:       assertFalse(node0.isVoid());
830:       assertFalse(node0.isLabel());
831:       assertFalse(node0.isReturn());
832:       assertFalse(node0.isExprResult());
833:       assertFalse(node0.hasChildren());
834:       assertFalse(node0.isDec());
835:       assertFalse(node0.isAssign());
836:       assertFalse(node0.isTypeOf());
837:       assertFalse(node0.isDefaultCase());
838:       assertFalse(node0.isAssignAdd());
839:       assertFalse(node0.isDo());
840:       assertFalse(node0.isNew());
841:       assertFalse(node0.isAdd());
842:       assertFalse(node0.isNull());
843:       assertFalse(node0.isTrue());
844:       assertFalse(node0.isOr());
845:       assertFalse(node1.isVar());
846:       assertFalse(node1.isAdd());
847:       assertFalse(node1.isBlock());
848:       assertFalse(node1.isCall());
849:       assertFalse(node1.isNull());
850:       assertFalse(node1.isParamList());
851:       assertFalse(node1.isStringKey());
852:       assertFalse(node1.isName());
853:       assertFalse(node1.isReturn());
854:       assertFalse(node1.isCatch());
855:       assertFalse(node1.isTypeOf());
856:       assertFalse(node1.hasMoreThanOneChild());
857:       assertFalse(node1.hasChildren());
858:       assertFalse(node1.isWhile());
859:       assertFalse(node1.isAssign());
860:       assertFalse(node1.isDec());
861:       assertEquals(40, node1.getLineno());
862:       assertEquals(39, node1.getType());
863:       assertFalse(node1.isTry());
864:       assertFalse(node1.isDebugger());
865:       assertFalse(node1.isCast());
866:       assertFalse(node1.isRegExp());
867:       assertFalse(node1.isFunction());
868:       assertFalse(node1.isAnd());
869:       assertFalse(node1.isNE());
870:       assertEquals(163889, node1.getSourcePosition());
871:       assertFalse(node1.isIf());
872:       assertFalse(node1.isContinue());
873:       assertFalse(node1.isIn());
874:       assertFalse(node1.isInc());
875:       assertFalse(node1.isSetterDef());
876:       assertFalse(node1.isThrow());
877:       assertFalse(node1.isHook());
878:       assertFalse(node1.isFalse());
879:       assertFalse(node1.isBreak());
880:       assertFalse(node1.isSwitch());
881:       assertFalse(node1.isInstanceOf());
882:       assertTrue(node1.isNumber());
883:       assertFalse(node1.isGetProp());
884:       assertFalse(node1.isObjectLit());
885:       assertFalse(node1.isComma());
886:       assertFalse(node1.isNot());
887:       assertFalse(node1.isWith());
888:       assertFalse(node1.isString());
889:       assertFalse(node1.isScript());
890:       assertFalse(node1.isCase());
891:       assertEquals(49, node1.getCharno());
892:       assertFalse(node1.isFor());
893:       assertFalse(node1.isThis());
894:       assertFalse(node1.hasOneChild());
895:       assertFalse(node1.isArrayLit());
896:       assertFalse(node1.isExprResult());
897:       assertFalse(node1.isGetterDef());
898:       assertFalse(node1.isDelProp());
899:       assertFalse(node1.isGetElem());
900:       assertFalse(node1.isTrue());
901:       assertFalse(node1.isVoid());
902:       assertFalse(node1.isLabelName());
903:       assertFalse(node1.isOr());
904:       assertEquals(0, node1.getChildCount());
905:       assertFalse(node1.isLabel());
906:       assertFalse(node1.isDo());
907:       assertFalse(node1.isEmpty());
908:       assertFalse(node1.isNew());
909:       assertFalse(node1.isAssignAdd());
910:       assertFalse(node1.isDefaultCase());
911:       assertFalse(node2.isArrayLit());
912:       assertFalse(node2.isTry());
913:       assertFalse(node2.isEmpty());
914:       assertFalse(node2.isRegExp());
915:       assertFalse(node2.isDefaultCase());
916:       assertFalse(node2.isFunction());
917:       assertFalse(node2.isFor());
918:       assertEquals(40, node2.getType());
919:       assertEquals(0, node2.getChildCount());
920:       assertFalse(node2.isCase());
921:       assertFalse(node2.isSwitch());
922:       assertFalse(node2.isGetterDef());
923:       assertFalse(node2.isDebugger());
924:       assertFalse(node2.isParamList());
925:       assertFalse(node2.isStringKey());
926:       assertFalse(node2.isAdd());
927:       assertFalse(node2.isNew());
928:       assertFalse(node2.isCall());
929:       assertFalse(node2.isDo());
930:       assertFalse(node2.isComma());
931:       assertFalse(node2.isWhile());
932:       assertFalse(node2.isVar());
933:       assertFalse(node2.isOr());
934:       assertFalse(node2.isNull());
935:       assertFalse(node2.isBreak());
936:       assertFalse(node2.isDelProp());
937:       assertFalse(node2.isVoid());
938:       assertFalse(node2.isName());
939:       assertFalse(node2.isTrue());
940:       assertFalse(node2.hasOneChild());
941:       assertFalse(node2.isGetElem());
942:       assertFalse(node2.isExprResult());
943:       assertFalse(node2.isCast());
944:       assertFalse(node2.isTypeOf());
945:       assertFalse(node2.isScript());
946:       assertFalse(node2.hasChildren());
947:       assertFalse(node2.isAssign());
948:       assertFalse(node2.isDec());
949:       assertFalse(node2.isLabel());
950:       assertFalse(node2.isAssignAdd());
951:       assertEquals(40, node2.getLineno());
952:       assertFalse(node2.isReturn());
953:       assertFalse(node2.isObjectLit());
954:       assertFalse(node2.isGetProp());
955:       assertFalse(node2.isContinue());
956:       assertFalse(node2.isNumber());
957:       assertFalse(node2.isLabelName());
958:       assertFalse(node2.isNot());
959:       assertFalse(node2.isAnd());
960:       assertFalse(node2.isHook());
961:       assertFalse(node2.isFalse());
962:       assertFalse(node2.isInc());
963:       assertEquals(49, node2.getCharno());
964:       assertFalse(node2.isSetterDef());
965:       assertFalse(node2.isBlock());
966:       assertTrue(node2.isString());
967:       assertFalse(node2.isThis());
968:       assertFalse(node2.isThrow());
969:       assertFalse(node2.hasMoreThanOneChild());
970:       assertFalse(node2.isIn());
971:       assertFalse(node2.isWith());
972:       assertFalse(node2.isInstanceOf());
973:       assertFalse(node2.isCatch());
974:       assertEquals(163889, node2.getSourcePosition());
975:       assertFalse(node2.isIf());
976:       assertFalse(node2.isNE());
977:       assertFalse(boolean3);
978:       assertEquals(43, Node.IS_CONSTANT_NAME);
979:       assertEquals(36, Node.QUOTED_PROP);
980:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
981:       assertEquals(4095, Node.COLUMN_MASK);
982:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
983:       assertEquals(48, Node.DIRECTIVES);
984:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
985:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
986:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
987:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
988:       assertEquals(50, Node.FREE_CALL);
989:       assertEquals(32, Node.INCRDECR_PROP);
990:       assertEquals(12, Node.COLUMN_BITS);
991:       assertEquals(1, Node.DECR_FLAG);
992:       assertEquals(57, Node.LAST_PROP);
993:       assertEquals(15, Node.NO_SIDE_EFFECTS);
994:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
995:       assertEquals(30, Node.VAR_ARGS_NAME);
996:       assertEquals(52, Node.LENGTH);
997:       assertEquals(46, Node.IS_NAMESPACE);
998:       assertEquals(51, Node.STATIC_SOURCE_FILE);
999:       assertEquals(40, Node.ORIGINALNAME_PROP);
1000:       assertEquals(57, Node.REFLECTED_OBJECT);
1001:       assertEquals(54, Node.SLASH_V);
1002:       assertEquals(37, Node.OPT_ARG_NAME);
1003:       assertEquals(49, Node.DIRECT_EVAL);
1004:       assertEquals(47, Node.IS_DISPATCHER);
1005:       assertEquals(56, Node.CHANGE_TIME);
1006:       assertEquals(29, Node.JSDOC_INFO_PROP);
1007:       assertEquals(39, Node.EMPTY_BLOCK);
1008:       assertEquals(2, Node.POST_FLAG);
1009:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1010:       assertEquals(8, Node.FLAG_NO_THROWS);
1011:       assertEquals(55, Node.INFERRED_FUNCTION);
1012:       assertEquals(53, Node.INPUT_ID);
1013:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1014:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1015:       assertEquals(55, Node.INFERRED_FUNCTION);
1016:       assertEquals(43, Node.IS_CONSTANT_NAME);
1017:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1018:       assertEquals(53, Node.INPUT_ID);
1019:       assertEquals(39, Node.EMPTY_BLOCK);
1020:       assertEquals(36, Node.QUOTED_PROP);
1021:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1022:       assertEquals(50, Node.FREE_CALL);
1023:       assertEquals(8, Node.FLAG_NO_THROWS);
1024:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1025:       assertEquals(57, Node.REFLECTED_OBJECT);
1026:       assertEquals(56, Node.CHANGE_TIME);
1027:       assertEquals(37, Node.OPT_ARG_NAME);
1028:       assertEquals(48, Node.DIRECTIVES);
1029:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1030:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1031:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1032:       assertEquals(4095, Node.COLUMN_MASK);
1033:       assertEquals(1, Node.DECR_FLAG);
1034:       assertEquals(12, Node.COLUMN_BITS);
1035:       assertEquals(32, Node.INCRDECR_PROP);
1036:       assertEquals(46, Node.IS_NAMESPACE);
1037:       assertEquals(49, Node.DIRECT_EVAL);
1038:       assertEquals(57, Node.LAST_PROP);
1039:       assertEquals(54, Node.SLASH_V);
1040:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1041:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1042:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1043:       assertEquals(52, Node.LENGTH);
1044:       assertEquals(40, Node.ORIGINALNAME_PROP);
1045:       assertEquals(29, Node.JSDOC_INFO_PROP);
1046:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1047:       assertEquals(47, Node.IS_DISPATCHER);
1048:       assertEquals(30, Node.VAR_ARGS_NAME);
1049:       assertEquals(2, Node.POST_FLAG);
1050:       assertEquals(49, Node.DIRECT_EVAL);
1051:       assertEquals(30, Node.VAR_ARGS_NAME);
1052:       assertEquals(1, Node.DECR_FLAG);
1053:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1054:       assertEquals(12, Node.COLUMN_BITS);
1055:       assertEquals(57, Node.LAST_PROP);
1056:       assertEquals(46, Node.IS_NAMESPACE);
1057:       assertEquals(54, Node.SLASH_V);
1058:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1059:       assertEquals(37, Node.OPT_ARG_NAME);
1060:       assertEquals(2, Node.POST_FLAG);
1061:       assertEquals(40, Node.ORIGINALNAME_PROP);
1062:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1063:       assertEquals(50, Node.FREE_CALL);
1064:       assertEquals(32, Node.INCRDECR_PROP);
1065:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1066:       assertEquals(43, Node.IS_CONSTANT_NAME);
1067:       assertEquals(36, Node.QUOTED_PROP);
1068:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1069:       assertEquals(48, Node.DIRECTIVES);
1070:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1071:       assertEquals(4095, Node.COLUMN_MASK);
1072:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1073:       assertEquals(29, Node.JSDOC_INFO_PROP);
1074:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1075:       assertEquals(47, Node.IS_DISPATCHER);
1076:       assertEquals(57, Node.REFLECTED_OBJECT);
1077:       assertEquals(56, Node.CHANGE_TIME);
1078:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1079:       assertEquals(53, Node.INPUT_ID);
1080:       assertEquals(52, Node.LENGTH);
1081:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1082:       assertEquals(8, Node.FLAG_NO_THROWS);
1083:       assertEquals(39, Node.EMPTY_BLOCK);
1084:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1085:       assertEquals(55, Node.INFERRED_FUNCTION);
1086:       
1087:       Node node3 = new Node(4, node0, node1, node0, node2);
1088:       assertFalse(node0.equals((Object)node1));
1089:       assertFalse(node1.equals((Object)node2));
1090:       assertFalse(node1.equals((Object)node0));
1091:       assertFalse(node2.equals((Object)node1));
1092:       assertFalse(node3.equals((Object)node1));
1093:       assertFalse(node3.equals((Object)node2));
1094:       assertFalse(node3.equals((Object)node0));
1095:       assertNotNull(node3);
1096:       assertFalse(node0.isStringKey());
1097:       assertFalse(node0.isVar());
1098:       assertFalse(node0.isCall());
1099:       assertFalse(node0.isName());
1100:       assertTrue(node0.isString());
1101:       assertFalse(node0.isBlock());
1102:       assertEquals(0, node0.getChildCount());
1103:       assertFalse(node0.isContinue());
1104:       assertFalse(node0.isWhile());
1105:       assertFalse(node0.isDebugger());
1106:       assertFalse(node0.isParamList());
1107:       assertFalse(node0.isNumber());
1108:       assertFalse(node0.isCast());
1109:       assertEquals(40, node0.getLineno());
1110:       assertFalse(node0.isFor());
1111:       assertFalse(node0.isIf());
1112:       assertFalse(node0.hasOneChild());
1113:       assertEquals(163889, node0.getSourcePosition());
1114:       assertFalse(node0.isTry());
1115:       assertFalse(node0.isRegExp());
1116:       assertFalse(node0.hasMoreThanOneChild());
1117:       assertFalse(node0.isWith());
1118:       assertFalse(node0.isFunction());
1119:       assertFalse(node0.isCatch());
1120:       assertEquals(40, node0.getType());
1121:       assertFalse(node0.isNE());
1122:       assertFalse(node0.isInc());
1123:       assertFalse(node0.isSetterDef());
1124:       assertFalse(node0.isIn());
1125:       assertFalse(node0.isThrow());
1126:       assertFalse(node0.isHook());
1127:       assertFalse(node0.isBreak());
1128:       assertFalse(node0.isComma());
1129:       assertEquals(49, node0.getCharno());
1130:       assertFalse(node0.isThis());
1131:       assertFalse(node0.isInstanceOf());
1132:       assertFalse(node0.isFalse());
1133:       assertFalse(node0.isObjectLit());
1134:       assertFalse(node0.isAnd());
1135:       assertFalse(node0.isCase());
1136:       assertFalse(node0.isSwitch());
1137:       assertFalse(node0.isGetProp());
1138:       assertFalse(node0.isScript());
1139:       assertFalse(node0.isGetterDef());
1140:       assertFalse(node0.isNot());
1141:       assertFalse(node0.isArrayLit());
1142:       assertFalse(node0.isEmpty());
1143:       assertFalse(node0.isGetElem());
1144:       assertFalse(node0.isDelProp());
1145:       assertFalse(node0.isLabelName());
1146:       assertFalse(node0.isVoid());
1147:       assertFalse(node0.isLabel());
1148:       assertFalse(node0.isReturn());
1149:       assertFalse(node0.isExprResult());
1150:       assertFalse(node0.hasChildren());
1151:       assertFalse(node0.isDec());
1152:       assertFalse(node0.isAssign());
1153:       assertFalse(node0.isTypeOf());
1154:       assertFalse(node0.isDefaultCase());
1155:       assertFalse(node0.isAssignAdd());
1156:       assertFalse(node0.isDo());
1157:       assertFalse(node0.isNew());
1158:       assertFalse(node0.isAdd());
1159:       assertFalse(node0.isNull());
1160:       assertFalse(node0.isTrue());
1161:       assertFalse(node0.isOr());
1162:       assertFalse(node1.isVar());
1163:       assertFalse(node1.isAdd());
1164:       assertFalse(node1.isBlock());
1165:       assertFalse(node1.isCall());
1166:       assertFalse(node1.isNull());
1167:       assertFalse(node1.isParamList());
1168:       assertFalse(node1.isStringKey());
1169:       assertFalse(node1.isName());
1170:       assertFalse(node1.isReturn());
1171:       assertFalse(node1.isCatch());
1172:       assertFalse(node1.isTypeOf());
1173:       assertFalse(node1.hasMoreThanOneChild());
1174:       assertFalse(node1.hasChildren());
1175:       assertFalse(node1.isWhile());
1176:       assertFalse(node1.isAssign());
1177:       assertFalse(node1.isDec());
1178:       assertEquals(40, node1.getLineno());
1179:       assertEquals(39, node1.getType());
1180:       assertFalse(node1.isTry());
1181:       assertFalse(node1.isDebugger());
1182:       assertFalse(node1.isCast());
1183:       assertFalse(node1.isRegExp());
1184:       assertFalse(node1.isFunction());
1185:       assertFalse(node1.isAnd());
1186:       assertFalse(node1.isNE());
1187:       assertEquals(163889, node1.getSourcePosition());
1188:       assertFalse(node1.isIf());
1189:       assertFalse(node1.isContinue());
1190:       assertFalse(node1.isIn());
1191:       assertFalse(node1.isInc());
1192:       assertFalse(node1.isSetterDef());
1193:       assertFalse(node1.isThrow());
1194:       assertFalse(node1.isHook());
1195:       assertFalse(node1.isFalse());
1196:       assertFalse(node1.isBreak());
1197:       assertFalse(node1.isSwitch());
1198:       assertFalse(node1.isInstanceOf());
1199:       assertTrue(node1.isNumber());
1200:       assertFalse(node1.isGetProp());
1201:       assertFalse(node1.isObjectLit());
1202:       assertFalse(node1.isComma());
1203:       assertFalse(node1.isNot());
1204:       assertFalse(node1.isWith());
1205:       assertFalse(node1.isString());
1206:       assertFalse(node1.isScript());
1207:       assertFalse(node1.isCase());
1208:       assertEquals(49, node1.getCharno());
1209:       assertFalse(node1.isFor());
1210:       assertFalse(node1.isThis());
1211:       assertFalse(node1.hasOneChild());
1212:       assertFalse(node1.isArrayLit());
1213:       assertFalse(node1.isExprResult());
1214:       assertFalse(node1.isGetterDef());
1215:       assertFalse(node1.isDelProp());
1216:       assertFalse(node1.isGetElem());
1217:       assertFalse(node1.isTrue());
1218:       assertFalse(node1.isVoid());
1219:       assertFalse(node1.isLabelName());
1220:       assertFalse(node1.isOr());
1221:       assertEquals(0, node1.getChildCount());
1222:       assertFalse(node1.isLabel());
1223:       assertFalse(node1.isDo());
1224:       assertFalse(node1.isEmpty());
1225:       assertFalse(node1.isNew());
1226:       assertFalse(node1.isAssignAdd());
1227:       assertFalse(node1.isDefaultCase());
1228:       assertFalse(node2.isArrayLit());
1229:       assertFalse(node2.isTry());
1230:       assertFalse(node2.isEmpty());
1231:       assertFalse(node2.isRegExp());
1232:       assertFalse(node2.isDefaultCase());
1233:       assertFalse(node2.isFunction());
1234:       assertFalse(node2.isFor());
1235:       assertEquals(40, node2.getType());
1236:       assertEquals(0, node2.getChildCount());
1237:       assertFalse(node2.isCase());
1238:       assertFalse(node2.isSwitch());
1239:       assertFalse(node2.isGetterDef());
1240:       assertFalse(node2.isDebugger());
1241:       assertFalse(node2.isParamList());
1242:       assertFalse(node2.isStringKey());
1243:       assertFalse(node2.isAdd());
1244:       assertFalse(node2.isNew());
1245:       assertFalse(node2.isCall());
1246:       assertFalse(node2.isDo());
1247:       assertFalse(node2.isComma());
1248:       assertFalse(node2.isWhile());
1249:       assertFalse(node2.isVar());
1250:       assertFalse(node2.isOr());
1251:       assertFalse(node2.isNull());
1252:       assertFalse(node2.isBreak());
1253:       assertFalse(node2.isDelProp());
1254:       assertFalse(node2.isVoid());
1255:       assertFalse(node2.isName());
1256:       assertFalse(node2.isTrue());
1257:       assertFalse(node2.hasOneChild());
1258:       assertFalse(node2.isGetElem());
1259:       assertFalse(node2.isExprResult());
1260:       assertFalse(node2.isCast());
1261:       assertFalse(node2.isTypeOf());
1262:       assertFalse(node2.isScript());
1263:       assertFalse(node2.hasChildren());
1264:       assertFalse(node2.isAssign());
1265:       assertFalse(node2.isDec());
1266:       assertFalse(node2.isLabel());
1267:       assertFalse(node2.isAssignAdd());
1268:       assertEquals(40, node2.getLineno());
1269:       assertFalse(node2.isReturn());
1270:       assertFalse(node2.isObjectLit());
1271:       assertFalse(node2.isGetProp());
1272:       assertFalse(node2.isContinue());
1273:       assertFalse(node2.isNumber());
1274:       assertFalse(node2.isLabelName());
1275:       assertFalse(node2.isNot());
1276:       assertFalse(node2.isAnd());
1277:       assertFalse(node2.isHook());
1278:       assertFalse(node2.isFalse());
1279:       assertFalse(node2.isInc());
1280:       assertEquals(49, node2.getCharno());
1281:       assertFalse(node2.isSetterDef());
1282:       assertFalse(node2.isBlock());
1283:       assertTrue(node2.isString());
1284:       assertFalse(node2.isThis());
1285:       assertFalse(node2.isThrow());
1286:       assertFalse(node2.hasMoreThanOneChild());
1287:       assertFalse(node2.isIn());
1288:       assertFalse(node2.isWith());
1289:       assertFalse(node2.isInstanceOf());
1290:       assertFalse(node2.isCatch());
1291:       assertEquals(163889, node2.getSourcePosition());
1292:       assertFalse(node2.isIf());
1293:       assertFalse(node2.isNE());
1294:       assertFalse(node3.isIn());
1295:       assertTrue(node3.hasChildren());
1296:       assertTrue(node3.isReturn());
1297:       assertEquals(1, node3.getChildCount());
1298:       assertFalse(node3.isInc());
1299:       assertFalse(node3.isString());
1300:       assertFalse(node3.isCase());
1301:       assertFalse(node3.isEmpty());
1302:       assertFalse(node3.isHook());
1303:       assertFalse(node3.isFor());
1304:       assertTrue(node3.hasOneChild());
1305:       assertFalse(node3.isRegExp());
1306:       assertEquals(4, node3.getType());
1307:       assertFalse(node3.isIf());
1308:       assertFalse(node3.isTrue());
1309:       assertFalse(node3.isNE());
1310:       assertFalse(node3.isBreak());
1311:       assertFalse(node3.isVoid());
1312:       assertFalse(node3.isDelProp());
1313:       assertFalse(node3.isInstanceOf());
1314:       assertFalse(node3.isCatch());
1315:       assertFalse(node3.isWith());
1316:       assertFalse(node3.isScript());
1317:       assertFalse(node3.isThis());
1318:       assertFalse(node3.isDefaultCase());
1319:       assertFalse(node3.isTry());
1320:       assertFalse(node3.isVar());
1321:       assertFalse(node3.isArrayLit());
1322:       assertFalse(node3.isStringKey());
1323:       assertFalse(node3.isGetterDef());
1324:       assertEquals((-1), node3.getCharno());
1325:       assertFalse(node3.isSwitch());
1326:       assertFalse(node3.isParamList());
1327:       assertFalse(node3.isLabelName());
1328:       assertFalse(node3.hasMoreThanOneChild());
1329:       assertFalse(node3.isContinue());
1330:       assertFalse(node3.isLabel());
1331:       assertFalse(node3.isOr());
1332:       assertFalse(node3.isNumber());
1333:       assertFalse(node3.isWhile());
1334:       assertFalse(node3.isAdd());
1335:       assertFalse(node3.isNew());
1336:       assertFalse(node3.isAssignAdd());
1337:       assertFalse(node3.isDo());
1338:       assertFalse(node3.isCall());
1339:       assertFalse(node3.isBlock());
1340:       assertFalse(node3.isAssign());
1341:       assertFalse(node3.isDec());
1342:       assertFalse(node3.isTypeOf());
1343:       assertFalse(node3.isNull());
1344:       assertFalse(node3.isExprResult());
1345:       assertFalse(node3.isName());
1346:       assertFalse(node3.isGetElem());
1347:       assertEquals((-1), node3.getLineno());
1348:       assertFalse(node3.isAnd());
1349:       assertFalse(node3.isObjectLit());
1350:       assertFalse(node3.isComma());
1351:       assertFalse(node3.isNot());
1352:       assertFalse(node3.isSetterDef());
1353:       assertFalse(node3.isGetProp());
1354:       assertFalse(node3.isCast());
1355:       assertFalse(node3.isThrow());
1356:       assertFalse(node3.isFalse());
1357:       assertFalse(node3.isFunction());
1358:       assertFalse(node3.isDebugger());
1359:       assertEquals((-1), node3.getSourcePosition());
1360:       assertEquals(43, Node.IS_CONSTANT_NAME);
1361:       assertEquals(36, Node.QUOTED_PROP);
1362:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1363:       assertEquals(4095, Node.COLUMN_MASK);
1364:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1365:       assertEquals(48, Node.DIRECTIVES);
1366:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1367:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1368:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1369:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1370:       assertEquals(50, Node.FREE_CALL);
1371:       assertEquals(32, Node.INCRDECR_PROP);
1372:       assertEquals(12, Node.COLUMN_BITS);
1373:       assertEquals(1, Node.DECR_FLAG);
1374:       assertEquals(57, Node.LAST_PROP);
1375:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1376:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1377:       assertEquals(30, Node.VAR_ARGS_NAME);
1378:       assertEquals(52, Node.LENGTH);
1379:       assertEquals(46, Node.IS_NAMESPACE);
1380:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1381:       assertEquals(40, Node.ORIGINALNAME_PROP);
1382:       assertEquals(57, Node.REFLECTED_OBJECT);
1383:       assertEquals(54, Node.SLASH_V);
1384:       assertEquals(37, Node.OPT_ARG_NAME);
1385:       assertEquals(49, Node.DIRECT_EVAL);
1386:       assertEquals(47, Node.IS_DISPATCHER);
1387:       assertEquals(56, Node.CHANGE_TIME);
1388:       assertEquals(29, Node.JSDOC_INFO_PROP);
1389:       assertEquals(39, Node.EMPTY_BLOCK);
1390:       assertEquals(2, Node.POST_FLAG);
1391:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1392:       assertEquals(8, Node.FLAG_NO_THROWS);
1393:       assertEquals(55, Node.INFERRED_FUNCTION);
1394:       assertEquals(53, Node.INPUT_ID);
1395:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1396:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1397:       assertEquals(55, Node.INFERRED_FUNCTION);
1398:       assertEquals(43, Node.IS_CONSTANT_NAME);
1399:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1400:       assertEquals(53, Node.INPUT_ID);
1401:       assertEquals(39, Node.EMPTY_BLOCK);
1402:       assertEquals(36, Node.QUOTED_PROP);
1403:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1404:       assertEquals(50, Node.FREE_CALL);
1405:       assertEquals(8, Node.FLAG_NO_THROWS);
1406:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1407:       assertEquals(57, Node.REFLECTED_OBJECT);
1408:       assertEquals(56, Node.CHANGE_TIME);
1409:       assertEquals(37, Node.OPT_ARG_NAME);
1410:       assertEquals(48, Node.DIRECTIVES);
1411:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1412:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1413:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1414:       assertEquals(4095, Node.COLUMN_MASK);
1415:       assertEquals(1, Node.DECR_FLAG);
1416:       assertEquals(12, Node.COLUMN_BITS);
1417:       assertEquals(32, Node.INCRDECR_PROP);
1418:       assertEquals(46, Node.IS_NAMESPACE);
1419:       assertEquals(49, Node.DIRECT_EVAL);
1420:       assertEquals(57, Node.LAST_PROP);
1421:       assertEquals(54, Node.SLASH_V);
1422:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1423:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1424:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1425:       assertEquals(52, Node.LENGTH);
1426:       assertEquals(40, Node.ORIGINALNAME_PROP);
1427:       assertEquals(29, Node.JSDOC_INFO_PROP);
1428:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1429:       assertEquals(47, Node.IS_DISPATCHER);
1430:       assertEquals(30, Node.VAR_ARGS_NAME);
1431:       assertEquals(2, Node.POST_FLAG);
1432:       assertEquals(49, Node.DIRECT_EVAL);
1433:       assertEquals(30, Node.VAR_ARGS_NAME);
1434:       assertEquals(1, Node.DECR_FLAG);
1435:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1436:       assertEquals(12, Node.COLUMN_BITS);
1437:       assertEquals(57, Node.LAST_PROP);
1438:       assertEquals(46, Node.IS_NAMESPACE);
1439:       assertEquals(54, Node.SLASH_V);
1440:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1441:       assertEquals(37, Node.OPT_ARG_NAME);
1442:       assertEquals(2, Node.POST_FLAG);
1443:       assertEquals(40, Node.ORIGINALNAME_PROP);
1444:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1445:       assertEquals(50, Node.FREE_CALL);
1446:       assertEquals(32, Node.INCRDECR_PROP);
1447:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1448:       assertEquals(43, Node.IS_CONSTANT_NAME);
1449:       assertEquals(36, Node.QUOTED_PROP);
1450:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1451:       assertEquals(48, Node.DIRECTIVES);
1452:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1453:       assertEquals(4095, Node.COLUMN_MASK);
1454:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1455:       assertEquals(29, Node.JSDOC_INFO_PROP);
1456:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1457:       assertEquals(47, Node.IS_DISPATCHER);
1458:       assertEquals(57, Node.REFLECTED_OBJECT);
1459:       assertEquals(56, Node.CHANGE_TIME);
1460:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1461:       assertEquals(53, Node.INPUT_ID);
1462:       assertEquals(52, Node.LENGTH);
1463:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1464:       assertEquals(8, Node.FLAG_NO_THROWS);
1465:       assertEquals(39, Node.EMPTY_BLOCK);
1466:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1467:       assertEquals(55, Node.INFERRED_FUNCTION);
1468:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1469:       assertEquals(50, Node.FREE_CALL);
1470:       assertEquals(40, Node.ORIGINALNAME_PROP);
1471:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1472:       assertEquals(39, Node.EMPTY_BLOCK);
1473:       assertEquals(48, Node.DIRECTIVES);
1474:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1475:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1476:       assertEquals(4095, Node.COLUMN_MASK);
1477:       assertEquals(30, Node.VAR_ARGS_NAME);
1478:       assertEquals(49, Node.DIRECT_EVAL);
1479:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1480:       assertEquals(55, Node.INFERRED_FUNCTION);
1481:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1482:       assertEquals(57, Node.LAST_PROP);
1483:       assertEquals(53, Node.INPUT_ID);
1484:       assertEquals(52, Node.LENGTH);
1485:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1486:       assertEquals(36, Node.QUOTED_PROP);
1487:       assertEquals(8, Node.FLAG_NO_THROWS);
1488:       assertEquals(57, Node.REFLECTED_OBJECT);
1489:       assertEquals(29, Node.JSDOC_INFO_PROP);
1490:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1491:       assertEquals(56, Node.CHANGE_TIME);
1492:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1493:       assertEquals(37, Node.OPT_ARG_NAME);
1494:       assertEquals(2, Node.POST_FLAG);
1495:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1496:       assertEquals(12, Node.COLUMN_BITS);
1497:       assertEquals(47, Node.IS_DISPATCHER);
1498:       assertEquals(43, Node.IS_CONSTANT_NAME);
1499:       assertEquals(32, Node.INCRDECR_PROP);
1500:       assertEquals(1, Node.DECR_FLAG);
1501:       assertEquals(46, Node.IS_NAMESPACE);
1502:       assertEquals(54, Node.SLASH_V);
1503:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1504:       
1505:       boolean boolean4 = node3.isTrue();
1506:       assertFalse(node0.equals((Object)node1));
1507:       assertFalse(node0.equals((Object)node3));
1508:       assertFalse(node1.equals((Object)node3));
1509:       assertFalse(node1.equals((Object)node2));
1510:       assertFalse(node1.equals((Object)node0));
1511:       assertFalse(node2.equals((Object)node3));
1512:       assertFalse(node2.equals((Object)node1));
1513:       assertFalse(node3.equals((Object)node1));
1514:       assertFalse(node3.equals((Object)node2));
1515:       assertFalse(node3.equals((Object)node0));
1516:       assertTrue(boolean4 == boolean3);
1517:       assertTrue(boolean4 == boolean1);
1518:       assertTrue(boolean4 == boolean2);
1519:       assertTrue(boolean4 == boolean0);
1520:       assertSame(node0, node2);
1521:       assertSame(node2, node0);
1522:       assertFalse(node0.isStringKey());
1523:       assertFalse(node0.isVar());
1524:       assertFalse(node0.isCall());
1525:       assertFalse(node0.isName());
1526:       assertTrue(node0.isString());
1527:       assertFalse(node0.isBlock());
1528:       assertEquals(0, node0.getChildCount());
1529:       assertFalse(node0.isContinue());
1530:       assertFalse(node0.isWhile());
1531:       assertFalse(node0.isDebugger());
1532:       assertFalse(node0.isParamList());
1533:       assertFalse(node0.isNumber());
1534:       assertFalse(node0.isCast());
1535:       assertEquals(40, node0.getLineno());
1536:       assertFalse(node0.isFor());
1537:       assertFalse(node0.isIf());
1538:       assertFalse(node0.hasOneChild());
1539:       assertEquals(163889, node0.getSourcePosition());
1540:       assertFalse(node0.isTry());
1541:       assertFalse(node0.isRegExp());
1542:       assertFalse(node0.hasMoreThanOneChild());
1543:       assertFalse(node0.isWith());
1544:       assertFalse(node0.isFunction());
1545:       assertFalse(node0.isCatch());
1546:       assertEquals(40, node0.getType());
1547:       assertFalse(node0.isNE());
1548:       assertFalse(node0.isInc());
1549:       assertFalse(node0.isSetterDef());
1550:       assertFalse(node0.isIn());
1551:       assertFalse(node0.isThrow());
1552:       assertFalse(node0.isHook());
1553:       assertFalse(node0.isBreak());
1554:       assertFalse(node0.isComma());
1555:       assertEquals(49, node0.getCharno());
1556:       assertFalse(node0.isThis());
1557:       assertFalse(node0.isInstanceOf());
1558:       assertFalse(node0.isFalse());
1559:       assertFalse(node0.isObjectLit());
1560:       assertFalse(node0.isAnd());
1561:       assertFalse(node0.isCase());
1562:       assertFalse(node0.isSwitch());
1563:       assertFalse(node0.isGetProp());
1564:       assertFalse(node0.isScript());
1565:       assertFalse(node0.isGetterDef());
1566:       assertFalse(node0.isNot());
1567:       assertFalse(node0.isArrayLit());
1568:       assertFalse(node0.isEmpty());
1569:       assertFalse(node0.isGetElem());
1570:       assertFalse(node0.isDelProp());
1571:       assertFalse(node0.isLabelName());
1572:       assertFalse(node0.isVoid());
1573:       assertFalse(node0.isLabel());
1574:       assertFalse(node0.isReturn());
1575:       assertFalse(node0.isExprResult());
1576:       assertFalse(node0.hasChildren());
1577:       assertFalse(node0.isDec());
1578:       assertFalse(node0.isAssign());
1579:       assertFalse(node0.isTypeOf());
1580:       assertFalse(node0.isDefaultCase());
1581:       assertFalse(node0.isAssignAdd());
1582:       assertFalse(node0.isDo());
1583:       assertFalse(node0.isNew());
1584:       assertFalse(node0.isAdd());
1585:       assertFalse(node0.isNull());
1586:       assertFalse(node0.isTrue());
1587:       assertFalse(node0.isOr());
1588:       assertFalse(node1.isVar());
1589:       assertFalse(node1.isAdd());
1590:       assertFalse(node1.isBlock());
1591:       assertFalse(node1.isCall());
1592:       assertFalse(node1.isNull());
1593:       assertFalse(node1.isParamList());
1594:       assertFalse(node1.isStringKey());
1595:       assertFalse(node1.isName());
1596:       assertFalse(node1.isReturn());
1597:       assertFalse(node1.isCatch());
1598:       assertFalse(node1.isTypeOf());
1599:       assertFalse(node1.hasMoreThanOneChild());
1600:       assertFalse(node1.hasChildren());
1601:       assertFalse(node1.isWhile());
1602:       assertFalse(node1.isAssign());
1603:       assertFalse(node1.isDec());
1604:       assertEquals(40, node1.getLineno());
1605:       assertEquals(39, node1.getType());
1606:       assertFalse(node1.isTry());
1607:       assertFalse(node1.isDebugger());
1608:       assertFalse(node1.isCast());
1609:       assertFalse(node1.isRegExp());
1610:       assertFalse(node1.isFunction());
1611:       assertFalse(node1.isAnd());
1612:       assertFalse(node1.isNE());
1613:       assertEquals(163889, node1.getSourcePosition());
1614:       assertFalse(node1.isIf());
1615:       assertFalse(node1.isContinue());
1616:       assertFalse(node1.isIn());
1617:       assertFalse(node1.isInc());
1618:       assertFalse(node1.isSetterDef());
1619:       assertFalse(node1.isThrow());
1620:       assertFalse(node1.isHook());
1621:       assertFalse(node1.isFalse());
1622:       assertFalse(node1.isBreak());
1623:       assertFalse(node1.isSwitch());
1624:       assertFalse(node1.isInstanceOf());
1625:       assertTrue(node1.isNumber());
1626:       assertFalse(node1.isGetProp());
1627:       assertFalse(node1.isObjectLit());
1628:       assertFalse(node1.isComma());
1629:       assertFalse(node1.isNot());
1630:       assertFalse(node1.isWith());
1631:       assertFalse(node1.isString());
1632:       assertFalse(node1.isScript());
1633:       assertFalse(node1.isCase());
1634:       assertEquals(49, node1.getCharno());
1635:       assertFalse(node1.isFor());
1636:       assertFalse(node1.isThis());
1637:       assertFalse(node1.hasOneChild());
1638:       assertFalse(node1.isArrayLit());
1639:       assertFalse(node1.isExprResult());
1640:       assertFalse(node1.isGetterDef());
1641:       assertFalse(node1.isDelProp());
1642:       assertFalse(node1.isGetElem());
1643:       assertFalse(node1.isTrue());
1644:       assertFalse(node1.isVoid());
1645:       assertFalse(node1.isLabelName());
1646:       assertFalse(node1.isOr());
1647:       assertEquals(0, node1.getChildCount());
1648:       assertFalse(node1.isLabel());
1649:       assertFalse(node1.isDo());
1650:       assertFalse(node1.isEmpty());
1651:       assertFalse(node1.isNew());
1652:       assertFalse(node1.isAssignAdd());
1653:       assertFalse(node1.isDefaultCase());
1654:       assertFalse(node2.isArrayLit());
1655:       assertFalse(node2.isTry());
1656:       assertFalse(node2.isEmpty());
1657:       assertFalse(node2.isRegExp());
1658:       assertFalse(node2.isDefaultCase());
1659:       assertFalse(node2.isFunction());
1660:       assertFalse(node2.isFor());
1661:       assertEquals(40, node2.getType());
1662:       assertEquals(0, node2.getChildCount());
1663:       assertFalse(node2.isCase());
1664:       assertFalse(node2.isSwitch());
1665:       assertFalse(node2.isGetterDef());
1666:       assertFalse(node2.isDebugger());
1667:       assertFalse(node2.isParamList());
1668:       assertFalse(node2.isStringKey());
1669:       assertFalse(node2.isAdd());
1670:       assertFalse(node2.isNew());
1671:       assertFalse(node2.isCall());
1672:       assertFalse(node2.isDo());
1673:       assertFalse(node2.isComma());
1674:       assertFalse(node2.isWhile());
1675:       assertFalse(node2.isVar());
1676:       assertFalse(node2.isOr());
1677:       assertFalse(node2.isNull());
1678:       assertFalse(node2.isBreak());
1679:       assertFalse(node2.isDelProp());
1680:       assertFalse(node2.isVoid());
1681:       assertFalse(node2.isName());
1682:       assertFalse(node2.isTrue());
1683:       assertFalse(node2.hasOneChild());
1684:       assertFalse(node2.isGetElem());
1685:       assertFalse(node2.isExprResult());
1686:       assertFalse(node2.isCast());
1687:       assertFalse(node2.isTypeOf());
1688:       assertFalse(node2.isScript());
1689:       assertFalse(node2.hasChildren());
1690:       assertFalse(node2.isAssign());
1691:       assertFalse(node2.isDec());
1692:       assertFalse(node2.isLabel());
1693:       assertFalse(node2.isAssignAdd());
1694:       assertEquals(40, node2.getLineno());
1695:       assertFalse(node2.isReturn());
1696:       assertFalse(node2.isObjectLit());
1697:       assertFalse(node2.isGetProp());
1698:       assertFalse(node2.isContinue());
1699:       assertFalse(node2.isNumber());
1700:       assertFalse(node2.isLabelName());
1701:       assertFalse(node2.isNot());
1702:       assertFalse(node2.isAnd());
1703:       assertFalse(node2.isHook());
1704:       assertFalse(node2.isFalse());
1705:       assertFalse(node2.isInc());
1706:       assertEquals(49, node2.getCharno());
1707:       assertFalse(node2.isSetterDef());
1708:       assertFalse(node2.isBlock());
1709:       assertTrue(node2.isString());
1710:       assertFalse(node2.isThis());
1711:       assertFalse(node2.isThrow());
1712:       assertFalse(node2.hasMoreThanOneChild());
1713:       assertFalse(node2.isIn());
1714:       assertFalse(node2.isWith());
1715:       assertFalse(node2.isInstanceOf());
1716:       assertFalse(node2.isCatch());
1717:       assertEquals(163889, node2.getSourcePosition());
1718:       assertFalse(node2.isIf());
1719:       assertFalse(node2.isNE());
1720:       assertFalse(node3.isIn());
1721:       assertTrue(node3.hasChildren());
1722:       assertTrue(node3.isReturn());
1723:       assertEquals(1, node3.getChildCount());
1724:       assertFalse(node3.isInc());
1725:       assertFalse(node3.isString());
1726:       assertFalse(node3.isCase());
1727:       assertFalse(node3.isEmpty());
1728:       assertFalse(node3.isHook());
1729:       assertFalse(node3.isFor());
1730:       assertTrue(node3.hasOneChild());
1731:       assertFalse(node3.isRegExp());
1732:       assertEquals(4, node3.getType());
1733:       assertFalse(node3.isIf());
1734:       assertFalse(node3.isTrue());
1735:       assertFalse(node3.isNE());
1736:       assertFalse(node3.isBreak());
1737:       assertFalse(node3.isVoid());
1738:       assertFalse(node3.isDelProp());
1739:       assertFalse(node3.isInstanceOf());
1740:       assertFalse(node3.isCatch());
1741:       assertFalse(node3.isWith());
1742:       assertFalse(node3.isScript());
1743:       assertFalse(node3.isThis());
1744:       assertFalse(node3.isDefaultCase());
1745:       assertFalse(node3.isTry());
1746:       assertFalse(node3.isVar());
1747:       assertFalse(node3.isArrayLit());
1748:       assertFalse(node3.isStringKey());
1749:       assertFalse(node3.isGetterDef());
1750:       assertEquals((-1), node3.getCharno());
1751:       assertFalse(node3.isSwitch());
1752:       assertFalse(node3.isParamList());
1753:       assertFalse(node3.isLabelName());
1754:       assertFalse(node3.hasMoreThanOneChild());
1755:       assertFalse(node3.isContinue());
1756:       assertFalse(node3.isLabel());
1757:       assertFalse(node3.isOr());
1758:       assertFalse(node3.isNumber());
1759:       assertFalse(node3.isWhile());
1760:       assertFalse(node3.isAdd());
1761:       assertFalse(node3.isNew());
1762:       assertFalse(node3.isAssignAdd());
1763:       assertFalse(node3.isDo());
1764:       assertFalse(node3.isCall());
1765:       assertFalse(node3.isBlock());
1766:       assertFalse(node3.isAssign());
1767:       assertFalse(node3.isDec());
1768:       assertFalse(node3.isTypeOf());
1769:       assertFalse(node3.isNull());
1770:       assertFalse(node3.isExprResult());
1771:       assertFalse(node3.isName());
1772:       assertFalse(node3.isGetElem());
1773:       assertEquals((-1), node3.getLineno());
1774:       assertFalse(node3.isAnd());
1775:       assertFalse(node3.isObjectLit());
1776:       assertFalse(node3.isComma());
1777:       assertFalse(node3.isNot());
1778:       assertFalse(node3.isSetterDef());
1779:       assertFalse(node3.isGetProp());
1780:       assertFalse(node3.isCast());
1781:       assertFalse(node3.isThrow());
1782:       assertFalse(node3.isFalse());
1783:       assertFalse(node3.isFunction());
1784:       assertFalse(node3.isDebugger());
1785:       assertEquals((-1), node3.getSourcePosition());
1786:       assertFalse(boolean4);
1787:       assertEquals(43, Node.IS_CONSTANT_NAME);
1788:       assertEquals(36, Node.QUOTED_PROP);
1789:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1790:       assertEquals(4095, Node.COLUMN_MASK);
1791:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1792:       assertEquals(48, Node.DIRECTIVES);
1793:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1794:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1795:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1796:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1797:       assertEquals(50, Node.FREE_CALL);
1798:       assertEquals(32, Node.INCRDECR_PROP);
1799:       assertEquals(12, Node.COLUMN_BITS);
1800:       assertEquals(1, Node.DECR_FLAG);
1801:       assertEquals(57, Node.LAST_PROP);
1802:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1803:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1804:       assertEquals(30, Node.VAR_ARGS_NAME);
1805:       assertEquals(52, Node.LENGTH);
1806:       assertEquals(46, Node.IS_NAMESPACE);
1807:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1808:       assertEquals(40, Node.ORIGINALNAME_PROP);
1809:       assertEquals(57, Node.REFLECTED_OBJECT);
1810:       assertEquals(54, Node.SLASH_V);
1811:       assertEquals(37, Node.OPT_ARG_NAME);
1812:       assertEquals(49, Node.DIRECT_EVAL);
1813:       assertEquals(47, Node.IS_DISPATCHER);
1814:       assertEquals(56, Node.CHANGE_TIME);
1815:       assertEquals(29, Node.JSDOC_INFO_PROP);
1816:       assertEquals(39, Node.EMPTY_BLOCK);
1817:       assertEquals(2, Node.POST_FLAG);
1818:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1819:       assertEquals(8, Node.FLAG_NO_THROWS);
1820:       assertEquals(55, Node.INFERRED_FUNCTION);
1821:       assertEquals(53, Node.INPUT_ID);
1822:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1823:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1824:       assertEquals(55, Node.INFERRED_FUNCTION);
1825:       assertEquals(43, Node.IS_CONSTANT_NAME);
1826:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1827:       assertEquals(53, Node.INPUT_ID);
1828:       assertEquals(39, Node.EMPTY_BLOCK);
1829:       assertEquals(36, Node.QUOTED_PROP);
1830:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1831:       assertEquals(50, Node.FREE_CALL);
1832:       assertEquals(8, Node.FLAG_NO_THROWS);
1833:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1834:       assertEquals(57, Node.REFLECTED_OBJECT);
1835:       assertEquals(56, Node.CHANGE_TIME);
1836:       assertEquals(37, Node.OPT_ARG_NAME);
1837:       assertEquals(48, Node.DIRECTIVES);
1838:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1839:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1840:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1841:       assertEquals(4095, Node.COLUMN_MASK);
1842:       assertEquals(1, Node.DECR_FLAG);
1843:       assertEquals(12, Node.COLUMN_BITS);
1844:       assertEquals(32, Node.INCRDECR_PROP);
1845:       assertEquals(46, Node.IS_NAMESPACE);
1846:       assertEquals(49, Node.DIRECT_EVAL);
1847:       assertEquals(57, Node.LAST_PROP);
1848:       assertEquals(54, Node.SLASH_V);
1849:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1850:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1851:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1852:       assertEquals(52, Node.LENGTH);
1853:       assertEquals(40, Node.ORIGINALNAME_PROP);
1854:       assertEquals(29, Node.JSDOC_INFO_PROP);
1855:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1856:       assertEquals(47, Node.IS_DISPATCHER);
1857:       assertEquals(30, Node.VAR_ARGS_NAME);
1858:       assertEquals(2, Node.POST_FLAG);
1859:       assertEquals(49, Node.DIRECT_EVAL);
1860:       assertEquals(30, Node.VAR_ARGS_NAME);
1861:       assertEquals(1, Node.DECR_FLAG);
1862:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1863:       assertEquals(12, Node.COLUMN_BITS);
1864:       assertEquals(57, Node.LAST_PROP);
1865:       assertEquals(46, Node.IS_NAMESPACE);
1866:       assertEquals(54, Node.SLASH_V);
1867:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1868:       assertEquals(37, Node.OPT_ARG_NAME);
1869:       assertEquals(2, Node.POST_FLAG);
1870:       assertEquals(40, Node.ORIGINALNAME_PROP);
1871:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1872:       assertEquals(50, Node.FREE_CALL);
1873:       assertEquals(32, Node.INCRDECR_PROP);
1874:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1875:       assertEquals(43, Node.IS_CONSTANT_NAME);
1876:       assertEquals(36, Node.QUOTED_PROP);
1877:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1878:       assertEquals(48, Node.DIRECTIVES);
1879:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1880:       assertEquals(4095, Node.COLUMN_MASK);
1881:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1882:       assertEquals(29, Node.JSDOC_INFO_PROP);
1883:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1884:       assertEquals(47, Node.IS_DISPATCHER);
1885:       assertEquals(57, Node.REFLECTED_OBJECT);
1886:       assertEquals(56, Node.CHANGE_TIME);
1887:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1888:       assertEquals(53, Node.INPUT_ID);
1889:       assertEquals(52, Node.LENGTH);
1890:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1891:       assertEquals(8, Node.FLAG_NO_THROWS);
1892:       assertEquals(39, Node.EMPTY_BLOCK);
1893:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1894:       assertEquals(55, Node.INFERRED_FUNCTION);
1895:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1896:       assertEquals(50, Node.FREE_CALL);
1897:       assertEquals(40, Node.ORIGINALNAME_PROP);
1898:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1899:       assertEquals(39, Node.EMPTY_BLOCK);
1900:       assertEquals(48, Node.DIRECTIVES);
1901:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1902:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1903:       assertEquals(4095, Node.COLUMN_MASK);
1904:       assertEquals(30, Node.VAR_ARGS_NAME);
1905:       assertEquals(49, Node.DIRECT_EVAL);
1906:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1907:       assertEquals(55, Node.INFERRED_FUNCTION);
1908:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1909:       assertEquals(57, Node.LAST_PROP);
1910:       assertEquals(53, Node.INPUT_ID);
1911:       assertEquals(52, Node.LENGTH);
1912:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1913:       assertEquals(36, Node.QUOTED_PROP);
1914:       assertEquals(8, Node.FLAG_NO_THROWS);
1915:       assertEquals(57, Node.REFLECTED_OBJECT);
1916:       assertEquals(29, Node.JSDOC_INFO_PROP);
1917:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1918:       assertEquals(56, Node.CHANGE_TIME);
1919:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1920:       assertEquals(37, Node.OPT_ARG_NAME);
1921:       assertEquals(2, Node.POST_FLAG);
1922:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1923:       assertEquals(12, Node.COLUMN_BITS);
1924:       assertEquals(47, Node.IS_DISPATCHER);
1925:       assertEquals(43, Node.IS_CONSTANT_NAME);
1926:       assertEquals(32, Node.INCRDECR_PROP);
1927:       assertEquals(1, Node.DECR_FLAG);
1928:       assertEquals(46, Node.IS_NAMESPACE);
1929:       assertEquals(54, Node.SLASH_V);
1930:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1931:       
1932:       Iterable<Node> iterable0 = node0.children();
1933:       assertFalse(node0.equals((Object)node1));
1934:       assertFalse(node0.equals((Object)node3));
1935:       assertSame(node0, node2);
1936:       assertFalse(iterable0.contains(node3));
1937:       assertNotNull(iterable0);
1938:       assertFalse(node0.isStringKey());
1939:       assertFalse(node0.isVar());
1940:       assertFalse(node0.isCall());
1941:       assertFalse(node0.isName());
1942:       assertTrue(node0.isString());
1943:       assertFalse(node0.isBlock());
1944:       assertEquals(0, node0.getChildCount());
1945:       assertFalse(node0.isContinue());
1946:       assertFalse(node0.isWhile());
1947:       assertFalse(node0.isDebugger());
1948:       assertFalse(node0.isParamList());
1949:       assertFalse(node0.isNumber());
1950:       assertFalse(node0.isCast());
1951:       assertEquals(40, node0.getLineno());
1952:       assertFalse(node0.isFor());
1953:       assertFalse(node0.isIf());
1954:       assertFalse(node0.hasOneChild());
1955:       assertEquals(163889, node0.getSourcePosition());
1956:       assertFalse(node0.isTry());
1957:       assertFalse(node0.isRegExp());
1958:       assertFalse(node0.hasMoreThanOneChild());
1959:       assertFalse(node0.isWith());
1960:       assertFalse(node0.isFunction());
1961:       assertFalse(node0.isCatch());
1962:       assertEquals(40, node0.getType());
1963:       assertFalse(node0.isNE());
1964:       assertFalse(node0.isInc());
1965:       assertFalse(node0.isSetterDef());
1966:       assertFalse(node0.isIn());
1967:       assertFalse(node0.isThrow());
1968:       assertFalse(node0.isHook());
1969:       assertFalse(node0.isBreak());
1970:       assertFalse(node0.isComma());
1971:       assertEquals(49, node0.getCharno());
1972:       assertFalse(node0.isThis());
1973:       assertFalse(node0.isInstanceOf());
1974:       assertFalse(node0.isFalse());
1975:       assertFalse(node0.isObjectLit());
1976:       assertFalse(node0.isAnd());
1977:       assertFalse(node0.isCase());
1978:       assertFalse(node0.isSwitch());
1979:       assertFalse(node0.isGetProp());
1980:       assertFalse(node0.isScript());
1981:       assertFalse(node0.isGetterDef());
1982:       assertFalse(node0.isNot());
1983:       assertFalse(node0.isArrayLit());
1984:       assertFalse(node0.isEmpty());
1985:       assertFalse(node0.isGetElem());
1986:       assertFalse(node0.isDelProp());
1987:       assertFalse(node0.isLabelName());
1988:       assertFalse(node0.isVoid());
1989:       assertFalse(node0.isLabel());
1990:       assertFalse(node0.isReturn());
1991:       assertFalse(node0.isExprResult());
1992:       assertFalse(node0.hasChildren());
1993:       assertFalse(node0.isDec());
1994:       assertFalse(node0.isAssign());
1995:       assertFalse(node0.isTypeOf());
1996:       assertFalse(node0.isDefaultCase());
1997:       assertFalse(node0.isAssignAdd());
1998:       assertFalse(node0.isDo());
1999:       assertFalse(node0.isNew());
2000:       assertFalse(node0.isAdd());
2001:       assertFalse(node0.isNull());
2002:       assertFalse(node0.isTrue());
2003:       assertFalse(node0.isOr());
2004:       assertEquals(43, Node.IS_CONSTANT_NAME);
2005:       assertEquals(36, Node.QUOTED_PROP);
2006:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2007:       assertEquals(4095, Node.COLUMN_MASK);
2008:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2009:       assertEquals(48, Node.DIRECTIVES);
2010:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2011:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2012:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2013:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2014:       assertEquals(50, Node.FREE_CALL);
2015:       assertEquals(32, Node.INCRDECR_PROP);
2016:       assertEquals(12, Node.COLUMN_BITS);
2017:       assertEquals(1, Node.DECR_FLAG);
2018:       assertEquals(57, Node.LAST_PROP);
2019:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2020:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2021:       assertEquals(30, Node.VAR_ARGS_NAME);
2022:       assertEquals(52, Node.LENGTH);
2023:       assertEquals(46, Node.IS_NAMESPACE);
2024:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2025:       assertEquals(40, Node.ORIGINALNAME_PROP);
2026:       assertEquals(57, Node.REFLECTED_OBJECT);
2027:       assertEquals(54, Node.SLASH_V);
2028:       assertEquals(37, Node.OPT_ARG_NAME);
2029:       assertEquals(49, Node.DIRECT_EVAL);
2030:       assertEquals(47, Node.IS_DISPATCHER);
2031:       assertEquals(56, Node.CHANGE_TIME);
2032:       assertEquals(29, Node.JSDOC_INFO_PROP);
2033:       assertEquals(39, Node.EMPTY_BLOCK);
2034:       assertEquals(2, Node.POST_FLAG);
2035:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2036:       assertEquals(8, Node.FLAG_NO_THROWS);
2037:       assertEquals(55, Node.INFERRED_FUNCTION);
2038:       assertEquals(53, Node.INPUT_ID);
2039:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2040:       
2041:       node1.putIntProp(39, 130);
2042:       assertFalse(node1.equals((Object)node3));
2043:       assertFalse(node1.equals((Object)node2));
2044:       assertFalse(node1.equals((Object)node0));
2045:       assertFalse(node1.isVar());
2046:       assertFalse(node1.isAdd());
2047:       assertFalse(node1.isBlock());
2048:       assertFalse(node1.isCall());
2049:       assertFalse(node1.isNull());
2050:       assertFalse(node1.isParamList());
2051:       assertFalse(node1.isStringKey());
2052:       assertFalse(node1.isName());
2053:       assertFalse(node1.isReturn());
2054:       assertFalse(node1.isCatch());
2055:       assertFalse(node1.isTypeOf());
2056:       assertFalse(node1.hasMoreThanOneChild());
2057:       assertFalse(node1.hasChildren());
2058:       assertFalse(node1.isWhile());
2059:       assertFalse(node1.isAssign());
2060:       assertFalse(node1.isDec());
2061:       assertEquals(40, node1.getLineno());
2062:       assertEquals(39, node1.getType());
2063:       assertFalse(node1.isTry());
2064:       assertFalse(node1.isDebugger());
2065:       assertFalse(node1.isCast());
2066:       assertFalse(node1.isRegExp());
2067:       assertFalse(node1.isFunction());
2068:       assertFalse(node1.isAnd());
2069:       assertFalse(node1.isNE());
2070:       assertEquals(163889, node1.getSourcePosition());
2071:       assertFalse(node1.isIf());
2072:       assertFalse(node1.isContinue());
2073:       assertFalse(node1.isIn());
2074:       assertFalse(node1.isInc());
2075:       assertFalse(node1.isSetterDef());
2076:       assertFalse(node1.isThrow());
2077:       assertFalse(node1.isHook());
2078:       assertFalse(node1.isFalse());
2079:       assertFalse(node1.isBreak());
2080:       assertFalse(node1.isSwitch());
2081:       assertFalse(node1.isInstanceOf());
2082:       assertTrue(node1.isNumber());
2083:       assertFalse(node1.isGetProp());
2084:       assertFalse(node1.isObjectLit());
2085:       assertFalse(node1.isComma());
2086:       assertFalse(node1.isNot());
2087:       assertFalse(node1.isWith());
2088:       assertFalse(node1.isString());
2089:       assertFalse(node1.isScript());
2090:       assertFalse(node1.isCase());
2091:       assertEquals(49, node1.getCharno());
2092:       assertFalse(node1.isFor());
2093:       assertFalse(node1.isThis());
2094:       assertFalse(node1.hasOneChild());
2095:       assertFalse(node1.isArrayLit());
2096:       assertFalse(node1.isExprResult());
2097:       assertFalse(node1.isGetterDef());
2098:       assertFalse(node1.isDelProp());
2099:       assertFalse(node1.isGetElem());
2100:       assertFalse(node1.isTrue());
2101:       assertFalse(node1.isVoid());
2102:       assertFalse(node1.isLabelName());
2103:       assertFalse(node1.isOr());
2104:       assertEquals(0, node1.getChildCount());
2105:       assertFalse(node1.isLabel());
2106:       assertFalse(node1.isDo());
2107:       assertFalse(node1.isEmpty());
2108:       assertFalse(node1.isNew());
2109:       assertFalse(node1.isAssignAdd());
2110:       assertFalse(node1.isDefaultCase());
2111:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2112:       assertEquals(55, Node.INFERRED_FUNCTION);
2113:       assertEquals(43, Node.IS_CONSTANT_NAME);
2114:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2115:       assertEquals(53, Node.INPUT_ID);
2116:       assertEquals(39, Node.EMPTY_BLOCK);
2117:       assertEquals(36, Node.QUOTED_PROP);
2118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2119:       assertEquals(50, Node.FREE_CALL);
2120:       assertEquals(8, Node.FLAG_NO_THROWS);
2121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2122:       assertEquals(57, Node.REFLECTED_OBJECT);
2123:       assertEquals(56, Node.CHANGE_TIME);
2124:       assertEquals(37, Node.OPT_ARG_NAME);
2125:       assertEquals(48, Node.DIRECTIVES);
2126:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2127:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2128:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2129:       assertEquals(4095, Node.COLUMN_MASK);
2130:       assertEquals(1, Node.DECR_FLAG);
2131:       assertEquals(12, Node.COLUMN_BITS);
2132:       assertEquals(32, Node.INCRDECR_PROP);
2133:       assertEquals(46, Node.IS_NAMESPACE);
2134:       assertEquals(49, Node.DIRECT_EVAL);
2135:       assertEquals(57, Node.LAST_PROP);
2136:       assertEquals(54, Node.SLASH_V);
2137:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2138:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2139:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2140:       assertEquals(52, Node.LENGTH);
2141:       assertEquals(40, Node.ORIGINALNAME_PROP);
2142:       assertEquals(29, Node.JSDOC_INFO_PROP);
2143:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2144:       assertEquals(47, Node.IS_DISPATCHER);
2145:       assertEquals(30, Node.VAR_ARGS_NAME);
2146:       assertEquals(2, Node.POST_FLAG);
2147:   }
2148: }
RegularFileObject[/tmp/EvoSuite_59_1628256015694/com/google/javascript/rhino/Node_59_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:16 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_59_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_59_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_59_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.InputId",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.javascript.rhino.jstype.TemplatizedType",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.Iterables",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.common.collect.Sets$ImprovedAbstractSet",
354:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
355:       "com.google.common.collect.Hashing",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
358:       "com.google.javascript.rhino.JSTypeExpression",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
367:     );
368:   }
369: }

[MASTER] 13:20:16.357 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
byte[] byteArray0 = new byte[2];
byteArray0[1] = (byte)0;
boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertEquals(2, byteArray0.length);
assertFalse(boolean0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);

Node node0 = Node.newString("", 2251, (int) (byte)0);
assertNotNull(node0);
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(9220096, node0.getSourcePosition());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertEquals(2251, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

boolean boolean1 = node0.wasEmptyNode();
assertTrue(boolean1 == boolean0);
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(9220096, node0.getSourcePosition());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertEquals(2251, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(boolean1);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Node node1 = Node.newNumber(4055.9484, 40, 49);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isCatch());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertEquals(40, node1.getLineno());
assertEquals(39, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isNE());
assertEquals(163889, node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertEquals(49, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

Node node2 = node0.copyInformationFrom(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertSame(node0, node2);
assertSame(node2, node0);
assertNotNull(node2);
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertEquals(40, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertEquals(163889, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertEquals(49, node0.getCharno());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isCatch());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertEquals(40, node1.getLineno());
assertEquals(39, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isNE());
assertEquals(163889, node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertEquals(49, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isDo());
assertFalse(node2.isComma());
assertFalse(node2.isWhile());
assertFalse(node2.isVar());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.isScript());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertEquals(40, node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isContinue());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertEquals(49, node2.getCharno());
assertFalse(node2.isSetterDef());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(163889, node2.getSourcePosition());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);

boolean boolean2 = node0.getBooleanProp(16);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertSame(node0, node2);
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertEquals(40, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertEquals(163889, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertEquals(49, node0.getCharno());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(boolean2);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

boolean boolean3 = node2.isReturn();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertEquals(40, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertEquals(163889, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertEquals(49, node0.getCharno());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isCatch());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertEquals(40, node1.getLineno());
assertEquals(39, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isNE());
assertEquals(163889, node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertEquals(49, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isDo());
assertFalse(node2.isComma());
assertFalse(node2.isWhile());
assertFalse(node2.isVar());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.isScript());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertEquals(40, node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isContinue());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertEquals(49, node2.getCharno());
assertFalse(node2.isSetterDef());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(163889, node2.getSourcePosition());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(boolean3);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);

Node node3 = new Node(4, node0, node1, node0, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertNotNull(node3);
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertEquals(40, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertEquals(163889, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertEquals(49, node0.getCharno());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isCatch());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertEquals(40, node1.getLineno());
assertEquals(39, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isNE());
assertEquals(163889, node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertEquals(49, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isDo());
assertFalse(node2.isComma());
assertFalse(node2.isWhile());
assertFalse(node2.isVar());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.isScript());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertEquals(40, node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isContinue());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertEquals(49, node2.getCharno());
assertFalse(node2.isSetterDef());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(163889, node2.getSourcePosition());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node3.isIn());
assertTrue(node3.hasChildren());
assertTrue(node3.isReturn());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isInc());
assertFalse(node3.isString());
assertFalse(node3.isCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isHook());
assertFalse(node3.isFor());
assertTrue(node3.hasOneChild());
assertFalse(node3.isRegExp());
assertEquals(4, node3.getType());
assertFalse(node3.isIf());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isBreak());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isScript());
assertFalse(node3.isThis());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isVar());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isLabelName());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isLabel());
assertFalse(node3.isOr());
assertFalse(node3.isNumber());
assertFalse(node3.isWhile());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isCall());
assertFalse(node3.isBlock());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNull());
assertFalse(node3.isExprResult());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isComma());
assertFalse(node3.isNot());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean4 = node3.isTrue();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertEquals(40, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertEquals(163889, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertEquals(49, node0.getCharno());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isCatch());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertEquals(40, node1.getLineno());
assertEquals(39, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isNE());
assertEquals(163889, node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertEquals(49, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isDo());
assertFalse(node2.isComma());
assertFalse(node2.isWhile());
assertFalse(node2.isVar());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.isScript());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertEquals(40, node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isContinue());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertEquals(49, node2.getCharno());
assertFalse(node2.isSetterDef());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(163889, node2.getSourcePosition());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node3.isIn());
assertTrue(node3.hasChildren());
assertTrue(node3.isReturn());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isInc());
assertFalse(node3.isString());
assertFalse(node3.isCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isHook());
assertFalse(node3.isFor());
assertTrue(node3.hasOneChild());
assertFalse(node3.isRegExp());
assertEquals(4, node3.getType());
assertFalse(node3.isIf());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isBreak());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isScript());
assertFalse(node3.isThis());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isVar());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isLabelName());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isLabel());
assertFalse(node3.isOr());
assertFalse(node3.isNumber());
assertFalse(node3.isWhile());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isCall());
assertFalse(node3.isBlock());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNull());
assertFalse(node3.isExprResult());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isComma());
assertFalse(node3.isNot());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertFalse(boolean4);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertSame(node0, node2);
assertFalse(iterable0.contains(node3));
assertNotNull(iterable0);
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertEquals(40, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertEquals(163889, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertEquals(49, node0.getCharno());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

node1.putIntProp(39, 130);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isCatch());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertEquals(40, node1.getLineno());
assertEquals(39, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isNE());
assertEquals(163889, node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertEquals(49, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);


[MASTER] 13:20:20.102 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_75_1628256019864/com/google/javascript/rhino/Node_75_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_75_1628256019864/com/google/javascript/rhino/Node_75_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:20.102 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:20.102 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:20.103 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1393
[MASTER] 13:20:20.105 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_75_1628256019864/com/google/javascript/rhino/Node_75_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:19 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.JSTypeRegistry;
13: import com.google.javascript.rhino.jstype.ModificationVisitor;
14: import java.util.Set;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_75_tmp__ESTest extends Node_75_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Node node0 = Node.newString("O0c~]Bu;-##BCb|,z?U", (-1049), 126);
25:       assertNotNull(node0);
26:       assertFalse(node0.isDo());
27:       assertFalse(node0.isContinue());
28:       assertFalse(node0.hasMoreThanOneChild());
29:       assertFalse(node0.isAdd());
30:       assertFalse(node0.isReturn());
31:       assertFalse(node0.isLabel());
32:       assertFalse(node0.isNew());
33:       assertFalse(node0.isBlock());
34:       assertTrue(node0.isString());
35:       assertFalse(node0.isAssignAdd());
36:       assertFalse(node0.isVar());
37:       assertFalse(node0.isWhile());
38:       assertFalse(node0.hasChildren());
39:       assertFalse(node0.isAssign());
40:       assertFalse(node0.isTypeOf());
41:       assertFalse(node0.isDec());
42:       assertFalse(node0.isGetElem());
43:       assertFalse(node0.isCall());
44:       assertFalse(node0.isSetterDef());
45:       assertFalse(node0.isOr());
46:       assertEquals((-1), node0.getLineno());
47:       assertFalse(node0.isName());
48:       assertFalse(node0.isNull());
49:       assertFalse(node0.isDefaultCase());
50:       assertFalse(node0.isWith());
51:       assertFalse(node0.isRegExp());
52:       assertFalse(node0.isScript());
53:       assertFalse(node0.isInstanceOf());
54:       assertFalse(node0.isCatch());
55:       assertEquals(0, node0.getChildCount());
56:       assertFalse(node0.isTry());
57:       assertFalse(node0.hasOneChild());
58:       assertFalse(node0.isThis());
59:       assertFalse(node0.isFor());
60:       assertFalse(node0.isGetterDef());
61:       assertFalse(node0.isNumber());
62:       assertFalse(node0.isLabelName());
63:       assertFalse(node0.isArrayLit());
64:       assertEquals((-1), node0.getCharno());
65:       assertFalse(node0.isSwitch());
66:       assertFalse(node0.isStringKey());
67:       assertFalse(node0.isParamList());
68:       assertFalse(node0.isCase());
69:       assertFalse(node0.isInc());
70:       assertFalse(node0.isHook());
71:       assertFalse(node0.isThrow());
72:       assertFalse(node0.isBreak());
73:       assertFalse(node0.isDelProp());
74:       assertFalse(node0.isIf());
75:       assertFalse(node0.isComma());
76:       assertFalse(node0.isEmpty());
77:       assertFalse(node0.isIn());
78:       assertFalse(node0.isVoid());
79:       assertFalse(node0.isTrue());
80:       assertFalse(node0.isNE());
81:       assertFalse(node0.isNot());
82:       assertFalse(node0.isObjectLit());
83:       assertFalse(node0.isExprResult());
84:       assertFalse(node0.isFunction());
85:       assertEquals(40, node0.getType());
86:       assertEquals((-1), node0.getSourcePosition());
87:       assertFalse(node0.isGetProp());
88:       assertFalse(node0.isFalse());
89:       assertFalse(node0.isCast());
90:       assertFalse(node0.isDebugger());
91:       assertFalse(node0.isAnd());
92:       assertEquals(48, Node.DIRECTIVES);
93:       assertEquals(8, Node.FLAG_NO_THROWS);
94:       assertEquals(39, Node.EMPTY_BLOCK);
95:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
96:       assertEquals(40, Node.ORIGINALNAME_PROP);
97:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
98:       assertEquals(4095, Node.COLUMN_MASK);
99:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
100:       assertEquals(53, Node.INPUT_ID);
101:       assertEquals(36, Node.QUOTED_PROP);
102:       assertEquals(57, Node.LAST_PROP);
103:       assertEquals(57, Node.REFLECTED_OBJECT);
104:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
105:       assertEquals(52, Node.LENGTH);
106:       assertEquals(15, Node.NO_SIDE_EFFECTS);
107:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
108:       assertEquals(29, Node.JSDOC_INFO_PROP);
109:       assertEquals(55, Node.INFERRED_FUNCTION);
110:       assertEquals(2, Node.POST_FLAG);
111:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
112:       assertEquals(37, Node.OPT_ARG_NAME);
113:       assertEquals(32, Node.INCRDECR_PROP);
114:       assertEquals(46, Node.IS_NAMESPACE);
115:       assertEquals(47, Node.IS_DISPATCHER);
116:       assertEquals(12, Node.COLUMN_BITS);
117:       assertEquals(56, Node.CHANGE_TIME);
118:       assertEquals(30, Node.VAR_ARGS_NAME);
119:       assertEquals(49, Node.DIRECT_EVAL);
120:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
121:       assertEquals(54, Node.SLASH_V);
122:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
123:       assertEquals(43, Node.IS_CONSTANT_NAME);
124:       assertEquals(50, Node.FREE_CALL);
125:       assertEquals(51, Node.STATIC_SOURCE_FILE);
126:       assertEquals(1, Node.DECR_FLAG);
127:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
128:       
129:       node0.putProp((-666), "O0c~]Bu;-##BCb|,z?U");
130:       assertFalse(node0.isDo());
131:       assertFalse(node0.isContinue());
132:       assertFalse(node0.hasMoreThanOneChild());
133:       assertFalse(node0.isAdd());
134:       assertFalse(node0.isReturn());
135:       assertFalse(node0.isLabel());
136:       assertFalse(node0.isNew());
137:       assertFalse(node0.isBlock());
138:       assertTrue(node0.isString());
139:       assertFalse(node0.isAssignAdd());
140:       assertFalse(node0.isVar());
141:       assertFalse(node0.isWhile());
142:       assertFalse(node0.hasChildren());
143:       assertFalse(node0.isAssign());
144:       assertFalse(node0.isTypeOf());
145:       assertFalse(node0.isDec());
146:       assertFalse(node0.isGetElem());
147:       assertFalse(node0.isCall());
148:       assertFalse(node0.isSetterDef());
149:       assertFalse(node0.isOr());
150:       assertEquals((-1), node0.getLineno());
151:       assertFalse(node0.isName());
152:       assertFalse(node0.isNull());
153:       assertFalse(node0.isDefaultCase());
154:       assertFalse(node0.isWith());
155:       assertFalse(node0.isRegExp());
156:       assertFalse(node0.isScript());
157:       assertFalse(node0.isInstanceOf());
158:       assertFalse(node0.isCatch());
159:       assertEquals(0, node0.getChildCount());
160:       assertFalse(node0.isTry());
161:       assertFalse(node0.hasOneChild());
162:       assertFalse(node0.isThis());
163:       assertFalse(node0.isFor());
164:       assertFalse(node0.isGetterDef());
165:       assertFalse(node0.isNumber());
166:       assertFalse(node0.isLabelName());
167:       assertFalse(node0.isArrayLit());
168:       assertEquals((-1), node0.getCharno());
169:       assertFalse(node0.isSwitch());
170:       assertFalse(node0.isStringKey());
171:       assertFalse(node0.isParamList());
172:       assertFalse(node0.isCase());
173:       assertFalse(node0.isInc());
174:       assertFalse(node0.isHook());
175:       assertFalse(node0.isThrow());
176:       assertFalse(node0.isBreak());
177:       assertFalse(node0.isDelProp());
178:       assertFalse(node0.isIf());
179:       assertFalse(node0.isComma());
180:       assertFalse(node0.isEmpty());
181:       assertFalse(node0.isIn());
182:       assertFalse(node0.isVoid());
183:       assertFalse(node0.isTrue());
184:       assertFalse(node0.isNE());
185:       assertFalse(node0.isNot());
186:       assertFalse(node0.isObjectLit());
187:       assertFalse(node0.isExprResult());
188:       assertFalse(node0.isFunction());
189:       assertEquals(40, node0.getType());
190:       assertEquals((-1), node0.getSourcePosition());
191:       assertFalse(node0.isGetProp());
192:       assertFalse(node0.isFalse());
193:       assertFalse(node0.isCast());
194:       assertFalse(node0.isDebugger());
195:       assertFalse(node0.isAnd());
196:       assertEquals(48, Node.DIRECTIVES);
197:       assertEquals(8, Node.FLAG_NO_THROWS);
198:       assertEquals(39, Node.EMPTY_BLOCK);
199:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
200:       assertEquals(40, Node.ORIGINALNAME_PROP);
201:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
202:       assertEquals(4095, Node.COLUMN_MASK);
203:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
204:       assertEquals(53, Node.INPUT_ID);
205:       assertEquals(36, Node.QUOTED_PROP);
206:       assertEquals(57, Node.LAST_PROP);
207:       assertEquals(57, Node.REFLECTED_OBJECT);
208:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
209:       assertEquals(52, Node.LENGTH);
210:       assertEquals(15, Node.NO_SIDE_EFFECTS);
211:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
212:       assertEquals(29, Node.JSDOC_INFO_PROP);
213:       assertEquals(55, Node.INFERRED_FUNCTION);
214:       assertEquals(2, Node.POST_FLAG);
215:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
216:       assertEquals(37, Node.OPT_ARG_NAME);
217:       assertEquals(32, Node.INCRDECR_PROP);
218:       assertEquals(46, Node.IS_NAMESPACE);
219:       assertEquals(47, Node.IS_DISPATCHER);
220:       assertEquals(12, Node.COLUMN_BITS);
221:       assertEquals(56, Node.CHANGE_TIME);
222:       assertEquals(30, Node.VAR_ARGS_NAME);
223:       assertEquals(49, Node.DIRECT_EVAL);
224:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
225:       assertEquals(54, Node.SLASH_V);
226:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
227:       assertEquals(43, Node.IS_CONSTANT_NAME);
228:       assertEquals(50, Node.FREE_CALL);
229:       assertEquals(51, Node.STATIC_SOURCE_FILE);
230:       assertEquals(1, Node.DECR_FLAG);
231:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
232:       
233:       Set<String> set0 = node0.getDirectives();
234:       assertNull(set0);
235:       assertFalse(node0.isDo());
236:       assertFalse(node0.isContinue());
237:       assertFalse(node0.hasMoreThanOneChild());
238:       assertFalse(node0.isAdd());
239:       assertFalse(node0.isReturn());
240:       assertFalse(node0.isLabel());
241:       assertFalse(node0.isNew());
242:       assertFalse(node0.isBlock());
243:       assertTrue(node0.isString());
244:       assertFalse(node0.isAssignAdd());
245:       assertFalse(node0.isVar());
246:       assertFalse(node0.isWhile());
247:       assertFalse(node0.hasChildren());
248:       assertFalse(node0.isAssign());
249:       assertFalse(node0.isTypeOf());
250:       assertFalse(node0.isDec());
251:       assertFalse(node0.isGetElem());
252:       assertFalse(node0.isCall());
253:       assertFalse(node0.isSetterDef());
254:       assertFalse(node0.isOr());
255:       assertEquals((-1), node0.getLineno());
256:       assertFalse(node0.isName());
257:       assertFalse(node0.isNull());
258:       assertFalse(node0.isDefaultCase());
259:       assertFalse(node0.isWith());
260:       assertFalse(node0.isRegExp());
261:       assertFalse(node0.isScript());
262:       assertFalse(node0.isInstanceOf());
263:       assertFalse(node0.isCatch());
264:       assertEquals(0, node0.getChildCount());
265:       assertFalse(node0.isTry());
266:       assertFalse(node0.hasOneChild());
267:       assertFalse(node0.isThis());
268:       assertFalse(node0.isFor());
269:       assertFalse(node0.isGetterDef());
270:       assertFalse(node0.isNumber());
271:       assertFalse(node0.isLabelName());
272:       assertFalse(node0.isArrayLit());
273:       assertEquals((-1), node0.getCharno());
274:       assertFalse(node0.isSwitch());
275:       assertFalse(node0.isStringKey());
276:       assertFalse(node0.isParamList());
277:       assertFalse(node0.isCase());
278:       assertFalse(node0.isInc());
279:       assertFalse(node0.isHook());
280:       assertFalse(node0.isThrow());
281:       assertFalse(node0.isBreak());
282:       assertFalse(node0.isDelProp());
283:       assertFalse(node0.isIf());
284:       assertFalse(node0.isComma());
285:       assertFalse(node0.isEmpty());
286:       assertFalse(node0.isIn());
287:       assertFalse(node0.isVoid());
288:       assertFalse(node0.isTrue());
289:       assertFalse(node0.isNE());
290:       assertFalse(node0.isNot());
291:       assertFalse(node0.isObjectLit());
292:       assertFalse(node0.isExprResult());
293:       assertFalse(node0.isFunction());
294:       assertEquals(40, node0.getType());
295:       assertEquals((-1), node0.getSourcePosition());
296:       assertFalse(node0.isGetProp());
297:       assertFalse(node0.isFalse());
298:       assertFalse(node0.isCast());
299:       assertFalse(node0.isDebugger());
300:       assertFalse(node0.isAnd());
301:       assertEquals(48, Node.DIRECTIVES);
302:       assertEquals(8, Node.FLAG_NO_THROWS);
303:       assertEquals(39, Node.EMPTY_BLOCK);
304:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
305:       assertEquals(40, Node.ORIGINALNAME_PROP);
306:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
307:       assertEquals(4095, Node.COLUMN_MASK);
308:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
309:       assertEquals(53, Node.INPUT_ID);
310:       assertEquals(36, Node.QUOTED_PROP);
311:       assertEquals(57, Node.LAST_PROP);
312:       assertEquals(57, Node.REFLECTED_OBJECT);
313:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
314:       assertEquals(52, Node.LENGTH);
315:       assertEquals(15, Node.NO_SIDE_EFFECTS);
316:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
317:       assertEquals(29, Node.JSDOC_INFO_PROP);
318:       assertEquals(55, Node.INFERRED_FUNCTION);
319:       assertEquals(2, Node.POST_FLAG);
320:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
321:       assertEquals(37, Node.OPT_ARG_NAME);
322:       assertEquals(32, Node.INCRDECR_PROP);
323:       assertEquals(46, Node.IS_NAMESPACE);
324:       assertEquals(47, Node.IS_DISPATCHER);
325:       assertEquals(12, Node.COLUMN_BITS);
326:       assertEquals(56, Node.CHANGE_TIME);
327:       assertEquals(30, Node.VAR_ARGS_NAME);
328:       assertEquals(49, Node.DIRECT_EVAL);
329:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
330:       assertEquals(54, Node.SLASH_V);
331:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
332:       assertEquals(43, Node.IS_CONSTANT_NAME);
333:       assertEquals(50, Node.FREE_CALL);
334:       assertEquals(51, Node.STATIC_SOURCE_FILE);
335:       assertEquals(1, Node.DECR_FLAG);
336:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
337:       
338:       node0.setDirectives((Set<String>) null);
339:       assertFalse(node0.isDo());
340:       assertFalse(node0.isContinue());
341:       assertFalse(node0.hasMoreThanOneChild());
342:       assertFalse(node0.isAdd());
343:       assertFalse(node0.isReturn());
344:       assertFalse(node0.isLabel());
345:       assertFalse(node0.isNew());
346:       assertFalse(node0.isBlock());
347:       assertTrue(node0.isString());
348:       assertFalse(node0.isAssignAdd());
349:       assertFalse(node0.isVar());
350:       assertFalse(node0.isWhile());
351:       assertFalse(node0.hasChildren());
352:       assertFalse(node0.isAssign());
353:       assertFalse(node0.isTypeOf());
354:       assertFalse(node0.isDec());
355:       assertFalse(node0.isGetElem());
356:       assertFalse(node0.isCall());
357:       assertFalse(node0.isSetterDef());
358:       assertFalse(node0.isOr());
359:       assertEquals((-1), node0.getLineno());
360:       assertFalse(node0.isName());
361:       assertFalse(node0.isNull());
362:       assertFalse(node0.isDefaultCase());
363:       assertFalse(node0.isWith());
364:       assertFalse(node0.isRegExp());
365:       assertFalse(node0.isScript());
366:       assertFalse(node0.isInstanceOf());
367:       assertFalse(node0.isCatch());
368:       assertEquals(0, node0.getChildCount());
369:       assertFalse(node0.isTry());
370:       assertFalse(node0.hasOneChild());
371:       assertFalse(node0.isThis());
372:       assertFalse(node0.isFor());
373:       assertFalse(node0.isGetterDef());
374:       assertFalse(node0.isNumber());
375:       assertFalse(node0.isLabelName());
376:       assertFalse(node0.isArrayLit());
377:       assertEquals((-1), node0.getCharno());
378:       assertFalse(node0.isSwitch());
379:       assertFalse(node0.isStringKey());
380:       assertFalse(node0.isParamList());
381:       assertFalse(node0.isCase());
382:       assertFalse(node0.isInc());
383:       assertFalse(node0.isHook());
384:       assertFalse(node0.isThrow());
385:       assertFalse(node0.isBreak());
386:       assertFalse(node0.isDelProp());
387:       assertFalse(node0.isIf());
388:       assertFalse(node0.isComma());
389:       assertFalse(node0.isEmpty());
390:       assertFalse(node0.isIn());
391:       assertFalse(node0.isVoid());
392:       assertFalse(node0.isTrue());
393:       assertFalse(node0.isNE());
394:       assertFalse(node0.isNot());
395:       assertFalse(node0.isObjectLit());
396:       assertFalse(node0.isExprResult());
397:       assertFalse(node0.isFunction());
398:       assertEquals(40, node0.getType());
399:       assertEquals((-1), node0.getSourcePosition());
400:       assertFalse(node0.isGetProp());
401:       assertFalse(node0.isFalse());
402:       assertFalse(node0.isCast());
403:       assertFalse(node0.isDebugger());
404:       assertFalse(node0.isAnd());
405:       assertEquals(48, Node.DIRECTIVES);
406:       assertEquals(8, Node.FLAG_NO_THROWS);
407:       assertEquals(39, Node.EMPTY_BLOCK);
408:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
409:       assertEquals(40, Node.ORIGINALNAME_PROP);
410:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
411:       assertEquals(4095, Node.COLUMN_MASK);
412:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
413:       assertEquals(53, Node.INPUT_ID);
414:       assertEquals(36, Node.QUOTED_PROP);
415:       assertEquals(57, Node.LAST_PROP);
416:       assertEquals(57, Node.REFLECTED_OBJECT);
417:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
418:       assertEquals(52, Node.LENGTH);
419:       assertEquals(15, Node.NO_SIDE_EFFECTS);
420:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
421:       assertEquals(29, Node.JSDOC_INFO_PROP);
422:       assertEquals(55, Node.INFERRED_FUNCTION);
423:       assertEquals(2, Node.POST_FLAG);
424:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
425:       assertEquals(37, Node.OPT_ARG_NAME);
426:       assertEquals(32, Node.INCRDECR_PROP);
427:       assertEquals(46, Node.IS_NAMESPACE);
428:       assertEquals(47, Node.IS_DISPATCHER);
429:       assertEquals(12, Node.COLUMN_BITS);
430:       assertEquals(56, Node.CHANGE_TIME);
431:       assertEquals(30, Node.VAR_ARGS_NAME);
432:       assertEquals(49, Node.DIRECT_EVAL);
433:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
434:       assertEquals(54, Node.SLASH_V);
435:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
436:       assertEquals(43, Node.IS_CONSTANT_NAME);
437:       assertEquals(50, Node.FREE_CALL);
438:       assertEquals(51, Node.STATIC_SOURCE_FILE);
439:       assertEquals(1, Node.DECR_FLAG);
440:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
441:       
442:       Node node1 = Node.newNumber((double) 46, 57, (-1660));
443:       assertFalse(node1.equals((Object)node0));
444:       assertNotNull(node1);
445:       assertEquals((-1), node1.getSourcePosition());
446:       assertFalse(node1.hasChildren());
447:       assertFalse(node1.isLabel());
448:       assertFalse(node1.isAssign());
449:       assertFalse(node1.isDec());
450:       assertFalse(node1.isOr());
451:       assertFalse(node1.isTypeOf());
452:       assertFalse(node1.hasMoreThanOneChild());
453:       assertFalse(node1.hasOneChild());
454:       assertEquals(39, node1.getType());
455:       assertFalse(node1.isReturn());
456:       assertFalse(node1.isWhile());
457:       assertFalse(node1.isDo());
458:       assertFalse(node1.isAssignAdd());
459:       assertFalse(node1.isScript());
460:       assertFalse(node1.isNot());
461:       assertFalse(node1.isContinue());
462:       assertFalse(node1.isObjectLit());
463:       assertFalse(node1.isAnd());
464:       assertFalse(node1.isCast());
465:       assertFalse(node1.isLabelName());
466:       assertFalse(node1.isStringKey());
467:       assertFalse(node1.isComma());
468:       assertFalse(node1.isNull());
469:       assertFalse(node1.isBreak());
470:       assertFalse(node1.isGetProp());
471:       assertEquals(0, node1.getChildCount());
472:       assertFalse(node1.isVar());
473:       assertFalse(node1.isDefaultCase());
474:       assertFalse(node1.isExprResult());
475:       assertFalse(node1.isTrue());
476:       assertFalse(node1.isVoid());
477:       assertFalse(node1.isAdd());
478:       assertFalse(node1.isNew());
479:       assertFalse(node1.isCall());
480:       assertFalse(node1.isGetElem());
481:       assertFalse(node1.isDelProp());
482:       assertFalse(node1.isName());
483:       assertFalse(node1.isNE());
484:       assertFalse(node1.isEmpty());
485:       assertFalse(node1.isGetterDef());
486:       assertFalse(node1.isIn());
487:       assertFalse(node1.isCase());
488:       assertTrue(node1.isNumber());
489:       assertFalse(node1.isFor());
490:       assertFalse(node1.isTry());
491:       assertFalse(node1.isFunction());
492:       assertFalse(node1.isDebugger());
493:       assertEquals((-1), node1.getCharno());
494:       assertFalse(node1.isString());
495:       assertFalse(node1.isArrayLit());
496:       assertFalse(node1.isSwitch());
497:       assertFalse(node1.isThis());
498:       assertFalse(node1.isParamList());
499:       assertFalse(node1.isSetterDef());
500:       assertFalse(node1.isInstanceOf());
501:       assertFalse(node1.isFalse());
502:       assertFalse(node1.isThrow());
503:       assertFalse(node1.isHook());
504:       assertFalse(node1.isInc());
505:       assertFalse(node1.isBlock());
506:       assertFalse(node1.isRegExp());
507:       assertFalse(node1.isWith());
508:       assertFalse(node1.isCatch());
509:       assertEquals((-1), node1.getLineno());
510:       assertFalse(node1.isIf());
511:       assertEquals(57, Node.REFLECTED_OBJECT);
512:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
513:       assertEquals(54, Node.SLASH_V);
514:       assertEquals(57, Node.LAST_PROP);
515:       assertEquals(30, Node.VAR_ARGS_NAME);
516:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
517:       assertEquals(49, Node.DIRECT_EVAL);
518:       assertEquals(40, Node.ORIGINALNAME_PROP);
519:       assertEquals(32, Node.INCRDECR_PROP);
520:       assertEquals(46, Node.IS_NAMESPACE);
521:       assertEquals(51, Node.STATIC_SOURCE_FILE);
522:       assertEquals(12, Node.COLUMN_BITS);
523:       assertEquals(1, Node.DECR_FLAG);
524:       assertEquals(50, Node.FREE_CALL);
525:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
526:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
527:       assertEquals(53, Node.INPUT_ID);
528:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
529:       assertEquals(43, Node.IS_CONSTANT_NAME);
530:       assertEquals(47, Node.IS_DISPATCHER);
531:       assertEquals(2, Node.POST_FLAG);
532:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
533:       assertEquals(4095, Node.COLUMN_MASK);
534:       assertEquals(37, Node.OPT_ARG_NAME);
535:       assertEquals(48, Node.DIRECTIVES);
536:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
537:       assertEquals(56, Node.CHANGE_TIME);
538:       assertEquals(29, Node.JSDOC_INFO_PROP);
539:       assertEquals(36, Node.QUOTED_PROP);
540:       assertEquals(15, Node.NO_SIDE_EFFECTS);
541:       assertEquals(39, Node.EMPTY_BLOCK);
542:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
543:       assertEquals(55, Node.INFERRED_FUNCTION);
544:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
545:       assertEquals(52, Node.LENGTH);
546:       assertEquals(8, Node.FLAG_NO_THROWS);
547:       
548:       Node node2 = new Node((-1227), node0, node0, node0, node1, 49, 51);
549:       assertFalse(node0.equals((Object)node1));
550:       assertFalse(node1.equals((Object)node0));
551:       assertFalse(node2.equals((Object)node1));
552:       assertFalse(node2.equals((Object)node0));
553:       assertNotNull(node2);
554:       assertFalse(node0.isDo());
555:       assertFalse(node0.isContinue());
556:       assertFalse(node0.hasMoreThanOneChild());
557:       assertFalse(node0.isAdd());
558:       assertFalse(node0.isReturn());
559:       assertFalse(node0.isLabel());
560:       assertFalse(node0.isNew());
561:       assertFalse(node0.isBlock());
562:       assertTrue(node0.isString());
563:       assertFalse(node0.isAssignAdd());
564:       assertFalse(node0.isVar());
565:       assertFalse(node0.isWhile());
566:       assertFalse(node0.hasChildren());
567:       assertFalse(node0.isAssign());
568:       assertFalse(node0.isTypeOf());
569:       assertFalse(node0.isDec());
570:       assertFalse(node0.isGetElem());
571:       assertFalse(node0.isCall());
572:       assertFalse(node0.isSetterDef());
573:       assertFalse(node0.isOr());
574:       assertEquals((-1), node0.getLineno());
575:       assertFalse(node0.isName());
576:       assertFalse(node0.isNull());
577:       assertFalse(node0.isDefaultCase());
578:       assertFalse(node0.isWith());
579:       assertFalse(node0.isRegExp());
580:       assertFalse(node0.isScript());
581:       assertFalse(node0.isInstanceOf());
582:       assertFalse(node0.isCatch());
583:       assertEquals(0, node0.getChildCount());
584:       assertFalse(node0.isTry());
585:       assertFalse(node0.hasOneChild());
586:       assertFalse(node0.isThis());
587:       assertFalse(node0.isFor());
588:       assertFalse(node0.isGetterDef());
589:       assertFalse(node0.isNumber());
590:       assertFalse(node0.isLabelName());
591:       assertFalse(node0.isArrayLit());
592:       assertEquals((-1), node0.getCharno());
593:       assertFalse(node0.isSwitch());
594:       assertFalse(node0.isStringKey());
595:       assertFalse(node0.isParamList());
596:       assertFalse(node0.isCase());
597:       assertFalse(node0.isInc());
598:       assertFalse(node0.isHook());
599:       assertFalse(node0.isThrow());
600:       assertFalse(node0.isBreak());
601:       assertFalse(node0.isDelProp());
602:       assertFalse(node0.isIf());
603:       assertFalse(node0.isComma());
604:       assertFalse(node0.isEmpty());
605:       assertFalse(node0.isIn());
606:       assertFalse(node0.isVoid());
607:       assertFalse(node0.isTrue());
608:       assertFalse(node0.isNE());
609:       assertFalse(node0.isNot());
610:       assertFalse(node0.isObjectLit());
611:       assertFalse(node0.isExprResult());
612:       assertFalse(node0.isFunction());
613:       assertEquals(40, node0.getType());
614:       assertEquals((-1), node0.getSourcePosition());
615:       assertFalse(node0.isGetProp());
616:       assertFalse(node0.isFalse());
617:       assertFalse(node0.isCast());
618:       assertFalse(node0.isDebugger());
619:       assertFalse(node0.isAnd());
620:       assertEquals((-1), node1.getSourcePosition());
621:       assertFalse(node1.hasChildren());
622:       assertFalse(node1.isLabel());
623:       assertFalse(node1.isAssign());
624:       assertFalse(node1.isDec());
625:       assertFalse(node1.isOr());
626:       assertFalse(node1.isTypeOf());
627:       assertFalse(node1.hasMoreThanOneChild());
628:       assertFalse(node1.hasOneChild());
629:       assertEquals(39, node1.getType());
630:       assertFalse(node1.isReturn());
631:       assertFalse(node1.isWhile());
632:       assertFalse(node1.isDo());
633:       assertFalse(node1.isAssignAdd());
634:       assertFalse(node1.isScript());
635:       assertFalse(node1.isNot());
636:       assertFalse(node1.isContinue());
637:       assertFalse(node1.isObjectLit());
638:       assertFalse(node1.isAnd());
639:       assertFalse(node1.isCast());
640:       assertFalse(node1.isLabelName());
641:       assertFalse(node1.isStringKey());
642:       assertFalse(node1.isComma());
643:       assertFalse(node1.isNull());
644:       assertFalse(node1.isBreak());
645:       assertFalse(node1.isGetProp());
646:       assertEquals(0, node1.getChildCount());
647:       assertFalse(node1.isVar());
648:       assertFalse(node1.isDefaultCase());
649:       assertFalse(node1.isExprResult());
650:       assertFalse(node1.isTrue());
651:       assertFalse(node1.isVoid());
652:       assertFalse(node1.isAdd());
653:       assertFalse(node1.isNew());
654:       assertFalse(node1.isCall());
655:       assertFalse(node1.isGetElem());
656:       assertFalse(node1.isDelProp());
657:       assertFalse(node1.isName());
658:       assertFalse(node1.isNE());
659:       assertFalse(node1.isEmpty());
660:       assertFalse(node1.isGetterDef());
661:       assertFalse(node1.isIn());
662:       assertFalse(node1.isCase());
663:       assertTrue(node1.isNumber());
664:       assertFalse(node1.isFor());
665:       assertFalse(node1.isTry());
666:       assertFalse(node1.isFunction());
667:       assertFalse(node1.isDebugger());
668:       assertEquals((-1), node1.getCharno());
669:       assertFalse(node1.isString());
670:       assertFalse(node1.isArrayLit());
671:       assertFalse(node1.isSwitch());
672:       assertFalse(node1.isThis());
673:       assertFalse(node1.isParamList());
674:       assertFalse(node1.isSetterDef());
675:       assertFalse(node1.isInstanceOf());
676:       assertFalse(node1.isFalse());
677:       assertFalse(node1.isThrow());
678:       assertFalse(node1.isHook());
679:       assertFalse(node1.isInc());
680:       assertFalse(node1.isBlock());
681:       assertFalse(node1.isRegExp());
682:       assertFalse(node1.isWith());
683:       assertFalse(node1.isCatch());
684:       assertEquals((-1), node1.getLineno());
685:       assertFalse(node1.isIf());
686:       assertFalse(node2.isDec());
687:       assertFalse(node2.isNumber());
688:       assertFalse(node2.isTypeOf());
689:       assertFalse(node2.isAssign());
690:       assertFalse(node2.isLabelName());
691:       assertFalse(node2.isAssignAdd());
692:       assertFalse(node2.hasOneChild());
693:       assertFalse(node2.isOr());
694:       assertFalse(node2.isScript());
695:       assertFalse(node2.isBlock());
696:       assertFalse(node2.isWhile());
697:       assertFalse(node2.isInstanceOf());
698:       assertFalse(node2.isReturn());
699:       assertFalse(node2.isGetElem());
700:       assertFalse(node2.isExprResult());
701:       assertFalse(node2.isCall());
702:       assertFalse(node2.isWith());
703:       assertFalse(node2.isBreak());
704:       assertFalse(node2.isNull());
705:       assertFalse(node2.isThis());
706:       assertFalse(node2.isStringKey());
707:       assertFalse(node2.isName());
708:       assertFalse(node2.isParamList());
709:       assertFalse(node2.isNew());
710:       assertFalse(node2.isAdd());
711:       assertFalse(node2.isDefaultCase());
712:       assertFalse(node2.isDo());
713:       assertEquals(200755, node2.getSourcePosition());
714:       assertFalse(node2.isSwitch());
715:       assertFalse(node2.isVar());
716:       assertFalse(node2.isLabel());
717:       assertFalse(node2.isArrayLit());
718:       assertFalse(node2.isIf());
719:       assertEquals((-1227), node2.getType());
720:       assertFalse(node2.isGetterDef());
721:       assertFalse(node2.isDelProp());
722:       assertFalse(node2.isFor());
723:       assertFalse(node2.isNE());
724:       assertFalse(node2.isIn());
725:       assertFalse(node2.isEmpty());
726:       assertFalse(node2.isString());
727:       assertTrue(node2.hasMoreThanOneChild());
728:       assertFalse(node2.isRegExp());
729:       assertFalse(node2.isCase());
730:       assertFalse(node2.isTry());
731:       assertFalse(node2.isTrue());
732:       assertFalse(node2.isVoid());
733:       assertFalse(node2.isHook());
734:       assertTrue(node2.hasChildren());
735:       assertFalse(node2.isCatch());
736:       assertFalse(node2.isComma());
737:       assertFalse(node2.isSetterDef());
738:       assertFalse(node2.isThrow());
739:       assertEquals(51, node2.getCharno());
740:       assertEquals(49, node2.getLineno());
741:       assertFalse(node2.isGetProp());
742:       assertFalse(node2.isInc());
743:       assertFalse(node2.isObjectLit());
744:       assertFalse(node2.isNot());
745:       assertFalse(node2.isDebugger());
746:       assertFalse(node2.isAnd());
747:       assertEquals(2, node2.getChildCount());
748:       assertFalse(node2.isFalse());
749:       assertFalse(node2.isFunction());
750:       assertFalse(node2.isCast());
751:       assertFalse(node2.isContinue());
752:       assertEquals(48, Node.DIRECTIVES);
753:       assertEquals(8, Node.FLAG_NO_THROWS);
754:       assertEquals(39, Node.EMPTY_BLOCK);
755:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
756:       assertEquals(40, Node.ORIGINALNAME_PROP);
757:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
758:       assertEquals(4095, Node.COLUMN_MASK);
759:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
760:       assertEquals(53, Node.INPUT_ID);
761:       assertEquals(36, Node.QUOTED_PROP);
762:       assertEquals(57, Node.LAST_PROP);
763:       assertEquals(57, Node.REFLECTED_OBJECT);
764:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
765:       assertEquals(52, Node.LENGTH);
766:       assertEquals(15, Node.NO_SIDE_EFFECTS);
767:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
768:       assertEquals(29, Node.JSDOC_INFO_PROP);
769:       assertEquals(55, Node.INFERRED_FUNCTION);
770:       assertEquals(2, Node.POST_FLAG);
771:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
772:       assertEquals(37, Node.OPT_ARG_NAME);
773:       assertEquals(32, Node.INCRDECR_PROP);
774:       assertEquals(46, Node.IS_NAMESPACE);
775:       assertEquals(47, Node.IS_DISPATCHER);
776:       assertEquals(12, Node.COLUMN_BITS);
777:       assertEquals(56, Node.CHANGE_TIME);
778:       assertEquals(30, Node.VAR_ARGS_NAME);
779:       assertEquals(49, Node.DIRECT_EVAL);
780:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
781:       assertEquals(54, Node.SLASH_V);
782:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
783:       assertEquals(43, Node.IS_CONSTANT_NAME);
784:       assertEquals(50, Node.FREE_CALL);
785:       assertEquals(51, Node.STATIC_SOURCE_FILE);
786:       assertEquals(1, Node.DECR_FLAG);
787:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
788:       assertEquals(57, Node.REFLECTED_OBJECT);
789:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
790:       assertEquals(54, Node.SLASH_V);
791:       assertEquals(57, Node.LAST_PROP);
792:       assertEquals(30, Node.VAR_ARGS_NAME);
793:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
794:       assertEquals(49, Node.DIRECT_EVAL);
795:       assertEquals(40, Node.ORIGINALNAME_PROP);
796:       assertEquals(32, Node.INCRDECR_PROP);
797:       assertEquals(46, Node.IS_NAMESPACE);
798:       assertEquals(51, Node.STATIC_SOURCE_FILE);
799:       assertEquals(12, Node.COLUMN_BITS);
800:       assertEquals(1, Node.DECR_FLAG);
801:       assertEquals(50, Node.FREE_CALL);
802:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
803:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
804:       assertEquals(53, Node.INPUT_ID);
805:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
806:       assertEquals(43, Node.IS_CONSTANT_NAME);
807:       assertEquals(47, Node.IS_DISPATCHER);
808:       assertEquals(2, Node.POST_FLAG);
809:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
810:       assertEquals(4095, Node.COLUMN_MASK);
811:       assertEquals(37, Node.OPT_ARG_NAME);
812:       assertEquals(48, Node.DIRECTIVES);
813:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
814:       assertEquals(56, Node.CHANGE_TIME);
815:       assertEquals(29, Node.JSDOC_INFO_PROP);
816:       assertEquals(36, Node.QUOTED_PROP);
817:       assertEquals(15, Node.NO_SIDE_EFFECTS);
818:       assertEquals(39, Node.EMPTY_BLOCK);
819:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
820:       assertEquals(55, Node.INFERRED_FUNCTION);
821:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
822:       assertEquals(52, Node.LENGTH);
823:       assertEquals(8, Node.FLAG_NO_THROWS);
824:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
825:       assertEquals(54, Node.SLASH_V);
826:       assertEquals(15, Node.NO_SIDE_EFFECTS);
827:       assertEquals(52, Node.LENGTH);
828:       assertEquals(1, Node.DECR_FLAG);
829:       assertEquals(30, Node.VAR_ARGS_NAME);
830:       assertEquals(57, Node.LAST_PROP);
831:       assertEquals(12, Node.COLUMN_BITS);
832:       assertEquals(32, Node.INCRDECR_PROP);
833:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
834:       assertEquals(48, Node.DIRECTIVES);
835:       assertEquals(39, Node.EMPTY_BLOCK);
836:       assertEquals(37, Node.OPT_ARG_NAME);
837:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
838:       assertEquals(55, Node.INFERRED_FUNCTION);
839:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
840:       assertEquals(8, Node.FLAG_NO_THROWS);
841:       assertEquals(4095, Node.COLUMN_MASK);
842:       assertEquals(49, Node.DIRECT_EVAL);
843:       assertEquals(56, Node.CHANGE_TIME);
844:       assertEquals(57, Node.REFLECTED_OBJECT);
845:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
846:       assertEquals(53, Node.INPUT_ID);
847:       assertEquals(36, Node.QUOTED_PROP);
848:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
849:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
850:       assertEquals(29, Node.JSDOC_INFO_PROP);
851:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
852:       assertEquals(47, Node.IS_DISPATCHER);
853:       assertEquals(2, Node.POST_FLAG);
854:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
855:       assertEquals(40, Node.ORIGINALNAME_PROP);
856:       assertEquals(50, Node.FREE_CALL);
857:       assertEquals(51, Node.STATIC_SOURCE_FILE);
858:       assertEquals(46, Node.IS_NAMESPACE);
859:       assertEquals(43, Node.IS_CONSTANT_NAME);
860:       
861:       node2.setLength(4);
862:       assertFalse(node0.equals((Object)node2));
863:       assertFalse(node0.equals((Object)node1));
864:       assertFalse(node1.equals((Object)node2));
865:       assertFalse(node1.equals((Object)node0));
866:       assertFalse(node2.equals((Object)node1));
867:       assertFalse(node2.equals((Object)node0));
868:       assertFalse(node0.isDo());
869:       assertFalse(node0.isContinue());
870:       assertFalse(node0.hasMoreThanOneChild());
871:       assertFalse(node0.isAdd());
872:       assertFalse(node0.isReturn());
873:       assertFalse(node0.isLabel());
874:       assertFalse(node0.isNew());
875:       assertFalse(node0.isBlock());
876:       assertTrue(node0.isString());
877:       assertFalse(node0.isAssignAdd());
878:       assertFalse(node0.isVar());
879:       assertFalse(node0.isWhile());
880:       assertFalse(node0.hasChildren());
881:       assertFalse(node0.isAssign());
882:       assertFalse(node0.isTypeOf());
883:       assertFalse(node0.isDec());
884:       assertFalse(node0.isGetElem());
885:       assertFalse(node0.isCall());
886:       assertFalse(node0.isSetterDef());
887:       assertFalse(node0.isOr());
888:       assertEquals((-1), node0.getLineno());
889:       assertFalse(node0.isName());
890:       assertFalse(node0.isNull());
891:       assertFalse(node0.isDefaultCase());
892:       assertFalse(node0.isWith());
893:       assertFalse(node0.isRegExp());
894:       assertFalse(node0.isScript());
895:       assertFalse(node0.isInstanceOf());
896:       assertFalse(node0.isCatch());
897:       assertEquals(0, node0.getChildCount());
898:       assertFalse(node0.isTry());
899:       assertFalse(node0.hasOneChild());
900:       assertFalse(node0.isThis());
901:       assertFalse(node0.isFor());
902:       assertFalse(node0.isGetterDef());
903:       assertFalse(node0.isNumber());
904:       assertFalse(node0.isLabelName());
905:       assertFalse(node0.isArrayLit());
906:       assertEquals((-1), node0.getCharno());
907:       assertFalse(node0.isSwitch());
908:       assertFalse(node0.isStringKey());
909:       assertFalse(node0.isParamList());
910:       assertFalse(node0.isCase());
911:       assertFalse(node0.isInc());
912:       assertFalse(node0.isHook());
913:       assertFalse(node0.isThrow());
914:       assertFalse(node0.isBreak());
915:       assertFalse(node0.isDelProp());
916:       assertFalse(node0.isIf());
917:       assertFalse(node0.isComma());
918:       assertFalse(node0.isEmpty());
919:       assertFalse(node0.isIn());
920:       assertFalse(node0.isVoid());
921:       assertFalse(node0.isTrue());
922:       assertFalse(node0.isNE());
923:       assertFalse(node0.isNot());
924:       assertFalse(node0.isObjectLit());
925:       assertFalse(node0.isExprResult());
926:       assertFalse(node0.isFunction());
927:       assertEquals(40, node0.getType());
928:       assertEquals((-1), node0.getSourcePosition());
929:       assertFalse(node0.isGetProp());
930:       assertFalse(node0.isFalse());
931:       assertFalse(node0.isCast());
932:       assertFalse(node0.isDebugger());
933:       assertFalse(node0.isAnd());
934:       assertEquals((-1), node1.getSourcePosition());
935:       assertFalse(node1.hasChildren());
936:       assertFalse(node1.isLabel());
937:       assertFalse(node1.isAssign());
938:       assertFalse(node1.isDec());
939:       assertFalse(node1.isOr());
940:       assertFalse(node1.isTypeOf());
941:       assertFalse(node1.hasMoreThanOneChild());
942:       assertFalse(node1.hasOneChild());
943:       assertEquals(39, node1.getType());
944:       assertFalse(node1.isReturn());
945:       assertFalse(node1.isWhile());
946:       assertFalse(node1.isDo());
947:       assertFalse(node1.isAssignAdd());
948:       assertFalse(node1.isScript());
949:       assertFalse(node1.isNot());
950:       assertFalse(node1.isContinue());
951:       assertFalse(node1.isObjectLit());
952:       assertFalse(node1.isAnd());
953:       assertFalse(node1.isCast());
954:       assertFalse(node1.isLabelName());
955:       assertFalse(node1.isStringKey());
956:       assertFalse(node1.isComma());
957:       assertFalse(node1.isNull());
958:       assertFalse(node1.isBreak());
959:       assertFalse(node1.isGetProp());
960:       assertEquals(0, node1.getChildCount());
961:       assertFalse(node1.isVar());
962:       assertFalse(node1.isDefaultCase());
963:       assertFalse(node1.isExprResult());
964:       assertFalse(node1.isTrue());
965:       assertFalse(node1.isVoid());
966:       assertFalse(node1.isAdd());
967:       assertFalse(node1.isNew());
968:       assertFalse(node1.isCall());
969:       assertFalse(node1.isGetElem());
970:       assertFalse(node1.isDelProp());
971:       assertFalse(node1.isName());
972:       assertFalse(node1.isNE());
973:       assertFalse(node1.isEmpty());
974:       assertFalse(node1.isGetterDef());
975:       assertFalse(node1.isIn());
976:       assertFalse(node1.isCase());
977:       assertTrue(node1.isNumber());
978:       assertFalse(node1.isFor());
979:       assertFalse(node1.isTry());
980:       assertFalse(node1.isFunction());
981:       assertFalse(node1.isDebugger());
982:       assertEquals((-1), node1.getCharno());
983:       assertFalse(node1.isString());
984:       assertFalse(node1.isArrayLit());
985:       assertFalse(node1.isSwitch());
986:       assertFalse(node1.isThis());
987:       assertFalse(node1.isParamList());
988:       assertFalse(node1.isSetterDef());
989:       assertFalse(node1.isInstanceOf());
990:       assertFalse(node1.isFalse());
991:       assertFalse(node1.isThrow());
992:       assertFalse(node1.isHook());
993:       assertFalse(node1.isInc());
994:       assertFalse(node1.isBlock());
995:       assertFalse(node1.isRegExp());
996:       assertFalse(node1.isWith());
997:       assertFalse(node1.isCatch());
998:       assertEquals((-1), node1.getLineno());
999:       assertFalse(node1.isIf());
1000:       assertFalse(node2.isDec());
1001:       assertFalse(node2.isNumber());
1002:       assertFalse(node2.isTypeOf());
1003:       assertFalse(node2.isAssign());
1004:       assertFalse(node2.isLabelName());
1005:       assertFalse(node2.isAssignAdd());
1006:       assertFalse(node2.hasOneChild());
1007:       assertFalse(node2.isOr());
1008:       assertFalse(node2.isScript());
1009:       assertFalse(node2.isBlock());
1010:       assertFalse(node2.isWhile());
1011:       assertFalse(node2.isInstanceOf());
1012:       assertFalse(node2.isReturn());
1013:       assertFalse(node2.isGetElem());
1014:       assertFalse(node2.isExprResult());
1015:       assertFalse(node2.isCall());
1016:       assertFalse(node2.isWith());
1017:       assertFalse(node2.isBreak());
1018:       assertFalse(node2.isNull());
1019:       assertFalse(node2.isThis());
1020:       assertFalse(node2.isStringKey());
1021:       assertFalse(node2.isName());
1022:       assertFalse(node2.isParamList());
1023:       assertFalse(node2.isNew());
1024:       assertFalse(node2.isAdd());
1025:       assertFalse(node2.isDefaultCase());
1026:       assertFalse(node2.isDo());
1027:       assertEquals(200755, node2.getSourcePosition());
1028:       assertFalse(node2.isSwitch());
1029:       assertFalse(node2.isVar());
1030:       assertFalse(node2.isLabel());
1031:       assertFalse(node2.isArrayLit());
1032:       assertFalse(node2.isIf());
1033:       assertEquals((-1227), node2.getType());
1034:       assertFalse(node2.isGetterDef());
1035:       assertFalse(node2.isDelProp());
1036:       assertFalse(node2.isFor());
1037:       assertFalse(node2.isNE());
1038:       assertFalse(node2.isIn());
1039:       assertFalse(node2.isEmpty());
1040:       assertFalse(node2.isString());
1041:       assertTrue(node2.hasMoreThanOneChild());
1042:       assertFalse(node2.isRegExp());
1043:       assertFalse(node2.isCase());
1044:       assertFalse(node2.isTry());
1045:       assertFalse(node2.isTrue());
1046:       assertFalse(node2.isVoid());
1047:       assertFalse(node2.isHook());
1048:       assertTrue(node2.hasChildren());
1049:       assertFalse(node2.isCatch());
1050:       assertFalse(node2.isComma());
1051:       assertFalse(node2.isSetterDef());
1052:       assertFalse(node2.isThrow());
1053:       assertEquals(51, node2.getCharno());
1054:       assertEquals(49, node2.getLineno());
1055:       assertFalse(node2.isGetProp());
1056:       assertFalse(node2.isInc());
1057:       assertFalse(node2.isObjectLit());
1058:       assertFalse(node2.isNot());
1059:       assertFalse(node2.isDebugger());
1060:       assertFalse(node2.isAnd());
1061:       assertEquals(2, node2.getChildCount());
1062:       assertFalse(node2.isFalse());
1063:       assertFalse(node2.isFunction());
1064:       assertFalse(node2.isCast());
1065:       assertFalse(node2.isContinue());
1066:       assertEquals(48, Node.DIRECTIVES);
1067:       assertEquals(8, Node.FLAG_NO_THROWS);
1068:       assertEquals(39, Node.EMPTY_BLOCK);
1069:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1070:       assertEquals(40, Node.ORIGINALNAME_PROP);
1071:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1072:       assertEquals(4095, Node.COLUMN_MASK);
1073:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1074:       assertEquals(53, Node.INPUT_ID);
1075:       assertEquals(36, Node.QUOTED_PROP);
1076:       assertEquals(57, Node.LAST_PROP);
1077:       assertEquals(57, Node.REFLECTED_OBJECT);
1078:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1079:       assertEquals(52, Node.LENGTH);
1080:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1081:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1082:       assertEquals(29, Node.JSDOC_INFO_PROP);
1083:       assertEquals(55, Node.INFERRED_FUNCTION);
1084:       assertEquals(2, Node.POST_FLAG);
1085:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1086:       assertEquals(37, Node.OPT_ARG_NAME);
1087:       assertEquals(32, Node.INCRDECR_PROP);
1088:       assertEquals(46, Node.IS_NAMESPACE);
1089:       assertEquals(47, Node.IS_DISPATCHER);
1090:       assertEquals(12, Node.COLUMN_BITS);
1091:       assertEquals(56, Node.CHANGE_TIME);
1092:       assertEquals(30, Node.VAR_ARGS_NAME);
1093:       assertEquals(49, Node.DIRECT_EVAL);
1094:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1095:       assertEquals(54, Node.SLASH_V);
1096:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1097:       assertEquals(43, Node.IS_CONSTANT_NAME);
1098:       assertEquals(50, Node.FREE_CALL);
1099:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1100:       assertEquals(1, Node.DECR_FLAG);
1101:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1102:       assertEquals(57, Node.REFLECTED_OBJECT);
1103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1104:       assertEquals(54, Node.SLASH_V);
1105:       assertEquals(57, Node.LAST_PROP);
1106:       assertEquals(30, Node.VAR_ARGS_NAME);
1107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1108:       assertEquals(49, Node.DIRECT_EVAL);
1109:       assertEquals(40, Node.ORIGINALNAME_PROP);
1110:       assertEquals(32, Node.INCRDECR_PROP);
1111:       assertEquals(46, Node.IS_NAMESPACE);
1112:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1113:       assertEquals(12, Node.COLUMN_BITS);
1114:       assertEquals(1, Node.DECR_FLAG);
1115:       assertEquals(50, Node.FREE_CALL);
1116:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1117:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1118:       assertEquals(53, Node.INPUT_ID);
1119:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1120:       assertEquals(43, Node.IS_CONSTANT_NAME);
1121:       assertEquals(47, Node.IS_DISPATCHER);
1122:       assertEquals(2, Node.POST_FLAG);
1123:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1124:       assertEquals(4095, Node.COLUMN_MASK);
1125:       assertEquals(37, Node.OPT_ARG_NAME);
1126:       assertEquals(48, Node.DIRECTIVES);
1127:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1128:       assertEquals(56, Node.CHANGE_TIME);
1129:       assertEquals(29, Node.JSDOC_INFO_PROP);
1130:       assertEquals(36, Node.QUOTED_PROP);
1131:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1132:       assertEquals(39, Node.EMPTY_BLOCK);
1133:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1134:       assertEquals(55, Node.INFERRED_FUNCTION);
1135:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1136:       assertEquals(52, Node.LENGTH);
1137:       assertEquals(8, Node.FLAG_NO_THROWS);
1138:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1139:       assertEquals(54, Node.SLASH_V);
1140:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1141:       assertEquals(52, Node.LENGTH);
1142:       assertEquals(1, Node.DECR_FLAG);
1143:       assertEquals(30, Node.VAR_ARGS_NAME);
1144:       assertEquals(57, Node.LAST_PROP);
1145:       assertEquals(12, Node.COLUMN_BITS);
1146:       assertEquals(32, Node.INCRDECR_PROP);
1147:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1148:       assertEquals(48, Node.DIRECTIVES);
1149:       assertEquals(39, Node.EMPTY_BLOCK);
1150:       assertEquals(37, Node.OPT_ARG_NAME);
1151:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1152:       assertEquals(55, Node.INFERRED_FUNCTION);
1153:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1154:       assertEquals(8, Node.FLAG_NO_THROWS);
1155:       assertEquals(4095, Node.COLUMN_MASK);
1156:       assertEquals(49, Node.DIRECT_EVAL);
1157:       assertEquals(56, Node.CHANGE_TIME);
1158:       assertEquals(57, Node.REFLECTED_OBJECT);
1159:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1160:       assertEquals(53, Node.INPUT_ID);
1161:       assertEquals(36, Node.QUOTED_PROP);
1162:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1163:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1164:       assertEquals(29, Node.JSDOC_INFO_PROP);
1165:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1166:       assertEquals(47, Node.IS_DISPATCHER);
1167:       assertEquals(2, Node.POST_FLAG);
1168:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1169:       assertEquals(40, Node.ORIGINALNAME_PROP);
1170:       assertEquals(50, Node.FREE_CALL);
1171:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1172:       assertEquals(46, Node.IS_NAMESPACE);
1173:       assertEquals(43, Node.IS_CONSTANT_NAME);
1174:       
1175:       String string0 = node1.toStringTree();
1176:       assertFalse(node1.equals((Object)node2));
1177:       assertFalse(node1.equals((Object)node0));
1178:       assertNotNull(string0);
1179:       assertEquals((-1), node1.getSourcePosition());
1180:       assertFalse(node1.hasChildren());
1181:       assertFalse(node1.isLabel());
1182:       assertFalse(node1.isAssign());
1183:       assertFalse(node1.isDec());
1184:       assertFalse(node1.isOr());
1185:       assertFalse(node1.isTypeOf());
1186:       assertFalse(node1.hasMoreThanOneChild());
1187:       assertFalse(node1.hasOneChild());
1188:       assertEquals(39, node1.getType());
1189:       assertFalse(node1.isReturn());
1190:       assertFalse(node1.isWhile());
1191:       assertFalse(node1.isDo());
1192:       assertFalse(node1.isAssignAdd());
1193:       assertFalse(node1.isScript());
1194:       assertFalse(node1.isNot());
1195:       assertFalse(node1.isContinue());
1196:       assertFalse(node1.isObjectLit());
1197:       assertFalse(node1.isAnd());
1198:       assertFalse(node1.isCast());
1199:       assertFalse(node1.isLabelName());
1200:       assertFalse(node1.isStringKey());
1201:       assertFalse(node1.isComma());
1202:       assertFalse(node1.isNull());
1203:       assertFalse(node1.isBreak());
1204:       assertFalse(node1.isGetProp());
1205:       assertEquals(0, node1.getChildCount());
1206:       assertFalse(node1.isVar());
1207:       assertFalse(node1.isDefaultCase());
1208:       assertFalse(node1.isExprResult());
1209:       assertFalse(node1.isTrue());
1210:       assertFalse(node1.isVoid());
1211:       assertFalse(node1.isAdd());
1212:       assertFalse(node1.isNew());
1213:       assertFalse(node1.isCall());
1214:       assertFalse(node1.isGetElem());
1215:       assertFalse(node1.isDelProp());
1216:       assertFalse(node1.isName());
1217:       assertFalse(node1.isNE());
1218:       assertFalse(node1.isEmpty());
1219:       assertFalse(node1.isGetterDef());
1220:       assertFalse(node1.isIn());
1221:       assertFalse(node1.isCase());
1222:       assertTrue(node1.isNumber());
1223:       assertFalse(node1.isFor());
1224:       assertFalse(node1.isTry());
1225:       assertFalse(node1.isFunction());
1226:       assertFalse(node1.isDebugger());
1227:       assertEquals((-1), node1.getCharno());
1228:       assertFalse(node1.isString());
1229:       assertFalse(node1.isArrayLit());
1230:       assertFalse(node1.isSwitch());
1231:       assertFalse(node1.isThis());
1232:       assertFalse(node1.isParamList());
1233:       assertFalse(node1.isSetterDef());
1234:       assertFalse(node1.isInstanceOf());
1235:       assertFalse(node1.isFalse());
1236:       assertFalse(node1.isThrow());
1237:       assertFalse(node1.isHook());
1238:       assertFalse(node1.isInc());
1239:       assertFalse(node1.isBlock());
1240:       assertFalse(node1.isRegExp());
1241:       assertFalse(node1.isWith());
1242:       assertFalse(node1.isCatch());
1243:       assertEquals((-1), node1.getLineno());
1244:       assertFalse(node1.isIf());
1245:       assertEquals("NUMBER 46.0\n", string0);
1246:       assertEquals(57, Node.REFLECTED_OBJECT);
1247:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1248:       assertEquals(54, Node.SLASH_V);
1249:       assertEquals(57, Node.LAST_PROP);
1250:       assertEquals(30, Node.VAR_ARGS_NAME);
1251:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1252:       assertEquals(49, Node.DIRECT_EVAL);
1253:       assertEquals(40, Node.ORIGINALNAME_PROP);
1254:       assertEquals(32, Node.INCRDECR_PROP);
1255:       assertEquals(46, Node.IS_NAMESPACE);
1256:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1257:       assertEquals(12, Node.COLUMN_BITS);
1258:       assertEquals(1, Node.DECR_FLAG);
1259:       assertEquals(50, Node.FREE_CALL);
1260:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1261:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1262:       assertEquals(53, Node.INPUT_ID);
1263:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1264:       assertEquals(43, Node.IS_CONSTANT_NAME);
1265:       assertEquals(47, Node.IS_DISPATCHER);
1266:       assertEquals(2, Node.POST_FLAG);
1267:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1268:       assertEquals(4095, Node.COLUMN_MASK);
1269:       assertEquals(37, Node.OPT_ARG_NAME);
1270:       assertEquals(48, Node.DIRECTIVES);
1271:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1272:       assertEquals(56, Node.CHANGE_TIME);
1273:       assertEquals(29, Node.JSDOC_INFO_PROP);
1274:       assertEquals(36, Node.QUOTED_PROP);
1275:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1276:       assertEquals(39, Node.EMPTY_BLOCK);
1277:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1278:       assertEquals(55, Node.INFERRED_FUNCTION);
1279:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1280:       assertEquals(52, Node.LENGTH);
1281:       assertEquals(8, Node.FLAG_NO_THROWS);
1282:       
1283:       boolean boolean0 = node0.hasChildren();
1284:       assertFalse(node0.equals((Object)node2));
1285:       assertFalse(node0.equals((Object)node1));
1286:       assertFalse(node0.isDo());
1287:       assertFalse(node0.isContinue());
1288:       assertFalse(node0.hasMoreThanOneChild());
1289:       assertFalse(node0.isAdd());
1290:       assertFalse(node0.isReturn());
1291:       assertFalse(node0.isLabel());
1292:       assertFalse(node0.isNew());
1293:       assertFalse(node0.isBlock());
1294:       assertTrue(node0.isString());
1295:       assertFalse(node0.isAssignAdd());
1296:       assertFalse(node0.isVar());
1297:       assertFalse(node0.isWhile());
1298:       assertFalse(node0.hasChildren());
1299:       assertFalse(node0.isAssign());
1300:       assertFalse(node0.isTypeOf());
1301:       assertFalse(node0.isDec());
1302:       assertFalse(node0.isGetElem());
1303:       assertFalse(node0.isCall());
1304:       assertFalse(node0.isSetterDef());
1305:       assertFalse(node0.isOr());
1306:       assertEquals((-1), node0.getLineno());
1307:       assertFalse(node0.isName());
1308:       assertFalse(node0.isNull());
1309:       assertFalse(node0.isDefaultCase());
1310:       assertFalse(node0.isWith());
1311:       assertFalse(node0.isRegExp());
1312:       assertFalse(node0.isScript());
1313:       assertFalse(node0.isInstanceOf());
1314:       assertFalse(node0.isCatch());
1315:       assertEquals(0, node0.getChildCount());
1316:       assertFalse(node0.isTry());
1317:       assertFalse(node0.hasOneChild());
1318:       assertFalse(node0.isThis());
1319:       assertFalse(node0.isFor());
1320:       assertFalse(node0.isGetterDef());
1321:       assertFalse(node0.isNumber());
1322:       assertFalse(node0.isLabelName());
1323:       assertFalse(node0.isArrayLit());
1324:       assertEquals((-1), node0.getCharno());
1325:       assertFalse(node0.isSwitch());
1326:       assertFalse(node0.isStringKey());
1327:       assertFalse(node0.isParamList());
1328:       assertFalse(node0.isCase());
1329:       assertFalse(node0.isInc());
1330:       assertFalse(node0.isHook());
1331:       assertFalse(node0.isThrow());
1332:       assertFalse(node0.isBreak());
1333:       assertFalse(node0.isDelProp());
1334:       assertFalse(node0.isIf());
1335:       assertFalse(node0.isComma());
1336:       assertFalse(node0.isEmpty());
1337:       assertFalse(node0.isIn());
1338:       assertFalse(node0.isVoid());
1339:       assertFalse(node0.isTrue());
1340:       assertFalse(node0.isNE());
1341:       assertFalse(node0.isNot());
1342:       assertFalse(node0.isObjectLit());
1343:       assertFalse(node0.isExprResult());
1344:       assertFalse(node0.isFunction());
1345:       assertEquals(40, node0.getType());
1346:       assertEquals((-1), node0.getSourcePosition());
1347:       assertFalse(node0.isGetProp());
1348:       assertFalse(node0.isFalse());
1349:       assertFalse(node0.isCast());
1350:       assertFalse(node0.isDebugger());
1351:       assertFalse(node0.isAnd());
1352:       assertFalse(boolean0);
1353:       assertEquals(48, Node.DIRECTIVES);
1354:       assertEquals(8, Node.FLAG_NO_THROWS);
1355:       assertEquals(39, Node.EMPTY_BLOCK);
1356:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1357:       assertEquals(40, Node.ORIGINALNAME_PROP);
1358:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1359:       assertEquals(4095, Node.COLUMN_MASK);
1360:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1361:       assertEquals(53, Node.INPUT_ID);
1362:       assertEquals(36, Node.QUOTED_PROP);
1363:       assertEquals(57, Node.LAST_PROP);
1364:       assertEquals(57, Node.REFLECTED_OBJECT);
1365:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1366:       assertEquals(52, Node.LENGTH);
1367:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1368:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1369:       assertEquals(29, Node.JSDOC_INFO_PROP);
1370:       assertEquals(55, Node.INFERRED_FUNCTION);
1371:       assertEquals(2, Node.POST_FLAG);
1372:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1373:       assertEquals(37, Node.OPT_ARG_NAME);
1374:       assertEquals(32, Node.INCRDECR_PROP);
1375:       assertEquals(46, Node.IS_NAMESPACE);
1376:       assertEquals(47, Node.IS_DISPATCHER);
1377:       assertEquals(12, Node.COLUMN_BITS);
1378:       assertEquals(56, Node.CHANGE_TIME);
1379:       assertEquals(30, Node.VAR_ARGS_NAME);
1380:       assertEquals(49, Node.DIRECT_EVAL);
1381:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1382:       assertEquals(54, Node.SLASH_V);
1383:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1384:       assertEquals(43, Node.IS_CONSTANT_NAME);
1385:       assertEquals(50, Node.FREE_CALL);
1386:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1387:       assertEquals(1, Node.DECR_FLAG);
1388:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1389:       
1390:       Iterable<Node> iterable0 = node1.children();
1391:       assertFalse(node1.equals((Object)node2));
1392:       assertFalse(node1.equals((Object)node0));
1393:       assertFalse(iterable0.contains(node0));
1394:       assertNotNull(iterable0);
1395:       assertEquals((-1), node1.getSourcePosition());
1396:       assertFalse(node1.hasChildren());
1397:       assertFalse(node1.isLabel());
1398:       assertFalse(node1.isAssign());
1399:       assertFalse(node1.isDec());
1400:       assertFalse(node1.isOr());
1401:       assertFalse(node1.isTypeOf());
1402:       assertFalse(node1.hasMoreThanOneChild());
1403:       assertFalse(node1.hasOneChild());
1404:       assertEquals(39, node1.getType());
1405:       assertFalse(node1.isReturn());
1406:       assertFalse(node1.isWhile());
1407:       assertFalse(node1.isDo());
1408:       assertFalse(node1.isAssignAdd());
1409:       assertFalse(node1.isScript());
1410:       assertFalse(node1.isNot());
1411:       assertFalse(node1.isContinue());
1412:       assertFalse(node1.isObjectLit());
1413:       assertFalse(node1.isAnd());
1414:       assertFalse(node1.isCast());
1415:       assertFalse(node1.isLabelName());
1416:       assertFalse(node1.isStringKey());
1417:       assertFalse(node1.isComma());
1418:       assertFalse(node1.isNull());
1419:       assertFalse(node1.isBreak());
1420:       assertFalse(node1.isGetProp());
1421:       assertEquals(0, node1.getChildCount());
1422:       assertFalse(node1.isVar());
1423:       assertFalse(node1.isDefaultCase());
1424:       assertFalse(node1.isExprResult());
1425:       assertFalse(node1.isTrue());
1426:       assertFalse(node1.isVoid());
1427:       assertFalse(node1.isAdd());
1428:       assertFalse(node1.isNew());
1429:       assertFalse(node1.isCall());
1430:       assertFalse(node1.isGetElem());
1431:       assertFalse(node1.isDelProp());
1432:       assertFalse(node1.isName());
1433:       assertFalse(node1.isNE());
1434:       assertFalse(node1.isEmpty());
1435:       assertFalse(node1.isGetterDef());
1436:       assertFalse(node1.isIn());
1437:       assertFalse(node1.isCase());
1438:       assertTrue(node1.isNumber());
1439:       assertFalse(node1.isFor());
1440:       assertFalse(node1.isTry());
1441:       assertFalse(node1.isFunction());
1442:       assertFalse(node1.isDebugger());
1443:       assertEquals((-1), node1.getCharno());
1444:       assertFalse(node1.isString());
1445:       assertFalse(node1.isArrayLit());
1446:       assertFalse(node1.isSwitch());
1447:       assertFalse(node1.isThis());
1448:       assertFalse(node1.isParamList());
1449:       assertFalse(node1.isSetterDef());
1450:       assertFalse(node1.isInstanceOf());
1451:       assertFalse(node1.isFalse());
1452:       assertFalse(node1.isThrow());
1453:       assertFalse(node1.isHook());
1454:       assertFalse(node1.isInc());
1455:       assertFalse(node1.isBlock());
1456:       assertFalse(node1.isRegExp());
1457:       assertFalse(node1.isWith());
1458:       assertFalse(node1.isCatch());
1459:       assertEquals((-1), node1.getLineno());
1460:       assertFalse(node1.isIf());
1461:       assertEquals(57, Node.REFLECTED_OBJECT);
1462:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1463:       assertEquals(54, Node.SLASH_V);
1464:       assertEquals(57, Node.LAST_PROP);
1465:       assertEquals(30, Node.VAR_ARGS_NAME);
1466:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1467:       assertEquals(49, Node.DIRECT_EVAL);
1468:       assertEquals(40, Node.ORIGINALNAME_PROP);
1469:       assertEquals(32, Node.INCRDECR_PROP);
1470:       assertEquals(46, Node.IS_NAMESPACE);
1471:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1472:       assertEquals(12, Node.COLUMN_BITS);
1473:       assertEquals(1, Node.DECR_FLAG);
1474:       assertEquals(50, Node.FREE_CALL);
1475:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1476:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1477:       assertEquals(53, Node.INPUT_ID);
1478:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1479:       assertEquals(43, Node.IS_CONSTANT_NAME);
1480:       assertEquals(47, Node.IS_DISPATCHER);
1481:       assertEquals(2, Node.POST_FLAG);
1482:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1483:       assertEquals(4095, Node.COLUMN_MASK);
1484:       assertEquals(37, Node.OPT_ARG_NAME);
1485:       assertEquals(48, Node.DIRECTIVES);
1486:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1487:       assertEquals(56, Node.CHANGE_TIME);
1488:       assertEquals(29, Node.JSDOC_INFO_PROP);
1489:       assertEquals(36, Node.QUOTED_PROP);
1490:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1491:       assertEquals(39, Node.EMPTY_BLOCK);
1492:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1493:       assertEquals(55, Node.INFERRED_FUNCTION);
1494:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1495:       assertEquals(52, Node.LENGTH);
1496:       assertEquals(8, Node.FLAG_NO_THROWS);
1497:       
1498:       String string1 = node0.getSourceFileName();
1499:       assertFalse(node0.equals((Object)node2));
1500:       assertFalse(node0.equals((Object)node1));
1501:       assertNull(string1);
1502:       assertFalse(node0.isDo());
1503:       assertFalse(node0.isContinue());
1504:       assertFalse(node0.hasMoreThanOneChild());
1505:       assertFalse(node0.isAdd());
1506:       assertFalse(node0.isReturn());
1507:       assertFalse(node0.isLabel());
1508:       assertFalse(node0.isNew());
1509:       assertFalse(node0.isBlock());
1510:       assertTrue(node0.isString());
1511:       assertFalse(node0.isAssignAdd());
1512:       assertFalse(node0.isVar());
1513:       assertFalse(node0.isWhile());
1514:       assertFalse(node0.hasChildren());
1515:       assertFalse(node0.isAssign());
1516:       assertFalse(node0.isTypeOf());
1517:       assertFalse(node0.isDec());
1518:       assertFalse(node0.isGetElem());
1519:       assertFalse(node0.isCall());
1520:       assertFalse(node0.isSetterDef());
1521:       assertFalse(node0.isOr());
1522:       assertEquals((-1), node0.getLineno());
1523:       assertFalse(node0.isName());
1524:       assertFalse(node0.isNull());
1525:       assertFalse(node0.isDefaultCase());
1526:       assertFalse(node0.isWith());
1527:       assertFalse(node0.isRegExp());
1528:       assertFalse(node0.isScript());
1529:       assertFalse(node0.isInstanceOf());
1530:       assertFalse(node0.isCatch());
1531:       assertEquals(0, node0.getChildCount());
1532:       assertFalse(node0.isTry());
1533:       assertFalse(node0.hasOneChild());
1534:       assertFalse(node0.isThis());
1535:       assertFalse(node0.isFor());
1536:       assertFalse(node0.isGetterDef());
1537:       assertFalse(node0.isNumber());
1538:       assertFalse(node0.isLabelName());
1539:       assertFalse(node0.isArrayLit());
1540:       assertEquals((-1), node0.getCharno());
1541:       assertFalse(node0.isSwitch());
1542:       assertFalse(node0.isStringKey());
1543:       assertFalse(node0.isParamList());
1544:       assertFalse(node0.isCase());
1545:       assertFalse(node0.isInc());
1546:       assertFalse(node0.isHook());
1547:       assertFalse(node0.isThrow());
1548:       assertFalse(node0.isBreak());
1549:       assertFalse(node0.isDelProp());
1550:       assertFalse(node0.isIf());
1551:       assertFalse(node0.isComma());
1552:       assertFalse(node0.isEmpty());
1553:       assertFalse(node0.isIn());
1554:       assertFalse(node0.isVoid());
1555:       assertFalse(node0.isTrue());
1556:       assertFalse(node0.isNE());
1557:       assertFalse(node0.isNot());
1558:       assertFalse(node0.isObjectLit());
1559:       assertFalse(node0.isExprResult());
1560:       assertFalse(node0.isFunction());
1561:       assertEquals(40, node0.getType());
1562:       assertEquals((-1), node0.getSourcePosition());
1563:       assertFalse(node0.isGetProp());
1564:       assertFalse(node0.isFalse());
1565:       assertFalse(node0.isCast());
1566:       assertFalse(node0.isDebugger());
1567:       assertFalse(node0.isAnd());
1568:       assertEquals(48, Node.DIRECTIVES);
1569:       assertEquals(8, Node.FLAG_NO_THROWS);
1570:       assertEquals(39, Node.EMPTY_BLOCK);
1571:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1572:       assertEquals(40, Node.ORIGINALNAME_PROP);
1573:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1574:       assertEquals(4095, Node.COLUMN_MASK);
1575:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1576:       assertEquals(53, Node.INPUT_ID);
1577:       assertEquals(36, Node.QUOTED_PROP);
1578:       assertEquals(57, Node.LAST_PROP);
1579:       assertEquals(57, Node.REFLECTED_OBJECT);
1580:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1581:       assertEquals(52, Node.LENGTH);
1582:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1583:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1584:       assertEquals(29, Node.JSDOC_INFO_PROP);
1585:       assertEquals(55, Node.INFERRED_FUNCTION);
1586:       assertEquals(2, Node.POST_FLAG);
1587:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1588:       assertEquals(37, Node.OPT_ARG_NAME);
1589:       assertEquals(32, Node.INCRDECR_PROP);
1590:       assertEquals(46, Node.IS_NAMESPACE);
1591:       assertEquals(47, Node.IS_DISPATCHER);
1592:       assertEquals(12, Node.COLUMN_BITS);
1593:       assertEquals(56, Node.CHANGE_TIME);
1594:       assertEquals(30, Node.VAR_ARGS_NAME);
1595:       assertEquals(49, Node.DIRECT_EVAL);
1596:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1597:       assertEquals(54, Node.SLASH_V);
1598:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1599:       assertEquals(43, Node.IS_CONSTANT_NAME);
1600:       assertEquals(50, Node.FREE_CALL);
1601:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1602:       assertEquals(1, Node.DECR_FLAG);
1603:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1604:       
1605:       ModificationVisitor modificationVisitor0 = new ModificationVisitor((JSTypeRegistry) null);
1606:       assertNotNull(modificationVisitor0);
1607:       
1608:       // Undeclared exception!
1609:       try { 
1610:         modificationVisitor0.caseNoObjectType();
1611:         fail("Expecting exception: NullPointerException");
1612:       
1613:       } catch(NullPointerException e) {
1614:          //
1615:          // no message in exception (getMessage() returned null)
1616:          //
1617:          verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
1618:       }
1619:   }
1620: }
RegularFileObject[/tmp/EvoSuite_75_1628256019864/com/google/javascript/rhino/Node_75_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:20 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_75_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_75_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_75_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.InputId",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.javascript.rhino.jstype.TemplatizedType",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.Iterables",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.common.collect.Sets$ImprovedAbstractSet",
354:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
355:       "com.google.common.collect.Hashing",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
358:       "com.google.javascript.rhino.JSTypeExpression",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
367:     );
368:   }
369: }

[MASTER] 13:20:20.172 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("O0c~]Bu;-##BCb|,z?U", (-1049), 126);
assertNotNull(node0);
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isComma());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

node0.putProp((-666), "O0c~]Bu;-##BCb|,z?U");
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isComma());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Set<String> set0 = node0.getDirectives();
assertNull(set0);
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isComma());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

node0.setDirectives((Set<String>) null);
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isComma());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Node node1 = Node.newNumber((double) 46, 57, (-1660));
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertEquals(39, node1.getType());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

Node node2 = new Node((-1227), node0, node0, node0, node1, 49, 51);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isComma());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertEquals(39, node1.getType());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node2.isDec());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isScript());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isReturn());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isWith());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isThis());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertEquals(200755, node2.getSourcePosition());
assertFalse(node2.isSwitch());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertEquals((-1227), node2.getType());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isString());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isHook());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isComma());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertEquals(51, node2.getCharno());
assertEquals(49, node2.getLineno());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

node2.setLength(4);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isComma());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertEquals(39, node1.getType());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node2.isDec());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isScript());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isReturn());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isWith());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isThis());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertEquals(200755, node2.getSourcePosition());
assertFalse(node2.isSwitch());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertEquals((-1227), node2.getType());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isString());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isHook());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isComma());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertEquals(51, node2.getCharno());
assertEquals(49, node2.getLineno());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

String string0 = node1.toStringTree();
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotNull(string0);
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertEquals(39, node1.getType());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertEquals("NUMBER 46.0\n", string0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

boolean boolean0 = node0.hasChildren();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isComma());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(boolean0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertEquals(39, node1.getType());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

String string1 = node0.getSourceFileName();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertNull(string1);
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isComma());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

ModificationVisitor modificationVisitor0 = new ModificationVisitor((JSTypeRegistry) null);
assertNotNull(modificationVisitor0);

modificationVisitor0.caseNoObjectType();

[MASTER] 13:20:24.289 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_96_1628256024214/com/google/javascript/rhino/Node_96_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_96_1628256024214/com/google/javascript/rhino/Node_96_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:24.289 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:24.289 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:24.290 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 460
[MASTER] 13:20:24.291 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_96_1628256024214/com/google/javascript/rhino/Node_96_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:24 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.ErrorReporter;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.jstype.BooleanLiteralSet;
14: import com.google.javascript.rhino.jstype.JSType;
15: import com.google.javascript.rhino.jstype.JSTypeRegistry;
16: import com.google.javascript.rhino.jstype.ModificationVisitor;
17: import com.google.javascript.rhino.jstype.NoObjectType;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.testdata.EvoSuiteFile;
21: import org.evosuite.runtime.testdata.FileSystemHandling;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class Node_96_tmp__ESTest extends Node_96_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       byte[] byteArray0 = new byte[2];
30:       byteArray0[0] = (byte)37;
31:       byteArray0[1] = (byte)0;
32:       boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
33:       assertFalse(boolean0);
34:       
35:       Node node0 = new Node((byte)37, (byte)37, (byte)37);
36:       assertNotNull(node0);
37:       assertFalse(node0.hasMoreThanOneChild());
38:       assertFalse(node0.isOr());
39:       assertFalse(node0.isAssignAdd());
40:       assertFalse(node0.isLabel());
41:       assertFalse(node0.isReturn());
42:       assertFalse(node0.isWhile());
43:       assertFalse(node0.isTypeOf());
44:       assertFalse(node0.isDec());
45:       assertFalse(node0.hasChildren());
46:       assertFalse(node0.isAssign());
47:       assertFalse(node0.isLabelName());
48:       assertFalse(node0.isGetElem());
49:       assertFalse(node0.isContinue());
50:       assertFalse(node0.isCast());
51:       assertFalse(node0.hasOneChild());
52:       assertFalse(node0.isBlock());
53:       assertFalse(node0.isStringKey());
54:       assertFalse(node0.isNumber());
55:       assertFalse(node0.isNot());
56:       assertFalse(node0.isScript());
57:       assertEquals(0, node0.getChildCount());
58:       assertFalse(node0.isParamList());
59:       assertFalse(node0.isBreak());
60:       assertFalse(node0.isComma());
61:       assertFalse(node0.isVoid());
62:       assertFalse(node0.isExprResult());
63:       assertFalse(node0.isName());
64:       assertFalse(node0.isTrue());
65:       assertFalse(node0.isVar());
66:       assertFalse(node0.isNull());
67:       assertFalse(node0.isDefaultCase());
68:       assertFalse(node0.isDo());
69:       assertFalse(node0.isNew());
70:       assertFalse(node0.isAdd());
71:       assertFalse(node0.isEmpty());
72:       assertFalse(node0.isIn());
73:       assertFalse(node0.isNE());
74:       assertFalse(node0.isSwitch());
75:       assertFalse(node0.isIf());
76:       assertFalse(node0.isDelProp());
77:       assertEquals(37, node0.getType());
78:       assertFalse(node0.isHook());
79:       assertFalse(node0.isArrayLit());
80:       assertFalse(node0.isTry());
81:       assertFalse(node0.isFor());
82:       assertFalse(node0.isDebugger());
83:       assertFalse(node0.isGetterDef());
84:       assertFalse(node0.isCase());
85:       assertFalse(node0.isGetProp());
86:       assertFalse(node0.isString());
87:       assertFalse(node0.isInstanceOf());
88:       assertFalse(node0.isObjectLit());
89:       assertFalse(node0.isAnd());
90:       assertFalse(node0.isThis());
91:       assertEquals(37, node0.getLineno());
92:       assertFalse(node0.isRegExp());
93:       assertTrue(node0.isCall());
94:       assertFalse(node0.isFunction());
95:       assertEquals(37, node0.getCharno());
96:       assertFalse(node0.isFalse());
97:       assertFalse(node0.isWith());
98:       assertFalse(node0.isCatch());
99:       assertFalse(node0.isThrow());
100:       assertEquals(151589, node0.getSourcePosition());
101:       assertFalse(node0.isInc());
102:       assertFalse(node0.isSetterDef());
103:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
104:       assertEquals(50, Node.FREE_CALL);
105:       assertEquals(39, Node.EMPTY_BLOCK);
106:       assertEquals(40, Node.ORIGINALNAME_PROP);
107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
108:       assertEquals(52, Node.LENGTH);
109:       assertEquals(8, Node.FLAG_NO_THROWS);
110:       assertEquals(48, Node.DIRECTIVES);
111:       assertEquals(57, Node.REFLECTED_OBJECT);
112:       assertEquals(54, Node.SLASH_V);
113:       assertEquals(49, Node.DIRECT_EVAL);
114:       assertEquals(1, Node.DECR_FLAG);
115:       assertEquals(4095, Node.COLUMN_MASK);
116:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
117:       assertEquals(32, Node.INCRDECR_PROP);
118:       assertEquals(12, Node.COLUMN_BITS);
119:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
120:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
121:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
122:       assertEquals(29, Node.JSDOC_INFO_PROP);
123:       assertEquals(37, Node.OPT_ARG_NAME);
124:       assertEquals(43, Node.IS_CONSTANT_NAME);
125:       assertEquals(56, Node.CHANGE_TIME);
126:       assertEquals(51, Node.STATIC_SOURCE_FILE);
127:       assertEquals(36, Node.QUOTED_PROP);
128:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
129:       assertEquals(46, Node.IS_NAMESPACE);
130:       assertEquals(30, Node.VAR_ARGS_NAME);
131:       assertEquals(15, Node.NO_SIDE_EFFECTS);
132:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
133:       assertEquals(55, Node.INFERRED_FUNCTION);
134:       assertEquals(53, Node.INPUT_ID);
135:       assertEquals(2, Node.POST_FLAG);
136:       assertEquals(57, Node.LAST_PROP);
137:       assertEquals(47, Node.IS_DISPATCHER);
138:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
139:       
140:       boolean boolean1 = node0.wasEmptyNode();
141:       assertTrue(boolean1 == boolean0);
142:       assertFalse(node0.hasMoreThanOneChild());
143:       assertFalse(node0.isOr());
144:       assertFalse(node0.isAssignAdd());
145:       assertFalse(node0.isLabel());
146:       assertFalse(node0.isReturn());
147:       assertFalse(node0.isWhile());
148:       assertFalse(node0.isTypeOf());
149:       assertFalse(node0.isDec());
150:       assertFalse(node0.hasChildren());
151:       assertFalse(node0.isAssign());
152:       assertFalse(node0.isLabelName());
153:       assertFalse(node0.isGetElem());
154:       assertFalse(node0.isContinue());
155:       assertFalse(node0.isCast());
156:       assertFalse(node0.hasOneChild());
157:       assertFalse(node0.isBlock());
158:       assertFalse(node0.isStringKey());
159:       assertFalse(node0.isNumber());
160:       assertFalse(node0.isNot());
161:       assertFalse(node0.isScript());
162:       assertEquals(0, node0.getChildCount());
163:       assertFalse(node0.isParamList());
164:       assertFalse(node0.isBreak());
165:       assertFalse(node0.isComma());
166:       assertFalse(node0.isVoid());
167:       assertFalse(node0.isExprResult());
168:       assertFalse(node0.isName());
169:       assertFalse(node0.isTrue());
170:       assertFalse(node0.isVar());
171:       assertFalse(node0.isNull());
172:       assertFalse(node0.isDefaultCase());
173:       assertFalse(node0.isDo());
174:       assertFalse(node0.isNew());
175:       assertFalse(node0.isAdd());
176:       assertFalse(node0.isEmpty());
177:       assertFalse(node0.isIn());
178:       assertFalse(node0.isNE());
179:       assertFalse(node0.isSwitch());
180:       assertFalse(node0.isIf());
181:       assertFalse(node0.isDelProp());
182:       assertEquals(37, node0.getType());
183:       assertFalse(node0.isHook());
184:       assertFalse(node0.isArrayLit());
185:       assertFalse(node0.isTry());
186:       assertFalse(node0.isFor());
187:       assertFalse(node0.isDebugger());
188:       assertFalse(node0.isGetterDef());
189:       assertFalse(node0.isCase());
190:       assertFalse(node0.isGetProp());
191:       assertFalse(node0.isString());
192:       assertFalse(node0.isInstanceOf());
193:       assertFalse(node0.isObjectLit());
194:       assertFalse(node0.isAnd());
195:       assertFalse(node0.isThis());
196:       assertEquals(37, node0.getLineno());
197:       assertFalse(node0.isRegExp());
198:       assertTrue(node0.isCall());
199:       assertFalse(node0.isFunction());
200:       assertEquals(37, node0.getCharno());
201:       assertFalse(node0.isFalse());
202:       assertFalse(node0.isWith());
203:       assertFalse(node0.isCatch());
204:       assertFalse(node0.isThrow());
205:       assertEquals(151589, node0.getSourcePosition());
206:       assertFalse(node0.isInc());
207:       assertFalse(node0.isSetterDef());
208:       assertFalse(boolean1);
209:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
210:       assertEquals(50, Node.FREE_CALL);
211:       assertEquals(39, Node.EMPTY_BLOCK);
212:       assertEquals(40, Node.ORIGINALNAME_PROP);
213:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
214:       assertEquals(52, Node.LENGTH);
215:       assertEquals(8, Node.FLAG_NO_THROWS);
216:       assertEquals(48, Node.DIRECTIVES);
217:       assertEquals(57, Node.REFLECTED_OBJECT);
218:       assertEquals(54, Node.SLASH_V);
219:       assertEquals(49, Node.DIRECT_EVAL);
220:       assertEquals(1, Node.DECR_FLAG);
221:       assertEquals(4095, Node.COLUMN_MASK);
222:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
223:       assertEquals(32, Node.INCRDECR_PROP);
224:       assertEquals(12, Node.COLUMN_BITS);
225:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
226:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
227:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
228:       assertEquals(29, Node.JSDOC_INFO_PROP);
229:       assertEquals(37, Node.OPT_ARG_NAME);
230:       assertEquals(43, Node.IS_CONSTANT_NAME);
231:       assertEquals(56, Node.CHANGE_TIME);
232:       assertEquals(51, Node.STATIC_SOURCE_FILE);
233:       assertEquals(36, Node.QUOTED_PROP);
234:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
235:       assertEquals(46, Node.IS_NAMESPACE);
236:       assertEquals(30, Node.VAR_ARGS_NAME);
237:       assertEquals(15, Node.NO_SIDE_EFFECTS);
238:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
239:       assertEquals(55, Node.INFERRED_FUNCTION);
240:       assertEquals(53, Node.INPUT_ID);
241:       assertEquals(2, Node.POST_FLAG);
242:       assertEquals(57, Node.LAST_PROP);
243:       assertEquals(47, Node.IS_DISPATCHER);
244:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
245:       
246:       String string0 = node0.toString(false, false, false);
247:       assertNotNull(string0);
248:       assertFalse(node0.hasMoreThanOneChild());
249:       assertFalse(node0.isOr());
250:       assertFalse(node0.isAssignAdd());
251:       assertFalse(node0.isLabel());
252:       assertFalse(node0.isReturn());
253:       assertFalse(node0.isWhile());
254:       assertFalse(node0.isTypeOf());
255:       assertFalse(node0.isDec());
256:       assertFalse(node0.hasChildren());
257:       assertFalse(node0.isAssign());
258:       assertFalse(node0.isLabelName());
259:       assertFalse(node0.isGetElem());
260:       assertFalse(node0.isContinue());
261:       assertFalse(node0.isCast());
262:       assertFalse(node0.hasOneChild());
263:       assertFalse(node0.isBlock());
264:       assertFalse(node0.isStringKey());
265:       assertFalse(node0.isNumber());
266:       assertFalse(node0.isNot());
267:       assertFalse(node0.isScript());
268:       assertEquals(0, node0.getChildCount());
269:       assertFalse(node0.isParamList());
270:       assertFalse(node0.isBreak());
271:       assertFalse(node0.isComma());
272:       assertFalse(node0.isVoid());
273:       assertFalse(node0.isExprResult());
274:       assertFalse(node0.isName());
275:       assertFalse(node0.isTrue());
276:       assertFalse(node0.isVar());
277:       assertFalse(node0.isNull());
278:       assertFalse(node0.isDefaultCase());
279:       assertFalse(node0.isDo());
280:       assertFalse(node0.isNew());
281:       assertFalse(node0.isAdd());
282:       assertFalse(node0.isEmpty());
283:       assertFalse(node0.isIn());
284:       assertFalse(node0.isNE());
285:       assertFalse(node0.isSwitch());
286:       assertFalse(node0.isIf());
287:       assertFalse(node0.isDelProp());
288:       assertEquals(37, node0.getType());
289:       assertFalse(node0.isHook());
290:       assertFalse(node0.isArrayLit());
291:       assertFalse(node0.isTry());
292:       assertFalse(node0.isFor());
293:       assertFalse(node0.isDebugger());
294:       assertFalse(node0.isGetterDef());
295:       assertFalse(node0.isCase());
296:       assertFalse(node0.isGetProp());
297:       assertFalse(node0.isString());
298:       assertFalse(node0.isInstanceOf());
299:       assertFalse(node0.isObjectLit());
300:       assertFalse(node0.isAnd());
301:       assertFalse(node0.isThis());
302:       assertEquals(37, node0.getLineno());
303:       assertFalse(node0.isRegExp());
304:       assertTrue(node0.isCall());
305:       assertFalse(node0.isFunction());
306:       assertEquals(37, node0.getCharno());
307:       assertFalse(node0.isFalse());
308:       assertFalse(node0.isWith());
309:       assertFalse(node0.isCatch());
310:       assertFalse(node0.isThrow());
311:       assertEquals(151589, node0.getSourcePosition());
312:       assertFalse(node0.isInc());
313:       assertFalse(node0.isSetterDef());
314:       assertEquals("CALL", string0);
315:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
316:       assertEquals(50, Node.FREE_CALL);
317:       assertEquals(39, Node.EMPTY_BLOCK);
318:       assertEquals(40, Node.ORIGINALNAME_PROP);
319:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
320:       assertEquals(52, Node.LENGTH);
321:       assertEquals(8, Node.FLAG_NO_THROWS);
322:       assertEquals(48, Node.DIRECTIVES);
323:       assertEquals(57, Node.REFLECTED_OBJECT);
324:       assertEquals(54, Node.SLASH_V);
325:       assertEquals(49, Node.DIRECT_EVAL);
326:       assertEquals(1, Node.DECR_FLAG);
327:       assertEquals(4095, Node.COLUMN_MASK);
328:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
329:       assertEquals(32, Node.INCRDECR_PROP);
330:       assertEquals(12, Node.COLUMN_BITS);
331:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
332:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
333:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
334:       assertEquals(29, Node.JSDOC_INFO_PROP);
335:       assertEquals(37, Node.OPT_ARG_NAME);
336:       assertEquals(43, Node.IS_CONSTANT_NAME);
337:       assertEquals(56, Node.CHANGE_TIME);
338:       assertEquals(51, Node.STATIC_SOURCE_FILE);
339:       assertEquals(36, Node.QUOTED_PROP);
340:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
341:       assertEquals(46, Node.IS_NAMESPACE);
342:       assertEquals(30, Node.VAR_ARGS_NAME);
343:       assertEquals(15, Node.NO_SIDE_EFFECTS);
344:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
345:       assertEquals(55, Node.INFERRED_FUNCTION);
346:       assertEquals(53, Node.INPUT_ID);
347:       assertEquals(2, Node.POST_FLAG);
348:       assertEquals(57, Node.LAST_PROP);
349:       assertEquals(47, Node.IS_DISPATCHER);
350:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
351:       
352:       boolean boolean2 = node0.isTrue();
353:       assertTrue(boolean2 == boolean1);
354:       assertTrue(boolean2 == boolean0);
355:       assertFalse(node0.hasMoreThanOneChild());
356:       assertFalse(node0.isOr());
357:       assertFalse(node0.isAssignAdd());
358:       assertFalse(node0.isLabel());
359:       assertFalse(node0.isReturn());
360:       assertFalse(node0.isWhile());
361:       assertFalse(node0.isTypeOf());
362:       assertFalse(node0.isDec());
363:       assertFalse(node0.hasChildren());
364:       assertFalse(node0.isAssign());
365:       assertFalse(node0.isLabelName());
366:       assertFalse(node0.isGetElem());
367:       assertFalse(node0.isContinue());
368:       assertFalse(node0.isCast());
369:       assertFalse(node0.hasOneChild());
370:       assertFalse(node0.isBlock());
371:       assertFalse(node0.isStringKey());
372:       assertFalse(node0.isNumber());
373:       assertFalse(node0.isNot());
374:       assertFalse(node0.isScript());
375:       assertEquals(0, node0.getChildCount());
376:       assertFalse(node0.isParamList());
377:       assertFalse(node0.isBreak());
378:       assertFalse(node0.isComma());
379:       assertFalse(node0.isVoid());
380:       assertFalse(node0.isExprResult());
381:       assertFalse(node0.isName());
382:       assertFalse(node0.isTrue());
383:       assertFalse(node0.isVar());
384:       assertFalse(node0.isNull());
385:       assertFalse(node0.isDefaultCase());
386:       assertFalse(node0.isDo());
387:       assertFalse(node0.isNew());
388:       assertFalse(node0.isAdd());
389:       assertFalse(node0.isEmpty());
390:       assertFalse(node0.isIn());
391:       assertFalse(node0.isNE());
392:       assertFalse(node0.isSwitch());
393:       assertFalse(node0.isIf());
394:       assertFalse(node0.isDelProp());
395:       assertEquals(37, node0.getType());
396:       assertFalse(node0.isHook());
397:       assertFalse(node0.isArrayLit());
398:       assertFalse(node0.isTry());
399:       assertFalse(node0.isFor());
400:       assertFalse(node0.isDebugger());
401:       assertFalse(node0.isGetterDef());
402:       assertFalse(node0.isCase());
403:       assertFalse(node0.isGetProp());
404:       assertFalse(node0.isString());
405:       assertFalse(node0.isInstanceOf());
406:       assertFalse(node0.isObjectLit());
407:       assertFalse(node0.isAnd());
408:       assertFalse(node0.isThis());
409:       assertEquals(37, node0.getLineno());
410:       assertFalse(node0.isRegExp());
411:       assertTrue(node0.isCall());
412:       assertFalse(node0.isFunction());
413:       assertEquals(37, node0.getCharno());
414:       assertFalse(node0.isFalse());
415:       assertFalse(node0.isWith());
416:       assertFalse(node0.isCatch());
417:       assertFalse(node0.isThrow());
418:       assertEquals(151589, node0.getSourcePosition());
419:       assertFalse(node0.isInc());
420:       assertFalse(node0.isSetterDef());
421:       assertFalse(boolean2);
422:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
423:       assertEquals(50, Node.FREE_CALL);
424:       assertEquals(39, Node.EMPTY_BLOCK);
425:       assertEquals(40, Node.ORIGINALNAME_PROP);
426:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
427:       assertEquals(52, Node.LENGTH);
428:       assertEquals(8, Node.FLAG_NO_THROWS);
429:       assertEquals(48, Node.DIRECTIVES);
430:       assertEquals(57, Node.REFLECTED_OBJECT);
431:       assertEquals(54, Node.SLASH_V);
432:       assertEquals(49, Node.DIRECT_EVAL);
433:       assertEquals(1, Node.DECR_FLAG);
434:       assertEquals(4095, Node.COLUMN_MASK);
435:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
436:       assertEquals(32, Node.INCRDECR_PROP);
437:       assertEquals(12, Node.COLUMN_BITS);
438:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
439:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
440:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
441:       assertEquals(29, Node.JSDOC_INFO_PROP);
442:       assertEquals(37, Node.OPT_ARG_NAME);
443:       assertEquals(43, Node.IS_CONSTANT_NAME);
444:       assertEquals(56, Node.CHANGE_TIME);
445:       assertEquals(51, Node.STATIC_SOURCE_FILE);
446:       assertEquals(36, Node.QUOTED_PROP);
447:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
448:       assertEquals(46, Node.IS_NAMESPACE);
449:       assertEquals(30, Node.VAR_ARGS_NAME);
450:       assertEquals(15, Node.NO_SIDE_EFFECTS);
451:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
452:       assertEquals(55, Node.INFERRED_FUNCTION);
453:       assertEquals(53, Node.INPUT_ID);
454:       assertEquals(2, Node.POST_FLAG);
455:       assertEquals(57, Node.LAST_PROP);
456:       assertEquals(47, Node.IS_DISPATCHER);
457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
458:       
459:       Iterable<Node> iterable0 = node0.children();
460:       assertFalse(iterable0.contains(node0));
461:       assertNotNull(iterable0);
462:       assertFalse(node0.hasMoreThanOneChild());
463:       assertFalse(node0.isOr());
464:       assertFalse(node0.isAssignAdd());
465:       assertFalse(node0.isLabel());
466:       assertFalse(node0.isReturn());
467:       assertFalse(node0.isWhile());
468:       assertFalse(node0.isTypeOf());
469:       assertFalse(node0.isDec());
470:       assertFalse(node0.hasChildren());
471:       assertFalse(node0.isAssign());
472:       assertFalse(node0.isLabelName());
473:       assertFalse(node0.isGetElem());
474:       assertFalse(node0.isContinue());
475:       assertFalse(node0.isCast());
476:       assertFalse(node0.hasOneChild());
477:       assertFalse(node0.isBlock());
478:       assertFalse(node0.isStringKey());
479:       assertFalse(node0.isNumber());
480:       assertFalse(node0.isNot());
481:       assertFalse(node0.isScript());
482:       assertEquals(0, node0.getChildCount());
483:       assertFalse(node0.isParamList());
484:       assertFalse(node0.isBreak());
485:       assertFalse(node0.isComma());
486:       assertFalse(node0.isVoid());
487:       assertFalse(node0.isExprResult());
488:       assertFalse(node0.isName());
489:       assertFalse(node0.isTrue());
490:       assertFalse(node0.isVar());
491:       assertFalse(node0.isNull());
492:       assertFalse(node0.isDefaultCase());
493:       assertFalse(node0.isDo());
494:       assertFalse(node0.isNew());
495:       assertFalse(node0.isAdd());
496:       assertFalse(node0.isEmpty());
497:       assertFalse(node0.isIn());
498:       assertFalse(node0.isNE());
499:       assertFalse(node0.isSwitch());
500:       assertFalse(node0.isIf());
501:       assertFalse(node0.isDelProp());
502:       assertEquals(37, node0.getType());
503:       assertFalse(node0.isHook());
504:       assertFalse(node0.isArrayLit());
505:       assertFalse(node0.isTry());
506:       assertFalse(node0.isFor());
507:       assertFalse(node0.isDebugger());
508:       assertFalse(node0.isGetterDef());
509:       assertFalse(node0.isCase());
510:       assertFalse(node0.isGetProp());
511:       assertFalse(node0.isString());
512:       assertFalse(node0.isInstanceOf());
513:       assertFalse(node0.isObjectLit());
514:       assertFalse(node0.isAnd());
515:       assertFalse(node0.isThis());
516:       assertEquals(37, node0.getLineno());
517:       assertFalse(node0.isRegExp());
518:       assertTrue(node0.isCall());
519:       assertFalse(node0.isFunction());
520:       assertEquals(37, node0.getCharno());
521:       assertFalse(node0.isFalse());
522:       assertFalse(node0.isWith());
523:       assertFalse(node0.isCatch());
524:       assertFalse(node0.isThrow());
525:       assertEquals(151589, node0.getSourcePosition());
526:       assertFalse(node0.isInc());
527:       assertFalse(node0.isSetterDef());
528:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
529:       assertEquals(50, Node.FREE_CALL);
530:       assertEquals(39, Node.EMPTY_BLOCK);
531:       assertEquals(40, Node.ORIGINALNAME_PROP);
532:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
533:       assertEquals(52, Node.LENGTH);
534:       assertEquals(8, Node.FLAG_NO_THROWS);
535:       assertEquals(48, Node.DIRECTIVES);
536:       assertEquals(57, Node.REFLECTED_OBJECT);
537:       assertEquals(54, Node.SLASH_V);
538:       assertEquals(49, Node.DIRECT_EVAL);
539:       assertEquals(1, Node.DECR_FLAG);
540:       assertEquals(4095, Node.COLUMN_MASK);
541:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
542:       assertEquals(32, Node.INCRDECR_PROP);
543:       assertEquals(12, Node.COLUMN_BITS);
544:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
545:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
546:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
547:       assertEquals(29, Node.JSDOC_INFO_PROP);
548:       assertEquals(37, Node.OPT_ARG_NAME);
549:       assertEquals(43, Node.IS_CONSTANT_NAME);
550:       assertEquals(56, Node.CHANGE_TIME);
551:       assertEquals(51, Node.STATIC_SOURCE_FILE);
552:       assertEquals(36, Node.QUOTED_PROP);
553:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
554:       assertEquals(46, Node.IS_NAMESPACE);
555:       assertEquals(30, Node.VAR_ARGS_NAME);
556:       assertEquals(15, Node.NO_SIDE_EFFECTS);
557:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
558:       assertEquals(55, Node.INFERRED_FUNCTION);
559:       assertEquals(53, Node.INPUT_ID);
560:       assertEquals(2, Node.POST_FLAG);
561:       assertEquals(57, Node.LAST_PROP);
562:       assertEquals(47, Node.IS_DISPATCHER);
563:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
564:       
565:       String string1 = node0.getSourceFileName();
566:       assertNull(string1);
567:       assertFalse(node0.hasMoreThanOneChild());
568:       assertFalse(node0.isOr());
569:       assertFalse(node0.isAssignAdd());
570:       assertFalse(node0.isLabel());
571:       assertFalse(node0.isReturn());
572:       assertFalse(node0.isWhile());
573:       assertFalse(node0.isTypeOf());
574:       assertFalse(node0.isDec());
575:       assertFalse(node0.hasChildren());
576:       assertFalse(node0.isAssign());
577:       assertFalse(node0.isLabelName());
578:       assertFalse(node0.isGetElem());
579:       assertFalse(node0.isContinue());
580:       assertFalse(node0.isCast());
581:       assertFalse(node0.hasOneChild());
582:       assertFalse(node0.isBlock());
583:       assertFalse(node0.isStringKey());
584:       assertFalse(node0.isNumber());
585:       assertFalse(node0.isNot());
586:       assertFalse(node0.isScript());
587:       assertEquals(0, node0.getChildCount());
588:       assertFalse(node0.isParamList());
589:       assertFalse(node0.isBreak());
590:       assertFalse(node0.isComma());
591:       assertFalse(node0.isVoid());
592:       assertFalse(node0.isExprResult());
593:       assertFalse(node0.isName());
594:       assertFalse(node0.isTrue());
595:       assertFalse(node0.isVar());
596:       assertFalse(node0.isNull());
597:       assertFalse(node0.isDefaultCase());
598:       assertFalse(node0.isDo());
599:       assertFalse(node0.isNew());
600:       assertFalse(node0.isAdd());
601:       assertFalse(node0.isEmpty());
602:       assertFalse(node0.isIn());
603:       assertFalse(node0.isNE());
604:       assertFalse(node0.isSwitch());
605:       assertFalse(node0.isIf());
606:       assertFalse(node0.isDelProp());
607:       assertEquals(37, node0.getType());
608:       assertFalse(node0.isHook());
609:       assertFalse(node0.isArrayLit());
610:       assertFalse(node0.isTry());
611:       assertFalse(node0.isFor());
612:       assertFalse(node0.isDebugger());
613:       assertFalse(node0.isGetterDef());
614:       assertFalse(node0.isCase());
615:       assertFalse(node0.isGetProp());
616:       assertFalse(node0.isString());
617:       assertFalse(node0.isInstanceOf());
618:       assertFalse(node0.isObjectLit());
619:       assertFalse(node0.isAnd());
620:       assertFalse(node0.isThis());
621:       assertEquals(37, node0.getLineno());
622:       assertFalse(node0.isRegExp());
623:       assertTrue(node0.isCall());
624:       assertFalse(node0.isFunction());
625:       assertEquals(37, node0.getCharno());
626:       assertFalse(node0.isFalse());
627:       assertFalse(node0.isWith());
628:       assertFalse(node0.isCatch());
629:       assertFalse(node0.isThrow());
630:       assertEquals(151589, node0.getSourcePosition());
631:       assertFalse(node0.isInc());
632:       assertFalse(node0.isSetterDef());
633:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
634:       assertEquals(50, Node.FREE_CALL);
635:       assertEquals(39, Node.EMPTY_BLOCK);
636:       assertEquals(40, Node.ORIGINALNAME_PROP);
637:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
638:       assertEquals(52, Node.LENGTH);
639:       assertEquals(8, Node.FLAG_NO_THROWS);
640:       assertEquals(48, Node.DIRECTIVES);
641:       assertEquals(57, Node.REFLECTED_OBJECT);
642:       assertEquals(54, Node.SLASH_V);
643:       assertEquals(49, Node.DIRECT_EVAL);
644:       assertEquals(1, Node.DECR_FLAG);
645:       assertEquals(4095, Node.COLUMN_MASK);
646:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
647:       assertEquals(32, Node.INCRDECR_PROP);
648:       assertEquals(12, Node.COLUMN_BITS);
649:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
650:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
651:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
652:       assertEquals(29, Node.JSDOC_INFO_PROP);
653:       assertEquals(37, Node.OPT_ARG_NAME);
654:       assertEquals(43, Node.IS_CONSTANT_NAME);
655:       assertEquals(56, Node.CHANGE_TIME);
656:       assertEquals(51, Node.STATIC_SOURCE_FILE);
657:       assertEquals(36, Node.QUOTED_PROP);
658:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
659:       assertEquals(46, Node.IS_NAMESPACE);
660:       assertEquals(30, Node.VAR_ARGS_NAME);
661:       assertEquals(15, Node.NO_SIDE_EFFECTS);
662:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
663:       assertEquals(55, Node.INFERRED_FUNCTION);
664:       assertEquals(53, Node.INPUT_ID);
665:       assertEquals(2, Node.POST_FLAG);
666:       assertEquals(57, Node.LAST_PROP);
667:       assertEquals(47, Node.IS_DISPATCHER);
668:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
669:       
670:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
671:       assertNotNull(jSTypeRegistry0);
672:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
673:       
674:       ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
675:       assertNotNull(modificationVisitor0);
676:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
677:       
678:       NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
679:       assertNotNull(noObjectType0);
680:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
681:       assertFalse(noObjectType0.isStringValueType());
682:       assertFalse(noObjectType0.isNumberValueType());
683:       assertFalse(noObjectType0.isNoResolvedType());
684:       assertFalse(noObjectType0.isCheckedUnknownType());
685:       assertTrue(noObjectType0.isObject());
686:       assertTrue(noObjectType0.matchesObjectContext());
687:       assertFalse(noObjectType0.isUnionType());
688:       assertTrue(noObjectType0.hasInstanceType());
689:       assertFalse(noObjectType0.isFunctionPrototypeType());
690:       assertFalse(noObjectType0.hasCachedValues());
691:       assertTrue(noObjectType0.matchesNumberContext());
692:       assertEquals(0, noObjectType0.getExtendedInterfacesCount());
693:       assertFalse(noObjectType0.isEnumType());
694:       assertTrue(noObjectType0.isNoObjectType());
695:       assertFalse(noObjectType0.isVoidType());
696:       assertFalse(noObjectType0.isFunctionType());
697:       assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
698:       assertFalse(noObjectType0.isInterface());
699:       assertFalse(noObjectType0.isTemplateType());
700:       assertTrue(noObjectType0.matchesStringContext());
701:       assertFalse(noObjectType0.isResolved());
702:       assertFalse(noObjectType0.isRecordType());
703:       assertFalse(noObjectType0.isBooleanValueType());
704:       assertFalse(noObjectType0.isReturnTypeInferred());
705:       assertTrue(noObjectType0.isConstructor());
706:       assertFalse(noObjectType0.isNullType());
707:       assertFalse(noObjectType0.isAllType());
708:       assertTrue(noObjectType0.canBeCalled());
709:       assertFalse(noObjectType0.isNoType());
710:       assertFalse(noObjectType0.isNominalType());
711:       assertFalse(noObjectType0.isTemplatizedType());
712:       assertFalse(noObjectType0.isNominalConstructor());
713:       assertFalse(noObjectType0.isOrdinaryFunction());
714:       assertNull(noObjectType0.getReferenceName());
715:       assertFalse(noObjectType0.isEnumElementType());
716:       assertEquals(0, JSType.NOT_ENUMDECL);
717:       assertEquals(1, JSType.ENUMDECL);
718:       
719:       boolean boolean3 = node0.isAssignAdd();
720:       assertTrue(boolean3 == boolean0);
721:       assertTrue(boolean3 == boolean2);
722:       assertTrue(boolean3 == boolean1);
723:       assertFalse(node0.hasMoreThanOneChild());
724:       assertFalse(node0.isOr());
725:       assertFalse(node0.isAssignAdd());
726:       assertFalse(node0.isLabel());
727:       assertFalse(node0.isReturn());
728:       assertFalse(node0.isWhile());
729:       assertFalse(node0.isTypeOf());
730:       assertFalse(node0.isDec());
731:       assertFalse(node0.hasChildren());
732:       assertFalse(node0.isAssign());
733:       assertFalse(node0.isLabelName());
734:       assertFalse(node0.isGetElem());
735:       assertFalse(node0.isContinue());
736:       assertFalse(node0.isCast());
737:       assertFalse(node0.hasOneChild());
738:       assertFalse(node0.isBlock());
739:       assertFalse(node0.isStringKey());
740:       assertFalse(node0.isNumber());
741:       assertFalse(node0.isNot());
742:       assertFalse(node0.isScript());
743:       assertEquals(0, node0.getChildCount());
744:       assertFalse(node0.isParamList());
745:       assertFalse(node0.isBreak());
746:       assertFalse(node0.isComma());
747:       assertFalse(node0.isVoid());
748:       assertFalse(node0.isExprResult());
749:       assertFalse(node0.isName());
750:       assertFalse(node0.isTrue());
751:       assertFalse(node0.isVar());
752:       assertFalse(node0.isNull());
753:       assertFalse(node0.isDefaultCase());
754:       assertFalse(node0.isDo());
755:       assertFalse(node0.isNew());
756:       assertFalse(node0.isAdd());
757:       assertFalse(node0.isEmpty());
758:       assertFalse(node0.isIn());
759:       assertFalse(node0.isNE());
760:       assertFalse(node0.isSwitch());
761:       assertFalse(node0.isIf());
762:       assertFalse(node0.isDelProp());
763:       assertEquals(37, node0.getType());
764:       assertFalse(node0.isHook());
765:       assertFalse(node0.isArrayLit());
766:       assertFalse(node0.isTry());
767:       assertFalse(node0.isFor());
768:       assertFalse(node0.isDebugger());
769:       assertFalse(node0.isGetterDef());
770:       assertFalse(node0.isCase());
771:       assertFalse(node0.isGetProp());
772:       assertFalse(node0.isString());
773:       assertFalse(node0.isInstanceOf());
774:       assertFalse(node0.isObjectLit());
775:       assertFalse(node0.isAnd());
776:       assertFalse(node0.isThis());
777:       assertEquals(37, node0.getLineno());
778:       assertFalse(node0.isRegExp());
779:       assertTrue(node0.isCall());
780:       assertFalse(node0.isFunction());
781:       assertEquals(37, node0.getCharno());
782:       assertFalse(node0.isFalse());
783:       assertFalse(node0.isWith());
784:       assertFalse(node0.isCatch());
785:       assertFalse(node0.isThrow());
786:       assertEquals(151589, node0.getSourcePosition());
787:       assertFalse(node0.isInc());
788:       assertFalse(node0.isSetterDef());
789:       assertFalse(boolean3);
790:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
791:       assertEquals(50, Node.FREE_CALL);
792:       assertEquals(39, Node.EMPTY_BLOCK);
793:       assertEquals(40, Node.ORIGINALNAME_PROP);
794:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
795:       assertEquals(52, Node.LENGTH);
796:       assertEquals(8, Node.FLAG_NO_THROWS);
797:       assertEquals(48, Node.DIRECTIVES);
798:       assertEquals(57, Node.REFLECTED_OBJECT);
799:       assertEquals(54, Node.SLASH_V);
800:       assertEquals(49, Node.DIRECT_EVAL);
801:       assertEquals(1, Node.DECR_FLAG);
802:       assertEquals(4095, Node.COLUMN_MASK);
803:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
804:       assertEquals(32, Node.INCRDECR_PROP);
805:       assertEquals(12, Node.COLUMN_BITS);
806:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
807:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
808:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
809:       assertEquals(29, Node.JSDOC_INFO_PROP);
810:       assertEquals(37, Node.OPT_ARG_NAME);
811:       assertEquals(43, Node.IS_CONSTANT_NAME);
812:       assertEquals(56, Node.CHANGE_TIME);
813:       assertEquals(51, Node.STATIC_SOURCE_FILE);
814:       assertEquals(36, Node.QUOTED_PROP);
815:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
816:       assertEquals(46, Node.IS_NAMESPACE);
817:       assertEquals(30, Node.VAR_ARGS_NAME);
818:       assertEquals(15, Node.NO_SIDE_EFFECTS);
819:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
820:       assertEquals(55, Node.INFERRED_FUNCTION);
821:       assertEquals(53, Node.INPUT_ID);
822:       assertEquals(2, Node.POST_FLAG);
823:       assertEquals(57, Node.LAST_PROP);
824:       assertEquals(47, Node.IS_DISPATCHER);
825:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
826:       
827:       try { 
828:         node0.setDouble((byte)37);
829:         fail("Expecting exception: UnsupportedOperationException");
830:       
831:       } catch(UnsupportedOperationException e) {
832:          //
833:          // CALL 37 is not a string node
834:          //
835:          verifyException("com.google.javascript.rhino.Node", e);
836:       }
837:   }
838: }
RegularFileObject[/tmp/EvoSuite_96_1628256024214/com/google/javascript/rhino/Node_96_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:24 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_96_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_96_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_96_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.InputId",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.javascript.rhino.jstype.TemplatizedType",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.Iterables",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.common.collect.Sets$ImprovedAbstractSet",
354:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
355:       "com.google.common.collect.Hashing",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
358:       "com.google.javascript.rhino.JSTypeExpression",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
367:     );
368:   }
369: }

[MASTER] 13:20:24.309 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
byte[] byteArray0 = new byte[2];
byteArray0[0] = (byte)37;
byteArray0[1] = (byte)0;
boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

Node node0 = new Node((byte)37, (byte)37, (byte)37);
assertNotNull(node0);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertEquals(37, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertEquals(37, node0.getLineno());
assertFalse(node0.isRegExp());
assertTrue(node0.isCall());
assertFalse(node0.isFunction());
assertEquals(37, node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(151589, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

boolean boolean1 = node0.wasEmptyNode();
assertTrue(boolean1 == boolean0);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertEquals(37, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertEquals(37, node0.getLineno());
assertFalse(node0.isRegExp());
assertTrue(node0.isCall());
assertFalse(node0.isFunction());
assertEquals(37, node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(151589, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(boolean1);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

String string0 = node0.toString(false, false, false);
assertNotNull(string0);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertEquals(37, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertEquals(37, node0.getLineno());
assertFalse(node0.isRegExp());
assertTrue(node0.isCall());
assertFalse(node0.isFunction());
assertEquals(37, node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(151589, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals("CALL", string0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

boolean boolean2 = node0.isTrue();
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertEquals(37, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertEquals(37, node0.getLineno());
assertFalse(node0.isRegExp());
assertTrue(node0.isCall());
assertFalse(node0.isFunction());
assertEquals(37, node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(151589, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(boolean2);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertEquals(37, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertEquals(37, node0.getLineno());
assertFalse(node0.isRegExp());
assertTrue(node0.isCall());
assertFalse(node0.isFunction());
assertEquals(37, node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(151589, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

String string1 = node0.getSourceFileName();
assertNull(string1);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertEquals(37, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertEquals(37, node0.getLineno());
assertFalse(node0.isRegExp());
assertTrue(node0.isCall());
assertFalse(node0.isFunction());
assertEquals(37, node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(151589, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
assertNotNull(modificationVisitor0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
assertNotNull(noObjectType0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(noObjectType0.isStringValueType());
assertFalse(noObjectType0.isNumberValueType());
assertFalse(noObjectType0.isNoResolvedType());
assertFalse(noObjectType0.isCheckedUnknownType());
assertTrue(noObjectType0.isObject());
assertTrue(noObjectType0.matchesObjectContext());
assertFalse(noObjectType0.isUnionType());
assertTrue(noObjectType0.hasInstanceType());
assertFalse(noObjectType0.isFunctionPrototypeType());
assertFalse(noObjectType0.hasCachedValues());
assertTrue(noObjectType0.matchesNumberContext());
assertEquals(0, noObjectType0.getExtendedInterfacesCount());
assertFalse(noObjectType0.isEnumType());
assertTrue(noObjectType0.isNoObjectType());
assertFalse(noObjectType0.isVoidType());
assertFalse(noObjectType0.isFunctionType());
assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
assertFalse(noObjectType0.isInterface());
assertFalse(noObjectType0.isTemplateType());
assertTrue(noObjectType0.matchesStringContext());
assertFalse(noObjectType0.isResolved());
assertFalse(noObjectType0.isRecordType());
assertFalse(noObjectType0.isBooleanValueType());
assertFalse(noObjectType0.isReturnTypeInferred());
assertTrue(noObjectType0.isConstructor());
assertFalse(noObjectType0.isNullType());
assertFalse(noObjectType0.isAllType());
assertTrue(noObjectType0.canBeCalled());
assertFalse(noObjectType0.isNoType());
assertFalse(noObjectType0.isNominalType());
assertFalse(noObjectType0.isTemplatizedType());
assertFalse(noObjectType0.isNominalConstructor());
assertFalse(noObjectType0.isOrdinaryFunction());
assertNull(noObjectType0.getReferenceName());
assertFalse(noObjectType0.isEnumElementType());
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);

boolean boolean3 = node0.isAssignAdd();
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertEquals(37, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertEquals(37, node0.getLineno());
assertFalse(node0.isRegExp());
assertTrue(node0.isCall());
assertFalse(node0.isFunction());
assertEquals(37, node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertEquals(151589, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(boolean3);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

node0.setDouble((byte)37);

[MASTER] 13:20:34.283 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_134_1628256033725/com/google/javascript/rhino/Node_134_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_134_1628256033725/com/google/javascript/rhino/Node_134_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:34.283 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:34.283 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:34.284 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2269
[MASTER] 13:20:34.286 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_134_1628256033725/com/google/javascript/rhino/Node_134_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:33 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import java.io.PrintWriter;
13: import java.io.StringWriter;
14: import java.util.Locale;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.mock.java.io.MockPrintWriter;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_134_tmp__ESTest extends Node_134_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Node node0 = Node.newString("", 36, 36);
26:       assertNotNull(node0);
27:       assertFalse(node0.isCast());
28:       assertFalse(node0.hasOneChild());
29:       assertFalse(node0.isAssign());
30:       assertFalse(node0.hasChildren());
31:       assertEquals(36, node0.getLineno());
32:       assertFalse(node0.isDec());
33:       assertFalse(node0.isTypeOf());
34:       assertFalse(node0.isWith());
35:       assertFalse(node0.isLabelName());
36:       assertFalse(node0.isGetElem());
37:       assertFalse(node0.isExprResult());
38:       assertFalse(node0.hasMoreThanOneChild());
39:       assertFalse(node0.isAnd());
40:       assertFalse(node0.isObjectLit());
41:       assertFalse(node0.isNot());
42:       assertFalse(node0.isWhile());
43:       assertFalse(node0.isReturn());
44:       assertFalse(node0.isThis());
45:       assertFalse(node0.isNumber());
46:       assertTrue(node0.isString());
47:       assertFalse(node0.isGetProp());
48:       assertFalse(node0.isScript());
49:       assertFalse(node0.isVar());
50:       assertFalse(node0.isName());
51:       assertFalse(node0.isStringKey());
52:       assertFalse(node0.isNull());
53:       assertFalse(node0.isSwitch());
54:       assertFalse(node0.isParamList());
55:       assertFalse(node0.isComma());
56:       assertFalse(node0.isBreak());
57:       assertFalse(node0.isCall());
58:       assertEquals(0, node0.getChildCount());
59:       assertFalse(node0.isAssignAdd());
60:       assertFalse(node0.isOr());
61:       assertFalse(node0.isLabel());
62:       assertFalse(node0.isDefaultCase());
63:       assertFalse(node0.isDo());
64:       assertFalse(node0.isEmpty());
65:       assertFalse(node0.isNew());
66:       assertFalse(node0.isAdd());
67:       assertFalse(node0.isArrayLit());
68:       assertEquals(147492, node0.getSourcePosition());
69:       assertFalse(node0.isFor());
70:       assertFalse(node0.isTrue());
71:       assertFalse(node0.isNE());
72:       assertFalse(node0.isVoid());
73:       assertFalse(node0.isIf());
74:       assertFalse(node0.isFunction());
75:       assertFalse(node0.isRegExp());
76:       assertFalse(node0.isDelProp());
77:       assertFalse(node0.isCatch());
78:       assertEquals(36, node0.getCharno());
79:       assertFalse(node0.isDebugger());
80:       assertFalse(node0.isGetterDef());
81:       assertFalse(node0.isTry());
82:       assertFalse(node0.isCase());
83:       assertFalse(node0.isFalse());
84:       assertFalse(node0.isHook());
85:       assertFalse(node0.isThrow());
86:       assertFalse(node0.isBlock());
87:       assertFalse(node0.isInstanceOf());
88:       assertFalse(node0.isContinue());
89:       assertFalse(node0.isIn());
90:       assertEquals(40, node0.getType());
91:       assertFalse(node0.isSetterDef());
92:       assertFalse(node0.isInc());
93:       assertEquals(30, Node.VAR_ARGS_NAME);
94:       assertEquals(57, Node.LAST_PROP);
95:       assertEquals(1, Node.DECR_FLAG);
96:       assertEquals(49, Node.DIRECT_EVAL);
97:       assertEquals(15, Node.NO_SIDE_EFFECTS);
98:       assertEquals(52, Node.LENGTH);
99:       assertEquals(51, Node.STATIC_SOURCE_FILE);
100:       assertEquals(56, Node.CHANGE_TIME);
101:       assertEquals(46, Node.IS_NAMESPACE);
102:       assertEquals(54, Node.SLASH_V);
103:       assertEquals(57, Node.REFLECTED_OBJECT);
104:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
105:       assertEquals(50, Node.FREE_CALL);
106:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
107:       assertEquals(37, Node.OPT_ARG_NAME);
108:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
109:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
110:       assertEquals(32, Node.INCRDECR_PROP);
111:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
112:       assertEquals(12, Node.COLUMN_BITS);
113:       assertEquals(55, Node.INFERRED_FUNCTION);
114:       assertEquals(4095, Node.COLUMN_MASK);
115:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
116:       assertEquals(53, Node.INPUT_ID);
117:       assertEquals(48, Node.DIRECTIVES);
118:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
119:       assertEquals(43, Node.IS_CONSTANT_NAME);
120:       assertEquals(36, Node.QUOTED_PROP);
121:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
122:       assertEquals(8, Node.FLAG_NO_THROWS);
123:       assertEquals(39, Node.EMPTY_BLOCK);
124:       assertEquals(40, Node.ORIGINALNAME_PROP);
125:       assertEquals(29, Node.JSDOC_INFO_PROP);
126:       assertEquals(2, Node.POST_FLAG);
127:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
128:       assertEquals(47, Node.IS_DISPATCHER);
129:       
130:       boolean boolean0 = node0.isLabelName();
131:       assertFalse(node0.isCast());
132:       assertFalse(node0.hasOneChild());
133:       assertFalse(node0.isAssign());
134:       assertFalse(node0.hasChildren());
135:       assertEquals(36, node0.getLineno());
136:       assertFalse(node0.isDec());
137:       assertFalse(node0.isTypeOf());
138:       assertFalse(node0.isWith());
139:       assertFalse(node0.isLabelName());
140:       assertFalse(node0.isGetElem());
141:       assertFalse(node0.isExprResult());
142:       assertFalse(node0.hasMoreThanOneChild());
143:       assertFalse(node0.isAnd());
144:       assertFalse(node0.isObjectLit());
145:       assertFalse(node0.isNot());
146:       assertFalse(node0.isWhile());
147:       assertFalse(node0.isReturn());
148:       assertFalse(node0.isThis());
149:       assertFalse(node0.isNumber());
150:       assertTrue(node0.isString());
151:       assertFalse(node0.isGetProp());
152:       assertFalse(node0.isScript());
153:       assertFalse(node0.isVar());
154:       assertFalse(node0.isName());
155:       assertFalse(node0.isStringKey());
156:       assertFalse(node0.isNull());
157:       assertFalse(node0.isSwitch());
158:       assertFalse(node0.isParamList());
159:       assertFalse(node0.isComma());
160:       assertFalse(node0.isBreak());
161:       assertFalse(node0.isCall());
162:       assertEquals(0, node0.getChildCount());
163:       assertFalse(node0.isAssignAdd());
164:       assertFalse(node0.isOr());
165:       assertFalse(node0.isLabel());
166:       assertFalse(node0.isDefaultCase());
167:       assertFalse(node0.isDo());
168:       assertFalse(node0.isEmpty());
169:       assertFalse(node0.isNew());
170:       assertFalse(node0.isAdd());
171:       assertFalse(node0.isArrayLit());
172:       assertEquals(147492, node0.getSourcePosition());
173:       assertFalse(node0.isFor());
174:       assertFalse(node0.isTrue());
175:       assertFalse(node0.isNE());
176:       assertFalse(node0.isVoid());
177:       assertFalse(node0.isIf());
178:       assertFalse(node0.isFunction());
179:       assertFalse(node0.isRegExp());
180:       assertFalse(node0.isDelProp());
181:       assertFalse(node0.isCatch());
182:       assertEquals(36, node0.getCharno());
183:       assertFalse(node0.isDebugger());
184:       assertFalse(node0.isGetterDef());
185:       assertFalse(node0.isTry());
186:       assertFalse(node0.isCase());
187:       assertFalse(node0.isFalse());
188:       assertFalse(node0.isHook());
189:       assertFalse(node0.isThrow());
190:       assertFalse(node0.isBlock());
191:       assertFalse(node0.isInstanceOf());
192:       assertFalse(node0.isContinue());
193:       assertFalse(node0.isIn());
194:       assertEquals(40, node0.getType());
195:       assertFalse(node0.isSetterDef());
196:       assertFalse(node0.isInc());
197:       assertFalse(boolean0);
198:       assertEquals(30, Node.VAR_ARGS_NAME);
199:       assertEquals(57, Node.LAST_PROP);
200:       assertEquals(1, Node.DECR_FLAG);
201:       assertEquals(49, Node.DIRECT_EVAL);
202:       assertEquals(15, Node.NO_SIDE_EFFECTS);
203:       assertEquals(52, Node.LENGTH);
204:       assertEquals(51, Node.STATIC_SOURCE_FILE);
205:       assertEquals(56, Node.CHANGE_TIME);
206:       assertEquals(46, Node.IS_NAMESPACE);
207:       assertEquals(54, Node.SLASH_V);
208:       assertEquals(57, Node.REFLECTED_OBJECT);
209:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
210:       assertEquals(50, Node.FREE_CALL);
211:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
212:       assertEquals(37, Node.OPT_ARG_NAME);
213:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
214:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
215:       assertEquals(32, Node.INCRDECR_PROP);
216:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
217:       assertEquals(12, Node.COLUMN_BITS);
218:       assertEquals(55, Node.INFERRED_FUNCTION);
219:       assertEquals(4095, Node.COLUMN_MASK);
220:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
221:       assertEquals(53, Node.INPUT_ID);
222:       assertEquals(48, Node.DIRECTIVES);
223:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
224:       assertEquals(43, Node.IS_CONSTANT_NAME);
225:       assertEquals(36, Node.QUOTED_PROP);
226:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
227:       assertEquals(8, Node.FLAG_NO_THROWS);
228:       assertEquals(39, Node.EMPTY_BLOCK);
229:       assertEquals(40, Node.ORIGINALNAME_PROP);
230:       assertEquals(29, Node.JSDOC_INFO_PROP);
231:       assertEquals(2, Node.POST_FLAG);
232:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
233:       assertEquals(47, Node.IS_DISPATCHER);
234:       
235:       boolean boolean1 = node0.isOr();
236:       assertTrue(boolean1 == boolean0);
237:       assertFalse(node0.isCast());
238:       assertFalse(node0.hasOneChild());
239:       assertFalse(node0.isAssign());
240:       assertFalse(node0.hasChildren());
241:       assertEquals(36, node0.getLineno());
242:       assertFalse(node0.isDec());
243:       assertFalse(node0.isTypeOf());
244:       assertFalse(node0.isWith());
245:       assertFalse(node0.isLabelName());
246:       assertFalse(node0.isGetElem());
247:       assertFalse(node0.isExprResult());
248:       assertFalse(node0.hasMoreThanOneChild());
249:       assertFalse(node0.isAnd());
250:       assertFalse(node0.isObjectLit());
251:       assertFalse(node0.isNot());
252:       assertFalse(node0.isWhile());
253:       assertFalse(node0.isReturn());
254:       assertFalse(node0.isThis());
255:       assertFalse(node0.isNumber());
256:       assertTrue(node0.isString());
257:       assertFalse(node0.isGetProp());
258:       assertFalse(node0.isScript());
259:       assertFalse(node0.isVar());
260:       assertFalse(node0.isName());
261:       assertFalse(node0.isStringKey());
262:       assertFalse(node0.isNull());
263:       assertFalse(node0.isSwitch());
264:       assertFalse(node0.isParamList());
265:       assertFalse(node0.isComma());
266:       assertFalse(node0.isBreak());
267:       assertFalse(node0.isCall());
268:       assertEquals(0, node0.getChildCount());
269:       assertFalse(node0.isAssignAdd());
270:       assertFalse(node0.isOr());
271:       assertFalse(node0.isLabel());
272:       assertFalse(node0.isDefaultCase());
273:       assertFalse(node0.isDo());
274:       assertFalse(node0.isEmpty());
275:       assertFalse(node0.isNew());
276:       assertFalse(node0.isAdd());
277:       assertFalse(node0.isArrayLit());
278:       assertEquals(147492, node0.getSourcePosition());
279:       assertFalse(node0.isFor());
280:       assertFalse(node0.isTrue());
281:       assertFalse(node0.isNE());
282:       assertFalse(node0.isVoid());
283:       assertFalse(node0.isIf());
284:       assertFalse(node0.isFunction());
285:       assertFalse(node0.isRegExp());
286:       assertFalse(node0.isDelProp());
287:       assertFalse(node0.isCatch());
288:       assertEquals(36, node0.getCharno());
289:       assertFalse(node0.isDebugger());
290:       assertFalse(node0.isGetterDef());
291:       assertFalse(node0.isTry());
292:       assertFalse(node0.isCase());
293:       assertFalse(node0.isFalse());
294:       assertFalse(node0.isHook());
295:       assertFalse(node0.isThrow());
296:       assertFalse(node0.isBlock());
297:       assertFalse(node0.isInstanceOf());
298:       assertFalse(node0.isContinue());
299:       assertFalse(node0.isIn());
300:       assertEquals(40, node0.getType());
301:       assertFalse(node0.isSetterDef());
302:       assertFalse(node0.isInc());
303:       assertFalse(boolean1);
304:       assertEquals(30, Node.VAR_ARGS_NAME);
305:       assertEquals(57, Node.LAST_PROP);
306:       assertEquals(1, Node.DECR_FLAG);
307:       assertEquals(49, Node.DIRECT_EVAL);
308:       assertEquals(15, Node.NO_SIDE_EFFECTS);
309:       assertEquals(52, Node.LENGTH);
310:       assertEquals(51, Node.STATIC_SOURCE_FILE);
311:       assertEquals(56, Node.CHANGE_TIME);
312:       assertEquals(46, Node.IS_NAMESPACE);
313:       assertEquals(54, Node.SLASH_V);
314:       assertEquals(57, Node.REFLECTED_OBJECT);
315:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
316:       assertEquals(50, Node.FREE_CALL);
317:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
318:       assertEquals(37, Node.OPT_ARG_NAME);
319:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
320:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
321:       assertEquals(32, Node.INCRDECR_PROP);
322:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
323:       assertEquals(12, Node.COLUMN_BITS);
324:       assertEquals(55, Node.INFERRED_FUNCTION);
325:       assertEquals(4095, Node.COLUMN_MASK);
326:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
327:       assertEquals(53, Node.INPUT_ID);
328:       assertEquals(48, Node.DIRECTIVES);
329:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
330:       assertEquals(43, Node.IS_CONSTANT_NAME);
331:       assertEquals(36, Node.QUOTED_PROP);
332:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
333:       assertEquals(8, Node.FLAG_NO_THROWS);
334:       assertEquals(39, Node.EMPTY_BLOCK);
335:       assertEquals(40, Node.ORIGINALNAME_PROP);
336:       assertEquals(29, Node.JSDOC_INFO_PROP);
337:       assertEquals(2, Node.POST_FLAG);
338:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
339:       assertEquals(47, Node.IS_DISPATCHER);
340:       
341:       Node node1 = Node.newString(38, "");
342:       assertFalse(node1.equals((Object)node0));
343:       assertNotSame(node1, node0);
344:       assertNotNull(node1);
345:       assertFalse(node1.isObjectLit());
346:       assertFalse(node1.isAnd());
347:       assertFalse(node1.isExprResult());
348:       assertFalse(node1.isThis());
349:       assertFalse(node1.isBreak());
350:       assertEquals(38, node1.getType());
351:       assertFalse(node1.isComma());
352:       assertFalse(node1.isWith());
353:       assertFalse(node1.isFalse());
354:       assertFalse(node1.isInstanceOf());
355:       assertFalse(node1.isCast());
356:       assertFalse(node1.isHook());
357:       assertFalse(node1.hasOneChild());
358:       assertFalse(node1.isLabelName());
359:       assertFalse(node1.isScript());
360:       assertFalse(node1.isNumber());
361:       assertEquals((-1), node1.getCharno());
362:       assertFalse(node1.isGetProp());
363:       assertEquals((-1), node1.getSourcePosition());
364:       assertFalse(node1.isNot());
365:       assertFalse(node1.isString());
366:       assertFalse(node1.hasMoreThanOneChild());
367:       assertFalse(node1.isCase());
368:       assertEquals((-1), node1.getLineno());
369:       assertFalse(node1.isContinue());
370:       assertFalse(node1.isIf());
371:       assertFalse(node1.isThrow());
372:       assertFalse(node1.isNE());
373:       assertFalse(node1.isInc());
374:       assertFalse(node1.isSetterDef());
375:       assertTrue(node1.isName());
376:       assertFalse(node1.isIn());
377:       assertEquals(0, node1.getChildCount());
378:       assertFalse(node1.isDefaultCase());
379:       assertFalse(node1.isParamList());
380:       assertFalse(node1.isRegExp());
381:       assertFalse(node1.isFunction());
382:       assertFalse(node1.isVoid());
383:       assertFalse(node1.isCatch());
384:       assertFalse(node1.isArrayLit());
385:       assertFalse(node1.isFor());
386:       assertFalse(node1.isTry());
387:       assertFalse(node1.isBlock());
388:       assertFalse(node1.isStringKey());
389:       assertFalse(node1.isGetterDef());
390:       assertFalse(node1.isDebugger());
391:       assertFalse(node1.isAssignAdd());
392:       assertFalse(node1.isDo());
393:       assertFalse(node1.isLabel());
394:       assertFalse(node1.isReturn());
395:       assertFalse(node1.isWhile());
396:       assertFalse(node1.isSwitch());
397:       assertFalse(node1.isTypeOf());
398:       assertFalse(node1.hasChildren());
399:       assertFalse(node1.isDelProp());
400:       assertFalse(node1.isDec());
401:       assertFalse(node1.isAssign());
402:       assertFalse(node1.isGetElem());
403:       assertFalse(node1.isVar());
404:       assertFalse(node1.isCall());
405:       assertFalse(node1.isNull());
406:       assertFalse(node1.isTrue());
407:       assertFalse(node1.isNew());
408:       assertFalse(node1.isOr());
409:       assertFalse(node1.isAdd());
410:       assertFalse(node1.isEmpty());
411:       assertEquals(29, Node.JSDOC_INFO_PROP);
412:       assertEquals(47, Node.IS_DISPATCHER);
413:       assertEquals(2, Node.POST_FLAG);
414:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
415:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
416:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
417:       assertEquals(37, Node.OPT_ARG_NAME);
418:       assertEquals(51, Node.STATIC_SOURCE_FILE);
419:       assertEquals(46, Node.IS_NAMESPACE);
420:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
421:       assertEquals(43, Node.IS_CONSTANT_NAME);
422:       assertEquals(56, Node.CHANGE_TIME);
423:       assertEquals(49, Node.DIRECT_EVAL);
424:       assertEquals(1, Node.DECR_FLAG);
425:       assertEquals(4095, Node.COLUMN_MASK);
426:       assertEquals(32, Node.INCRDECR_PROP);
427:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
428:       assertEquals(12, Node.COLUMN_BITS);
429:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
430:       assertEquals(50, Node.FREE_CALL);
431:       assertEquals(40, Node.ORIGINALNAME_PROP);
432:       assertEquals(8, Node.FLAG_NO_THROWS);
433:       assertEquals(39, Node.EMPTY_BLOCK);
434:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
435:       assertEquals(52, Node.LENGTH);
436:       assertEquals(48, Node.DIRECTIVES);
437:       assertEquals(57, Node.REFLECTED_OBJECT);
438:       assertEquals(54, Node.SLASH_V);
439:       assertEquals(30, Node.VAR_ARGS_NAME);
440:       assertEquals(15, Node.NO_SIDE_EFFECTS);
441:       assertEquals(36, Node.QUOTED_PROP);
442:       assertEquals(55, Node.INFERRED_FUNCTION);
443:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
444:       assertEquals(53, Node.INPUT_ID);
445:       assertEquals(57, Node.LAST_PROP);
446:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
447:       
448:       StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
449:       assertFalse(node1.equals((Object)node0));
450:       assertNotSame(node1, node0);
451:       assertNull(staticSourceFile0);
452:       assertFalse(node1.isObjectLit());
453:       assertFalse(node1.isAnd());
454:       assertFalse(node1.isExprResult());
455:       assertFalse(node1.isThis());
456:       assertFalse(node1.isBreak());
457:       assertEquals(38, node1.getType());
458:       assertFalse(node1.isComma());
459:       assertFalse(node1.isWith());
460:       assertFalse(node1.isFalse());
461:       assertFalse(node1.isInstanceOf());
462:       assertFalse(node1.isCast());
463:       assertFalse(node1.isHook());
464:       assertFalse(node1.hasOneChild());
465:       assertFalse(node1.isLabelName());
466:       assertFalse(node1.isScript());
467:       assertFalse(node1.isNumber());
468:       assertEquals((-1), node1.getCharno());
469:       assertFalse(node1.isGetProp());
470:       assertEquals((-1), node1.getSourcePosition());
471:       assertFalse(node1.isNot());
472:       assertFalse(node1.isString());
473:       assertFalse(node1.hasMoreThanOneChild());
474:       assertFalse(node1.isCase());
475:       assertEquals((-1), node1.getLineno());
476:       assertFalse(node1.isContinue());
477:       assertFalse(node1.isIf());
478:       assertFalse(node1.isThrow());
479:       assertFalse(node1.isNE());
480:       assertFalse(node1.isInc());
481:       assertFalse(node1.isSetterDef());
482:       assertTrue(node1.isName());
483:       assertFalse(node1.isIn());
484:       assertEquals(0, node1.getChildCount());
485:       assertFalse(node1.isDefaultCase());
486:       assertFalse(node1.isParamList());
487:       assertFalse(node1.isRegExp());
488:       assertFalse(node1.isFunction());
489:       assertFalse(node1.isVoid());
490:       assertFalse(node1.isCatch());
491:       assertFalse(node1.isArrayLit());
492:       assertFalse(node1.isFor());
493:       assertFalse(node1.isTry());
494:       assertFalse(node1.isBlock());
495:       assertFalse(node1.isStringKey());
496:       assertFalse(node1.isGetterDef());
497:       assertFalse(node1.isDebugger());
498:       assertFalse(node1.isAssignAdd());
499:       assertFalse(node1.isDo());
500:       assertFalse(node1.isLabel());
501:       assertFalse(node1.isReturn());
502:       assertFalse(node1.isWhile());
503:       assertFalse(node1.isSwitch());
504:       assertFalse(node1.isTypeOf());
505:       assertFalse(node1.hasChildren());
506:       assertFalse(node1.isDelProp());
507:       assertFalse(node1.isDec());
508:       assertFalse(node1.isAssign());
509:       assertFalse(node1.isGetElem());
510:       assertFalse(node1.isVar());
511:       assertFalse(node1.isCall());
512:       assertFalse(node1.isNull());
513:       assertFalse(node1.isTrue());
514:       assertFalse(node1.isNew());
515:       assertFalse(node1.isOr());
516:       assertFalse(node1.isAdd());
517:       assertFalse(node1.isEmpty());
518:       assertEquals(29, Node.JSDOC_INFO_PROP);
519:       assertEquals(47, Node.IS_DISPATCHER);
520:       assertEquals(2, Node.POST_FLAG);
521:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
522:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
523:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
524:       assertEquals(37, Node.OPT_ARG_NAME);
525:       assertEquals(51, Node.STATIC_SOURCE_FILE);
526:       assertEquals(46, Node.IS_NAMESPACE);
527:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
528:       assertEquals(43, Node.IS_CONSTANT_NAME);
529:       assertEquals(56, Node.CHANGE_TIME);
530:       assertEquals(49, Node.DIRECT_EVAL);
531:       assertEquals(1, Node.DECR_FLAG);
532:       assertEquals(4095, Node.COLUMN_MASK);
533:       assertEquals(32, Node.INCRDECR_PROP);
534:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
535:       assertEquals(12, Node.COLUMN_BITS);
536:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
537:       assertEquals(50, Node.FREE_CALL);
538:       assertEquals(40, Node.ORIGINALNAME_PROP);
539:       assertEquals(8, Node.FLAG_NO_THROWS);
540:       assertEquals(39, Node.EMPTY_BLOCK);
541:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
542:       assertEquals(52, Node.LENGTH);
543:       assertEquals(48, Node.DIRECTIVES);
544:       assertEquals(57, Node.REFLECTED_OBJECT);
545:       assertEquals(54, Node.SLASH_V);
546:       assertEquals(30, Node.VAR_ARGS_NAME);
547:       assertEquals(15, Node.NO_SIDE_EFFECTS);
548:       assertEquals(36, Node.QUOTED_PROP);
549:       assertEquals(55, Node.INFERRED_FUNCTION);
550:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
551:       assertEquals(53, Node.INPUT_ID);
552:       assertEquals(57, Node.LAST_PROP);
553:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
554:       
555:       Node node2 = Node.newNumber((double) 12, 36, 37);
556:       assertFalse(node2.equals((Object)node0));
557:       assertFalse(node2.equals((Object)node1));
558:       assertNotNull(node2);
559:       assertFalse(node2.isScript());
560:       assertFalse(node2.isExprResult());
561:       assertFalse(node2.isWith());
562:       assertFalse(node2.isNot());
563:       assertFalse(node2.isGetElem());
564:       assertFalse(node2.isAnd());
565:       assertFalse(node2.isCast());
566:       assertFalse(node2.isLabelName());
567:       assertEquals(37, node2.getCharno());
568:       assertFalse(node2.isLabel());
569:       assertFalse(node2.isOr());
570:       assertFalse(node2.isThrow());
571:       assertFalse(node2.isAssignAdd());
572:       assertFalse(node2.isDo());
573:       assertEquals(147493, node2.getSourcePosition());
574:       assertFalse(node2.isInc());
575:       assertFalse(node2.isBlock());
576:       assertFalse(node2.isHook());
577:       assertFalse(node2.isStringKey());
578:       assertFalse(node2.isSwitch());
579:       assertFalse(node2.isParamList());
580:       assertFalse(node2.isThis());
581:       assertFalse(node2.isInstanceOf());
582:       assertEquals(36, node2.getLineno());
583:       assertFalse(node2.hasMoreThanOneChild());
584:       assertFalse(node2.isGetterDef());
585:       assertFalse(node2.isCase());
586:       assertEquals(39, node2.getType());
587:       assertFalse(node2.isFor());
588:       assertFalse(node2.hasOneChild());
589:       assertFalse(node2.isTry());
590:       assertFalse(node2.isDebugger());
591:       assertFalse(node2.isTrue());
592:       assertFalse(node2.isFunction());
593:       assertFalse(node2.isRegExp());
594:       assertFalse(node2.isCatch());
595:       assertFalse(node2.isIf());
596:       assertFalse(node2.isArrayLit());
597:       assertFalse(node2.isVoid());
598:       assertFalse(node2.isDelProp());
599:       assertFalse(node2.isNE());
600:       assertFalse(node2.isSetterDef());
601:       assertFalse(node2.isNull());
602:       assertFalse(node2.isIn());
603:       assertEquals(0, node2.getChildCount());
604:       assertFalse(node2.isVar());
605:       assertFalse(node2.isEmpty());
606:       assertFalse(node2.isDefaultCase());
607:       assertFalse(node2.isNew());
608:       assertFalse(node2.isAdd());
609:       assertFalse(node2.isString());
610:       assertFalse(node2.isFalse());
611:       assertFalse(node2.isContinue());
612:       assertFalse(node2.isCall());
613:       assertFalse(node2.isBreak());
614:       assertFalse(node2.isName());
615:       assertFalse(node2.isGetProp());
616:       assertFalse(node2.isReturn());
617:       assertFalse(node2.isDec());
618:       assertFalse(node2.hasChildren());
619:       assertFalse(node2.isAssign());
620:       assertFalse(node2.isComma());
621:       assertFalse(node2.isTypeOf());
622:       assertFalse(node2.isObjectLit());
623:       assertFalse(node2.isWhile());
624:       assertTrue(node2.isNumber());
625:       assertEquals(51, Node.STATIC_SOURCE_FILE);
626:       assertEquals(12, Node.COLUMN_BITS);
627:       assertEquals(46, Node.IS_NAMESPACE);
628:       assertEquals(1, Node.DECR_FLAG);
629:       assertEquals(37, Node.OPT_ARG_NAME);
630:       assertEquals(49, Node.DIRECT_EVAL);
631:       assertEquals(32, Node.INCRDECR_PROP);
632:       assertEquals(56, Node.CHANGE_TIME);
633:       assertEquals(15, Node.NO_SIDE_EFFECTS);
634:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
635:       assertEquals(29, Node.JSDOC_INFO_PROP);
636:       assertEquals(54, Node.SLASH_V);
637:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
638:       assertEquals(52, Node.LENGTH);
639:       assertEquals(40, Node.ORIGINALNAME_PROP);
640:       assertEquals(53, Node.INPUT_ID);
641:       assertEquals(57, Node.LAST_PROP);
642:       assertEquals(47, Node.IS_DISPATCHER);
643:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
644:       assertEquals(30, Node.VAR_ARGS_NAME);
645:       assertEquals(2, Node.POST_FLAG);
646:       assertEquals(4095, Node.COLUMN_MASK);
647:       assertEquals(55, Node.INFERRED_FUNCTION);
648:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
649:       assertEquals(48, Node.DIRECTIVES);
650:       assertEquals(43, Node.IS_CONSTANT_NAME);
651:       assertEquals(36, Node.QUOTED_PROP);
652:       assertEquals(39, Node.EMPTY_BLOCK);
653:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
654:       assertEquals(8, Node.FLAG_NO_THROWS);
655:       assertEquals(50, Node.FREE_CALL);
656:       assertEquals(57, Node.REFLECTED_OBJECT);
657:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
658:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
659:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
660:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
661:       
662:       Node node3 = node0.copyInformationFrom(node2);
663:       assertFalse(node0.equals((Object)node1));
664:       assertFalse(node0.equals((Object)node2));
665:       assertFalse(node2.equals((Object)node0));
666:       assertFalse(node2.equals((Object)node1));
667:       assertFalse(node3.equals((Object)node2));
668:       assertFalse(node3.equals((Object)node1));
669:       assertNotSame(node0, node1);
670:       assertSame(node0, node3);
671:       assertSame(node3, node0);
672:       assertNotSame(node3, node1);
673:       assertNotNull(node3);
674:       assertFalse(node0.isCast());
675:       assertFalse(node0.hasOneChild());
676:       assertFalse(node0.isAssign());
677:       assertFalse(node0.hasChildren());
678:       assertEquals(36, node0.getLineno());
679:       assertFalse(node0.isDec());
680:       assertFalse(node0.isTypeOf());
681:       assertFalse(node0.isWith());
682:       assertFalse(node0.isLabelName());
683:       assertFalse(node0.isGetElem());
684:       assertFalse(node0.isExprResult());
685:       assertFalse(node0.hasMoreThanOneChild());
686:       assertFalse(node0.isAnd());
687:       assertFalse(node0.isObjectLit());
688:       assertFalse(node0.isNot());
689:       assertFalse(node0.isWhile());
690:       assertFalse(node0.isReturn());
691:       assertFalse(node0.isThis());
692:       assertFalse(node0.isNumber());
693:       assertTrue(node0.isString());
694:       assertFalse(node0.isGetProp());
695:       assertFalse(node0.isScript());
696:       assertFalse(node0.isVar());
697:       assertFalse(node0.isName());
698:       assertFalse(node0.isStringKey());
699:       assertFalse(node0.isNull());
700:       assertFalse(node0.isSwitch());
701:       assertFalse(node0.isParamList());
702:       assertFalse(node0.isComma());
703:       assertFalse(node0.isBreak());
704:       assertFalse(node0.isCall());
705:       assertEquals(0, node0.getChildCount());
706:       assertFalse(node0.isAssignAdd());
707:       assertFalse(node0.isOr());
708:       assertFalse(node0.isLabel());
709:       assertFalse(node0.isDefaultCase());
710:       assertFalse(node0.isDo());
711:       assertFalse(node0.isEmpty());
712:       assertFalse(node0.isNew());
713:       assertFalse(node0.isAdd());
714:       assertFalse(node0.isArrayLit());
715:       assertFalse(node0.isFor());
716:       assertFalse(node0.isTrue());
717:       assertFalse(node0.isNE());
718:       assertFalse(node0.isVoid());
719:       assertFalse(node0.isIf());
720:       assertFalse(node0.isFunction());
721:       assertFalse(node0.isRegExp());
722:       assertFalse(node0.isDelProp());
723:       assertFalse(node0.isCatch());
724:       assertFalse(node0.isDebugger());
725:       assertFalse(node0.isGetterDef());
726:       assertFalse(node0.isTry());
727:       assertFalse(node0.isCase());
728:       assertFalse(node0.isFalse());
729:       assertEquals(147493, node0.getSourcePosition());
730:       assertFalse(node0.isHook());
731:       assertFalse(node0.isThrow());
732:       assertFalse(node0.isBlock());
733:       assertFalse(node0.isInstanceOf());
734:       assertFalse(node0.isContinue());
735:       assertFalse(node0.isIn());
736:       assertEquals(37, node0.getCharno());
737:       assertEquals(40, node0.getType());
738:       assertFalse(node0.isSetterDef());
739:       assertFalse(node0.isInc());
740:       assertFalse(node2.isScript());
741:       assertFalse(node2.isExprResult());
742:       assertFalse(node2.isWith());
743:       assertFalse(node2.isNot());
744:       assertFalse(node2.isGetElem());
745:       assertFalse(node2.isAnd());
746:       assertFalse(node2.isCast());
747:       assertFalse(node2.isLabelName());
748:       assertEquals(37, node2.getCharno());
749:       assertFalse(node2.isLabel());
750:       assertFalse(node2.isOr());
751:       assertFalse(node2.isThrow());
752:       assertFalse(node2.isAssignAdd());
753:       assertFalse(node2.isDo());
754:       assertEquals(147493, node2.getSourcePosition());
755:       assertFalse(node2.isInc());
756:       assertFalse(node2.isBlock());
757:       assertFalse(node2.isHook());
758:       assertFalse(node2.isStringKey());
759:       assertFalse(node2.isSwitch());
760:       assertFalse(node2.isParamList());
761:       assertFalse(node2.isThis());
762:       assertFalse(node2.isInstanceOf());
763:       assertEquals(36, node2.getLineno());
764:       assertFalse(node2.hasMoreThanOneChild());
765:       assertFalse(node2.isGetterDef());
766:       assertFalse(node2.isCase());
767:       assertEquals(39, node2.getType());
768:       assertFalse(node2.isFor());
769:       assertFalse(node2.hasOneChild());
770:       assertFalse(node2.isTry());
771:       assertFalse(node2.isDebugger());
772:       assertFalse(node2.isTrue());
773:       assertFalse(node2.isFunction());
774:       assertFalse(node2.isRegExp());
775:       assertFalse(node2.isCatch());
776:       assertFalse(node2.isIf());
777:       assertFalse(node2.isArrayLit());
778:       assertFalse(node2.isVoid());
779:       assertFalse(node2.isDelProp());
780:       assertFalse(node2.isNE());
781:       assertFalse(node2.isSetterDef());
782:       assertFalse(node2.isNull());
783:       assertFalse(node2.isIn());
784:       assertEquals(0, node2.getChildCount());
785:       assertFalse(node2.isVar());
786:       assertFalse(node2.isEmpty());
787:       assertFalse(node2.isDefaultCase());
788:       assertFalse(node2.isNew());
789:       assertFalse(node2.isAdd());
790:       assertFalse(node2.isString());
791:       assertFalse(node2.isFalse());
792:       assertFalse(node2.isContinue());
793:       assertFalse(node2.isCall());
794:       assertFalse(node2.isBreak());
795:       assertFalse(node2.isName());
796:       assertFalse(node2.isGetProp());
797:       assertFalse(node2.isReturn());
798:       assertFalse(node2.isDec());
799:       assertFalse(node2.hasChildren());
800:       assertFalse(node2.isAssign());
801:       assertFalse(node2.isComma());
802:       assertFalse(node2.isTypeOf());
803:       assertFalse(node2.isObjectLit());
804:       assertFalse(node2.isWhile());
805:       assertTrue(node2.isNumber());
806:       assertFalse(node3.isVoid());
807:       assertFalse(node3.isFunction());
808:       assertFalse(node3.isTrue());
809:       assertFalse(node3.isTry());
810:       assertFalse(node3.isDebugger());
811:       assertFalse(node3.isRegExp());
812:       assertFalse(node3.isArrayLit());
813:       assertFalse(node3.isIf());
814:       assertFalse(node3.isDelProp());
815:       assertFalse(node3.isNE());
816:       assertFalse(node3.isGetterDef());
817:       assertFalse(node3.isCatch());
818:       assertFalse(node3.isFor());
819:       assertFalse(node3.isCase());
820:       assertFalse(node3.isBlock());
821:       assertFalse(node3.isInc());
822:       assertEquals(147493, node3.getSourcePosition());
823:       assertFalse(node3.isSetterDef());
824:       assertFalse(node3.isIn());
825:       assertFalse(node3.isContinue());
826:       assertFalse(node3.isFalse());
827:       assertFalse(node3.isThrow());
828:       assertEquals(40, node3.getType());
829:       assertFalse(node3.isExprResult());
830:       assertFalse(node3.isScript());
831:       assertFalse(node3.isCast());
832:       assertFalse(node3.isWith());
833:       assertFalse(node3.isGetElem());
834:       assertEquals(37, node3.getCharno());
835:       assertFalse(node3.isObjectLit());
836:       assertFalse(node3.isLabelName());
837:       assertFalse(node3.isNot());
838:       assertFalse(node3.isAnd());
839:       assertFalse(node3.isGetProp());
840:       assertFalse(node3.isThis());
841:       assertFalse(node3.isComma());
842:       assertFalse(node3.isDec());
843:       assertFalse(node3.isInstanceOf());
844:       assertFalse(node3.isBreak());
845:       assertFalse(node3.isNumber());
846:       assertFalse(node3.isTypeOf());
847:       assertFalse(node3.hasMoreThanOneChild());
848:       assertEquals(36, node3.getLineno());
849:       assertFalse(node3.isAssign());
850:       assertFalse(node3.hasOneChild());
851:       assertFalse(node3.hasChildren());
852:       assertFalse(node3.isHook());
853:       assertFalse(node3.isReturn());
854:       assertFalse(node3.isWhile());
855:       assertFalse(node3.isAdd());
856:       assertTrue(node3.isString());
857:       assertFalse(node3.isNew());
858:       assertFalse(node3.isStringKey());
859:       assertFalse(node3.isName());
860:       assertFalse(node3.isCall());
861:       assertFalse(node3.isNull());
862:       assertFalse(node3.isSwitch());
863:       assertFalse(node3.isParamList());
864:       assertFalse(node3.isOr());
865:       assertFalse(node3.isLabel());
866:       assertEquals(0, node3.getChildCount());
867:       assertFalse(node3.isEmpty());
868:       assertFalse(node3.isDo());
869:       assertFalse(node3.isDefaultCase());
870:       assertFalse(node3.isAssignAdd());
871:       assertFalse(node3.isVar());
872:       assertEquals(30, Node.VAR_ARGS_NAME);
873:       assertEquals(57, Node.LAST_PROP);
874:       assertEquals(1, Node.DECR_FLAG);
875:       
876:       boolean boolean2 = node0.getBooleanProp(53);
877:       assertFalse(node0.equals((Object)node1));
878:       assertFalse(node0.equals((Object)node2));
879:       assertTrue(boolean2 == boolean1);
880:       assertTrue(boolean2 == boolean0);
881:       assertNotSame(node0, node1);
882:       assertSame(node0, node3);
883:       assertFalse(node0.isCast());
884:       assertFalse(node0.hasOneChild());
885:       assertFalse(node0.isAssign());
886:       assertFalse(node0.hasChildren());
887:       assertEquals(36, node0.getLineno());
888:       assertFalse(node0.isDec());
889:       assertFalse(node0.isTypeOf());
890:       assertFalse(node0.isWith());
891:       assertFalse(node0.isLabelName());
892:       assertFalse(node0.isGetElem());
893:       assertFalse(node0.isExprResult());
894:       assertFalse(node0.hasMoreThanOneChild());
895:       assertFalse(node0.isAnd());
896:       assertFalse(node0.isObjectLit());
897:       assertFalse(node0.isNot());
898:       assertFalse(node0.isWhile());
899:       assertFalse(node0.isReturn());
900:       assertFalse(node0.isThis());
901:       assertFalse(node0.isNumber());
902:       assertTrue(node0.isString());
903:       assertFalse(node0.isGetProp());
904:       assertFalse(node0.isScript());
905:       assertFalse(node0.isVar());
906:       assertFalse(node0.isName());
907:       assertFalse(node0.isStringKey());
908:       assertFalse(node0.isNull());
909:       assertFalse(node0.isSwitch());
910:       assertFalse(node0.isParamList());
911:       assertFalse(node0.isComma());
912:       assertFalse(node0.isBreak());
913:       assertFalse(node0.isCall());
914:       assertEquals(0, node0.getChildCount());
915:       assertFalse(node0.isAssignAdd());
916:       assertFalse(node0.isOr());
917:       assertFalse(node0.isLabel());
918:       assertFalse(node0.isDefaultCase());
919:       assertFalse(node0.isDo());
920:       assertFalse(node0.isEmpty());
921:       assertFalse(node0.isNew());
922:       assertFalse(node0.isAdd());
923:       assertFalse(node0.isArrayLit());
924:       assertFalse(node0.isFor());
925:       assertFalse(node0.isTrue());
926:       assertFalse(node0.isNE());
927:       assertFalse(node0.isVoid());
928:       assertFalse(node0.isIf());
929:       assertFalse(node0.isFunction());
930:       assertFalse(node0.isRegExp());
931:       assertFalse(node0.isDelProp());
932:       assertFalse(node0.isCatch());
933:       assertFalse(node0.isDebugger());
934:       assertFalse(node0.isGetterDef());
935:       assertFalse(node0.isTry());
936:       assertFalse(node0.isCase());
937:       assertFalse(node0.isFalse());
938:       assertEquals(147493, node0.getSourcePosition());
939:       assertFalse(node0.isHook());
940:       assertFalse(node0.isThrow());
941:       assertFalse(node0.isBlock());
942:       assertFalse(node0.isInstanceOf());
943:       assertFalse(node0.isContinue());
944:       assertFalse(node0.isIn());
945:       assertEquals(37, node0.getCharno());
946:       assertEquals(40, node0.getType());
947:       assertFalse(node0.isSetterDef());
948:       assertFalse(node0.isInc());
949:       assertFalse(boolean2);
950:       
951:       boolean boolean3 = node0.isReturn();
952:       assertFalse(node0.equals((Object)node1));
953:       assertFalse(node0.equals((Object)node2));
954:       assertTrue(boolean3 == boolean0);
955:       assertTrue(boolean3 == boolean1);
956:       assertTrue(boolean3 == boolean2);
957:       assertNotSame(node0, node1);
958:       assertSame(node0, node3);
959:       assertFalse(node0.isCast());
960:       assertFalse(node0.hasOneChild());
961:       assertFalse(node0.isAssign());
962:       assertFalse(node0.hasChildren());
963:       assertEquals(36, node0.getLineno());
964:       assertFalse(node0.isDec());
965:       assertFalse(node0.isTypeOf());
966:       assertFalse(node0.isWith());
967:       assertFalse(node0.isLabelName());
968:       assertFalse(node0.isGetElem());
969:       assertFalse(node0.isExprResult());
970:       assertFalse(node0.hasMoreThanOneChild());
971:       assertFalse(node0.isAnd());
972:       assertFalse(node0.isObjectLit());
973:       assertFalse(node0.isNot());
974:       assertFalse(node0.isWhile());
975:       assertFalse(node0.isReturn());
976:       assertFalse(node0.isThis());
977:       assertFalse(node0.isNumber());
978:       assertTrue(node0.isString());
979:       assertFalse(node0.isGetProp());
980:       assertFalse(node0.isScript());
981:       assertFalse(node0.isVar());
982:       assertFalse(node0.isName());
983:       assertFalse(node0.isStringKey());
984:       assertFalse(node0.isNull());
985:       assertFalse(node0.isSwitch());
986:       assertFalse(node0.isParamList());
987:       assertFalse(node0.isComma());
988:       assertFalse(node0.isBreak());
989:       assertFalse(node0.isCall());
990:       assertEquals(0, node0.getChildCount());
991:       assertFalse(node0.isAssignAdd());
992:       assertFalse(node0.isOr());
993:       assertFalse(node0.isLabel());
994:       assertFalse(node0.isDefaultCase());
995:       assertFalse(node0.isDo());
996:       assertFalse(node0.isEmpty());
997:       assertFalse(node0.isNew());
998:       assertFalse(node0.isAdd());
999:       assertFalse(node0.isArrayLit());
1000:       assertFalse(node0.isFor());
1001:       assertFalse(node0.isTrue());
1002:       assertFalse(node0.isNE());
1003:       assertFalse(node0.isVoid());
1004:       assertFalse(node0.isIf());
1005:       assertFalse(node0.isFunction());
1006:       assertFalse(node0.isRegExp());
1007:       assertFalse(node0.isDelProp());
1008:       assertFalse(node0.isCatch());
1009:       assertFalse(node0.isDebugger());
1010:       assertFalse(node0.isGetterDef());
1011:       assertFalse(node0.isTry());
1012:       assertFalse(node0.isCase());
1013:       assertFalse(node0.isFalse());
1014:       assertEquals(147493, node0.getSourcePosition());
1015:       assertFalse(node0.isHook());
1016:       assertFalse(node0.isThrow());
1017:       assertFalse(node0.isBlock());
1018:       assertFalse(node0.isInstanceOf());
1019:       assertFalse(node0.isContinue());
1020:       assertFalse(node0.isIn());
1021:       assertEquals(37, node0.getCharno());
1022:       assertEquals(40, node0.getType());
1023:       assertFalse(node0.isSetterDef());
1024:       assertFalse(node0.isInc());
1025:       assertFalse(boolean3);
1026:       
1027:       Node node4 = new Node(471, node3, node3, node0, node1);
1028:       assertFalse(node0.equals((Object)node1));
1029:       assertFalse(node0.equals((Object)node2));
1030:       assertFalse(node1.equals((Object)node3));
1031:       assertFalse(node1.equals((Object)node2));
1032:       assertFalse(node1.equals((Object)node0));
1033:       assertFalse(node2.equals((Object)node0));
1034:       assertFalse(node2.equals((Object)node1));
1035:       assertFalse(node2.equals((Object)node3));
1036:       assertFalse(node3.equals((Object)node2));
1037:       assertFalse(node3.equals((Object)node1));
1038:       assertFalse(node4.equals((Object)node3));
1039:       assertFalse(node4.equals((Object)node1));
1040:       assertFalse(node4.equals((Object)node2));
1041:       assertFalse(node4.equals((Object)node0));
1042:       assertNotNull(node4);
1043:       assertFalse(node0.isCast());
1044:       assertFalse(node0.hasOneChild());
1045:       assertFalse(node0.isAssign());
1046:       assertFalse(node0.hasChildren());
1047:       assertEquals(36, node0.getLineno());
1048:       assertFalse(node0.isDec());
1049:       assertFalse(node0.isTypeOf());
1050:       assertFalse(node0.isWith());
1051:       assertFalse(node0.isLabelName());
1052:       assertFalse(node0.isGetElem());
1053:       assertFalse(node0.isExprResult());
1054:       assertFalse(node0.hasMoreThanOneChild());
1055:       assertFalse(node0.isAnd());
1056:       assertFalse(node0.isObjectLit());
1057:       assertFalse(node0.isNot());
1058:       assertFalse(node0.isWhile());
1059:       assertFalse(node0.isReturn());
1060:       assertFalse(node0.isThis());
1061:       assertFalse(node0.isNumber());
1062:       assertTrue(node0.isString());
1063:       assertFalse(node0.isGetProp());
1064:       assertFalse(node0.isScript());
1065:       assertFalse(node0.isVar());
1066:       assertFalse(node0.isName());
1067:       assertFalse(node0.isStringKey());
1068:       assertFalse(node0.isNull());
1069:       assertFalse(node0.isSwitch());
1070:       assertFalse(node0.isParamList());
1071:       assertFalse(node0.isComma());
1072:       assertFalse(node0.isBreak());
1073:       assertFalse(node0.isCall());
1074:       assertEquals(0, node0.getChildCount());
1075:       assertFalse(node0.isAssignAdd());
1076:       assertFalse(node0.isOr());
1077:       assertFalse(node0.isLabel());
1078:       assertFalse(node0.isDefaultCase());
1079:       assertFalse(node0.isDo());
1080:       assertFalse(node0.isEmpty());
1081:       assertFalse(node0.isNew());
1082:       assertFalse(node0.isAdd());
1083:       assertFalse(node0.isArrayLit());
1084:       assertFalse(node0.isFor());
1085:       assertFalse(node0.isTrue());
1086:       assertFalse(node0.isNE());
1087:       assertFalse(node0.isVoid());
1088:       assertFalse(node0.isIf());
1089:       assertFalse(node0.isFunction());
1090:       assertFalse(node0.isRegExp());
1091:       assertFalse(node0.isDelProp());
1092:       assertFalse(node0.isCatch());
1093:       assertFalse(node0.isDebugger());
1094:       assertFalse(node0.isGetterDef());
1095:       assertFalse(node0.isTry());
1096:       assertFalse(node0.isCase());
1097:       assertFalse(node0.isFalse());
1098:       assertEquals(147493, node0.getSourcePosition());
1099:       assertFalse(node0.isHook());
1100:       assertFalse(node0.isThrow());
1101:       assertFalse(node0.isBlock());
1102:       assertFalse(node0.isInstanceOf());
1103:       assertFalse(node0.isContinue());
1104:       assertFalse(node0.isIn());
1105:       assertEquals(37, node0.getCharno());
1106:       assertEquals(40, node0.getType());
1107:       assertFalse(node0.isSetterDef());
1108:       assertFalse(node0.isInc());
1109:       assertFalse(node1.isObjectLit());
1110:       assertFalse(node1.isAnd());
1111:       assertFalse(node1.isExprResult());
1112:       assertFalse(node1.isThis());
1113:       assertFalse(node1.isBreak());
1114:       assertEquals(38, node1.getType());
1115:       assertFalse(node1.isComma());
1116:       assertFalse(node1.isWith());
1117:       assertFalse(node1.isFalse());
1118:       assertFalse(node1.isInstanceOf());
1119:       assertFalse(node1.isCast());
1120:       assertFalse(node1.isHook());
1121:       assertFalse(node1.hasOneChild());
1122:       assertFalse(node1.isLabelName());
1123:       assertFalse(node1.isScript());
1124:       assertFalse(node1.isNumber());
1125:       assertEquals((-1), node1.getCharno());
1126:       assertFalse(node1.isGetProp());
1127:       assertEquals((-1), node1.getSourcePosition());
1128:       assertFalse(node1.isNot());
1129:       assertFalse(node1.isString());
1130:       assertFalse(node1.hasMoreThanOneChild());
1131:       assertFalse(node1.isCase());
1132:       assertEquals((-1), node1.getLineno());
1133:       assertFalse(node1.isContinue());
1134:       assertFalse(node1.isIf());
1135:       assertFalse(node1.isThrow());
1136:       assertFalse(node1.isNE());
1137:       assertFalse(node1.isInc());
1138:       assertFalse(node1.isSetterDef());
1139:       assertTrue(node1.isName());
1140:       assertFalse(node1.isIn());
1141:       assertEquals(0, node1.getChildCount());
1142:       assertFalse(node1.isDefaultCase());
1143:       assertFalse(node1.isParamList());
1144:       assertFalse(node1.isRegExp());
1145:       assertFalse(node1.isFunction());
1146:       assertFalse(node1.isVoid());
1147:       assertFalse(node1.isCatch());
1148:       assertFalse(node1.isArrayLit());
1149:       assertFalse(node1.isFor());
1150:       assertFalse(node1.isTry());
1151:       assertFalse(node1.isBlock());
1152:       assertFalse(node1.isStringKey());
1153:       assertFalse(node1.isGetterDef());
1154:       assertFalse(node1.isDebugger());
1155:       assertFalse(node1.isAssignAdd());
1156:       assertFalse(node1.isDo());
1157:       assertFalse(node1.isLabel());
1158:       assertFalse(node1.isReturn());
1159:       assertFalse(node1.isWhile());
1160:       assertFalse(node1.isSwitch());
1161:       assertFalse(node1.isTypeOf());
1162:       assertFalse(node1.hasChildren());
1163:       assertFalse(node1.isDelProp());
1164:       assertFalse(node1.isDec());
1165:       assertFalse(node1.isAssign());
1166:       assertFalse(node1.isGetElem());
1167:       assertFalse(node1.isVar());
1168:       assertFalse(node1.isCall());
1169:       assertFalse(node1.isNull());
1170:       assertFalse(node1.isTrue());
1171:       assertFalse(node1.isNew());
1172:       assertFalse(node1.isOr());
1173:       assertFalse(node1.isAdd());
1174:       assertFalse(node1.isEmpty());
1175:       assertFalse(node2.isScript());
1176:       assertFalse(node2.isExprResult());
1177:       assertFalse(node2.isWith());
1178:       assertFalse(node2.isNot());
1179:       assertFalse(node2.isGetElem());
1180:       assertFalse(node2.isAnd());
1181:       assertFalse(node2.isCast());
1182:       assertFalse(node2.isLabelName());
1183:       assertEquals(37, node2.getCharno());
1184:       assertFalse(node2.isLabel());
1185:       assertFalse(node2.isOr());
1186:       assertFalse(node2.isThrow());
1187:       assertFalse(node2.isAssignAdd());
1188:       assertFalse(node2.isDo());
1189:       assertEquals(147493, node2.getSourcePosition());
1190:       assertFalse(node2.isInc());
1191:       assertFalse(node2.isBlock());
1192:       assertFalse(node2.isHook());
1193:       assertFalse(node2.isStringKey());
1194:       assertFalse(node2.isSwitch());
1195:       assertFalse(node2.isParamList());
1196:       assertFalse(node2.isThis());
1197:       assertFalse(node2.isInstanceOf());
1198:       assertEquals(36, node2.getLineno());
1199:       assertFalse(node2.hasMoreThanOneChild());
1200:       assertFalse(node2.isGetterDef());
1201:       assertFalse(node2.isCase());
1202:       assertEquals(39, node2.getType());
1203:       assertFalse(node2.isFor());
1204:       assertFalse(node2.hasOneChild());
1205:       assertFalse(node2.isTry());
1206:       assertFalse(node2.isDebugger());
1207:       assertFalse(node2.isTrue());
1208:       assertFalse(node2.isFunction());
1209:       assertFalse(node2.isRegExp());
1210:       assertFalse(node2.isCatch());
1211:       assertFalse(node2.isIf());
1212:       assertFalse(node2.isArrayLit());
1213:       assertFalse(node2.isVoid());
1214:       assertFalse(node2.isDelProp());
1215:       assertFalse(node2.isNE());
1216:       assertFalse(node2.isSetterDef());
1217:       assertFalse(node2.isNull());
1218:       assertFalse(node2.isIn());
1219:       assertEquals(0, node2.getChildCount());
1220:       assertFalse(node2.isVar());
1221:       assertFalse(node2.isEmpty());
1222:       assertFalse(node2.isDefaultCase());
1223:       assertFalse(node2.isNew());
1224:       assertFalse(node2.isAdd());
1225:       assertFalse(node2.isString());
1226:       assertFalse(node2.isFalse());
1227:       assertFalse(node2.isContinue());
1228:       assertFalse(node2.isCall());
1229:       assertFalse(node2.isBreak());
1230:       assertFalse(node2.isName());
1231:       assertFalse(node2.isGetProp());
1232:       assertFalse(node2.isReturn());
1233:       assertFalse(node2.isDec());
1234:       assertFalse(node2.hasChildren());
1235:       assertFalse(node2.isAssign());
1236:       assertFalse(node2.isComma());
1237:       assertFalse(node2.isTypeOf());
1238:       assertFalse(node2.isObjectLit());
1239:       assertFalse(node2.isWhile());
1240:       assertTrue(node2.isNumber());
1241:       assertFalse(node3.isVoid());
1242:       assertFalse(node3.isFunction());
1243:       assertFalse(node3.isTrue());
1244:       assertFalse(node3.isTry());
1245:       assertFalse(node3.isDebugger());
1246:       assertFalse(node3.isRegExp());
1247:       assertFalse(node3.isArrayLit());
1248:       assertFalse(node3.isIf());
1249:       assertFalse(node3.isDelProp());
1250:       assertFalse(node3.isNE());
1251:       assertFalse(node3.isGetterDef());
1252:       assertFalse(node3.isCatch());
1253:       assertFalse(node3.isFor());
1254:       assertFalse(node3.isCase());
1255:       assertFalse(node3.isBlock());
1256:       assertFalse(node3.isInc());
1257:       assertEquals(147493, node3.getSourcePosition());
1258:       assertFalse(node3.isSetterDef());
1259:       assertFalse(node3.isIn());
1260:       assertFalse(node3.isContinue());
1261:       assertFalse(node3.isFalse());
1262:       assertFalse(node3.isThrow());
1263:       assertEquals(40, node3.getType());
1264:       assertFalse(node3.isExprResult());
1265:       assertFalse(node3.isScript());
1266:       assertFalse(node3.isCast());
1267:       assertFalse(node3.isWith());
1268:       assertFalse(node3.isGetElem());
1269:       assertEquals(37, node3.getCharno());
1270:       assertFalse(node3.isObjectLit());
1271:       assertFalse(node3.isLabelName());
1272:       assertFalse(node3.isNot());
1273:       assertFalse(node3.isAnd());
1274:       assertFalse(node3.isGetProp());
1275:       assertFalse(node3.isThis());
1276:       assertFalse(node3.isComma());
1277:       assertFalse(node3.isDec());
1278:       assertFalse(node3.isInstanceOf());
1279:       assertFalse(node3.isBreak());
1280:       assertFalse(node3.isNumber());
1281:       assertFalse(node3.isTypeOf());
1282:       assertFalse(node3.hasMoreThanOneChild());
1283:       assertEquals(36, node3.getLineno());
1284:       assertFalse(node3.isAssign());
1285:       assertFalse(node3.hasOneChild());
1286:       assertFalse(node3.hasChildren());
1287:       assertFalse(node3.isHook());
1288:       assertFalse(node3.isReturn());
1289:       assertFalse(node3.isWhile());
1290:       assertFalse(node3.isAdd());
1291:       assertTrue(node3.isString());
1292:       assertFalse(node3.isNew());
1293:       assertFalse(node3.isStringKey());
1294:       assertFalse(node3.isName());
1295:       assertFalse(node3.isCall());
1296:       assertFalse(node3.isNull());
1297:       assertFalse(node3.isSwitch());
1298:       assertFalse(node3.isParamList());
1299:       assertFalse(node3.isOr());
1300:       assertFalse(node3.isLabel());
1301:       assertEquals(0, node3.getChildCount());
1302:       assertFalse(node3.isEmpty());
1303:       assertFalse(node3.isDo());
1304:       assertFalse(node3.isDefaultCase());
1305:       assertFalse(node3.isAssignAdd());
1306:       assertFalse(node3.isVar());
1307:       assertFalse(node4.isCast());
1308:       assertFalse(node4.hasOneChild());
1309:       assertFalse(node4.isGetElem());
1310:       assertFalse(node4.isLabelName());
1311:       assertFalse(node4.isExprResult());
1312:       assertFalse(node4.isDec());
1313:       assertFalse(node4.isLabel());
1314:       assertFalse(node4.isAssign());
1315:       assertFalse(node4.isTypeOf());
1316:       assertFalse(node4.isWith());
1317:       assertEquals((-1), node4.getLineno());
1318:       assertFalse(node4.isDo());
1319:       assertFalse(node4.isAssignAdd());
1320:       assertFalse(node4.isNew());
1321:       assertFalse(node4.isOr());
1322:       assertFalse(node4.isAdd());
1323:       assertFalse(node4.isVar());
1324:       assertFalse(node4.isHook());
1325:       assertFalse(node4.isStringKey());
1326:       assertFalse(node4.isThis());
1327:       assertFalse(node4.isBlock());
1328:       assertFalse(node4.isInstanceOf());
1329:       assertFalse(node4.isCase());
1330:       assertFalse(node4.isSwitch());
1331:       assertFalse(node4.isParamList());
1332:       assertFalse(node4.isScript());
1333:       assertEquals((-1), node4.getCharno());
1334:       assertFalse(node4.isGetterDef());
1335:       assertFalse(node4.isNumber());
1336:       assertFalse(node4.isArrayLit());
1337:       assertFalse(node4.isFor());
1338:       assertFalse(node4.isTry());
1339:       assertFalse(node4.isDelProp());
1340:       assertFalse(node4.isIf());
1341:       assertFalse(node4.isFunction());
1342:       assertFalse(node4.isVoid());
1343:       assertTrue(node4.hasChildren());
1344:       assertFalse(node4.isRegExp());
1345:       assertFalse(node4.isCatch());
1346:       assertTrue(node4.hasMoreThanOneChild());
1347:       assertFalse(node4.isDefaultCase());
1348:       assertFalse(node4.isTrue());
1349:       assertFalse(node4.isInc());
1350:       assertFalse(node4.isSetterDef());
1351:       assertFalse(node4.isNE());
1352:       assertFalse(node4.isNull());
1353:       assertFalse(node4.isEmpty());
1354:       assertFalse(node4.isIn());
1355:       assertFalse(node4.isCall());
1356:       assertFalse(node4.isThrow());
1357:       assertEquals(471, node4.getType());
1358:       assertFalse(node4.isName());
1359:       assertFalse(node4.isComma());
1360:       assertFalse(node4.isBreak());
1361:       assertEquals(2, node4.getChildCount());
1362:       assertFalse(node4.isFalse());
1363:       assertFalse(node4.isContinue());
1364:       assertFalse(node4.isObjectLit());
1365:       assertFalse(node4.isReturn());
1366:       assertFalse(node4.isWhile());
1367:       assertFalse(node4.isAnd());
1368:       assertFalse(node4.isDebugger());
1369:       assertEquals((-1), node4.getSourcePosition());
1370:       assertFalse(node4.isGetProp());
1371:       assertFalse(node4.isString());
1372:       assertFalse(node4.isNot());
1373:       
1374:       String string0 = node2.toString(false, false, false);
1375:       assertFalse(node2.equals((Object)node0));
1376:       assertFalse(node2.equals((Object)node1));
1377:       assertFalse(node2.equals((Object)node4));
1378:       assertFalse(node2.equals((Object)node3));
1379:       assertNotNull(string0);
1380:       assertFalse(node2.isScript());
1381:       assertFalse(node2.isExprResult());
1382:       assertFalse(node2.isWith());
1383:       assertFalse(node2.isNot());
1384:       assertFalse(node2.isGetElem());
1385:       assertFalse(node2.isAnd());
1386:       assertFalse(node2.isCast());
1387:       assertFalse(node2.isLabelName());
1388:       assertEquals(37, node2.getCharno());
1389:       assertFalse(node2.isLabel());
1390:       assertFalse(node2.isOr());
1391:       assertFalse(node2.isThrow());
1392:       assertFalse(node2.isAssignAdd());
1393:       assertFalse(node2.isDo());
1394:       assertEquals(147493, node2.getSourcePosition());
1395:       assertFalse(node2.isInc());
1396:       assertFalse(node2.isBlock());
1397:       assertFalse(node2.isHook());
1398:       assertFalse(node2.isStringKey());
1399:       assertFalse(node2.isSwitch());
1400:       assertFalse(node2.isParamList());
1401:       assertFalse(node2.isThis());
1402:       assertFalse(node2.isInstanceOf());
1403:       assertEquals(36, node2.getLineno());
1404:       assertFalse(node2.hasMoreThanOneChild());
1405:       assertFalse(node2.isGetterDef());
1406:       assertFalse(node2.isCase());
1407:       assertEquals(39, node2.getType());
1408:       assertFalse(node2.isFor());
1409:       assertFalse(node2.hasOneChild());
1410:       assertFalse(node2.isTry());
1411:       assertFalse(node2.isDebugger());
1412:       assertFalse(node2.isTrue());
1413:       assertFalse(node2.isFunction());
1414:       assertFalse(node2.isRegExp());
1415:       assertFalse(node2.isCatch());
1416:       assertFalse(node2.isIf());
1417:       assertFalse(node2.isArrayLit());
1418:       assertFalse(node2.isVoid());
1419:       assertFalse(node2.isDelProp());
1420:       assertFalse(node2.isNE());
1421:       assertFalse(node2.isSetterDef());
1422:       assertFalse(node2.isNull());
1423:       assertFalse(node2.isIn());
1424:       assertEquals(0, node2.getChildCount());
1425:       assertFalse(node2.isVar());
1426:       assertFalse(node2.isEmpty());
1427:       assertFalse(node2.isDefaultCase());
1428:       assertFalse(node2.isNew());
1429:       assertFalse(node2.isAdd());
1430:       assertFalse(node2.isString());
1431:       assertFalse(node2.isFalse());
1432:       assertFalse(node2.isContinue());
1433:       assertFalse(node2.isCall());
1434:       assertFalse(node2.isBreak());
1435:       assertFalse(node2.isName());
1436:       assertFalse(node2.isGetProp());
1437:       assertFalse(node2.isReturn());
1438:       assertFalse(node2.isDec());
1439:       assertFalse(node2.hasChildren());
1440:       assertFalse(node2.isAssign());
1441:       assertFalse(node2.isComma());
1442:       assertFalse(node2.isTypeOf());
1443:       assertFalse(node2.isObjectLit());
1444:       assertFalse(node2.isWhile());
1445:       assertTrue(node2.isNumber());
1446:       assertEquals("NUMBER 12.0", string0);
1447:       
1448:       boolean boolean4 = node3.isTrue();
1449:       assertFalse(node0.equals((Object)node4));
1450:       assertFalse(node0.equals((Object)node1));
1451:       assertFalse(node0.equals((Object)node2));
1452:       assertFalse(node2.equals((Object)node0));
1453:       assertFalse(node2.equals((Object)node1));
1454:       assertFalse(node2.equals((Object)node4));
1455:       assertFalse(node2.equals((Object)node3));
1456:       assertFalse(node3.equals((Object)node2));
1457:       assertFalse(node3.equals((Object)node1));
1458:       assertFalse(node3.equals((Object)node4));
1459:       assertTrue(boolean4 == boolean2);
1460:       assertTrue(boolean4 == boolean1);
1461:       assertTrue(boolean4 == boolean0);
1462:       assertTrue(boolean4 == boolean3);
1463:       assertNotSame(node0, node1);
1464:       assertSame(node0, node3);
1465:       assertSame(node3, node0);
1466:       assertNotSame(node3, node1);
1467:       assertFalse(node0.isCast());
1468:       assertFalse(node0.hasOneChild());
1469:       assertFalse(node0.isAssign());
1470:       assertFalse(node0.hasChildren());
1471:       assertEquals(36, node0.getLineno());
1472:       assertFalse(node0.isDec());
1473:       assertFalse(node0.isTypeOf());
1474:       assertFalse(node0.isWith());
1475:       assertFalse(node0.isLabelName());
1476:       assertFalse(node0.isGetElem());
1477:       assertFalse(node0.isExprResult());
1478:       assertFalse(node0.hasMoreThanOneChild());
1479:       assertFalse(node0.isAnd());
1480:       assertFalse(node0.isObjectLit());
1481:       assertFalse(node0.isNot());
1482:       assertFalse(node0.isWhile());
1483:       assertFalse(node0.isReturn());
1484:       assertFalse(node0.isThis());
1485:       assertFalse(node0.isNumber());
1486:       assertTrue(node0.isString());
1487:       assertFalse(node0.isGetProp());
1488:       assertFalse(node0.isScript());
1489:       assertFalse(node0.isVar());
1490:       assertFalse(node0.isName());
1491:       assertFalse(node0.isStringKey());
1492:       assertFalse(node0.isNull());
1493:       assertFalse(node0.isSwitch());
1494:       assertFalse(node0.isParamList());
1495:       assertFalse(node0.isComma());
1496:       assertFalse(node0.isBreak());
1497:       assertFalse(node0.isCall());
1498:       assertEquals(0, node0.getChildCount());
1499:       assertFalse(node0.isAssignAdd());
1500:       assertFalse(node0.isOr());
1501:       assertFalse(node0.isLabel());
1502:       assertFalse(node0.isDefaultCase());
1503:       assertFalse(node0.isDo());
1504:       assertFalse(node0.isEmpty());
1505:       assertFalse(node0.isNew());
1506:       assertFalse(node0.isAdd());
1507:       assertFalse(node0.isArrayLit());
1508:       assertFalse(node0.isFor());
1509:       assertFalse(node0.isTrue());
1510:       assertFalse(node0.isNE());
1511:       assertFalse(node0.isVoid());
1512:       assertFalse(node0.isIf());
1513:       assertFalse(node0.isFunction());
1514:       assertFalse(node0.isRegExp());
1515:       assertFalse(node0.isDelProp());
1516:       assertFalse(node0.isCatch());
1517:       assertFalse(node0.isDebugger());
1518:       assertFalse(node0.isGetterDef());
1519:       assertFalse(node0.isTry());
1520:       assertFalse(node0.isCase());
1521:       assertFalse(node0.isFalse());
1522:       assertEquals(147493, node0.getSourcePosition());
1523:       assertFalse(node0.isHook());
1524:       assertFalse(node0.isThrow());
1525:       assertFalse(node0.isBlock());
1526:       assertFalse(node0.isInstanceOf());
1527:       assertFalse(node0.isContinue());
1528:       assertFalse(node0.isIn());
1529:       assertEquals(37, node0.getCharno());
1530:       assertEquals(40, node0.getType());
1531:       assertFalse(node0.isSetterDef());
1532:       assertFalse(node0.isInc());
1533:       assertFalse(node2.isScript());
1534:       assertFalse(node2.isExprResult());
1535:       assertFalse(node2.isWith());
1536:       assertFalse(node2.isNot());
1537:       assertFalse(node2.isGetElem());
1538:       assertFalse(node2.isAnd());
1539:       assertFalse(node2.isCast());
1540:       assertFalse(node2.isLabelName());
1541:       assertEquals(37, node2.getCharno());
1542:       assertFalse(node2.isLabel());
1543:       assertFalse(node2.isOr());
1544:       assertFalse(node2.isThrow());
1545:       assertFalse(node2.isAssignAdd());
1546:       assertFalse(node2.isDo());
1547:       assertEquals(147493, node2.getSourcePosition());
1548:       assertFalse(node2.isInc());
1549:       assertFalse(node2.isBlock());
1550:       assertFalse(node2.isHook());
1551:       assertFalse(node2.isStringKey());
1552:       assertFalse(node2.isSwitch());
1553:       assertFalse(node2.isParamList());
1554:       assertFalse(node2.isThis());
1555:       assertFalse(node2.isInstanceOf());
1556:       assertEquals(36, node2.getLineno());
1557:       assertFalse(node2.hasMoreThanOneChild());
1558:       assertFalse(node2.isGetterDef());
1559:       assertFalse(node2.isCase());
1560:       assertEquals(39, node2.getType());
1561:       assertFalse(node2.isFor());
1562:       assertFalse(node2.hasOneChild());
1563:       assertFalse(node2.isTry());
1564:       assertFalse(node2.isDebugger());
1565:       assertFalse(node2.isTrue());
1566:       assertFalse(node2.isFunction());
1567:       assertFalse(node2.isRegExp());
1568:       assertFalse(node2.isCatch());
1569:       assertFalse(node2.isIf());
1570:       assertFalse(node2.isArrayLit());
1571:       assertFalse(node2.isVoid());
1572:       assertFalse(node2.isDelProp());
1573:       assertFalse(node2.isNE());
1574:       assertFalse(node2.isSetterDef());
1575:       assertFalse(node2.isNull());
1576:       assertFalse(node2.isIn());
1577:       assertEquals(0, node2.getChildCount());
1578:       assertFalse(node2.isVar());
1579:       assertFalse(node2.isEmpty());
1580:       assertFalse(node2.isDefaultCase());
1581:       assertFalse(node2.isNew());
1582:       assertFalse(node2.isAdd());
1583:       assertFalse(node2.isString());
1584:       assertFalse(node2.isFalse());
1585:       assertFalse(node2.isContinue());
1586:       assertFalse(node2.isCall());
1587:       assertFalse(node2.isBreak());
1588:       assertFalse(node2.isName());
1589:       assertFalse(node2.isGetProp());
1590:       assertFalse(node2.isReturn());
1591:       assertFalse(node2.isDec());
1592:       assertFalse(node2.hasChildren());
1593:       assertFalse(node2.isAssign());
1594:       assertFalse(node2.isComma());
1595:       assertFalse(node2.isTypeOf());
1596:       assertFalse(node2.isObjectLit());
1597:       assertFalse(node2.isWhile());
1598:       assertTrue(node2.isNumber());
1599:       assertFalse(node3.isVoid());
1600:       assertFalse(node3.isFunction());
1601:       assertFalse(node3.isTrue());
1602:       assertFalse(node3.isTry());
1603:       assertFalse(node3.isDebugger());
1604:       assertFalse(node3.isRegExp());
1605:       assertFalse(node3.isArrayLit());
1606:       assertFalse(node3.isIf());
1607:       assertFalse(node3.isDelProp());
1608:       assertFalse(node3.isNE());
1609:       assertFalse(node3.isGetterDef());
1610:       assertFalse(node3.isCatch());
1611:       assertFalse(node3.isFor());
1612:       assertFalse(node3.isCase());
1613:       assertFalse(node3.isBlock());
1614:       assertFalse(node3.isInc());
1615:       assertEquals(147493, node3.getSourcePosition());
1616:       assertFalse(node3.isSetterDef());
1617:       assertFalse(node3.isIn());
1618:       assertFalse(node3.isContinue());
1619:       assertFalse(node3.isFalse());
1620:       assertFalse(node3.isThrow());
1621:       assertEquals(40, node3.getType());
1622:       assertFalse(node3.isExprResult());
1623:       assertFalse(node3.isScript());
1624:       assertFalse(node3.isCast());
1625:       assertFalse(node3.isWith());
1626:       assertFalse(node3.isGetElem());
1627:       assertEquals(37, node3.getCharno());
1628:       assertFalse(node3.isObjectLit());
1629:       assertFalse(node3.isLabelName());
1630:       assertFalse(node3.isNot());
1631:       assertFalse(node3.isAnd());
1632:       assertFalse(node3.isGetProp());
1633:       assertFalse(node3.isThis());
1634:       assertFalse(node3.isComma());
1635:       assertFalse(node3.isDec());
1636:       assertFalse(node3.isInstanceOf());
1637:       assertFalse(node3.isBreak());
1638:       assertFalse(node3.isNumber());
1639:       assertFalse(node3.isTypeOf());
1640:       assertFalse(node3.hasMoreThanOneChild());
1641:       assertEquals(36, node3.getLineno());
1642:       assertFalse(node3.isAssign());
1643:       assertFalse(node3.hasOneChild());
1644:       assertFalse(node3.hasChildren());
1645:       assertFalse(node3.isHook());
1646:       assertFalse(node3.isReturn());
1647:       assertFalse(node3.isWhile());
1648:       assertFalse(node3.isAdd());
1649:       assertTrue(node3.isString());
1650:       assertFalse(node3.isNew());
1651:       assertFalse(node3.isStringKey());
1652:       assertFalse(node3.isName());
1653:       assertFalse(node3.isCall());
1654:       assertFalse(node3.isNull());
1655:       assertFalse(node3.isSwitch());
1656:       assertFalse(node3.isParamList());
1657:       assertFalse(node3.isOr());
1658:       assertFalse(node3.isLabel());
1659:       assertEquals(0, node3.getChildCount());
1660:       assertFalse(node3.isEmpty());
1661:       assertFalse(node3.isDo());
1662:       assertFalse(node3.isDefaultCase());
1663:       assertFalse(node3.isAssignAdd());
1664:       assertFalse(node3.isVar());
1665:       assertFalse(boolean4);
1666:       
1667:       Iterable<Node> iterable0 = node4.children();
1668:       assertFalse(node0.equals((Object)node4));
1669:       assertFalse(node0.equals((Object)node1));
1670:       assertFalse(node0.equals((Object)node2));
1671:       assertFalse(node1.equals((Object)node3));
1672:       assertFalse(node1.equals((Object)node4));
1673:       assertFalse(node1.equals((Object)node2));
1674:       assertFalse(node1.equals((Object)node0));
1675:       assertFalse(node2.equals((Object)node0));
1676:       assertFalse(node2.equals((Object)node1));
1677:       assertFalse(node2.equals((Object)node4));
1678:       assertFalse(node2.equals((Object)node3));
1679:       assertFalse(node3.equals((Object)node2));
1680:       assertFalse(node3.equals((Object)node1));
1681:       assertFalse(node3.equals((Object)node4));
1682:       assertFalse(node4.equals((Object)node3));
1683:       assertFalse(node4.equals((Object)node1));
1684:       assertFalse(node4.equals((Object)node2));
1685:       assertFalse(node4.equals((Object)node0));
1686:       assertNotSame(node0, node1);
1687:       assertSame(node0, node3);
1688:       assertNotSame(node1, node3);
1689:       assertNotSame(node1, node0);
1690:       assertSame(node3, node0);
1691:       assertNotSame(node3, node1);
1692:       assertNotNull(iterable0);
1693:       assertFalse(node0.isCast());
1694:       assertFalse(node0.hasOneChild());
1695:       assertFalse(node0.isAssign());
1696:       assertFalse(node0.hasChildren());
1697:       assertEquals(36, node0.getLineno());
1698:       assertFalse(node0.isDec());
1699:       assertFalse(node0.isTypeOf());
1700:       assertFalse(node0.isWith());
1701:       assertFalse(node0.isLabelName());
1702:       assertFalse(node0.isGetElem());
1703:       assertFalse(node0.isExprResult());
1704:       assertFalse(node0.hasMoreThanOneChild());
1705:       assertFalse(node0.isAnd());
1706:       assertFalse(node0.isObjectLit());
1707:       assertFalse(node0.isNot());
1708:       assertFalse(node0.isWhile());
1709:       assertFalse(node0.isReturn());
1710:       assertFalse(node0.isThis());
1711:       assertFalse(node0.isNumber());
1712:       assertTrue(node0.isString());
1713:       assertFalse(node0.isGetProp());
1714:       assertFalse(node0.isScript());
1715:       assertFalse(node0.isVar());
1716:       assertFalse(node0.isName());
1717:       assertFalse(node0.isStringKey());
1718:       assertFalse(node0.isNull());
1719:       assertFalse(node0.isSwitch());
1720:       assertFalse(node0.isParamList());
1721:       assertFalse(node0.isComma());
1722:       assertFalse(node0.isBreak());
1723:       assertFalse(node0.isCall());
1724:       assertEquals(0, node0.getChildCount());
1725:       assertFalse(node0.isAssignAdd());
1726:       assertFalse(node0.isOr());
1727:       assertFalse(node0.isLabel());
1728:       assertFalse(node0.isDefaultCase());
1729:       assertFalse(node0.isDo());
1730:       assertFalse(node0.isEmpty());
1731:       assertFalse(node0.isNew());
1732:       assertFalse(node0.isAdd());
1733:       assertFalse(node0.isArrayLit());
1734:       assertFalse(node0.isFor());
1735:       assertFalse(node0.isTrue());
1736:       assertFalse(node0.isNE());
1737:       assertFalse(node0.isVoid());
1738:       assertFalse(node0.isIf());
1739:       assertFalse(node0.isFunction());
1740:       assertFalse(node0.isRegExp());
1741:       assertFalse(node0.isDelProp());
1742:       assertFalse(node0.isCatch());
1743:       assertFalse(node0.isDebugger());
1744:       assertFalse(node0.isGetterDef());
1745:       assertFalse(node0.isTry());
1746:       assertFalse(node0.isCase());
1747:       assertFalse(node0.isFalse());
1748:       assertEquals(147493, node0.getSourcePosition());
1749:       assertFalse(node0.isHook());
1750:       assertFalse(node0.isThrow());
1751:       assertFalse(node0.isBlock());
1752:       assertFalse(node0.isInstanceOf());
1753:       assertFalse(node0.isContinue());
1754:       assertFalse(node0.isIn());
1755:       assertEquals(37, node0.getCharno());
1756:       assertEquals(40, node0.getType());
1757:       assertFalse(node0.isSetterDef());
1758:       assertFalse(node0.isInc());
1759:       assertFalse(node1.isObjectLit());
1760:       assertFalse(node1.isAnd());
1761:       assertFalse(node1.isExprResult());
1762:       assertFalse(node1.isThis());
1763:       assertFalse(node1.isBreak());
1764:       assertEquals(38, node1.getType());
1765:       assertFalse(node1.isComma());
1766:       assertFalse(node1.isWith());
1767:       assertFalse(node1.isFalse());
1768:       assertFalse(node1.isInstanceOf());
1769:       assertFalse(node1.isCast());
1770:       assertFalse(node1.isHook());
1771:       assertFalse(node1.hasOneChild());
1772:       assertFalse(node1.isLabelName());
1773:       assertFalse(node1.isScript());
1774:       assertFalse(node1.isNumber());
1775:       assertEquals((-1), node1.getCharno());
1776:       assertFalse(node1.isGetProp());
1777:       assertEquals((-1), node1.getSourcePosition());
1778:       assertFalse(node1.isNot());
1779:       assertFalse(node1.isString());
1780:       assertFalse(node1.hasMoreThanOneChild());
1781:       assertFalse(node1.isCase());
1782:       assertEquals((-1), node1.getLineno());
1783:       assertFalse(node1.isContinue());
1784:       assertFalse(node1.isIf());
1785:       assertFalse(node1.isThrow());
1786:       assertFalse(node1.isNE());
1787:       assertFalse(node1.isInc());
1788:       assertFalse(node1.isSetterDef());
1789:       assertTrue(node1.isName());
1790:       assertFalse(node1.isIn());
1791:       assertEquals(0, node1.getChildCount());
1792:       assertFalse(node1.isDefaultCase());
1793:       assertFalse(node1.isParamList());
1794:       assertFalse(node1.isRegExp());
1795:       assertFalse(node1.isFunction());
1796:       assertFalse(node1.isVoid());
1797:       assertFalse(node1.isCatch());
1798:       assertFalse(node1.isArrayLit());
1799:       assertFalse(node1.isFor());
1800:       assertFalse(node1.isTry());
1801:       assertFalse(node1.isBlock());
1802:       assertFalse(node1.isStringKey());
1803:       assertFalse(node1.isGetterDef());
1804:       assertFalse(node1.isDebugger());
1805:       assertFalse(node1.isAssignAdd());
1806:       assertFalse(node1.isDo());
1807:       assertFalse(node1.isLabel());
1808:       assertFalse(node1.isReturn());
1809:       assertFalse(node1.isWhile());
1810:       assertFalse(node1.isSwitch());
1811:       assertFalse(node1.isTypeOf());
1812:       assertFalse(node1.hasChildren());
1813:       assertFalse(node1.isDelProp());
1814:       assertFalse(node1.isDec());
1815:       assertFalse(node1.isAssign());
1816:       assertFalse(node1.isGetElem());
1817:       assertFalse(node1.isVar());
1818:       assertFalse(node1.isCall());
1819:       assertFalse(node1.isNull());
1820:       assertFalse(node1.isTrue());
1821:       assertFalse(node1.isNew());
1822:       assertFalse(node1.isOr());
1823:       assertFalse(node1.isAdd());
1824:       assertFalse(node1.isEmpty());
1825:       assertFalse(node2.isScript());
1826:       assertFalse(node2.isExprResult());
1827:       assertFalse(node2.isWith());
1828:       assertFalse(node2.isNot());
1829:       assertFalse(node2.isGetElem());
1830:       assertFalse(node2.isAnd());
1831:       assertFalse(node2.isCast());
1832:       assertFalse(node2.isLabelName());
1833:       assertEquals(37, node2.getCharno());
1834:       assertFalse(node2.isLabel());
1835:       assertFalse(node2.isOr());
1836:       assertFalse(node2.isThrow());
1837:       assertFalse(node2.isAssignAdd());
1838:       assertFalse(node2.isDo());
1839:       assertEquals(147493, node2.getSourcePosition());
1840:       assertFalse(node2.isInc());
1841:       assertFalse(node2.isBlock());
1842:       assertFalse(node2.isHook());
1843:       assertFalse(node2.isStringKey());
1844:       assertFalse(node2.isSwitch());
1845:       assertFalse(node2.isParamList());
1846:       assertFalse(node2.isThis());
1847:       assertFalse(node2.isInstanceOf());
1848:       assertEquals(36, node2.getLineno());
1849:       assertFalse(node2.hasMoreThanOneChild());
1850:       assertFalse(node2.isGetterDef());
1851:       assertFalse(node2.isCase());
1852:       assertEquals(39, node2.getType());
1853:       assertFalse(node2.isFor());
1854:       assertFalse(node2.hasOneChild());
1855:       assertFalse(node2.isTry());
1856:       assertFalse(node2.isDebugger());
1857:       assertFalse(node2.isTrue());
1858:       assertFalse(node2.isFunction());
1859:       assertFalse(node2.isRegExp());
1860:       assertFalse(node2.isCatch());
1861:       assertFalse(node2.isIf());
1862:       assertFalse(node2.isArrayLit());
1863:       assertFalse(node2.isVoid());
1864:       assertFalse(node2.isDelProp());
1865:       assertFalse(node2.isNE());
1866:       assertFalse(node2.isSetterDef());
1867:       assertFalse(node2.isNull());
1868:       assertFalse(node2.isIn());
1869:       assertEquals(0, node2.getChildCount());
1870:       assertFalse(node2.isVar());
1871:       assertFalse(node2.isEmpty());
1872:       assertFalse(node2.isDefaultCase());
1873:       assertFalse(node2.isNew());
1874:       assertFalse(node2.isAdd());
1875:       assertFalse(node2.isString());
1876:       assertFalse(node2.isFalse());
1877:       assertFalse(node2.isContinue());
1878:       assertFalse(node2.isCall());
1879:       assertFalse(node2.isBreak());
1880:       assertFalse(node2.isName());
1881:       assertFalse(node2.isGetProp());
1882:       assertFalse(node2.isReturn());
1883:       assertFalse(node2.isDec());
1884:       assertFalse(node2.hasChildren());
1885:       assertFalse(node2.isAssign());
1886:       assertFalse(node2.isComma());
1887:       assertFalse(node2.isTypeOf());
1888:       assertFalse(node2.isObjectLit());
1889:       assertFalse(node2.isWhile());
1890:       assertTrue(node2.isNumber());
1891:       assertFalse(node3.isVoid());
1892:       assertFalse(node3.isFunction());
1893:       assertFalse(node3.isTrue());
1894:       assertFalse(node3.isTry());
1895:       assertFalse(node3.isDebugger());
1896:       assertFalse(node3.isRegExp());
1897:       assertFalse(node3.isArrayLit());
1898:       assertFalse(node3.isIf());
1899:       assertFalse(node3.isDelProp());
1900:       assertFalse(node3.isNE());
1901:       assertFalse(node3.isGetterDef());
1902:       assertFalse(node3.isCatch());
1903:       assertFalse(node3.isFor());
1904:       assertFalse(node3.isCase());
1905:       assertFalse(node3.isBlock());
1906:       assertFalse(node3.isInc());
1907:       assertEquals(147493, node3.getSourcePosition());
1908:       assertFalse(node3.isSetterDef());
1909:       assertFalse(node3.isIn());
1910:       assertFalse(node3.isContinue());
1911:       assertFalse(node3.isFalse());
1912:       assertFalse(node3.isThrow());
1913:       assertEquals(40, node3.getType());
1914:       assertFalse(node3.isExprResult());
1915:       assertFalse(node3.isScript());
1916:       assertFalse(node3.isCast());
1917:       assertFalse(node3.isWith());
1918:       assertFalse(node3.isGetElem());
1919:       assertEquals(37, node3.getCharno());
1920:       assertFalse(node3.isObjectLit());
1921:       assertFalse(node3.isLabelName());
1922:       assertFalse(node3.isNot());
1923:       assertFalse(node3.isAnd());
1924:       assertFalse(node3.isGetProp());
1925:       assertFalse(node3.isThis());
1926:       assertFalse(node3.isComma());
1927:       assertFalse(node3.isDec());
1928:       assertFalse(node3.isInstanceOf());
1929:       assertFalse(node3.isBreak());
1930:       assertFalse(node3.isNumber());
1931:       assertFalse(node3.isTypeOf());
1932:       assertFalse(node3.hasMoreThanOneChild());
1933:       assertEquals(36, node3.getLineno());
1934:       assertFalse(node3.isAssign());
1935:       assertFalse(node3.hasOneChild());
1936:       assertFalse(node3.hasChildren());
1937:       assertFalse(node3.isHook());
1938:       assertFalse(node3.isReturn());
1939:       assertFalse(node3.isWhile());
1940:       assertFalse(node3.isAdd());
1941:       assertTrue(node3.isString());
1942:       assertFalse(node3.isNew());
1943:       assertFalse(node3.isStringKey());
1944:       assertFalse(node3.isName());
1945:       assertFalse(node3.isCall());
1946:       assertFalse(node3.isNull());
1947:       assertFalse(node3.isSwitch());
1948:       assertFalse(node3.isParamList());
1949:       assertFalse(node3.isOr());
1950:       assertFalse(node3.isLabel());
1951:       assertEquals(0, node3.getChildCount());
1952:       assertFalse(node3.isEmpty());
1953:       assertFalse(node3.isDo());
1954:       assertFalse(node3.isDefaultCase());
1955:       assertFalse(node3.isAssignAdd());
1956:       assertFalse(node3.isVar());
1957:       assertFalse(node4.isCast());
1958:       assertFalse(node4.hasOneChild());
1959:       assertFalse(node4.isGetElem());
1960:       assertFalse(node4.isLabelName());
1961:       assertFalse(node4.isExprResult());
1962:       assertFalse(node4.isDec());
1963:       assertFalse(node4.isLabel());
1964:       assertFalse(node4.isAssign());
1965:       assertFalse(node4.isTypeOf());
1966:       assertFalse(node4.isWith());
1967:       assertEquals((-1), node4.getLineno());
1968:       assertFalse(node4.isDo());
1969:       assertFalse(node4.isAssignAdd());
1970:       assertFalse(node4.isNew());
1971:       assertFalse(node4.isOr());
1972:       assertFalse(node4.isAdd());
1973:       assertFalse(node4.isVar());
1974:       assertFalse(node4.isHook());
1975:       assertFalse(node4.isStringKey());
1976:       assertFalse(node4.isThis());
1977:       assertFalse(node4.isBlock());
1978:       assertFalse(node4.isInstanceOf());
1979:       assertFalse(node4.isCase());
1980:       assertFalse(node4.isSwitch());
1981:       assertFalse(node4.isParamList());
1982:       assertFalse(node4.isScript());
1983:       assertEquals((-1), node4.getCharno());
1984:       assertFalse(node4.isGetterDef());
1985:       assertFalse(node4.isNumber());
1986:       assertFalse(node4.isArrayLit());
1987:       assertFalse(node4.isFor());
1988:       assertFalse(node4.isTry());
1989:       assertFalse(node4.isDelProp());
1990:       assertFalse(node4.isIf());
1991:       assertFalse(node4.isFunction());
1992:       assertFalse(node4.isVoid());
1993:       assertTrue(node4.hasChildren());
1994:       assertFalse(node4.isRegExp());
1995:       assertFalse(node4.isCatch());
1996:       assertTrue(node4.hasMoreThanOneChild());
1997:       assertFalse(node4.isDefaultCase());
1998:       assertFalse(node4.isTrue());
1999:       assertFalse(node4.isInc());
2000:       assertFalse(node4.isSetterDef());
2001:       assertFalse(node4.isNE());
2002:       assertFalse(node4.isNull());
2003:       assertFalse(node4.isEmpty());
2004:       assertFalse(node4.isIn());
2005:       assertFalse(node4.isCall());
2006:       assertFalse(node4.isThrow());
2007:       assertEquals(471, node4.getType());
2008:       assertFalse(node4.isName());
2009:       assertFalse(node4.isComma());
2010:       assertFalse(node4.isBreak());
2011:       assertEquals(2, node4.getChildCount());
2012:       assertFalse(node4.isFalse());
2013:       assertFalse(node4.isContinue());
2014:       assertFalse(node4.isObjectLit());
2015:       assertFalse(node4.isReturn());
2016:       assertFalse(node4.isWhile());
2017:       assertFalse(node4.isAnd());
2018:       assertFalse(node4.isDebugger());
2019:       assertEquals((-1), node4.getSourcePosition());
2020:       assertFalse(node4.isGetProp());
2021:       assertFalse(node4.isString());
2022:       assertFalse(node4.isNot());
2023:       
2024:       Node node5 = Node.newString(117, "", (-1049), 40);
2025:       assertFalse(node5.equals((Object)node0));
2026:       assertFalse(node5.equals((Object)node1));
2027:       assertFalse(node5.equals((Object)node3));
2028:       assertFalse(node5.equals((Object)node4));
2029:       assertFalse(node5.equals((Object)node2));
2030:       assertNotSame(node5, node0);
2031:       assertNotSame(node5, node1);
2032:       assertNotSame(node5, node3);
2033:       assertNotNull(node5);
2034:       assertFalse(node5.isAssignAdd());
2035:       assertFalse(node5.hasChildren());
2036:       assertEquals(117, node5.getType());
2037:       assertFalse(node5.isReturn());
2038:       assertFalse(node5.isNumber());
2039:       assertFalse(node5.isAssign());
2040:       assertFalse(node5.isTypeOf());
2041:       assertFalse(node5.isOr());
2042:       assertFalse(node5.isLabel());
2043:       assertFalse(node5.isDec());
2044:       assertEquals((-1), node5.getSourcePosition());
2045:       assertFalse(node5.isWhile());
2046:       assertFalse(node5.isDo());
2047:       assertFalse(node5.hasOneChild());
2048:       assertFalse(node5.isScript());
2049:       assertFalse(node5.isNot());
2050:       assertFalse(node5.isAnd());
2051:       assertFalse(node5.isCast());
2052:       assertFalse(node5.isStringKey());
2053:       assertFalse(node5.isLabelName());
2054:       assertFalse(node5.isGetProp());
2055:       assertFalse(node5.isNull());
2056:       assertFalse(node5.isComma());
2057:       assertEquals(0, node5.getChildCount());
2058:       assertFalse(node5.isObjectLit());
2059:       assertFalse(node5.isVar());
2060:       assertFalse(node5.isDefaultCase());
2061:       assertFalse(node5.isNew());
2062:       assertFalse(node5.isExprResult());
2063:       assertFalse(node5.isTrue());
2064:       assertFalse(node5.isVoid());
2065:       assertFalse(node5.isAdd());
2066:       assertFalse(node5.isCall());
2067:       assertFalse(node5.isGetElem());
2068:       assertFalse(node5.isBreak());
2069:       assertFalse(node5.isDelProp());
2070:       assertFalse(node5.isName());
2071:       assertFalse(node5.isNE());
2072:       assertFalse(node5.isGetterDef());
2073:       assertFalse(node5.isIn());
2074:       assertFalse(node5.isEmpty());
2075:       assertFalse(node5.isFor());
2076:       assertFalse(node5.isCase());
2077:       assertFalse(node5.isTry());
2078:       assertEquals((-1), node5.getCharno());
2079:       assertFalse(node5.isDebugger());
2080:       assertFalse(node5.isSwitch());
2081:       assertFalse(node5.isFunction());
2082:       assertFalse(node5.isString());
2083:       assertFalse(node5.isFalse());
2084:       assertFalse(node5.isArrayLit());
2085:       assertTrue(node5.isContinue());
2086:       assertFalse(node5.isThis());
2087:       assertFalse(node5.isSetterDef());
2088:       assertFalse(node5.isParamList());
2089:       assertFalse(node5.isThrow());
2090:       assertFalse(node5.isBlock());
2091:       assertFalse(node5.isInc());
2092:       assertFalse(node5.isWith());
2093:       assertFalse(node5.isHook());
2094:       assertFalse(node5.isRegExp());
2095:       assertFalse(node5.hasMoreThanOneChild());
2096:       assertFalse(node5.isInstanceOf());
2097:       assertFalse(node5.isCatch());
2098:       assertFalse(node5.isIf());
2099:       assertEquals((-1), node5.getLineno());
2100:       
2101:       boolean boolean5 = node2.isReturn();
2102:       assertFalse(node2.equals((Object)node0));
2103:       assertFalse(node2.equals((Object)node1));
2104:       assertFalse(node2.equals((Object)node5));
2105:       assertFalse(node2.equals((Object)node4));
2106:       assertFalse(node2.equals((Object)node3));
2107:       assertTrue(boolean5 == boolean1);
2108:       assertTrue(boolean5 == boolean4);
2109:       assertTrue(boolean5 == boolean3);
2110:       assertTrue(boolean5 == boolean2);
2111:       assertTrue(boolean5 == boolean0);
2112:       assertFalse(node2.isScript());
2113:       assertFalse(node2.isExprResult());
2114:       assertFalse(node2.isWith());
2115:       assertFalse(node2.isNot());
2116:       assertFalse(node2.isGetElem());
2117:       assertFalse(node2.isAnd());
2118:       assertFalse(node2.isCast());
2119:       assertFalse(node2.isLabelName());
2120:       assertEquals(37, node2.getCharno());
2121:       assertFalse(node2.isLabel());
2122:       assertFalse(node2.isOr());
2123:       assertFalse(node2.isThrow());
2124:       assertFalse(node2.isAssignAdd());
2125:       assertFalse(node2.isDo());
2126:       assertEquals(147493, node2.getSourcePosition());
2127:       assertFalse(node2.isInc());
2128:       assertFalse(node2.isBlock());
2129:       assertFalse(node2.isHook());
2130:       assertFalse(node2.isStringKey());
2131:       assertFalse(node2.isSwitch());
2132:       assertFalse(node2.isParamList());
2133:       assertFalse(node2.isThis());
2134:       assertFalse(node2.isInstanceOf());
2135:       assertEquals(36, node2.getLineno());
2136:       assertFalse(node2.hasMoreThanOneChild());
2137:       assertFalse(node2.isGetterDef());
2138:       assertFalse(node2.isCase());
2139:       assertEquals(39, node2.getType());
2140:       assertFalse(node2.isFor());
2141:       assertFalse(node2.hasOneChild());
2142:       assertFalse(node2.isTry());
2143:       assertFalse(node2.isDebugger());
2144:       assertFalse(node2.isTrue());
2145:       assertFalse(node2.isFunction());
2146:       assertFalse(node2.isRegExp());
2147:       assertFalse(node2.isCatch());
2148:       assertFalse(node2.isIf());
2149:       assertFalse(node2.isArrayLit());
2150:       assertFalse(node2.isVoid());
2151:       assertFalse(node2.isDelProp());
2152:       assertFalse(node2.isNE());
2153:       assertFalse(node2.isSetterDef());
2154:       assertFalse(node2.isNull());
2155:       assertFalse(node2.isIn());
2156:       assertEquals(0, node2.getChildCount());
2157:       assertFalse(node2.isVar());
2158:       assertFalse(node2.isEmpty());
2159:       assertFalse(node2.isDefaultCase());
2160:       assertFalse(node2.isNew());
2161:       assertFalse(node2.isAdd());
2162:       assertFalse(node2.isString());
2163:       assertFalse(node2.isFalse());
2164:       assertFalse(node2.isContinue());
2165:       assertFalse(node2.isCall());
2166:       assertFalse(node2.isBreak());
2167:       assertFalse(node2.isName());
2168:       assertFalse(node2.isGetProp());
2169:       assertFalse(node2.isReturn());
2170:       assertFalse(node2.isDec());
2171:       assertFalse(node2.hasChildren());
2172:       assertFalse(node2.isAssign());
2173:       assertFalse(node2.isComma());
2174:       assertFalse(node2.isTypeOf());
2175:       assertFalse(node2.isObjectLit());
2176:       assertFalse(node2.isWhile());
2177:       assertTrue(node2.isNumber());
2178:       assertFalse(boolean5);
2179:       
2180:       boolean boolean6 = node2.isTrue();
2181:       assertFalse(node2.equals((Object)node0));
2182:       assertFalse(node2.equals((Object)node1));
2183:       assertFalse(node2.equals((Object)node5));
2184:       assertFalse(node2.equals((Object)node4));
2185:       assertFalse(node2.equals((Object)node3));
2186:       assertTrue(boolean6 == boolean2);
2187:       assertTrue(boolean6 == boolean3);
2188:       assertTrue(boolean6 == boolean1);
2189:       assertTrue(boolean6 == boolean0);
2190:       assertTrue(boolean6 == boolean5);
2191:       assertTrue(boolean6 == boolean4);
2192:       assertFalse(node2.isScript());
2193:       assertFalse(node2.isExprResult());
2194:       assertFalse(node2.isWith());
2195:       assertFalse(node2.isNot());
2196:       assertFalse(node2.isGetElem());
2197:       assertFalse(node2.isAnd());
2198:       assertFalse(node2.isCast());
2199:       assertFalse(node2.isLabelName());
2200:       assertEquals(37, node2.getCharno());
2201:       assertFalse(node2.isLabel());
2202:       assertFalse(node2.isOr());
2203:       assertFalse(node2.isThrow());
2204:       assertFalse(node2.isAssignAdd());
2205:       assertFalse(node2.isDo());
2206:       assertEquals(147493, node2.getSourcePosition());
2207:       assertFalse(node2.isInc());
2208:       assertFalse(node2.isBlock());
2209:       assertFalse(node2.isHook());
2210:       assertFalse(node2.isStringKey());
2211:       assertFalse(node2.isSwitch());
2212:       assertFalse(node2.isParamList());
2213:       assertFalse(node2.isThis());
2214:       assertFalse(node2.isInstanceOf());
2215:       assertEquals(36, node2.getLineno());
2216:       assertFalse(node2.hasMoreThanOneChild());
2217:       assertFalse(node2.isGetterDef());
2218:       assertFalse(node2.isCase());
2219:       assertEquals(39, node2.getType());
2220:       assertFalse(node2.isFor());
2221:       assertFalse(node2.hasOneChild());
2222:       assertFalse(node2.isTry());
2223:       assertFalse(node2.isDebugger());
2224:       assertFalse(node2.isTrue());
2225:       assertFalse(node2.isFunction());
2226:       assertFalse(node2.isRegExp());
2227:       assertFalse(node2.isCatch());
2228:       assertFalse(node2.isIf());
2229:       assertFalse(node2.isArrayLit());
2230:       assertFalse(node2.isVoid());
2231:       assertFalse(node2.isDelProp());
2232:       assertFalse(node2.isNE());
2233:       assertFalse(node2.isSetterDef());
2234:       assertFalse(node2.isNull());
2235:       assertFalse(node2.isIn());
2236:       assertEquals(0, node2.getChildCount());
2237:       assertFalse(node2.isVar());
2238:       assertFalse(node2.isEmpty());
2239:       assertFalse(node2.isDefaultCase());
2240:       assertFalse(node2.isNew());
2241:       assertFalse(node2.isAdd());
2242:       assertFalse(node2.isString());
2243:       assertFalse(node2.isFalse());
2244:       assertFalse(node2.isContinue());
2245:       assertFalse(node2.isCall());
2246:       assertFalse(node2.isBreak());
2247:       assertFalse(node2.isName());
2248:       assertFalse(node2.isGetProp());
2249:       assertFalse(node2.isReturn());
2250:       assertFalse(node2.isDec());
2251:       assertFalse(node2.hasChildren());
2252:       assertFalse(node2.isAssign());
2253:       assertFalse(node2.isComma());
2254:       assertFalse(node2.isTypeOf());
2255:       assertFalse(node2.isObjectLit());
2256:       assertFalse(node2.isWhile());
2257:       assertTrue(node2.isNumber());
2258:       assertFalse(boolean6);
2259:       
2260:       Iterable<Node> iterable1 = node0.children();
2261:       assertFalse(iterable1.equals((Object)iterable0));
2262:       assertFalse(node0.equals((Object)node4));
2263:       assertFalse(node0.equals((Object)node1));
2264:       assertFalse(node0.equals((Object)node5));
2265:       assertFalse(node0.equals((Object)node2));
2266:       assertNotSame(node0, node1);
2267:       assertNotSame(node0, node5);
2268:       assertSame(node0, node3);
2269:       assertFalse(iterable1.contains(node4));
2270:       assertNotNull(iterable1);
2271:       assertFalse(node0.isCast());
2272:       assertFalse(node0.hasOneChild());
2273:       assertFalse(node0.isAssign());
2274:       assertFalse(node0.hasChildren());
2275:       assertEquals(36, node0.getLineno());
2276:       assertFalse(node0.isDec());
2277:       assertFalse(node0.isTypeOf());
2278:       assertFalse(node0.isWith());
2279:       assertFalse(node0.isLabelName());
2280:       assertFalse(node0.isGetElem());
2281:       assertFalse(node0.isExprResult());
2282:       assertFalse(node0.hasMoreThanOneChild());
2283:       assertFalse(node0.isAnd());
2284:       assertFalse(node0.isObjectLit());
2285:       assertFalse(node0.isNot());
2286:       assertFalse(node0.isWhile());
2287:       assertFalse(node0.isReturn());
2288:       assertFalse(node0.isThis());
2289:       assertFalse(node0.isNumber());
2290:       assertTrue(node0.isString());
2291:       assertFalse(node0.isGetProp());
2292:       assertFalse(node0.isScript());
2293:       assertFalse(node0.isVar());
2294:       assertFalse(node0.isName());
2295:       assertFalse(node0.isStringKey());
2296:       assertFalse(node0.isNull());
2297:       assertFalse(node0.isSwitch());
2298:       assertFalse(node0.isParamList());
2299:       assertFalse(node0.isComma());
2300:       assertFalse(node0.isBreak());
2301:       assertFalse(node0.isCall());
2302:       assertEquals(0, node0.getChildCount());
2303:       assertFalse(node0.isAssignAdd());
2304:       assertFalse(node0.isOr());
2305:       assertFalse(node0.isLabel());
2306:       assertFalse(node0.isDefaultCase());
2307:       assertFalse(node0.isDo());
2308:       assertFalse(node0.isEmpty());
2309:       assertFalse(node0.isNew());
2310:       assertFalse(node0.isAdd());
2311:       assertFalse(node0.isArrayLit());
2312:       assertFalse(node0.isFor());
2313:       assertFalse(node0.isTrue());
2314:       assertFalse(node0.isNE());
2315:       assertFalse(node0.isVoid());
2316:       assertFalse(node0.isIf());
2317:       assertFalse(node0.isFunction());
2318:       assertFalse(node0.isRegExp());
2319:       assertFalse(node0.isDelProp());
2320:       assertFalse(node0.isCatch());
2321:       assertFalse(node0.isDebugger());
2322:       assertFalse(node0.isGetterDef());
2323:       assertFalse(node0.isTry());
2324:       assertFalse(node0.isCase());
2325:       assertFalse(node0.isFalse());
2326:       assertEquals(147493, node0.getSourcePosition());
2327:       assertFalse(node0.isHook());
2328:       assertFalse(node0.isThrow());
2329:       assertFalse(node0.isBlock());
2330:       assertFalse(node0.isInstanceOf());
2331:       assertFalse(node0.isContinue());
2332:       assertFalse(node0.isIn());
2333:       assertEquals(37, node0.getCharno());
2334:       assertEquals(40, node0.getType());
2335:       assertFalse(node0.isSetterDef());
2336:       assertFalse(node0.isInc());
2337:       
2338:       StringWriter stringWriter0 = new StringWriter(25);
2339:       assertNotNull(stringWriter0);
2340:       assertEquals("", stringWriter0.toString());
2341:       
2342:       StringWriter stringWriter1 = stringWriter0.append((CharSequence) "NUMBER 12.0");
2343:       assertSame(stringWriter0, stringWriter1);
2344:       assertSame(stringWriter1, stringWriter0);
2345:       assertNotNull(stringWriter1);
2346:       assertEquals("NUMBER 12.0", stringWriter0.toString());
2347:       assertEquals("NUMBER 12.0", stringWriter1.toString());
2348:       
2349:       MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
2350:       assertNotNull(mockPrintWriter0);
2351:       
2352:       Locale locale0 = new Locale("H'Y@UN%");
2353:       assertNotNull(locale0);
2354:       assertEquals("", locale0.getVariant());
2355:       assertEquals("", locale0.getCountry());
2356:       assertEquals("h'y@un%", locale0.getLanguage());
2357:       assertEquals("", locale0.getISO3Country());
2358:       assertEquals("h'y@un%", locale0.toString());
2359:       
2360:       Object[] objectArray0 = new Object[1];
2361:       objectArray0[0] = (Object) node4;
2362:       PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "NUMBER 12.0", objectArray0);
2363:       assertSame(stringWriter0, stringWriter1);
2364:       assertSame(stringWriter1, stringWriter0);
2365:       assertSame(mockPrintWriter0, printWriter0);
2366:       assertSame(printWriter0, mockPrintWriter0);
2367:       assertEquals(1, objectArray0.length);
2368:       assertNotNull(printWriter0);
2369:       assertEquals("NUMBER 12.0NUMBER 12.0", stringWriter0.toString());
2370:       assertEquals("NUMBER 12.0NUMBER 12.0", stringWriter1.toString());
2371:       assertEquals("", locale0.getVariant());
2372:       assertEquals("", locale0.getCountry());
2373:       assertEquals("h'y@un%", locale0.getLanguage());
2374:       assertEquals("", locale0.getISO3Country());
2375:       assertEquals("h'y@un%", locale0.toString());
2376:       
2377:       node1.appendStringTree(printWriter0);
2378:       assertFalse(node1.equals((Object)node3));
2379:       assertFalse(node1.equals((Object)node4));
2380:       assertFalse(node1.equals((Object)node5));
2381:       assertFalse(node1.equals((Object)node2));
2382:       assertFalse(node1.equals((Object)node0));
2383:       assertSame(stringWriter0, stringWriter1);
2384:       assertSame(stringWriter1, stringWriter0);
2385:       assertSame(mockPrintWriter0, printWriter0);
2386:       assertNotSame(node1, node3);
2387:       assertNotSame(node1, node5);
2388:       assertNotSame(node1, node0);
2389:       assertSame(printWriter0, mockPrintWriter0);
2390:       assertEquals(1, objectArray0.length);
2391:       assertEquals("NUMBER 12.0NUMBER 12.0NAME \n", stringWriter0.toString());
2392:       assertEquals("NUMBER 12.0NUMBER 12.0NAME \n", stringWriter1.toString());
2393:       assertFalse(node1.isObjectLit());
2394:       assertFalse(node1.isAnd());
2395:       assertFalse(node1.isExprResult());
2396:       assertFalse(node1.isThis());
2397:       assertFalse(node1.isBreak());
2398:       assertEquals(38, node1.getType());
2399:       assertFalse(node1.isComma());
2400:       assertFalse(node1.isWith());
2401:       assertFalse(node1.isFalse());
2402:       assertFalse(node1.isInstanceOf());
2403:       assertFalse(node1.isCast());
2404:       assertFalse(node1.isHook());
2405:       assertFalse(node1.hasOneChild());
2406:       assertFalse(node1.isLabelName());
2407:       assertFalse(node1.isScript());
2408:       assertFalse(node1.isNumber());
2409:       assertEquals((-1), node1.getCharno());
2410:       assertFalse(node1.isGetProp());
2411:       assertEquals((-1), node1.getSourcePosition());
2412:       assertFalse(node1.isNot());
2413:       assertFalse(node1.isString());
2414:       assertFalse(node1.hasMoreThanOneChild());
2415:       assertFalse(node1.isCase());
2416:       assertEquals((-1), node1.getLineno());
2417:       assertFalse(node1.isContinue());
2418:       assertFalse(node1.isIf());
2419:       assertFalse(node1.isThrow());
2420:       assertFalse(node1.isNE());
2421:       assertFalse(node1.isInc());
2422:       assertFalse(node1.isSetterDef());
2423:       assertTrue(node1.isName());
2424:       assertFalse(node1.isIn());
2425:       assertEquals(0, node1.getChildCount());
2426:       assertFalse(node1.isDefaultCase());
2427:       assertFalse(node1.isParamList());
2428:       assertFalse(node1.isRegExp());
2429:       assertFalse(node1.isFunction());
2430:       assertFalse(node1.isVoid());
2431:       assertFalse(node1.isCatch());
2432:       assertFalse(node1.isArrayLit());
2433:       assertFalse(node1.isFor());
2434:       assertFalse(node1.isTry());
2435:       assertFalse(node1.isBlock());
2436:       assertFalse(node1.isStringKey());
2437:       assertFalse(node1.isGetterDef());
2438:       assertFalse(node1.isDebugger());
2439:       assertFalse(node1.isAssignAdd());
2440:       assertFalse(node1.isDo());
2441:       assertFalse(node1.isLabel());
2442:       assertFalse(node1.isReturn());
2443:       assertFalse(node1.isWhile());
2444:       assertFalse(node1.isSwitch());
2445:       assertFalse(node1.isTypeOf());
2446:       assertFalse(node1.hasChildren());
2447:       assertFalse(node1.isDelProp());
2448:       assertFalse(node1.isDec());
2449:       assertFalse(node1.isAssign());
2450:       assertFalse(node1.isGetElem());
2451:       assertFalse(node1.isVar());
2452:       assertFalse(node1.isCall());
2453:       assertFalse(node1.isNull());
2454:       assertFalse(node1.isTrue());
2455:       assertFalse(node1.isNew());
2456:       assertFalse(node1.isOr());
2457:       assertFalse(node1.isAdd());
2458:       assertFalse(node1.isEmpty());
2459:       assertEquals("", locale0.getVariant());
2460:       assertEquals("", locale0.getCountry());
2461:       assertEquals("h'y@un%", locale0.getLanguage());
2462:       assertEquals("", locale0.getISO3Country());
2463:       assertEquals("h'y@un%", locale0.toString());
2464:       
2465:       boolean boolean7 = node5.isAssignAdd();
2466:       assertTrue(boolean7 == boolean5);
2467:       assertTrue(boolean7 == boolean0);
2468:       assertTrue(boolean7 == boolean6);
2469:       assertTrue(boolean7 == boolean4);
2470:       assertTrue(boolean7 == boolean2);
2471:       assertTrue(boolean7 == boolean1);
2472:       assertTrue(boolean7 == boolean3);
2473:       assertFalse(node5.equals((Object)node0));
2474:       assertFalse(node5.equals((Object)node1));
2475:       assertFalse(node5.equals((Object)node3));
2476:       assertFalse(node5.equals((Object)node4));
2477:       assertFalse(node5.equals((Object)node2));
2478:       assertNotSame(node5, node0);
2479:       assertNotSame(node5, node1);
2480:       assertNotSame(node5, node3);
2481:       assertFalse(node5.isAssignAdd());
2482:       assertFalse(node5.hasChildren());
2483:       assertEquals(117, node5.getType());
2484:       assertFalse(node5.isReturn());
2485:       assertFalse(node5.isNumber());
2486:       assertFalse(node5.isAssign());
2487:       assertFalse(node5.isTypeOf());
2488:       assertFalse(node5.isOr());
2489:       assertFalse(node5.isLabel());
2490:       assertFalse(node5.isDec());
2491:       assertEquals((-1), node5.getSourcePosition());
2492:       assertFalse(node5.isWhile());
2493:       assertFalse(node5.isDo());
2494:       assertFalse(node5.hasOneChild());
2495:       assertFalse(node5.isScript());
2496:       assertFalse(node5.isNot());
2497:       assertFalse(node5.isAnd());
2498:       assertFalse(node5.isCast());
2499:       assertFalse(node5.isStringKey());
2500:       assertFalse(node5.isLabelName());
2501:       assertFalse(node5.isGetProp());
2502:       assertFalse(node5.isNull());
2503:       assertFalse(node5.isComma());
2504:       assertEquals(0, node5.getChildCount());
2505:       assertFalse(node5.isObjectLit());
2506:       assertFalse(node5.isVar());
2507:       assertFalse(node5.isDefaultCase());
2508:       assertFalse(node5.isNew());
2509:       assertFalse(node5.isExprResult());
2510:       assertFalse(node5.isTrue());
2511:       assertFalse(node5.isVoid());
2512:       assertFalse(node5.isAdd());
2513:       assertFalse(node5.isCall());
2514:       assertFalse(node5.isGetElem());
2515:       assertFalse(node5.isBreak());
2516:       assertFalse(node5.isDelProp());
2517:       assertFalse(node5.isName());
2518:       assertFalse(node5.isNE());
2519:       assertFalse(node5.isGetterDef());
2520:       assertFalse(node5.isIn());
2521:       assertFalse(node5.isEmpty());
2522:       assertFalse(node5.isFor());
2523:       assertFalse(node5.isCase());
2524:       assertFalse(node5.isTry());
2525:       assertEquals((-1), node5.getCharno());
2526:       assertFalse(node5.isDebugger());
2527:       assertFalse(node5.isSwitch());
2528:       assertFalse(node5.isFunction());
2529:       assertFalse(node5.isString());
2530:       assertFalse(node5.isFalse());
2531:       assertFalse(node5.isArrayLit());
2532:       assertTrue(node5.isContinue());
2533:       assertFalse(node5.isThis());
2534:       assertFalse(node5.isSetterDef());
2535:       assertFalse(node5.isParamList());
2536:       assertFalse(node5.isThrow());
2537:       assertFalse(node5.isBlock());
2538:       assertFalse(node5.isInc());
2539:       assertFalse(node5.isWith());
2540:       assertFalse(node5.isHook());
2541:       assertFalse(node5.isRegExp());
2542:       assertFalse(node5.hasMoreThanOneChild());
2543:       assertFalse(node5.isInstanceOf());
2544:       assertFalse(node5.isCatch());
2545:       assertFalse(node5.isIf());
2546:       assertEquals((-1), node5.getLineno());
2547:       assertFalse(boolean7);
2548:   }
2549: }
RegularFileObject[/tmp/EvoSuite_134_1628256033725/com/google/javascript/rhino/Node_134_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:34 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_134_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_134_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_134_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.InputId",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.javascript.rhino.jstype.TemplatizedType",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.Iterables",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.common.collect.Sets$ImprovedAbstractSet",
354:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
355:       "com.google.common.collect.Hashing",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
358:       "com.google.javascript.rhino.JSTypeExpression",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
367:     );
368:   }
369: }

[MASTER] 13:20:34.536 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("", 36, 36);
assertNotNull(node0);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(36, node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertEquals(36, node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean0 = node0.isLabelName();
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(36, node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertEquals(36, node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(boolean0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean1 = node0.isOr();
assertTrue(boolean1 == boolean0);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(36, node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertEquals(36, node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(boolean1);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

Node node1 = Node.newString(38, "");
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertNotNull(node1);
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertEquals(38, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertTrue(node1.isName());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isSwitch());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertNull(staticSourceFile0);
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertEquals(38, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertTrue(node1.isName());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isSwitch());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Node node2 = Node.newNumber((double) 12, 36, 37);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertEquals(37, node2.getCharno());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertEquals(36, node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertEquals(39, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isIn());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertTrue(node2.isNumber());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node node3 = node0.copyInformationFrom(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertNotSame(node0, node1);
assertSame(node0, node3);
assertSame(node3, node0);
assertNotSame(node3, node1);
assertNotNull(node3);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(36, node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isFalse());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(37, node0.getCharno());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertEquals(37, node2.getCharno());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertEquals(36, node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertEquals(39, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isIn());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertTrue(node2.isNumber());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertFalse(node3.isTrue());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isRegExp());
assertFalse(node3.isArrayLit());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isNE());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCatch());
assertFalse(node3.isFor());
assertFalse(node3.isCase());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertEquals(40, node3.getType());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertFalse(node3.isCast());
assertFalse(node3.isWith());
assertFalse(node3.isGetElem());
assertEquals(37, node3.getCharno());
assertFalse(node3.isObjectLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isBreak());
assertFalse(node3.isNumber());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasMoreThanOneChild());
assertEquals(36, node3.getLineno());
assertFalse(node3.isAssign());
assertFalse(node3.hasOneChild());
assertFalse(node3.hasChildren());
assertFalse(node3.isHook());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isAdd());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isNull());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isEmpty());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isVar());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);

boolean boolean2 = node0.getBooleanProp(53);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertNotSame(node0, node1);
assertSame(node0, node3);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(36, node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isFalse());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(37, node0.getCharno());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(boolean2);

boolean boolean3 = node0.isReturn();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertNotSame(node0, node1);
assertSame(node0, node3);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(36, node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isFalse());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(37, node0.getCharno());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(boolean3);

Node node4 = new Node(471, node3, node3, node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertNotNull(node4);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(36, node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isFalse());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(37, node0.getCharno());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertEquals(38, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertTrue(node1.isName());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isSwitch());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertEquals(37, node2.getCharno());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertEquals(36, node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertEquals(39, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isIn());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertTrue(node2.isNumber());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertFalse(node3.isTrue());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isRegExp());
assertFalse(node3.isArrayLit());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isNE());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCatch());
assertFalse(node3.isFor());
assertFalse(node3.isCase());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertEquals(40, node3.getType());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertFalse(node3.isCast());
assertFalse(node3.isWith());
assertFalse(node3.isGetElem());
assertEquals(37, node3.getCharno());
assertFalse(node3.isObjectLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isBreak());
assertFalse(node3.isNumber());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasMoreThanOneChild());
assertEquals(36, node3.getLineno());
assertFalse(node3.isAssign());
assertFalse(node3.hasOneChild());
assertFalse(node3.hasChildren());
assertFalse(node3.isHook());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isAdd());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isNull());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isEmpty());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isVar());
assertFalse(node4.isCast());
assertFalse(node4.hasOneChild());
assertFalse(node4.isGetElem());
assertFalse(node4.isLabelName());
assertFalse(node4.isExprResult());
assertFalse(node4.isDec());
assertFalse(node4.isLabel());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isWith());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isNew());
assertFalse(node4.isOr());
assertFalse(node4.isAdd());
assertFalse(node4.isVar());
assertFalse(node4.isHook());
assertFalse(node4.isStringKey());
assertFalse(node4.isThis());
assertFalse(node4.isBlock());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isCase());
assertFalse(node4.isSwitch());
assertFalse(node4.isParamList());
assertFalse(node4.isScript());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isArrayLit());
assertFalse(node4.isFor());
assertFalse(node4.isTry());
assertFalse(node4.isDelProp());
assertFalse(node4.isIf());
assertFalse(node4.isFunction());
assertFalse(node4.isVoid());
assertTrue(node4.hasChildren());
assertFalse(node4.isRegExp());
assertFalse(node4.isCatch());
assertTrue(node4.hasMoreThanOneChild());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isTrue());
assertFalse(node4.isInc());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNE());
assertFalse(node4.isNull());
assertFalse(node4.isEmpty());
assertFalse(node4.isIn());
assertFalse(node4.isCall());
assertFalse(node4.isThrow());
assertEquals(471, node4.getType());
assertFalse(node4.isName());
assertFalse(node4.isComma());
assertFalse(node4.isBreak());
assertEquals(2, node4.getChildCount());
assertFalse(node4.isFalse());
assertFalse(node4.isContinue());
assertFalse(node4.isObjectLit());
assertFalse(node4.isReturn());
assertFalse(node4.isWhile());
assertFalse(node4.isAnd());
assertFalse(node4.isDebugger());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isGetProp());
assertFalse(node4.isString());
assertFalse(node4.isNot());

String string0 = node2.toString(false, false, false);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertNotNull(string0);
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertEquals(37, node2.getCharno());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertEquals(36, node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertEquals(39, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isIn());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertTrue(node2.isNumber());
assertEquals("NUMBER 12.0", string0);

boolean boolean4 = node3.isTrue();
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertNotSame(node0, node1);
assertSame(node0, node3);
assertSame(node3, node0);
assertNotSame(node3, node1);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(36, node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isFalse());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(37, node0.getCharno());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertEquals(37, node2.getCharno());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertEquals(36, node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertEquals(39, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isIn());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertTrue(node2.isNumber());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertFalse(node3.isTrue());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isRegExp());
assertFalse(node3.isArrayLit());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isNE());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCatch());
assertFalse(node3.isFor());
assertFalse(node3.isCase());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertEquals(40, node3.getType());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertFalse(node3.isCast());
assertFalse(node3.isWith());
assertFalse(node3.isGetElem());
assertEquals(37, node3.getCharno());
assertFalse(node3.isObjectLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isBreak());
assertFalse(node3.isNumber());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasMoreThanOneChild());
assertEquals(36, node3.getLineno());
assertFalse(node3.isAssign());
assertFalse(node3.hasOneChild());
assertFalse(node3.hasChildren());
assertFalse(node3.isHook());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isAdd());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isNull());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isEmpty());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isVar());
assertFalse(boolean4);

Iterable<Node> iterable0 = node4.children();
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertNotSame(node0, node1);
assertSame(node0, node3);
assertNotSame(node1, node3);
assertNotSame(node1, node0);
assertSame(node3, node0);
assertNotSame(node3, node1);
assertNotNull(iterable0);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(36, node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isFalse());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(37, node0.getCharno());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertEquals(38, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertTrue(node1.isName());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isSwitch());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertEquals(37, node2.getCharno());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertEquals(36, node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertEquals(39, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isIn());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertTrue(node2.isNumber());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertFalse(node3.isTrue());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isRegExp());
assertFalse(node3.isArrayLit());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isNE());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCatch());
assertFalse(node3.isFor());
assertFalse(node3.isCase());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertEquals(40, node3.getType());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertFalse(node3.isCast());
assertFalse(node3.isWith());
assertFalse(node3.isGetElem());
assertEquals(37, node3.getCharno());
assertFalse(node3.isObjectLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isBreak());
assertFalse(node3.isNumber());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasMoreThanOneChild());
assertEquals(36, node3.getLineno());
assertFalse(node3.isAssign());
assertFalse(node3.hasOneChild());
assertFalse(node3.hasChildren());
assertFalse(node3.isHook());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isAdd());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isNull());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isEmpty());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isVar());
assertFalse(node4.isCast());
assertFalse(node4.hasOneChild());
assertFalse(node4.isGetElem());
assertFalse(node4.isLabelName());
assertFalse(node4.isExprResult());
assertFalse(node4.isDec());
assertFalse(node4.isLabel());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isWith());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isNew());
assertFalse(node4.isOr());
assertFalse(node4.isAdd());
assertFalse(node4.isVar());
assertFalse(node4.isHook());
assertFalse(node4.isStringKey());
assertFalse(node4.isThis());
assertFalse(node4.isBlock());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isCase());
assertFalse(node4.isSwitch());
assertFalse(node4.isParamList());
assertFalse(node4.isScript());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isArrayLit());
assertFalse(node4.isFor());
assertFalse(node4.isTry());
assertFalse(node4.isDelProp());
assertFalse(node4.isIf());
assertFalse(node4.isFunction());
assertFalse(node4.isVoid());
assertTrue(node4.hasChildren());
assertFalse(node4.isRegExp());
assertFalse(node4.isCatch());
assertTrue(node4.hasMoreThanOneChild());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isTrue());
assertFalse(node4.isInc());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNE());
assertFalse(node4.isNull());
assertFalse(node4.isEmpty());
assertFalse(node4.isIn());
assertFalse(node4.isCall());
assertFalse(node4.isThrow());
assertEquals(471, node4.getType());
assertFalse(node4.isName());
assertFalse(node4.isComma());
assertFalse(node4.isBreak());
assertEquals(2, node4.getChildCount());
assertFalse(node4.isFalse());
assertFalse(node4.isContinue());
assertFalse(node4.isObjectLit());
assertFalse(node4.isReturn());
assertFalse(node4.isWhile());
assertFalse(node4.isAnd());
assertFalse(node4.isDebugger());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isGetProp());
assertFalse(node4.isString());
assertFalse(node4.isNot());

Node node5 = Node.newString(117, "", (-1049), 40);
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node2));
assertNotSame(node5, node0);
assertNotSame(node5, node1);
assertNotSame(node5, node3);
assertNotNull(node5);
assertFalse(node5.isAssignAdd());
assertFalse(node5.hasChildren());
assertEquals(117, node5.getType());
assertFalse(node5.isReturn());
assertFalse(node5.isNumber());
assertFalse(node5.isAssign());
assertFalse(node5.isTypeOf());
assertFalse(node5.isOr());
assertFalse(node5.isLabel());
assertFalse(node5.isDec());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isWhile());
assertFalse(node5.isDo());
assertFalse(node5.hasOneChild());
assertFalse(node5.isScript());
assertFalse(node5.isNot());
assertFalse(node5.isAnd());
assertFalse(node5.isCast());
assertFalse(node5.isStringKey());
assertFalse(node5.isLabelName());
assertFalse(node5.isGetProp());
assertFalse(node5.isNull());
assertFalse(node5.isComma());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isObjectLit());
assertFalse(node5.isVar());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isNew());
assertFalse(node5.isExprResult());
assertFalse(node5.isTrue());
assertFalse(node5.isVoid());
assertFalse(node5.isAdd());
assertFalse(node5.isCall());
assertFalse(node5.isGetElem());
assertFalse(node5.isBreak());
assertFalse(node5.isDelProp());
assertFalse(node5.isName());
assertFalse(node5.isNE());
assertFalse(node5.isGetterDef());
assertFalse(node5.isIn());
assertFalse(node5.isEmpty());
assertFalse(node5.isFor());
assertFalse(node5.isCase());
assertFalse(node5.isTry());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isDebugger());
assertFalse(node5.isSwitch());
assertFalse(node5.isFunction());
assertFalse(node5.isString());
assertFalse(node5.isFalse());
assertFalse(node5.isArrayLit());
assertTrue(node5.isContinue());
assertFalse(node5.isThis());
assertFalse(node5.isSetterDef());
assertFalse(node5.isParamList());
assertFalse(node5.isThrow());
assertFalse(node5.isBlock());
assertFalse(node5.isInc());
assertFalse(node5.isWith());
assertFalse(node5.isHook());
assertFalse(node5.isRegExp());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isCatch());
assertFalse(node5.isIf());
assertEquals((-1), node5.getLineno());

boolean boolean5 = node2.isReturn();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertEquals(37, node2.getCharno());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertEquals(36, node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertEquals(39, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isIn());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertTrue(node2.isNumber());
assertFalse(boolean5);

boolean boolean6 = node2.isTrue();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean4);
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertEquals(37, node2.getCharno());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertEquals(36, node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertEquals(39, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isIn());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertTrue(node2.isNumber());
assertFalse(boolean6);

Iterable<Node> iterable1 = node0.children();
assertFalse(iterable1.equals((Object)iterable0));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node2));
assertNotSame(node0, node1);
assertNotSame(node0, node5);
assertSame(node0, node3);
assertFalse(iterable1.contains(node4));
assertNotNull(iterable1);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(36, node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isFalse());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(37, node0.getCharno());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());

StringWriter stringWriter0 = new StringWriter(25);
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

StringWriter stringWriter1 = stringWriter0.append((CharSequence) "NUMBER 12.0");
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);
assertEquals("NUMBER 12.0", stringWriter0.toString());
assertEquals("NUMBER 12.0", stringWriter1.toString());

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
assertNotNull(mockPrintWriter0);

Locale locale0 = new Locale("H'Y@UN%");
assertNotNull(locale0);
assertEquals("", locale0.getVariant());
assertEquals("", locale0.getCountry());
assertEquals("h'y@un%", locale0.getLanguage());
assertEquals("", locale0.getISO3Country());
assertEquals("h'y@un%", locale0.toString());

Object[] objectArray0 = new Object[1];
objectArray0[0] = (Object) node4;
PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "NUMBER 12.0", objectArray0);
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(1, objectArray0.length);
assertNotNull(printWriter0);
assertEquals("NUMBER 12.0NUMBER 12.0", stringWriter0.toString());
assertEquals("NUMBER 12.0NUMBER 12.0", stringWriter1.toString());
assertEquals("", locale0.getVariant());
assertEquals("", locale0.getCountry());
assertEquals("h'y@un%", locale0.getLanguage());
assertEquals("", locale0.getISO3Country());
assertEquals("h'y@un%", locale0.toString());

node1.appendStringTree(printWriter0);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertNotSame(node1, node3);
assertNotSame(node1, node5);
assertNotSame(node1, node0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(1, objectArray0.length);
assertEquals("NUMBER 12.0NUMBER 12.0NAME \n", stringWriter0.toString());
assertEquals("NUMBER 12.0NUMBER 12.0NAME \n", stringWriter1.toString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertEquals(38, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertTrue(node1.isName());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isSwitch());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals("", locale0.getVariant());
assertEquals("", locale0.getCountry());
assertEquals("h'y@un%", locale0.getLanguage());
assertEquals("", locale0.getISO3Country());
assertEquals("h'y@un%", locale0.toString());

boolean boolean7 = node5.isAssignAdd();
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean3);
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node2));
assertNotSame(node5, node0);
assertNotSame(node5, node1);
assertNotSame(node5, node3);
assertFalse(node5.isAssignAdd());
assertFalse(node5.hasChildren());
assertEquals(117, node5.getType());
assertFalse(node5.isReturn());
assertFalse(node5.isNumber());
assertFalse(node5.isAssign());
assertFalse(node5.isTypeOf());
assertFalse(node5.isOr());
assertFalse(node5.isLabel());
assertFalse(node5.isDec());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isWhile());
assertFalse(node5.isDo());
assertFalse(node5.hasOneChild());
assertFalse(node5.isScript());
assertFalse(node5.isNot());
assertFalse(node5.isAnd());
assertFalse(node5.isCast());
assertFalse(node5.isStringKey());
assertFalse(node5.isLabelName());
assertFalse(node5.isGetProp());
assertFalse(node5.isNull());
assertFalse(node5.isComma());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isObjectLit());
assertFalse(node5.isVar());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isNew());
assertFalse(node5.isExprResult());
assertFalse(node5.isTrue());
assertFalse(node5.isVoid());
assertFalse(node5.isAdd());
assertFalse(node5.isCall());
assertFalse(node5.isGetElem());
assertFalse(node5.isBreak());
assertFalse(node5.isDelProp());
assertFalse(node5.isName());
assertFalse(node5.isNE());
assertFalse(node5.isGetterDef());
assertFalse(node5.isIn());
assertFalse(node5.isEmpty());
assertFalse(node5.isFor());
assertFalse(node5.isCase());
assertFalse(node5.isTry());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isDebugger());
assertFalse(node5.isSwitch());
assertFalse(node5.isFunction());
assertFalse(node5.isString());
assertFalse(node5.isFalse());
assertFalse(node5.isArrayLit());
assertTrue(node5.isContinue());
assertFalse(node5.isThis());
assertFalse(node5.isSetterDef());
assertFalse(node5.isParamList());
assertFalse(node5.isThrow());
assertFalse(node5.isBlock());
assertFalse(node5.isInc());
assertFalse(node5.isWith());
assertFalse(node5.isHook());
assertFalse(node5.isRegExp());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isCatch());
assertFalse(node5.isIf());
assertEquals((-1), node5.getLineno());
assertFalse(boolean7);


[MASTER] 13:20:37.213 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_142_1628256036745/com/google/javascript/rhino/Node_142_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_142_1628256036745/com/google/javascript/rhino/Node_142_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:37.213 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:37.213 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:37.213 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2248
[MASTER] 13:20:37.215 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_142_1628256036745/com/google/javascript/rhino/Node_142_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:36 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import java.io.StringWriter;
13: import java.util.Locale;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.mock.java.io.MockPrintWriter;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_142_tmp__ESTest extends Node_142_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Node node0 = Node.newString("", 36, 36);
25:       assertNotNull(node0);
26:       assertFalse(node0.isInstanceOf());
27:       assertFalse(node0.isObjectLit());
28:       assertFalse(node0.isWith());
29:       assertFalse(node0.isGetProp());
30:       assertFalse(node0.isBreak());
31:       assertFalse(node0.isNot());
32:       assertFalse(node0.isAnd());
33:       assertFalse(node0.isFalse());
34:       assertFalse(node0.isInc());
35:       assertFalse(node0.isCast());
36:       assertFalse(node0.isAssignAdd());
37:       assertFalse(node0.isLabel());
38:       assertFalse(node0.isThrow());
39:       assertFalse(node0.hasMoreThanOneChild());
40:       assertFalse(node0.isIn());
41:       assertFalse(node0.isCase());
42:       assertFalse(node0.isNumber());
43:       assertFalse(node0.isSwitch());
44:       assertFalse(node0.isIf());
45:       assertEquals(36, node0.getCharno());
46:       assertFalse(node0.isLabelName());
47:       assertFalse(node0.isGetterDef());
48:       assertFalse(node0.isNE());
49:       assertFalse(node0.hasOneChild());
50:       assertFalse(node0.isHook());
51:       assertEquals(147492, node0.getSourcePosition());
52:       assertFalse(node0.isTry());
53:       assertFalse(node0.isScript());
54:       assertFalse(node0.isRegExp());
55:       assertEquals(36, node0.getLineno());
56:       assertFalse(node0.isBlock());
57:       assertTrue(node0.isString());
58:       assertFalse(node0.isThis());
59:       assertFalse(node0.isFor());
60:       assertEquals(0, node0.getChildCount());
61:       assertFalse(node0.isCatch());
62:       assertFalse(node0.isSetterDef());
63:       assertFalse(node0.isNull());
64:       assertFalse(node0.isVoid());
65:       assertFalse(node0.isStringKey());
66:       assertFalse(node0.isName());
67:       assertFalse(node0.isDebugger());
68:       assertFalse(node0.isParamList());
69:       assertFalse(node0.isTrue());
70:       assertFalse(node0.isArrayLit());
71:       assertFalse(node0.isNew());
72:       assertFalse(node0.isAdd());
73:       assertFalse(node0.isEmpty());
74:       assertFalse(node0.isDefaultCase());
75:       assertFalse(node0.isFunction());
76:       assertFalse(node0.isDo());
77:       assertEquals(40, node0.getType());
78:       assertFalse(node0.isVar());
79:       assertFalse(node0.isOr());
80:       assertFalse(node0.isContinue());
81:       assertFalse(node0.isDelProp());
82:       assertFalse(node0.isGetElem());
83:       assertFalse(node0.isExprResult());
84:       assertFalse(node0.isCall());
85:       assertFalse(node0.isTypeOf());
86:       assertFalse(node0.isDec());
87:       assertFalse(node0.hasChildren());
88:       assertFalse(node0.isComma());
89:       assertFalse(node0.isAssign());
90:       assertFalse(node0.isReturn());
91:       assertFalse(node0.isWhile());
92:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
93:       assertEquals(56, Node.CHANGE_TIME);
94:       assertEquals(47, Node.IS_DISPATCHER);
95:       assertEquals(53, Node.INPUT_ID);
96:       assertEquals(32, Node.INCRDECR_PROP);
97:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
98:       assertEquals(29, Node.JSDOC_INFO_PROP);
99:       assertEquals(30, Node.VAR_ARGS_NAME);
100:       assertEquals(43, Node.IS_CONSTANT_NAME);
101:       assertEquals(51, Node.STATIC_SOURCE_FILE);
102:       assertEquals(57, Node.LAST_PROP);
103:       assertEquals(46, Node.IS_NAMESPACE);
104:       assertEquals(54, Node.SLASH_V);
105:       assertEquals(2, Node.POST_FLAG);
106:       assertEquals(40, Node.ORIGINALNAME_PROP);
107:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
108:       assertEquals(50, Node.FREE_CALL);
109:       assertEquals(57, Node.REFLECTED_OBJECT);
110:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
111:       assertEquals(52, Node.LENGTH);
112:       assertEquals(8, Node.FLAG_NO_THROWS);
113:       assertEquals(15, Node.NO_SIDE_EFFECTS);
114:       assertEquals(39, Node.EMPTY_BLOCK);
115:       assertEquals(55, Node.INFERRED_FUNCTION);
116:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
117:       assertEquals(49, Node.DIRECT_EVAL);
118:       assertEquals(1, Node.DECR_FLAG);
119:       assertEquals(12, Node.COLUMN_BITS);
120:       assertEquals(36, Node.QUOTED_PROP);
121:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
122:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
123:       assertEquals(37, Node.OPT_ARG_NAME);
124:       assertEquals(48, Node.DIRECTIVES);
125:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
126:       assertEquals(4095, Node.COLUMN_MASK);
127:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
128:       
129:       boolean boolean0 = node0.isLabelName();
130:       assertFalse(node0.isInstanceOf());
131:       assertFalse(node0.isObjectLit());
132:       assertFalse(node0.isWith());
133:       assertFalse(node0.isGetProp());
134:       assertFalse(node0.isBreak());
135:       assertFalse(node0.isNot());
136:       assertFalse(node0.isAnd());
137:       assertFalse(node0.isFalse());
138:       assertFalse(node0.isInc());
139:       assertFalse(node0.isCast());
140:       assertFalse(node0.isAssignAdd());
141:       assertFalse(node0.isLabel());
142:       assertFalse(node0.isThrow());
143:       assertFalse(node0.hasMoreThanOneChild());
144:       assertFalse(node0.isIn());
145:       assertFalse(node0.isCase());
146:       assertFalse(node0.isNumber());
147:       assertFalse(node0.isSwitch());
148:       assertFalse(node0.isIf());
149:       assertEquals(36, node0.getCharno());
150:       assertFalse(node0.isLabelName());
151:       assertFalse(node0.isGetterDef());
152:       assertFalse(node0.isNE());
153:       assertFalse(node0.hasOneChild());
154:       assertFalse(node0.isHook());
155:       assertEquals(147492, node0.getSourcePosition());
156:       assertFalse(node0.isTry());
157:       assertFalse(node0.isScript());
158:       assertFalse(node0.isRegExp());
159:       assertEquals(36, node0.getLineno());
160:       assertFalse(node0.isBlock());
161:       assertTrue(node0.isString());
162:       assertFalse(node0.isThis());
163:       assertFalse(node0.isFor());
164:       assertEquals(0, node0.getChildCount());
165:       assertFalse(node0.isCatch());
166:       assertFalse(node0.isSetterDef());
167:       assertFalse(node0.isNull());
168:       assertFalse(node0.isVoid());
169:       assertFalse(node0.isStringKey());
170:       assertFalse(node0.isName());
171:       assertFalse(node0.isDebugger());
172:       assertFalse(node0.isParamList());
173:       assertFalse(node0.isTrue());
174:       assertFalse(node0.isArrayLit());
175:       assertFalse(node0.isNew());
176:       assertFalse(node0.isAdd());
177:       assertFalse(node0.isEmpty());
178:       assertFalse(node0.isDefaultCase());
179:       assertFalse(node0.isFunction());
180:       assertFalse(node0.isDo());
181:       assertEquals(40, node0.getType());
182:       assertFalse(node0.isVar());
183:       assertFalse(node0.isOr());
184:       assertFalse(node0.isContinue());
185:       assertFalse(node0.isDelProp());
186:       assertFalse(node0.isGetElem());
187:       assertFalse(node0.isExprResult());
188:       assertFalse(node0.isCall());
189:       assertFalse(node0.isTypeOf());
190:       assertFalse(node0.isDec());
191:       assertFalse(node0.hasChildren());
192:       assertFalse(node0.isComma());
193:       assertFalse(node0.isAssign());
194:       assertFalse(node0.isReturn());
195:       assertFalse(node0.isWhile());
196:       assertFalse(boolean0);
197:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
198:       assertEquals(56, Node.CHANGE_TIME);
199:       assertEquals(47, Node.IS_DISPATCHER);
200:       assertEquals(53, Node.INPUT_ID);
201:       assertEquals(32, Node.INCRDECR_PROP);
202:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
203:       assertEquals(29, Node.JSDOC_INFO_PROP);
204:       assertEquals(30, Node.VAR_ARGS_NAME);
205:       assertEquals(43, Node.IS_CONSTANT_NAME);
206:       assertEquals(51, Node.STATIC_SOURCE_FILE);
207:       assertEquals(57, Node.LAST_PROP);
208:       assertEquals(46, Node.IS_NAMESPACE);
209:       assertEquals(54, Node.SLASH_V);
210:       assertEquals(2, Node.POST_FLAG);
211:       assertEquals(40, Node.ORIGINALNAME_PROP);
212:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
213:       assertEquals(50, Node.FREE_CALL);
214:       assertEquals(57, Node.REFLECTED_OBJECT);
215:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
216:       assertEquals(52, Node.LENGTH);
217:       assertEquals(8, Node.FLAG_NO_THROWS);
218:       assertEquals(15, Node.NO_SIDE_EFFECTS);
219:       assertEquals(39, Node.EMPTY_BLOCK);
220:       assertEquals(55, Node.INFERRED_FUNCTION);
221:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
222:       assertEquals(49, Node.DIRECT_EVAL);
223:       assertEquals(1, Node.DECR_FLAG);
224:       assertEquals(12, Node.COLUMN_BITS);
225:       assertEquals(36, Node.QUOTED_PROP);
226:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
227:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
228:       assertEquals(37, Node.OPT_ARG_NAME);
229:       assertEquals(48, Node.DIRECTIVES);
230:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
231:       assertEquals(4095, Node.COLUMN_MASK);
232:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
233:       
234:       boolean boolean1 = node0.isOr();
235:       assertTrue(boolean1 == boolean0);
236:       assertFalse(node0.isInstanceOf());
237:       assertFalse(node0.isObjectLit());
238:       assertFalse(node0.isWith());
239:       assertFalse(node0.isGetProp());
240:       assertFalse(node0.isBreak());
241:       assertFalse(node0.isNot());
242:       assertFalse(node0.isAnd());
243:       assertFalse(node0.isFalse());
244:       assertFalse(node0.isInc());
245:       assertFalse(node0.isCast());
246:       assertFalse(node0.isAssignAdd());
247:       assertFalse(node0.isLabel());
248:       assertFalse(node0.isThrow());
249:       assertFalse(node0.hasMoreThanOneChild());
250:       assertFalse(node0.isIn());
251:       assertFalse(node0.isCase());
252:       assertFalse(node0.isNumber());
253:       assertFalse(node0.isSwitch());
254:       assertFalse(node0.isIf());
255:       assertEquals(36, node0.getCharno());
256:       assertFalse(node0.isLabelName());
257:       assertFalse(node0.isGetterDef());
258:       assertFalse(node0.isNE());
259:       assertFalse(node0.hasOneChild());
260:       assertFalse(node0.isHook());
261:       assertEquals(147492, node0.getSourcePosition());
262:       assertFalse(node0.isTry());
263:       assertFalse(node0.isScript());
264:       assertFalse(node0.isRegExp());
265:       assertEquals(36, node0.getLineno());
266:       assertFalse(node0.isBlock());
267:       assertTrue(node0.isString());
268:       assertFalse(node0.isThis());
269:       assertFalse(node0.isFor());
270:       assertEquals(0, node0.getChildCount());
271:       assertFalse(node0.isCatch());
272:       assertFalse(node0.isSetterDef());
273:       assertFalse(node0.isNull());
274:       assertFalse(node0.isVoid());
275:       assertFalse(node0.isStringKey());
276:       assertFalse(node0.isName());
277:       assertFalse(node0.isDebugger());
278:       assertFalse(node0.isParamList());
279:       assertFalse(node0.isTrue());
280:       assertFalse(node0.isArrayLit());
281:       assertFalse(node0.isNew());
282:       assertFalse(node0.isAdd());
283:       assertFalse(node0.isEmpty());
284:       assertFalse(node0.isDefaultCase());
285:       assertFalse(node0.isFunction());
286:       assertFalse(node0.isDo());
287:       assertEquals(40, node0.getType());
288:       assertFalse(node0.isVar());
289:       assertFalse(node0.isOr());
290:       assertFalse(node0.isContinue());
291:       assertFalse(node0.isDelProp());
292:       assertFalse(node0.isGetElem());
293:       assertFalse(node0.isExprResult());
294:       assertFalse(node0.isCall());
295:       assertFalse(node0.isTypeOf());
296:       assertFalse(node0.isDec());
297:       assertFalse(node0.hasChildren());
298:       assertFalse(node0.isComma());
299:       assertFalse(node0.isAssign());
300:       assertFalse(node0.isReturn());
301:       assertFalse(node0.isWhile());
302:       assertFalse(boolean1);
303:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
304:       assertEquals(56, Node.CHANGE_TIME);
305:       assertEquals(47, Node.IS_DISPATCHER);
306:       assertEquals(53, Node.INPUT_ID);
307:       assertEquals(32, Node.INCRDECR_PROP);
308:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
309:       assertEquals(29, Node.JSDOC_INFO_PROP);
310:       assertEquals(30, Node.VAR_ARGS_NAME);
311:       assertEquals(43, Node.IS_CONSTANT_NAME);
312:       assertEquals(51, Node.STATIC_SOURCE_FILE);
313:       assertEquals(57, Node.LAST_PROP);
314:       assertEquals(46, Node.IS_NAMESPACE);
315:       assertEquals(54, Node.SLASH_V);
316:       assertEquals(2, Node.POST_FLAG);
317:       assertEquals(40, Node.ORIGINALNAME_PROP);
318:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
319:       assertEquals(50, Node.FREE_CALL);
320:       assertEquals(57, Node.REFLECTED_OBJECT);
321:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
322:       assertEquals(52, Node.LENGTH);
323:       assertEquals(8, Node.FLAG_NO_THROWS);
324:       assertEquals(15, Node.NO_SIDE_EFFECTS);
325:       assertEquals(39, Node.EMPTY_BLOCK);
326:       assertEquals(55, Node.INFERRED_FUNCTION);
327:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
328:       assertEquals(49, Node.DIRECT_EVAL);
329:       assertEquals(1, Node.DECR_FLAG);
330:       assertEquals(12, Node.COLUMN_BITS);
331:       assertEquals(36, Node.QUOTED_PROP);
332:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
333:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
334:       assertEquals(37, Node.OPT_ARG_NAME);
335:       assertEquals(48, Node.DIRECTIVES);
336:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
337:       assertEquals(4095, Node.COLUMN_MASK);
338:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
339:       
340:       Node node1 = Node.newString(38, "");
341:       assertFalse(node1.equals((Object)node0));
342:       assertNotSame(node1, node0);
343:       assertNotNull(node1);
344:       assertEquals(0, node1.getChildCount());
345:       assertFalse(node1.isParamList());
346:       assertFalse(node1.isNull());
347:       assertFalse(node1.isDefaultCase());
348:       assertFalse(node1.isSetterDef());
349:       assertFalse(node1.isAdd());
350:       assertFalse(node1.isTry());
351:       assertFalse(node1.isTrue());
352:       assertFalse(node1.isBlock());
353:       assertFalse(node1.isDelProp());
354:       assertFalse(node1.isRegExp());
355:       assertFalse(node1.isIf());
356:       assertFalse(node1.isCatch());
357:       assertFalse(node1.isCall());
358:       assertFalse(node1.isVoid());
359:       assertFalse(node1.isOr());
360:       assertFalse(node1.isAssignAdd());
361:       assertFalse(node1.hasMoreThanOneChild());
362:       assertFalse(node1.isLabel());
363:       assertFalse(node1.isDo());
364:       assertFalse(node1.isEmpty());
365:       assertFalse(node1.isGetterDef());
366:       assertFalse(node1.isFor());
367:       assertFalse(node1.isNumber());
368:       assertFalse(node1.hasOneChild());
369:       assertFalse(node1.isCase());
370:       assertFalse(node1.isNew());
371:       assertFalse(node1.isVar());
372:       assertEquals((-1), node1.getCharno());
373:       assertEquals(38, node1.getType());
374:       assertFalse(node1.isLabelName());
375:       assertFalse(node1.isStringKey());
376:       assertFalse(node1.isSwitch());
377:       assertFalse(node1.isArrayLit());
378:       assertFalse(node1.isInstanceOf());
379:       assertFalse(node1.isThis());
380:       assertTrue(node1.isName());
381:       assertFalse(node1.isComma());
382:       assertFalse(node1.isObjectLit());
383:       assertFalse(node1.isNot());
384:       assertFalse(node1.isScript());
385:       assertFalse(node1.isGetProp());
386:       assertFalse(node1.isHook());
387:       assertFalse(node1.isAssign());
388:       assertFalse(node1.isTypeOf());
389:       assertFalse(node1.isWith());
390:       assertFalse(node1.isExprResult());
391:       assertFalse(node1.isGetElem());
392:       assertFalse(node1.isBreak());
393:       assertFalse(node1.isReturn());
394:       assertEquals((-1), node1.getLineno());
395:       assertFalse(node1.isIn());
396:       assertFalse(node1.isNE());
397:       assertFalse(node1.isDec());
398:       assertEquals((-1), node1.getSourcePosition());
399:       assertFalse(node1.hasChildren());
400:       assertFalse(node1.isWhile());
401:       assertFalse(node1.isString());
402:       assertFalse(node1.isInc());
403:       assertFalse(node1.isFunction());
404:       assertFalse(node1.isThrow());
405:       assertFalse(node1.isDebugger());
406:       assertFalse(node1.isFalse());
407:       assertFalse(node1.isContinue());
408:       assertFalse(node1.isAnd());
409:       assertFalse(node1.isCast());
410:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
411:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
412:       assertEquals(29, Node.JSDOC_INFO_PROP);
413:       assertEquals(53, Node.INPUT_ID);
414:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
415:       assertEquals(2, Node.POST_FLAG);
416:       assertEquals(12, Node.COLUMN_BITS);
417:       assertEquals(47, Node.IS_DISPATCHER);
418:       assertEquals(55, Node.INFERRED_FUNCTION);
419:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
420:       assertEquals(4095, Node.COLUMN_MASK);
421:       assertEquals(49, Node.DIRECT_EVAL);
422:       assertEquals(15, Node.NO_SIDE_EFFECTS);
423:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
424:       assertEquals(37, Node.OPT_ARG_NAME);
425:       assertEquals(8, Node.FLAG_NO_THROWS);
426:       assertEquals(39, Node.EMPTY_BLOCK);
427:       assertEquals(48, Node.DIRECTIVES);
428:       assertEquals(56, Node.CHANGE_TIME);
429:       assertEquals(52, Node.LENGTH);
430:       assertEquals(36, Node.QUOTED_PROP);
431:       assertEquals(57, Node.REFLECTED_OBJECT);
432:       assertEquals(40, Node.ORIGINALNAME_PROP);
433:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
434:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
435:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
436:       assertEquals(57, Node.LAST_PROP);
437:       assertEquals(30, Node.VAR_ARGS_NAME);
438:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
439:       assertEquals(1, Node.DECR_FLAG);
440:       assertEquals(32, Node.INCRDECR_PROP);
441:       assertEquals(54, Node.SLASH_V);
442:       assertEquals(43, Node.IS_CONSTANT_NAME);
443:       assertEquals(46, Node.IS_NAMESPACE);
444:       assertEquals(50, Node.FREE_CALL);
445:       assertEquals(51, Node.STATIC_SOURCE_FILE);
446:       
447:       StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
448:       assertFalse(node1.equals((Object)node0));
449:       assertNotSame(node1, node0);
450:       assertNull(staticSourceFile0);
451:       assertEquals(0, node1.getChildCount());
452:       assertFalse(node1.isParamList());
453:       assertFalse(node1.isNull());
454:       assertFalse(node1.isDefaultCase());
455:       assertFalse(node1.isSetterDef());
456:       assertFalse(node1.isAdd());
457:       assertFalse(node1.isTry());
458:       assertFalse(node1.isTrue());
459:       assertFalse(node1.isBlock());
460:       assertFalse(node1.isDelProp());
461:       assertFalse(node1.isRegExp());
462:       assertFalse(node1.isIf());
463:       assertFalse(node1.isCatch());
464:       assertFalse(node1.isCall());
465:       assertFalse(node1.isVoid());
466:       assertFalse(node1.isOr());
467:       assertFalse(node1.isAssignAdd());
468:       assertFalse(node1.hasMoreThanOneChild());
469:       assertFalse(node1.isLabel());
470:       assertFalse(node1.isDo());
471:       assertFalse(node1.isEmpty());
472:       assertFalse(node1.isGetterDef());
473:       assertFalse(node1.isFor());
474:       assertFalse(node1.isNumber());
475:       assertFalse(node1.hasOneChild());
476:       assertFalse(node1.isCase());
477:       assertFalse(node1.isNew());
478:       assertFalse(node1.isVar());
479:       assertEquals((-1), node1.getCharno());
480:       assertEquals(38, node1.getType());
481:       assertFalse(node1.isLabelName());
482:       assertFalse(node1.isStringKey());
483:       assertFalse(node1.isSwitch());
484:       assertFalse(node1.isArrayLit());
485:       assertFalse(node1.isInstanceOf());
486:       assertFalse(node1.isThis());
487:       assertTrue(node1.isName());
488:       assertFalse(node1.isComma());
489:       assertFalse(node1.isObjectLit());
490:       assertFalse(node1.isNot());
491:       assertFalse(node1.isScript());
492:       assertFalse(node1.isGetProp());
493:       assertFalse(node1.isHook());
494:       assertFalse(node1.isAssign());
495:       assertFalse(node1.isTypeOf());
496:       assertFalse(node1.isWith());
497:       assertFalse(node1.isExprResult());
498:       assertFalse(node1.isGetElem());
499:       assertFalse(node1.isBreak());
500:       assertFalse(node1.isReturn());
501:       assertEquals((-1), node1.getLineno());
502:       assertFalse(node1.isIn());
503:       assertFalse(node1.isNE());
504:       assertFalse(node1.isDec());
505:       assertEquals((-1), node1.getSourcePosition());
506:       assertFalse(node1.hasChildren());
507:       assertFalse(node1.isWhile());
508:       assertFalse(node1.isString());
509:       assertFalse(node1.isInc());
510:       assertFalse(node1.isFunction());
511:       assertFalse(node1.isThrow());
512:       assertFalse(node1.isDebugger());
513:       assertFalse(node1.isFalse());
514:       assertFalse(node1.isContinue());
515:       assertFalse(node1.isAnd());
516:       assertFalse(node1.isCast());
517:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
518:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
519:       assertEquals(29, Node.JSDOC_INFO_PROP);
520:       assertEquals(53, Node.INPUT_ID);
521:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
522:       assertEquals(2, Node.POST_FLAG);
523:       assertEquals(12, Node.COLUMN_BITS);
524:       assertEquals(47, Node.IS_DISPATCHER);
525:       assertEquals(55, Node.INFERRED_FUNCTION);
526:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
527:       assertEquals(4095, Node.COLUMN_MASK);
528:       assertEquals(49, Node.DIRECT_EVAL);
529:       assertEquals(15, Node.NO_SIDE_EFFECTS);
530:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
531:       assertEquals(37, Node.OPT_ARG_NAME);
532:       assertEquals(8, Node.FLAG_NO_THROWS);
533:       assertEquals(39, Node.EMPTY_BLOCK);
534:       assertEquals(48, Node.DIRECTIVES);
535:       assertEquals(56, Node.CHANGE_TIME);
536:       assertEquals(52, Node.LENGTH);
537:       assertEquals(36, Node.QUOTED_PROP);
538:       assertEquals(57, Node.REFLECTED_OBJECT);
539:       assertEquals(40, Node.ORIGINALNAME_PROP);
540:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
541:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
542:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
543:       assertEquals(57, Node.LAST_PROP);
544:       assertEquals(30, Node.VAR_ARGS_NAME);
545:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
546:       assertEquals(1, Node.DECR_FLAG);
547:       assertEquals(32, Node.INCRDECR_PROP);
548:       assertEquals(54, Node.SLASH_V);
549:       assertEquals(43, Node.IS_CONSTANT_NAME);
550:       assertEquals(46, Node.IS_NAMESPACE);
551:       assertEquals(50, Node.FREE_CALL);
552:       assertEquals(51, Node.STATIC_SOURCE_FILE);
553:       
554:       Node node2 = Node.newNumber((double) 12, 36, 37);
555:       assertFalse(node2.equals((Object)node1));
556:       assertFalse(node2.equals((Object)node0));
557:       assertNotNull(node2);
558:       assertEquals(0, node2.getChildCount());
559:       assertFalse(node2.isDefaultCase());
560:       assertFalse(node2.isTrue());
561:       assertFalse(node2.isDebugger());
562:       assertFalse(node2.isSetterDef());
563:       assertFalse(node2.isTry());
564:       assertFalse(node2.isCall());
565:       assertFalse(node2.isName());
566:       assertFalse(node2.isDelProp());
567:       assertFalse(node2.isIf());
568:       assertFalse(node2.isBlock());
569:       assertFalse(node2.isFor());
570:       assertFalse(node2.isNull());
571:       assertFalse(node2.isNE());
572:       assertFalse(node2.isVoid());
573:       assertFalse(node2.isRegExp());
574:       assertFalse(node2.isCatch());
575:       assertFalse(node2.hasMoreThanOneChild());
576:       assertFalse(node2.isCase());
577:       assertFalse(node2.isDo());
578:       assertEquals(39, node2.getType());
579:       assertFalse(node2.isAssignAdd());
580:       assertFalse(node2.isOr());
581:       assertFalse(node2.isNew());
582:       assertFalse(node2.isGetterDef());
583:       assertFalse(node2.isAdd());
584:       assertFalse(node2.isEmpty());
585:       assertFalse(node2.isLabelName());
586:       assertFalse(node2.isArrayLit());
587:       assertFalse(node2.isVar());
588:       assertFalse(node2.isStringKey());
589:       assertFalse(node2.isParamList());
590:       assertFalse(node2.isSwitch());
591:       assertFalse(node2.isLabel());
592:       assertFalse(node2.isObjectLit());
593:       assertFalse(node2.isAnd());
594:       assertEquals(37, node2.getCharno());
595:       assertFalse(node2.isNot());
596:       assertFalse(node2.isGetProp());
597:       assertFalse(node2.isScript());
598:       assertFalse(node2.isGetElem());
599:       assertFalse(node2.hasOneChild());
600:       assertFalse(node2.isAssign());
601:       assertFalse(node2.hasChildren());
602:       assertFalse(node2.isHook());
603:       assertFalse(node2.isExprResult());
604:       assertFalse(node2.isThis());
605:       assertFalse(node2.isTypeOf());
606:       assertFalse(node2.isDec());
607:       assertFalse(node2.isComma());
608:       assertFalse(node2.isBreak());
609:       assertFalse(node2.isWith());
610:       assertEquals(36, node2.getLineno());
611:       assertFalse(node2.isInstanceOf());
612:       assertFalse(node2.isContinue());
613:       assertFalse(node2.isWhile());
614:       assertFalse(node2.isReturn());
615:       assertFalse(node2.isInc());
616:       assertEquals(147493, node2.getSourcePosition());
617:       assertTrue(node2.isNumber());
618:       assertFalse(node2.isString());
619:       assertFalse(node2.isIn());
620:       assertFalse(node2.isFalse());
621:       assertFalse(node2.isThrow());
622:       assertFalse(node2.isFunction());
623:       assertFalse(node2.isCast());
624:       assertEquals(47, Node.IS_DISPATCHER);
625:       assertEquals(2, Node.POST_FLAG);
626:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
627:       assertEquals(37, Node.OPT_ARG_NAME);
628:       assertEquals(29, Node.JSDOC_INFO_PROP);
629:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
630:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
631:       assertEquals(32, Node.INCRDECR_PROP);
632:       assertEquals(12, Node.COLUMN_BITS);
633:       assertEquals(15, Node.NO_SIDE_EFFECTS);
634:       assertEquals(57, Node.LAST_PROP);
635:       assertEquals(49, Node.DIRECT_EVAL);
636:       assertEquals(36, Node.QUOTED_PROP);
637:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
638:       assertEquals(4095, Node.COLUMN_MASK);
639:       assertEquals(53, Node.INPUT_ID);
640:       assertEquals(55, Node.INFERRED_FUNCTION);
641:       assertEquals(52, Node.LENGTH);
642:       assertEquals(57, Node.REFLECTED_OBJECT);
643:       
644:       Node node3 = node0.copyInformationFrom(node2);
645:       assertFalse(node0.equals((Object)node1));
646:       assertFalse(node0.equals((Object)node2));
647:       assertFalse(node2.equals((Object)node1));
648:       assertFalse(node2.equals((Object)node0));
649:       assertFalse(node3.equals((Object)node2));
650:       assertFalse(node3.equals((Object)node1));
651:       assertSame(node0, node3);
652:       assertNotSame(node0, node1);
653:       assertNotSame(node3, node1);
654:       assertSame(node3, node0);
655:       assertNotNull(node3);
656:       assertFalse(node0.isInstanceOf());
657:       assertFalse(node0.isObjectLit());
658:       assertFalse(node0.isWith());
659:       assertFalse(node0.isGetProp());
660:       assertFalse(node0.isBreak());
661:       assertEquals(37, node0.getCharno());
662:       assertFalse(node0.isNot());
663:       assertFalse(node0.isAnd());
664:       assertFalse(node0.isFalse());
665:       assertFalse(node0.isInc());
666:       assertFalse(node0.isCast());
667:       assertFalse(node0.isAssignAdd());
668:       assertFalse(node0.isLabel());
669:       assertFalse(node0.isThrow());
670:       assertFalse(node0.hasMoreThanOneChild());
671:       assertFalse(node0.isIn());
672:       assertFalse(node0.isCase());
673:       assertFalse(node0.isNumber());
674:       assertFalse(node0.isSwitch());
675:       assertFalse(node0.isIf());
676:       assertFalse(node0.isLabelName());
677:       assertFalse(node0.isGetterDef());
678:       assertEquals(147493, node0.getSourcePosition());
679:       assertFalse(node0.isNE());
680:       assertFalse(node0.hasOneChild());
681:       assertFalse(node0.isHook());
682:       assertFalse(node0.isTry());
683:       assertFalse(node0.isScript());
684:       assertFalse(node0.isRegExp());
685:       assertEquals(36, node0.getLineno());
686:       assertFalse(node0.isBlock());
687:       assertTrue(node0.isString());
688:       assertFalse(node0.isThis());
689:       assertFalse(node0.isFor());
690:       assertEquals(0, node0.getChildCount());
691:       assertFalse(node0.isCatch());
692:       assertFalse(node0.isSetterDef());
693:       assertFalse(node0.isNull());
694:       assertFalse(node0.isVoid());
695:       assertFalse(node0.isStringKey());
696:       assertFalse(node0.isName());
697:       assertFalse(node0.isDebugger());
698:       assertFalse(node0.isParamList());
699:       assertFalse(node0.isTrue());
700:       assertFalse(node0.isArrayLit());
701:       assertFalse(node0.isNew());
702:       assertFalse(node0.isAdd());
703:       assertFalse(node0.isEmpty());
704:       assertFalse(node0.isDefaultCase());
705:       assertFalse(node0.isFunction());
706:       assertFalse(node0.isDo());
707:       assertEquals(40, node0.getType());
708:       assertFalse(node0.isVar());
709:       assertFalse(node0.isOr());
710:       assertFalse(node0.isContinue());
711:       assertFalse(node0.isDelProp());
712:       assertFalse(node0.isGetElem());
713:       assertFalse(node0.isExprResult());
714:       assertFalse(node0.isCall());
715:       assertFalse(node0.isTypeOf());
716:       assertFalse(node0.isDec());
717:       assertFalse(node0.hasChildren());
718:       assertFalse(node0.isComma());
719:       assertFalse(node0.isAssign());
720:       assertFalse(node0.isReturn());
721:       assertFalse(node0.isWhile());
722:       assertEquals(0, node2.getChildCount());
723:       assertFalse(node2.isDefaultCase());
724:       assertFalse(node2.isTrue());
725:       assertFalse(node2.isDebugger());
726:       assertFalse(node2.isSetterDef());
727:       assertFalse(node2.isTry());
728:       assertFalse(node2.isCall());
729:       assertFalse(node2.isName());
730:       assertFalse(node2.isDelProp());
731:       assertFalse(node2.isIf());
732:       assertFalse(node2.isBlock());
733:       assertFalse(node2.isFor());
734:       assertFalse(node2.isNull());
735:       assertFalse(node2.isNE());
736:       assertFalse(node2.isVoid());
737:       assertFalse(node2.isRegExp());
738:       assertFalse(node2.isCatch());
739:       assertFalse(node2.hasMoreThanOneChild());
740:       assertFalse(node2.isCase());
741:       assertFalse(node2.isDo());
742:       assertEquals(39, node2.getType());
743:       assertFalse(node2.isAssignAdd());
744:       assertFalse(node2.isOr());
745:       assertFalse(node2.isNew());
746:       assertFalse(node2.isGetterDef());
747:       assertFalse(node2.isAdd());
748:       assertFalse(node2.isEmpty());
749:       assertFalse(node2.isLabelName());
750:       assertFalse(node2.isArrayLit());
751:       assertFalse(node2.isVar());
752:       assertFalse(node2.isStringKey());
753:       assertFalse(node2.isParamList());
754:       assertFalse(node2.isSwitch());
755:       assertFalse(node2.isLabel());
756:       assertFalse(node2.isObjectLit());
757:       assertFalse(node2.isAnd());
758:       assertEquals(37, node2.getCharno());
759:       assertFalse(node2.isNot());
760:       assertFalse(node2.isGetProp());
761:       assertFalse(node2.isScript());
762:       assertFalse(node2.isGetElem());
763:       assertFalse(node2.hasOneChild());
764:       assertFalse(node2.isAssign());
765:       assertFalse(node2.hasChildren());
766:       assertFalse(node2.isHook());
767:       assertFalse(node2.isExprResult());
768:       assertFalse(node2.isThis());
769:       assertFalse(node2.isTypeOf());
770:       assertFalse(node2.isDec());
771:       assertFalse(node2.isComma());
772:       assertFalse(node2.isBreak());
773:       assertFalse(node2.isWith());
774:       assertEquals(36, node2.getLineno());
775:       assertFalse(node2.isInstanceOf());
776:       assertFalse(node2.isContinue());
777:       assertFalse(node2.isWhile());
778:       assertFalse(node2.isReturn());
779:       assertFalse(node2.isInc());
780:       assertEquals(147493, node2.getSourcePosition());
781:       assertTrue(node2.isNumber());
782:       assertFalse(node2.isString());
783:       assertFalse(node2.isIn());
784:       assertFalse(node2.isFalse());
785:       assertFalse(node2.isThrow());
786:       assertFalse(node2.isFunction());
787:       assertFalse(node2.isCast());
788:       assertFalse(node3.hasMoreThanOneChild());
789:       assertFalse(node3.isContinue());
790:       assertFalse(node3.isDo());
791:       assertFalse(node3.isNumber());
792:       assertFalse(node3.isOr());
793:       assertFalse(node3.isCast());
794:       assertFalse(node3.isVar());
795:       assertFalse(node3.isLabelName());
796:       assertFalse(node3.isNew());
797:       assertFalse(node3.isAdd());
798:       assertFalse(node3.isSetterDef());
799:       assertFalse(node3.isAssignAdd());
800:       assertFalse(node3.isLabel());
801:       assertFalse(node3.isAnd());
802:       assertFalse(node3.isObjectLit());
803:       assertFalse(node3.isGetProp());
804:       assertFalse(node3.isDebugger());
805:       assertFalse(node3.isVoid());
806:       assertFalse(node3.isNot());
807:       assertFalse(node3.isNull());
808:       assertFalse(node3.isTrue());
809:       assertFalse(node3.isName());
810:       assertFalse(node3.isBreak());
811:       assertFalse(node3.isGetElem());
812:       assertFalse(node3.isExprResult());
813:       assertFalse(node3.isCall());
814:       assertFalse(node3.isComma());
815:       assertFalse(node3.isDec());
816:       assertFalse(node3.isTypeOf());
817:       assertFalse(node3.isAssign());
818:       assertFalse(node3.isWhile());
819:       assertFalse(node3.hasChildren());
820:       assertFalse(node3.isReturn());
821:       assertFalse(node3.isIn());
822:       assertFalse(node3.isCase());
823:       assertFalse(node3.isSwitch());
824:       assertFalse(node3.isNE());
825:       assertFalse(node3.isIf());
826:       assertFalse(node3.isGetterDef());
827:       assertFalse(node3.isDelProp());
828:       assertEquals(147493, node3.getSourcePosition());
829:       assertFalse(node3.isArrayLit());
830:       assertFalse(node3.isFalse());
831:       assertFalse(node3.isEmpty());
832:       assertFalse(node3.isInc());
833:       assertFalse(node3.isDefaultCase());
834:       assertFalse(node3.isFunction());
835:       assertFalse(node3.isThrow());
836:       assertEquals(40, node3.getType());
837:       assertFalse(node3.isCatch());
838:       assertEquals(0, node3.getChildCount());
839:       assertEquals(37, node3.getCharno());
840:       assertFalse(node3.isWith());
841:       assertFalse(node3.isInstanceOf());
842:       assertFalse(node3.isScript());
843:       assertFalse(node3.isParamList());
844:       assertFalse(node3.isStringKey());
845:       assertFalse(node3.hasOneChild());
846:       assertFalse(node3.isTry());
847:       assertFalse(node3.isThis());
848:       assertEquals(36, node3.getLineno());
849:       assertFalse(node3.isRegExp());
850:       assertTrue(node3.isString());
851:       assertFalse(node3.isHook());
852:       assertFalse(node3.isBlock());
853:       assertFalse(node3.isFor());
854:       
855:       boolean boolean2 = node0.getBooleanProp(53);
856:       assertFalse(node0.equals((Object)node1));
857:       assertFalse(node0.equals((Object)node2));
858:       assertTrue(boolean2 == boolean0);
859:       assertTrue(boolean2 == boolean1);
860:       assertSame(node0, node3);
861:       assertNotSame(node0, node1);
862:       assertFalse(node0.isInstanceOf());
863:       assertFalse(node0.isObjectLit());
864:       assertFalse(node0.isWith());
865:       assertFalse(node0.isGetProp());
866:       assertFalse(node0.isBreak());
867:       assertEquals(37, node0.getCharno());
868:       assertFalse(node0.isNot());
869:       assertFalse(node0.isAnd());
870:       assertFalse(node0.isFalse());
871:       assertFalse(node0.isInc());
872:       assertFalse(node0.isCast());
873:       assertFalse(node0.isAssignAdd());
874:       assertFalse(node0.isLabel());
875:       assertFalse(node0.isThrow());
876:       assertFalse(node0.hasMoreThanOneChild());
877:       assertFalse(node0.isIn());
878:       assertFalse(node0.isCase());
879:       assertFalse(node0.isNumber());
880:       assertFalse(node0.isSwitch());
881:       assertFalse(node0.isIf());
882:       assertFalse(node0.isLabelName());
883:       assertFalse(node0.isGetterDef());
884:       assertEquals(147493, node0.getSourcePosition());
885:       assertFalse(node0.isNE());
886:       assertFalse(node0.hasOneChild());
887:       assertFalse(node0.isHook());
888:       assertFalse(node0.isTry());
889:       assertFalse(node0.isScript());
890:       assertFalse(node0.isRegExp());
891:       assertEquals(36, node0.getLineno());
892:       assertFalse(node0.isBlock());
893:       assertTrue(node0.isString());
894:       assertFalse(node0.isThis());
895:       assertFalse(node0.isFor());
896:       assertEquals(0, node0.getChildCount());
897:       assertFalse(node0.isCatch());
898:       assertFalse(node0.isSetterDef());
899:       assertFalse(node0.isNull());
900:       assertFalse(node0.isVoid());
901:       assertFalse(node0.isStringKey());
902:       assertFalse(node0.isName());
903:       assertFalse(node0.isDebugger());
904:       assertFalse(node0.isParamList());
905:       assertFalse(node0.isTrue());
906:       assertFalse(node0.isArrayLit());
907:       assertFalse(node0.isNew());
908:       assertFalse(node0.isAdd());
909:       assertFalse(node0.isEmpty());
910:       assertFalse(node0.isDefaultCase());
911:       assertFalse(node0.isFunction());
912:       assertFalse(node0.isDo());
913:       assertEquals(40, node0.getType());
914:       assertFalse(node0.isVar());
915:       assertFalse(node0.isOr());
916:       assertFalse(node0.isContinue());
917:       assertFalse(node0.isDelProp());
918:       assertFalse(node0.isGetElem());
919:       assertFalse(node0.isExprResult());
920:       assertFalse(node0.isCall());
921:       assertFalse(node0.isTypeOf());
922:       assertFalse(node0.isDec());
923:       assertFalse(node0.hasChildren());
924:       assertFalse(node0.isComma());
925:       assertFalse(node0.isAssign());
926:       assertFalse(node0.isReturn());
927:       assertFalse(node0.isWhile());
928:       assertFalse(boolean2);
929:       
930:       boolean boolean3 = node0.isReturn();
931:       assertFalse(node0.equals((Object)node1));
932:       assertFalse(node0.equals((Object)node2));
933:       assertTrue(boolean3 == boolean2);
934:       assertTrue(boolean3 == boolean0);
935:       assertTrue(boolean3 == boolean1);
936:       assertSame(node0, node3);
937:       assertNotSame(node0, node1);
938:       assertFalse(node0.isInstanceOf());
939:       assertFalse(node0.isObjectLit());
940:       assertFalse(node0.isWith());
941:       assertFalse(node0.isGetProp());
942:       assertFalse(node0.isBreak());
943:       assertEquals(37, node0.getCharno());
944:       assertFalse(node0.isNot());
945:       assertFalse(node0.isAnd());
946:       assertFalse(node0.isFalse());
947:       assertFalse(node0.isInc());
948:       assertFalse(node0.isCast());
949:       assertFalse(node0.isAssignAdd());
950:       assertFalse(node0.isLabel());
951:       assertFalse(node0.isThrow());
952:       assertFalse(node0.hasMoreThanOneChild());
953:       assertFalse(node0.isIn());
954:       assertFalse(node0.isCase());
955:       assertFalse(node0.isNumber());
956:       assertFalse(node0.isSwitch());
957:       assertFalse(node0.isIf());
958:       assertFalse(node0.isLabelName());
959:       assertFalse(node0.isGetterDef());
960:       assertEquals(147493, node0.getSourcePosition());
961:       assertFalse(node0.isNE());
962:       assertFalse(node0.hasOneChild());
963:       assertFalse(node0.isHook());
964:       assertFalse(node0.isTry());
965:       assertFalse(node0.isScript());
966:       assertFalse(node0.isRegExp());
967:       assertEquals(36, node0.getLineno());
968:       assertFalse(node0.isBlock());
969:       assertTrue(node0.isString());
970:       assertFalse(node0.isThis());
971:       assertFalse(node0.isFor());
972:       assertEquals(0, node0.getChildCount());
973:       assertFalse(node0.isCatch());
974:       assertFalse(node0.isSetterDef());
975:       assertFalse(node0.isNull());
976:       assertFalse(node0.isVoid());
977:       assertFalse(node0.isStringKey());
978:       assertFalse(node0.isName());
979:       assertFalse(node0.isDebugger());
980:       assertFalse(node0.isParamList());
981:       assertFalse(node0.isTrue());
982:       assertFalse(node0.isArrayLit());
983:       assertFalse(node0.isNew());
984:       assertFalse(node0.isAdd());
985:       assertFalse(node0.isEmpty());
986:       assertFalse(node0.isDefaultCase());
987:       assertFalse(node0.isFunction());
988:       assertFalse(node0.isDo());
989:       assertEquals(40, node0.getType());
990:       assertFalse(node0.isVar());
991:       assertFalse(node0.isOr());
992:       assertFalse(node0.isContinue());
993:       assertFalse(node0.isDelProp());
994:       assertFalse(node0.isGetElem());
995:       assertFalse(node0.isExprResult());
996:       assertFalse(node0.isCall());
997:       assertFalse(node0.isTypeOf());
998:       assertFalse(node0.isDec());
999:       assertFalse(node0.hasChildren());
1000:       assertFalse(node0.isComma());
1001:       assertFalse(node0.isAssign());
1002:       assertFalse(node0.isReturn());
1003:       assertFalse(node0.isWhile());
1004:       assertFalse(boolean3);
1005:       
1006:       Node node4 = new Node(471, node3, node3, node0, node1);
1007:       assertFalse(node0.equals((Object)node1));
1008:       assertFalse(node0.equals((Object)node2));
1009:       assertFalse(node1.equals((Object)node3));
1010:       assertFalse(node1.equals((Object)node0));
1011:       assertFalse(node1.equals((Object)node2));
1012:       assertFalse(node2.equals((Object)node1));
1013:       assertFalse(node2.equals((Object)node3));
1014:       assertFalse(node2.equals((Object)node0));
1015:       assertFalse(node3.equals((Object)node2));
1016:       assertFalse(node3.equals((Object)node1));
1017:       assertFalse(node4.equals((Object)node1));
1018:       assertFalse(node4.equals((Object)node0));
1019:       assertFalse(node4.equals((Object)node3));
1020:       assertFalse(node4.equals((Object)node2));
1021:       assertNotNull(node4);
1022:       assertFalse(node0.isInstanceOf());
1023:       assertFalse(node0.isObjectLit());
1024:       assertFalse(node0.isWith());
1025:       assertFalse(node0.isGetProp());
1026:       assertFalse(node0.isBreak());
1027:       assertEquals(37, node0.getCharno());
1028:       assertFalse(node0.isNot());
1029:       assertFalse(node0.isAnd());
1030:       assertFalse(node0.isFalse());
1031:       assertFalse(node0.isInc());
1032:       assertFalse(node0.isCast());
1033:       assertFalse(node0.isAssignAdd());
1034:       assertFalse(node0.isLabel());
1035:       assertFalse(node0.isThrow());
1036:       assertFalse(node0.hasMoreThanOneChild());
1037:       assertFalse(node0.isIn());
1038:       assertFalse(node0.isCase());
1039:       assertFalse(node0.isNumber());
1040:       assertFalse(node0.isSwitch());
1041:       assertFalse(node0.isIf());
1042:       assertFalse(node0.isLabelName());
1043:       assertFalse(node0.isGetterDef());
1044:       assertEquals(147493, node0.getSourcePosition());
1045:       assertFalse(node0.isNE());
1046:       assertFalse(node0.hasOneChild());
1047:       assertFalse(node0.isHook());
1048:       assertFalse(node0.isTry());
1049:       assertFalse(node0.isScript());
1050:       assertFalse(node0.isRegExp());
1051:       assertEquals(36, node0.getLineno());
1052:       assertFalse(node0.isBlock());
1053:       assertTrue(node0.isString());
1054:       assertFalse(node0.isThis());
1055:       assertFalse(node0.isFor());
1056:       assertEquals(0, node0.getChildCount());
1057:       assertFalse(node0.isCatch());
1058:       assertFalse(node0.isSetterDef());
1059:       assertFalse(node0.isNull());
1060:       assertFalse(node0.isVoid());
1061:       assertFalse(node0.isStringKey());
1062:       assertFalse(node0.isName());
1063:       assertFalse(node0.isDebugger());
1064:       assertFalse(node0.isParamList());
1065:       assertFalse(node0.isTrue());
1066:       assertFalse(node0.isArrayLit());
1067:       assertFalse(node0.isNew());
1068:       assertFalse(node0.isAdd());
1069:       assertFalse(node0.isEmpty());
1070:       assertFalse(node0.isDefaultCase());
1071:       assertFalse(node0.isFunction());
1072:       assertFalse(node0.isDo());
1073:       assertEquals(40, node0.getType());
1074:       assertFalse(node0.isVar());
1075:       assertFalse(node0.isOr());
1076:       assertFalse(node0.isContinue());
1077:       assertFalse(node0.isDelProp());
1078:       assertFalse(node0.isGetElem());
1079:       assertFalse(node0.isExprResult());
1080:       assertFalse(node0.isCall());
1081:       assertFalse(node0.isTypeOf());
1082:       assertFalse(node0.isDec());
1083:       assertFalse(node0.hasChildren());
1084:       assertFalse(node0.isComma());
1085:       assertFalse(node0.isAssign());
1086:       assertFalse(node0.isReturn());
1087:       assertFalse(node0.isWhile());
1088:       assertEquals(0, node1.getChildCount());
1089:       assertFalse(node1.isParamList());
1090:       assertFalse(node1.isNull());
1091:       assertFalse(node1.isDefaultCase());
1092:       assertFalse(node1.isSetterDef());
1093:       assertFalse(node1.isAdd());
1094:       assertFalse(node1.isTry());
1095:       assertFalse(node1.isTrue());
1096:       assertFalse(node1.isBlock());
1097:       assertFalse(node1.isDelProp());
1098:       assertFalse(node1.isRegExp());
1099:       assertFalse(node1.isIf());
1100:       assertFalse(node1.isCatch());
1101:       assertFalse(node1.isCall());
1102:       assertFalse(node1.isVoid());
1103:       assertFalse(node1.isOr());
1104:       assertFalse(node1.isAssignAdd());
1105:       assertFalse(node1.hasMoreThanOneChild());
1106:       assertFalse(node1.isLabel());
1107:       assertFalse(node1.isDo());
1108:       assertFalse(node1.isEmpty());
1109:       assertFalse(node1.isGetterDef());
1110:       assertFalse(node1.isFor());
1111:       assertFalse(node1.isNumber());
1112:       assertFalse(node1.hasOneChild());
1113:       assertFalse(node1.isCase());
1114:       assertFalse(node1.isNew());
1115:       assertFalse(node1.isVar());
1116:       assertEquals((-1), node1.getCharno());
1117:       assertEquals(38, node1.getType());
1118:       assertFalse(node1.isLabelName());
1119:       assertFalse(node1.isStringKey());
1120:       assertFalse(node1.isSwitch());
1121:       assertFalse(node1.isArrayLit());
1122:       assertFalse(node1.isInstanceOf());
1123:       assertFalse(node1.isThis());
1124:       assertTrue(node1.isName());
1125:       assertFalse(node1.isComma());
1126:       assertFalse(node1.isObjectLit());
1127:       assertFalse(node1.isNot());
1128:       assertFalse(node1.isScript());
1129:       assertFalse(node1.isGetProp());
1130:       assertFalse(node1.isHook());
1131:       assertFalse(node1.isAssign());
1132:       assertFalse(node1.isTypeOf());
1133:       assertFalse(node1.isWith());
1134:       assertFalse(node1.isExprResult());
1135:       assertFalse(node1.isGetElem());
1136:       assertFalse(node1.isBreak());
1137:       assertFalse(node1.isReturn());
1138:       assertEquals((-1), node1.getLineno());
1139:       assertFalse(node1.isIn());
1140:       assertFalse(node1.isNE());
1141:       assertFalse(node1.isDec());
1142:       assertEquals((-1), node1.getSourcePosition());
1143:       assertFalse(node1.hasChildren());
1144:       assertFalse(node1.isWhile());
1145:       assertFalse(node1.isString());
1146:       assertFalse(node1.isInc());
1147:       assertFalse(node1.isFunction());
1148:       assertFalse(node1.isThrow());
1149:       assertFalse(node1.isDebugger());
1150:       assertFalse(node1.isFalse());
1151:       assertFalse(node1.isContinue());
1152:       assertFalse(node1.isAnd());
1153:       assertFalse(node1.isCast());
1154:       assertEquals(0, node2.getChildCount());
1155:       assertFalse(node2.isDefaultCase());
1156:       assertFalse(node2.isTrue());
1157:       assertFalse(node2.isDebugger());
1158:       assertFalse(node2.isSetterDef());
1159:       assertFalse(node2.isTry());
1160:       assertFalse(node2.isCall());
1161:       assertFalse(node2.isName());
1162:       assertFalse(node2.isDelProp());
1163:       assertFalse(node2.isIf());
1164:       assertFalse(node2.isBlock());
1165:       assertFalse(node2.isFor());
1166:       assertFalse(node2.isNull());
1167:       assertFalse(node2.isNE());
1168:       assertFalse(node2.isVoid());
1169:       assertFalse(node2.isRegExp());
1170:       assertFalse(node2.isCatch());
1171:       assertFalse(node2.hasMoreThanOneChild());
1172:       assertFalse(node2.isCase());
1173:       assertFalse(node2.isDo());
1174:       assertEquals(39, node2.getType());
1175:       assertFalse(node2.isAssignAdd());
1176:       assertFalse(node2.isOr());
1177:       assertFalse(node2.isNew());
1178:       assertFalse(node2.isGetterDef());
1179:       assertFalse(node2.isAdd());
1180:       assertFalse(node2.isEmpty());
1181:       assertFalse(node2.isLabelName());
1182:       assertFalse(node2.isArrayLit());
1183:       assertFalse(node2.isVar());
1184:       assertFalse(node2.isStringKey());
1185:       assertFalse(node2.isParamList());
1186:       assertFalse(node2.isSwitch());
1187:       assertFalse(node2.isLabel());
1188:       assertFalse(node2.isObjectLit());
1189:       assertFalse(node2.isAnd());
1190:       assertEquals(37, node2.getCharno());
1191:       assertFalse(node2.isNot());
1192:       assertFalse(node2.isGetProp());
1193:       assertFalse(node2.isScript());
1194:       assertFalse(node2.isGetElem());
1195:       assertFalse(node2.hasOneChild());
1196:       assertFalse(node2.isAssign());
1197:       assertFalse(node2.hasChildren());
1198:       assertFalse(node2.isHook());
1199:       assertFalse(node2.isExprResult());
1200:       assertFalse(node2.isThis());
1201:       assertFalse(node2.isTypeOf());
1202:       assertFalse(node2.isDec());
1203:       assertFalse(node2.isComma());
1204:       assertFalse(node2.isBreak());
1205:       assertFalse(node2.isWith());
1206:       assertEquals(36, node2.getLineno());
1207:       assertFalse(node2.isInstanceOf());
1208:       assertFalse(node2.isContinue());
1209:       assertFalse(node2.isWhile());
1210:       assertFalse(node2.isReturn());
1211:       assertFalse(node2.isInc());
1212:       assertEquals(147493, node2.getSourcePosition());
1213:       assertTrue(node2.isNumber());
1214:       assertFalse(node2.isString());
1215:       assertFalse(node2.isIn());
1216:       assertFalse(node2.isFalse());
1217:       assertFalse(node2.isThrow());
1218:       assertFalse(node2.isFunction());
1219:       assertFalse(node2.isCast());
1220:       assertFalse(node3.hasMoreThanOneChild());
1221:       assertFalse(node3.isContinue());
1222:       assertFalse(node3.isDo());
1223:       assertFalse(node3.isNumber());
1224:       assertFalse(node3.isOr());
1225:       assertFalse(node3.isCast());
1226:       assertFalse(node3.isVar());
1227:       assertFalse(node3.isLabelName());
1228:       assertFalse(node3.isNew());
1229:       assertFalse(node3.isAdd());
1230:       assertFalse(node3.isSetterDef());
1231:       assertFalse(node3.isAssignAdd());
1232:       assertFalse(node3.isLabel());
1233:       assertFalse(node3.isAnd());
1234:       assertFalse(node3.isObjectLit());
1235:       assertFalse(node3.isGetProp());
1236:       assertFalse(node3.isDebugger());
1237:       assertFalse(node3.isVoid());
1238:       assertFalse(node3.isNot());
1239:       assertFalse(node3.isNull());
1240:       assertFalse(node3.isTrue());
1241:       assertFalse(node3.isName());
1242:       assertFalse(node3.isBreak());
1243:       assertFalse(node3.isGetElem());
1244:       assertFalse(node3.isExprResult());
1245:       assertFalse(node3.isCall());
1246:       assertFalse(node3.isComma());
1247:       assertFalse(node3.isDec());
1248:       assertFalse(node3.isTypeOf());
1249:       assertFalse(node3.isAssign());
1250:       assertFalse(node3.isWhile());
1251:       assertFalse(node3.hasChildren());
1252:       assertFalse(node3.isReturn());
1253:       assertFalse(node3.isIn());
1254:       assertFalse(node3.isCase());
1255:       assertFalse(node3.isSwitch());
1256:       assertFalse(node3.isNE());
1257:       assertFalse(node3.isIf());
1258:       assertFalse(node3.isGetterDef());
1259:       assertFalse(node3.isDelProp());
1260:       assertEquals(147493, node3.getSourcePosition());
1261:       assertFalse(node3.isArrayLit());
1262:       assertFalse(node3.isFalse());
1263:       assertFalse(node3.isEmpty());
1264:       assertFalse(node3.isInc());
1265:       assertFalse(node3.isDefaultCase());
1266:       assertFalse(node3.isFunction());
1267:       assertFalse(node3.isThrow());
1268:       assertEquals(40, node3.getType());
1269:       assertFalse(node3.isCatch());
1270:       assertEquals(0, node3.getChildCount());
1271:       assertEquals(37, node3.getCharno());
1272:       assertFalse(node3.isWith());
1273:       assertFalse(node3.isInstanceOf());
1274:       assertFalse(node3.isScript());
1275:       assertFalse(node3.isParamList());
1276:       assertFalse(node3.isStringKey());
1277:       assertFalse(node3.hasOneChild());
1278:       assertFalse(node3.isTry());
1279:       assertFalse(node3.isThis());
1280:       assertEquals(36, node3.getLineno());
1281:       assertFalse(node3.isRegExp());
1282:       assertTrue(node3.isString());
1283:       assertFalse(node3.isHook());
1284:       assertFalse(node3.isBlock());
1285:       assertFalse(node3.isFor());
1286:       assertFalse(node4.isNew());
1287:       assertFalse(node4.isAdd());
1288:       assertFalse(node4.isCall());
1289:       assertFalse(node4.isName());
1290:       assertFalse(node4.isStringKey());
1291:       assertFalse(node4.isParamList());
1292:       assertFalse(node4.isNull());
1293:       assertEquals((-1), node4.getLineno());
1294:       assertFalse(node4.isCatch());
1295:       assertFalse(node4.isDec());
1296:       assertFalse(node4.isWhile());
1297:       assertFalse(node4.isAssign());
1298:       assertFalse(node4.isTypeOf());
1299:       assertFalse(node4.isRegExp());
1300:       assertFalse(node4.isReturn());
1301:       assertFalse(node4.isBlock());
1302:       assertFalse(node4.hasOneChild());
1303:       assertFalse(node4.isArrayLit());
1304:       assertFalse(node4.isTry());
1305:       assertFalse(node4.isGetElem());
1306:       assertFalse(node4.isScript());
1307:       assertFalse(node4.isExprResult());
1308:       assertFalse(node4.isEmpty());
1309:       assertFalse(node4.isNumber());
1310:       assertFalse(node4.isLabelName());
1311:       assertFalse(node4.isGetterDef());
1312:       assertFalse(node4.isVoid());
1313:       assertFalse(node4.isDelProp());
1314:       assertFalse(node4.isTrue());
1315:       assertFalse(node4.isAssignAdd());
1316:       assertFalse(node4.isOr());
1317:       assertFalse(node4.isDefaultCase());
1318:       assertFalse(node4.isDo());
1319:       assertFalse(node4.isLabel());
1320:       assertFalse(node4.isVar());
1321:       assertFalse(node4.isHook());
1322:       assertFalse(node4.isFalse());
1323:       assertFalse(node4.isInc());
1324:       assertTrue(node4.hasMoreThanOneChild());
1325:       assertFalse(node4.isBreak());
1326:       assertFalse(node4.isString());
1327:       assertFalse(node4.isSwitch());
1328:       assertEquals((-1), node4.getCharno());
1329:       assertEquals(471, node4.getType());
1330:       assertFalse(node4.isInstanceOf());
1331:       assertFalse(node4.isObjectLit());
1332:       assertFalse(node4.isGetProp());
1333:       assertFalse(node4.isCase());
1334:       assertTrue(node4.hasChildren());
1335:       assertFalse(node4.isWith());
1336:       assertFalse(node4.isComma());
1337:       assertFalse(node4.isThis());
1338:       assertFalse(node4.isFor());
1339:       assertFalse(node4.isCast());
1340:       assertFalse(node4.isIf());
1341:       assertEquals((-1), node4.getSourcePosition());
1342:       assertFalse(node4.isNot());
1343:       assertFalse(node4.isDebugger());
1344:       assertFalse(node4.isAnd());
1345:       assertFalse(node4.isNE());
1346:       assertFalse(node4.isIn());
1347:       assertFalse(node4.isContinue());
1348:       assertFalse(node4.isSetterDef());
1349:       assertFalse(node4.isFunction());
1350:       assertFalse(node4.isThrow());
1351:       assertEquals(2, node4.getChildCount());
1352:       
1353:       String string0 = node2.toString(false, false, false);
1354:       assertFalse(node2.equals((Object)node1));
1355:       assertFalse(node2.equals((Object)node3));
1356:       assertFalse(node2.equals((Object)node0));
1357:       assertFalse(node2.equals((Object)node4));
1358:       assertNotNull(string0);
1359:       assertEquals(0, node2.getChildCount());
1360:       assertFalse(node2.isDefaultCase());
1361:       assertFalse(node2.isTrue());
1362:       assertFalse(node2.isDebugger());
1363:       assertFalse(node2.isSetterDef());
1364:       assertFalse(node2.isTry());
1365:       assertFalse(node2.isCall());
1366:       assertFalse(node2.isName());
1367:       assertFalse(node2.isDelProp());
1368:       assertFalse(node2.isIf());
1369:       assertFalse(node2.isBlock());
1370:       assertFalse(node2.isFor());
1371:       assertFalse(node2.isNull());
1372:       assertFalse(node2.isNE());
1373:       assertFalse(node2.isVoid());
1374:       assertFalse(node2.isRegExp());
1375:       assertFalse(node2.isCatch());
1376:       assertFalse(node2.hasMoreThanOneChild());
1377:       assertFalse(node2.isCase());
1378:       assertFalse(node2.isDo());
1379:       assertEquals(39, node2.getType());
1380:       assertFalse(node2.isAssignAdd());
1381:       assertFalse(node2.isOr());
1382:       assertFalse(node2.isNew());
1383:       assertFalse(node2.isGetterDef());
1384:       assertFalse(node2.isAdd());
1385:       assertFalse(node2.isEmpty());
1386:       assertFalse(node2.isLabelName());
1387:       assertFalse(node2.isArrayLit());
1388:       assertFalse(node2.isVar());
1389:       assertFalse(node2.isStringKey());
1390:       assertFalse(node2.isParamList());
1391:       assertFalse(node2.isSwitch());
1392:       assertFalse(node2.isLabel());
1393:       assertFalse(node2.isObjectLit());
1394:       assertFalse(node2.isAnd());
1395:       assertEquals(37, node2.getCharno());
1396:       assertFalse(node2.isNot());
1397:       assertFalse(node2.isGetProp());
1398:       assertFalse(node2.isScript());
1399:       assertFalse(node2.isGetElem());
1400:       assertFalse(node2.hasOneChild());
1401:       assertFalse(node2.isAssign());
1402:       assertFalse(node2.hasChildren());
1403:       assertFalse(node2.isHook());
1404:       assertFalse(node2.isExprResult());
1405:       assertFalse(node2.isThis());
1406:       assertFalse(node2.isTypeOf());
1407:       assertFalse(node2.isDec());
1408:       assertFalse(node2.isComma());
1409:       assertFalse(node2.isBreak());
1410:       assertFalse(node2.isWith());
1411:       assertEquals(36, node2.getLineno());
1412:       assertFalse(node2.isInstanceOf());
1413:       assertFalse(node2.isContinue());
1414:       assertFalse(node2.isWhile());
1415:       assertFalse(node2.isReturn());
1416:       assertFalse(node2.isInc());
1417:       assertEquals(147493, node2.getSourcePosition());
1418:       assertTrue(node2.isNumber());
1419:       assertFalse(node2.isString());
1420:       assertFalse(node2.isIn());
1421:       assertFalse(node2.isFalse());
1422:       assertFalse(node2.isThrow());
1423:       assertFalse(node2.isFunction());
1424:       assertFalse(node2.isCast());
1425:       assertEquals("NUMBER 12.0", string0);
1426:       
1427:       boolean boolean4 = node3.isTrue();
1428:       assertFalse(node0.equals((Object)node1));
1429:       assertFalse(node0.equals((Object)node2));
1430:       assertFalse(node0.equals((Object)node4));
1431:       assertFalse(node2.equals((Object)node1));
1432:       assertFalse(node2.equals((Object)node3));
1433:       assertFalse(node2.equals((Object)node0));
1434:       assertFalse(node2.equals((Object)node4));
1435:       assertFalse(node3.equals((Object)node4));
1436:       assertFalse(node3.equals((Object)node2));
1437:       assertFalse(node3.equals((Object)node1));
1438:       assertTrue(boolean4 == boolean1);
1439:       assertTrue(boolean4 == boolean0);
1440:       assertTrue(boolean4 == boolean3);
1441:       assertTrue(boolean4 == boolean2);
1442:       assertSame(node0, node3);
1443:       assertNotSame(node0, node1);
1444:       assertNotSame(node3, node1);
1445:       assertSame(node3, node0);
1446:       assertFalse(node0.isInstanceOf());
1447:       assertFalse(node0.isObjectLit());
1448:       assertFalse(node0.isWith());
1449:       assertFalse(node0.isGetProp());
1450:       assertFalse(node0.isBreak());
1451:       assertEquals(37, node0.getCharno());
1452:       assertFalse(node0.isNot());
1453:       assertFalse(node0.isAnd());
1454:       assertFalse(node0.isFalse());
1455:       assertFalse(node0.isInc());
1456:       assertFalse(node0.isCast());
1457:       assertFalse(node0.isAssignAdd());
1458:       assertFalse(node0.isLabel());
1459:       assertFalse(node0.isThrow());
1460:       assertFalse(node0.hasMoreThanOneChild());
1461:       assertFalse(node0.isIn());
1462:       assertFalse(node0.isCase());
1463:       assertFalse(node0.isNumber());
1464:       assertFalse(node0.isSwitch());
1465:       assertFalse(node0.isIf());
1466:       assertFalse(node0.isLabelName());
1467:       assertFalse(node0.isGetterDef());
1468:       assertEquals(147493, node0.getSourcePosition());
1469:       assertFalse(node0.isNE());
1470:       assertFalse(node0.hasOneChild());
1471:       assertFalse(node0.isHook());
1472:       assertFalse(node0.isTry());
1473:       assertFalse(node0.isScript());
1474:       assertFalse(node0.isRegExp());
1475:       assertEquals(36, node0.getLineno());
1476:       assertFalse(node0.isBlock());
1477:       assertTrue(node0.isString());
1478:       assertFalse(node0.isThis());
1479:       assertFalse(node0.isFor());
1480:       assertEquals(0, node0.getChildCount());
1481:       assertFalse(node0.isCatch());
1482:       assertFalse(node0.isSetterDef());
1483:       assertFalse(node0.isNull());
1484:       assertFalse(node0.isVoid());
1485:       assertFalse(node0.isStringKey());
1486:       assertFalse(node0.isName());
1487:       assertFalse(node0.isDebugger());
1488:       assertFalse(node0.isParamList());
1489:       assertFalse(node0.isTrue());
1490:       assertFalse(node0.isArrayLit());
1491:       assertFalse(node0.isNew());
1492:       assertFalse(node0.isAdd());
1493:       assertFalse(node0.isEmpty());
1494:       assertFalse(node0.isDefaultCase());
1495:       assertFalse(node0.isFunction());
1496:       assertFalse(node0.isDo());
1497:       assertEquals(40, node0.getType());
1498:       assertFalse(node0.isVar());
1499:       assertFalse(node0.isOr());
1500:       assertFalse(node0.isContinue());
1501:       assertFalse(node0.isDelProp());
1502:       assertFalse(node0.isGetElem());
1503:       assertFalse(node0.isExprResult());
1504:       assertFalse(node0.isCall());
1505:       assertFalse(node0.isTypeOf());
1506:       assertFalse(node0.isDec());
1507:       assertFalse(node0.hasChildren());
1508:       assertFalse(node0.isComma());
1509:       assertFalse(node0.isAssign());
1510:       assertFalse(node0.isReturn());
1511:       assertFalse(node0.isWhile());
1512:       assertEquals(0, node2.getChildCount());
1513:       assertFalse(node2.isDefaultCase());
1514:       assertFalse(node2.isTrue());
1515:       assertFalse(node2.isDebugger());
1516:       assertFalse(node2.isSetterDef());
1517:       assertFalse(node2.isTry());
1518:       assertFalse(node2.isCall());
1519:       assertFalse(node2.isName());
1520:       assertFalse(node2.isDelProp());
1521:       assertFalse(node2.isIf());
1522:       assertFalse(node2.isBlock());
1523:       assertFalse(node2.isFor());
1524:       assertFalse(node2.isNull());
1525:       assertFalse(node2.isNE());
1526:       assertFalse(node2.isVoid());
1527:       assertFalse(node2.isRegExp());
1528:       assertFalse(node2.isCatch());
1529:       assertFalse(node2.hasMoreThanOneChild());
1530:       assertFalse(node2.isCase());
1531:       assertFalse(node2.isDo());
1532:       assertEquals(39, node2.getType());
1533:       assertFalse(node2.isAssignAdd());
1534:       assertFalse(node2.isOr());
1535:       assertFalse(node2.isNew());
1536:       assertFalse(node2.isGetterDef());
1537:       assertFalse(node2.isAdd());
1538:       assertFalse(node2.isEmpty());
1539:       assertFalse(node2.isLabelName());
1540:       assertFalse(node2.isArrayLit());
1541:       assertFalse(node2.isVar());
1542:       assertFalse(node2.isStringKey());
1543:       assertFalse(node2.isParamList());
1544:       assertFalse(node2.isSwitch());
1545:       assertFalse(node2.isLabel());
1546:       assertFalse(node2.isObjectLit());
1547:       assertFalse(node2.isAnd());
1548:       assertEquals(37, node2.getCharno());
1549:       assertFalse(node2.isNot());
1550:       assertFalse(node2.isGetProp());
1551:       assertFalse(node2.isScript());
1552:       assertFalse(node2.isGetElem());
1553:       assertFalse(node2.hasOneChild());
1554:       assertFalse(node2.isAssign());
1555:       assertFalse(node2.hasChildren());
1556:       assertFalse(node2.isHook());
1557:       assertFalse(node2.isExprResult());
1558:       assertFalse(node2.isThis());
1559:       assertFalse(node2.isTypeOf());
1560:       assertFalse(node2.isDec());
1561:       assertFalse(node2.isComma());
1562:       assertFalse(node2.isBreak());
1563:       assertFalse(node2.isWith());
1564:       assertEquals(36, node2.getLineno());
1565:       assertFalse(node2.isInstanceOf());
1566:       assertFalse(node2.isContinue());
1567:       assertFalse(node2.isWhile());
1568:       assertFalse(node2.isReturn());
1569:       assertFalse(node2.isInc());
1570:       assertEquals(147493, node2.getSourcePosition());
1571:       assertTrue(node2.isNumber());
1572:       assertFalse(node2.isString());
1573:       assertFalse(node2.isIn());
1574:       assertFalse(node2.isFalse());
1575:       assertFalse(node2.isThrow());
1576:       assertFalse(node2.isFunction());
1577:       assertFalse(node2.isCast());
1578:       assertFalse(node3.hasMoreThanOneChild());
1579:       assertFalse(node3.isContinue());
1580:       assertFalse(node3.isDo());
1581:       assertFalse(node3.isNumber());
1582:       assertFalse(node3.isOr());
1583:       assertFalse(node3.isCast());
1584:       assertFalse(node3.isVar());
1585:       assertFalse(node3.isLabelName());
1586:       assertFalse(node3.isNew());
1587:       assertFalse(node3.isAdd());
1588:       assertFalse(node3.isSetterDef());
1589:       assertFalse(node3.isAssignAdd());
1590:       assertFalse(node3.isLabel());
1591:       assertFalse(node3.isAnd());
1592:       assertFalse(node3.isObjectLit());
1593:       assertFalse(node3.isGetProp());
1594:       assertFalse(node3.isDebugger());
1595:       assertFalse(node3.isVoid());
1596:       assertFalse(node3.isNot());
1597:       assertFalse(node3.isNull());
1598:       assertFalse(node3.isTrue());
1599:       assertFalse(node3.isName());
1600:       assertFalse(node3.isBreak());
1601:       assertFalse(node3.isGetElem());
1602:       assertFalse(node3.isExprResult());
1603:       assertFalse(node3.isCall());
1604:       assertFalse(node3.isComma());
1605:       assertFalse(node3.isDec());
1606:       assertFalse(node3.isTypeOf());
1607:       assertFalse(node3.isAssign());
1608:       assertFalse(node3.isWhile());
1609:       assertFalse(node3.hasChildren());
1610:       assertFalse(node3.isReturn());
1611:       assertFalse(node3.isIn());
1612:       assertFalse(node3.isCase());
1613:       assertFalse(node3.isSwitch());
1614:       assertFalse(node3.isNE());
1615:       assertFalse(node3.isIf());
1616:       assertFalse(node3.isGetterDef());
1617:       assertFalse(node3.isDelProp());
1618:       assertEquals(147493, node3.getSourcePosition());
1619:       assertFalse(node3.isArrayLit());
1620:       assertFalse(node3.isFalse());
1621:       assertFalse(node3.isEmpty());
1622:       assertFalse(node3.isInc());
1623:       assertFalse(node3.isDefaultCase());
1624:       assertFalse(node3.isFunction());
1625:       assertFalse(node3.isThrow());
1626:       assertEquals(40, node3.getType());
1627:       assertFalse(node3.isCatch());
1628:       assertEquals(0, node3.getChildCount());
1629:       assertEquals(37, node3.getCharno());
1630:       assertFalse(node3.isWith());
1631:       assertFalse(node3.isInstanceOf());
1632:       assertFalse(node3.isScript());
1633:       assertFalse(node3.isParamList());
1634:       assertFalse(node3.isStringKey());
1635:       assertFalse(node3.hasOneChild());
1636:       assertFalse(node3.isTry());
1637:       assertFalse(node3.isThis());
1638:       assertEquals(36, node3.getLineno());
1639:       assertFalse(node3.isRegExp());
1640:       assertTrue(node3.isString());
1641:       assertFalse(node3.isHook());
1642:       assertFalse(node3.isBlock());
1643:       assertFalse(node3.isFor());
1644:       assertFalse(boolean4);
1645:       
1646:       Iterable<Node> iterable0 = node4.children();
1647:       assertFalse(node0.equals((Object)node1));
1648:       assertFalse(node0.equals((Object)node2));
1649:       assertFalse(node0.equals((Object)node4));
1650:       assertFalse(node1.equals((Object)node4));
1651:       assertFalse(node1.equals((Object)node3));
1652:       assertFalse(node1.equals((Object)node0));
1653:       assertFalse(node1.equals((Object)node2));
1654:       assertFalse(node2.equals((Object)node1));
1655:       assertFalse(node2.equals((Object)node3));
1656:       assertFalse(node2.equals((Object)node0));
1657:       assertFalse(node2.equals((Object)node4));
1658:       assertFalse(node3.equals((Object)node4));
1659:       assertFalse(node3.equals((Object)node2));
1660:       assertFalse(node3.equals((Object)node1));
1661:       assertFalse(node4.equals((Object)node1));
1662:       assertFalse(node4.equals((Object)node0));
1663:       assertFalse(node4.equals((Object)node3));
1664:       assertFalse(node4.equals((Object)node2));
1665:       assertSame(node0, node3);
1666:       assertNotSame(node0, node1);
1667:       assertNotSame(node1, node3);
1668:       assertNotSame(node1, node0);
1669:       assertNotSame(node3, node1);
1670:       assertSame(node3, node0);
1671:       assertNotNull(iterable0);
1672:       assertFalse(node0.isInstanceOf());
1673:       assertFalse(node0.isObjectLit());
1674:       assertFalse(node0.isWith());
1675:       assertFalse(node0.isGetProp());
1676:       assertFalse(node0.isBreak());
1677:       assertEquals(37, node0.getCharno());
1678:       assertFalse(node0.isNot());
1679:       assertFalse(node0.isAnd());
1680:       assertFalse(node0.isFalse());
1681:       assertFalse(node0.isInc());
1682:       assertFalse(node0.isCast());
1683:       assertFalse(node0.isAssignAdd());
1684:       assertFalse(node0.isLabel());
1685:       assertFalse(node0.isThrow());
1686:       assertFalse(node0.hasMoreThanOneChild());
1687:       assertFalse(node0.isIn());
1688:       assertFalse(node0.isCase());
1689:       assertFalse(node0.isNumber());
1690:       assertFalse(node0.isSwitch());
1691:       assertFalse(node0.isIf());
1692:       assertFalse(node0.isLabelName());
1693:       assertFalse(node0.isGetterDef());
1694:       assertEquals(147493, node0.getSourcePosition());
1695:       assertFalse(node0.isNE());
1696:       assertFalse(node0.hasOneChild());
1697:       assertFalse(node0.isHook());
1698:       assertFalse(node0.isTry());
1699:       assertFalse(node0.isScript());
1700:       assertFalse(node0.isRegExp());
1701:       assertEquals(36, node0.getLineno());
1702:       assertFalse(node0.isBlock());
1703:       assertTrue(node0.isString());
1704:       assertFalse(node0.isThis());
1705:       assertFalse(node0.isFor());
1706:       assertEquals(0, node0.getChildCount());
1707:       assertFalse(node0.isCatch());
1708:       assertFalse(node0.isSetterDef());
1709:       assertFalse(node0.isNull());
1710:       assertFalse(node0.isVoid());
1711:       assertFalse(node0.isStringKey());
1712:       assertFalse(node0.isName());
1713:       assertFalse(node0.isDebugger());
1714:       assertFalse(node0.isParamList());
1715:       assertFalse(node0.isTrue());
1716:       assertFalse(node0.isArrayLit());
1717:       assertFalse(node0.isNew());
1718:       assertFalse(node0.isAdd());
1719:       assertFalse(node0.isEmpty());
1720:       assertFalse(node0.isDefaultCase());
1721:       assertFalse(node0.isFunction());
1722:       assertFalse(node0.isDo());
1723:       assertEquals(40, node0.getType());
1724:       assertFalse(node0.isVar());
1725:       assertFalse(node0.isOr());
1726:       assertFalse(node0.isContinue());
1727:       assertFalse(node0.isDelProp());
1728:       assertFalse(node0.isGetElem());
1729:       assertFalse(node0.isExprResult());
1730:       assertFalse(node0.isCall());
1731:       assertFalse(node0.isTypeOf());
1732:       assertFalse(node0.isDec());
1733:       assertFalse(node0.hasChildren());
1734:       assertFalse(node0.isComma());
1735:       assertFalse(node0.isAssign());
1736:       assertFalse(node0.isReturn());
1737:       assertFalse(node0.isWhile());
1738:       assertEquals(0, node1.getChildCount());
1739:       assertFalse(node1.isParamList());
1740:       assertFalse(node1.isNull());
1741:       assertFalse(node1.isDefaultCase());
1742:       assertFalse(node1.isSetterDef());
1743:       assertFalse(node1.isAdd());
1744:       assertFalse(node1.isTry());
1745:       assertFalse(node1.isTrue());
1746:       assertFalse(node1.isBlock());
1747:       assertFalse(node1.isDelProp());
1748:       assertFalse(node1.isRegExp());
1749:       assertFalse(node1.isIf());
1750:       assertFalse(node1.isCatch());
1751:       assertFalse(node1.isCall());
1752:       assertFalse(node1.isVoid());
1753:       assertFalse(node1.isOr());
1754:       assertFalse(node1.isAssignAdd());
1755:       assertFalse(node1.hasMoreThanOneChild());
1756:       assertFalse(node1.isLabel());
1757:       assertFalse(node1.isDo());
1758:       assertFalse(node1.isEmpty());
1759:       assertFalse(node1.isGetterDef());
1760:       assertFalse(node1.isFor());
1761:       assertFalse(node1.isNumber());
1762:       assertFalse(node1.hasOneChild());
1763:       assertFalse(node1.isCase());
1764:       assertFalse(node1.isNew());
1765:       assertFalse(node1.isVar());
1766:       assertEquals((-1), node1.getCharno());
1767:       assertEquals(38, node1.getType());
1768:       assertFalse(node1.isLabelName());
1769:       assertFalse(node1.isStringKey());
1770:       assertFalse(node1.isSwitch());
1771:       assertFalse(node1.isArrayLit());
1772:       assertFalse(node1.isInstanceOf());
1773:       assertFalse(node1.isThis());
1774:       assertTrue(node1.isName());
1775:       assertFalse(node1.isComma());
1776:       assertFalse(node1.isObjectLit());
1777:       assertFalse(node1.isNot());
1778:       assertFalse(node1.isScript());
1779:       assertFalse(node1.isGetProp());
1780:       assertFalse(node1.isHook());
1781:       assertFalse(node1.isAssign());
1782:       assertFalse(node1.isTypeOf());
1783:       assertFalse(node1.isWith());
1784:       assertFalse(node1.isExprResult());
1785:       assertFalse(node1.isGetElem());
1786:       assertFalse(node1.isBreak());
1787:       assertFalse(node1.isReturn());
1788:       assertEquals((-1), node1.getLineno());
1789:       assertFalse(node1.isIn());
1790:       assertFalse(node1.isNE());
1791:       assertFalse(node1.isDec());
1792:       assertEquals((-1), node1.getSourcePosition());
1793:       assertFalse(node1.hasChildren());
1794:       assertFalse(node1.isWhile());
1795:       assertFalse(node1.isString());
1796:       assertFalse(node1.isInc());
1797:       assertFalse(node1.isFunction());
1798:       assertFalse(node1.isThrow());
1799:       assertFalse(node1.isDebugger());
1800:       assertFalse(node1.isFalse());
1801:       assertFalse(node1.isContinue());
1802:       assertFalse(node1.isAnd());
1803:       assertFalse(node1.isCast());
1804:       assertEquals(0, node2.getChildCount());
1805:       assertFalse(node2.isDefaultCase());
1806:       assertFalse(node2.isTrue());
1807:       assertFalse(node2.isDebugger());
1808:       assertFalse(node2.isSetterDef());
1809:       assertFalse(node2.isTry());
1810:       assertFalse(node2.isCall());
1811:       assertFalse(node2.isName());
1812:       assertFalse(node2.isDelProp());
1813:       assertFalse(node2.isIf());
1814:       assertFalse(node2.isBlock());
1815:       assertFalse(node2.isFor());
1816:       assertFalse(node2.isNull());
1817:       assertFalse(node2.isNE());
1818:       assertFalse(node2.isVoid());
1819:       assertFalse(node2.isRegExp());
1820:       assertFalse(node2.isCatch());
1821:       assertFalse(node2.hasMoreThanOneChild());
1822:       assertFalse(node2.isCase());
1823:       assertFalse(node2.isDo());
1824:       assertEquals(39, node2.getType());
1825:       assertFalse(node2.isAssignAdd());
1826:       assertFalse(node2.isOr());
1827:       assertFalse(node2.isNew());
1828:       assertFalse(node2.isGetterDef());
1829:       assertFalse(node2.isAdd());
1830:       assertFalse(node2.isEmpty());
1831:       assertFalse(node2.isLabelName());
1832:       assertFalse(node2.isArrayLit());
1833:       assertFalse(node2.isVar());
1834:       assertFalse(node2.isStringKey());
1835:       assertFalse(node2.isParamList());
1836:       assertFalse(node2.isSwitch());
1837:       assertFalse(node2.isLabel());
1838:       assertFalse(node2.isObjectLit());
1839:       assertFalse(node2.isAnd());
1840:       assertEquals(37, node2.getCharno());
1841:       assertFalse(node2.isNot());
1842:       assertFalse(node2.isGetProp());
1843:       assertFalse(node2.isScript());
1844:       assertFalse(node2.isGetElem());
1845:       assertFalse(node2.hasOneChild());
1846:       assertFalse(node2.isAssign());
1847:       assertFalse(node2.hasChildren());
1848:       assertFalse(node2.isHook());
1849:       assertFalse(node2.isExprResult());
1850:       assertFalse(node2.isThis());
1851:       assertFalse(node2.isTypeOf());
1852:       assertFalse(node2.isDec());
1853:       assertFalse(node2.isComma());
1854:       assertFalse(node2.isBreak());
1855:       assertFalse(node2.isWith());
1856:       assertEquals(36, node2.getLineno());
1857:       assertFalse(node2.isInstanceOf());
1858:       assertFalse(node2.isContinue());
1859:       assertFalse(node2.isWhile());
1860:       assertFalse(node2.isReturn());
1861:       assertFalse(node2.isInc());
1862:       assertEquals(147493, node2.getSourcePosition());
1863:       assertTrue(node2.isNumber());
1864:       assertFalse(node2.isString());
1865:       assertFalse(node2.isIn());
1866:       assertFalse(node2.isFalse());
1867:       assertFalse(node2.isThrow());
1868:       assertFalse(node2.isFunction());
1869:       assertFalse(node2.isCast());
1870:       assertFalse(node3.hasMoreThanOneChild());
1871:       assertFalse(node3.isContinue());
1872:       assertFalse(node3.isDo());
1873:       assertFalse(node3.isNumber());
1874:       assertFalse(node3.isOr());
1875:       assertFalse(node3.isCast());
1876:       assertFalse(node3.isVar());
1877:       assertFalse(node3.isLabelName());
1878:       assertFalse(node3.isNew());
1879:       assertFalse(node3.isAdd());
1880:       assertFalse(node3.isSetterDef());
1881:       assertFalse(node3.isAssignAdd());
1882:       assertFalse(node3.isLabel());
1883:       assertFalse(node3.isAnd());
1884:       assertFalse(node3.isObjectLit());
1885:       assertFalse(node3.isGetProp());
1886:       assertFalse(node3.isDebugger());
1887:       assertFalse(node3.isVoid());
1888:       assertFalse(node3.isNot());
1889:       assertFalse(node3.isNull());
1890:       assertFalse(node3.isTrue());
1891:       assertFalse(node3.isName());
1892:       assertFalse(node3.isBreak());
1893:       assertFalse(node3.isGetElem());
1894:       assertFalse(node3.isExprResult());
1895:       assertFalse(node3.isCall());
1896:       assertFalse(node3.isComma());
1897:       assertFalse(node3.isDec());
1898:       assertFalse(node3.isTypeOf());
1899:       assertFalse(node3.isAssign());
1900:       assertFalse(node3.isWhile());
1901:       assertFalse(node3.hasChildren());
1902:       assertFalse(node3.isReturn());
1903:       assertFalse(node3.isIn());
1904:       assertFalse(node3.isCase());
1905:       assertFalse(node3.isSwitch());
1906:       assertFalse(node3.isNE());
1907:       assertFalse(node3.isIf());
1908:       assertFalse(node3.isGetterDef());
1909:       assertFalse(node3.isDelProp());
1910:       assertEquals(147493, node3.getSourcePosition());
1911:       assertFalse(node3.isArrayLit());
1912:       assertFalse(node3.isFalse());
1913:       assertFalse(node3.isEmpty());
1914:       assertFalse(node3.isInc());
1915:       assertFalse(node3.isDefaultCase());
1916:       assertFalse(node3.isFunction());
1917:       assertFalse(node3.isThrow());
1918:       assertEquals(40, node3.getType());
1919:       assertFalse(node3.isCatch());
1920:       assertEquals(0, node3.getChildCount());
1921:       assertEquals(37, node3.getCharno());
1922:       assertFalse(node3.isWith());
1923:       assertFalse(node3.isInstanceOf());
1924:       assertFalse(node3.isScript());
1925:       assertFalse(node3.isParamList());
1926:       assertFalse(node3.isStringKey());
1927:       assertFalse(node3.hasOneChild());
1928:       assertFalse(node3.isTry());
1929:       assertFalse(node3.isThis());
1930:       assertEquals(36, node3.getLineno());
1931:       assertFalse(node3.isRegExp());
1932:       assertTrue(node3.isString());
1933:       assertFalse(node3.isHook());
1934:       assertFalse(node3.isBlock());
1935:       assertFalse(node3.isFor());
1936:       assertFalse(node4.isNew());
1937:       assertFalse(node4.isAdd());
1938:       assertFalse(node4.isCall());
1939:       assertFalse(node4.isName());
1940:       assertFalse(node4.isStringKey());
1941:       assertFalse(node4.isParamList());
1942:       assertFalse(node4.isNull());
1943:       assertEquals((-1), node4.getLineno());
1944:       assertFalse(node4.isCatch());
1945:       assertFalse(node4.isDec());
1946:       assertFalse(node4.isWhile());
1947:       assertFalse(node4.isAssign());
1948:       assertFalse(node4.isTypeOf());
1949:       assertFalse(node4.isRegExp());
1950:       assertFalse(node4.isReturn());
1951:       assertFalse(node4.isBlock());
1952:       assertFalse(node4.hasOneChild());
1953:       assertFalse(node4.isArrayLit());
1954:       assertFalse(node4.isTry());
1955:       assertFalse(node4.isGetElem());
1956:       assertFalse(node4.isScript());
1957:       assertFalse(node4.isExprResult());
1958:       assertFalse(node4.isEmpty());
1959:       assertFalse(node4.isNumber());
1960:       assertFalse(node4.isLabelName());
1961:       assertFalse(node4.isGetterDef());
1962:       assertFalse(node4.isVoid());
1963:       assertFalse(node4.isDelProp());
1964:       assertFalse(node4.isTrue());
1965:       assertFalse(node4.isAssignAdd());
1966:       assertFalse(node4.isOr());
1967:       assertFalse(node4.isDefaultCase());
1968:       assertFalse(node4.isDo());
1969:       assertFalse(node4.isLabel());
1970:       assertFalse(node4.isVar());
1971:       assertFalse(node4.isHook());
1972:       assertFalse(node4.isFalse());
1973:       assertFalse(node4.isInc());
1974:       assertTrue(node4.hasMoreThanOneChild());
1975:       assertFalse(node4.isBreak());
1976:       assertFalse(node4.isString());
1977:       assertFalse(node4.isSwitch());
1978:       assertEquals((-1), node4.getCharno());
1979:       assertEquals(471, node4.getType());
1980:       assertFalse(node4.isInstanceOf());
1981:       assertFalse(node4.isObjectLit());
1982:       assertFalse(node4.isGetProp());
1983:       assertFalse(node4.isCase());
1984:       assertTrue(node4.hasChildren());
1985:       assertFalse(node4.isWith());
1986:       assertFalse(node4.isComma());
1987:       assertFalse(node4.isThis());
1988:       assertFalse(node4.isFor());
1989:       assertFalse(node4.isCast());
1990:       assertFalse(node4.isIf());
1991:       assertEquals((-1), node4.getSourcePosition());
1992:       assertFalse(node4.isNot());
1993:       assertFalse(node4.isDebugger());
1994:       assertFalse(node4.isAnd());
1995:       assertFalse(node4.isNE());
1996:       assertFalse(node4.isIn());
1997:       assertFalse(node4.isContinue());
1998:       assertFalse(node4.isSetterDef());
1999:       assertFalse(node4.isFunction());
2000:       assertFalse(node4.isThrow());
2001:       assertEquals(2, node4.getChildCount());
2002:       
2003:       Node node5 = Node.newString(117, "", (-1049), 40);
2004:       assertFalse(node5.equals((Object)node3));
2005:       assertFalse(node5.equals((Object)node0));
2006:       assertFalse(node5.equals((Object)node4));
2007:       assertFalse(node5.equals((Object)node2));
2008:       assertFalse(node5.equals((Object)node1));
2009:       assertNotSame(node5, node3);
2010:       assertNotSame(node5, node0);
2011:       assertNotSame(node5, node1);
2012:       assertNotNull(node5);
2013:       assertFalse(node5.isAssignAdd());
2014:       assertFalse(node5.isOr());
2015:       assertFalse(node5.isTypeOf());
2016:       assertFalse(node5.isNumber());
2017:       assertEquals((-1), node5.getLineno());
2018:       assertFalse(node5.isGetElem());
2019:       assertFalse(node5.isAssign());
2020:       assertFalse(node5.hasMoreThanOneChild());
2021:       assertFalse(node5.isDo());
2022:       assertFalse(node5.hasChildren());
2023:       assertFalse(node5.isDec());
2024:       assertFalse(node5.isWhile());
2025:       assertFalse(node5.isLabel());
2026:       assertFalse(node5.isReturn());
2027:       assertFalse(node5.isNew());
2028:       assertFalse(node5.isAdd());
2029:       assertFalse(node5.isExprResult());
2030:       assertFalse(node5.isCall());
2031:       assertFalse(node5.isName());
2032:       assertFalse(node5.isNull());
2033:       assertFalse(node5.isParamList());
2034:       assertFalse(node5.isInstanceOf());
2035:       assertFalse(node5.isCatch());
2036:       assertFalse(node5.isWith());
2037:       assertFalse(node5.isDefaultCase());
2038:       assertEquals(0, node5.getChildCount());
2039:       assertFalse(node5.isVar());
2040:       assertFalse(node5.isHook());
2041:       assertFalse(node5.isThis());
2042:       assertFalse(node5.isBlock());
2043:       assertEquals((-1), node5.getCharno());
2044:       assertFalse(node5.isSwitch());
2045:       assertFalse(node5.isTry());
2046:       assertTrue(node5.isContinue());
2047:       assertFalse(node5.hasOneChild());
2048:       assertFalse(node5.isScript());
2049:       assertFalse(node5.isArrayLit());
2050:       assertFalse(node5.isStringKey());
2051:       assertFalse(node5.isLabelName());
2052:       assertFalse(node5.isGetterDef());
2053:       assertEquals(117, node5.getType());
2054:       assertFalse(node5.isIn());
2055:       assertFalse(node5.isDelProp());
2056:       assertFalse(node5.isEmpty());
2057:       assertFalse(node5.isCase());
2058:       assertFalse(node5.isFor());
2059:       assertFalse(node5.isVoid());
2060:       assertFalse(node5.isRegExp());
2061:       assertFalse(node5.isInc());
2062:       assertFalse(node5.isIf());
2063:       assertFalse(node5.isNE());
2064:       assertFalse(node5.isTrue());
2065:       assertFalse(node5.isGetProp());
2066:       assertFalse(node5.isComma());
2067:       assertFalse(node5.isBreak());
2068:       assertFalse(node5.isSetterDef());
2069:       assertFalse(node5.isThrow());
2070:       assertFalse(node5.isFalse());
2071:       assertFalse(node5.isDebugger());
2072:       assertFalse(node5.isFunction());
2073:       assertFalse(node5.isString());
2074:       assertFalse(node5.isCast());
2075:       assertFalse(node5.isObjectLit());
2076:       assertFalse(node5.isAnd());
2077:       assertFalse(node5.isNot());
2078:       assertEquals((-1), node5.getSourcePosition());
2079:       
2080:       boolean boolean5 = node2.isReturn();
2081:       assertFalse(node2.equals((Object)node5));
2082:       assertFalse(node2.equals((Object)node1));
2083:       assertFalse(node2.equals((Object)node3));
2084:       assertFalse(node2.equals((Object)node0));
2085:       assertFalse(node2.equals((Object)node4));
2086:       assertTrue(boolean5 == boolean3);
2087:       assertTrue(boolean5 == boolean2);
2088:       assertTrue(boolean5 == boolean0);
2089:       assertTrue(boolean5 == boolean1);
2090:       assertTrue(boolean5 == boolean4);
2091:       assertEquals(0, node2.getChildCount());
2092:       assertFalse(node2.isDefaultCase());
2093:       assertFalse(node2.isTrue());
2094:       assertFalse(node2.isDebugger());
2095:       assertFalse(node2.isSetterDef());
2096:       assertFalse(node2.isTry());
2097:       assertFalse(node2.isCall());
2098:       assertFalse(node2.isName());
2099:       assertFalse(node2.isDelProp());
2100:       assertFalse(node2.isIf());
2101:       assertFalse(node2.isBlock());
2102:       assertFalse(node2.isFor());
2103:       assertFalse(node2.isNull());
2104:       assertFalse(node2.isNE());
2105:       assertFalse(node2.isVoid());
2106:       assertFalse(node2.isRegExp());
2107:       assertFalse(node2.isCatch());
2108:       assertFalse(node2.hasMoreThanOneChild());
2109:       assertFalse(node2.isCase());
2110:       assertFalse(node2.isDo());
2111:       assertEquals(39, node2.getType());
2112:       assertFalse(node2.isAssignAdd());
2113:       assertFalse(node2.isOr());
2114:       assertFalse(node2.isNew());
2115:       assertFalse(node2.isGetterDef());
2116:       assertFalse(node2.isAdd());
2117:       assertFalse(node2.isEmpty());
2118:       assertFalse(node2.isLabelName());
2119:       assertFalse(node2.isArrayLit());
2120:       assertFalse(node2.isVar());
2121:       assertFalse(node2.isStringKey());
2122:       assertFalse(node2.isParamList());
2123:       assertFalse(node2.isSwitch());
2124:       assertFalse(node2.isLabel());
2125:       assertFalse(node2.isObjectLit());
2126:       assertFalse(node2.isAnd());
2127:       assertEquals(37, node2.getCharno());
2128:       assertFalse(node2.isNot());
2129:       assertFalse(node2.isGetProp());
2130:       assertFalse(node2.isScript());
2131:       assertFalse(node2.isGetElem());
2132:       assertFalse(node2.hasOneChild());
2133:       assertFalse(node2.isAssign());
2134:       assertFalse(node2.hasChildren());
2135:       assertFalse(node2.isHook());
2136:       assertFalse(node2.isExprResult());
2137:       assertFalse(node2.isThis());
2138:       assertFalse(node2.isTypeOf());
2139:       assertFalse(node2.isDec());
2140:       assertFalse(node2.isComma());
2141:       assertFalse(node2.isBreak());
2142:       assertFalse(node2.isWith());
2143:       assertEquals(36, node2.getLineno());
2144:       assertFalse(node2.isInstanceOf());
2145:       assertFalse(node2.isContinue());
2146:       assertFalse(node2.isWhile());
2147:       assertFalse(node2.isReturn());
2148:       assertFalse(node2.isInc());
2149:       assertEquals(147493, node2.getSourcePosition());
2150:       assertTrue(node2.isNumber());
2151:       assertFalse(node2.isString());
2152:       assertFalse(node2.isIn());
2153:       assertFalse(node2.isFalse());
2154:       assertFalse(node2.isThrow());
2155:       assertFalse(node2.isFunction());
2156:       assertFalse(node2.isCast());
2157:       assertFalse(boolean5);
2158:       
2159:       boolean boolean6 = node2.isTrue();
2160:       assertFalse(node2.equals((Object)node5));
2161:       assertFalse(node2.equals((Object)node1));
2162:       assertFalse(node2.equals((Object)node3));
2163:       assertFalse(node2.equals((Object)node0));
2164:       assertFalse(node2.equals((Object)node4));
2165:       assertTrue(boolean6 == boolean1);
2166:       assertTrue(boolean6 == boolean0);
2167:       assertTrue(boolean6 == boolean2);
2168:       assertTrue(boolean6 == boolean3);
2169:       assertTrue(boolean6 == boolean4);
2170:       assertTrue(boolean6 == boolean5);
2171:       assertEquals(0, node2.getChildCount());
2172:       assertFalse(node2.isDefaultCase());
2173:       assertFalse(node2.isTrue());
2174:       assertFalse(node2.isDebugger());
2175:       assertFalse(node2.isSetterDef());
2176:       assertFalse(node2.isTry());
2177:       assertFalse(node2.isCall());
2178:       assertFalse(node2.isName());
2179:       assertFalse(node2.isDelProp());
2180:       assertFalse(node2.isIf());
2181:       assertFalse(node2.isBlock());
2182:       assertFalse(node2.isFor());
2183:       assertFalse(node2.isNull());
2184:       assertFalse(node2.isNE());
2185:       assertFalse(node2.isVoid());
2186:       assertFalse(node2.isRegExp());
2187:       assertFalse(node2.isCatch());
2188:       assertFalse(node2.hasMoreThanOneChild());
2189:       assertFalse(node2.isCase());
2190:       assertFalse(node2.isDo());
2191:       assertEquals(39, node2.getType());
2192:       assertFalse(node2.isAssignAdd());
2193:       assertFalse(node2.isOr());
2194:       assertFalse(node2.isNew());
2195:       assertFalse(node2.isGetterDef());
2196:       assertFalse(node2.isAdd());
2197:       assertFalse(node2.isEmpty());
2198:       assertFalse(node2.isLabelName());
2199:       assertFalse(node2.isArrayLit());
2200:       assertFalse(node2.isVar());
2201:       assertFalse(node2.isStringKey());
2202:       assertFalse(node2.isParamList());
2203:       assertFalse(node2.isSwitch());
2204:       assertFalse(node2.isLabel());
2205:       assertFalse(node2.isObjectLit());
2206:       assertFalse(node2.isAnd());
2207:       assertEquals(37, node2.getCharno());
2208:       assertFalse(node2.isNot());
2209:       assertFalse(node2.isGetProp());
2210:       assertFalse(node2.isScript());
2211:       assertFalse(node2.isGetElem());
2212:       assertFalse(node2.hasOneChild());
2213:       assertFalse(node2.isAssign());
2214:       assertFalse(node2.hasChildren());
2215:       assertFalse(node2.isHook());
2216:       assertFalse(node2.isExprResult());
2217:       assertFalse(node2.isThis());
2218:       assertFalse(node2.isTypeOf());
2219:       assertFalse(node2.isDec());
2220:       assertFalse(node2.isComma());
2221:       assertFalse(node2.isBreak());
2222:       assertFalse(node2.isWith());
2223:       assertEquals(36, node2.getLineno());
2224:       assertFalse(node2.isInstanceOf());
2225:       assertFalse(node2.isContinue());
2226:       assertFalse(node2.isWhile());
2227:       assertFalse(node2.isReturn());
2228:       assertFalse(node2.isInc());
2229:       assertEquals(147493, node2.getSourcePosition());
2230:       assertTrue(node2.isNumber());
2231:       assertFalse(node2.isString());
2232:       assertFalse(node2.isIn());
2233:       assertFalse(node2.isFalse());
2234:       assertFalse(node2.isThrow());
2235:       assertFalse(node2.isFunction());
2236:       assertFalse(node2.isCast());
2237:       assertFalse(boolean6);
2238:       
2239:       Iterable<Node> iterable1 = node0.children();
2240:       assertFalse(iterable1.equals((Object)iterable0));
2241:       assertFalse(node0.equals((Object)node1));
2242:       assertFalse(node0.equals((Object)node5));
2243:       assertFalse(node0.equals((Object)node2));
2244:       assertFalse(node0.equals((Object)node4));
2245:       assertNotSame(node0, node1);
2246:       assertSame(node0, node3);
2247:       assertNotSame(node0, node5);
2248:       assertFalse(iterable1.contains(node4));
2249:       assertNotNull(iterable1);
2250:       assertFalse(node0.isInstanceOf());
2251:       assertFalse(node0.isObjectLit());
2252:       assertFalse(node0.isWith());
2253:       assertFalse(node0.isGetProp());
2254:       assertFalse(node0.isBreak());
2255:       assertEquals(37, node0.getCharno());
2256:       assertFalse(node0.isNot());
2257:       assertFalse(node0.isAnd());
2258:       assertFalse(node0.isFalse());
2259:       assertFalse(node0.isInc());
2260:       assertFalse(node0.isCast());
2261:       assertFalse(node0.isAssignAdd());
2262:       assertFalse(node0.isLabel());
2263:       assertFalse(node0.isThrow());
2264:       assertFalse(node0.hasMoreThanOneChild());
2265:       assertFalse(node0.isIn());
2266:       assertFalse(node0.isCase());
2267:       assertFalse(node0.isNumber());
2268:       assertFalse(node0.isSwitch());
2269:       assertFalse(node0.isIf());
2270:       assertFalse(node0.isLabelName());
2271:       assertFalse(node0.isGetterDef());
2272:       assertEquals(147493, node0.getSourcePosition());
2273:       assertFalse(node0.isNE());
2274:       assertFalse(node0.hasOneChild());
2275:       assertFalse(node0.isHook());
2276:       assertFalse(node0.isTry());
2277:       assertFalse(node0.isScript());
2278:       assertFalse(node0.isRegExp());
2279:       assertEquals(36, node0.getLineno());
2280:       assertFalse(node0.isBlock());
2281:       assertTrue(node0.isString());
2282:       assertFalse(node0.isThis());
2283:       assertFalse(node0.isFor());
2284:       assertEquals(0, node0.getChildCount());
2285:       assertFalse(node0.isCatch());
2286:       assertFalse(node0.isSetterDef());
2287:       assertFalse(node0.isNull());
2288:       assertFalse(node0.isVoid());
2289:       assertFalse(node0.isStringKey());
2290:       assertFalse(node0.isName());
2291:       assertFalse(node0.isDebugger());
2292:       assertFalse(node0.isParamList());
2293:       assertFalse(node0.isTrue());
2294:       assertFalse(node0.isArrayLit());
2295:       assertFalse(node0.isNew());
2296:       assertFalse(node0.isAdd());
2297:       assertFalse(node0.isEmpty());
2298:       assertFalse(node0.isDefaultCase());
2299:       assertFalse(node0.isFunction());
2300:       assertFalse(node0.isDo());
2301:       assertEquals(40, node0.getType());
2302:       assertFalse(node0.isVar());
2303:       assertFalse(node0.isOr());
2304:       assertFalse(node0.isContinue());
2305:       assertFalse(node0.isDelProp());
2306:       assertFalse(node0.isGetElem());
2307:       assertFalse(node0.isExprResult());
2308:       assertFalse(node0.isCall());
2309:       assertFalse(node0.isTypeOf());
2310:       assertFalse(node0.isDec());
2311:       assertFalse(node0.hasChildren());
2312:       assertFalse(node0.isComma());
2313:       assertFalse(node0.isAssign());
2314:       assertFalse(node0.isReturn());
2315:       assertFalse(node0.isWhile());
2316:       
2317:       StringWriter stringWriter0 = new StringWriter(25);
2318:       assertNotNull(stringWriter0);
2319:       assertEquals("", stringWriter0.toString());
2320:       
2321:       StringWriter stringWriter1 = stringWriter0.append((CharSequence) "NUMBER 12.0");
2322:       assertSame(stringWriter0, stringWriter1);
2323:       assertSame(stringWriter1, stringWriter0);
2324:       assertNotNull(stringWriter1);
2325:       assertEquals("NUMBER 12.0", stringWriter0.toString());
2326:       assertEquals("NUMBER 12.0", stringWriter1.toString());
2327:       
2328:       MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
2329:       assertNotNull(mockPrintWriter0);
2330:       
2331:       Locale locale0 = new Locale("H'Y@UN%");
2332:       assertNotNull(locale0);
2333:       assertEquals("", locale0.getISO3Country());
2334:       assertEquals("h'y@un%", locale0.getLanguage());
2335:       assertEquals("h'y@un%", locale0.toString());
2336:       assertEquals("", locale0.getVariant());
2337:       assertEquals("", locale0.getCountry());
2338:       
2339:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
2340:       assertNotNull(node_SideEffectFlags0);
2341:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2342:       assertEquals(0, node_SideEffectFlags0.valueOf());
2343:       
2344:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
2345:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2346:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2347:       assertNotNull(node_SideEffectFlags1);
2348:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2349:       assertEquals(0, node_SideEffectFlags0.valueOf());
2350:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
2351:       assertEquals(0, node_SideEffectFlags1.valueOf());
2352:       
2353:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
2354:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2355:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2356:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
2357:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2358:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
2359:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
2360:       assertNotNull(node_SideEffectFlags2);
2361:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2362:       assertEquals(0, node_SideEffectFlags0.valueOf());
2363:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
2364:       assertEquals(0, node_SideEffectFlags1.valueOf());
2365:       assertEquals(0, node_SideEffectFlags2.valueOf());
2366:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
2367:       
2368:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
2369:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2370:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2371:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
2372:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
2373:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
2374:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2375:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
2376:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
2377:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
2378:       assertNotNull(node_SideEffectFlags3);
2379:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2380:       assertEquals(0, node_SideEffectFlags0.valueOf());
2381:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
2382:       assertEquals(0, node_SideEffectFlags1.valueOf());
2383:       assertEquals(0, node_SideEffectFlags3.valueOf());
2384:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
2385:       
2386:       Node node6 = Node.newString("ASSIGN_URSH", (-570), 1);
2387:       assertFalse(node6.equals((Object)node3));
2388:       assertFalse(node6.equals((Object)node1));
2389:       assertFalse(node6.equals((Object)node4));
2390:       assertFalse(node6.equals((Object)node2));
2391:       assertFalse(node6.equals((Object)node0));
2392:       assertFalse(node6.equals((Object)node5));
2393:       assertNotSame(node6, node3);
2394:       assertNotSame(node6, node1);
2395:       assertNotSame(node6, node0);
2396:       assertNotSame(node6, node5);
2397:       assertNotNull(node6);
2398:       assertFalse(node6.isGetProp());
2399:       assertFalse(node6.isComma());
2400:       assertFalse(node6.isThis());
2401:       assertFalse(node6.isInstanceOf());
2402:       assertFalse(node6.isFalse());
2403:       assertFalse(node6.isObjectLit());
2404:       assertFalse(node6.isAnd());
2405:       assertFalse(node6.isBreak());
2406:       assertFalse(node6.isInc());
2407:       assertFalse(node6.isThrow());
2408:       assertFalse(node6.isLabel());
2409:       assertFalse(node6.isNE());
2410:       assertFalse(node6.isGetterDef());
2411:       assertFalse(node6.isIn());
2412:       assertFalse(node6.hasMoreThanOneChild());
2413:       assertFalse(node6.isNumber());
2414:       assertFalse(node6.isArrayLit());
2415:       assertFalse(node6.isIf());
2416:       assertEquals((-1), node6.getLineno());
2417:       assertFalse(node6.isLabelName());
2418:       assertFalse(node6.isSwitch());
2419:       assertEquals((-1), node6.getCharno());
2420:       assertFalse(node6.isScript());
2421:       assertFalse(node6.isBlock());
2422:       assertFalse(node6.isRegExp());
2423:       assertFalse(node6.isWith());
2424:       assertFalse(node6.isCase());
2425:       assertFalse(node6.isFor());
2426:       assertFalse(node6.isHook());
2427:       assertFalse(node6.hasOneChild());
2428:       assertFalse(node6.isTry());
2429:       assertTrue(node6.isString());
2430:       assertFalse(node6.isParamList());
2431:       assertFalse(node6.isNull());
2432:       assertFalse(node6.isSetterDef());
2433:       assertEquals(0, node6.getChildCount());
2434:       assertFalse(node6.isStringKey());
2435:       assertFalse(node6.isCatch());
2436:       assertFalse(node6.isCall());
2437:       assertFalse(node6.isName());
2438:       assertFalse(node6.isNew());
2439:       assertFalse(node6.isAdd());
2440:       assertFalse(node6.isTrue());
2441:       assertFalse(node6.isFunction());
2442:       assertFalse(node6.isVar());
2443:       assertFalse(node6.isEmpty());
2444:       assertEquals(40, node6.getType());
2445:       assertFalse(node6.isDefaultCase());
2446:       assertFalse(node6.isAssignAdd());
2447:       assertFalse(node6.isDo());
2448:       assertFalse(node6.isReturn());
2449:       assertFalse(node6.hasChildren());
2450:       assertFalse(node6.isDec());
2451:       assertEquals((-1), node6.getSourcePosition());
2452:       assertFalse(node6.isAssign());
2453:       assertFalse(node6.isOr());
2454:       assertFalse(node6.isTypeOf());
2455:       assertFalse(node6.isContinue());
2456:       assertFalse(node6.isCast());
2457:       assertFalse(node6.isGetElem());
2458:       assertFalse(node6.isDelProp());
2459:       assertFalse(node6.isVoid());
2460:       assertFalse(node6.isDebugger());
2461:       assertFalse(node6.isExprResult());
2462:       assertFalse(node6.isNot());
2463:       assertFalse(node6.isWhile());
2464:       
2465:       boolean boolean7 = node6.isGetElem();
2466:       assertFalse(node6.equals((Object)node3));
2467:       assertFalse(node6.equals((Object)node1));
2468:       assertFalse(node6.equals((Object)node4));
2469:       assertFalse(node6.equals((Object)node2));
2470:       assertFalse(node6.equals((Object)node0));
2471:       assertFalse(node6.equals((Object)node5));
2472:       assertTrue(boolean7 == boolean2);
2473:       assertTrue(boolean7 == boolean3);
2474:       assertTrue(boolean7 == boolean0);
2475:       assertTrue(boolean7 == boolean1);
2476:       assertTrue(boolean7 == boolean5);
2477:       assertTrue(boolean7 == boolean6);
2478:       assertTrue(boolean7 == boolean4);
2479:       assertNotSame(node6, node3);
2480:       assertNotSame(node6, node1);
2481:       assertNotSame(node6, node0);
2482:       assertNotSame(node6, node5);
2483:       assertFalse(node6.isGetProp());
2484:       assertFalse(node6.isComma());
2485:       assertFalse(node6.isThis());
2486:       assertFalse(node6.isInstanceOf());
2487:       assertFalse(node6.isFalse());
2488:       assertFalse(node6.isObjectLit());
2489:       assertFalse(node6.isAnd());
2490:       assertFalse(node6.isBreak());
2491:       assertFalse(node6.isInc());
2492:       assertFalse(node6.isThrow());
2493:       assertFalse(node6.isLabel());
2494:       assertFalse(node6.isNE());
2495:       assertFalse(node6.isGetterDef());
2496:       assertFalse(node6.isIn());
2497:       assertFalse(node6.hasMoreThanOneChild());
2498:       assertFalse(node6.isNumber());
2499:       assertFalse(node6.isArrayLit());
2500:       assertFalse(node6.isIf());
2501:       assertEquals((-1), node6.getLineno());
2502:       assertFalse(node6.isLabelName());
2503:       assertFalse(node6.isSwitch());
2504:       assertEquals((-1), node6.getCharno());
2505:       assertFalse(node6.isScript());
2506:       assertFalse(node6.isBlock());
2507:       assertFalse(node6.isRegExp());
2508:       assertFalse(node6.isWith());
2509:       assertFalse(node6.isCase());
2510:       assertFalse(node6.isFor());
2511:       assertFalse(node6.isHook());
2512:       assertFalse(node6.hasOneChild());
2513:       assertFalse(node6.isTry());
2514:       assertTrue(node6.isString());
2515:       assertFalse(node6.isParamList());
2516:       assertFalse(node6.isNull());
2517:       assertFalse(node6.isSetterDef());
2518:       assertEquals(0, node6.getChildCount());
2519:       assertFalse(node6.isStringKey());
2520:       assertFalse(node6.isCatch());
2521:       assertFalse(node6.isCall());
2522:       assertFalse(node6.isName());
2523:       assertFalse(node6.isNew());
2524:       assertFalse(node6.isAdd());
2525:       assertFalse(node6.isTrue());
2526:       assertFalse(node6.isFunction());
2527:       assertFalse(node6.isVar());
2528:       assertFalse(node6.isEmpty());
2529:       assertEquals(40, node6.getType());
2530:       assertFalse(node6.isDefaultCase());
2531:       assertFalse(node6.isAssignAdd());
2532:       assertFalse(node6.isDo());
2533:       assertFalse(node6.isReturn());
2534:       assertFalse(node6.hasChildren());
2535:       assertFalse(node6.isDec());
2536:       assertEquals((-1), node6.getSourcePosition());
2537:       assertFalse(node6.isAssign());
2538:       assertFalse(node6.isOr());
2539:       assertFalse(node6.isTypeOf());
2540:       assertFalse(node6.isContinue());
2541:       assertFalse(node6.isCast());
2542:       assertFalse(node6.isGetElem());
2543:       assertFalse(node6.isDelProp());
2544:       assertFalse(node6.isVoid());
2545:       assertFalse(node6.isDebugger());
2546:       assertFalse(node6.isExprResult());
2547:       assertFalse(node6.isNot());
2548:       assertFalse(node6.isWhile());
2549:       assertFalse(boolean7);
2550:   }
2551: }
RegularFileObject[/tmp/EvoSuite_142_1628256036745/com/google/javascript/rhino/Node_142_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:37 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_142_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_142_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_142_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.InputId",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.javascript.rhino.jstype.TemplatizedType",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.Iterables",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.common.collect.Sets$ImprovedAbstractSet",
354:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
355:       "com.google.common.collect.Hashing",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
358:       "com.google.javascript.rhino.JSTypeExpression",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
367:     );
368:   }
369: }

[MASTER] 13:20:37.456 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("", 36, 36);
assertNotNull(node0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertEquals(36, node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

boolean boolean0 = node0.isLabelName();
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertEquals(36, node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(boolean0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

boolean boolean1 = node0.isOr();
assertTrue(boolean1 == boolean0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertEquals(36, node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(boolean1);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

Node node1 = Node.newString(38, "");
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertNotNull(node1);
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertEquals((-1), node1.getCharno());
assertEquals(38, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertTrue(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertNull(staticSourceFile0);
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertEquals((-1), node1.getCharno());
assertEquals(38, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertTrue(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Node node2 = Node.newNumber((double) 12, 36, 37);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertEquals(39, node2.getType());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isGetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabel());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertEquals(37, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isHook());
assertFalse(node2.isExprResult());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertEquals(36, node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isInc());
assertEquals(147493, node2.getSourcePosition());
assertTrue(node2.isNumber());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);

Node node3 = node0.copyInformationFrom(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node3, node1);
assertSame(node3, node0);
assertNotNull(node3);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertEquals(37, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertEquals(39, node2.getType());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isGetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabel());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertEquals(37, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isHook());
assertFalse(node2.isExprResult());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertEquals(36, node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isInc());
assertEquals(147493, node2.getSourcePosition());
assertTrue(node2.isNumber());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertFalse(node3.isNumber());
assertFalse(node3.isOr());
assertFalse(node3.isCast());
assertFalse(node3.isVar());
assertFalse(node3.isLabelName());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isDebugger());
assertFalse(node3.isVoid());
assertFalse(node3.isNot());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isCall());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isWhile());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isIn());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFalse());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFunction());
assertFalse(node3.isThrow());
assertEquals(40, node3.getType());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertEquals(37, node3.getCharno());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isScript());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isThis());
assertEquals(36, node3.getLineno());
assertFalse(node3.isRegExp());
assertTrue(node3.isString());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());

boolean boolean2 = node0.getBooleanProp(53);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertEquals(37, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(boolean2);

boolean boolean3 = node0.isReturn();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertEquals(37, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(boolean3);

Node node4 = new Node(471, node3, node3, node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertNotNull(node4);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertEquals(37, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertEquals((-1), node1.getCharno());
assertEquals(38, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertTrue(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertEquals(39, node2.getType());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isGetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabel());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertEquals(37, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isHook());
assertFalse(node2.isExprResult());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertEquals(36, node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isInc());
assertEquals(147493, node2.getSourcePosition());
assertTrue(node2.isNumber());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertFalse(node3.isNumber());
assertFalse(node3.isOr());
assertFalse(node3.isCast());
assertFalse(node3.isVar());
assertFalse(node3.isLabelName());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isDebugger());
assertFalse(node3.isVoid());
assertFalse(node3.isNot());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isCall());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isWhile());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isIn());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFalse());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFunction());
assertFalse(node3.isThrow());
assertEquals(40, node3.getType());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertEquals(37, node3.getCharno());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isScript());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isThis());
assertEquals(36, node3.getLineno());
assertFalse(node3.isRegExp());
assertTrue(node3.isString());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isCall());
assertFalse(node4.isName());
assertFalse(node4.isStringKey());
assertFalse(node4.isParamList());
assertFalse(node4.isNull());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isCatch());
assertFalse(node4.isDec());
assertFalse(node4.isWhile());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isRegExp());
assertFalse(node4.isReturn());
assertFalse(node4.isBlock());
assertFalse(node4.hasOneChild());
assertFalse(node4.isArrayLit());
assertFalse(node4.isTry());
assertFalse(node4.isGetElem());
assertFalse(node4.isScript());
assertFalse(node4.isExprResult());
assertFalse(node4.isEmpty());
assertFalse(node4.isNumber());
assertFalse(node4.isLabelName());
assertFalse(node4.isGetterDef());
assertFalse(node4.isVoid());
assertFalse(node4.isDelProp());
assertFalse(node4.isTrue());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDo());
assertFalse(node4.isLabel());
assertFalse(node4.isVar());
assertFalse(node4.isHook());
assertFalse(node4.isFalse());
assertFalse(node4.isInc());
assertTrue(node4.hasMoreThanOneChild());
assertFalse(node4.isBreak());
assertFalse(node4.isString());
assertFalse(node4.isSwitch());
assertEquals((-1), node4.getCharno());
assertEquals(471, node4.getType());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isObjectLit());
assertFalse(node4.isGetProp());
assertFalse(node4.isCase());
assertTrue(node4.hasChildren());
assertFalse(node4.isWith());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isFor());
assertFalse(node4.isCast());
assertFalse(node4.isIf());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isNot());
assertFalse(node4.isDebugger());
assertFalse(node4.isAnd());
assertFalse(node4.isNE());
assertFalse(node4.isIn());
assertFalse(node4.isContinue());
assertFalse(node4.isSetterDef());
assertFalse(node4.isFunction());
assertFalse(node4.isThrow());
assertEquals(2, node4.getChildCount());

String string0 = node2.toString(false, false, false);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertNotNull(string0);
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertEquals(39, node2.getType());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isGetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabel());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertEquals(37, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isHook());
assertFalse(node2.isExprResult());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertEquals(36, node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isInc());
assertEquals(147493, node2.getSourcePosition());
assertTrue(node2.isNumber());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertEquals("NUMBER 12.0", string0);

boolean boolean4 = node3.isTrue();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node3, node1);
assertSame(node3, node0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertEquals(37, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertEquals(39, node2.getType());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isGetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabel());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertEquals(37, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isHook());
assertFalse(node2.isExprResult());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertEquals(36, node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isInc());
assertEquals(147493, node2.getSourcePosition());
assertTrue(node2.isNumber());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertFalse(node3.isNumber());
assertFalse(node3.isOr());
assertFalse(node3.isCast());
assertFalse(node3.isVar());
assertFalse(node3.isLabelName());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isDebugger());
assertFalse(node3.isVoid());
assertFalse(node3.isNot());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isCall());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isWhile());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isIn());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFalse());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFunction());
assertFalse(node3.isThrow());
assertEquals(40, node3.getType());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertEquals(37, node3.getCharno());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isScript());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isThis());
assertEquals(36, node3.getLineno());
assertFalse(node3.isRegExp());
assertTrue(node3.isString());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertFalse(boolean4);

Iterable<Node> iterable0 = node4.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node1, node3);
assertNotSame(node1, node0);
assertNotSame(node3, node1);
assertSame(node3, node0);
assertNotNull(iterable0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertEquals(37, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertEquals((-1), node1.getCharno());
assertEquals(38, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertTrue(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertEquals(39, node2.getType());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isGetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabel());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertEquals(37, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isHook());
assertFalse(node2.isExprResult());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertEquals(36, node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isInc());
assertEquals(147493, node2.getSourcePosition());
assertTrue(node2.isNumber());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertFalse(node3.isNumber());
assertFalse(node3.isOr());
assertFalse(node3.isCast());
assertFalse(node3.isVar());
assertFalse(node3.isLabelName());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isDebugger());
assertFalse(node3.isVoid());
assertFalse(node3.isNot());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isCall());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isWhile());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isIn());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFalse());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFunction());
assertFalse(node3.isThrow());
assertEquals(40, node3.getType());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertEquals(37, node3.getCharno());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isScript());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isThis());
assertEquals(36, node3.getLineno());
assertFalse(node3.isRegExp());
assertTrue(node3.isString());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isCall());
assertFalse(node4.isName());
assertFalse(node4.isStringKey());
assertFalse(node4.isParamList());
assertFalse(node4.isNull());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isCatch());
assertFalse(node4.isDec());
assertFalse(node4.isWhile());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isRegExp());
assertFalse(node4.isReturn());
assertFalse(node4.isBlock());
assertFalse(node4.hasOneChild());
assertFalse(node4.isArrayLit());
assertFalse(node4.isTry());
assertFalse(node4.isGetElem());
assertFalse(node4.isScript());
assertFalse(node4.isExprResult());
assertFalse(node4.isEmpty());
assertFalse(node4.isNumber());
assertFalse(node4.isLabelName());
assertFalse(node4.isGetterDef());
assertFalse(node4.isVoid());
assertFalse(node4.isDelProp());
assertFalse(node4.isTrue());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDo());
assertFalse(node4.isLabel());
assertFalse(node4.isVar());
assertFalse(node4.isHook());
assertFalse(node4.isFalse());
assertFalse(node4.isInc());
assertTrue(node4.hasMoreThanOneChild());
assertFalse(node4.isBreak());
assertFalse(node4.isString());
assertFalse(node4.isSwitch());
assertEquals((-1), node4.getCharno());
assertEquals(471, node4.getType());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isObjectLit());
assertFalse(node4.isGetProp());
assertFalse(node4.isCase());
assertTrue(node4.hasChildren());
assertFalse(node4.isWith());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isFor());
assertFalse(node4.isCast());
assertFalse(node4.isIf());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isNot());
assertFalse(node4.isDebugger());
assertFalse(node4.isAnd());
assertFalse(node4.isNE());
assertFalse(node4.isIn());
assertFalse(node4.isContinue());
assertFalse(node4.isSetterDef());
assertFalse(node4.isFunction());
assertFalse(node4.isThrow());
assertEquals(2, node4.getChildCount());

Node node5 = Node.newString(117, "", (-1049), 40);
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node1));
assertNotSame(node5, node3);
assertNotSame(node5, node0);
assertNotSame(node5, node1);
assertNotNull(node5);
assertFalse(node5.isAssignAdd());
assertFalse(node5.isOr());
assertFalse(node5.isTypeOf());
assertFalse(node5.isNumber());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isGetElem());
assertFalse(node5.isAssign());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isDo());
assertFalse(node5.hasChildren());
assertFalse(node5.isDec());
assertFalse(node5.isWhile());
assertFalse(node5.isLabel());
assertFalse(node5.isReturn());
assertFalse(node5.isNew());
assertFalse(node5.isAdd());
assertFalse(node5.isExprResult());
assertFalse(node5.isCall());
assertFalse(node5.isName());
assertFalse(node5.isNull());
assertFalse(node5.isParamList());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isCatch());
assertFalse(node5.isWith());
assertFalse(node5.isDefaultCase());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isVar());
assertFalse(node5.isHook());
assertFalse(node5.isThis());
assertFalse(node5.isBlock());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isSwitch());
assertFalse(node5.isTry());
assertTrue(node5.isContinue());
assertFalse(node5.hasOneChild());
assertFalse(node5.isScript());
assertFalse(node5.isArrayLit());
assertFalse(node5.isStringKey());
assertFalse(node5.isLabelName());
assertFalse(node5.isGetterDef());
assertEquals(117, node5.getType());
assertFalse(node5.isIn());
assertFalse(node5.isDelProp());
assertFalse(node5.isEmpty());
assertFalse(node5.isCase());
assertFalse(node5.isFor());
assertFalse(node5.isVoid());
assertFalse(node5.isRegExp());
assertFalse(node5.isInc());
assertFalse(node5.isIf());
assertFalse(node5.isNE());
assertFalse(node5.isTrue());
assertFalse(node5.isGetProp());
assertFalse(node5.isComma());
assertFalse(node5.isBreak());
assertFalse(node5.isSetterDef());
assertFalse(node5.isThrow());
assertFalse(node5.isFalse());
assertFalse(node5.isDebugger());
assertFalse(node5.isFunction());
assertFalse(node5.isString());
assertFalse(node5.isCast());
assertFalse(node5.isObjectLit());
assertFalse(node5.isAnd());
assertFalse(node5.isNot());
assertEquals((-1), node5.getSourcePosition());

boolean boolean5 = node2.isReturn();
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertEquals(39, node2.getType());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isGetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabel());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertEquals(37, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isHook());
assertFalse(node2.isExprResult());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertEquals(36, node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isInc());
assertEquals(147493, node2.getSourcePosition());
assertTrue(node2.isNumber());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(boolean5);

boolean boolean6 = node2.isTrue();
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean5);
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertEquals(39, node2.getType());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isGetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabel());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertEquals(37, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isHook());
assertFalse(node2.isExprResult());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertEquals(36, node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isInc());
assertEquals(147493, node2.getSourcePosition());
assertTrue(node2.isNumber());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(boolean6);

Iterable<Node> iterable1 = node0.children();
assertFalse(iterable1.equals((Object)iterable0));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertNotSame(node0, node1);
assertSame(node0, node3);
assertNotSame(node0, node5);
assertFalse(iterable1.contains(node4));
assertNotNull(iterable1);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertEquals(37, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());

StringWriter stringWriter0 = new StringWriter(25);
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

StringWriter stringWriter1 = stringWriter0.append((CharSequence) "NUMBER 12.0");
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);
assertEquals("NUMBER 12.0", stringWriter0.toString());
assertEquals("NUMBER 12.0", stringWriter1.toString());

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
assertNotNull(mockPrintWriter0);

Locale locale0 = new Locale("H'Y@UN%");
assertNotNull(locale0);
assertEquals("", locale0.getISO3Country());
assertEquals("h'y@un%", locale0.getLanguage());
assertEquals("h'y@un%", locale0.toString());
assertEquals("", locale0.getVariant());
assertEquals("", locale0.getCountry());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags3);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());

Node node6 = Node.newString("ASSIGN_URSH", (-570), 1);
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node5));
assertNotSame(node6, node3);
assertNotSame(node6, node1);
assertNotSame(node6, node0);
assertNotSame(node6, node5);
assertNotNull(node6);
assertFalse(node6.isGetProp());
assertFalse(node6.isComma());
assertFalse(node6.isThis());
assertFalse(node6.isInstanceOf());
assertFalse(node6.isFalse());
assertFalse(node6.isObjectLit());
assertFalse(node6.isAnd());
assertFalse(node6.isBreak());
assertFalse(node6.isInc());
assertFalse(node6.isThrow());
assertFalse(node6.isLabel());
assertFalse(node6.isNE());
assertFalse(node6.isGetterDef());
assertFalse(node6.isIn());
assertFalse(node6.hasMoreThanOneChild());
assertFalse(node6.isNumber());
assertFalse(node6.isArrayLit());
assertFalse(node6.isIf());
assertEquals((-1), node6.getLineno());
assertFalse(node6.isLabelName());
assertFalse(node6.isSwitch());
assertEquals((-1), node6.getCharno());
assertFalse(node6.isScript());
assertFalse(node6.isBlock());
assertFalse(node6.isRegExp());
assertFalse(node6.isWith());
assertFalse(node6.isCase());
assertFalse(node6.isFor());
assertFalse(node6.isHook());
assertFalse(node6.hasOneChild());
assertFalse(node6.isTry());
assertTrue(node6.isString());
assertFalse(node6.isParamList());
assertFalse(node6.isNull());
assertFalse(node6.isSetterDef());
assertEquals(0, node6.getChildCount());
assertFalse(node6.isStringKey());
assertFalse(node6.isCatch());
assertFalse(node6.isCall());
assertFalse(node6.isName());
assertFalse(node6.isNew());
assertFalse(node6.isAdd());
assertFalse(node6.isTrue());
assertFalse(node6.isFunction());
assertFalse(node6.isVar());
assertFalse(node6.isEmpty());
assertEquals(40, node6.getType());
assertFalse(node6.isDefaultCase());
assertFalse(node6.isAssignAdd());
assertFalse(node6.isDo());
assertFalse(node6.isReturn());
assertFalse(node6.hasChildren());
assertFalse(node6.isDec());
assertEquals((-1), node6.getSourcePosition());
assertFalse(node6.isAssign());
assertFalse(node6.isOr());
assertFalse(node6.isTypeOf());
assertFalse(node6.isContinue());
assertFalse(node6.isCast());
assertFalse(node6.isGetElem());
assertFalse(node6.isDelProp());
assertFalse(node6.isVoid());
assertFalse(node6.isDebugger());
assertFalse(node6.isExprResult());
assertFalse(node6.isNot());
assertFalse(node6.isWhile());

boolean boolean7 = node6.isGetElem();
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node5));
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean4);
assertNotSame(node6, node3);
assertNotSame(node6, node1);
assertNotSame(node6, node0);
assertNotSame(node6, node5);
assertFalse(node6.isGetProp());
assertFalse(node6.isComma());
assertFalse(node6.isThis());
assertFalse(node6.isInstanceOf());
assertFalse(node6.isFalse());
assertFalse(node6.isObjectLit());
assertFalse(node6.isAnd());
assertFalse(node6.isBreak());
assertFalse(node6.isInc());
assertFalse(node6.isThrow());
assertFalse(node6.isLabel());
assertFalse(node6.isNE());
assertFalse(node6.isGetterDef());
assertFalse(node6.isIn());
assertFalse(node6.hasMoreThanOneChild());
assertFalse(node6.isNumber());
assertFalse(node6.isArrayLit());
assertFalse(node6.isIf());
assertEquals((-1), node6.getLineno());
assertFalse(node6.isLabelName());
assertFalse(node6.isSwitch());
assertEquals((-1), node6.getCharno());
assertFalse(node6.isScript());
assertFalse(node6.isBlock());
assertFalse(node6.isRegExp());
assertFalse(node6.isWith());
assertFalse(node6.isCase());
assertFalse(node6.isFor());
assertFalse(node6.isHook());
assertFalse(node6.hasOneChild());
assertFalse(node6.isTry());
assertTrue(node6.isString());
assertFalse(node6.isParamList());
assertFalse(node6.isNull());
assertFalse(node6.isSetterDef());
assertEquals(0, node6.getChildCount());
assertFalse(node6.isStringKey());
assertFalse(node6.isCatch());
assertFalse(node6.isCall());
assertFalse(node6.isName());
assertFalse(node6.isNew());
assertFalse(node6.isAdd());
assertFalse(node6.isTrue());
assertFalse(node6.isFunction());
assertFalse(node6.isVar());
assertFalse(node6.isEmpty());
assertEquals(40, node6.getType());
assertFalse(node6.isDefaultCase());
assertFalse(node6.isAssignAdd());
assertFalse(node6.isDo());
assertFalse(node6.isReturn());
assertFalse(node6.hasChildren());
assertFalse(node6.isDec());
assertEquals((-1), node6.getSourcePosition());
assertFalse(node6.isAssign());
assertFalse(node6.isOr());
assertFalse(node6.isTypeOf());
assertFalse(node6.isContinue());
assertFalse(node6.isCast());
assertFalse(node6.isGetElem());
assertFalse(node6.isDelProp());
assertFalse(node6.isVoid());
assertFalse(node6.isDebugger());
assertFalse(node6.isExprResult());
assertFalse(node6.isNot());
assertFalse(node6.isWhile());
assertFalse(boolean7);


[MASTER] 13:20:41.123 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_158_1628256040610/com/google/javascript/rhino/Node_158_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_158_1628256040610/com/google/javascript/rhino/Node_158_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:41.123 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:41.123 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:41.123 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2162
[MASTER] 13:20:41.125 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_158_1628256040610/com/google/javascript/rhino/Node_158_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:40 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import java.io.StringWriter;
13: import java.util.Locale;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.mock.java.io.MockPrintWriter;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_158_tmp__ESTest extends Node_158_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Node node0 = Node.newString("", 36, 36);
25:       assertNotNull(node0);
26:       assertFalse(node0.isVoid());
27:       assertFalse(node0.isTry());
28:       assertFalse(node0.isArrayLit());
29:       assertFalse(node0.isDefaultCase());
30:       assertFalse(node0.isRegExp());
31:       assertFalse(node0.isFunction());
32:       assertFalse(node0.isFor());
33:       assertEquals(40, node0.getType());
34:       assertEquals(0, node0.getChildCount());
35:       assertFalse(node0.isCase());
36:       assertFalse(node0.isGetterDef());
37:       assertFalse(node0.isSwitch());
38:       assertEquals(36, node0.getCharno());
39:       assertFalse(node0.isParamList());
40:       assertFalse(node0.isStringKey());
41:       assertEquals(147492, node0.getSourcePosition());
42:       assertFalse(node0.isDebugger());
43:       assertFalse(node0.isHook());
44:       assertFalse(node0.isInc());
45:       assertTrue(node0.isString());
46:       assertFalse(node0.isFalse());
47:       assertFalse(node0.isThrow());
48:       assertFalse(node0.isThis());
49:       assertFalse(node0.isBlock());
50:       assertFalse(node0.isInstanceOf());
51:       assertFalse(node0.isIn());
52:       assertFalse(node0.hasMoreThanOneChild());
53:       assertFalse(node0.isCatch());
54:       assertFalse(node0.isSetterDef());
55:       assertFalse(node0.isIf());
56:       assertFalse(node0.isNE());
57:       assertFalse(node0.isCast());
58:       assertFalse(node0.isGetElem());
59:       assertFalse(node0.isExprResult());
60:       assertFalse(node0.isLabelName());
61:       assertFalse(node0.hasOneChild());
62:       assertFalse(node0.isDec());
63:       assertFalse(node0.hasChildren());
64:       assertFalse(node0.isTypeOf());
65:       assertFalse(node0.isWith());
66:       assertEquals(36, node0.getLineno());
67:       assertFalse(node0.isAssign());
68:       assertFalse(node0.isLabel());
69:       assertFalse(node0.isReturn());
70:       assertFalse(node0.isContinue());
71:       assertFalse(node0.isAnd());
72:       assertFalse(node0.isGetProp());
73:       assertFalse(node0.isNumber());
74:       assertFalse(node0.isScript());
75:       assertFalse(node0.isObjectLit());
76:       assertFalse(node0.isNot());
77:       assertFalse(node0.isVar());
78:       assertFalse(node0.isAdd());
79:       assertFalse(node0.isName());
80:       assertFalse(node0.isCall());
81:       assertFalse(node0.isNew());
82:       assertFalse(node0.isBreak());
83:       assertFalse(node0.isWhile());
84:       assertFalse(node0.isComma());
85:       assertFalse(node0.isAssignAdd());
86:       assertFalse(node0.isDo());
87:       assertFalse(node0.isNull());
88:       assertFalse(node0.isDelProp());
89:       assertFalse(node0.isEmpty());
90:       assertFalse(node0.isTrue());
91:       assertFalse(node0.isOr());
92:       assertEquals(1, Node.DECR_FLAG);
93:       assertEquals(49, Node.DIRECT_EVAL);
94:       assertEquals(12, Node.COLUMN_BITS);
95:       assertEquals(46, Node.IS_NAMESPACE);
96:       assertEquals(30, Node.VAR_ARGS_NAME);
97:       assertEquals(51, Node.STATIC_SOURCE_FILE);
98:       assertEquals(54, Node.SLASH_V);
99:       assertEquals(37, Node.OPT_ARG_NAME);
100:       assertEquals(50, Node.FREE_CALL);
101:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
102:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
104:       assertEquals(32, Node.INCRDECR_PROP);
105:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
106:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
107:       assertEquals(55, Node.INFERRED_FUNCTION);
108:       assertEquals(4095, Node.COLUMN_MASK);
109:       assertEquals(36, Node.QUOTED_PROP);
110:       assertEquals(48, Node.DIRECTIVES);
111:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
112:       assertEquals(43, Node.IS_CONSTANT_NAME);
113:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
114:       assertEquals(40, Node.ORIGINALNAME_PROP);
115:       assertEquals(29, Node.JSDOC_INFO_PROP);
116:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
117:       assertEquals(56, Node.CHANGE_TIME);
118:       assertEquals(47, Node.IS_DISPATCHER);
119:       assertEquals(57, Node.REFLECTED_OBJECT);
120:       assertEquals(2, Node.POST_FLAG);
121:       assertEquals(53, Node.INPUT_ID);
122:       assertEquals(52, Node.LENGTH);
123:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
124:       assertEquals(8, Node.FLAG_NO_THROWS);
125:       assertEquals(15, Node.NO_SIDE_EFFECTS);
126:       assertEquals(57, Node.LAST_PROP);
127:       assertEquals(39, Node.EMPTY_BLOCK);
128:       
129:       boolean boolean0 = node0.isLabelName();
130:       assertFalse(node0.isVoid());
131:       assertFalse(node0.isTry());
132:       assertFalse(node0.isArrayLit());
133:       assertFalse(node0.isDefaultCase());
134:       assertFalse(node0.isRegExp());
135:       assertFalse(node0.isFunction());
136:       assertFalse(node0.isFor());
137:       assertEquals(40, node0.getType());
138:       assertEquals(0, node0.getChildCount());
139:       assertFalse(node0.isCase());
140:       assertFalse(node0.isGetterDef());
141:       assertFalse(node0.isSwitch());
142:       assertEquals(36, node0.getCharno());
143:       assertFalse(node0.isParamList());
144:       assertFalse(node0.isStringKey());
145:       assertEquals(147492, node0.getSourcePosition());
146:       assertFalse(node0.isDebugger());
147:       assertFalse(node0.isHook());
148:       assertFalse(node0.isInc());
149:       assertTrue(node0.isString());
150:       assertFalse(node0.isFalse());
151:       assertFalse(node0.isThrow());
152:       assertFalse(node0.isThis());
153:       assertFalse(node0.isBlock());
154:       assertFalse(node0.isInstanceOf());
155:       assertFalse(node0.isIn());
156:       assertFalse(node0.hasMoreThanOneChild());
157:       assertFalse(node0.isCatch());
158:       assertFalse(node0.isSetterDef());
159:       assertFalse(node0.isIf());
160:       assertFalse(node0.isNE());
161:       assertFalse(node0.isCast());
162:       assertFalse(node0.isGetElem());
163:       assertFalse(node0.isExprResult());
164:       assertFalse(node0.isLabelName());
165:       assertFalse(node0.hasOneChild());
166:       assertFalse(node0.isDec());
167:       assertFalse(node0.hasChildren());
168:       assertFalse(node0.isTypeOf());
169:       assertFalse(node0.isWith());
170:       assertEquals(36, node0.getLineno());
171:       assertFalse(node0.isAssign());
172:       assertFalse(node0.isLabel());
173:       assertFalse(node0.isReturn());
174:       assertFalse(node0.isContinue());
175:       assertFalse(node0.isAnd());
176:       assertFalse(node0.isGetProp());
177:       assertFalse(node0.isNumber());
178:       assertFalse(node0.isScript());
179:       assertFalse(node0.isObjectLit());
180:       assertFalse(node0.isNot());
181:       assertFalse(node0.isVar());
182:       assertFalse(node0.isAdd());
183:       assertFalse(node0.isName());
184:       assertFalse(node0.isCall());
185:       assertFalse(node0.isNew());
186:       assertFalse(node0.isBreak());
187:       assertFalse(node0.isWhile());
188:       assertFalse(node0.isComma());
189:       assertFalse(node0.isAssignAdd());
190:       assertFalse(node0.isDo());
191:       assertFalse(node0.isNull());
192:       assertFalse(node0.isDelProp());
193:       assertFalse(node0.isEmpty());
194:       assertFalse(node0.isTrue());
195:       assertFalse(node0.isOr());
196:       assertFalse(boolean0);
197:       assertEquals(1, Node.DECR_FLAG);
198:       assertEquals(49, Node.DIRECT_EVAL);
199:       assertEquals(12, Node.COLUMN_BITS);
200:       assertEquals(46, Node.IS_NAMESPACE);
201:       assertEquals(30, Node.VAR_ARGS_NAME);
202:       assertEquals(51, Node.STATIC_SOURCE_FILE);
203:       assertEquals(54, Node.SLASH_V);
204:       assertEquals(37, Node.OPT_ARG_NAME);
205:       assertEquals(50, Node.FREE_CALL);
206:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
207:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
208:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
209:       assertEquals(32, Node.INCRDECR_PROP);
210:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
211:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
212:       assertEquals(55, Node.INFERRED_FUNCTION);
213:       assertEquals(4095, Node.COLUMN_MASK);
214:       assertEquals(36, Node.QUOTED_PROP);
215:       assertEquals(48, Node.DIRECTIVES);
216:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
217:       assertEquals(43, Node.IS_CONSTANT_NAME);
218:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
219:       assertEquals(40, Node.ORIGINALNAME_PROP);
220:       assertEquals(29, Node.JSDOC_INFO_PROP);
221:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
222:       assertEquals(56, Node.CHANGE_TIME);
223:       assertEquals(47, Node.IS_DISPATCHER);
224:       assertEquals(57, Node.REFLECTED_OBJECT);
225:       assertEquals(2, Node.POST_FLAG);
226:       assertEquals(53, Node.INPUT_ID);
227:       assertEquals(52, Node.LENGTH);
228:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
229:       assertEquals(8, Node.FLAG_NO_THROWS);
230:       assertEquals(15, Node.NO_SIDE_EFFECTS);
231:       assertEquals(57, Node.LAST_PROP);
232:       assertEquals(39, Node.EMPTY_BLOCK);
233:       
234:       boolean boolean1 = node0.isOr();
235:       assertTrue(boolean1 == boolean0);
236:       assertFalse(node0.isVoid());
237:       assertFalse(node0.isTry());
238:       assertFalse(node0.isArrayLit());
239:       assertFalse(node0.isDefaultCase());
240:       assertFalse(node0.isRegExp());
241:       assertFalse(node0.isFunction());
242:       assertFalse(node0.isFor());
243:       assertEquals(40, node0.getType());
244:       assertEquals(0, node0.getChildCount());
245:       assertFalse(node0.isCase());
246:       assertFalse(node0.isGetterDef());
247:       assertFalse(node0.isSwitch());
248:       assertEquals(36, node0.getCharno());
249:       assertFalse(node0.isParamList());
250:       assertFalse(node0.isStringKey());
251:       assertEquals(147492, node0.getSourcePosition());
252:       assertFalse(node0.isDebugger());
253:       assertFalse(node0.isHook());
254:       assertFalse(node0.isInc());
255:       assertTrue(node0.isString());
256:       assertFalse(node0.isFalse());
257:       assertFalse(node0.isThrow());
258:       assertFalse(node0.isThis());
259:       assertFalse(node0.isBlock());
260:       assertFalse(node0.isInstanceOf());
261:       assertFalse(node0.isIn());
262:       assertFalse(node0.hasMoreThanOneChild());
263:       assertFalse(node0.isCatch());
264:       assertFalse(node0.isSetterDef());
265:       assertFalse(node0.isIf());
266:       assertFalse(node0.isNE());
267:       assertFalse(node0.isCast());
268:       assertFalse(node0.isGetElem());
269:       assertFalse(node0.isExprResult());
270:       assertFalse(node0.isLabelName());
271:       assertFalse(node0.hasOneChild());
272:       assertFalse(node0.isDec());
273:       assertFalse(node0.hasChildren());
274:       assertFalse(node0.isTypeOf());
275:       assertFalse(node0.isWith());
276:       assertEquals(36, node0.getLineno());
277:       assertFalse(node0.isAssign());
278:       assertFalse(node0.isLabel());
279:       assertFalse(node0.isReturn());
280:       assertFalse(node0.isContinue());
281:       assertFalse(node0.isAnd());
282:       assertFalse(node0.isGetProp());
283:       assertFalse(node0.isNumber());
284:       assertFalse(node0.isScript());
285:       assertFalse(node0.isObjectLit());
286:       assertFalse(node0.isNot());
287:       assertFalse(node0.isVar());
288:       assertFalse(node0.isAdd());
289:       assertFalse(node0.isName());
290:       assertFalse(node0.isCall());
291:       assertFalse(node0.isNew());
292:       assertFalse(node0.isBreak());
293:       assertFalse(node0.isWhile());
294:       assertFalse(node0.isComma());
295:       assertFalse(node0.isAssignAdd());
296:       assertFalse(node0.isDo());
297:       assertFalse(node0.isNull());
298:       assertFalse(node0.isDelProp());
299:       assertFalse(node0.isEmpty());
300:       assertFalse(node0.isTrue());
301:       assertFalse(node0.isOr());
302:       assertFalse(boolean1);
303:       assertEquals(1, Node.DECR_FLAG);
304:       assertEquals(49, Node.DIRECT_EVAL);
305:       assertEquals(12, Node.COLUMN_BITS);
306:       assertEquals(46, Node.IS_NAMESPACE);
307:       assertEquals(30, Node.VAR_ARGS_NAME);
308:       assertEquals(51, Node.STATIC_SOURCE_FILE);
309:       assertEquals(54, Node.SLASH_V);
310:       assertEquals(37, Node.OPT_ARG_NAME);
311:       assertEquals(50, Node.FREE_CALL);
312:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
313:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
314:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
315:       assertEquals(32, Node.INCRDECR_PROP);
316:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
317:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
318:       assertEquals(55, Node.INFERRED_FUNCTION);
319:       assertEquals(4095, Node.COLUMN_MASK);
320:       assertEquals(36, Node.QUOTED_PROP);
321:       assertEquals(48, Node.DIRECTIVES);
322:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
323:       assertEquals(43, Node.IS_CONSTANT_NAME);
324:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
325:       assertEquals(40, Node.ORIGINALNAME_PROP);
326:       assertEquals(29, Node.JSDOC_INFO_PROP);
327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
328:       assertEquals(56, Node.CHANGE_TIME);
329:       assertEquals(47, Node.IS_DISPATCHER);
330:       assertEquals(57, Node.REFLECTED_OBJECT);
331:       assertEquals(2, Node.POST_FLAG);
332:       assertEquals(53, Node.INPUT_ID);
333:       assertEquals(52, Node.LENGTH);
334:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
335:       assertEquals(8, Node.FLAG_NO_THROWS);
336:       assertEquals(15, Node.NO_SIDE_EFFECTS);
337:       assertEquals(57, Node.LAST_PROP);
338:       assertEquals(39, Node.EMPTY_BLOCK);
339:       
340:       Node node1 = Node.newString(38, "");
341:       assertFalse(node1.equals((Object)node0));
342:       assertNotSame(node1, node0);
343:       assertNotNull(node1);
344:       assertFalse(node1.hasOneChild());
345:       assertFalse(node1.isNot());
346:       assertFalse(node1.isObjectLit());
347:       assertEquals((-1), node1.getSourcePosition());
348:       assertFalse(node1.isScript());
349:       assertFalse(node1.isNumber());
350:       assertFalse(node1.isAssignAdd());
351:       assertFalse(node1.isLabel());
352:       assertFalse(node1.isAnd());
353:       assertFalse(node1.isLabelName());
354:       assertFalse(node1.isFalse());
355:       assertEquals(38, node1.getType());
356:       assertFalse(node1.isCast());
357:       assertFalse(node1.isContinue());
358:       assertFalse(node1.isBlock());
359:       assertEquals((-1), node1.getCharno());
360:       assertFalse(node1.isSwitch());
361:       assertFalse(node1.isHook());
362:       assertFalse(node1.isThrow());
363:       assertFalse(node1.isStringKey());
364:       assertFalse(node1.isCase());
365:       assertFalse(node1.isInc());
366:       assertFalse(node1.isSetterDef());
367:       assertFalse(node1.isIn());
368:       assertEquals((-1), node1.getLineno());
369:       assertTrue(node1.isName());
370:       assertFalse(node1.isNE());
371:       assertFalse(node1.isThis());
372:       assertFalse(node1.isIf());
373:       assertFalse(node1.isFor());
374:       assertFalse(node1.isWith());
375:       assertFalse(node1.isRegExp());
376:       assertFalse(node1.hasMoreThanOneChild());
377:       assertFalse(node1.isInstanceOf());
378:       assertFalse(node1.isCatch());
379:       assertFalse(node1.isTry());
380:       assertFalse(node1.isVoid());
381:       assertFalse(node1.isDebugger());
382:       assertFalse(node1.isTrue());
383:       assertFalse(node1.isDefaultCase());
384:       assertFalse(node1.isEmpty());
385:       assertFalse(node1.isGetterDef());
386:       assertEquals(0, node1.getChildCount());
387:       assertFalse(node1.isParamList());
388:       assertFalse(node1.isArrayLit());
389:       assertFalse(node1.isFunction());
390:       assertFalse(node1.isAdd());
391:       assertFalse(node1.isNew());
392:       assertFalse(node1.isVar());
393:       assertFalse(node1.isWhile());
394:       assertFalse(node1.isDo());
395:       assertFalse(node1.isString());
396:       assertFalse(node1.isOr());
397:       assertFalse(node1.isReturn());
398:       assertFalse(node1.isGetProp());
399:       assertFalse(node1.isComma());
400:       assertFalse(node1.isNull());
401:       assertFalse(node1.isAssign());
402:       assertFalse(node1.isGetElem());
403:       assertFalse(node1.hasChildren());
404:       assertFalse(node1.isBreak());
405:       assertFalse(node1.isDelProp());
406:       assertFalse(node1.isDec());
407:       assertFalse(node1.isTypeOf());
408:       assertFalse(node1.isExprResult());
409:       assertFalse(node1.isCall());
410:       assertEquals(12, Node.COLUMN_BITS);
411:       assertEquals(32, Node.INCRDECR_PROP);
412:       assertEquals(1, Node.DECR_FLAG);
413:       assertEquals(51, Node.STATIC_SOURCE_FILE);
414:       assertEquals(30, Node.VAR_ARGS_NAME);
415:       
416:       StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
417:       assertFalse(node1.equals((Object)node0));
418:       assertNotSame(node1, node0);
419:       assertNull(staticSourceFile0);
420:       assertFalse(node1.hasOneChild());
421:       assertFalse(node1.isNot());
422:       assertFalse(node1.isObjectLit());
423:       assertEquals((-1), node1.getSourcePosition());
424:       assertFalse(node1.isScript());
425:       assertFalse(node1.isNumber());
426:       assertFalse(node1.isAssignAdd());
427:       assertFalse(node1.isLabel());
428:       assertFalse(node1.isAnd());
429:       assertFalse(node1.isLabelName());
430:       assertFalse(node1.isFalse());
431:       assertEquals(38, node1.getType());
432:       assertFalse(node1.isCast());
433:       assertFalse(node1.isContinue());
434:       assertFalse(node1.isBlock());
435:       assertEquals((-1), node1.getCharno());
436:       assertFalse(node1.isSwitch());
437:       assertFalse(node1.isHook());
438:       assertFalse(node1.isThrow());
439:       assertFalse(node1.isStringKey());
440:       assertFalse(node1.isCase());
441:       assertFalse(node1.isInc());
442:       assertFalse(node1.isSetterDef());
443:       assertFalse(node1.isIn());
444:       assertEquals((-1), node1.getLineno());
445:       assertTrue(node1.isName());
446:       assertFalse(node1.isNE());
447:       assertFalse(node1.isThis());
448:       assertFalse(node1.isIf());
449:       assertFalse(node1.isFor());
450:       assertFalse(node1.isWith());
451:       assertFalse(node1.isRegExp());
452:       assertFalse(node1.hasMoreThanOneChild());
453:       assertFalse(node1.isInstanceOf());
454:       assertFalse(node1.isCatch());
455:       assertFalse(node1.isTry());
456:       assertFalse(node1.isVoid());
457:       assertFalse(node1.isDebugger());
458:       assertFalse(node1.isTrue());
459:       assertFalse(node1.isDefaultCase());
460:       assertFalse(node1.isEmpty());
461:       assertFalse(node1.isGetterDef());
462:       assertEquals(0, node1.getChildCount());
463:       assertFalse(node1.isParamList());
464:       assertFalse(node1.isArrayLit());
465:       assertFalse(node1.isFunction());
466:       assertFalse(node1.isAdd());
467:       assertFalse(node1.isNew());
468:       assertFalse(node1.isVar());
469:       assertFalse(node1.isWhile());
470:       assertFalse(node1.isDo());
471:       assertFalse(node1.isString());
472:       assertFalse(node1.isOr());
473:       assertFalse(node1.isReturn());
474:       assertFalse(node1.isGetProp());
475:       assertFalse(node1.isComma());
476:       assertFalse(node1.isNull());
477:       assertFalse(node1.isAssign());
478:       assertFalse(node1.isGetElem());
479:       assertFalse(node1.hasChildren());
480:       assertFalse(node1.isBreak());
481:       assertFalse(node1.isDelProp());
482:       assertFalse(node1.isDec());
483:       assertFalse(node1.isTypeOf());
484:       assertFalse(node1.isExprResult());
485:       assertFalse(node1.isCall());
486:       
487:       Node node2 = Node.newNumber((double) 12, 36, 37);
488:       assertFalse(node2.equals((Object)node1));
489:       assertFalse(node2.equals((Object)node0));
490:       assertNotNull(node2);
491:       assertFalse(node2.isVar());
492:       assertFalse(node2.isBlock());
493:       assertFalse(node2.isWhile());
494:       assertFalse(node2.isAdd());
495:       assertFalse(node2.isSetterDef());
496:       assertFalse(node2.isDo());
497:       assertFalse(node2.isNew());
498:       assertFalse(node2.isReturn());
499:       assertFalse(node2.hasMoreThanOneChild());
500:       assertFalse(node2.isCatch());
501:       assertFalse(node2.isOr());
502:       assertEquals(39, node2.getType());
503:       assertFalse(node2.isDec());
504:       assertFalse(node2.isTypeOf());
505:       assertFalse(node2.isRegExp());
506:       assertFalse(node2.isNull());
507:       assertEquals(36, node2.getLineno());
508:       assertFalse(node2.isVoid());
509:       assertFalse(node2.isGetElem());
510:       assertFalse(node2.isName());
511:       assertFalse(node2.isCall());
512:       assertFalse(node2.isTrue());
513:       assertFalse(node2.isGetterDef());
514:       assertFalse(node2.isDefaultCase());
515:       assertFalse(node2.isScript());
516:       assertFalse(node2.isEmpty());
517:       assertFalse(node2.isFor());
518:       assertFalse(node2.isTry());
519:       assertFalse(node2.hasOneChild());
520:       assertEquals(0, node2.getChildCount());
521:       assertFalse(node2.isAssignAdd());
522:       assertFalse(node2.isLabel());
523:       assertFalse(node2.isSwitch());
524:       assertFalse(node2.isStringKey());
525:       assertFalse(node2.isParamList());
526:       assertFalse(node2.isLabelName());
527:       assertFalse(node2.isArrayLit());
528:       assertFalse(node2.isHook());
529:       assertFalse(node2.isThrow());
530:       assertFalse(node2.isFalse());
531:       assertEquals(147493, node2.getSourcePosition());
532:       assertFalse(node2.isString());
533:       assertFalse(node2.isGetProp());
534:       assertFalse(node2.isInc());
535:       assertFalse(node2.isCase());
536:       assertFalse(node2.isIn());
537:       assertFalse(node2.isInstanceOf());
538:       assertFalse(node2.isThis());
539:       assertFalse(node2.isComma());
540:       assertFalse(node2.isBreak());
541:       assertFalse(node2.isIf());
542:       assertFalse(node2.isDelProp());
543:       assertFalse(node2.isWith());
544:       assertFalse(node2.isNE());
545:       assertFalse(node2.isExprResult());
546:       assertEquals(37, node2.getCharno());
547:       assertFalse(node2.isCast());
548:       assertFalse(node2.isFunction());
549:       assertFalse(node2.isAssign());
550:       assertFalse(node2.isDebugger());
551:       assertFalse(node2.hasChildren());
552:       assertTrue(node2.isNumber());
553:       assertFalse(node2.isAnd());
554:       assertFalse(node2.isContinue());
555:       assertFalse(node2.isObjectLit());
556:       assertFalse(node2.isNot());
557:       
558:       Node node3 = node0.copyInformationFrom(node2);
559:       assertFalse(node0.equals((Object)node1));
560:       assertFalse(node0.equals((Object)node2));
561:       assertFalse(node2.equals((Object)node1));
562:       assertFalse(node2.equals((Object)node0));
563:       assertFalse(node3.equals((Object)node2));
564:       assertFalse(node3.equals((Object)node1));
565:       assertSame(node0, node3);
566:       assertNotSame(node0, node1);
567:       assertSame(node3, node0);
568:       assertNotSame(node3, node1);
569:       assertNotNull(node3);
570:       assertFalse(node0.isVoid());
571:       assertFalse(node0.isTry());
572:       assertFalse(node0.isArrayLit());
573:       assertFalse(node0.isDefaultCase());
574:       assertFalse(node0.isRegExp());
575:       assertFalse(node0.isFunction());
576:       assertFalse(node0.isFor());
577:       assertEquals(40, node0.getType());
578:       assertEquals(0, node0.getChildCount());
579:       assertFalse(node0.isCase());
580:       assertFalse(node0.isGetterDef());
581:       assertFalse(node0.isSwitch());
582:       assertFalse(node0.isParamList());
583:       assertFalse(node0.isStringKey());
584:       assertFalse(node0.isDebugger());
585:       assertFalse(node0.isHook());
586:       assertFalse(node0.isInc());
587:       assertTrue(node0.isString());
588:       assertFalse(node0.isFalse());
589:       assertFalse(node0.isThrow());
590:       assertFalse(node0.isThis());
591:       assertFalse(node0.isBlock());
592:       assertFalse(node0.isInstanceOf());
593:       assertFalse(node0.isIn());
594:       assertFalse(node0.hasMoreThanOneChild());
595:       assertFalse(node0.isCatch());
596:       assertEquals(37, node0.getCharno());
597:       assertFalse(node0.isSetterDef());
598:       assertFalse(node0.isIf());
599:       assertFalse(node0.isNE());
600:       assertEquals(147493, node0.getSourcePosition());
601:       assertFalse(node0.isCast());
602:       assertFalse(node0.isGetElem());
603:       assertFalse(node0.isExprResult());
604:       assertFalse(node0.isLabelName());
605:       assertFalse(node0.hasOneChild());
606:       assertFalse(node0.isDec());
607:       assertFalse(node0.hasChildren());
608:       assertFalse(node0.isTypeOf());
609:       assertFalse(node0.isWith());
610:       assertEquals(36, node0.getLineno());
611:       assertFalse(node0.isAssign());
612:       assertFalse(node0.isLabel());
613:       assertFalse(node0.isReturn());
614:       assertFalse(node0.isContinue());
615:       assertFalse(node0.isAnd());
616:       assertFalse(node0.isGetProp());
617:       assertFalse(node0.isNumber());
618:       assertFalse(node0.isScript());
619:       assertFalse(node0.isObjectLit());
620:       assertFalse(node0.isNot());
621:       assertFalse(node0.isVar());
622:       assertFalse(node0.isAdd());
623:       assertFalse(node0.isName());
624:       assertFalse(node0.isCall());
625:       assertFalse(node0.isNew());
626:       assertFalse(node0.isBreak());
627:       assertFalse(node0.isWhile());
628:       assertFalse(node0.isComma());
629:       assertFalse(node0.isAssignAdd());
630:       assertFalse(node0.isDo());
631:       assertFalse(node0.isNull());
632:       assertFalse(node0.isDelProp());
633:       assertFalse(node0.isEmpty());
634:       assertFalse(node0.isTrue());
635:       assertFalse(node0.isOr());
636:       assertFalse(node2.isVar());
637:       assertFalse(node2.isBlock());
638:       assertFalse(node2.isWhile());
639:       assertFalse(node2.isAdd());
640:       assertFalse(node2.isSetterDef());
641:       assertFalse(node2.isDo());
642:       assertFalse(node2.isNew());
643:       assertFalse(node2.isReturn());
644:       assertFalse(node2.hasMoreThanOneChild());
645:       assertFalse(node2.isCatch());
646:       assertFalse(node2.isOr());
647:       assertEquals(39, node2.getType());
648:       assertFalse(node2.isDec());
649:       assertFalse(node2.isTypeOf());
650:       assertFalse(node2.isRegExp());
651:       assertFalse(node2.isNull());
652:       assertEquals(36, node2.getLineno());
653:       assertFalse(node2.isVoid());
654:       assertFalse(node2.isGetElem());
655:       assertFalse(node2.isName());
656:       assertFalse(node2.isCall());
657:       assertFalse(node2.isTrue());
658:       assertFalse(node2.isGetterDef());
659:       assertFalse(node2.isDefaultCase());
660:       assertFalse(node2.isScript());
661:       assertFalse(node2.isEmpty());
662:       assertFalse(node2.isFor());
663:       assertFalse(node2.isTry());
664:       assertFalse(node2.hasOneChild());
665:       assertEquals(0, node2.getChildCount());
666:       assertFalse(node2.isAssignAdd());
667:       assertFalse(node2.isLabel());
668:       assertFalse(node2.isSwitch());
669:       assertFalse(node2.isStringKey());
670:       assertFalse(node2.isParamList());
671:       assertFalse(node2.isLabelName());
672:       assertFalse(node2.isArrayLit());
673:       assertFalse(node2.isHook());
674:       assertFalse(node2.isThrow());
675:       assertFalse(node2.isFalse());
676:       assertEquals(147493, node2.getSourcePosition());
677:       assertFalse(node2.isString());
678:       assertFalse(node2.isGetProp());
679:       assertFalse(node2.isInc());
680:       assertFalse(node2.isCase());
681:       assertFalse(node2.isIn());
682:       assertFalse(node2.isInstanceOf());
683:       assertFalse(node2.isThis());
684:       assertFalse(node2.isComma());
685:       assertFalse(node2.isBreak());
686:       assertFalse(node2.isIf());
687:       assertFalse(node2.isDelProp());
688:       assertFalse(node2.isWith());
689:       assertFalse(node2.isNE());
690:       assertFalse(node2.isExprResult());
691:       assertEquals(37, node2.getCharno());
692:       assertFalse(node2.isCast());
693:       assertFalse(node2.isFunction());
694:       assertFalse(node2.isAssign());
695:       assertFalse(node2.isDebugger());
696:       assertFalse(node2.hasChildren());
697:       assertTrue(node2.isNumber());
698:       assertFalse(node2.isAnd());
699:       assertFalse(node2.isContinue());
700:       assertFalse(node2.isObjectLit());
701:       assertFalse(node2.isNot());
702:       assertFalse(node3.isThis());
703:       assertFalse(node3.isComma());
704:       assertFalse(node3.isAnd());
705:       assertFalse(node3.isNot());
706:       assertFalse(node3.isObjectLit());
707:       assertFalse(node3.isGetProp());
708:       assertFalse(node3.isScript());
709:       assertEquals(147493, node3.getSourcePosition());
710:       assertFalse(node3.hasOneChild());
711:       assertFalse(node3.isHook());
712:       assertFalse(node3.isAssign());
713:       assertFalse(node3.isWith());
714:       assertFalse(node3.isDec());
715:       assertFalse(node3.isTypeOf());
716:       assertEquals(37, node3.getCharno());
717:       assertEquals(36, node3.getLineno());
718:       assertFalse(node3.isGetElem());
719:       assertFalse(node3.isInstanceOf());
720:       assertFalse(node3.isBreak());
721:       assertFalse(node3.isExprResult());
722:       assertFalse(node3.isAssignAdd());
723:       assertFalse(node3.isOr());
724:       assertFalse(node3.isLabel());
725:       assertFalse(node3.isDo());
726:       assertFalse(node3.isCase());
727:       assertFalse(node3.isNumber());
728:       assertFalse(node3.isGetterDef());
729:       assertFalse(node3.isAdd());
730:       assertFalse(node3.isEmpty());
731:       assertFalse(node3.isNew());
732:       assertFalse(node3.isSwitch());
733:       assertFalse(node3.isStringKey());
734:       assertFalse(node3.isVar());
735:       assertFalse(node3.isLabelName());
736:       assertFalse(node3.isArrayLit());
737:       assertEquals(0, node3.getChildCount());
738:       assertFalse(node3.isParamList());
739:       assertFalse(node3.isNull());
740:       assertEquals(40, node3.getType());
741:       assertFalse(node3.isDefaultCase());
742:       assertFalse(node3.isSetterDef());
743:       assertFalse(node3.isTry());
744:       assertFalse(node3.isVoid());
745:       assertTrue(node3.isString());
746:       assertFalse(node3.isBlock());
747:       assertFalse(node3.isFor());
748:       assertFalse(node3.isTrue());
749:       assertFalse(node3.isIf());
750:       assertFalse(node3.isRegExp());
751:       assertFalse(node3.isName());
752:       assertFalse(node3.isDelProp());
753:       assertFalse(node3.hasMoreThanOneChild());
754:       assertFalse(node3.isCatch());
755:       assertFalse(node3.isCall());
756:       assertFalse(node3.isReturn());
757:       assertFalse(node3.isIn());
758:       assertFalse(node3.isNE());
759:       assertFalse(node3.hasChildren());
760:       assertFalse(node3.isWhile());
761:       assertFalse(node3.isInc());
762:       assertFalse(node3.isFunction());
763:       assertFalse(node3.isDebugger());
764:       assertFalse(node3.isThrow());
765:       assertFalse(node3.isFalse());
766:       assertFalse(node3.isCast());
767:       assertFalse(node3.isContinue());
768:       
769:       boolean boolean2 = node0.getBooleanProp(53);
770:       assertFalse(node0.equals((Object)node1));
771:       assertFalse(node0.equals((Object)node2));
772:       assertTrue(boolean2 == boolean0);
773:       assertTrue(boolean2 == boolean1);
774:       assertSame(node0, node3);
775:       assertNotSame(node0, node1);
776:       assertFalse(node0.isVoid());
777:       assertFalse(node0.isTry());
778:       assertFalse(node0.isArrayLit());
779:       assertFalse(node0.isDefaultCase());
780:       assertFalse(node0.isRegExp());
781:       assertFalse(node0.isFunction());
782:       assertFalse(node0.isFor());
783:       assertEquals(40, node0.getType());
784:       assertEquals(0, node0.getChildCount());
785:       assertFalse(node0.isCase());
786:       assertFalse(node0.isGetterDef());
787:       assertFalse(node0.isSwitch());
788:       assertFalse(node0.isParamList());
789:       assertFalse(node0.isStringKey());
790:       assertFalse(node0.isDebugger());
791:       assertFalse(node0.isHook());
792:       assertFalse(node0.isInc());
793:       assertTrue(node0.isString());
794:       assertFalse(node0.isFalse());
795:       assertFalse(node0.isThrow());
796:       assertFalse(node0.isThis());
797:       assertFalse(node0.isBlock());
798:       assertFalse(node0.isInstanceOf());
799:       assertFalse(node0.isIn());
800:       assertFalse(node0.hasMoreThanOneChild());
801:       assertFalse(node0.isCatch());
802:       assertEquals(37, node0.getCharno());
803:       assertFalse(node0.isSetterDef());
804:       assertFalse(node0.isIf());
805:       assertFalse(node0.isNE());
806:       assertEquals(147493, node0.getSourcePosition());
807:       assertFalse(node0.isCast());
808:       assertFalse(node0.isGetElem());
809:       assertFalse(node0.isExprResult());
810:       assertFalse(node0.isLabelName());
811:       assertFalse(node0.hasOneChild());
812:       assertFalse(node0.isDec());
813:       assertFalse(node0.hasChildren());
814:       assertFalse(node0.isTypeOf());
815:       assertFalse(node0.isWith());
816:       assertEquals(36, node0.getLineno());
817:       assertFalse(node0.isAssign());
818:       assertFalse(node0.isLabel());
819:       assertFalse(node0.isReturn());
820:       assertFalse(node0.isContinue());
821:       assertFalse(node0.isAnd());
822:       assertFalse(node0.isGetProp());
823:       assertFalse(node0.isNumber());
824:       assertFalse(node0.isScript());
825:       assertFalse(node0.isObjectLit());
826:       assertFalse(node0.isNot());
827:       assertFalse(node0.isVar());
828:       assertFalse(node0.isAdd());
829:       assertFalse(node0.isName());
830:       assertFalse(node0.isCall());
831:       assertFalse(node0.isNew());
832:       assertFalse(node0.isBreak());
833:       assertFalse(node0.isWhile());
834:       assertFalse(node0.isComma());
835:       assertFalse(node0.isAssignAdd());
836:       assertFalse(node0.isDo());
837:       assertFalse(node0.isNull());
838:       assertFalse(node0.isDelProp());
839:       assertFalse(node0.isEmpty());
840:       assertFalse(node0.isTrue());
841:       assertFalse(node0.isOr());
842:       assertFalse(boolean2);
843:       
844:       boolean boolean3 = node0.isReturn();
845:       assertFalse(node0.equals((Object)node1));
846:       assertFalse(node0.equals((Object)node2));
847:       assertTrue(boolean3 == boolean2);
848:       assertTrue(boolean3 == boolean0);
849:       assertTrue(boolean3 == boolean1);
850:       assertSame(node0, node3);
851:       assertNotSame(node0, node1);
852:       assertFalse(node0.isVoid());
853:       assertFalse(node0.isTry());
854:       assertFalse(node0.isArrayLit());
855:       assertFalse(node0.isDefaultCase());
856:       assertFalse(node0.isRegExp());
857:       assertFalse(node0.isFunction());
858:       assertFalse(node0.isFor());
859:       assertEquals(40, node0.getType());
860:       assertEquals(0, node0.getChildCount());
861:       assertFalse(node0.isCase());
862:       assertFalse(node0.isGetterDef());
863:       assertFalse(node0.isSwitch());
864:       assertFalse(node0.isParamList());
865:       assertFalse(node0.isStringKey());
866:       assertFalse(node0.isDebugger());
867:       assertFalse(node0.isHook());
868:       assertFalse(node0.isInc());
869:       assertTrue(node0.isString());
870:       assertFalse(node0.isFalse());
871:       assertFalse(node0.isThrow());
872:       assertFalse(node0.isThis());
873:       assertFalse(node0.isBlock());
874:       assertFalse(node0.isInstanceOf());
875:       assertFalse(node0.isIn());
876:       assertFalse(node0.hasMoreThanOneChild());
877:       assertFalse(node0.isCatch());
878:       assertEquals(37, node0.getCharno());
879:       assertFalse(node0.isSetterDef());
880:       assertFalse(node0.isIf());
881:       assertFalse(node0.isNE());
882:       assertEquals(147493, node0.getSourcePosition());
883:       assertFalse(node0.isCast());
884:       assertFalse(node0.isGetElem());
885:       assertFalse(node0.isExprResult());
886:       assertFalse(node0.isLabelName());
887:       assertFalse(node0.hasOneChild());
888:       assertFalse(node0.isDec());
889:       assertFalse(node0.hasChildren());
890:       assertFalse(node0.isTypeOf());
891:       assertFalse(node0.isWith());
892:       assertEquals(36, node0.getLineno());
893:       assertFalse(node0.isAssign());
894:       assertFalse(node0.isLabel());
895:       assertFalse(node0.isReturn());
896:       assertFalse(node0.isContinue());
897:       assertFalse(node0.isAnd());
898:       assertFalse(node0.isGetProp());
899:       assertFalse(node0.isNumber());
900:       assertFalse(node0.isScript());
901:       assertFalse(node0.isObjectLit());
902:       assertFalse(node0.isNot());
903:       assertFalse(node0.isVar());
904:       assertFalse(node0.isAdd());
905:       assertFalse(node0.isName());
906:       assertFalse(node0.isCall());
907:       assertFalse(node0.isNew());
908:       assertFalse(node0.isBreak());
909:       assertFalse(node0.isWhile());
910:       assertFalse(node0.isComma());
911:       assertFalse(node0.isAssignAdd());
912:       assertFalse(node0.isDo());
913:       assertFalse(node0.isNull());
914:       assertFalse(node0.isDelProp());
915:       assertFalse(node0.isEmpty());
916:       assertFalse(node0.isTrue());
917:       assertFalse(node0.isOr());
918:       assertFalse(boolean3);
919:       
920:       Node node4 = new Node(471, node3, node3, node0, node1);
921:       assertFalse(node0.equals((Object)node1));
922:       assertFalse(node0.equals((Object)node2));
923:       assertFalse(node1.equals((Object)node2));
924:       assertFalse(node1.equals((Object)node0));
925:       assertFalse(node1.equals((Object)node3));
926:       assertFalse(node2.equals((Object)node1));
927:       assertFalse(node2.equals((Object)node0));
928:       assertFalse(node2.equals((Object)node3));
929:       assertFalse(node3.equals((Object)node2));
930:       assertFalse(node3.equals((Object)node1));
931:       assertFalse(node4.equals((Object)node1));
932:       assertFalse(node4.equals((Object)node3));
933:       assertFalse(node4.equals((Object)node2));
934:       assertFalse(node4.equals((Object)node0));
935:       assertNotNull(node4);
936:       assertFalse(node0.isVoid());
937:       assertFalse(node0.isTry());
938:       assertFalse(node0.isArrayLit());
939:       assertFalse(node0.isDefaultCase());
940:       assertFalse(node0.isRegExp());
941:       assertFalse(node0.isFunction());
942:       assertFalse(node0.isFor());
943:       assertEquals(40, node0.getType());
944:       assertEquals(0, node0.getChildCount());
945:       assertFalse(node0.isCase());
946:       assertFalse(node0.isGetterDef());
947:       assertFalse(node0.isSwitch());
948:       assertFalse(node0.isParamList());
949:       assertFalse(node0.isStringKey());
950:       assertFalse(node0.isDebugger());
951:       assertFalse(node0.isHook());
952:       assertFalse(node0.isInc());
953:       assertTrue(node0.isString());
954:       assertFalse(node0.isFalse());
955:       assertFalse(node0.isThrow());
956:       assertFalse(node0.isThis());
957:       assertFalse(node0.isBlock());
958:       assertFalse(node0.isInstanceOf());
959:       assertFalse(node0.isIn());
960:       assertFalse(node0.hasMoreThanOneChild());
961:       assertFalse(node0.isCatch());
962:       assertEquals(37, node0.getCharno());
963:       assertFalse(node0.isSetterDef());
964:       assertFalse(node0.isIf());
965:       assertFalse(node0.isNE());
966:       assertEquals(147493, node0.getSourcePosition());
967:       assertFalse(node0.isCast());
968:       assertFalse(node0.isGetElem());
969:       assertFalse(node0.isExprResult());
970:       assertFalse(node0.isLabelName());
971:       assertFalse(node0.hasOneChild());
972:       assertFalse(node0.isDec());
973:       assertFalse(node0.hasChildren());
974:       assertFalse(node0.isTypeOf());
975:       assertFalse(node0.isWith());
976:       assertEquals(36, node0.getLineno());
977:       assertFalse(node0.isAssign());
978:       assertFalse(node0.isLabel());
979:       assertFalse(node0.isReturn());
980:       assertFalse(node0.isContinue());
981:       assertFalse(node0.isAnd());
982:       assertFalse(node0.isGetProp());
983:       assertFalse(node0.isNumber());
984:       assertFalse(node0.isScript());
985:       assertFalse(node0.isObjectLit());
986:       assertFalse(node0.isNot());
987:       assertFalse(node0.isVar());
988:       assertFalse(node0.isAdd());
989:       assertFalse(node0.isName());
990:       assertFalse(node0.isCall());
991:       assertFalse(node0.isNew());
992:       assertFalse(node0.isBreak());
993:       assertFalse(node0.isWhile());
994:       assertFalse(node0.isComma());
995:       assertFalse(node0.isAssignAdd());
996:       assertFalse(node0.isDo());
997:       assertFalse(node0.isNull());
998:       assertFalse(node0.isDelProp());
999:       assertFalse(node0.isEmpty());
1000:       assertFalse(node0.isTrue());
1001:       assertFalse(node0.isOr());
1002:       assertFalse(node1.hasOneChild());
1003:       assertFalse(node1.isNot());
1004:       assertFalse(node1.isObjectLit());
1005:       assertEquals((-1), node1.getSourcePosition());
1006:       assertFalse(node1.isScript());
1007:       assertFalse(node1.isNumber());
1008:       assertFalse(node1.isAssignAdd());
1009:       assertFalse(node1.isLabel());
1010:       assertFalse(node1.isAnd());
1011:       assertFalse(node1.isLabelName());
1012:       assertFalse(node1.isFalse());
1013:       assertEquals(38, node1.getType());
1014:       assertFalse(node1.isCast());
1015:       assertFalse(node1.isContinue());
1016:       assertFalse(node1.isBlock());
1017:       assertEquals((-1), node1.getCharno());
1018:       assertFalse(node1.isSwitch());
1019:       assertFalse(node1.isHook());
1020:       assertFalse(node1.isThrow());
1021:       assertFalse(node1.isStringKey());
1022:       assertFalse(node1.isCase());
1023:       assertFalse(node1.isInc());
1024:       assertFalse(node1.isSetterDef());
1025:       assertFalse(node1.isIn());
1026:       assertEquals((-1), node1.getLineno());
1027:       assertTrue(node1.isName());
1028:       assertFalse(node1.isNE());
1029:       assertFalse(node1.isThis());
1030:       assertFalse(node1.isIf());
1031:       assertFalse(node1.isFor());
1032:       assertFalse(node1.isWith());
1033:       assertFalse(node1.isRegExp());
1034:       assertFalse(node1.hasMoreThanOneChild());
1035:       assertFalse(node1.isInstanceOf());
1036:       assertFalse(node1.isCatch());
1037:       assertFalse(node1.isTry());
1038:       assertFalse(node1.isVoid());
1039:       assertFalse(node1.isDebugger());
1040:       assertFalse(node1.isTrue());
1041:       assertFalse(node1.isDefaultCase());
1042:       assertFalse(node1.isEmpty());
1043:       assertFalse(node1.isGetterDef());
1044:       assertEquals(0, node1.getChildCount());
1045:       assertFalse(node1.isParamList());
1046:       assertFalse(node1.isArrayLit());
1047:       assertFalse(node1.isFunction());
1048:       assertFalse(node1.isAdd());
1049:       assertFalse(node1.isNew());
1050:       assertFalse(node1.isVar());
1051:       assertFalse(node1.isWhile());
1052:       assertFalse(node1.isDo());
1053:       assertFalse(node1.isString());
1054:       assertFalse(node1.isOr());
1055:       assertFalse(node1.isReturn());
1056:       assertFalse(node1.isGetProp());
1057:       assertFalse(node1.isComma());
1058:       assertFalse(node1.isNull());
1059:       assertFalse(node1.isAssign());
1060:       assertFalse(node1.isGetElem());
1061:       assertFalse(node1.hasChildren());
1062:       assertFalse(node1.isBreak());
1063:       assertFalse(node1.isDelProp());
1064:       assertFalse(node1.isDec());
1065:       assertFalse(node1.isTypeOf());
1066:       assertFalse(node1.isExprResult());
1067:       assertFalse(node1.isCall());
1068:       assertFalse(node2.isVar());
1069:       assertFalse(node2.isBlock());
1070:       assertFalse(node2.isWhile());
1071:       assertFalse(node2.isAdd());
1072:       assertFalse(node2.isSetterDef());
1073:       assertFalse(node2.isDo());
1074:       assertFalse(node2.isNew());
1075:       assertFalse(node2.isReturn());
1076:       assertFalse(node2.hasMoreThanOneChild());
1077:       assertFalse(node2.isCatch());
1078:       assertFalse(node2.isOr());
1079:       assertEquals(39, node2.getType());
1080:       assertFalse(node2.isDec());
1081:       assertFalse(node2.isTypeOf());
1082:       assertFalse(node2.isRegExp());
1083:       assertFalse(node2.isNull());
1084:       assertEquals(36, node2.getLineno());
1085:       assertFalse(node2.isVoid());
1086:       assertFalse(node2.isGetElem());
1087:       assertFalse(node2.isName());
1088:       assertFalse(node2.isCall());
1089:       assertFalse(node2.isTrue());
1090:       assertFalse(node2.isGetterDef());
1091:       assertFalse(node2.isDefaultCase());
1092:       assertFalse(node2.isScript());
1093:       assertFalse(node2.isEmpty());
1094:       assertFalse(node2.isFor());
1095:       assertFalse(node2.isTry());
1096:       assertFalse(node2.hasOneChild());
1097:       assertEquals(0, node2.getChildCount());
1098:       assertFalse(node2.isAssignAdd());
1099:       assertFalse(node2.isLabel());
1100:       assertFalse(node2.isSwitch());
1101:       assertFalse(node2.isStringKey());
1102:       assertFalse(node2.isParamList());
1103:       assertFalse(node2.isLabelName());
1104:       assertFalse(node2.isArrayLit());
1105:       assertFalse(node2.isHook());
1106:       assertFalse(node2.isThrow());
1107:       assertFalse(node2.isFalse());
1108:       assertEquals(147493, node2.getSourcePosition());
1109:       assertFalse(node2.isString());
1110:       assertFalse(node2.isGetProp());
1111:       assertFalse(node2.isInc());
1112:       assertFalse(node2.isCase());
1113:       assertFalse(node2.isIn());
1114:       assertFalse(node2.isInstanceOf());
1115:       assertFalse(node2.isThis());
1116:       assertFalse(node2.isComma());
1117:       assertFalse(node2.isBreak());
1118:       assertFalse(node2.isIf());
1119:       assertFalse(node2.isDelProp());
1120:       assertFalse(node2.isWith());
1121:       assertFalse(node2.isNE());
1122:       assertFalse(node2.isExprResult());
1123:       assertEquals(37, node2.getCharno());
1124:       assertFalse(node2.isCast());
1125:       assertFalse(node2.isFunction());
1126:       assertFalse(node2.isAssign());
1127:       assertFalse(node2.isDebugger());
1128:       assertFalse(node2.hasChildren());
1129:       assertTrue(node2.isNumber());
1130:       assertFalse(node2.isAnd());
1131:       assertFalse(node2.isContinue());
1132:       assertFalse(node2.isObjectLit());
1133:       assertFalse(node2.isNot());
1134:       assertFalse(node3.isThis());
1135:       assertFalse(node3.isComma());
1136:       assertFalse(node3.isAnd());
1137:       assertFalse(node3.isNot());
1138:       assertFalse(node3.isObjectLit());
1139:       assertFalse(node3.isGetProp());
1140:       assertFalse(node3.isScript());
1141:       assertEquals(147493, node3.getSourcePosition());
1142:       assertFalse(node3.hasOneChild());
1143:       assertFalse(node3.isHook());
1144:       assertFalse(node3.isAssign());
1145:       assertFalse(node3.isWith());
1146:       assertFalse(node3.isDec());
1147:       assertFalse(node3.isTypeOf());
1148:       assertEquals(37, node3.getCharno());
1149:       assertEquals(36, node3.getLineno());
1150:       assertFalse(node3.isGetElem());
1151:       assertFalse(node3.isInstanceOf());
1152:       assertFalse(node3.isBreak());
1153:       assertFalse(node3.isExprResult());
1154:       assertFalse(node3.isAssignAdd());
1155:       assertFalse(node3.isOr());
1156:       assertFalse(node3.isLabel());
1157:       assertFalse(node3.isDo());
1158:       assertFalse(node3.isCase());
1159:       assertFalse(node3.isNumber());
1160:       assertFalse(node3.isGetterDef());
1161:       assertFalse(node3.isAdd());
1162:       assertFalse(node3.isEmpty());
1163:       assertFalse(node3.isNew());
1164:       assertFalse(node3.isSwitch());
1165:       assertFalse(node3.isStringKey());
1166:       assertFalse(node3.isVar());
1167:       assertFalse(node3.isLabelName());
1168:       assertFalse(node3.isArrayLit());
1169:       assertEquals(0, node3.getChildCount());
1170:       assertFalse(node3.isParamList());
1171:       assertFalse(node3.isNull());
1172:       assertEquals(40, node3.getType());
1173:       assertFalse(node3.isDefaultCase());
1174:       assertFalse(node3.isSetterDef());
1175:       assertFalse(node3.isTry());
1176:       assertFalse(node3.isVoid());
1177:       assertTrue(node3.isString());
1178:       assertFalse(node3.isBlock());
1179:       assertFalse(node3.isFor());
1180:       assertFalse(node3.isTrue());
1181:       assertFalse(node3.isIf());
1182:       assertFalse(node3.isRegExp());
1183:       assertFalse(node3.isName());
1184:       assertFalse(node3.isDelProp());
1185:       assertFalse(node3.hasMoreThanOneChild());
1186:       assertFalse(node3.isCatch());
1187:       assertFalse(node3.isCall());
1188:       assertFalse(node3.isReturn());
1189:       assertFalse(node3.isIn());
1190:       assertFalse(node3.isNE());
1191:       assertFalse(node3.hasChildren());
1192:       assertFalse(node3.isWhile());
1193:       assertFalse(node3.isInc());
1194:       assertFalse(node3.isFunction());
1195:       assertFalse(node3.isDebugger());
1196:       assertFalse(node3.isThrow());
1197:       assertFalse(node3.isFalse());
1198:       assertFalse(node3.isCast());
1199:       assertFalse(node3.isContinue());
1200:       assertFalse(node4.isCall());
1201:       assertFalse(node4.isStringKey());
1202:       assertFalse(node4.isName());
1203:       assertFalse(node4.isVar());
1204:       assertFalse(node4.isBlock());
1205:       assertFalse(node4.isNull());
1206:       assertFalse(node4.isDo());
1207:       assertFalse(node4.isAdd());
1208:       assertFalse(node4.isNew());
1209:       assertFalse(node4.isSetterDef());
1210:       assertFalse(node4.isCatch());
1211:       assertFalse(node4.isWhile());
1212:       assertFalse(node4.isOr());
1213:       assertFalse(node4.isReturn());
1214:       assertFalse(node4.isTrue());
1215:       assertFalse(node4.isVoid());
1216:       assertFalse(node4.isTypeOf());
1217:       assertFalse(node4.isRegExp());
1218:       assertEquals((-1), node4.getLineno());
1219:       assertFalse(node4.isGetElem());
1220:       assertFalse(node4.isGetterDef());
1221:       assertFalse(node4.isFor());
1222:       assertFalse(node4.isTry());
1223:       assertFalse(node4.isAssignAdd());
1224:       assertFalse(node4.isNumber());
1225:       assertFalse(node4.isDefaultCase());
1226:       assertFalse(node4.hasOneChild());
1227:       assertFalse(node4.isScript());
1228:       assertFalse(node4.isEmpty());
1229:       assertFalse(node4.isLabel());
1230:       assertFalse(node4.isParamList());
1231:       assertFalse(node4.isSwitch());
1232:       assertFalse(node4.isLabelName());
1233:       assertFalse(node4.isArrayLit());
1234:       assertFalse(node4.isThrow());
1235:       assertFalse(node4.isFalse());
1236:       assertFalse(node4.isHook());
1237:       assertFalse(node4.isThis());
1238:       assertEquals(471, node4.getType());
1239:       assertEquals((-1), node4.getCharno());
1240:       assertFalse(node4.isString());
1241:       assertFalse(node4.isCase());
1242:       assertFalse(node4.isInc());
1243:       assertFalse(node4.isGetProp());
1244:       assertFalse(node4.isWith());
1245:       assertFalse(node4.isIn());
1246:       assertFalse(node4.isExprResult());
1247:       assertFalse(node4.isNE());
1248:       assertFalse(node4.isComma());
1249:       assertFalse(node4.isIf());
1250:       assertFalse(node4.isBreak());
1251:       assertFalse(node4.isDelProp());
1252:       assertTrue(node4.hasChildren());
1253:       assertFalse(node4.isInstanceOf());
1254:       assertTrue(node4.hasMoreThanOneChild());
1255:       assertFalse(node4.isCast());
1256:       assertFalse(node4.isAssign());
1257:       assertFalse(node4.isDec());
1258:       assertEquals((-1), node4.getSourcePosition());
1259:       assertFalse(node4.isDebugger());
1260:       assertFalse(node4.isObjectLit());
1261:       assertFalse(node4.isContinue());
1262:       assertFalse(node4.isAnd());
1263:       assertFalse(node4.isNot());
1264:       assertEquals(2, node4.getChildCount());
1265:       assertFalse(node4.isFunction());
1266:       
1267:       String string0 = node2.toString(false, false, false);
1268:       assertFalse(node2.equals((Object)node1));
1269:       assertFalse(node2.equals((Object)node4));
1270:       assertFalse(node2.equals((Object)node0));
1271:       assertFalse(node2.equals((Object)node3));
1272:       assertNotNull(string0);
1273:       assertFalse(node2.isVar());
1274:       assertFalse(node2.isBlock());
1275:       assertFalse(node2.isWhile());
1276:       assertFalse(node2.isAdd());
1277:       assertFalse(node2.isSetterDef());
1278:       assertFalse(node2.isDo());
1279:       assertFalse(node2.isNew());
1280:       assertFalse(node2.isReturn());
1281:       assertFalse(node2.hasMoreThanOneChild());
1282:       assertFalse(node2.isCatch());
1283:       assertFalse(node2.isOr());
1284:       assertEquals(39, node2.getType());
1285:       assertFalse(node2.isDec());
1286:       assertFalse(node2.isTypeOf());
1287:       assertFalse(node2.isRegExp());
1288:       assertFalse(node2.isNull());
1289:       assertEquals(36, node2.getLineno());
1290:       assertFalse(node2.isVoid());
1291:       assertFalse(node2.isGetElem());
1292:       assertFalse(node2.isName());
1293:       assertFalse(node2.isCall());
1294:       assertFalse(node2.isTrue());
1295:       assertFalse(node2.isGetterDef());
1296:       assertFalse(node2.isDefaultCase());
1297:       assertFalse(node2.isScript());
1298:       assertFalse(node2.isEmpty());
1299:       assertFalse(node2.isFor());
1300:       assertFalse(node2.isTry());
1301:       assertFalse(node2.hasOneChild());
1302:       assertEquals(0, node2.getChildCount());
1303:       assertFalse(node2.isAssignAdd());
1304:       assertFalse(node2.isLabel());
1305:       assertFalse(node2.isSwitch());
1306:       assertFalse(node2.isStringKey());
1307:       assertFalse(node2.isParamList());
1308:       assertFalse(node2.isLabelName());
1309:       assertFalse(node2.isArrayLit());
1310:       assertFalse(node2.isHook());
1311:       assertFalse(node2.isThrow());
1312:       assertFalse(node2.isFalse());
1313:       assertEquals(147493, node2.getSourcePosition());
1314:       assertFalse(node2.isString());
1315:       assertFalse(node2.isGetProp());
1316:       assertFalse(node2.isInc());
1317:       assertFalse(node2.isCase());
1318:       assertFalse(node2.isIn());
1319:       assertFalse(node2.isInstanceOf());
1320:       assertFalse(node2.isThis());
1321:       assertFalse(node2.isComma());
1322:       assertFalse(node2.isBreak());
1323:       assertFalse(node2.isIf());
1324:       assertFalse(node2.isDelProp());
1325:       assertFalse(node2.isWith());
1326:       assertFalse(node2.isNE());
1327:       assertFalse(node2.isExprResult());
1328:       assertEquals(37, node2.getCharno());
1329:       assertFalse(node2.isCast());
1330:       assertFalse(node2.isFunction());
1331:       assertFalse(node2.isAssign());
1332:       assertFalse(node2.isDebugger());
1333:       assertFalse(node2.hasChildren());
1334:       assertTrue(node2.isNumber());
1335:       assertFalse(node2.isAnd());
1336:       assertFalse(node2.isContinue());
1337:       assertFalse(node2.isObjectLit());
1338:       assertFalse(node2.isNot());
1339:       assertEquals("NUMBER 12.0", string0);
1340:       
1341:       boolean boolean4 = node3.isTrue();
1342:       assertFalse(node0.equals((Object)node1));
1343:       assertFalse(node0.equals((Object)node2));
1344:       assertFalse(node0.equals((Object)node4));
1345:       assertFalse(node2.equals((Object)node1));
1346:       assertFalse(node2.equals((Object)node4));
1347:       assertFalse(node2.equals((Object)node0));
1348:       assertFalse(node2.equals((Object)node3));
1349:       assertFalse(node3.equals((Object)node2));
1350:       assertFalse(node3.equals((Object)node4));
1351:       assertFalse(node3.equals((Object)node1));
1352:       assertTrue(boolean4 == boolean1);
1353:       assertTrue(boolean4 == boolean2);
1354:       assertTrue(boolean4 == boolean0);
1355:       assertTrue(boolean4 == boolean3);
1356:       assertSame(node0, node3);
1357:       assertNotSame(node0, node1);
1358:       assertSame(node3, node0);
1359:       assertNotSame(node3, node1);
1360:       assertFalse(node0.isVoid());
1361:       assertFalse(node0.isTry());
1362:       assertFalse(node0.isArrayLit());
1363:       assertFalse(node0.isDefaultCase());
1364:       assertFalse(node0.isRegExp());
1365:       assertFalse(node0.isFunction());
1366:       assertFalse(node0.isFor());
1367:       assertEquals(40, node0.getType());
1368:       assertEquals(0, node0.getChildCount());
1369:       assertFalse(node0.isCase());
1370:       assertFalse(node0.isGetterDef());
1371:       assertFalse(node0.isSwitch());
1372:       assertFalse(node0.isParamList());
1373:       assertFalse(node0.isStringKey());
1374:       assertFalse(node0.isDebugger());
1375:       assertFalse(node0.isHook());
1376:       assertFalse(node0.isInc());
1377:       assertTrue(node0.isString());
1378:       assertFalse(node0.isFalse());
1379:       assertFalse(node0.isThrow());
1380:       assertFalse(node0.isThis());
1381:       assertFalse(node0.isBlock());
1382:       assertFalse(node0.isInstanceOf());
1383:       assertFalse(node0.isIn());
1384:       assertFalse(node0.hasMoreThanOneChild());
1385:       assertFalse(node0.isCatch());
1386:       assertEquals(37, node0.getCharno());
1387:       assertFalse(node0.isSetterDef());
1388:       assertFalse(node0.isIf());
1389:       assertFalse(node0.isNE());
1390:       assertEquals(147493, node0.getSourcePosition());
1391:       assertFalse(node0.isCast());
1392:       assertFalse(node0.isGetElem());
1393:       assertFalse(node0.isExprResult());
1394:       assertFalse(node0.isLabelName());
1395:       assertFalse(node0.hasOneChild());
1396:       assertFalse(node0.isDec());
1397:       assertFalse(node0.hasChildren());
1398:       assertFalse(node0.isTypeOf());
1399:       assertFalse(node0.isWith());
1400:       assertEquals(36, node0.getLineno());
1401:       assertFalse(node0.isAssign());
1402:       assertFalse(node0.isLabel());
1403:       assertFalse(node0.isReturn());
1404:       assertFalse(node0.isContinue());
1405:       assertFalse(node0.isAnd());
1406:       assertFalse(node0.isGetProp());
1407:       assertFalse(node0.isNumber());
1408:       assertFalse(node0.isScript());
1409:       assertFalse(node0.isObjectLit());
1410:       assertFalse(node0.isNot());
1411:       assertFalse(node0.isVar());
1412:       assertFalse(node0.isAdd());
1413:       assertFalse(node0.isName());
1414:       assertFalse(node0.isCall());
1415:       assertFalse(node0.isNew());
1416:       assertFalse(node0.isBreak());
1417:       assertFalse(node0.isWhile());
1418:       assertFalse(node0.isComma());
1419:       assertFalse(node0.isAssignAdd());
1420:       assertFalse(node0.isDo());
1421:       assertFalse(node0.isNull());
1422:       assertFalse(node0.isDelProp());
1423:       assertFalse(node0.isEmpty());
1424:       assertFalse(node0.isTrue());
1425:       assertFalse(node0.isOr());
1426:       assertFalse(node2.isVar());
1427:       assertFalse(node2.isBlock());
1428:       assertFalse(node2.isWhile());
1429:       assertFalse(node2.isAdd());
1430:       assertFalse(node2.isSetterDef());
1431:       assertFalse(node2.isDo());
1432:       assertFalse(node2.isNew());
1433:       assertFalse(node2.isReturn());
1434:       assertFalse(node2.hasMoreThanOneChild());
1435:       assertFalse(node2.isCatch());
1436:       assertFalse(node2.isOr());
1437:       assertEquals(39, node2.getType());
1438:       assertFalse(node2.isDec());
1439:       assertFalse(node2.isTypeOf());
1440:       assertFalse(node2.isRegExp());
1441:       assertFalse(node2.isNull());
1442:       assertEquals(36, node2.getLineno());
1443:       assertFalse(node2.isVoid());
1444:       assertFalse(node2.isGetElem());
1445:       assertFalse(node2.isName());
1446:       assertFalse(node2.isCall());
1447:       assertFalse(node2.isTrue());
1448:       assertFalse(node2.isGetterDef());
1449:       assertFalse(node2.isDefaultCase());
1450:       assertFalse(node2.isScript());
1451:       assertFalse(node2.isEmpty());
1452:       assertFalse(node2.isFor());
1453:       assertFalse(node2.isTry());
1454:       assertFalse(node2.hasOneChild());
1455:       assertEquals(0, node2.getChildCount());
1456:       assertFalse(node2.isAssignAdd());
1457:       assertFalse(node2.isLabel());
1458:       assertFalse(node2.isSwitch());
1459:       assertFalse(node2.isStringKey());
1460:       assertFalse(node2.isParamList());
1461:       assertFalse(node2.isLabelName());
1462:       assertFalse(node2.isArrayLit());
1463:       assertFalse(node2.isHook());
1464:       assertFalse(node2.isThrow());
1465:       assertFalse(node2.isFalse());
1466:       assertEquals(147493, node2.getSourcePosition());
1467:       assertFalse(node2.isString());
1468:       assertFalse(node2.isGetProp());
1469:       assertFalse(node2.isInc());
1470:       assertFalse(node2.isCase());
1471:       assertFalse(node2.isIn());
1472:       assertFalse(node2.isInstanceOf());
1473:       assertFalse(node2.isThis());
1474:       assertFalse(node2.isComma());
1475:       assertFalse(node2.isBreak());
1476:       assertFalse(node2.isIf());
1477:       assertFalse(node2.isDelProp());
1478:       assertFalse(node2.isWith());
1479:       assertFalse(node2.isNE());
1480:       assertFalse(node2.isExprResult());
1481:       assertEquals(37, node2.getCharno());
1482:       assertFalse(node2.isCast());
1483:       assertFalse(node2.isFunction());
1484:       assertFalse(node2.isAssign());
1485:       assertFalse(node2.isDebugger());
1486:       assertFalse(node2.hasChildren());
1487:       assertTrue(node2.isNumber());
1488:       assertFalse(node2.isAnd());
1489:       assertFalse(node2.isContinue());
1490:       assertFalse(node2.isObjectLit());
1491:       assertFalse(node2.isNot());
1492:       assertFalse(node3.isThis());
1493:       assertFalse(node3.isComma());
1494:       assertFalse(node3.isAnd());
1495:       assertFalse(node3.isNot());
1496:       assertFalse(node3.isObjectLit());
1497:       assertFalse(node3.isGetProp());
1498:       assertFalse(node3.isScript());
1499:       assertEquals(147493, node3.getSourcePosition());
1500:       assertFalse(node3.hasOneChild());
1501:       assertFalse(node3.isHook());
1502:       assertFalse(node3.isAssign());
1503:       assertFalse(node3.isWith());
1504:       assertFalse(node3.isDec());
1505:       assertFalse(node3.isTypeOf());
1506:       assertEquals(37, node3.getCharno());
1507:       assertEquals(36, node3.getLineno());
1508:       assertFalse(node3.isGetElem());
1509:       assertFalse(node3.isInstanceOf());
1510:       assertFalse(node3.isBreak());
1511:       assertFalse(node3.isExprResult());
1512:       assertFalse(node3.isAssignAdd());
1513:       assertFalse(node3.isOr());
1514:       assertFalse(node3.isLabel());
1515:       assertFalse(node3.isDo());
1516:       assertFalse(node3.isCase());
1517:       assertFalse(node3.isNumber());
1518:       assertFalse(node3.isGetterDef());
1519:       assertFalse(node3.isAdd());
1520:       assertFalse(node3.isEmpty());
1521:       assertFalse(node3.isNew());
1522:       assertFalse(node3.isSwitch());
1523:       assertFalse(node3.isStringKey());
1524:       assertFalse(node3.isVar());
1525:       assertFalse(node3.isLabelName());
1526:       assertFalse(node3.isArrayLit());
1527:       assertEquals(0, node3.getChildCount());
1528:       assertFalse(node3.isParamList());
1529:       assertFalse(node3.isNull());
1530:       assertEquals(40, node3.getType());
1531:       assertFalse(node3.isDefaultCase());
1532:       assertFalse(node3.isSetterDef());
1533:       assertFalse(node3.isTry());
1534:       assertFalse(node3.isVoid());
1535:       assertTrue(node3.isString());
1536:       assertFalse(node3.isBlock());
1537:       assertFalse(node3.isFor());
1538:       assertFalse(node3.isTrue());
1539:       assertFalse(node3.isIf());
1540:       assertFalse(node3.isRegExp());
1541:       assertFalse(node3.isName());
1542:       assertFalse(node3.isDelProp());
1543:       assertFalse(node3.hasMoreThanOneChild());
1544:       assertFalse(node3.isCatch());
1545:       assertFalse(node3.isCall());
1546:       assertFalse(node3.isReturn());
1547:       assertFalse(node3.isIn());
1548:       assertFalse(node3.isNE());
1549:       assertFalse(node3.hasChildren());
1550:       assertFalse(node3.isWhile());
1551:       assertFalse(node3.isInc());
1552:       assertFalse(node3.isFunction());
1553:       assertFalse(node3.isDebugger());
1554:       assertFalse(node3.isThrow());
1555:       assertFalse(node3.isFalse());
1556:       assertFalse(node3.isCast());
1557:       assertFalse(node3.isContinue());
1558:       assertFalse(boolean4);
1559:       
1560:       Iterable<Node> iterable0 = node4.children();
1561:       assertFalse(node0.equals((Object)node1));
1562:       assertFalse(node0.equals((Object)node2));
1563:       assertFalse(node0.equals((Object)node4));
1564:       assertFalse(node1.equals((Object)node2));
1565:       assertFalse(node1.equals((Object)node4));
1566:       assertFalse(node1.equals((Object)node0));
1567:       assertFalse(node1.equals((Object)node3));
1568:       assertFalse(node2.equals((Object)node1));
1569:       assertFalse(node2.equals((Object)node4));
1570:       assertFalse(node2.equals((Object)node0));
1571:       assertFalse(node2.equals((Object)node3));
1572:       assertFalse(node3.equals((Object)node2));
1573:       assertFalse(node3.equals((Object)node4));
1574:       assertFalse(node3.equals((Object)node1));
1575:       assertFalse(node4.equals((Object)node1));
1576:       assertFalse(node4.equals((Object)node3));
1577:       assertFalse(node4.equals((Object)node2));
1578:       assertFalse(node4.equals((Object)node0));
1579:       assertSame(node0, node3);
1580:       assertNotSame(node0, node1);
1581:       assertNotSame(node1, node0);
1582:       assertNotSame(node1, node3);
1583:       assertSame(node3, node0);
1584:       assertNotSame(node3, node1);
1585:       assertNotNull(iterable0);
1586:       assertFalse(node0.isVoid());
1587:       assertFalse(node0.isTry());
1588:       assertFalse(node0.isArrayLit());
1589:       assertFalse(node0.isDefaultCase());
1590:       assertFalse(node0.isRegExp());
1591:       assertFalse(node0.isFunction());
1592:       assertFalse(node0.isFor());
1593:       assertEquals(40, node0.getType());
1594:       assertEquals(0, node0.getChildCount());
1595:       assertFalse(node0.isCase());
1596:       assertFalse(node0.isGetterDef());
1597:       assertFalse(node0.isSwitch());
1598:       assertFalse(node0.isParamList());
1599:       assertFalse(node0.isStringKey());
1600:       assertFalse(node0.isDebugger());
1601:       assertFalse(node0.isHook());
1602:       assertFalse(node0.isInc());
1603:       assertTrue(node0.isString());
1604:       assertFalse(node0.isFalse());
1605:       assertFalse(node0.isThrow());
1606:       assertFalse(node0.isThis());
1607:       assertFalse(node0.isBlock());
1608:       assertFalse(node0.isInstanceOf());
1609:       assertFalse(node0.isIn());
1610:       assertFalse(node0.hasMoreThanOneChild());
1611:       assertFalse(node0.isCatch());
1612:       assertEquals(37, node0.getCharno());
1613:       assertFalse(node0.isSetterDef());
1614:       assertFalse(node0.isIf());
1615:       assertFalse(node0.isNE());
1616:       assertEquals(147493, node0.getSourcePosition());
1617:       assertFalse(node0.isCast());
1618:       assertFalse(node0.isGetElem());
1619:       assertFalse(node0.isExprResult());
1620:       assertFalse(node0.isLabelName());
1621:       assertFalse(node0.hasOneChild());
1622:       assertFalse(node0.isDec());
1623:       assertFalse(node0.hasChildren());
1624:       assertFalse(node0.isTypeOf());
1625:       assertFalse(node0.isWith());
1626:       assertEquals(36, node0.getLineno());
1627:       assertFalse(node0.isAssign());
1628:       assertFalse(node0.isLabel());
1629:       assertFalse(node0.isReturn());
1630:       assertFalse(node0.isContinue());
1631:       assertFalse(node0.isAnd());
1632:       assertFalse(node0.isGetProp());
1633:       assertFalse(node0.isNumber());
1634:       assertFalse(node0.isScript());
1635:       assertFalse(node0.isObjectLit());
1636:       assertFalse(node0.isNot());
1637:       assertFalse(node0.isVar());
1638:       assertFalse(node0.isAdd());
1639:       assertFalse(node0.isName());
1640:       assertFalse(node0.isCall());
1641:       assertFalse(node0.isNew());
1642:       assertFalse(node0.isBreak());
1643:       assertFalse(node0.isWhile());
1644:       assertFalse(node0.isComma());
1645:       assertFalse(node0.isAssignAdd());
1646:       assertFalse(node0.isDo());
1647:       assertFalse(node0.isNull());
1648:       assertFalse(node0.isDelProp());
1649:       assertFalse(node0.isEmpty());
1650:       assertFalse(node0.isTrue());
1651:       assertFalse(node0.isOr());
1652:       assertFalse(node1.hasOneChild());
1653:       assertFalse(node1.isNot());
1654:       assertFalse(node1.isObjectLit());
1655:       assertEquals((-1), node1.getSourcePosition());
1656:       assertFalse(node1.isScript());
1657:       assertFalse(node1.isNumber());
1658:       assertFalse(node1.isAssignAdd());
1659:       assertFalse(node1.isLabel());
1660:       assertFalse(node1.isAnd());
1661:       assertFalse(node1.isLabelName());
1662:       assertFalse(node1.isFalse());
1663:       assertEquals(38, node1.getType());
1664:       assertFalse(node1.isCast());
1665:       assertFalse(node1.isContinue());
1666:       assertFalse(node1.isBlock());
1667:       assertEquals((-1), node1.getCharno());
1668:       assertFalse(node1.isSwitch());
1669:       assertFalse(node1.isHook());
1670:       assertFalse(node1.isThrow());
1671:       assertFalse(node1.isStringKey());
1672:       assertFalse(node1.isCase());
1673:       assertFalse(node1.isInc());
1674:       assertFalse(node1.isSetterDef());
1675:       assertFalse(node1.isIn());
1676:       assertEquals((-1), node1.getLineno());
1677:       assertTrue(node1.isName());
1678:       assertFalse(node1.isNE());
1679:       assertFalse(node1.isThis());
1680:       assertFalse(node1.isIf());
1681:       assertFalse(node1.isFor());
1682:       assertFalse(node1.isWith());
1683:       assertFalse(node1.isRegExp());
1684:       assertFalse(node1.hasMoreThanOneChild());
1685:       assertFalse(node1.isInstanceOf());
1686:       assertFalse(node1.isCatch());
1687:       assertFalse(node1.isTry());
1688:       assertFalse(node1.isVoid());
1689:       assertFalse(node1.isDebugger());
1690:       assertFalse(node1.isTrue());
1691:       assertFalse(node1.isDefaultCase());
1692:       assertFalse(node1.isEmpty());
1693:       assertFalse(node1.isGetterDef());
1694:       assertEquals(0, node1.getChildCount());
1695:       assertFalse(node1.isParamList());
1696:       assertFalse(node1.isArrayLit());
1697:       assertFalse(node1.isFunction());
1698:       assertFalse(node1.isAdd());
1699:       assertFalse(node1.isNew());
1700:       assertFalse(node1.isVar());
1701:       assertFalse(node1.isWhile());
1702:       assertFalse(node1.isDo());
1703:       assertFalse(node1.isString());
1704:       assertFalse(node1.isOr());
1705:       assertFalse(node1.isReturn());
1706:       assertFalse(node1.isGetProp());
1707:       assertFalse(node1.isComma());
1708:       assertFalse(node1.isNull());
1709:       assertFalse(node1.isAssign());
1710:       assertFalse(node1.isGetElem());
1711:       assertFalse(node1.hasChildren());
1712:       assertFalse(node1.isBreak());
1713:       assertFalse(node1.isDelProp());
1714:       assertFalse(node1.isDec());
1715:       assertFalse(node1.isTypeOf());
1716:       assertFalse(node1.isExprResult());
1717:       assertFalse(node1.isCall());
1718:       assertFalse(node2.isVar());
1719:       assertFalse(node2.isBlock());
1720:       assertFalse(node2.isWhile());
1721:       assertFalse(node2.isAdd());
1722:       assertFalse(node2.isSetterDef());
1723:       assertFalse(node2.isDo());
1724:       assertFalse(node2.isNew());
1725:       assertFalse(node2.isReturn());
1726:       assertFalse(node2.hasMoreThanOneChild());
1727:       assertFalse(node2.isCatch());
1728:       assertFalse(node2.isOr());
1729:       assertEquals(39, node2.getType());
1730:       assertFalse(node2.isDec());
1731:       assertFalse(node2.isTypeOf());
1732:       assertFalse(node2.isRegExp());
1733:       assertFalse(node2.isNull());
1734:       assertEquals(36, node2.getLineno());
1735:       assertFalse(node2.isVoid());
1736:       assertFalse(node2.isGetElem());
1737:       assertFalse(node2.isName());
1738:       assertFalse(node2.isCall());
1739:       assertFalse(node2.isTrue());
1740:       assertFalse(node2.isGetterDef());
1741:       assertFalse(node2.isDefaultCase());
1742:       assertFalse(node2.isScript());
1743:       assertFalse(node2.isEmpty());
1744:       assertFalse(node2.isFor());
1745:       assertFalse(node2.isTry());
1746:       assertFalse(node2.hasOneChild());
1747:       assertEquals(0, node2.getChildCount());
1748:       assertFalse(node2.isAssignAdd());
1749:       assertFalse(node2.isLabel());
1750:       assertFalse(node2.isSwitch());
1751:       assertFalse(node2.isStringKey());
1752:       assertFalse(node2.isParamList());
1753:       assertFalse(node2.isLabelName());
1754:       assertFalse(node2.isArrayLit());
1755:       assertFalse(node2.isHook());
1756:       assertFalse(node2.isThrow());
1757:       assertFalse(node2.isFalse());
1758:       assertEquals(147493, node2.getSourcePosition());
1759:       assertFalse(node2.isString());
1760:       assertFalse(node2.isGetProp());
1761:       assertFalse(node2.isInc());
1762:       assertFalse(node2.isCase());
1763:       assertFalse(node2.isIn());
1764:       assertFalse(node2.isInstanceOf());
1765:       assertFalse(node2.isThis());
1766:       assertFalse(node2.isComma());
1767:       assertFalse(node2.isBreak());
1768:       assertFalse(node2.isIf());
1769:       assertFalse(node2.isDelProp());
1770:       assertFalse(node2.isWith());
1771:       assertFalse(node2.isNE());
1772:       assertFalse(node2.isExprResult());
1773:       assertEquals(37, node2.getCharno());
1774:       assertFalse(node2.isCast());
1775:       assertFalse(node2.isFunction());
1776:       assertFalse(node2.isAssign());
1777:       assertFalse(node2.isDebugger());
1778:       assertFalse(node2.hasChildren());
1779:       assertTrue(node2.isNumber());
1780:       assertFalse(node2.isAnd());
1781:       assertFalse(node2.isContinue());
1782:       assertFalse(node2.isObjectLit());
1783:       assertFalse(node2.isNot());
1784:       assertFalse(node3.isThis());
1785:       assertFalse(node3.isComma());
1786:       assertFalse(node3.isAnd());
1787:       assertFalse(node3.isNot());
1788:       assertFalse(node3.isObjectLit());
1789:       assertFalse(node3.isGetProp());
1790:       assertFalse(node3.isScript());
1791:       assertEquals(147493, node3.getSourcePosition());
1792:       assertFalse(node3.hasOneChild());
1793:       assertFalse(node3.isHook());
1794:       assertFalse(node3.isAssign());
1795:       assertFalse(node3.isWith());
1796:       assertFalse(node3.isDec());
1797:       assertFalse(node3.isTypeOf());
1798:       assertEquals(37, node3.getCharno());
1799:       assertEquals(36, node3.getLineno());
1800:       assertFalse(node3.isGetElem());
1801:       assertFalse(node3.isInstanceOf());
1802:       assertFalse(node3.isBreak());
1803:       assertFalse(node3.isExprResult());
1804:       assertFalse(node3.isAssignAdd());
1805:       assertFalse(node3.isOr());
1806:       assertFalse(node3.isLabel());
1807:       assertFalse(node3.isDo());
1808:       assertFalse(node3.isCase());
1809:       assertFalse(node3.isNumber());
1810:       assertFalse(node3.isGetterDef());
1811:       assertFalse(node3.isAdd());
1812:       assertFalse(node3.isEmpty());
1813:       assertFalse(node3.isNew());
1814:       assertFalse(node3.isSwitch());
1815:       assertFalse(node3.isStringKey());
1816:       assertFalse(node3.isVar());
1817:       assertFalse(node3.isLabelName());
1818:       assertFalse(node3.isArrayLit());
1819:       assertEquals(0, node3.getChildCount());
1820:       assertFalse(node3.isParamList());
1821:       assertFalse(node3.isNull());
1822:       assertEquals(40, node3.getType());
1823:       assertFalse(node3.isDefaultCase());
1824:       assertFalse(node3.isSetterDef());
1825:       assertFalse(node3.isTry());
1826:       assertFalse(node3.isVoid());
1827:       assertTrue(node3.isString());
1828:       assertFalse(node3.isBlock());
1829:       assertFalse(node3.isFor());
1830:       assertFalse(node3.isTrue());
1831:       assertFalse(node3.isIf());
1832:       assertFalse(node3.isRegExp());
1833:       assertFalse(node3.isName());
1834:       assertFalse(node3.isDelProp());
1835:       assertFalse(node3.hasMoreThanOneChild());
1836:       assertFalse(node3.isCatch());
1837:       assertFalse(node3.isCall());
1838:       assertFalse(node3.isReturn());
1839:       assertFalse(node3.isIn());
1840:       assertFalse(node3.isNE());
1841:       assertFalse(node3.hasChildren());
1842:       assertFalse(node3.isWhile());
1843:       assertFalse(node3.isInc());
1844:       assertFalse(node3.isFunction());
1845:       assertFalse(node3.isDebugger());
1846:       assertFalse(node3.isThrow());
1847:       assertFalse(node3.isFalse());
1848:       assertFalse(node3.isCast());
1849:       assertFalse(node3.isContinue());
1850:       assertFalse(node4.isCall());
1851:       assertFalse(node4.isStringKey());
1852:       assertFalse(node4.isName());
1853:       assertFalse(node4.isVar());
1854:       assertFalse(node4.isBlock());
1855:       assertFalse(node4.isNull());
1856:       assertFalse(node4.isDo());
1857:       assertFalse(node4.isAdd());
1858:       assertFalse(node4.isNew());
1859:       assertFalse(node4.isSetterDef());
1860:       assertFalse(node4.isCatch());
1861:       assertFalse(node4.isWhile());
1862:       assertFalse(node4.isOr());
1863:       assertFalse(node4.isReturn());
1864:       assertFalse(node4.isTrue());
1865:       assertFalse(node4.isVoid());
1866:       assertFalse(node4.isTypeOf());
1867:       assertFalse(node4.isRegExp());
1868:       assertEquals((-1), node4.getLineno());
1869:       assertFalse(node4.isGetElem());
1870:       assertFalse(node4.isGetterDef());
1871:       assertFalse(node4.isFor());
1872:       assertFalse(node4.isTry());
1873:       assertFalse(node4.isAssignAdd());
1874:       assertFalse(node4.isNumber());
1875:       assertFalse(node4.isDefaultCase());
1876:       assertFalse(node4.hasOneChild());
1877:       assertFalse(node4.isScript());
1878:       assertFalse(node4.isEmpty());
1879:       assertFalse(node4.isLabel());
1880:       assertFalse(node4.isParamList());
1881:       assertFalse(node4.isSwitch());
1882:       assertFalse(node4.isLabelName());
1883:       assertFalse(node4.isArrayLit());
1884:       assertFalse(node4.isThrow());
1885:       assertFalse(node4.isFalse());
1886:       assertFalse(node4.isHook());
1887:       assertFalse(node4.isThis());
1888:       assertEquals(471, node4.getType());
1889:       assertEquals((-1), node4.getCharno());
1890:       assertFalse(node4.isString());
1891:       assertFalse(node4.isCase());
1892:       assertFalse(node4.isInc());
1893:       assertFalse(node4.isGetProp());
1894:       assertFalse(node4.isWith());
1895:       assertFalse(node4.isIn());
1896:       assertFalse(node4.isExprResult());
1897:       assertFalse(node4.isNE());
1898:       assertFalse(node4.isComma());
1899:       assertFalse(node4.isIf());
1900:       assertFalse(node4.isBreak());
1901:       assertFalse(node4.isDelProp());
1902:       assertTrue(node4.hasChildren());
1903:       assertFalse(node4.isInstanceOf());
1904:       assertTrue(node4.hasMoreThanOneChild());
1905:       assertFalse(node4.isCast());
1906:       assertFalse(node4.isAssign());
1907:       assertFalse(node4.isDec());
1908:       assertEquals((-1), node4.getSourcePosition());
1909:       assertFalse(node4.isDebugger());
1910:       assertFalse(node4.isObjectLit());
1911:       assertFalse(node4.isContinue());
1912:       assertFalse(node4.isAnd());
1913:       assertFalse(node4.isNot());
1914:       assertEquals(2, node4.getChildCount());
1915:       assertFalse(node4.isFunction());
1916:       
1917:       Node node5 = Node.newString(117, "", (-1049), 40);
1918:       assertFalse(node5.equals((Object)node0));
1919:       assertFalse(node5.equals((Object)node3));
1920:       assertFalse(node5.equals((Object)node2));
1921:       assertFalse(node5.equals((Object)node4));
1922:       assertFalse(node5.equals((Object)node1));
1923:       assertNotSame(node5, node0);
1924:       assertNotSame(node5, node3);
1925:       assertNotSame(node5, node1);
1926:       assertNotNull(node5);
1927:       assertFalse(node5.isArrayLit());
1928:       assertFalse(node5.isTry());
1929:       assertFalse(node5.isVoid());
1930:       assertFalse(node5.isEmpty());
1931:       assertFalse(node5.isIf());
1932:       assertFalse(node5.isGetterDef());
1933:       assertFalse(node5.isDelProp());
1934:       assertFalse(node5.isDebugger());
1935:       assertFalse(node5.isNE());
1936:       assertFalse(node5.isTrue());
1937:       assertFalse(node5.isIn());
1938:       assertEquals(0, node5.getChildCount());
1939:       assertFalse(node5.isSetterDef());
1940:       assertFalse(node5.isDefaultCase());
1941:       assertFalse(node5.isFunction());
1942:       assertFalse(node5.isVar());
1943:       assertFalse(node5.isInc());
1944:       assertFalse(node5.isSwitch());
1945:       assertTrue(node5.isContinue());
1946:       assertFalse(node5.isStringKey());
1947:       assertEquals((-1), node5.getCharno());
1948:       assertFalse(node5.isParamList());
1949:       assertFalse(node5.isInstanceOf());
1950:       assertEquals((-1), node5.getLineno());
1951:       assertFalse(node5.hasMoreThanOneChild());
1952:       assertFalse(node5.isCase());
1953:       assertFalse(node5.isCatch());
1954:       assertFalse(node5.isWith());
1955:       assertFalse(node5.isRegExp());
1956:       assertFalse(node5.isHook());
1957:       assertFalse(node5.isThis());
1958:       assertFalse(node5.isBlock());
1959:       assertFalse(node5.isFor());
1960:       assertFalse(node5.hasOneChild());
1961:       assertFalse(node5.isCast());
1962:       assertFalse(node5.isGetElem());
1963:       assertFalse(node5.isScript());
1964:       assertFalse(node5.isExprResult());
1965:       assertEquals(117, node5.getType());
1966:       assertEquals((-1), node5.getSourcePosition());
1967:       assertFalse(node5.isLabelName());
1968:       assertFalse(node5.isNot());
1969:       assertFalse(node5.isNumber());
1970:       assertFalse(node5.isAnd());
1971:       assertFalse(node5.isAssignAdd());
1972:       assertFalse(node5.isOr());
1973:       assertFalse(node5.isDo());
1974:       assertFalse(node5.isThrow());
1975:       assertFalse(node5.isLabel());
1976:       assertFalse(node5.isFalse());
1977:       assertFalse(node5.isNew());
1978:       assertFalse(node5.isAdd());
1979:       assertFalse(node5.isCall());
1980:       assertFalse(node5.isBreak());
1981:       assertFalse(node5.isString());
1982:       assertFalse(node5.isName());
1983:       assertFalse(node5.isNull());
1984:       assertFalse(node5.isObjectLit());
1985:       assertFalse(node5.isGetProp());
1986:       assertFalse(node5.isDec());
1987:       assertFalse(node5.hasChildren());
1988:       assertFalse(node5.isWhile());
1989:       assertFalse(node5.isAssign());
1990:       assertFalse(node5.isTypeOf());
1991:       assertFalse(node5.isComma());
1992:       assertFalse(node5.isReturn());
1993:       
1994:       boolean boolean5 = node2.isReturn();
1995:       assertFalse(node2.equals((Object)node5));
1996:       assertFalse(node2.equals((Object)node1));
1997:       assertFalse(node2.equals((Object)node4));
1998:       assertFalse(node2.equals((Object)node0));
1999:       assertFalse(node2.equals((Object)node3));
2000:       assertTrue(boolean5 == boolean4);
2001:       assertTrue(boolean5 == boolean0);
2002:       assertTrue(boolean5 == boolean3);
2003:       assertTrue(boolean5 == boolean1);
2004:       assertTrue(boolean5 == boolean2);
2005:       assertFalse(node2.isVar());
2006:       assertFalse(node2.isBlock());
2007:       assertFalse(node2.isWhile());
2008:       assertFalse(node2.isAdd());
2009:       assertFalse(node2.isSetterDef());
2010:       assertFalse(node2.isDo());
2011:       assertFalse(node2.isNew());
2012:       assertFalse(node2.isReturn());
2013:       assertFalse(node2.hasMoreThanOneChild());
2014:       assertFalse(node2.isCatch());
2015:       assertFalse(node2.isOr());
2016:       assertEquals(39, node2.getType());
2017:       assertFalse(node2.isDec());
2018:       assertFalse(node2.isTypeOf());
2019:       assertFalse(node2.isRegExp());
2020:       assertFalse(node2.isNull());
2021:       assertEquals(36, node2.getLineno());
2022:       assertFalse(node2.isVoid());
2023:       assertFalse(node2.isGetElem());
2024:       assertFalse(node2.isName());
2025:       assertFalse(node2.isCall());
2026:       assertFalse(node2.isTrue());
2027:       assertFalse(node2.isGetterDef());
2028:       assertFalse(node2.isDefaultCase());
2029:       assertFalse(node2.isScript());
2030:       assertFalse(node2.isEmpty());
2031:       assertFalse(node2.isFor());
2032:       assertFalse(node2.isTry());
2033:       assertFalse(node2.hasOneChild());
2034:       assertEquals(0, node2.getChildCount());
2035:       assertFalse(node2.isAssignAdd());
2036:       assertFalse(node2.isLabel());
2037:       assertFalse(node2.isSwitch());
2038:       assertFalse(node2.isStringKey());
2039:       assertFalse(node2.isParamList());
2040:       assertFalse(node2.isLabelName());
2041:       assertFalse(node2.isArrayLit());
2042:       assertFalse(node2.isHook());
2043:       assertFalse(node2.isThrow());
2044:       assertFalse(node2.isFalse());
2045:       assertEquals(147493, node2.getSourcePosition());
2046:       assertFalse(node2.isString());
2047:       assertFalse(node2.isGetProp());
2048:       assertFalse(node2.isInc());
2049:       assertFalse(node2.isCase());
2050:       assertFalse(node2.isIn());
2051:       assertFalse(node2.isInstanceOf());
2052:       assertFalse(node2.isThis());
2053:       assertFalse(node2.isComma());
2054:       assertFalse(node2.isBreak());
2055:       assertFalse(node2.isIf());
2056:       assertFalse(node2.isDelProp());
2057:       assertFalse(node2.isWith());
2058:       assertFalse(node2.isNE());
2059:       assertFalse(node2.isExprResult());
2060:       assertEquals(37, node2.getCharno());
2061:       assertFalse(node2.isCast());
2062:       assertFalse(node2.isFunction());
2063:       assertFalse(node2.isAssign());
2064:       assertFalse(node2.isDebugger());
2065:       assertFalse(node2.hasChildren());
2066:       assertTrue(node2.isNumber());
2067:       assertFalse(node2.isAnd());
2068:       assertFalse(node2.isContinue());
2069:       assertFalse(node2.isObjectLit());
2070:       assertFalse(node2.isNot());
2071:       assertFalse(boolean5);
2072:       
2073:       boolean boolean6 = node2.isTrue();
2074:       assertFalse(node2.equals((Object)node5));
2075:       assertFalse(node2.equals((Object)node1));
2076:       assertFalse(node2.equals((Object)node4));
2077:       assertFalse(node2.equals((Object)node0));
2078:       assertFalse(node2.equals((Object)node3));
2079:       assertTrue(boolean6 == boolean0);
2080:       assertTrue(boolean6 == boolean2);
2081:       assertTrue(boolean6 == boolean3);
2082:       assertTrue(boolean6 == boolean4);
2083:       assertTrue(boolean6 == boolean1);
2084:       assertTrue(boolean6 == boolean5);
2085:       assertFalse(node2.isVar());
2086:       assertFalse(node2.isBlock());
2087:       assertFalse(node2.isWhile());
2088:       assertFalse(node2.isAdd());
2089:       assertFalse(node2.isSetterDef());
2090:       assertFalse(node2.isDo());
2091:       assertFalse(node2.isNew());
2092:       assertFalse(node2.isReturn());
2093:       assertFalse(node2.hasMoreThanOneChild());
2094:       assertFalse(node2.isCatch());
2095:       assertFalse(node2.isOr());
2096:       assertEquals(39, node2.getType());
2097:       assertFalse(node2.isDec());
2098:       assertFalse(node2.isTypeOf());
2099:       assertFalse(node2.isRegExp());
2100:       assertFalse(node2.isNull());
2101:       assertEquals(36, node2.getLineno());
2102:       assertFalse(node2.isVoid());
2103:       assertFalse(node2.isGetElem());
2104:       assertFalse(node2.isName());
2105:       assertFalse(node2.isCall());
2106:       assertFalse(node2.isTrue());
2107:       assertFalse(node2.isGetterDef());
2108:       assertFalse(node2.isDefaultCase());
2109:       assertFalse(node2.isScript());
2110:       assertFalse(node2.isEmpty());
2111:       assertFalse(node2.isFor());
2112:       assertFalse(node2.isTry());
2113:       assertFalse(node2.hasOneChild());
2114:       assertEquals(0, node2.getChildCount());
2115:       assertFalse(node2.isAssignAdd());
2116:       assertFalse(node2.isLabel());
2117:       assertFalse(node2.isSwitch());
2118:       assertFalse(node2.isStringKey());
2119:       assertFalse(node2.isParamList());
2120:       assertFalse(node2.isLabelName());
2121:       assertFalse(node2.isArrayLit());
2122:       assertFalse(node2.isHook());
2123:       assertFalse(node2.isThrow());
2124:       assertFalse(node2.isFalse());
2125:       assertEquals(147493, node2.getSourcePosition());
2126:       assertFalse(node2.isString());
2127:       assertFalse(node2.isGetProp());
2128:       assertFalse(node2.isInc());
2129:       assertFalse(node2.isCase());
2130:       assertFalse(node2.isIn());
2131:       assertFalse(node2.isInstanceOf());
2132:       assertFalse(node2.isThis());
2133:       assertFalse(node2.isComma());
2134:       assertFalse(node2.isBreak());
2135:       assertFalse(node2.isIf());
2136:       assertFalse(node2.isDelProp());
2137:       assertFalse(node2.isWith());
2138:       assertFalse(node2.isNE());
2139:       assertFalse(node2.isExprResult());
2140:       assertEquals(37, node2.getCharno());
2141:       assertFalse(node2.isCast());
2142:       assertFalse(node2.isFunction());
2143:       assertFalse(node2.isAssign());
2144:       assertFalse(node2.isDebugger());
2145:       assertFalse(node2.hasChildren());
2146:       assertTrue(node2.isNumber());
2147:       assertFalse(node2.isAnd());
2148:       assertFalse(node2.isContinue());
2149:       assertFalse(node2.isObjectLit());
2150:       assertFalse(node2.isNot());
2151:       assertFalse(boolean6);
2152:       
2153:       Iterable<Node> iterable1 = node0.children();
2154:       assertFalse(iterable1.equals((Object)iterable0));
2155:       assertFalse(node0.equals((Object)node5));
2156:       assertFalse(node0.equals((Object)node1));
2157:       assertFalse(node0.equals((Object)node2));
2158:       assertFalse(node0.equals((Object)node4));
2159:       assertSame(node0, node3);
2160:       assertNotSame(node0, node5);
2161:       assertNotSame(node0, node1);
2162:       assertFalse(iterable1.contains(node2));
2163:       assertNotNull(iterable1);
2164:       assertFalse(node0.isVoid());
2165:       assertFalse(node0.isTry());
2166:       assertFalse(node0.isArrayLit());
2167:       assertFalse(node0.isDefaultCase());
2168:       assertFalse(node0.isRegExp());
2169:       assertFalse(node0.isFunction());
2170:       assertFalse(node0.isFor());
2171:       assertEquals(40, node0.getType());
2172:       assertEquals(0, node0.getChildCount());
2173:       assertFalse(node0.isCase());
2174:       assertFalse(node0.isGetterDef());
2175:       assertFalse(node0.isSwitch());
2176:       assertFalse(node0.isParamList());
2177:       assertFalse(node0.isStringKey());
2178:       assertFalse(node0.isDebugger());
2179:       assertFalse(node0.isHook());
2180:       assertFalse(node0.isInc());
2181:       assertTrue(node0.isString());
2182:       assertFalse(node0.isFalse());
2183:       assertFalse(node0.isThrow());
2184:       assertFalse(node0.isThis());
2185:       assertFalse(node0.isBlock());
2186:       assertFalse(node0.isInstanceOf());
2187:       assertFalse(node0.isIn());
2188:       assertFalse(node0.hasMoreThanOneChild());
2189:       assertFalse(node0.isCatch());
2190:       assertEquals(37, node0.getCharno());
2191:       assertFalse(node0.isSetterDef());
2192:       assertFalse(node0.isIf());
2193:       assertFalse(node0.isNE());
2194:       assertEquals(147493, node0.getSourcePosition());
2195:       assertFalse(node0.isCast());
2196:       assertFalse(node0.isGetElem());
2197:       assertFalse(node0.isExprResult());
2198:       assertFalse(node0.isLabelName());
2199:       assertFalse(node0.hasOneChild());
2200:       assertFalse(node0.isDec());
2201:       assertFalse(node0.hasChildren());
2202:       assertFalse(node0.isTypeOf());
2203:       assertFalse(node0.isWith());
2204:       assertEquals(36, node0.getLineno());
2205:       assertFalse(node0.isAssign());
2206:       assertFalse(node0.isLabel());
2207:       assertFalse(node0.isReturn());
2208:       assertFalse(node0.isContinue());
2209:       assertFalse(node0.isAnd());
2210:       assertFalse(node0.isGetProp());
2211:       assertFalse(node0.isNumber());
2212:       assertFalse(node0.isScript());
2213:       assertFalse(node0.isObjectLit());
2214:       assertFalse(node0.isNot());
2215:       assertFalse(node0.isVar());
2216:       assertFalse(node0.isAdd());
2217:       assertFalse(node0.isName());
2218:       assertFalse(node0.isCall());
2219:       assertFalse(node0.isNew());
2220:       assertFalse(node0.isBreak());
2221:       assertFalse(node0.isWhile());
2222:       assertFalse(node0.isComma());
2223:       assertFalse(node0.isAssignAdd());
2224:       assertFalse(node0.isDo());
2225:       assertFalse(node0.isNull());
2226:       assertFalse(node0.isDelProp());
2227:       assertFalse(node0.isEmpty());
2228:       assertFalse(node0.isTrue());
2229:       assertFalse(node0.isOr());
2230:       
2231:       StringWriter stringWriter0 = new StringWriter(25);
2232:       assertNotNull(stringWriter0);
2233:       assertEquals("", stringWriter0.toString());
2234:       
2235:       StringWriter stringWriter1 = stringWriter0.append((CharSequence) "NUMBER 12.0");
2236:       assertSame(stringWriter0, stringWriter1);
2237:       assertSame(stringWriter1, stringWriter0);
2238:       assertNotNull(stringWriter1);
2239:       assertEquals("NUMBER 12.0", stringWriter0.toString());
2240:       assertEquals("NUMBER 12.0", stringWriter1.toString());
2241:       
2242:       MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
2243:       assertNotNull(mockPrintWriter0);
2244:       
2245:       Locale locale0 = new Locale("H'Y@UN%");
2246:       assertNotNull(locale0);
2247:       assertEquals("", locale0.getISO3Country());
2248:       assertEquals("", locale0.getCountry());
2249:       assertEquals("h'y@un%", locale0.getLanguage());
2250:       assertEquals("", locale0.getVariant());
2251:       assertEquals("h'y@un%", locale0.toString());
2252:       
2253:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
2254:       assertNotNull(node_SideEffectFlags0);
2255:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2256:       assertEquals(0, node_SideEffectFlags0.valueOf());
2257:       
2258:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
2259:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2260:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2261:       assertNotNull(node_SideEffectFlags1);
2262:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2263:       assertEquals(0, node_SideEffectFlags0.valueOf());
2264:       assertEquals(0, node_SideEffectFlags1.valueOf());
2265:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
2266:       
2267:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
2268:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2269:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2270:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2271:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
2272:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
2273:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
2274:       assertNotNull(node_SideEffectFlags2);
2275:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2276:       assertEquals(0, node_SideEffectFlags0.valueOf());
2277:       assertEquals(0, node_SideEffectFlags1.valueOf());
2278:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
2279:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
2280:       assertEquals(0, node_SideEffectFlags2.valueOf());
2281:       
2282:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
2283:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2284:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2285:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
2286:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2287:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
2288:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
2289:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
2290:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
2291:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
2292:       assertNotNull(node_SideEffectFlags3);
2293:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2294:       assertEquals(0, node_SideEffectFlags0.valueOf());
2295:       assertEquals(0, node_SideEffectFlags1.valueOf());
2296:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
2297:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
2298:       assertEquals(0, node_SideEffectFlags3.valueOf());
2299:       
2300:       Node node6 = Node.newString("ASSIGN_URSH", (-570), 1);
2301:       assertFalse(node6.equals((Object)node5));
2302:       assertFalse(node6.equals((Object)node3));
2303:       assertFalse(node6.equals((Object)node2));
2304:       assertFalse(node6.equals((Object)node4));
2305:       assertFalse(node6.equals((Object)node0));
2306:       assertFalse(node6.equals((Object)node1));
2307:       assertNotSame(node6, node3);
2308:       assertNotSame(node6, node5);
2309:       assertNotSame(node6, node0);
2310:       assertNotSame(node6, node1);
2311:       assertNotNull(node6);
2312:       assertEquals(0, node6.getChildCount());
2313:       assertFalse(node6.isCatch());
2314:       assertFalse(node6.isRegExp());
2315:       assertFalse(node6.isDefaultCase());
2316:       assertFalse(node6.isSetterDef());
2317:       assertFalse(node6.isFunction());
2318:       assertEquals(40, node6.getType());
2319:       assertFalse(node6.isVar());
2320:       assertFalse(node6.isAdd());
2321:       assertFalse(node6.isNew());
2322:       assertFalse(node6.isCall());
2323:       assertFalse(node6.isEmpty());
2324:       assertFalse(node6.isNull());
2325:       assertFalse(node6.isIf());
2326:       assertFalse(node6.isVoid());
2327:       assertFalse(node6.isDelProp());
2328:       assertFalse(node6.isName());
2329:       assertFalse(node6.isTrue());
2330:       assertFalse(node6.isNE());
2331:       assertFalse(node6.hasMoreThanOneChild());
2332:       assertEquals((-1), node6.getLineno());
2333:       assertFalse(node6.isOr());
2334:       assertFalse(node6.isCase());
2335:       assertFalse(node6.isDo());
2336:       assertFalse(node6.isBlock());
2337:       assertFalse(node6.isLabel());
2338:       assertFalse(node6.isFor());
2339:       assertTrue(node6.isString());
2340:       assertFalse(node6.isAssignAdd());
2341:       assertFalse(node6.isArrayLit());
2342:       assertFalse(node6.hasOneChild());
2343:       assertFalse(node6.isTry());
2344:       assertFalse(node6.isNumber());
2345:       assertFalse(node6.isSwitch());
2346:       assertFalse(node6.isGetterDef());
2347:       assertEquals((-1), node6.getCharno());
2348:       assertFalse(node6.isLabelName());
2349:       assertFalse(node6.isParamList());
2350:       assertFalse(node6.isStringKey());
2351:       assertFalse(node6.isObjectLit());
2352:       assertFalse(node6.isWith());
2353:       assertFalse(node6.isGetProp());
2354:       assertFalse(node6.isInstanceOf());
2355:       assertFalse(node6.isScript());
2356:       assertFalse(node6.isThis());
2357:       assertFalse(node6.isComma());
2358:       assertFalse(node6.isThrow());
2359:       assertFalse(node6.isHook());
2360:       assertFalse(node6.isGetElem());
2361:       assertFalse(node6.isExprResult());
2362:       assertFalse(node6.isInc());
2363:       assertFalse(node6.isBreak());
2364:       assertFalse(node6.isIn());
2365:       assertFalse(node6.isContinue());
2366:       assertFalse(node6.isTypeOf());
2367:       assertFalse(node6.hasChildren());
2368:       assertFalse(node6.isAssign());
2369:       assertFalse(node6.isDec());
2370:       assertFalse(node6.isReturn());
2371:       assertFalse(node6.isWhile());
2372:       assertFalse(node6.isFalse());
2373:       assertFalse(node6.isCast());
2374:       assertEquals((-1), node6.getSourcePosition());
2375:       assertFalse(node6.isDebugger());
2376:       assertFalse(node6.isNot());
2377:       assertFalse(node6.isAnd());
2378:       
2379:       boolean boolean7 = node6.isGetElem();
2380:       assertFalse(node6.equals((Object)node5));
2381:       assertFalse(node6.equals((Object)node3));
2382:       assertFalse(node6.equals((Object)node2));
2383:       assertFalse(node6.equals((Object)node4));
2384:       assertFalse(node6.equals((Object)node0));
2385:       assertFalse(node6.equals((Object)node1));
2386:       assertTrue(boolean7 == boolean2);
2387:       assertTrue(boolean7 == boolean5);
2388:       assertTrue(boolean7 == boolean0);
2389:       assertTrue(boolean7 == boolean1);
2390:       assertTrue(boolean7 == boolean4);
2391:       assertTrue(boolean7 == boolean3);
2392:       assertTrue(boolean7 == boolean6);
2393:       assertNotSame(node6, node3);
2394:       assertNotSame(node6, node5);
2395:       assertNotSame(node6, node0);
2396:       assertNotSame(node6, node1);
2397:       assertEquals(0, node6.getChildCount());
2398:       assertFalse(node6.isCatch());
2399:       assertFalse(node6.isRegExp());
2400:       assertFalse(node6.isDefaultCase());
2401:       assertFalse(node6.isSetterDef());
2402:       assertFalse(node6.isFunction());
2403:       assertEquals(40, node6.getType());
2404:       assertFalse(node6.isVar());
2405:       assertFalse(node6.isAdd());
2406:       assertFalse(node6.isNew());
2407:       assertFalse(node6.isCall());
2408:       assertFalse(node6.isEmpty());
2409:       assertFalse(node6.isNull());
2410:       assertFalse(node6.isIf());
2411:       assertFalse(node6.isVoid());
2412:       assertFalse(node6.isDelProp());
2413:       assertFalse(node6.isName());
2414:       assertFalse(node6.isTrue());
2415:       assertFalse(node6.isNE());
2416:       assertFalse(node6.hasMoreThanOneChild());
2417:       assertEquals((-1), node6.getLineno());
2418:       assertFalse(node6.isOr());
2419:       assertFalse(node6.isCase());
2420:       assertFalse(node6.isDo());
2421:       assertFalse(node6.isBlock());
2422:       assertFalse(node6.isLabel());
2423:       assertFalse(node6.isFor());
2424:       assertTrue(node6.isString());
2425:       assertFalse(node6.isAssignAdd());
2426:       assertFalse(node6.isArrayLit());
2427:       assertFalse(node6.hasOneChild());
2428:       assertFalse(node6.isTry());
2429:       assertFalse(node6.isNumber());
2430:       assertFalse(node6.isSwitch());
2431:       assertFalse(node6.isGetterDef());
2432:       assertEquals((-1), node6.getCharno());
2433:       assertFalse(node6.isLabelName());
2434:       assertFalse(node6.isParamList());
2435:       assertFalse(node6.isStringKey());
2436:       assertFalse(node6.isObjectLit());
2437:       assertFalse(node6.isWith());
2438:       assertFalse(node6.isGetProp());
2439:       assertFalse(node6.isInstanceOf());
2440:       assertFalse(node6.isScript());
2441:       assertFalse(node6.isThis());
2442:       assertFalse(node6.isComma());
2443:       assertFalse(node6.isThrow());
2444:       assertFalse(node6.isHook());
2445:       assertFalse(node6.isGetElem());
2446:       assertFalse(node6.isExprResult());
2447:       assertFalse(node6.isInc());
2448:       assertFalse(node6.isBreak());
2449:       assertFalse(node6.isIn());
2450:       assertFalse(node6.isContinue());
2451:       assertFalse(node6.isTypeOf());
2452:       assertFalse(node6.hasChildren());
2453:       assertFalse(node6.isAssign());
2454:       assertFalse(node6.isDec());
2455:       assertFalse(node6.isReturn());
2456:       assertFalse(node6.isWhile());
2457:       assertFalse(node6.isFalse());
2458:       assertFalse(node6.isCast());
2459:       assertEquals((-1), node6.getSourcePosition());
2460:       assertFalse(node6.isDebugger());
2461:       assertFalse(node6.isNot());
2462:       assertFalse(node6.isAnd());
2463:       assertFalse(boolean7);
2464:       
2465:       boolean boolean8 = node6.isDefaultCase();
2466:       assertFalse(node6.equals((Object)node5));
2467:       assertFalse(node6.equals((Object)node3));
2468:       assertFalse(node6.equals((Object)node2));
2469:       assertFalse(node6.equals((Object)node4));
2470:       assertFalse(node6.equals((Object)node0));
2471:       assertFalse(node6.equals((Object)node1));
2472:       assertTrue(boolean8 == boolean2);
2473:       assertTrue(boolean8 == boolean5);
2474:       assertTrue(boolean8 == boolean6);
2475:       assertTrue(boolean8 == boolean4);
2476:       assertTrue(boolean8 == boolean7);
2477:       assertTrue(boolean8 == boolean0);
2478:       assertTrue(boolean8 == boolean3);
2479:       assertTrue(boolean8 == boolean1);
2480:       assertNotSame(node6, node3);
2481:       assertNotSame(node6, node5);
2482:       assertNotSame(node6, node0);
2483:       assertNotSame(node6, node1);
2484:       assertEquals(0, node6.getChildCount());
2485:       assertFalse(node6.isCatch());
2486:       assertFalse(node6.isRegExp());
2487:       assertFalse(node6.isDefaultCase());
2488:       assertFalse(node6.isSetterDef());
2489:       assertFalse(node6.isFunction());
2490:       assertEquals(40, node6.getType());
2491:       assertFalse(node6.isVar());
2492:       assertFalse(node6.isAdd());
2493:       assertFalse(node6.isNew());
2494:       assertFalse(node6.isCall());
2495:       assertFalse(node6.isEmpty());
2496:       assertFalse(node6.isNull());
2497:       assertFalse(node6.isIf());
2498:       assertFalse(node6.isVoid());
2499:       assertFalse(node6.isDelProp());
2500:       assertFalse(node6.isName());
2501:       assertFalse(node6.isTrue());
2502:       assertFalse(node6.isNE());
2503:       assertFalse(node6.hasMoreThanOneChild());
2504:       assertEquals((-1), node6.getLineno());
2505:       assertFalse(node6.isOr());
2506:       assertFalse(node6.isCase());
2507:       assertFalse(node6.isDo());
2508:       assertFalse(node6.isBlock());
2509:       assertFalse(node6.isLabel());
2510:       assertFalse(node6.isFor());
2511:       assertTrue(node6.isString());
2512:       assertFalse(node6.isAssignAdd());
2513:       assertFalse(node6.isArrayLit());
2514:       assertFalse(node6.hasOneChild());
2515:       assertFalse(node6.isTry());
2516:       assertFalse(node6.isNumber());
2517:       assertFalse(node6.isSwitch());
2518:       assertFalse(node6.isGetterDef());
2519:       assertEquals((-1), node6.getCharno());
2520:       assertFalse(node6.isLabelName());
2521:       assertFalse(node6.isParamList());
2522:       assertFalse(node6.isStringKey());
2523:       assertFalse(node6.isObjectLit());
2524:       assertFalse(node6.isWith());
2525:       assertFalse(node6.isGetProp());
2526:       assertFalse(node6.isInstanceOf());
2527:       assertFalse(node6.isScript());
2528:       assertFalse(node6.isThis());
2529:       assertFalse(node6.isComma());
2530:       assertFalse(node6.isThrow());
2531:       assertFalse(node6.isHook());
2532:       assertFalse(node6.isGetElem());
2533:       assertFalse(node6.isExprResult());
2534:       assertFalse(node6.isInc());
2535:       assertFalse(node6.isBreak());
2536:       assertFalse(node6.isIn());
2537:       assertFalse(node6.isContinue());
2538:       assertFalse(node6.isTypeOf());
2539:       assertFalse(node6.hasChildren());
2540:       assertFalse(node6.isAssign());
2541:       assertFalse(node6.isDec());
2542:       assertFalse(node6.isReturn());
2543:       assertFalse(node6.isWhile());
2544:       assertFalse(node6.isFalse());
2545:       assertFalse(node6.isCast());
2546:       assertEquals((-1), node6.getSourcePosition());
2547:       assertFalse(node6.isDebugger());
2548:       assertFalse(node6.isNot());
2549:       assertFalse(node6.isAnd());
2550:       assertFalse(boolean8);
2551:   }
2552: }
RegularFileObject[/tmp/EvoSuite_158_1628256040610/com/google/javascript/rhino/Node_158_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:41 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_158_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_158_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_158_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.InputId",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.javascript.rhino.jstype.TemplatizedType",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.Iterables",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.common.collect.Sets$ImprovedAbstractSet",
354:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
355:       "com.google.common.collect.Hashing",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
358:       "com.google.javascript.rhino.JSTypeExpression",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
367:     );
368:   }
369: }

[MASTER] 13:20:41.372 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("", 36, 36);
assertNotNull(node0);
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals(36, node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertTrue(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertEquals(36, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean0 = node0.isLabelName();
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals(36, node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertTrue(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertEquals(36, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(boolean0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean1 = node0.isOr();
assertTrue(boolean1 == boolean0);
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertEquals(36, node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertTrue(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertEquals(36, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(boolean1);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);

Node node1 = Node.newString(38, "");
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertNotNull(node1);
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertEquals(38, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertTrue(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);

StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertNull(staticSourceFile0);
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertEquals(38, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertTrue(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());

Node node2 = Node.newNumber((double) 12, 36, 37);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isOr());
assertEquals(39, node2.getType());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertEquals(36, node2.getLineno());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isWith());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertEquals(37, node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isAssign());
assertFalse(node2.isDebugger());
assertFalse(node2.hasChildren());
assertTrue(node2.isNumber());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());

Node node3 = node0.copyInformationFrom(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertSame(node0, node3);
assertNotSame(node0, node1);
assertSame(node3, node0);
assertNotSame(node3, node1);
assertNotNull(node3);
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertTrue(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals(37, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertEquals(36, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isOr());
assertEquals(39, node2.getType());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertEquals(36, node2.getLineno());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isWith());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertEquals(37, node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isAssign());
assertFalse(node2.isDebugger());
assertFalse(node2.hasChildren());
assertTrue(node2.isNumber());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isScript());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isAssign());
assertFalse(node3.isWith());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertEquals(37, node3.getCharno());
assertEquals(36, node3.getLineno());
assertFalse(node3.isGetElem());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isBreak());
assertFalse(node3.isExprResult());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isDo());
assertFalse(node3.isCase());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isNew());
assertFalse(node3.isSwitch());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertEquals(40, node3.getType());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSetterDef());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertTrue(node3.isString());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertFalse(node3.isTrue());
assertFalse(node3.isIf());
assertFalse(node3.isRegExp());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isReturn());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.hasChildren());
assertFalse(node3.isWhile());
assertFalse(node3.isInc());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());

boolean boolean2 = node0.getBooleanProp(53);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertTrue(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals(37, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertEquals(36, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(boolean2);

boolean boolean3 = node0.isReturn();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertTrue(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals(37, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertEquals(36, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(boolean3);

Node node4 = new Node(471, node3, node3, node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertNotNull(node4);
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertTrue(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals(37, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertEquals(36, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertEquals(38, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertTrue(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isOr());
assertEquals(39, node2.getType());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertEquals(36, node2.getLineno());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isWith());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertEquals(37, node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isAssign());
assertFalse(node2.isDebugger());
assertFalse(node2.hasChildren());
assertTrue(node2.isNumber());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isScript());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isAssign());
assertFalse(node3.isWith());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertEquals(37, node3.getCharno());
assertEquals(36, node3.getLineno());
assertFalse(node3.isGetElem());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isBreak());
assertFalse(node3.isExprResult());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isDo());
assertFalse(node3.isCase());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isNew());
assertFalse(node3.isSwitch());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertEquals(40, node3.getType());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSetterDef());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertTrue(node3.isString());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertFalse(node3.isTrue());
assertFalse(node3.isIf());
assertFalse(node3.isRegExp());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isReturn());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.hasChildren());
assertFalse(node3.isWhile());
assertFalse(node3.isInc());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node4.isCall());
assertFalse(node4.isStringKey());
assertFalse(node4.isName());
assertFalse(node4.isVar());
assertFalse(node4.isBlock());
assertFalse(node4.isNull());
assertFalse(node4.isDo());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isSetterDef());
assertFalse(node4.isCatch());
assertFalse(node4.isWhile());
assertFalse(node4.isOr());
assertFalse(node4.isReturn());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isTypeOf());
assertFalse(node4.isRegExp());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isGetElem());
assertFalse(node4.isGetterDef());
assertFalse(node4.isFor());
assertFalse(node4.isTry());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isNumber());
assertFalse(node4.isDefaultCase());
assertFalse(node4.hasOneChild());
assertFalse(node4.isScript());
assertFalse(node4.isEmpty());
assertFalse(node4.isLabel());
assertFalse(node4.isParamList());
assertFalse(node4.isSwitch());
assertFalse(node4.isLabelName());
assertFalse(node4.isArrayLit());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.isHook());
assertFalse(node4.isThis());
assertEquals(471, node4.getType());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isString());
assertFalse(node4.isCase());
assertFalse(node4.isInc());
assertFalse(node4.isGetProp());
assertFalse(node4.isWith());
assertFalse(node4.isIn());
assertFalse(node4.isExprResult());
assertFalse(node4.isNE());
assertFalse(node4.isComma());
assertFalse(node4.isIf());
assertFalse(node4.isBreak());
assertFalse(node4.isDelProp());
assertTrue(node4.hasChildren());
assertFalse(node4.isInstanceOf());
assertTrue(node4.hasMoreThanOneChild());
assertFalse(node4.isCast());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isDebugger());
assertFalse(node4.isObjectLit());
assertFalse(node4.isContinue());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertEquals(2, node4.getChildCount());
assertFalse(node4.isFunction());

String string0 = node2.toString(false, false, false);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertNotNull(string0);
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isOr());
assertEquals(39, node2.getType());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertEquals(36, node2.getLineno());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isWith());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertEquals(37, node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isAssign());
assertFalse(node2.isDebugger());
assertFalse(node2.hasChildren());
assertTrue(node2.isNumber());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals("NUMBER 12.0", string0);

boolean boolean4 = node3.isTrue();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertSame(node3, node0);
assertNotSame(node3, node1);
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertTrue(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals(37, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertEquals(36, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isOr());
assertEquals(39, node2.getType());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertEquals(36, node2.getLineno());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isWith());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertEquals(37, node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isAssign());
assertFalse(node2.isDebugger());
assertFalse(node2.hasChildren());
assertTrue(node2.isNumber());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isScript());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isAssign());
assertFalse(node3.isWith());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertEquals(37, node3.getCharno());
assertEquals(36, node3.getLineno());
assertFalse(node3.isGetElem());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isBreak());
assertFalse(node3.isExprResult());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isDo());
assertFalse(node3.isCase());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isNew());
assertFalse(node3.isSwitch());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertEquals(40, node3.getType());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSetterDef());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertTrue(node3.isString());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertFalse(node3.isTrue());
assertFalse(node3.isIf());
assertFalse(node3.isRegExp());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isReturn());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.hasChildren());
assertFalse(node3.isWhile());
assertFalse(node3.isInc());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(boolean4);

Iterable<Node> iterable0 = node4.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node1));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node3);
assertSame(node3, node0);
assertNotSame(node3, node1);
assertNotNull(iterable0);
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertTrue(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals(37, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertEquals(36, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertEquals(38, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertTrue(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isOr());
assertEquals(39, node2.getType());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertEquals(36, node2.getLineno());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isWith());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertEquals(37, node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isAssign());
assertFalse(node2.isDebugger());
assertFalse(node2.hasChildren());
assertTrue(node2.isNumber());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isScript());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isAssign());
assertFalse(node3.isWith());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertEquals(37, node3.getCharno());
assertEquals(36, node3.getLineno());
assertFalse(node3.isGetElem());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isBreak());
assertFalse(node3.isExprResult());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isDo());
assertFalse(node3.isCase());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isNew());
assertFalse(node3.isSwitch());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertEquals(40, node3.getType());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSetterDef());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertTrue(node3.isString());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertFalse(node3.isTrue());
assertFalse(node3.isIf());
assertFalse(node3.isRegExp());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isReturn());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.hasChildren());
assertFalse(node3.isWhile());
assertFalse(node3.isInc());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node4.isCall());
assertFalse(node4.isStringKey());
assertFalse(node4.isName());
assertFalse(node4.isVar());
assertFalse(node4.isBlock());
assertFalse(node4.isNull());
assertFalse(node4.isDo());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isSetterDef());
assertFalse(node4.isCatch());
assertFalse(node4.isWhile());
assertFalse(node4.isOr());
assertFalse(node4.isReturn());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isTypeOf());
assertFalse(node4.isRegExp());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isGetElem());
assertFalse(node4.isGetterDef());
assertFalse(node4.isFor());
assertFalse(node4.isTry());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isNumber());
assertFalse(node4.isDefaultCase());
assertFalse(node4.hasOneChild());
assertFalse(node4.isScript());
assertFalse(node4.isEmpty());
assertFalse(node4.isLabel());
assertFalse(node4.isParamList());
assertFalse(node4.isSwitch());
assertFalse(node4.isLabelName());
assertFalse(node4.isArrayLit());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.isHook());
assertFalse(node4.isThis());
assertEquals(471, node4.getType());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isString());
assertFalse(node4.isCase());
assertFalse(node4.isInc());
assertFalse(node4.isGetProp());
assertFalse(node4.isWith());
assertFalse(node4.isIn());
assertFalse(node4.isExprResult());
assertFalse(node4.isNE());
assertFalse(node4.isComma());
assertFalse(node4.isIf());
assertFalse(node4.isBreak());
assertFalse(node4.isDelProp());
assertTrue(node4.hasChildren());
assertFalse(node4.isInstanceOf());
assertTrue(node4.hasMoreThanOneChild());
assertFalse(node4.isCast());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isDebugger());
assertFalse(node4.isObjectLit());
assertFalse(node4.isContinue());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertEquals(2, node4.getChildCount());
assertFalse(node4.isFunction());

Node node5 = Node.newString(117, "", (-1049), 40);
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertNotSame(node5, node0);
assertNotSame(node5, node3);
assertNotSame(node5, node1);
assertNotNull(node5);
assertFalse(node5.isArrayLit());
assertFalse(node5.isTry());
assertFalse(node5.isVoid());
assertFalse(node5.isEmpty());
assertFalse(node5.isIf());
assertFalse(node5.isGetterDef());
assertFalse(node5.isDelProp());
assertFalse(node5.isDebugger());
assertFalse(node5.isNE());
assertFalse(node5.isTrue());
assertFalse(node5.isIn());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isSetterDef());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isFunction());
assertFalse(node5.isVar());
assertFalse(node5.isInc());
assertFalse(node5.isSwitch());
assertTrue(node5.isContinue());
assertFalse(node5.isStringKey());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isParamList());
assertFalse(node5.isInstanceOf());
assertEquals((-1), node5.getLineno());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isCase());
assertFalse(node5.isCatch());
assertFalse(node5.isWith());
assertFalse(node5.isRegExp());
assertFalse(node5.isHook());
assertFalse(node5.isThis());
assertFalse(node5.isBlock());
assertFalse(node5.isFor());
assertFalse(node5.hasOneChild());
assertFalse(node5.isCast());
assertFalse(node5.isGetElem());
assertFalse(node5.isScript());
assertFalse(node5.isExprResult());
assertEquals(117, node5.getType());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isLabelName());
assertFalse(node5.isNot());
assertFalse(node5.isNumber());
assertFalse(node5.isAnd());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isOr());
assertFalse(node5.isDo());
assertFalse(node5.isThrow());
assertFalse(node5.isLabel());
assertFalse(node5.isFalse());
assertFalse(node5.isNew());
assertFalse(node5.isAdd());
assertFalse(node5.isCall());
assertFalse(node5.isBreak());
assertFalse(node5.isString());
assertFalse(node5.isName());
assertFalse(node5.isNull());
assertFalse(node5.isObjectLit());
assertFalse(node5.isGetProp());
assertFalse(node5.isDec());
assertFalse(node5.hasChildren());
assertFalse(node5.isWhile());
assertFalse(node5.isAssign());
assertFalse(node5.isTypeOf());
assertFalse(node5.isComma());
assertFalse(node5.isReturn());

boolean boolean5 = node2.isReturn();
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isOr());
assertEquals(39, node2.getType());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertEquals(36, node2.getLineno());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isWith());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertEquals(37, node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isAssign());
assertFalse(node2.isDebugger());
assertFalse(node2.hasChildren());
assertTrue(node2.isNumber());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(boolean5);

boolean boolean6 = node2.isTrue();
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean5);
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isOr());
assertEquals(39, node2.getType());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertEquals(36, node2.getLineno());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isWith());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertEquals(37, node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isAssign());
assertFalse(node2.isDebugger());
assertFalse(node2.hasChildren());
assertTrue(node2.isNumber());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(boolean6);

Iterable<Node> iterable1 = node0.children();
assertFalse(iterable1.equals((Object)iterable0));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertSame(node0, node3);
assertNotSame(node0, node5);
assertNotSame(node0, node1);
assertFalse(iterable1.contains(node2));
assertNotNull(iterable1);
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertTrue(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals(37, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertEquals(36, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());

StringWriter stringWriter0 = new StringWriter(25);
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

StringWriter stringWriter1 = stringWriter0.append((CharSequence) "NUMBER 12.0");
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);
assertEquals("NUMBER 12.0", stringWriter0.toString());
assertEquals("NUMBER 12.0", stringWriter1.toString());

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
assertNotNull(mockPrintWriter0);

Locale locale0 = new Locale("H'Y@UN%");
assertNotNull(locale0);
assertEquals("", locale0.getISO3Country());
assertEquals("", locale0.getCountry());
assertEquals("h'y@un%", locale0.getLanguage());
assertEquals("", locale0.getVariant());
assertEquals("h'y@un%", locale0.toString());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags3);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());

Node node6 = Node.newString("ASSIGN_URSH", (-570), 1);
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node1));
assertNotSame(node6, node3);
assertNotSame(node6, node5);
assertNotSame(node6, node0);
assertNotSame(node6, node1);
assertNotNull(node6);
assertEquals(0, node6.getChildCount());
assertFalse(node6.isCatch());
assertFalse(node6.isRegExp());
assertFalse(node6.isDefaultCase());
assertFalse(node6.isSetterDef());
assertFalse(node6.isFunction());
assertEquals(40, node6.getType());
assertFalse(node6.isVar());
assertFalse(node6.isAdd());
assertFalse(node6.isNew());
assertFalse(node6.isCall());
assertFalse(node6.isEmpty());
assertFalse(node6.isNull());
assertFalse(node6.isIf());
assertFalse(node6.isVoid());
assertFalse(node6.isDelProp());
assertFalse(node6.isName());
assertFalse(node6.isTrue());
assertFalse(node6.isNE());
assertFalse(node6.hasMoreThanOneChild());
assertEquals((-1), node6.getLineno());
assertFalse(node6.isOr());
assertFalse(node6.isCase());
assertFalse(node6.isDo());
assertFalse(node6.isBlock());
assertFalse(node6.isLabel());
assertFalse(node6.isFor());
assertTrue(node6.isString());
assertFalse(node6.isAssignAdd());
assertFalse(node6.isArrayLit());
assertFalse(node6.hasOneChild());
assertFalse(node6.isTry());
assertFalse(node6.isNumber());
assertFalse(node6.isSwitch());
assertFalse(node6.isGetterDef());
assertEquals((-1), node6.getCharno());
assertFalse(node6.isLabelName());
assertFalse(node6.isParamList());
assertFalse(node6.isStringKey());
assertFalse(node6.isObjectLit());
assertFalse(node6.isWith());
assertFalse(node6.isGetProp());
assertFalse(node6.isInstanceOf());
assertFalse(node6.isScript());
assertFalse(node6.isThis());
assertFalse(node6.isComma());
assertFalse(node6.isThrow());
assertFalse(node6.isHook());
assertFalse(node6.isGetElem());
assertFalse(node6.isExprResult());
assertFalse(node6.isInc());
assertFalse(node6.isBreak());
assertFalse(node6.isIn());
assertFalse(node6.isContinue());
assertFalse(node6.isTypeOf());
assertFalse(node6.hasChildren());
assertFalse(node6.isAssign());
assertFalse(node6.isDec());
assertFalse(node6.isReturn());
assertFalse(node6.isWhile());
assertFalse(node6.isFalse());
assertFalse(node6.isCast());
assertEquals((-1), node6.getSourcePosition());
assertFalse(node6.isDebugger());
assertFalse(node6.isNot());
assertFalse(node6.isAnd());

boolean boolean7 = node6.isGetElem();
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node1));
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean6);
assertNotSame(node6, node3);
assertNotSame(node6, node5);
assertNotSame(node6, node0);
assertNotSame(node6, node1);
assertEquals(0, node6.getChildCount());
assertFalse(node6.isCatch());
assertFalse(node6.isRegExp());
assertFalse(node6.isDefaultCase());
assertFalse(node6.isSetterDef());
assertFalse(node6.isFunction());
assertEquals(40, node6.getType());
assertFalse(node6.isVar());
assertFalse(node6.isAdd());
assertFalse(node6.isNew());
assertFalse(node6.isCall());
assertFalse(node6.isEmpty());
assertFalse(node6.isNull());
assertFalse(node6.isIf());
assertFalse(node6.isVoid());
assertFalse(node6.isDelProp());
assertFalse(node6.isName());
assertFalse(node6.isTrue());
assertFalse(node6.isNE());
assertFalse(node6.hasMoreThanOneChild());
assertEquals((-1), node6.getLineno());
assertFalse(node6.isOr());
assertFalse(node6.isCase());
assertFalse(node6.isDo());
assertFalse(node6.isBlock());
assertFalse(node6.isLabel());
assertFalse(node6.isFor());
assertTrue(node6.isString());
assertFalse(node6.isAssignAdd());
assertFalse(node6.isArrayLit());
assertFalse(node6.hasOneChild());
assertFalse(node6.isTry());
assertFalse(node6.isNumber());
assertFalse(node6.isSwitch());
assertFalse(node6.isGetterDef());
assertEquals((-1), node6.getCharno());
assertFalse(node6.isLabelName());
assertFalse(node6.isParamList());
assertFalse(node6.isStringKey());
assertFalse(node6.isObjectLit());
assertFalse(node6.isWith());
assertFalse(node6.isGetProp());
assertFalse(node6.isInstanceOf());
assertFalse(node6.isScript());
assertFalse(node6.isThis());
assertFalse(node6.isComma());
assertFalse(node6.isThrow());
assertFalse(node6.isHook());
assertFalse(node6.isGetElem());
assertFalse(node6.isExprResult());
assertFalse(node6.isInc());
assertFalse(node6.isBreak());
assertFalse(node6.isIn());
assertFalse(node6.isContinue());
assertFalse(node6.isTypeOf());
assertFalse(node6.hasChildren());
assertFalse(node6.isAssign());
assertFalse(node6.isDec());
assertFalse(node6.isReturn());
assertFalse(node6.isWhile());
assertFalse(node6.isFalse());
assertFalse(node6.isCast());
assertEquals((-1), node6.getSourcePosition());
assertFalse(node6.isDebugger());
assertFalse(node6.isNot());
assertFalse(node6.isAnd());
assertFalse(boolean7);

boolean boolean8 = node6.isDefaultCase();
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node1));
assertTrue(boolean8 == boolean2);
assertTrue(boolean8 == boolean5);
assertTrue(boolean8 == boolean6);
assertTrue(boolean8 == boolean4);
assertTrue(boolean8 == boolean7);
assertTrue(boolean8 == boolean0);
assertTrue(boolean8 == boolean3);
assertTrue(boolean8 == boolean1);
assertNotSame(node6, node3);
assertNotSame(node6, node5);
assertNotSame(node6, node0);
assertNotSame(node6, node1);
assertEquals(0, node6.getChildCount());
assertFalse(node6.isCatch());
assertFalse(node6.isRegExp());
assertFalse(node6.isDefaultCase());
assertFalse(node6.isSetterDef());
assertFalse(node6.isFunction());
assertEquals(40, node6.getType());
assertFalse(node6.isVar());
assertFalse(node6.isAdd());
assertFalse(node6.isNew());
assertFalse(node6.isCall());
assertFalse(node6.isEmpty());
assertFalse(node6.isNull());
assertFalse(node6.isIf());
assertFalse(node6.isVoid());
assertFalse(node6.isDelProp());
assertFalse(node6.isName());
assertFalse(node6.isTrue());
assertFalse(node6.isNE());
assertFalse(node6.hasMoreThanOneChild());
assertEquals((-1), node6.getLineno());
assertFalse(node6.isOr());
assertFalse(node6.isCase());
assertFalse(node6.isDo());
assertFalse(node6.isBlock());
assertFalse(node6.isLabel());
assertFalse(node6.isFor());
assertTrue(node6.isString());
assertFalse(node6.isAssignAdd());
assertFalse(node6.isArrayLit());
assertFalse(node6.hasOneChild());
assertFalse(node6.isTry());
assertFalse(node6.isNumber());
assertFalse(node6.isSwitch());
assertFalse(node6.isGetterDef());
assertEquals((-1), node6.getCharno());
assertFalse(node6.isLabelName());
assertFalse(node6.isParamList());
assertFalse(node6.isStringKey());
assertFalse(node6.isObjectLit());
assertFalse(node6.isWith());
assertFalse(node6.isGetProp());
assertFalse(node6.isInstanceOf());
assertFalse(node6.isScript());
assertFalse(node6.isThis());
assertFalse(node6.isComma());
assertFalse(node6.isThrow());
assertFalse(node6.isHook());
assertFalse(node6.isGetElem());
assertFalse(node6.isExprResult());
assertFalse(node6.isInc());
assertFalse(node6.isBreak());
assertFalse(node6.isIn());
assertFalse(node6.isContinue());
assertFalse(node6.isTypeOf());
assertFalse(node6.hasChildren());
assertFalse(node6.isAssign());
assertFalse(node6.isDec());
assertFalse(node6.isReturn());
assertFalse(node6.isWhile());
assertFalse(node6.isFalse());
assertFalse(node6.isCast());
assertEquals((-1), node6.getSourcePosition());
assertFalse(node6.isDebugger());
assertFalse(node6.isNot());
assertFalse(node6.isAnd());
assertFalse(boolean8);


[MASTER] 13:20:43.715 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_167_1628256043241/com/google/javascript/rhino/Node_167_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_167_1628256043241/com/google/javascript/rhino/Node_167_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:43.715 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:43.715 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:43.715 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2041
[MASTER] 13:20:43.717 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_167_1628256043241/com/google/javascript/rhino/Node_167_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:43 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import java.io.StringWriter;
13: import java.util.Locale;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.mock.java.io.MockPrintWriter;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_167_tmp__ESTest extends Node_167_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Node node0 = Node.newString("", 36, 36);
25:       assertNotNull(node0);
26:       assertFalse(node0.isNull());
27:       assertFalse(node0.isParamList());
28:       assertFalse(node0.isStringKey());
29:       assertEquals(0, node0.getChildCount());
30:       assertFalse(node0.isCatch());
31:       assertFalse(node0.isName());
32:       assertFalse(node0.isCall());
33:       assertFalse(node0.isDefaultCase());
34:       assertFalse(node0.isFunction());
35:       assertFalse(node0.isTrue());
36:       assertEquals(40, node0.getType());
37:       assertFalse(node0.isVar());
38:       assertFalse(node0.isAssignAdd());
39:       assertFalse(node0.isAdd());
40:       assertFalse(node0.isEmpty());
41:       assertFalse(node0.isDo());
42:       assertFalse(node0.isSetterDef());
43:       assertFalse(node0.isNew());
44:       assertFalse(node0.isNumber());
45:       assertFalse(node0.isIf());
46:       assertFalse(node0.isGetterDef());
47:       assertFalse(node0.isNE());
48:       assertEquals(36, node0.getLineno());
49:       assertFalse(node0.isFor());
50:       assertFalse(node0.isLabel());
51:       assertFalse(node0.hasMoreThanOneChild());
52:       assertFalse(node0.isLabelName());
53:       assertFalse(node0.isArrayLit());
54:       assertFalse(node0.isScript());
55:       assertFalse(node0.isRegExp());
56:       assertFalse(node0.isWith());
57:       assertFalse(node0.isSwitch());
58:       assertEquals(36, node0.getCharno());
59:       assertFalse(node0.isBlock());
60:       assertEquals(147492, node0.getSourcePosition());
61:       assertFalse(node0.hasOneChild());
62:       assertFalse(node0.isHook());
63:       assertFalse(node0.isTry());
64:       assertTrue(node0.isString());
65:       assertFalse(node0.isCase());
66:       assertFalse(node0.isBreak());
67:       assertFalse(node0.isFalse());
68:       assertFalse(node0.isThrow());
69:       assertFalse(node0.isThis());
70:       assertFalse(node0.isComma());
71:       assertFalse(node0.isInstanceOf());
72:       assertFalse(node0.isAnd());
73:       assertFalse(node0.isIn());
74:       assertFalse(node0.isInc());
75:       assertFalse(node0.isDec());
76:       assertFalse(node0.hasChildren());
77:       assertFalse(node0.isTypeOf());
78:       assertFalse(node0.isDelProp());
79:       assertFalse(node0.isAssign());
80:       assertFalse(node0.isReturn());
81:       assertFalse(node0.isOr());
82:       assertFalse(node0.isCast());
83:       assertFalse(node0.isContinue());
84:       assertFalse(node0.isGetElem());
85:       assertFalse(node0.isExprResult());
86:       assertFalse(node0.isVoid());
87:       assertFalse(node0.isWhile());
88:       assertFalse(node0.isObjectLit());
89:       assertFalse(node0.isNot());
90:       assertFalse(node0.isDebugger());
91:       assertFalse(node0.isGetProp());
92:       
93:       boolean boolean0 = node0.isLabelName();
94:       assertFalse(node0.isNull());
95:       assertFalse(node0.isParamList());
96:       assertFalse(node0.isStringKey());
97:       assertEquals(0, node0.getChildCount());
98:       assertFalse(node0.isCatch());
99:       assertFalse(node0.isName());
100:       assertFalse(node0.isCall());
101:       assertFalse(node0.isDefaultCase());
102:       assertFalse(node0.isFunction());
103:       assertFalse(node0.isTrue());
104:       assertEquals(40, node0.getType());
105:       assertFalse(node0.isVar());
106:       assertFalse(node0.isAssignAdd());
107:       assertFalse(node0.isAdd());
108:       assertFalse(node0.isEmpty());
109:       assertFalse(node0.isDo());
110:       assertFalse(node0.isSetterDef());
111:       assertFalse(node0.isNew());
112:       assertFalse(node0.isNumber());
113:       assertFalse(node0.isIf());
114:       assertFalse(node0.isGetterDef());
115:       assertFalse(node0.isNE());
116:       assertEquals(36, node0.getLineno());
117:       assertFalse(node0.isFor());
118:       assertFalse(node0.isLabel());
119:       assertFalse(node0.hasMoreThanOneChild());
120:       assertFalse(node0.isLabelName());
121:       assertFalse(node0.isArrayLit());
122:       assertFalse(node0.isScript());
123:       assertFalse(node0.isRegExp());
124:       assertFalse(node0.isWith());
125:       assertFalse(node0.isSwitch());
126:       assertEquals(36, node0.getCharno());
127:       assertFalse(node0.isBlock());
128:       assertEquals(147492, node0.getSourcePosition());
129:       assertFalse(node0.hasOneChild());
130:       assertFalse(node0.isHook());
131:       assertFalse(node0.isTry());
132:       assertTrue(node0.isString());
133:       assertFalse(node0.isCase());
134:       assertFalse(node0.isBreak());
135:       assertFalse(node0.isFalse());
136:       assertFalse(node0.isThrow());
137:       assertFalse(node0.isThis());
138:       assertFalse(node0.isComma());
139:       assertFalse(node0.isInstanceOf());
140:       assertFalse(node0.isAnd());
141:       assertFalse(node0.isIn());
142:       assertFalse(node0.isInc());
143:       assertFalse(node0.isDec());
144:       assertFalse(node0.hasChildren());
145:       assertFalse(node0.isTypeOf());
146:       assertFalse(node0.isDelProp());
147:       assertFalse(node0.isAssign());
148:       assertFalse(node0.isReturn());
149:       assertFalse(node0.isOr());
150:       assertFalse(node0.isCast());
151:       assertFalse(node0.isContinue());
152:       assertFalse(node0.isGetElem());
153:       assertFalse(node0.isExprResult());
154:       assertFalse(node0.isVoid());
155:       assertFalse(node0.isWhile());
156:       assertFalse(node0.isObjectLit());
157:       assertFalse(node0.isNot());
158:       assertFalse(node0.isDebugger());
159:       assertFalse(node0.isGetProp());
160:       
161:       boolean boolean1 = node0.isOr();
162:       assertTrue(boolean1 == boolean0);
163:       assertFalse(node0.isNull());
164:       assertFalse(node0.isParamList());
165:       assertFalse(node0.isStringKey());
166:       assertEquals(0, node0.getChildCount());
167:       assertFalse(node0.isCatch());
168:       assertFalse(node0.isName());
169:       assertFalse(node0.isCall());
170:       assertFalse(node0.isDefaultCase());
171:       assertFalse(node0.isFunction());
172:       assertFalse(node0.isTrue());
173:       assertEquals(40, node0.getType());
174:       assertFalse(node0.isVar());
175:       assertFalse(node0.isAssignAdd());
176:       assertFalse(node0.isAdd());
177:       assertFalse(node0.isEmpty());
178:       assertFalse(node0.isDo());
179:       assertFalse(node0.isSetterDef());
180:       assertFalse(node0.isNew());
181:       assertFalse(node0.isNumber());
182:       assertFalse(node0.isIf());
183:       assertFalse(node0.isGetterDef());
184:       assertFalse(node0.isNE());
185:       assertEquals(36, node0.getLineno());
186:       assertFalse(node0.isFor());
187:       assertFalse(node0.isLabel());
188:       assertFalse(node0.hasMoreThanOneChild());
189:       assertFalse(node0.isLabelName());
190:       assertFalse(node0.isArrayLit());
191:       assertFalse(node0.isScript());
192:       assertFalse(node0.isRegExp());
193:       assertFalse(node0.isWith());
194:       assertFalse(node0.isSwitch());
195:       assertEquals(36, node0.getCharno());
196:       assertFalse(node0.isBlock());
197:       assertEquals(147492, node0.getSourcePosition());
198:       assertFalse(node0.hasOneChild());
199:       assertFalse(node0.isHook());
200:       assertFalse(node0.isTry());
201:       assertTrue(node0.isString());
202:       assertFalse(node0.isCase());
203:       assertFalse(node0.isBreak());
204:       assertFalse(node0.isFalse());
205:       assertFalse(node0.isThrow());
206:       assertFalse(node0.isThis());
207:       assertFalse(node0.isComma());
208:       assertFalse(node0.isInstanceOf());
209:       assertFalse(node0.isAnd());
210:       assertFalse(node0.isIn());
211:       assertFalse(node0.isInc());
212:       assertFalse(node0.isDec());
213:       assertFalse(node0.hasChildren());
214:       assertFalse(node0.isTypeOf());
215:       assertFalse(node0.isDelProp());
216:       assertFalse(node0.isAssign());
217:       assertFalse(node0.isReturn());
218:       assertFalse(node0.isOr());
219:       assertFalse(node0.isCast());
220:       assertFalse(node0.isContinue());
221:       assertFalse(node0.isGetElem());
222:       assertFalse(node0.isExprResult());
223:       assertFalse(node0.isVoid());
224:       assertFalse(node0.isWhile());
225:       assertFalse(node0.isObjectLit());
226:       assertFalse(node0.isNot());
227:       assertFalse(node0.isDebugger());
228:       assertFalse(node0.isGetProp());
229:       
230:       Node node1 = Node.newString(3, "");
231:       assertFalse(node1.equals((Object)node0));
232:       assertNotSame(node1, node0);
233:       assertNotNull(node1);
234:       assertFalse(node1.isRegExp());
235:       assertFalse(node1.isTrue());
236:       assertFalse(node1.isDebugger());
237:       assertFalse(node1.isTry());
238:       assertFalse(node1.isVoid());
239:       assertFalse(node1.isDefaultCase());
240:       assertFalse(node1.isArrayLit());
241:       assertFalse(node1.isCatch());
242:       assertEquals(0, node1.getChildCount());
243:       assertFalse(node1.isFunction());
244:       assertEquals(3, node1.getType());
245:       assertFalse(node1.isFor());
246:       assertFalse(node1.isStringKey());
247:       assertFalse(node1.isParamList());
248:       assertFalse(node1.isGetterDef());
249:       assertFalse(node1.isString());
250:       assertEquals((-1), node1.getCharno());
251:       assertFalse(node1.isNew());
252:       assertFalse(node1.isDo());
253:       assertFalse(node1.isWhile());
254:       assertFalse(node1.isSwitch());
255:       assertFalse(node1.isVar());
256:       assertFalse(node1.isCall());
257:       assertFalse(node1.isReturn());
258:       assertFalse(node1.isLabel());
259:       assertFalse(node1.isNull());
260:       assertFalse(node1.isBreak());
261:       assertFalse(node1.isName());
262:       assertFalse(node1.isDelProp());
263:       assertFalse(node1.isAssignAdd());
264:       assertFalse(node1.isAdd());
265:       assertFalse(node1.isEmpty());
266:       assertFalse(node1.isOr());
267:       assertFalse(node1.isScript());
268:       assertFalse(node1.isExprResult());
269:       assertFalse(node1.isAnd());
270:       assertFalse(node1.isCast());
271:       assertFalse(node1.isInstanceOf());
272:       assertFalse(node1.isGetElem());
273:       assertFalse(node1.isAssign());
274:       assertFalse(node1.isWith());
275:       assertFalse(node1.isTypeOf());
276:       assertEquals((-1), node1.getSourcePosition());
277:       assertFalse(node1.isDec());
278:       assertFalse(node1.isComma());
279:       assertFalse(node1.hasChildren());
280:       assertFalse(node1.isThis());
281:       assertFalse(node1.isGetProp());
282:       assertFalse(node1.isLabelName());
283:       assertFalse(node1.hasOneChild());
284:       assertFalse(node1.isNot());
285:       assertFalse(node1.isObjectLit());
286:       assertFalse(node1.isNumber());
287:       assertFalse(node1.isInc());
288:       assertFalse(node1.isBlock());
289:       assertFalse(node1.isCase());
290:       assertFalse(node1.isHook());
291:       assertFalse(node1.isContinue());
292:       assertFalse(node1.hasMoreThanOneChild());
293:       assertFalse(node1.isFalse());
294:       assertFalse(node1.isNE());
295:       assertFalse(node1.isSetterDef());
296:       assertEquals((-1), node1.getLineno());
297:       assertFalse(node1.isThrow());
298:       assertFalse(node1.isIf());
299:       assertFalse(node1.isIn());
300:       
301:       StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
302:       assertFalse(node1.equals((Object)node0));
303:       assertNotSame(node1, node0);
304:       assertNull(staticSourceFile0);
305:       assertFalse(node1.isRegExp());
306:       assertFalse(node1.isTrue());
307:       assertFalse(node1.isDebugger());
308:       assertFalse(node1.isTry());
309:       assertFalse(node1.isVoid());
310:       assertFalse(node1.isDefaultCase());
311:       assertFalse(node1.isArrayLit());
312:       assertFalse(node1.isCatch());
313:       assertEquals(0, node1.getChildCount());
314:       assertFalse(node1.isFunction());
315:       assertEquals(3, node1.getType());
316:       assertFalse(node1.isFor());
317:       assertFalse(node1.isStringKey());
318:       assertFalse(node1.isParamList());
319:       assertFalse(node1.isGetterDef());
320:       assertFalse(node1.isString());
321:       assertEquals((-1), node1.getCharno());
322:       assertFalse(node1.isNew());
323:       assertFalse(node1.isDo());
324:       assertFalse(node1.isWhile());
325:       assertFalse(node1.isSwitch());
326:       assertFalse(node1.isVar());
327:       assertFalse(node1.isCall());
328:       assertFalse(node1.isReturn());
329:       assertFalse(node1.isLabel());
330:       assertFalse(node1.isNull());
331:       assertFalse(node1.isBreak());
332:       assertFalse(node1.isName());
333:       assertFalse(node1.isDelProp());
334:       assertFalse(node1.isAssignAdd());
335:       assertFalse(node1.isAdd());
336:       assertFalse(node1.isEmpty());
337:       assertFalse(node1.isOr());
338:       assertFalse(node1.isScript());
339:       assertFalse(node1.isExprResult());
340:       assertFalse(node1.isAnd());
341:       assertFalse(node1.isCast());
342:       assertFalse(node1.isInstanceOf());
343:       assertFalse(node1.isGetElem());
344:       assertFalse(node1.isAssign());
345:       assertFalse(node1.isWith());
346:       assertFalse(node1.isTypeOf());
347:       assertEquals((-1), node1.getSourcePosition());
348:       assertFalse(node1.isDec());
349:       assertFalse(node1.isComma());
350:       assertFalse(node1.hasChildren());
351:       assertFalse(node1.isThis());
352:       assertFalse(node1.isGetProp());
353:       assertFalse(node1.isLabelName());
354:       assertFalse(node1.hasOneChild());
355:       assertFalse(node1.isNot());
356:       assertFalse(node1.isObjectLit());
357:       assertFalse(node1.isNumber());
358:       assertFalse(node1.isInc());
359:       assertFalse(node1.isBlock());
360:       assertFalse(node1.isCase());
361:       assertFalse(node1.isHook());
362:       assertFalse(node1.isContinue());
363:       assertFalse(node1.hasMoreThanOneChild());
364:       assertFalse(node1.isFalse());
365:       assertFalse(node1.isNE());
366:       assertFalse(node1.isSetterDef());
367:       assertEquals((-1), node1.getLineno());
368:       assertFalse(node1.isThrow());
369:       assertFalse(node1.isIf());
370:       assertFalse(node1.isIn());
371:       
372:       Node node2 = Node.newNumber((double) 12, 36, 37);
373:       assertFalse(node2.equals((Object)node1));
374:       assertFalse(node2.equals((Object)node0));
375:       assertNotNull(node2);
376:       assertFalse(node2.isRegExp());
377:       assertFalse(node2.isTrue());
378:       assertFalse(node2.isDebugger());
379:       assertFalse(node2.isFunction());
380:       assertEquals(0, node2.getChildCount());
381:       assertFalse(node2.isFor());
382:       assertFalse(node2.isTry());
383:       assertFalse(node2.isDefaultCase());
384:       assertFalse(node2.isGetterDef());
385:       assertFalse(node2.isArrayLit());
386:       assertFalse(node2.isStringKey());
387:       assertFalse(node2.isParamList());
388:       assertFalse(node2.isInc());
389:       assertEquals(39, node2.getType());
390:       assertEquals(147493, node2.getSourcePosition());
391:       assertFalse(node2.isContinue());
392:       assertFalse(node2.hasMoreThanOneChild());
393:       assertFalse(node2.isHook());
394:       assertFalse(node2.isBlock());
395:       assertFalse(node2.isCase());
396:       assertFalse(node2.isThrow());
397:       assertFalse(node2.isNE());
398:       assertFalse(node2.isThis());
399:       assertFalse(node2.isSetterDef());
400:       assertEquals(36, node2.getLineno());
401:       assertFalse(node2.isIn());
402:       assertFalse(node2.isInstanceOf());
403:       assertFalse(node2.isCatch());
404:       assertEquals(37, node2.getCharno());
405:       assertFalse(node2.isIf());
406:       assertFalse(node2.isScript());
407:       assertFalse(node2.isExprResult());
408:       assertFalse(node2.isNot());
409:       assertFalse(node2.isObjectLit());
410:       assertFalse(node2.isWith());
411:       assertFalse(node2.hasOneChild());
412:       assertFalse(node2.isGetProp());
413:       assertFalse(node2.isLabel());
414:       assertFalse(node2.isFalse());
415:       assertFalse(node2.isCast());
416:       assertFalse(node2.isLabelName());
417:       assertFalse(node2.isAnd());
418:       assertFalse(node2.isSwitch());
419:       assertFalse(node2.isAdd());
420:       assertFalse(node2.isString());
421:       assertFalse(node2.isVar());
422:       assertFalse(node2.isReturn());
423:       assertFalse(node2.isNew());
424:       assertFalse(node2.isDo());
425:       assertTrue(node2.isNumber());
426:       assertFalse(node2.isWhile());
427:       assertFalse(node2.isAssignAdd());
428:       assertFalse(node2.isTypeOf());
429:       assertFalse(node2.isNull());
430:       assertFalse(node2.isDec());
431:       assertFalse(node2.isComma());
432:       assertFalse(node2.hasChildren());
433:       assertFalse(node2.isBreak());
434:       assertFalse(node2.isEmpty());
435:       assertFalse(node2.isAssign());
436:       assertFalse(node2.isOr());
437:       assertFalse(node2.isCall());
438:       assertFalse(node2.isGetElem());
439:       assertFalse(node2.isName());
440:       assertFalse(node2.isVoid());
441:       assertFalse(node2.isDelProp());
442:       
443:       Node node3 = node0.copyInformationFrom(node2);
444:       assertFalse(node0.equals((Object)node1));
445:       assertFalse(node0.equals((Object)node2));
446:       assertFalse(node2.equals((Object)node1));
447:       assertFalse(node2.equals((Object)node0));
448:       assertFalse(node3.equals((Object)node1));
449:       assertFalse(node3.equals((Object)node2));
450:       assertNotSame(node0, node1);
451:       assertSame(node0, node3);
452:       assertNotSame(node3, node1);
453:       assertSame(node3, node0);
454:       assertNotNull(node3);
455:       assertFalse(node0.isNull());
456:       assertFalse(node0.isParamList());
457:       assertFalse(node0.isStringKey());
458:       assertEquals(0, node0.getChildCount());
459:       assertFalse(node0.isCatch());
460:       assertFalse(node0.isName());
461:       assertFalse(node0.isCall());
462:       assertFalse(node0.isDefaultCase());
463:       assertFalse(node0.isFunction());
464:       assertFalse(node0.isTrue());
465:       assertEquals(40, node0.getType());
466:       assertFalse(node0.isVar());
467:       assertFalse(node0.isAssignAdd());
468:       assertFalse(node0.isAdd());
469:       assertFalse(node0.isEmpty());
470:       assertFalse(node0.isDo());
471:       assertFalse(node0.isSetterDef());
472:       assertFalse(node0.isNew());
473:       assertFalse(node0.isNumber());
474:       assertFalse(node0.isIf());
475:       assertFalse(node0.isGetterDef());
476:       assertFalse(node0.isNE());
477:       assertEquals(36, node0.getLineno());
478:       assertFalse(node0.isFor());
479:       assertFalse(node0.isLabel());
480:       assertFalse(node0.hasMoreThanOneChild());
481:       assertFalse(node0.isLabelName());
482:       assertFalse(node0.isArrayLit());
483:       assertFalse(node0.isScript());
484:       assertFalse(node0.isRegExp());
485:       assertFalse(node0.isWith());
486:       assertFalse(node0.isSwitch());
487:       assertFalse(node0.isBlock());
488:       assertFalse(node0.hasOneChild());
489:       assertFalse(node0.isHook());
490:       assertFalse(node0.isTry());
491:       assertTrue(node0.isString());
492:       assertFalse(node0.isCase());
493:       assertFalse(node0.isBreak());
494:       assertFalse(node0.isFalse());
495:       assertFalse(node0.isThrow());
496:       assertFalse(node0.isThis());
497:       assertFalse(node0.isComma());
498:       assertFalse(node0.isInstanceOf());
499:       assertFalse(node0.isAnd());
500:       assertEquals(37, node0.getCharno());
501:       assertEquals(147493, node0.getSourcePosition());
502:       assertFalse(node0.isIn());
503:       assertFalse(node0.isInc());
504:       assertFalse(node0.isDec());
505:       assertFalse(node0.hasChildren());
506:       assertFalse(node0.isTypeOf());
507:       assertFalse(node0.isDelProp());
508:       assertFalse(node0.isAssign());
509:       assertFalse(node0.isReturn());
510:       assertFalse(node0.isOr());
511:       assertFalse(node0.isCast());
512:       assertFalse(node0.isContinue());
513:       assertFalse(node0.isGetElem());
514:       assertFalse(node0.isExprResult());
515:       assertFalse(node0.isVoid());
516:       assertFalse(node0.isWhile());
517:       assertFalse(node0.isObjectLit());
518:       assertFalse(node0.isNot());
519:       assertFalse(node0.isDebugger());
520:       assertFalse(node0.isGetProp());
521:       assertFalse(node2.isRegExp());
522:       assertFalse(node2.isTrue());
523:       assertFalse(node2.isDebugger());
524:       assertFalse(node2.isFunction());
525:       assertEquals(0, node2.getChildCount());
526:       assertFalse(node2.isFor());
527:       assertFalse(node2.isTry());
528:       assertFalse(node2.isDefaultCase());
529:       assertFalse(node2.isGetterDef());
530:       assertFalse(node2.isArrayLit());
531:       assertFalse(node2.isStringKey());
532:       assertFalse(node2.isParamList());
533:       assertFalse(node2.isInc());
534:       assertEquals(39, node2.getType());
535:       assertEquals(147493, node2.getSourcePosition());
536:       assertFalse(node2.isContinue());
537:       assertFalse(node2.hasMoreThanOneChild());
538:       assertFalse(node2.isHook());
539:       assertFalse(node2.isBlock());
540:       assertFalse(node2.isCase());
541:       assertFalse(node2.isThrow());
542:       assertFalse(node2.isNE());
543:       assertFalse(node2.isThis());
544:       assertFalse(node2.isSetterDef());
545:       assertEquals(36, node2.getLineno());
546:       assertFalse(node2.isIn());
547:       assertFalse(node2.isInstanceOf());
548:       assertFalse(node2.isCatch());
549:       assertEquals(37, node2.getCharno());
550:       assertFalse(node2.isIf());
551:       assertFalse(node2.isScript());
552:       assertFalse(node2.isExprResult());
553:       assertFalse(node2.isNot());
554:       assertFalse(node2.isObjectLit());
555:       assertFalse(node2.isWith());
556:       assertFalse(node2.hasOneChild());
557:       assertFalse(node2.isGetProp());
558:       assertFalse(node2.isLabel());
559:       assertFalse(node2.isFalse());
560:       assertFalse(node2.isCast());
561:       assertFalse(node2.isLabelName());
562:       assertFalse(node2.isAnd());
563:       assertFalse(node2.isSwitch());
564:       assertFalse(node2.isAdd());
565:       assertFalse(node2.isString());
566:       assertFalse(node2.isVar());
567:       assertFalse(node2.isReturn());
568:       assertFalse(node2.isNew());
569:       assertFalse(node2.isDo());
570:       assertTrue(node2.isNumber());
571:       assertFalse(node2.isWhile());
572:       assertFalse(node2.isAssignAdd());
573:       assertFalse(node2.isTypeOf());
574:       assertFalse(node2.isNull());
575:       assertFalse(node2.isDec());
576:       assertFalse(node2.isComma());
577:       assertFalse(node2.hasChildren());
578:       assertFalse(node2.isBreak());
579:       assertFalse(node2.isEmpty());
580:       assertFalse(node2.isAssign());
581:       assertFalse(node2.isOr());
582:       assertFalse(node2.isCall());
583:       assertFalse(node2.isGetElem());
584:       assertFalse(node2.isName());
585:       assertFalse(node2.isVoid());
586:       assertFalse(node2.isDelProp());
587:       assertTrue(node3.isString());
588:       assertFalse(node3.isNew());
589:       assertFalse(node3.isAdd());
590:       assertFalse(node3.isCall());
591:       assertFalse(node3.isName());
592:       assertFalse(node3.isStringKey());
593:       assertFalse(node3.isParamList());
594:       assertFalse(node3.isNull());
595:       assertEquals(0, node3.getChildCount());
596:       assertFalse(node3.isAssignAdd());
597:       assertFalse(node3.isOr());
598:       assertFalse(node3.isContinue());
599:       assertFalse(node3.isSetterDef());
600:       assertFalse(node3.isDefaultCase());
601:       assertFalse(node3.isDo());
602:       assertFalse(node3.isFunction());
603:       assertFalse(node3.isVar());
604:       assertFalse(node3.isLabel());
605:       assertEquals(40, node3.getType());
606:       assertFalse(node3.hasOneChild());
607:       assertFalse(node3.isArrayLit());
608:       assertFalse(node3.isTry());
609:       assertFalse(node3.isScript());
610:       assertFalse(node3.isGetterDef());
611:       assertFalse(node3.isIf());
612:       assertFalse(node3.isLabelName());
613:       assertEquals(37, node3.getCharno());
614:       assertFalse(node3.isNumber());
615:       assertFalse(node3.isNE());
616:       assertFalse(node3.isInstanceOf());
617:       assertFalse(node3.hasMoreThanOneChild());
618:       assertFalse(node3.isCase());
619:       assertFalse(node3.isCatch());
620:       assertFalse(node3.isWith());
621:       assertEquals(36, node3.getLineno());
622:       assertFalse(node3.isRegExp());
623:       assertFalse(node3.isFor());
624:       assertFalse(node3.isHook());
625:       assertFalse(node3.isThis());
626:       assertFalse(node3.isBlock());
627:       assertFalse(node3.isInc());
628:       assertFalse(node3.isBreak());
629:       assertFalse(node3.isSwitch());
630:       assertEquals(147493, node3.getSourcePosition());
631:       assertFalse(node3.isIn());
632:       assertFalse(node3.isFalse());
633:       assertFalse(node3.isThrow());
634:       assertFalse(node3.isVoid());
635:       assertFalse(node3.isCast());
636:       assertFalse(node3.isEmpty());
637:       assertFalse(node3.isGetElem());
638:       assertFalse(node3.isExprResult());
639:       assertFalse(node3.isNot());
640:       assertFalse(node3.isDelProp());
641:       assertFalse(node3.isAnd());
642:       assertFalse(node3.isDebugger());
643:       assertFalse(node3.isTrue());
644:       assertFalse(node3.isObjectLit());
645:       assertFalse(node3.isGetProp());
646:       assertFalse(node3.hasChildren());
647:       assertFalse(node3.isDec());
648:       assertFalse(node3.isWhile());
649:       assertFalse(node3.isAssign());
650:       assertFalse(node3.isTypeOf());
651:       assertFalse(node3.isComma());
652:       assertFalse(node3.isReturn());
653:       
654:       boolean boolean2 = node0.getBooleanProp(53);
655:       assertFalse(node0.equals((Object)node1));
656:       assertFalse(node0.equals((Object)node2));
657:       assertTrue(boolean2 == boolean0);
658:       assertTrue(boolean2 == boolean1);
659:       assertNotSame(node0, node1);
660:       assertSame(node0, node3);
661:       assertFalse(node0.isNull());
662:       assertFalse(node0.isParamList());
663:       assertFalse(node0.isStringKey());
664:       assertEquals(0, node0.getChildCount());
665:       assertFalse(node0.isCatch());
666:       assertFalse(node0.isName());
667:       assertFalse(node0.isCall());
668:       assertFalse(node0.isDefaultCase());
669:       assertFalse(node0.isFunction());
670:       assertFalse(node0.isTrue());
671:       assertEquals(40, node0.getType());
672:       assertFalse(node0.isVar());
673:       assertFalse(node0.isAssignAdd());
674:       assertFalse(node0.isAdd());
675:       assertFalse(node0.isEmpty());
676:       assertFalse(node0.isDo());
677:       assertFalse(node0.isSetterDef());
678:       assertFalse(node0.isNew());
679:       assertFalse(node0.isNumber());
680:       assertFalse(node0.isIf());
681:       assertFalse(node0.isGetterDef());
682:       assertFalse(node0.isNE());
683:       assertEquals(36, node0.getLineno());
684:       assertFalse(node0.isFor());
685:       assertFalse(node0.isLabel());
686:       assertFalse(node0.hasMoreThanOneChild());
687:       assertFalse(node0.isLabelName());
688:       assertFalse(node0.isArrayLit());
689:       assertFalse(node0.isScript());
690:       assertFalse(node0.isRegExp());
691:       assertFalse(node0.isWith());
692:       assertFalse(node0.isSwitch());
693:       assertFalse(node0.isBlock());
694:       assertFalse(node0.hasOneChild());
695:       assertFalse(node0.isHook());
696:       assertFalse(node0.isTry());
697:       assertTrue(node0.isString());
698:       assertFalse(node0.isCase());
699:       assertFalse(node0.isBreak());
700:       assertFalse(node0.isFalse());
701:       assertFalse(node0.isThrow());
702:       assertFalse(node0.isThis());
703:       assertFalse(node0.isComma());
704:       assertFalse(node0.isInstanceOf());
705:       assertFalse(node0.isAnd());
706:       assertEquals(37, node0.getCharno());
707:       assertEquals(147493, node0.getSourcePosition());
708:       assertFalse(node0.isIn());
709:       assertFalse(node0.isInc());
710:       assertFalse(node0.isDec());
711:       assertFalse(node0.hasChildren());
712:       assertFalse(node0.isTypeOf());
713:       assertFalse(node0.isDelProp());
714:       assertFalse(node0.isAssign());
715:       assertFalse(node0.isReturn());
716:       assertFalse(node0.isOr());
717:       assertFalse(node0.isCast());
718:       assertFalse(node0.isContinue());
719:       assertFalse(node0.isGetElem());
720:       assertFalse(node0.isExprResult());
721:       assertFalse(node0.isVoid());
722:       assertFalse(node0.isWhile());
723:       assertFalse(node0.isObjectLit());
724:       assertFalse(node0.isNot());
725:       assertFalse(node0.isDebugger());
726:       assertFalse(node0.isGetProp());
727:       
728:       boolean boolean3 = node0.isReturn();
729:       assertFalse(node0.equals((Object)node1));
730:       assertFalse(node0.equals((Object)node2));
731:       assertTrue(boolean3 == boolean0);
732:       assertTrue(boolean3 == boolean1);
733:       assertTrue(boolean3 == boolean2);
734:       assertNotSame(node0, node1);
735:       assertSame(node0, node3);
736:       assertFalse(node0.isNull());
737:       assertFalse(node0.isParamList());
738:       assertFalse(node0.isStringKey());
739:       assertEquals(0, node0.getChildCount());
740:       assertFalse(node0.isCatch());
741:       assertFalse(node0.isName());
742:       assertFalse(node0.isCall());
743:       assertFalse(node0.isDefaultCase());
744:       assertFalse(node0.isFunction());
745:       assertFalse(node0.isTrue());
746:       assertEquals(40, node0.getType());
747:       assertFalse(node0.isVar());
748:       assertFalse(node0.isAssignAdd());
749:       assertFalse(node0.isAdd());
750:       assertFalse(node0.isEmpty());
751:       assertFalse(node0.isDo());
752:       assertFalse(node0.isSetterDef());
753:       assertFalse(node0.isNew());
754:       assertFalse(node0.isNumber());
755:       assertFalse(node0.isIf());
756:       assertFalse(node0.isGetterDef());
757:       assertFalse(node0.isNE());
758:       assertEquals(36, node0.getLineno());
759:       assertFalse(node0.isFor());
760:       assertFalse(node0.isLabel());
761:       assertFalse(node0.hasMoreThanOneChild());
762:       assertFalse(node0.isLabelName());
763:       assertFalse(node0.isArrayLit());
764:       assertFalse(node0.isScript());
765:       assertFalse(node0.isRegExp());
766:       assertFalse(node0.isWith());
767:       assertFalse(node0.isSwitch());
768:       assertFalse(node0.isBlock());
769:       assertFalse(node0.hasOneChild());
770:       assertFalse(node0.isHook());
771:       assertFalse(node0.isTry());
772:       assertTrue(node0.isString());
773:       assertFalse(node0.isCase());
774:       assertFalse(node0.isBreak());
775:       assertFalse(node0.isFalse());
776:       assertFalse(node0.isThrow());
777:       assertFalse(node0.isThis());
778:       assertFalse(node0.isComma());
779:       assertFalse(node0.isInstanceOf());
780:       assertFalse(node0.isAnd());
781:       assertEquals(37, node0.getCharno());
782:       assertEquals(147493, node0.getSourcePosition());
783:       assertFalse(node0.isIn());
784:       assertFalse(node0.isInc());
785:       assertFalse(node0.isDec());
786:       assertFalse(node0.hasChildren());
787:       assertFalse(node0.isTypeOf());
788:       assertFalse(node0.isDelProp());
789:       assertFalse(node0.isAssign());
790:       assertFalse(node0.isReturn());
791:       assertFalse(node0.isOr());
792:       assertFalse(node0.isCast());
793:       assertFalse(node0.isContinue());
794:       assertFalse(node0.isGetElem());
795:       assertFalse(node0.isExprResult());
796:       assertFalse(node0.isVoid());
797:       assertFalse(node0.isWhile());
798:       assertFalse(node0.isObjectLit());
799:       assertFalse(node0.isNot());
800:       assertFalse(node0.isDebugger());
801:       assertFalse(node0.isGetProp());
802:       
803:       Node node4 = new Node(471, node3, node3, node0, node1);
804:       assertFalse(node0.equals((Object)node1));
805:       assertFalse(node0.equals((Object)node2));
806:       assertFalse(node1.equals((Object)node3));
807:       assertFalse(node1.equals((Object)node0));
808:       assertFalse(node1.equals((Object)node2));
809:       assertFalse(node2.equals((Object)node1));
810:       assertFalse(node2.equals((Object)node0));
811:       assertFalse(node2.equals((Object)node3));
812:       assertFalse(node3.equals((Object)node1));
813:       assertFalse(node3.equals((Object)node2));
814:       assertFalse(node4.equals((Object)node0));
815:       assertFalse(node4.equals((Object)node3));
816:       assertFalse(node4.equals((Object)node1));
817:       assertFalse(node4.equals((Object)node2));
818:       assertNotNull(node4);
819:       assertFalse(node0.isNull());
820:       assertFalse(node0.isParamList());
821:       assertFalse(node0.isStringKey());
822:       assertEquals(0, node0.getChildCount());
823:       assertFalse(node0.isCatch());
824:       assertFalse(node0.isName());
825:       assertFalse(node0.isCall());
826:       assertFalse(node0.isDefaultCase());
827:       assertFalse(node0.isFunction());
828:       assertFalse(node0.isTrue());
829:       assertEquals(40, node0.getType());
830:       assertFalse(node0.isVar());
831:       assertFalse(node0.isAssignAdd());
832:       assertFalse(node0.isAdd());
833:       assertFalse(node0.isEmpty());
834:       assertFalse(node0.isDo());
835:       assertFalse(node0.isSetterDef());
836:       assertFalse(node0.isNew());
837:       assertFalse(node0.isNumber());
838:       assertFalse(node0.isIf());
839:       assertFalse(node0.isGetterDef());
840:       assertFalse(node0.isNE());
841:       assertEquals(36, node0.getLineno());
842:       assertFalse(node0.isFor());
843:       assertFalse(node0.isLabel());
844:       assertFalse(node0.hasMoreThanOneChild());
845:       assertFalse(node0.isLabelName());
846:       assertFalse(node0.isArrayLit());
847:       assertFalse(node0.isScript());
848:       assertFalse(node0.isRegExp());
849:       assertFalse(node0.isWith());
850:       assertFalse(node0.isSwitch());
851:       assertFalse(node0.isBlock());
852:       assertFalse(node0.hasOneChild());
853:       assertFalse(node0.isHook());
854:       assertFalse(node0.isTry());
855:       assertTrue(node0.isString());
856:       assertFalse(node0.isCase());
857:       assertFalse(node0.isBreak());
858:       assertFalse(node0.isFalse());
859:       assertFalse(node0.isThrow());
860:       assertFalse(node0.isThis());
861:       assertFalse(node0.isComma());
862:       assertFalse(node0.isInstanceOf());
863:       assertFalse(node0.isAnd());
864:       assertEquals(37, node0.getCharno());
865:       assertEquals(147493, node0.getSourcePosition());
866:       assertFalse(node0.isIn());
867:       assertFalse(node0.isInc());
868:       assertFalse(node0.isDec());
869:       assertFalse(node0.hasChildren());
870:       assertFalse(node0.isTypeOf());
871:       assertFalse(node0.isDelProp());
872:       assertFalse(node0.isAssign());
873:       assertFalse(node0.isReturn());
874:       assertFalse(node0.isOr());
875:       assertFalse(node0.isCast());
876:       assertFalse(node0.isContinue());
877:       assertFalse(node0.isGetElem());
878:       assertFalse(node0.isExprResult());
879:       assertFalse(node0.isVoid());
880:       assertFalse(node0.isWhile());
881:       assertFalse(node0.isObjectLit());
882:       assertFalse(node0.isNot());
883:       assertFalse(node0.isDebugger());
884:       assertFalse(node0.isGetProp());
885:       assertFalse(node1.isRegExp());
886:       assertFalse(node1.isTrue());
887:       assertFalse(node1.isDebugger());
888:       assertFalse(node1.isTry());
889:       assertFalse(node1.isVoid());
890:       assertFalse(node1.isDefaultCase());
891:       assertFalse(node1.isArrayLit());
892:       assertFalse(node1.isCatch());
893:       assertEquals(0, node1.getChildCount());
894:       assertFalse(node1.isFunction());
895:       assertEquals(3, node1.getType());
896:       assertFalse(node1.isFor());
897:       assertFalse(node1.isStringKey());
898:       assertFalse(node1.isParamList());
899:       assertFalse(node1.isGetterDef());
900:       assertFalse(node1.isString());
901:       assertEquals((-1), node1.getCharno());
902:       assertFalse(node1.isNew());
903:       assertFalse(node1.isDo());
904:       assertFalse(node1.isWhile());
905:       assertFalse(node1.isSwitch());
906:       assertFalse(node1.isVar());
907:       assertFalse(node1.isCall());
908:       assertFalse(node1.isReturn());
909:       assertFalse(node1.isLabel());
910:       assertFalse(node1.isNull());
911:       assertFalse(node1.isBreak());
912:       assertFalse(node1.isName());
913:       assertFalse(node1.isDelProp());
914:       assertFalse(node1.isAssignAdd());
915:       assertFalse(node1.isAdd());
916:       assertFalse(node1.isEmpty());
917:       assertFalse(node1.isOr());
918:       assertFalse(node1.isScript());
919:       assertFalse(node1.isExprResult());
920:       assertFalse(node1.isAnd());
921:       assertFalse(node1.isCast());
922:       assertFalse(node1.isInstanceOf());
923:       assertFalse(node1.isGetElem());
924:       assertFalse(node1.isAssign());
925:       assertFalse(node1.isWith());
926:       assertFalse(node1.isTypeOf());
927:       assertEquals((-1), node1.getSourcePosition());
928:       assertFalse(node1.isDec());
929:       assertFalse(node1.isComma());
930:       assertFalse(node1.hasChildren());
931:       assertFalse(node1.isThis());
932:       assertFalse(node1.isGetProp());
933:       assertFalse(node1.isLabelName());
934:       assertFalse(node1.hasOneChild());
935:       assertFalse(node1.isNot());
936:       assertFalse(node1.isObjectLit());
937:       assertFalse(node1.isNumber());
938:       assertFalse(node1.isInc());
939:       assertFalse(node1.isBlock());
940:       assertFalse(node1.isCase());
941:       assertFalse(node1.isHook());
942:       assertFalse(node1.isContinue());
943:       assertFalse(node1.hasMoreThanOneChild());
944:       assertFalse(node1.isFalse());
945:       assertFalse(node1.isNE());
946:       assertFalse(node1.isSetterDef());
947:       assertEquals((-1), node1.getLineno());
948:       assertFalse(node1.isThrow());
949:       assertFalse(node1.isIf());
950:       assertFalse(node1.isIn());
951:       assertFalse(node2.isRegExp());
952:       assertFalse(node2.isTrue());
953:       assertFalse(node2.isDebugger());
954:       assertFalse(node2.isFunction());
955:       assertEquals(0, node2.getChildCount());
956:       assertFalse(node2.isFor());
957:       assertFalse(node2.isTry());
958:       assertFalse(node2.isDefaultCase());
959:       assertFalse(node2.isGetterDef());
960:       assertFalse(node2.isArrayLit());
961:       assertFalse(node2.isStringKey());
962:       assertFalse(node2.isParamList());
963:       assertFalse(node2.isInc());
964:       assertEquals(39, node2.getType());
965:       assertEquals(147493, node2.getSourcePosition());
966:       assertFalse(node2.isContinue());
967:       assertFalse(node2.hasMoreThanOneChild());
968:       assertFalse(node2.isHook());
969:       assertFalse(node2.isBlock());
970:       assertFalse(node2.isCase());
971:       assertFalse(node2.isThrow());
972:       assertFalse(node2.isNE());
973:       assertFalse(node2.isThis());
974:       assertFalse(node2.isSetterDef());
975:       assertEquals(36, node2.getLineno());
976:       assertFalse(node2.isIn());
977:       assertFalse(node2.isInstanceOf());
978:       assertFalse(node2.isCatch());
979:       assertEquals(37, node2.getCharno());
980:       assertFalse(node2.isIf());
981:       assertFalse(node2.isScript());
982:       assertFalse(node2.isExprResult());
983:       assertFalse(node2.isNot());
984:       assertFalse(node2.isObjectLit());
985:       assertFalse(node2.isWith());
986:       assertFalse(node2.hasOneChild());
987:       assertFalse(node2.isGetProp());
988:       assertFalse(node2.isLabel());
989:       assertFalse(node2.isFalse());
990:       assertFalse(node2.isCast());
991:       assertFalse(node2.isLabelName());
992:       assertFalse(node2.isAnd());
993:       assertFalse(node2.isSwitch());
994:       assertFalse(node2.isAdd());
995:       assertFalse(node2.isString());
996:       assertFalse(node2.isVar());
997:       assertFalse(node2.isReturn());
998:       assertFalse(node2.isNew());
999:       assertFalse(node2.isDo());
1000:       assertTrue(node2.isNumber());
1001:       assertFalse(node2.isWhile());
1002:       assertFalse(node2.isAssignAdd());
1003:       assertFalse(node2.isTypeOf());
1004:       assertFalse(node2.isNull());
1005:       assertFalse(node2.isDec());
1006:       assertFalse(node2.isComma());
1007:       assertFalse(node2.hasChildren());
1008:       assertFalse(node2.isBreak());
1009:       assertFalse(node2.isEmpty());
1010:       assertFalse(node2.isAssign());
1011:       assertFalse(node2.isOr());
1012:       assertFalse(node2.isCall());
1013:       assertFalse(node2.isGetElem());
1014:       assertFalse(node2.isName());
1015:       assertFalse(node2.isVoid());
1016:       assertFalse(node2.isDelProp());
1017:       assertTrue(node3.isString());
1018:       assertFalse(node3.isNew());
1019:       assertFalse(node3.isAdd());
1020:       assertFalse(node3.isCall());
1021:       assertFalse(node3.isName());
1022:       assertFalse(node3.isStringKey());
1023:       assertFalse(node3.isParamList());
1024:       assertFalse(node3.isNull());
1025:       assertEquals(0, node3.getChildCount());
1026:       assertFalse(node3.isAssignAdd());
1027:       assertFalse(node3.isOr());
1028:       assertFalse(node3.isContinue());
1029:       assertFalse(node3.isSetterDef());
1030:       assertFalse(node3.isDefaultCase());
1031:       assertFalse(node3.isDo());
1032:       assertFalse(node3.isFunction());
1033:       assertFalse(node3.isVar());
1034:       assertFalse(node3.isLabel());
1035:       assertEquals(40, node3.getType());
1036:       assertFalse(node3.hasOneChild());
1037:       assertFalse(node3.isArrayLit());
1038:       assertFalse(node3.isTry());
1039:       assertFalse(node3.isScript());
1040:       assertFalse(node3.isGetterDef());
1041:       assertFalse(node3.isIf());
1042:       assertFalse(node3.isLabelName());
1043:       assertEquals(37, node3.getCharno());
1044:       assertFalse(node3.isNumber());
1045:       assertFalse(node3.isNE());
1046:       assertFalse(node3.isInstanceOf());
1047:       assertFalse(node3.hasMoreThanOneChild());
1048:       assertFalse(node3.isCase());
1049:       assertFalse(node3.isCatch());
1050:       assertFalse(node3.isWith());
1051:       assertEquals(36, node3.getLineno());
1052:       assertFalse(node3.isRegExp());
1053:       assertFalse(node3.isFor());
1054:       assertFalse(node3.isHook());
1055:       assertFalse(node3.isThis());
1056:       assertFalse(node3.isBlock());
1057:       assertFalse(node3.isInc());
1058:       assertFalse(node3.isBreak());
1059:       assertFalse(node3.isSwitch());
1060:       assertEquals(147493, node3.getSourcePosition());
1061:       assertFalse(node3.isIn());
1062:       assertFalse(node3.isFalse());
1063:       assertFalse(node3.isThrow());
1064:       assertFalse(node3.isVoid());
1065:       assertFalse(node3.isCast());
1066:       assertFalse(node3.isEmpty());
1067:       assertFalse(node3.isGetElem());
1068:       assertFalse(node3.isExprResult());
1069:       assertFalse(node3.isNot());
1070:       assertFalse(node3.isDelProp());
1071:       assertFalse(node3.isAnd());
1072:       assertFalse(node3.isDebugger());
1073:       assertFalse(node3.isTrue());
1074:       assertFalse(node3.isObjectLit());
1075:       assertFalse(node3.isGetProp());
1076:       assertFalse(node3.hasChildren());
1077:       assertFalse(node3.isDec());
1078:       assertFalse(node3.isWhile());
1079:       assertFalse(node3.isAssign());
1080:       assertFalse(node3.isTypeOf());
1081:       assertFalse(node3.isComma());
1082:       assertFalse(node3.isReturn());
1083:       assertFalse(node4.isThrow());
1084:       assertFalse(node4.isFalse());
1085:       assertFalse(node4.isBreak());
1086:       assertFalse(node4.isComma());
1087:       assertFalse(node4.isHook());
1088:       assertFalse(node4.isThis());
1089:       assertEquals(2, node4.getChildCount());
1090:       assertFalse(node4.isWith());
1091:       assertFalse(node4.isIn());
1092:       assertTrue(node4.hasChildren());
1093:       assertFalse(node4.isInstanceOf());
1094:       assertTrue(node4.hasMoreThanOneChild());
1095:       assertFalse(node4.isInc());
1096:       assertFalse(node4.isNE());
1097:       assertFalse(node4.isIf());
1098:       assertEquals(471, node4.getType());
1099:       assertFalse(node4.isCast());
1100:       assertFalse(node4.isDelProp());
1101:       assertFalse(node4.isGetElem());
1102:       assertFalse(node4.isExprResult());
1103:       assertFalse(node4.isFunction());
1104:       assertFalse(node4.isTypeOf());
1105:       assertFalse(node4.isAssign());
1106:       assertFalse(node4.isDec());
1107:       assertFalse(node4.isReturn());
1108:       assertFalse(node4.isObjectLit());
1109:       assertFalse(node4.isContinue());
1110:       assertFalse(node4.isAnd());
1111:       assertFalse(node4.isString());
1112:       assertFalse(node4.isGetProp());
1113:       assertFalse(node4.isDebugger());
1114:       assertFalse(node4.isNot());
1115:       assertEquals((-1), node4.getSourcePosition());
1116:       assertFalse(node4.isCall());
1117:       assertFalse(node4.isStringKey());
1118:       assertFalse(node4.isName());
1119:       assertFalse(node4.isAdd());
1120:       assertFalse(node4.isNew());
1121:       assertFalse(node4.isSetterDef());
1122:       assertFalse(node4.isWhile());
1123:       assertFalse(node4.isVar());
1124:       assertFalse(node4.isBlock());
1125:       assertFalse(node4.isCatch());
1126:       assertFalse(node4.isDo());
1127:       assertEquals((-1), node4.getLineno());
1128:       assertFalse(node4.isTrue());
1129:       assertFalse(node4.isVoid());
1130:       assertFalse(node4.isOr());
1131:       assertFalse(node4.isNull());
1132:       assertFalse(node4.hasOneChild());
1133:       assertFalse(node4.isLabelName());
1134:       assertFalse(node4.isArrayLit());
1135:       assertFalse(node4.isEmpty());
1136:       assertFalse(node4.isRegExp());
1137:       assertFalse(node4.isTry());
1138:       assertFalse(node4.isAssignAdd());
1139:       assertFalse(node4.isDefaultCase());
1140:       assertFalse(node4.isLabel());
1141:       assertFalse(node4.isFor());
1142:       assertFalse(node4.isScript());
1143:       assertFalse(node4.isCase());
1144:       assertFalse(node4.isParamList());
1145:       assertEquals((-1), node4.getCharno());
1146:       assertFalse(node4.isNumber());
1147:       assertFalse(node4.isSwitch());
1148:       assertFalse(node4.isGetterDef());
1149:       
1150:       String string0 = node2.toString(false, false, false);
1151:       assertFalse(node2.equals((Object)node1));
1152:       assertFalse(node2.equals((Object)node4));
1153:       assertFalse(node2.equals((Object)node0));
1154:       assertFalse(node2.equals((Object)node3));
1155:       assertNotNull(string0);
1156:       assertFalse(node2.isRegExp());
1157:       assertFalse(node2.isTrue());
1158:       assertFalse(node2.isDebugger());
1159:       assertFalse(node2.isFunction());
1160:       assertEquals(0, node2.getChildCount());
1161:       assertFalse(node2.isFor());
1162:       assertFalse(node2.isTry());
1163:       assertFalse(node2.isDefaultCase());
1164:       assertFalse(node2.isGetterDef());
1165:       assertFalse(node2.isArrayLit());
1166:       assertFalse(node2.isStringKey());
1167:       assertFalse(node2.isParamList());
1168:       assertFalse(node2.isInc());
1169:       assertEquals(39, node2.getType());
1170:       assertEquals(147493, node2.getSourcePosition());
1171:       assertFalse(node2.isContinue());
1172:       assertFalse(node2.hasMoreThanOneChild());
1173:       assertFalse(node2.isHook());
1174:       assertFalse(node2.isBlock());
1175:       assertFalse(node2.isCase());
1176:       assertFalse(node2.isThrow());
1177:       assertFalse(node2.isNE());
1178:       assertFalse(node2.isThis());
1179:       assertFalse(node2.isSetterDef());
1180:       assertEquals(36, node2.getLineno());
1181:       assertFalse(node2.isIn());
1182:       assertFalse(node2.isInstanceOf());
1183:       assertFalse(node2.isCatch());
1184:       assertEquals(37, node2.getCharno());
1185:       assertFalse(node2.isIf());
1186:       assertFalse(node2.isScript());
1187:       assertFalse(node2.isExprResult());
1188:       assertFalse(node2.isNot());
1189:       assertFalse(node2.isObjectLit());
1190:       assertFalse(node2.isWith());
1191:       assertFalse(node2.hasOneChild());
1192:       assertFalse(node2.isGetProp());
1193:       assertFalse(node2.isLabel());
1194:       assertFalse(node2.isFalse());
1195:       assertFalse(node2.isCast());
1196:       assertFalse(node2.isLabelName());
1197:       assertFalse(node2.isAnd());
1198:       assertFalse(node2.isSwitch());
1199:       assertFalse(node2.isAdd());
1200:       assertFalse(node2.isString());
1201:       assertFalse(node2.isVar());
1202:       assertFalse(node2.isReturn());
1203:       assertFalse(node2.isNew());
1204:       assertFalse(node2.isDo());
1205:       assertTrue(node2.isNumber());
1206:       assertFalse(node2.isWhile());
1207:       assertFalse(node2.isAssignAdd());
1208:       assertFalse(node2.isTypeOf());
1209:       assertFalse(node2.isNull());
1210:       assertFalse(node2.isDec());
1211:       assertFalse(node2.isComma());
1212:       assertFalse(node2.hasChildren());
1213:       assertFalse(node2.isBreak());
1214:       assertFalse(node2.isEmpty());
1215:       assertFalse(node2.isAssign());
1216:       assertFalse(node2.isOr());
1217:       assertFalse(node2.isCall());
1218:       assertFalse(node2.isGetElem());
1219:       assertFalse(node2.isName());
1220:       assertFalse(node2.isVoid());
1221:       assertFalse(node2.isDelProp());
1222:       
1223:       boolean boolean4 = node3.isTrue();
1224:       assertFalse(node0.equals((Object)node1));
1225:       assertFalse(node0.equals((Object)node2));
1226:       assertFalse(node0.equals((Object)node4));
1227:       assertFalse(node2.equals((Object)node1));
1228:       assertFalse(node2.equals((Object)node4));
1229:       assertFalse(node2.equals((Object)node0));
1230:       assertFalse(node2.equals((Object)node3));
1231:       assertFalse(node3.equals((Object)node4));
1232:       assertFalse(node3.equals((Object)node1));
1233:       assertFalse(node3.equals((Object)node2));
1234:       assertTrue(boolean4 == boolean3);
1235:       assertTrue(boolean4 == boolean0);
1236:       assertTrue(boolean4 == boolean2);
1237:       assertTrue(boolean4 == boolean1);
1238:       assertNotSame(node0, node1);
1239:       assertSame(node0, node3);
1240:       assertNotSame(node3, node1);
1241:       assertSame(node3, node0);
1242:       assertFalse(node0.isNull());
1243:       assertFalse(node0.isParamList());
1244:       assertFalse(node0.isStringKey());
1245:       assertEquals(0, node0.getChildCount());
1246:       assertFalse(node0.isCatch());
1247:       assertFalse(node0.isName());
1248:       assertFalse(node0.isCall());
1249:       assertFalse(node0.isDefaultCase());
1250:       assertFalse(node0.isFunction());
1251:       assertFalse(node0.isTrue());
1252:       assertEquals(40, node0.getType());
1253:       assertFalse(node0.isVar());
1254:       assertFalse(node0.isAssignAdd());
1255:       assertFalse(node0.isAdd());
1256:       assertFalse(node0.isEmpty());
1257:       assertFalse(node0.isDo());
1258:       assertFalse(node0.isSetterDef());
1259:       assertFalse(node0.isNew());
1260:       assertFalse(node0.isNumber());
1261:       assertFalse(node0.isIf());
1262:       assertFalse(node0.isGetterDef());
1263:       assertFalse(node0.isNE());
1264:       assertEquals(36, node0.getLineno());
1265:       assertFalse(node0.isFor());
1266:       assertFalse(node0.isLabel());
1267:       assertFalse(node0.hasMoreThanOneChild());
1268:       assertFalse(node0.isLabelName());
1269:       assertFalse(node0.isArrayLit());
1270:       assertFalse(node0.isScript());
1271:       assertFalse(node0.isRegExp());
1272:       assertFalse(node0.isWith());
1273:       assertFalse(node0.isSwitch());
1274:       assertFalse(node0.isBlock());
1275:       assertFalse(node0.hasOneChild());
1276:       assertFalse(node0.isHook());
1277:       assertFalse(node0.isTry());
1278:       assertTrue(node0.isString());
1279:       assertFalse(node0.isCase());
1280:       assertFalse(node0.isBreak());
1281:       assertFalse(node0.isFalse());
1282:       assertFalse(node0.isThrow());
1283:       assertFalse(node0.isThis());
1284:       assertFalse(node0.isComma());
1285:       assertFalse(node0.isInstanceOf());
1286:       assertFalse(node0.isAnd());
1287:       assertEquals(37, node0.getCharno());
1288:       assertEquals(147493, node0.getSourcePosition());
1289:       assertFalse(node0.isIn());
1290:       assertFalse(node0.isInc());
1291:       assertFalse(node0.isDec());
1292:       assertFalse(node0.hasChildren());
1293:       assertFalse(node0.isTypeOf());
1294:       assertFalse(node0.isDelProp());
1295:       assertFalse(node0.isAssign());
1296:       assertFalse(node0.isReturn());
1297:       assertFalse(node0.isOr());
1298:       assertFalse(node0.isCast());
1299:       assertFalse(node0.isContinue());
1300:       assertFalse(node0.isGetElem());
1301:       assertFalse(node0.isExprResult());
1302:       assertFalse(node0.isVoid());
1303:       assertFalse(node0.isWhile());
1304:       assertFalse(node0.isObjectLit());
1305:       assertFalse(node0.isNot());
1306:       assertFalse(node0.isDebugger());
1307:       assertFalse(node0.isGetProp());
1308:       assertFalse(node2.isRegExp());
1309:       assertFalse(node2.isTrue());
1310:       assertFalse(node2.isDebugger());
1311:       assertFalse(node2.isFunction());
1312:       assertEquals(0, node2.getChildCount());
1313:       assertFalse(node2.isFor());
1314:       assertFalse(node2.isTry());
1315:       assertFalse(node2.isDefaultCase());
1316:       assertFalse(node2.isGetterDef());
1317:       assertFalse(node2.isArrayLit());
1318:       assertFalse(node2.isStringKey());
1319:       assertFalse(node2.isParamList());
1320:       assertFalse(node2.isInc());
1321:       assertEquals(39, node2.getType());
1322:       assertEquals(147493, node2.getSourcePosition());
1323:       assertFalse(node2.isContinue());
1324:       assertFalse(node2.hasMoreThanOneChild());
1325:       assertFalse(node2.isHook());
1326:       assertFalse(node2.isBlock());
1327:       assertFalse(node2.isCase());
1328:       assertFalse(node2.isThrow());
1329:       assertFalse(node2.isNE());
1330:       assertFalse(node2.isThis());
1331:       assertFalse(node2.isSetterDef());
1332:       assertEquals(36, node2.getLineno());
1333:       assertFalse(node2.isIn());
1334:       assertFalse(node2.isInstanceOf());
1335:       assertFalse(node2.isCatch());
1336:       assertEquals(37, node2.getCharno());
1337:       assertFalse(node2.isIf());
1338:       assertFalse(node2.isScript());
1339:       assertFalse(node2.isExprResult());
1340:       assertFalse(node2.isNot());
1341:       assertFalse(node2.isObjectLit());
1342:       assertFalse(node2.isWith());
1343:       assertFalse(node2.hasOneChild());
1344:       assertFalse(node2.isGetProp());
1345:       assertFalse(node2.isLabel());
1346:       assertFalse(node2.isFalse());
1347:       assertFalse(node2.isCast());
1348:       assertFalse(node2.isLabelName());
1349:       assertFalse(node2.isAnd());
1350:       assertFalse(node2.isSwitch());
1351:       assertFalse(node2.isAdd());
1352:       assertFalse(node2.isString());
1353:       assertFalse(node2.isVar());
1354:       assertFalse(node2.isReturn());
1355:       assertFalse(node2.isNew());
1356:       assertFalse(node2.isDo());
1357:       assertTrue(node2.isNumber());
1358:       assertFalse(node2.isWhile());
1359:       assertFalse(node2.isAssignAdd());
1360:       assertFalse(node2.isTypeOf());
1361:       assertFalse(node2.isNull());
1362:       assertFalse(node2.isDec());
1363:       assertFalse(node2.isComma());
1364:       assertFalse(node2.hasChildren());
1365:       assertFalse(node2.isBreak());
1366:       assertFalse(node2.isEmpty());
1367:       assertFalse(node2.isAssign());
1368:       assertFalse(node2.isOr());
1369:       assertFalse(node2.isCall());
1370:       assertFalse(node2.isGetElem());
1371:       assertFalse(node2.isName());
1372:       assertFalse(node2.isVoid());
1373:       assertFalse(node2.isDelProp());
1374:       assertTrue(node3.isString());
1375:       assertFalse(node3.isNew());
1376:       assertFalse(node3.isAdd());
1377:       assertFalse(node3.isCall());
1378:       assertFalse(node3.isName());
1379:       assertFalse(node3.isStringKey());
1380:       assertFalse(node3.isParamList());
1381:       assertFalse(node3.isNull());
1382:       assertEquals(0, node3.getChildCount());
1383:       assertFalse(node3.isAssignAdd());
1384:       assertFalse(node3.isOr());
1385:       assertFalse(node3.isContinue());
1386:       assertFalse(node3.isSetterDef());
1387:       assertFalse(node3.isDefaultCase());
1388:       assertFalse(node3.isDo());
1389:       assertFalse(node3.isFunction());
1390:       assertFalse(node3.isVar());
1391:       assertFalse(node3.isLabel());
1392:       assertEquals(40, node3.getType());
1393:       assertFalse(node3.hasOneChild());
1394:       assertFalse(node3.isArrayLit());
1395:       assertFalse(node3.isTry());
1396:       assertFalse(node3.isScript());
1397:       assertFalse(node3.isGetterDef());
1398:       assertFalse(node3.isIf());
1399:       assertFalse(node3.isLabelName());
1400:       assertEquals(37, node3.getCharno());
1401:       assertFalse(node3.isNumber());
1402:       assertFalse(node3.isNE());
1403:       assertFalse(node3.isInstanceOf());
1404:       assertFalse(node3.hasMoreThanOneChild());
1405:       assertFalse(node3.isCase());
1406:       assertFalse(node3.isCatch());
1407:       assertFalse(node3.isWith());
1408:       assertEquals(36, node3.getLineno());
1409:       assertFalse(node3.isRegExp());
1410:       assertFalse(node3.isFor());
1411:       assertFalse(node3.isHook());
1412:       assertFalse(node3.isThis());
1413:       assertFalse(node3.isBlock());
1414:       assertFalse(node3.isInc());
1415:       assertFalse(node3.isBreak());
1416:       assertFalse(node3.isSwitch());
1417:       assertEquals(147493, node3.getSourcePosition());
1418:       assertFalse(node3.isIn());
1419:       assertFalse(node3.isFalse());
1420:       assertFalse(node3.isThrow());
1421:       assertFalse(node3.isVoid());
1422:       assertFalse(node3.isCast());
1423:       assertFalse(node3.isEmpty());
1424:       assertFalse(node3.isGetElem());
1425:       assertFalse(node3.isExprResult());
1426:       assertFalse(node3.isNot());
1427:       assertFalse(node3.isDelProp());
1428:       assertFalse(node3.isAnd());
1429:       assertFalse(node3.isDebugger());
1430:       assertFalse(node3.isTrue());
1431:       assertFalse(node3.isObjectLit());
1432:       assertFalse(node3.isGetProp());
1433:       assertFalse(node3.hasChildren());
1434:       assertFalse(node3.isDec());
1435:       assertFalse(node3.isWhile());
1436:       assertFalse(node3.isAssign());
1437:       assertFalse(node3.isTypeOf());
1438:       assertFalse(node3.isComma());
1439:       assertFalse(node3.isReturn());
1440:       
1441:       Iterable<Node> iterable0 = node4.children();
1442:       assertFalse(node0.equals((Object)node1));
1443:       assertFalse(node0.equals((Object)node2));
1444:       assertFalse(node0.equals((Object)node4));
1445:       assertFalse(node1.equals((Object)node3));
1446:       assertFalse(node1.equals((Object)node4));
1447:       assertFalse(node1.equals((Object)node0));
1448:       assertFalse(node1.equals((Object)node2));
1449:       assertFalse(node2.equals((Object)node1));
1450:       assertFalse(node2.equals((Object)node4));
1451:       assertFalse(node2.equals((Object)node0));
1452:       assertFalse(node2.equals((Object)node3));
1453:       assertFalse(node3.equals((Object)node4));
1454:       assertFalse(node3.equals((Object)node1));
1455:       assertFalse(node3.equals((Object)node2));
1456:       assertFalse(node4.equals((Object)node0));
1457:       assertFalse(node4.equals((Object)node3));
1458:       assertFalse(node4.equals((Object)node1));
1459:       assertFalse(node4.equals((Object)node2));
1460:       assertNotSame(node0, node1);
1461:       assertSame(node0, node3);
1462:       assertNotSame(node1, node3);
1463:       assertNotSame(node1, node0);
1464:       assertNotSame(node3, node1);
1465:       assertSame(node3, node0);
1466:       assertNotNull(iterable0);
1467:       assertFalse(node0.isNull());
1468:       assertFalse(node0.isParamList());
1469:       assertFalse(node0.isStringKey());
1470:       assertEquals(0, node0.getChildCount());
1471:       assertFalse(node0.isCatch());
1472:       assertFalse(node0.isName());
1473:       assertFalse(node0.isCall());
1474:       assertFalse(node0.isDefaultCase());
1475:       assertFalse(node0.isFunction());
1476:       assertFalse(node0.isTrue());
1477:       assertEquals(40, node0.getType());
1478:       assertFalse(node0.isVar());
1479:       assertFalse(node0.isAssignAdd());
1480:       assertFalse(node0.isAdd());
1481:       assertFalse(node0.isEmpty());
1482:       assertFalse(node0.isDo());
1483:       assertFalse(node0.isSetterDef());
1484:       assertFalse(node0.isNew());
1485:       assertFalse(node0.isNumber());
1486:       assertFalse(node0.isIf());
1487:       assertFalse(node0.isGetterDef());
1488:       assertFalse(node0.isNE());
1489:       assertEquals(36, node0.getLineno());
1490:       assertFalse(node0.isFor());
1491:       assertFalse(node0.isLabel());
1492:       assertFalse(node0.hasMoreThanOneChild());
1493:       assertFalse(node0.isLabelName());
1494:       assertFalse(node0.isArrayLit());
1495:       assertFalse(node0.isScript());
1496:       assertFalse(node0.isRegExp());
1497:       assertFalse(node0.isWith());
1498:       assertFalse(node0.isSwitch());
1499:       assertFalse(node0.isBlock());
1500:       assertFalse(node0.hasOneChild());
1501:       assertFalse(node0.isHook());
1502:       assertFalse(node0.isTry());
1503:       assertTrue(node0.isString());
1504:       assertFalse(node0.isCase());
1505:       assertFalse(node0.isBreak());
1506:       assertFalse(node0.isFalse());
1507:       assertFalse(node0.isThrow());
1508:       assertFalse(node0.isThis());
1509:       assertFalse(node0.isComma());
1510:       assertFalse(node0.isInstanceOf());
1511:       assertFalse(node0.isAnd());
1512:       assertEquals(37, node0.getCharno());
1513:       assertEquals(147493, node0.getSourcePosition());
1514:       assertFalse(node0.isIn());
1515:       assertFalse(node0.isInc());
1516:       assertFalse(node0.isDec());
1517:       assertFalse(node0.hasChildren());
1518:       assertFalse(node0.isTypeOf());
1519:       assertFalse(node0.isDelProp());
1520:       assertFalse(node0.isAssign());
1521:       assertFalse(node0.isReturn());
1522:       assertFalse(node0.isOr());
1523:       assertFalse(node0.isCast());
1524:       assertFalse(node0.isContinue());
1525:       assertFalse(node0.isGetElem());
1526:       assertFalse(node0.isExprResult());
1527:       assertFalse(node0.isVoid());
1528:       assertFalse(node0.isWhile());
1529:       assertFalse(node0.isObjectLit());
1530:       assertFalse(node0.isNot());
1531:       assertFalse(node0.isDebugger());
1532:       assertFalse(node0.isGetProp());
1533:       assertFalse(node1.isRegExp());
1534:       assertFalse(node1.isTrue());
1535:       assertFalse(node1.isDebugger());
1536:       assertFalse(node1.isTry());
1537:       assertFalse(node1.isVoid());
1538:       assertFalse(node1.isDefaultCase());
1539:       assertFalse(node1.isArrayLit());
1540:       assertFalse(node1.isCatch());
1541:       assertEquals(0, node1.getChildCount());
1542:       assertFalse(node1.isFunction());
1543:       assertEquals(3, node1.getType());
1544:       assertFalse(node1.isFor());
1545:       assertFalse(node1.isStringKey());
1546:       assertFalse(node1.isParamList());
1547:       assertFalse(node1.isGetterDef());
1548:       assertFalse(node1.isString());
1549:       assertEquals((-1), node1.getCharno());
1550:       assertFalse(node1.isNew());
1551:       assertFalse(node1.isDo());
1552:       assertFalse(node1.isWhile());
1553:       assertFalse(node1.isSwitch());
1554:       assertFalse(node1.isVar());
1555:       assertFalse(node1.isCall());
1556:       assertFalse(node1.isReturn());
1557:       assertFalse(node1.isLabel());
1558:       assertFalse(node1.isNull());
1559:       assertFalse(node1.isBreak());
1560:       assertFalse(node1.isName());
1561:       assertFalse(node1.isDelProp());
1562:       assertFalse(node1.isAssignAdd());
1563:       assertFalse(node1.isAdd());
1564:       assertFalse(node1.isEmpty());
1565:       assertFalse(node1.isOr());
1566:       assertFalse(node1.isScript());
1567:       assertFalse(node1.isExprResult());
1568:       assertFalse(node1.isAnd());
1569:       assertFalse(node1.isCast());
1570:       assertFalse(node1.isInstanceOf());
1571:       assertFalse(node1.isGetElem());
1572:       assertFalse(node1.isAssign());
1573:       assertFalse(node1.isWith());
1574:       assertFalse(node1.isTypeOf());
1575:       assertEquals((-1), node1.getSourcePosition());
1576:       assertFalse(node1.isDec());
1577:       assertFalse(node1.isComma());
1578:       assertFalse(node1.hasChildren());
1579:       assertFalse(node1.isThis());
1580:       assertFalse(node1.isGetProp());
1581:       assertFalse(node1.isLabelName());
1582:       assertFalse(node1.hasOneChild());
1583:       assertFalse(node1.isNot());
1584:       assertFalse(node1.isObjectLit());
1585:       assertFalse(node1.isNumber());
1586:       assertFalse(node1.isInc());
1587:       assertFalse(node1.isBlock());
1588:       assertFalse(node1.isCase());
1589:       assertFalse(node1.isHook());
1590:       assertFalse(node1.isContinue());
1591:       assertFalse(node1.hasMoreThanOneChild());
1592:       assertFalse(node1.isFalse());
1593:       assertFalse(node1.isNE());
1594:       assertFalse(node1.isSetterDef());
1595:       assertEquals((-1), node1.getLineno());
1596:       assertFalse(node1.isThrow());
1597:       assertFalse(node1.isIf());
1598:       assertFalse(node1.isIn());
1599:       assertFalse(node2.isRegExp());
1600:       assertFalse(node2.isTrue());
1601:       assertFalse(node2.isDebugger());
1602:       assertFalse(node2.isFunction());
1603:       assertEquals(0, node2.getChildCount());
1604:       assertFalse(node2.isFor());
1605:       assertFalse(node2.isTry());
1606:       assertFalse(node2.isDefaultCase());
1607:       assertFalse(node2.isGetterDef());
1608:       assertFalse(node2.isArrayLit());
1609:       assertFalse(node2.isStringKey());
1610:       assertFalse(node2.isParamList());
1611:       assertFalse(node2.isInc());
1612:       assertEquals(39, node2.getType());
1613:       assertEquals(147493, node2.getSourcePosition());
1614:       assertFalse(node2.isContinue());
1615:       assertFalse(node2.hasMoreThanOneChild());
1616:       assertFalse(node2.isHook());
1617:       assertFalse(node2.isBlock());
1618:       assertFalse(node2.isCase());
1619:       assertFalse(node2.isThrow());
1620:       assertFalse(node2.isNE());
1621:       assertFalse(node2.isThis());
1622:       assertFalse(node2.isSetterDef());
1623:       assertEquals(36, node2.getLineno());
1624:       assertFalse(node2.isIn());
1625:       assertFalse(node2.isInstanceOf());
1626:       assertFalse(node2.isCatch());
1627:       assertEquals(37, node2.getCharno());
1628:       assertFalse(node2.isIf());
1629:       assertFalse(node2.isScript());
1630:       assertFalse(node2.isExprResult());
1631:       assertFalse(node2.isNot());
1632:       assertFalse(node2.isObjectLit());
1633:       assertFalse(node2.isWith());
1634:       assertFalse(node2.hasOneChild());
1635:       assertFalse(node2.isGetProp());
1636:       assertFalse(node2.isLabel());
1637:       assertFalse(node2.isFalse());
1638:       assertFalse(node2.isCast());
1639:       assertFalse(node2.isLabelName());
1640:       assertFalse(node2.isAnd());
1641:       assertFalse(node2.isSwitch());
1642:       assertFalse(node2.isAdd());
1643:       assertFalse(node2.isString());
1644:       assertFalse(node2.isVar());
1645:       assertFalse(node2.isReturn());
1646:       assertFalse(node2.isNew());
1647:       assertFalse(node2.isDo());
1648:       assertTrue(node2.isNumber());
1649:       assertFalse(node2.isWhile());
1650:       assertFalse(node2.isAssignAdd());
1651:       assertFalse(node2.isTypeOf());
1652:       assertFalse(node2.isNull());
1653:       assertFalse(node2.isDec());
1654:       assertFalse(node2.isComma());
1655:       assertFalse(node2.hasChildren());
1656:       assertFalse(node2.isBreak());
1657:       assertFalse(node2.isEmpty());
1658:       assertFalse(node2.isAssign());
1659:       assertFalse(node2.isOr());
1660:       assertFalse(node2.isCall());
1661:       assertFalse(node2.isGetElem());
1662:       assertFalse(node2.isName());
1663:       assertFalse(node2.isVoid());
1664:       assertFalse(node2.isDelProp());
1665:       assertTrue(node3.isString());
1666:       assertFalse(node3.isNew());
1667:       assertFalse(node3.isAdd());
1668:       assertFalse(node3.isCall());
1669:       assertFalse(node3.isName());
1670:       assertFalse(node3.isStringKey());
1671:       assertFalse(node3.isParamList());
1672:       assertFalse(node3.isNull());
1673:       assertEquals(0, node3.getChildCount());
1674:       assertFalse(node3.isAssignAdd());
1675:       assertFalse(node3.isOr());
1676:       assertFalse(node3.isContinue());
1677:       assertFalse(node3.isSetterDef());
1678:       assertFalse(node3.isDefaultCase());
1679:       assertFalse(node3.isDo());
1680:       assertFalse(node3.isFunction());
1681:       assertFalse(node3.isVar());
1682:       assertFalse(node3.isLabel());
1683:       assertEquals(40, node3.getType());
1684:       assertFalse(node3.hasOneChild());
1685:       assertFalse(node3.isArrayLit());
1686:       assertFalse(node3.isTry());
1687:       assertFalse(node3.isScript());
1688:       assertFalse(node3.isGetterDef());
1689:       assertFalse(node3.isIf());
1690:       assertFalse(node3.isLabelName());
1691:       assertEquals(37, node3.getCharno());
1692:       assertFalse(node3.isNumber());
1693:       assertFalse(node3.isNE());
1694:       assertFalse(node3.isInstanceOf());
1695:       assertFalse(node3.hasMoreThanOneChild());
1696:       assertFalse(node3.isCase());
1697:       assertFalse(node3.isCatch());
1698:       assertFalse(node3.isWith());
1699:       assertEquals(36, node3.getLineno());
1700:       assertFalse(node3.isRegExp());
1701:       assertFalse(node3.isFor());
1702:       assertFalse(node3.isHook());
1703:       assertFalse(node3.isThis());
1704:       assertFalse(node3.isBlock());
1705:       assertFalse(node3.isInc());
1706:       assertFalse(node3.isBreak());
1707:       assertFalse(node3.isSwitch());
1708:       assertEquals(147493, node3.getSourcePosition());
1709:       assertFalse(node3.isIn());
1710:       assertFalse(node3.isFalse());
1711:       assertFalse(node3.isThrow());
1712:       assertFalse(node3.isVoid());
1713:       assertFalse(node3.isCast());
1714:       assertFalse(node3.isEmpty());
1715:       assertFalse(node3.isGetElem());
1716:       assertFalse(node3.isExprResult());
1717:       assertFalse(node3.isNot());
1718:       assertFalse(node3.isDelProp());
1719:       assertFalse(node3.isAnd());
1720:       assertFalse(node3.isDebugger());
1721:       assertFalse(node3.isTrue());
1722:       assertFalse(node3.isObjectLit());
1723:       assertFalse(node3.isGetProp());
1724:       assertFalse(node3.hasChildren());
1725:       assertFalse(node3.isDec());
1726:       assertFalse(node3.isWhile());
1727:       assertFalse(node3.isAssign());
1728:       assertFalse(node3.isTypeOf());
1729:       assertFalse(node3.isComma());
1730:       assertFalse(node3.isReturn());
1731:       assertFalse(node4.isThrow());
1732:       assertFalse(node4.isFalse());
1733:       assertFalse(node4.isBreak());
1734:       assertFalse(node4.isComma());
1735:       assertFalse(node4.isHook());
1736:       assertFalse(node4.isThis());
1737:       assertEquals(2, node4.getChildCount());
1738:       assertFalse(node4.isWith());
1739:       assertFalse(node4.isIn());
1740:       assertTrue(node4.hasChildren());
1741:       assertFalse(node4.isInstanceOf());
1742:       assertTrue(node4.hasMoreThanOneChild());
1743:       assertFalse(node4.isInc());
1744:       assertFalse(node4.isNE());
1745:       assertFalse(node4.isIf());
1746:       assertEquals(471, node4.getType());
1747:       assertFalse(node4.isCast());
1748:       assertFalse(node4.isDelProp());
1749:       assertFalse(node4.isGetElem());
1750:       assertFalse(node4.isExprResult());
1751:       assertFalse(node4.isFunction());
1752:       assertFalse(node4.isTypeOf());
1753:       assertFalse(node4.isAssign());
1754:       assertFalse(node4.isDec());
1755:       assertFalse(node4.isReturn());
1756:       assertFalse(node4.isObjectLit());
1757:       assertFalse(node4.isContinue());
1758:       assertFalse(node4.isAnd());
1759:       assertFalse(node4.isString());
1760:       assertFalse(node4.isGetProp());
1761:       assertFalse(node4.isDebugger());
1762:       assertFalse(node4.isNot());
1763:       assertEquals((-1), node4.getSourcePosition());
1764:       assertFalse(node4.isCall());
1765:       assertFalse(node4.isStringKey());
1766:       assertFalse(node4.isName());
1767:       assertFalse(node4.isAdd());
1768:       assertFalse(node4.isNew());
1769:       assertFalse(node4.isSetterDef());
1770:       assertFalse(node4.isWhile());
1771:       assertFalse(node4.isVar());
1772:       assertFalse(node4.isBlock());
1773:       assertFalse(node4.isCatch());
1774:       assertFalse(node4.isDo());
1775:       assertEquals((-1), node4.getLineno());
1776:       assertFalse(node4.isTrue());
1777:       assertFalse(node4.isVoid());
1778:       assertFalse(node4.isOr());
1779:       assertFalse(node4.isNull());
1780:       assertFalse(node4.hasOneChild());
1781:       assertFalse(node4.isLabelName());
1782:       assertFalse(node4.isArrayLit());
1783:       assertFalse(node4.isEmpty());
1784:       assertFalse(node4.isRegExp());
1785:       assertFalse(node4.isTry());
1786:       assertFalse(node4.isAssignAdd());
1787:       assertFalse(node4.isDefaultCase());
1788:       assertFalse(node4.isLabel());
1789:       assertFalse(node4.isFor());
1790:       assertFalse(node4.isScript());
1791:       assertFalse(node4.isCase());
1792:       assertFalse(node4.isParamList());
1793:       assertEquals((-1), node4.getCharno());
1794:       assertFalse(node4.isNumber());
1795:       assertFalse(node4.isSwitch());
1796:       assertFalse(node4.isGetterDef());
1797:       
1798:       Node node5 = Node.newString(117, "", (-1049), 40);
1799:       assertFalse(node5.equals((Object)node4));
1800:       assertFalse(node5.equals((Object)node2));
1801:       assertFalse(node5.equals((Object)node1));
1802:       assertFalse(node5.equals((Object)node3));
1803:       assertFalse(node5.equals((Object)node0));
1804:       assertNotSame(node5, node1);
1805:       assertNotSame(node5, node3);
1806:       assertNotSame(node5, node0);
1807:       assertNotNull(node5);
1808:       assertFalse(node5.hasMoreThanOneChild());
1809:       assertFalse(node5.isOr());
1810:       assertFalse(node5.isLabel());
1811:       assertFalse(node5.isReturn());
1812:       assertFalse(node5.isNumber());
1813:       assertFalse(node5.isWhile());
1814:       assertFalse(node5.isAssignAdd());
1815:       assertFalse(node5.isDo());
1816:       assertFalse(node5.isAdd());
1817:       assertFalse(node5.isNew());
1818:       assertFalse(node5.isCall());
1819:       assertFalse(node5.isAssign());
1820:       assertFalse(node5.isBlock());
1821:       assertFalse(node5.isDec());
1822:       assertFalse(node5.hasChildren());
1823:       assertFalse(node5.isTypeOf());
1824:       assertFalse(node5.isExprResult());
1825:       assertFalse(node5.isNull());
1826:       assertFalse(node5.isGetElem());
1827:       assertFalse(node5.isName());
1828:       assertEquals((-1), node5.getLineno());
1829:       assertFalse(node5.isObjectLit());
1830:       assertFalse(node5.isAnd());
1831:       assertFalse(node5.isNot());
1832:       assertFalse(node5.isComma());
1833:       assertFalse(node5.isSetterDef());
1834:       assertFalse(node5.isGetProp());
1835:       assertFalse(node5.isCast());
1836:       assertFalse(node5.isFalse());
1837:       assertFalse(node5.isThrow());
1838:       assertEquals((-1), node5.getSourcePosition());
1839:       assertFalse(node5.isDebugger());
1840:       assertFalse(node5.isFunction());
1841:       assertFalse(node5.isIn());
1842:       assertFalse(node5.isInc());
1843:       assertFalse(node5.isString());
1844:       assertFalse(node5.isEmpty());
1845:       assertFalse(node5.isCase());
1846:       assertFalse(node5.isFor());
1847:       assertFalse(node5.isHook());
1848:       assertFalse(node5.isNE());
1849:       assertFalse(node5.isRegExp());
1850:       assertFalse(node5.isTrue());
1851:       assertFalse(node5.isIf());
1852:       assertFalse(node5.isDelProp());
1853:       assertFalse(node5.isBreak());
1854:       assertFalse(node5.isVoid());
1855:       assertFalse(node5.isCatch());
1856:       assertFalse(node5.isInstanceOf());
1857:       assertFalse(node5.isWith());
1858:       assertEquals(0, node5.getChildCount());
1859:       assertFalse(node5.isScript());
1860:       assertFalse(node5.isThis());
1861:       assertFalse(node5.isDefaultCase());
1862:       assertFalse(node5.isTry());
1863:       assertFalse(node5.hasOneChild());
1864:       assertFalse(node5.isVar());
1865:       assertFalse(node5.isStringKey());
1866:       assertFalse(node5.isGetterDef());
1867:       assertEquals((-1), node5.getCharno());
1868:       assertEquals(117, node5.getType());
1869:       assertFalse(node5.isSwitch());
1870:       assertTrue(node5.isContinue());
1871:       assertFalse(node5.isParamList());
1872:       assertFalse(node5.isLabelName());
1873:       assertFalse(node5.isArrayLit());
1874:       
1875:       boolean boolean5 = node2.isReturn();
1876:       assertFalse(node2.equals((Object)node1));
1877:       assertFalse(node2.equals((Object)node4));
1878:       assertFalse(node2.equals((Object)node0));
1879:       assertFalse(node2.equals((Object)node5));
1880:       assertFalse(node2.equals((Object)node3));
1881:       assertTrue(boolean5 == boolean0);
1882:       assertTrue(boolean5 == boolean4);
1883:       assertTrue(boolean5 == boolean1);
1884:       assertTrue(boolean5 == boolean2);
1885:       assertTrue(boolean5 == boolean3);
1886:       assertFalse(node2.isRegExp());
1887:       assertFalse(node2.isTrue());
1888:       assertFalse(node2.isDebugger());
1889:       assertFalse(node2.isFunction());
1890:       assertEquals(0, node2.getChildCount());
1891:       assertFalse(node2.isFor());
1892:       assertFalse(node2.isTry());
1893:       assertFalse(node2.isDefaultCase());
1894:       assertFalse(node2.isGetterDef());
1895:       assertFalse(node2.isArrayLit());
1896:       assertFalse(node2.isStringKey());
1897:       assertFalse(node2.isParamList());
1898:       assertFalse(node2.isInc());
1899:       assertEquals(39, node2.getType());
1900:       assertEquals(147493, node2.getSourcePosition());
1901:       assertFalse(node2.isContinue());
1902:       assertFalse(node2.hasMoreThanOneChild());
1903:       assertFalse(node2.isHook());
1904:       assertFalse(node2.isBlock());
1905:       assertFalse(node2.isCase());
1906:       assertFalse(node2.isThrow());
1907:       assertFalse(node2.isNE());
1908:       assertFalse(node2.isThis());
1909:       assertFalse(node2.isSetterDef());
1910:       assertEquals(36, node2.getLineno());
1911:       assertFalse(node2.isIn());
1912:       assertFalse(node2.isInstanceOf());
1913:       assertFalse(node2.isCatch());
1914:       assertEquals(37, node2.getCharno());
1915:       assertFalse(node2.isIf());
1916:       assertFalse(node2.isScript());
1917:       assertFalse(node2.isExprResult());
1918:       assertFalse(node2.isNot());
1919:       assertFalse(node2.isObjectLit());
1920:       assertFalse(node2.isWith());
1921:       assertFalse(node2.hasOneChild());
1922:       assertFalse(node2.isGetProp());
1923:       assertFalse(node2.isLabel());
1924:       assertFalse(node2.isFalse());
1925:       assertFalse(node2.isCast());
1926:       assertFalse(node2.isLabelName());
1927:       assertFalse(node2.isAnd());
1928:       assertFalse(node2.isSwitch());
1929:       assertFalse(node2.isAdd());
1930:       assertFalse(node2.isString());
1931:       assertFalse(node2.isVar());
1932:       assertFalse(node2.isReturn());
1933:       assertFalse(node2.isNew());
1934:       assertFalse(node2.isDo());
1935:       assertTrue(node2.isNumber());
1936:       assertFalse(node2.isWhile());
1937:       assertFalse(node2.isAssignAdd());
1938:       assertFalse(node2.isTypeOf());
1939:       assertFalse(node2.isNull());
1940:       assertFalse(node2.isDec());
1941:       assertFalse(node2.isComma());
1942:       assertFalse(node2.hasChildren());
1943:       assertFalse(node2.isBreak());
1944:       assertFalse(node2.isEmpty());
1945:       assertFalse(node2.isAssign());
1946:       assertFalse(node2.isOr());
1947:       assertFalse(node2.isCall());
1948:       assertFalse(node2.isGetElem());
1949:       assertFalse(node2.isName());
1950:       assertFalse(node2.isVoid());
1951:       assertFalse(node2.isDelProp());
1952:       
1953:       boolean boolean6 = node2.isTrue();
1954:       assertFalse(node2.equals((Object)node1));
1955:       assertFalse(node2.equals((Object)node4));
1956:       assertFalse(node2.equals((Object)node0));
1957:       assertFalse(node2.equals((Object)node5));
1958:       assertFalse(node2.equals((Object)node3));
1959:       assertTrue(boolean6 == boolean0);
1960:       assertTrue(boolean6 == boolean4);
1961:       assertTrue(boolean6 == boolean5);
1962:       assertTrue(boolean6 == boolean1);
1963:       assertTrue(boolean6 == boolean2);
1964:       assertTrue(boolean6 == boolean3);
1965:       assertFalse(node2.isRegExp());
1966:       assertFalse(node2.isTrue());
1967:       assertFalse(node2.isDebugger());
1968:       assertFalse(node2.isFunction());
1969:       assertEquals(0, node2.getChildCount());
1970:       assertFalse(node2.isFor());
1971:       assertFalse(node2.isTry());
1972:       assertFalse(node2.isDefaultCase());
1973:       assertFalse(node2.isGetterDef());
1974:       assertFalse(node2.isArrayLit());
1975:       assertFalse(node2.isStringKey());
1976:       assertFalse(node2.isParamList());
1977:       assertFalse(node2.isInc());
1978:       assertEquals(39, node2.getType());
1979:       assertEquals(147493, node2.getSourcePosition());
1980:       assertFalse(node2.isContinue());
1981:       assertFalse(node2.hasMoreThanOneChild());
1982:       assertFalse(node2.isHook());
1983:       assertFalse(node2.isBlock());
1984:       assertFalse(node2.isCase());
1985:       assertFalse(node2.isThrow());
1986:       assertFalse(node2.isNE());
1987:       assertFalse(node2.isThis());
1988:       assertFalse(node2.isSetterDef());
1989:       assertEquals(36, node2.getLineno());
1990:       assertFalse(node2.isIn());
1991:       assertFalse(node2.isInstanceOf());
1992:       assertFalse(node2.isCatch());
1993:       assertEquals(37, node2.getCharno());
1994:       assertFalse(node2.isIf());
1995:       assertFalse(node2.isScript());
1996:       assertFalse(node2.isExprResult());
1997:       assertFalse(node2.isNot());
1998:       assertFalse(node2.isObjectLit());
1999:       assertFalse(node2.isWith());
2000:       assertFalse(node2.hasOneChild());
2001:       assertFalse(node2.isGetProp());
2002:       assertFalse(node2.isLabel());
2003:       assertFalse(node2.isFalse());
2004:       assertFalse(node2.isCast());
2005:       assertFalse(node2.isLabelName());
2006:       assertFalse(node2.isAnd());
2007:       assertFalse(node2.isSwitch());
2008:       assertFalse(node2.isAdd());
2009:       assertFalse(node2.isString());
2010:       assertFalse(node2.isVar());
2011:       assertFalse(node2.isReturn());
2012:       assertFalse(node2.isNew());
2013:       assertFalse(node2.isDo());
2014:       assertTrue(node2.isNumber());
2015:       assertFalse(node2.isWhile());
2016:       assertFalse(node2.isAssignAdd());
2017:       assertFalse(node2.isTypeOf());
2018:       assertFalse(node2.isNull());
2019:       assertFalse(node2.isDec());
2020:       assertFalse(node2.isComma());
2021:       assertFalse(node2.hasChildren());
2022:       assertFalse(node2.isBreak());
2023:       assertFalse(node2.isEmpty());
2024:       assertFalse(node2.isAssign());
2025:       assertFalse(node2.isOr());
2026:       assertFalse(node2.isCall());
2027:       assertFalse(node2.isGetElem());
2028:       assertFalse(node2.isName());
2029:       assertFalse(node2.isVoid());
2030:       assertFalse(node2.isDelProp());
2031:       
2032:       Iterable<Node> iterable1 = node0.children();
2033:       assertFalse(iterable1.equals((Object)iterable0));
2034:       assertFalse(node0.equals((Object)node1));
2035:       assertFalse(node0.equals((Object)node2));
2036:       assertFalse(node0.equals((Object)node4));
2037:       assertFalse(node0.equals((Object)node5));
2038:       assertNotSame(node0, node1);
2039:       assertSame(node0, node3);
2040:       assertNotSame(node0, node5);
2041:       assertFalse(iterable1.contains(node4));
2042:       assertNotNull(iterable1);
2043:       assertFalse(node0.isNull());
2044:       assertFalse(node0.isParamList());
2045:       assertFalse(node0.isStringKey());
2046:       assertEquals(0, node0.getChildCount());
2047:       assertFalse(node0.isCatch());
2048:       assertFalse(node0.isName());
2049:       assertFalse(node0.isCall());
2050:       assertFalse(node0.isDefaultCase());
2051:       assertFalse(node0.isFunction());
2052:       assertFalse(node0.isTrue());
2053:       assertEquals(40, node0.getType());
2054:       assertFalse(node0.isVar());
2055:       assertFalse(node0.isAssignAdd());
2056:       assertFalse(node0.isAdd());
2057:       assertFalse(node0.isEmpty());
2058:       assertFalse(node0.isDo());
2059:       assertFalse(node0.isSetterDef());
2060:       assertFalse(node0.isNew());
2061:       assertFalse(node0.isNumber());
2062:       assertFalse(node0.isIf());
2063:       assertFalse(node0.isGetterDef());
2064:       assertFalse(node0.isNE());
2065:       assertEquals(36, node0.getLineno());
2066:       assertFalse(node0.isFor());
2067:       assertFalse(node0.isLabel());
2068:       assertFalse(node0.hasMoreThanOneChild());
2069:       assertFalse(node0.isLabelName());
2070:       assertFalse(node0.isArrayLit());
2071:       assertFalse(node0.isScript());
2072:       assertFalse(node0.isRegExp());
2073:       assertFalse(node0.isWith());
2074:       assertFalse(node0.isSwitch());
2075:       assertFalse(node0.isBlock());
2076:       assertFalse(node0.hasOneChild());
2077:       assertFalse(node0.isHook());
2078:       assertFalse(node0.isTry());
2079:       assertTrue(node0.isString());
2080:       assertFalse(node0.isCase());
2081:       assertFalse(node0.isBreak());
2082:       assertFalse(node0.isFalse());
2083:       assertFalse(node0.isThrow());
2084:       assertFalse(node0.isThis());
2085:       assertFalse(node0.isComma());
2086:       assertFalse(node0.isInstanceOf());
2087:       assertFalse(node0.isAnd());
2088:       assertEquals(37, node0.getCharno());
2089:       assertEquals(147493, node0.getSourcePosition());
2090:       assertFalse(node0.isIn());
2091:       assertFalse(node0.isInc());
2092:       assertFalse(node0.isDec());
2093:       assertFalse(node0.hasChildren());
2094:       assertFalse(node0.isTypeOf());
2095:       assertFalse(node0.isDelProp());
2096:       assertFalse(node0.isAssign());
2097:       assertFalse(node0.isReturn());
2098:       assertFalse(node0.isOr());
2099:       assertFalse(node0.isCast());
2100:       assertFalse(node0.isContinue());
2101:       assertFalse(node0.isGetElem());
2102:       assertFalse(node0.isExprResult());
2103:       assertFalse(node0.isVoid());
2104:       assertFalse(node0.isWhile());
2105:       assertFalse(node0.isObjectLit());
2106:       assertFalse(node0.isNot());
2107:       assertFalse(node0.isDebugger());
2108:       assertFalse(node0.isGetProp());
2109:       
2110:       StringWriter stringWriter0 = new StringWriter(25);
2111:       assertNotNull(stringWriter0);
2112:       assertEquals("", stringWriter0.toString());
2113:       
2114:       StringWriter stringWriter1 = stringWriter0.append((CharSequence) "NUMBER 12.0");
2115:       assertSame(stringWriter0, stringWriter1);
2116:       assertSame(stringWriter1, stringWriter0);
2117:       assertNotNull(stringWriter1);
2118:       assertEquals("NUMBER 12.0", stringWriter0.toString());
2119:       assertEquals("NUMBER 12.0", stringWriter1.toString());
2120:       
2121:       MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
2122:       assertNotNull(mockPrintWriter0);
2123:       
2124:       Locale locale0 = new Locale("H'Y@UN%");
2125:       assertNotNull(locale0);
2126:       assertEquals("h'y@un%", locale0.getLanguage());
2127:       assertEquals("", locale0.getVariant());
2128:       assertEquals("h'y@un%", locale0.toString());
2129:       assertEquals("", locale0.getCountry());
2130:       assertEquals("", locale0.getISO3Country());
2131:       
2132:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
2133:       assertNotNull(node_SideEffectFlags0);
2134:       assertEquals(0, node_SideEffectFlags0.valueOf());
2135:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2136:       
2137:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
2138:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2139:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2140:       assertNotNull(node_SideEffectFlags1);
2141:       assertEquals(0, node_SideEffectFlags0.valueOf());
2142:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2143:       assertEquals(0, node_SideEffectFlags1.valueOf());
2144:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
2145:       
2146:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
2147:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2148:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2149:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
2150:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2151:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
2152:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
2153:       assertNotNull(node_SideEffectFlags2);
2154:       assertEquals(0, node_SideEffectFlags0.valueOf());
2155:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2156:       assertEquals(0, node_SideEffectFlags1.valueOf());
2157:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
2158:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
2159:       assertEquals(0, node_SideEffectFlags2.valueOf());
2160:       
2161:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
2162:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2163:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2164:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
2165:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
2166:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2167:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
2168:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
2169:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
2170:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
2171:       assertNotNull(node_SideEffectFlags3);
2172:       assertEquals(0, node_SideEffectFlags0.valueOf());
2173:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2174:       assertEquals(0, node_SideEffectFlags1.valueOf());
2175:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
2176:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
2177:       assertEquals(0, node_SideEffectFlags3.valueOf());
2178:       
2179:       Node node6 = Node.newString("ASSIGN_URSH", (-570), 1);
2180:       assertFalse(node6.equals((Object)node4));
2181:       assertFalse(node6.equals((Object)node3));
2182:       assertFalse(node6.equals((Object)node5));
2183:       assertFalse(node6.equals((Object)node0));
2184:       assertFalse(node6.equals((Object)node1));
2185:       assertFalse(node6.equals((Object)node2));
2186:       assertNotSame(node6, node3);
2187:       assertNotSame(node6, node5);
2188:       assertNotSame(node6, node0);
2189:       assertNotSame(node6, node1);
2190:       assertNotNull(node6);
2191:       assertFalse(node6.isIn());
2192:       assertFalse(node6.isEmpty());
2193:       assertFalse(node6.isGetterDef());
2194:       assertFalse(node6.isDelProp());
2195:       assertFalse(node6.isIf());
2196:       assertFalse(node6.isSwitch());
2197:       assertFalse(node6.isNE());
2198:       assertEquals((-1), node6.getCharno());
2199:       assertFalse(node6.isTry());
2200:       assertFalse(node6.isVoid());
2201:       assertFalse(node6.isFor());
2202:       assertFalse(node6.isCase());
2203:       assertFalse(node6.isRegExp());
2204:       assertFalse(node6.isComma());
2205:       assertFalse(node6.isHook());
2206:       assertFalse(node6.isThis());
2207:       assertEquals(0, node6.getChildCount());
2208:       assertFalse(node6.isBreak());
2209:       assertFalse(node6.isStringKey());
2210:       assertFalse(node6.isName());
2211:       assertFalse(node6.isParamList());
2212:       assertFalse(node6.isNull());
2213:       assertFalse(node6.isTrue());
2214:       assertFalse(node6.isAdd());
2215:       assertFalse(node6.isNew());
2216:       assertFalse(node6.isArrayLit());
2217:       assertFalse(node6.isDo());
2218:       assertFalse(node6.isDefaultCase());
2219:       assertFalse(node6.isVar());
2220:       assertFalse(node6.isAssignAdd());
2221:       assertFalse(node6.isOr());
2222:       assertFalse(node6.isLabel());
2223:       assertEquals((-1), node6.getLineno());
2224:       assertFalse(node6.hasMoreThanOneChild());
2225:       assertFalse(node6.isLabelName());
2226:       assertFalse(node6.isNumber());
2227:       assertEquals((-1), node6.getSourcePosition());
2228:       assertTrue(node6.isString());
2229:       assertFalse(node6.isScript());
2230:       assertFalse(node6.hasOneChild());
2231:       assertFalse(node6.isGetElem());
2232:       assertFalse(node6.isExprResult());
2233:       assertFalse(node6.isCall());
2234:       assertFalse(node6.isAssign());
2235:       assertFalse(node6.isWhile());
2236:       assertFalse(node6.isTypeOf());
2237:       assertFalse(node6.isWith());
2238:       assertFalse(node6.isDec());
2239:       assertFalse(node6.hasChildren());
2240:       assertFalse(node6.isReturn());
2241:       assertFalse(node6.isBlock());
2242:       assertFalse(node6.isInstanceOf());
2243:       assertFalse(node6.isCatch());
2244:       assertFalse(node6.isGetProp());
2245:       assertFalse(node6.isSetterDef());
2246:       assertFalse(node6.isNot());
2247:       assertFalse(node6.isObjectLit());
2248:       assertFalse(node6.isAnd());
2249:       assertFalse(node6.isDebugger());
2250:       assertFalse(node6.isFunction());
2251:       assertFalse(node6.isCast());
2252:       assertFalse(node6.isInc());
2253:       assertFalse(node6.isContinue());
2254:       assertFalse(node6.isFalse());
2255:       assertFalse(node6.isThrow());
2256:       assertEquals(40, node6.getType());
2257:       
2258:       boolean boolean7 = node4.isParamList();
2259:       assertFalse(node0.equals((Object)node1));
2260:       assertFalse(node0.equals((Object)node2));
2261:       assertFalse(node0.equals((Object)node4));
2262:       assertFalse(node0.equals((Object)node5));
2263:       assertFalse(node0.equals((Object)node6));
2264:       assertFalse(node1.equals((Object)node3));
2265:       assertFalse(node1.equals((Object)node4));
2266:       assertFalse(node1.equals((Object)node6));
2267:       assertFalse(node1.equals((Object)node0));
2268:       assertFalse(node1.equals((Object)node2));
2269:       assertFalse(node1.equals((Object)node5));
2270:       assertFalse(node2.equals((Object)node1));
2271:       assertFalse(node2.equals((Object)node4));
2272:       assertFalse(node2.equals((Object)node6));
2273:       assertFalse(node2.equals((Object)node0));
2274:       assertFalse(node2.equals((Object)node5));
2275:       assertFalse(node2.equals((Object)node3));
2276:       assertFalse(node3.equals((Object)node4));
2277:       assertFalse(node3.equals((Object)node5));
2278:       assertFalse(node3.equals((Object)node6));
2279:       assertFalse(node3.equals((Object)node1));
2280:       assertFalse(node3.equals((Object)node2));
2281:       assertFalse(node4.equals((Object)node6));
2282:       assertFalse(node4.equals((Object)node0));
2283:       assertFalse(node4.equals((Object)node5));
2284:       assertFalse(node4.equals((Object)node3));
2285:       assertFalse(node4.equals((Object)node1));
2286:       assertFalse(node4.equals((Object)node2));
2287:       assertTrue(boolean7 == boolean1);
2288:       assertTrue(boolean7 == boolean2);
2289:       assertTrue(boolean7 == boolean3);
2290:       assertTrue(boolean7 == boolean6);
2291:       assertTrue(boolean7 == boolean0);
2292:       assertTrue(boolean7 == boolean4);
2293:       assertTrue(boolean7 == boolean5);
2294:       assertNotSame(node0, node1);
2295:       assertSame(node0, node3);
2296:       assertNotSame(node0, node5);
2297:       assertNotSame(node0, node6);
2298:       assertNotSame(node1, node3);
2299:       assertNotSame(node1, node6);
2300:       assertNotSame(node1, node0);
2301:       assertNotSame(node1, node5);
2302:       assertNotSame(node3, node5);
2303:       assertNotSame(node3, node6);
2304:       assertNotSame(node3, node1);
2305:       assertSame(node3, node0);
2306:       assertFalse(node0.isNull());
2307:       assertFalse(node0.isParamList());
2308:       assertFalse(node0.isStringKey());
2309:       assertEquals(0, node0.getChildCount());
2310:       assertFalse(node0.isCatch());
2311:       assertFalse(node0.isName());
2312:       assertFalse(node0.isCall());
2313:       assertFalse(node0.isDefaultCase());
2314:       assertFalse(node0.isFunction());
2315:       assertFalse(node0.isTrue());
2316:       assertEquals(40, node0.getType());
2317:       assertFalse(node0.isVar());
2318:       assertFalse(node0.isAssignAdd());
2319:       assertFalse(node0.isAdd());
2320:       assertFalse(node0.isEmpty());
2321:       assertFalse(node0.isDo());
2322:       assertFalse(node0.isSetterDef());
2323:       assertFalse(node0.isNew());
2324:       assertFalse(node0.isNumber());
2325:       assertFalse(node0.isIf());
2326:       assertFalse(node0.isGetterDef());
2327:       assertFalse(node0.isNE());
2328:       assertEquals(36, node0.getLineno());
2329:       assertFalse(node0.isFor());
2330:       assertFalse(node0.isLabel());
2331:       assertFalse(node0.hasMoreThanOneChild());
2332:       assertFalse(node0.isLabelName());
2333:       assertFalse(node0.isArrayLit());
2334:       assertFalse(node0.isScript());
2335:       assertFalse(node0.isRegExp());
2336:       assertFalse(node0.isWith());
2337:       assertFalse(node0.isSwitch());
2338:       assertFalse(node0.isBlock());
2339:       assertFalse(node0.hasOneChild());
2340:       assertFalse(node0.isHook());
2341:       assertFalse(node0.isTry());
2342:       assertTrue(node0.isString());
2343:       assertFalse(node0.isCase());
2344:       assertFalse(node0.isBreak());
2345:       assertFalse(node0.isFalse());
2346:       assertFalse(node0.isThrow());
2347:       assertFalse(node0.isThis());
2348:       assertFalse(node0.isComma());
2349:       assertFalse(node0.isInstanceOf());
2350:       assertFalse(node0.isAnd());
2351:       assertEquals(37, node0.getCharno());
2352:       assertEquals(147493, node0.getSourcePosition());
2353:       assertFalse(node0.isIn());
2354:       assertFalse(node0.isInc());
2355:       assertFalse(node0.isDec());
2356:       assertFalse(node0.hasChildren());
2357:       assertFalse(node0.isTypeOf());
2358:       assertFalse(node0.isDelProp());
2359:       assertFalse(node0.isAssign());
2360:       assertFalse(node0.isReturn());
2361:       assertFalse(node0.isOr());
2362:       assertFalse(node0.isCast());
2363:       assertFalse(node0.isContinue());
2364:       assertFalse(node0.isGetElem());
2365:       assertFalse(node0.isExprResult());
2366:       assertFalse(node0.isVoid());
2367:       assertFalse(node0.isWhile());
2368:       assertFalse(node0.isObjectLit());
2369:       assertFalse(node0.isNot());
2370:       assertFalse(node0.isDebugger());
2371:       assertFalse(node0.isGetProp());
2372:       assertFalse(node1.isRegExp());
2373:       assertFalse(node1.isTrue());
2374:       assertFalse(node1.isDebugger());
2375:       assertFalse(node1.isTry());
2376:       assertFalse(node1.isVoid());
2377:       assertFalse(node1.isDefaultCase());
2378:       assertFalse(node1.isArrayLit());
2379:       assertFalse(node1.isCatch());
2380:       assertEquals(0, node1.getChildCount());
2381:       assertFalse(node1.isFunction());
2382:       assertEquals(3, node1.getType());
2383:       assertFalse(node1.isFor());
2384:       assertFalse(node1.isStringKey());
2385:       assertFalse(node1.isParamList());
2386:       assertFalse(node1.isGetterDef());
2387:       assertFalse(node1.isString());
2388:       assertEquals((-1), node1.getCharno());
2389:       assertFalse(node1.isNew());
2390:       assertFalse(node1.isDo());
2391:       assertFalse(node1.isWhile());
2392:       assertFalse(node1.isSwitch());
2393:       assertFalse(node1.isVar());
2394:       assertFalse(node1.isCall());
2395:       assertFalse(node1.isReturn());
2396:       assertFalse(node1.isLabel());
2397:       assertFalse(node1.isNull());
2398:       assertFalse(node1.isBreak());
2399:       assertFalse(node1.isName());
2400:       assertFalse(node1.isDelProp());
2401:       assertFalse(node1.isAssignAdd());
2402:       assertFalse(node1.isAdd());
2403:       assertFalse(node1.isEmpty());
2404:       assertFalse(node1.isOr());
2405:       assertFalse(node1.isScript());
2406:       assertFalse(node1.isExprResult());
2407:       assertFalse(node1.isAnd());
2408:       assertFalse(node1.isCast());
2409:       assertFalse(node1.isInstanceOf());
2410:       assertFalse(node1.isGetElem());
2411:       assertFalse(node1.isAssign());
2412:       assertFalse(node1.isWith());
2413:       assertFalse(node1.isTypeOf());
2414:       assertEquals((-1), node1.getSourcePosition());
2415:       assertFalse(node1.isDec());
2416:       assertFalse(node1.isComma());
2417:       assertFalse(node1.hasChildren());
2418:       assertFalse(node1.isThis());
2419:       assertFalse(node1.isGetProp());
2420:       assertFalse(node1.isLabelName());
2421:       assertFalse(node1.hasOneChild());
2422:       assertFalse(node1.isNot());
2423:       assertFalse(node1.isObjectLit());
2424:       assertFalse(node1.isNumber());
2425:       assertFalse(node1.isInc());
2426:       assertFalse(node1.isBlock());
2427:       assertFalse(node1.isCase());
2428:       assertFalse(node1.isHook());
2429:       assertFalse(node1.isContinue());
2430:       assertFalse(node1.hasMoreThanOneChild());
2431:       assertFalse(node1.isFalse());
2432:       assertFalse(node1.isNE());
2433:       assertFalse(node1.isSetterDef());
2434:       assertEquals((-1), node1.getLineno());
2435:       assertFalse(node1.isThrow());
2436:       assertFalse(node1.isIf());
2437:       assertFalse(node1.isIn());
2438:       assertFalse(node2.isRegExp());
2439:       assertFalse(node2.isTrue());
2440:       assertFalse(node2.isDebugger());
2441:       assertFalse(node2.isFunction());
2442:       assertEquals(0, node2.getChildCount());
2443:       assertFalse(node2.isFor());
2444:       assertFalse(node2.isTry());
2445:       assertFalse(node2.isDefaultCase());
2446:       assertFalse(node2.isGetterDef());
2447:       assertFalse(node2.isArrayLit());
2448:       assertFalse(node2.isStringKey());
2449:       assertFalse(node2.isParamList());
2450:       assertFalse(node2.isInc());
2451:       assertEquals(39, node2.getType());
2452:       assertEquals(147493, node2.getSourcePosition());
2453:       assertFalse(node2.isContinue());
2454:       assertFalse(node2.hasMoreThanOneChild());
2455:       assertFalse(node2.isHook());
2456:       assertFalse(node2.isBlock());
2457:       assertFalse(node2.isCase());
2458:       assertFalse(node2.isThrow());
2459:       assertFalse(node2.isNE());
2460:       assertFalse(node2.isThis());
2461:       assertFalse(node2.isSetterDef());
2462:       assertEquals(36, node2.getLineno());
2463:       assertFalse(node2.isIn());
2464:       assertFalse(node2.isInstanceOf());
2465:       assertFalse(node2.isCatch());
2466:       assertEquals(37, node2.getCharno());
2467:       assertFalse(node2.isIf());
2468:       assertFalse(node2.isScript());
2469:       assertFalse(node2.isExprResult());
2470:       assertFalse(node2.isNot());
2471:       assertFalse(node2.isObjectLit());
2472:       assertFalse(node2.isWith());
2473:       assertFalse(node2.hasOneChild());
2474:       assertFalse(node2.isGetProp());
2475:       assertFalse(node2.isLabel());
2476:       assertFalse(node2.isFalse());
2477:       assertFalse(node2.isCast());
2478:       assertFalse(node2.isLabelName());
2479:       assertFalse(node2.isAnd());
2480:       assertFalse(node2.isSwitch());
2481:       assertFalse(node2.isAdd());
2482:       assertFalse(node2.isString());
2483:       assertFalse(node2.isVar());
2484:       assertFalse(node2.isReturn());
2485:       assertFalse(node2.isNew());
2486:       assertFalse(node2.isDo());
2487:       assertTrue(node2.isNumber());
2488:       assertFalse(node2.isWhile());
2489:       assertFalse(node2.isAssignAdd());
2490:       assertFalse(node2.isTypeOf());
2491:       assertFalse(node2.isNull());
2492:       assertFalse(node2.isDec());
2493:       assertFalse(node2.isComma());
2494:       assertFalse(node2.hasChildren());
2495:       assertFalse(node2.isBreak());
2496:       assertFalse(node2.isEmpty());
2497:       assertFalse(node2.isAssign());
2498:       assertFalse(node2.isOr());
2499:       assertFalse(node2.isCall());
2500:       assertFalse(node2.isGetElem());
2501:       assertFalse(node2.isName());
2502:       assertFalse(node2.isVoid());
2503:       assertFalse(node2.isDelProp());
2504:       assertTrue(node3.isString());
2505:       assertFalse(node3.isNew());
2506:       assertFalse(node3.isAdd());
2507:       assertFalse(node3.isCall());
2508:       assertFalse(node3.isName());
2509:       assertFalse(node3.isStringKey());
2510:       assertFalse(node3.isParamList());
2511:       assertFalse(node3.isNull());
2512:       assertEquals(0, node3.getChildCount());
2513:       assertFalse(node3.isAssignAdd());
2514:       assertFalse(node3.isOr());
2515:       assertFalse(node3.isContinue());
2516:       assertFalse(node3.isSetterDef());
2517:       assertFalse(node3.isDefaultCase());
2518:       assertFalse(node3.isDo());
2519:       assertFalse(node3.isFunction());
2520:       assertFalse(node3.isVar());
2521:       assertFalse(node3.isLabel());
2522:       assertEquals(40, node3.getType());
2523:       assertFalse(node3.hasOneChild());
2524:       assertFalse(node3.isArrayLit());
2525:       assertFalse(node3.isTry());
2526:       assertFalse(node3.isScript());
2527:       assertFalse(node3.isGetterDef());
2528:       assertFalse(node3.isIf());
2529:       assertFalse(node3.isLabelName());
2530:       assertEquals(37, node3.getCharno());
2531:       
2532:       boolean boolean8 = node6.isDefaultCase();
2533:       assertFalse(node6.equals((Object)node4));
2534:       assertFalse(node6.equals((Object)node3));
2535:       assertFalse(node6.equals((Object)node5));
2536:       assertFalse(node6.equals((Object)node0));
2537:       assertFalse(node6.equals((Object)node1));
2538:       assertFalse(node6.equals((Object)node2));
2539:       assertTrue(boolean8 == boolean6);
2540:       assertTrue(boolean8 == boolean3);
2541:       assertTrue(boolean8 == boolean0);
2542:       assertTrue(boolean8 == boolean7);
2543:       assertTrue(boolean8 == boolean2);
2544:       assertTrue(boolean8 == boolean4);
2545:       assertTrue(boolean8 == boolean1);
2546:       assertTrue(boolean8 == boolean5);
2547:       assertNotSame(node6, node3);
2548:       assertNotSame(node6, node5);
2549:       assertNotSame(node6, node0);
2550:       assertNotSame(node6, node1);
2551:   }
2552: }
RegularFileObject[/tmp/EvoSuite_167_1628256043241/com/google/javascript/rhino/Node_167_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:43 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_167_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_167_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_167_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.InputId",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.javascript.rhino.jstype.TemplatizedType",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.Iterables",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.common.collect.Sets$ImprovedAbstractSet",
354:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
355:       "com.google.common.collect.Hashing",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
358:       "com.google.javascript.rhino.JSTypeExpression",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
367:     );
368:   }
369: }

[MASTER] 13:20:43.985 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("", 36, 36);
assertNotNull(node0);
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals(36, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isSwitch());
assertEquals(36, node0.getCharno());
assertFalse(node0.isBlock());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());

boolean boolean0 = node0.isLabelName();
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals(36, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isSwitch());
assertEquals(36, node0.getCharno());
assertFalse(node0.isBlock());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());

boolean boolean1 = node0.isOr();
assertTrue(boolean1 == boolean0);
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals(36, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isSwitch());
assertEquals(36, node0.getCharno());
assertFalse(node0.isBlock());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());

Node node1 = Node.newString(3, "");
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertNotNull(node1);
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertEquals(3, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isIn());

StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertNull(staticSourceFile0);
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertEquals(3, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isIn());

Node node2 = Node.newNumber((double) 12, 36, 37);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(36, node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(37, node2.getCharno());
assertFalse(node2.isIf());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isVar());
assertFalse(node2.isReturn());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertTrue(node2.isNumber());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());

Node node3 = node0.copyInformationFrom(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertNotSame(node0, node1);
assertSame(node0, node3);
assertNotSame(node3, node1);
assertSame(node3, node0);
assertNotNull(node3);
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals(36, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertEquals(37, node0.getCharno());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(36, node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(37, node2.getCharno());
assertFalse(node2.isIf());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isVar());
assertFalse(node2.isReturn());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertTrue(node2.isNumber());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isContinue());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isFunction());
assertFalse(node3.isVar());
assertFalse(node3.isLabel());
assertEquals(40, node3.getType());
assertFalse(node3.hasOneChild());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isLabelName());
assertEquals(37, node3.getCharno());
assertFalse(node3.isNumber());
assertFalse(node3.isNE());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCase());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertEquals(36, node3.getLineno());
assertFalse(node3.isRegExp());
assertFalse(node3.isFor());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertFalse(node3.isBreak());
assertFalse(node3.isSwitch());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.isIn());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isVoid());
assertFalse(node3.isCast());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isNot());
assertFalse(node3.isDelProp());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isWhile());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());

boolean boolean2 = node0.getBooleanProp(53);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertNotSame(node0, node1);
assertSame(node0, node3);
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals(36, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertEquals(37, node0.getCharno());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());

boolean boolean3 = node0.isReturn();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertNotSame(node0, node1);
assertSame(node0, node3);
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals(36, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertEquals(37, node0.getCharno());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());

Node node4 = new Node(471, node3, node3, node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertNotNull(node4);
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals(36, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertEquals(37, node0.getCharno());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertEquals(3, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isIn());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(36, node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(37, node2.getCharno());
assertFalse(node2.isIf());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isVar());
assertFalse(node2.isReturn());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertTrue(node2.isNumber());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isContinue());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isFunction());
assertFalse(node3.isVar());
assertFalse(node3.isLabel());
assertEquals(40, node3.getType());
assertFalse(node3.hasOneChild());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isLabelName());
assertEquals(37, node3.getCharno());
assertFalse(node3.isNumber());
assertFalse(node3.isNE());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCase());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertEquals(36, node3.getLineno());
assertFalse(node3.isRegExp());
assertFalse(node3.isFor());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertFalse(node3.isBreak());
assertFalse(node3.isSwitch());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.isIn());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isVoid());
assertFalse(node3.isCast());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isNot());
assertFalse(node3.isDelProp());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isWhile());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.isBreak());
assertFalse(node4.isComma());
assertFalse(node4.isHook());
assertFalse(node4.isThis());
assertEquals(2, node4.getChildCount());
assertFalse(node4.isWith());
assertFalse(node4.isIn());
assertTrue(node4.hasChildren());
assertFalse(node4.isInstanceOf());
assertTrue(node4.hasMoreThanOneChild());
assertFalse(node4.isInc());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertEquals(471, node4.getType());
assertFalse(node4.isCast());
assertFalse(node4.isDelProp());
assertFalse(node4.isGetElem());
assertFalse(node4.isExprResult());
assertFalse(node4.isFunction());
assertFalse(node4.isTypeOf());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isReturn());
assertFalse(node4.isObjectLit());
assertFalse(node4.isContinue());
assertFalse(node4.isAnd());
assertFalse(node4.isString());
assertFalse(node4.isGetProp());
assertFalse(node4.isDebugger());
assertFalse(node4.isNot());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isCall());
assertFalse(node4.isStringKey());
assertFalse(node4.isName());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isSetterDef());
assertFalse(node4.isWhile());
assertFalse(node4.isVar());
assertFalse(node4.isBlock());
assertFalse(node4.isCatch());
assertFalse(node4.isDo());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isOr());
assertFalse(node4.isNull());
assertFalse(node4.hasOneChild());
assertFalse(node4.isLabelName());
assertFalse(node4.isArrayLit());
assertFalse(node4.isEmpty());
assertFalse(node4.isRegExp());
assertFalse(node4.isTry());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isLabel());
assertFalse(node4.isFor());
assertFalse(node4.isScript());
assertFalse(node4.isCase());
assertFalse(node4.isParamList());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isNumber());
assertFalse(node4.isSwitch());
assertFalse(node4.isGetterDef());

String string0 = node2.toString(false, false, false);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertNotNull(string0);
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(36, node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(37, node2.getCharno());
assertFalse(node2.isIf());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isVar());
assertFalse(node2.isReturn());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertTrue(node2.isNumber());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());

boolean boolean4 = node3.isTrue();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertNotSame(node0, node1);
assertSame(node0, node3);
assertNotSame(node3, node1);
assertSame(node3, node0);
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals(36, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertEquals(37, node0.getCharno());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(36, node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(37, node2.getCharno());
assertFalse(node2.isIf());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isVar());
assertFalse(node2.isReturn());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertTrue(node2.isNumber());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isContinue());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isFunction());
assertFalse(node3.isVar());
assertFalse(node3.isLabel());
assertEquals(40, node3.getType());
assertFalse(node3.hasOneChild());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isLabelName());
assertEquals(37, node3.getCharno());
assertFalse(node3.isNumber());
assertFalse(node3.isNE());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCase());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertEquals(36, node3.getLineno());
assertFalse(node3.isRegExp());
assertFalse(node3.isFor());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertFalse(node3.isBreak());
assertFalse(node3.isSwitch());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.isIn());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isVoid());
assertFalse(node3.isCast());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isNot());
assertFalse(node3.isDelProp());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isWhile());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());

Iterable<Node> iterable0 = node4.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertNotSame(node0, node1);
assertSame(node0, node3);
assertNotSame(node1, node3);
assertNotSame(node1, node0);
assertNotSame(node3, node1);
assertSame(node3, node0);
assertNotNull(iterable0);
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals(36, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertEquals(37, node0.getCharno());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertEquals(3, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isIn());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(36, node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(37, node2.getCharno());
assertFalse(node2.isIf());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isVar());
assertFalse(node2.isReturn());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertTrue(node2.isNumber());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isContinue());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isFunction());
assertFalse(node3.isVar());
assertFalse(node3.isLabel());
assertEquals(40, node3.getType());
assertFalse(node3.hasOneChild());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isLabelName());
assertEquals(37, node3.getCharno());
assertFalse(node3.isNumber());
assertFalse(node3.isNE());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCase());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertEquals(36, node3.getLineno());
assertFalse(node3.isRegExp());
assertFalse(node3.isFor());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertFalse(node3.isBreak());
assertFalse(node3.isSwitch());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.isIn());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isVoid());
assertFalse(node3.isCast());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isNot());
assertFalse(node3.isDelProp());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isWhile());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.isBreak());
assertFalse(node4.isComma());
assertFalse(node4.isHook());
assertFalse(node4.isThis());
assertEquals(2, node4.getChildCount());
assertFalse(node4.isWith());
assertFalse(node4.isIn());
assertTrue(node4.hasChildren());
assertFalse(node4.isInstanceOf());
assertTrue(node4.hasMoreThanOneChild());
assertFalse(node4.isInc());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertEquals(471, node4.getType());
assertFalse(node4.isCast());
assertFalse(node4.isDelProp());
assertFalse(node4.isGetElem());
assertFalse(node4.isExprResult());
assertFalse(node4.isFunction());
assertFalse(node4.isTypeOf());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isReturn());
assertFalse(node4.isObjectLit());
assertFalse(node4.isContinue());
assertFalse(node4.isAnd());
assertFalse(node4.isString());
assertFalse(node4.isGetProp());
assertFalse(node4.isDebugger());
assertFalse(node4.isNot());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isCall());
assertFalse(node4.isStringKey());
assertFalse(node4.isName());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isSetterDef());
assertFalse(node4.isWhile());
assertFalse(node4.isVar());
assertFalse(node4.isBlock());
assertFalse(node4.isCatch());
assertFalse(node4.isDo());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isOr());
assertFalse(node4.isNull());
assertFalse(node4.hasOneChild());
assertFalse(node4.isLabelName());
assertFalse(node4.isArrayLit());
assertFalse(node4.isEmpty());
assertFalse(node4.isRegExp());
assertFalse(node4.isTry());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isLabel());
assertFalse(node4.isFor());
assertFalse(node4.isScript());
assertFalse(node4.isCase());
assertFalse(node4.isParamList());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isNumber());
assertFalse(node4.isSwitch());
assertFalse(node4.isGetterDef());

Node node5 = Node.newString(117, "", (-1049), 40);
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node0));
assertNotSame(node5, node1);
assertNotSame(node5, node3);
assertNotSame(node5, node0);
assertNotNull(node5);
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isOr());
assertFalse(node5.isLabel());
assertFalse(node5.isReturn());
assertFalse(node5.isNumber());
assertFalse(node5.isWhile());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isDo());
assertFalse(node5.isAdd());
assertFalse(node5.isNew());
assertFalse(node5.isCall());
assertFalse(node5.isAssign());
assertFalse(node5.isBlock());
assertFalse(node5.isDec());
assertFalse(node5.hasChildren());
assertFalse(node5.isTypeOf());
assertFalse(node5.isExprResult());
assertFalse(node5.isNull());
assertFalse(node5.isGetElem());
assertFalse(node5.isName());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isObjectLit());
assertFalse(node5.isAnd());
assertFalse(node5.isNot());
assertFalse(node5.isComma());
assertFalse(node5.isSetterDef());
assertFalse(node5.isGetProp());
assertFalse(node5.isCast());
assertFalse(node5.isFalse());
assertFalse(node5.isThrow());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isDebugger());
assertFalse(node5.isFunction());
assertFalse(node5.isIn());
assertFalse(node5.isInc());
assertFalse(node5.isString());
assertFalse(node5.isEmpty());
assertFalse(node5.isCase());
assertFalse(node5.isFor());
assertFalse(node5.isHook());
assertFalse(node5.isNE());
assertFalse(node5.isRegExp());
assertFalse(node5.isTrue());
assertFalse(node5.isIf());
assertFalse(node5.isDelProp());
assertFalse(node5.isBreak());
assertFalse(node5.isVoid());
assertFalse(node5.isCatch());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isWith());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isScript());
assertFalse(node5.isThis());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isTry());
assertFalse(node5.hasOneChild());
assertFalse(node5.isVar());
assertFalse(node5.isStringKey());
assertFalse(node5.isGetterDef());
assertEquals((-1), node5.getCharno());
assertEquals(117, node5.getType());
assertFalse(node5.isSwitch());
assertTrue(node5.isContinue());
assertFalse(node5.isParamList());
assertFalse(node5.isLabelName());
assertFalse(node5.isArrayLit());

boolean boolean5 = node2.isReturn();
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node3));
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean3);
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(36, node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(37, node2.getCharno());
assertFalse(node2.isIf());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isVar());
assertFalse(node2.isReturn());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertTrue(node2.isNumber());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());

boolean boolean6 = node2.isTrue();
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node3));
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean3);
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(36, node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(37, node2.getCharno());
assertFalse(node2.isIf());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isVar());
assertFalse(node2.isReturn());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertTrue(node2.isNumber());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());

Iterable<Node> iterable1 = node0.children();
assertFalse(iterable1.equals((Object)iterable0));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node5));
assertNotSame(node0, node1);
assertSame(node0, node3);
assertNotSame(node0, node5);
assertFalse(iterable1.contains(node4));
assertNotNull(iterable1);
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals(36, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertEquals(37, node0.getCharno());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());

StringWriter stringWriter0 = new StringWriter(25);
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

StringWriter stringWriter1 = stringWriter0.append((CharSequence) "NUMBER 12.0");
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);
assertEquals("NUMBER 12.0", stringWriter0.toString());
assertEquals("NUMBER 12.0", stringWriter1.toString());

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
assertNotNull(mockPrintWriter0);

Locale locale0 = new Locale("H'Y@UN%");
assertNotNull(locale0);
assertEquals("h'y@un%", locale0.getLanguage());
assertEquals("", locale0.getVariant());
assertEquals("h'y@un%", locale0.toString());
assertEquals("", locale0.getCountry());
assertEquals("", locale0.getISO3Country());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags2);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags3);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());

Node node6 = Node.newString("ASSIGN_URSH", (-570), 1);
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node2));
assertNotSame(node6, node3);
assertNotSame(node6, node5);
assertNotSame(node6, node0);
assertNotSame(node6, node1);
assertNotNull(node6);
assertFalse(node6.isIn());
assertFalse(node6.isEmpty());
assertFalse(node6.isGetterDef());
assertFalse(node6.isDelProp());
assertFalse(node6.isIf());
assertFalse(node6.isSwitch());
assertFalse(node6.isNE());
assertEquals((-1), node6.getCharno());
assertFalse(node6.isTry());
assertFalse(node6.isVoid());
assertFalse(node6.isFor());
assertFalse(node6.isCase());
assertFalse(node6.isRegExp());
assertFalse(node6.isComma());
assertFalse(node6.isHook());
assertFalse(node6.isThis());
assertEquals(0, node6.getChildCount());
assertFalse(node6.isBreak());
assertFalse(node6.isStringKey());
assertFalse(node6.isName());
assertFalse(node6.isParamList());
assertFalse(node6.isNull());
assertFalse(node6.isTrue());
assertFalse(node6.isAdd());
assertFalse(node6.isNew());
assertFalse(node6.isArrayLit());
assertFalse(node6.isDo());
assertFalse(node6.isDefaultCase());
assertFalse(node6.isVar());
assertFalse(node6.isAssignAdd());
assertFalse(node6.isOr());
assertFalse(node6.isLabel());
assertEquals((-1), node6.getLineno());
assertFalse(node6.hasMoreThanOneChild());
assertFalse(node6.isLabelName());
assertFalse(node6.isNumber());
assertEquals((-1), node6.getSourcePosition());
assertTrue(node6.isString());
assertFalse(node6.isScript());
assertFalse(node6.hasOneChild());
assertFalse(node6.isGetElem());
assertFalse(node6.isExprResult());
assertFalse(node6.isCall());
assertFalse(node6.isAssign());
assertFalse(node6.isWhile());
assertFalse(node6.isTypeOf());
assertFalse(node6.isWith());
assertFalse(node6.isDec());
assertFalse(node6.hasChildren());
assertFalse(node6.isReturn());
assertFalse(node6.isBlock());
assertFalse(node6.isInstanceOf());
assertFalse(node6.isCatch());
assertFalse(node6.isGetProp());
assertFalse(node6.isSetterDef());
assertFalse(node6.isNot());
assertFalse(node6.isObjectLit());
assertFalse(node6.isAnd());
assertFalse(node6.isDebugger());
assertFalse(node6.isFunction());
assertFalse(node6.isCast());
assertFalse(node6.isInc());
assertFalse(node6.isContinue());
assertFalse(node6.isFalse());
assertFalse(node6.isThrow());
assertEquals(40, node6.getType());

boolean boolean7 = node4.isParamList();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node6));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node6));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node6));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node6));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node4.equals((Object)node6));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean5);
assertNotSame(node0, node1);
assertSame(node0, node3);
assertNotSame(node0, node5);
assertNotSame(node0, node6);
assertNotSame(node1, node3);
assertNotSame(node1, node6);
assertNotSame(node1, node0);
assertNotSame(node1, node5);
assertNotSame(node3, node5);
assertNotSame(node3, node6);
assertNotSame(node3, node1);
assertSame(node3, node0);
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals(36, node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertEquals(37, node0.getCharno());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertEquals(3, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isIn());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(36, node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(37, node2.getCharno());
assertFalse(node2.isIf());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isVar());
assertFalse(node2.isReturn());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertTrue(node2.isNumber());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isContinue());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isFunction());
assertFalse(node3.isVar());
assertFalse(node3.isLabel());
assertEquals(40, node3.getType());
assertFalse(node3.hasOneChild());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isLabelName());
assertEquals(37, node3.getCharno());

boolean boolean8 = node6.isDefaultCase();
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node2));
assertTrue(boolean8 == boolean6);
assertTrue(boolean8 == boolean3);
assertTrue(boolean8 == boolean0);
assertTrue(boolean8 == boolean7);
assertTrue(boolean8 == boolean2);
assertTrue(boolean8 == boolean4);
assertTrue(boolean8 == boolean1);
assertTrue(boolean8 == boolean5);
assertNotSame(node6, node3);
assertNotSame(node6, node5);
assertNotSame(node6, node0);
assertNotSame(node6, node1);


[MASTER] 13:20:46.784 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_177_1628256046063/com/google/javascript/rhino/Node_177_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_177_1628256046063/com/google/javascript/rhino/Node_177_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:46.784 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:46.784 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:46.785 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2453
[MASTER] 13:20:46.786 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_177_1628256046063/com/google/javascript/rhino/Node_177_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:46 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.StaticSourceFile;
13: import java.io.StringWriter;
14: import java.util.Locale;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.mock.java.io.MockPrintWriter;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_177_tmp__ESTest extends Node_177_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Node node0 = Node.newString("", 36, 36);
26:       assertNotNull(node0);
27:       assertFalse(node0.isWhile());
28:       assertFalse(node0.isDo());
29:       assertFalse(node0.isBlock());
30:       assertFalse(node0.isAssignAdd());
31:       assertFalse(node0.isNew());
32:       assertTrue(node0.isString());
33:       assertFalse(node0.isOr());
34:       assertFalse(node0.isAdd());
35:       assertFalse(node0.hasChildren());
36:       assertFalse(node0.isTypeOf());
37:       assertFalse(node0.isDec());
38:       assertFalse(node0.isName());
39:       assertFalse(node0.isAssign());
40:       assertFalse(node0.isNull());
41:       assertFalse(node0.isReturn());
42:       assertFalse(node0.isExprResult());
43:       assertFalse(node0.isCall());
44:       assertFalse(node0.hasMoreThanOneChild());
45:       assertEquals(36, node0.getLineno());
46:       assertFalse(node0.isGetElem());
47:       assertFalse(node0.isCatch());
48:       assertFalse(node0.isWith());
49:       assertFalse(node0.isDefaultCase());
50:       assertFalse(node0.isRegExp());
51:       assertFalse(node0.isTrue());
52:       assertFalse(node0.hasOneChild());
53:       assertEquals(147492, node0.getSourcePosition());
54:       assertFalse(node0.isTry());
55:       assertFalse(node0.isScript());
56:       assertFalse(node0.isEmpty());
57:       assertFalse(node0.isNumber());
58:       assertFalse(node0.isLabelName());
59:       assertFalse(node0.isGetterDef());
60:       assertFalse(node0.isParamList());
61:       assertFalse(node0.isStringKey());
62:       assertFalse(node0.isVar());
63:       assertFalse(node0.isLabel());
64:       assertFalse(node0.isArrayLit());
65:       assertEquals(0, node0.getChildCount());
66:       assertEquals(36, node0.getCharno());
67:       assertFalse(node0.isCase());
68:       assertFalse(node0.isSwitch());
69:       assertFalse(node0.isIn());
70:       assertFalse(node0.isInc());
71:       assertFalse(node0.isBreak());
72:       assertFalse(node0.isIf());
73:       assertFalse(node0.isDelProp());
74:       assertFalse(node0.isThis());
75:       assertFalse(node0.isComma());
76:       assertFalse(node0.isHook());
77:       assertFalse(node0.isFor());
78:       assertFalse(node0.isNE());
79:       assertFalse(node0.isVoid());
80:       assertFalse(node0.isInstanceOf());
81:       assertFalse(node0.isNot());
82:       assertFalse(node0.isDebugger());
83:       assertFalse(node0.isAnd());
84:       assertEquals(40, node0.getType());
85:       assertFalse(node0.isSetterDef());
86:       assertFalse(node0.isObjectLit());
87:       assertFalse(node0.isGetProp());
88:       assertFalse(node0.isFalse());
89:       assertFalse(node0.isThrow());
90:       assertFalse(node0.isFunction());
91:       assertFalse(node0.isContinue());
92:       assertFalse(node0.isCast());
93:       assertEquals(8, Node.FLAG_NO_THROWS);
94:       assertEquals(39, Node.EMPTY_BLOCK);
95:       assertEquals(48, Node.DIRECTIVES);
96:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
97:       assertEquals(55, Node.INFERRED_FUNCTION);
98:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
99:       assertEquals(4095, Node.COLUMN_MASK);
100:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
101:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
103:       assertEquals(36, Node.QUOTED_PROP);
104:       assertEquals(52, Node.LENGTH);
105:       assertEquals(15, Node.NO_SIDE_EFFECTS);
106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
107:       assertEquals(53, Node.INPUT_ID);
108:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
109:       assertEquals(49, Node.DIRECT_EVAL);
110:       assertEquals(56, Node.CHANGE_TIME);
111:       assertEquals(57, Node.REFLECTED_OBJECT);
112:       assertEquals(37, Node.OPT_ARG_NAME);
113:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
114:       assertEquals(2, Node.POST_FLAG);
115:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
116:       assertEquals(29, Node.JSDOC_INFO_PROP);
117:       assertEquals(30, Node.VAR_ARGS_NAME);
118:       assertEquals(1, Node.DECR_FLAG);
119:       assertEquals(32, Node.INCRDECR_PROP);
120:       assertEquals(57, Node.LAST_PROP);
121:       assertEquals(47, Node.IS_DISPATCHER);
122:       assertEquals(12, Node.COLUMN_BITS);
123:       assertEquals(40, Node.ORIGINALNAME_PROP);
124:       assertEquals(51, Node.STATIC_SOURCE_FILE);
125:       assertEquals(50, Node.FREE_CALL);
126:       assertEquals(43, Node.IS_CONSTANT_NAME);
127:       assertEquals(46, Node.IS_NAMESPACE);
128:       assertEquals(54, Node.SLASH_V);
129:       
130:       boolean boolean0 = node0.isLabelName();
131:       assertFalse(node0.isWhile());
132:       assertFalse(node0.isDo());
133:       assertFalse(node0.isBlock());
134:       assertFalse(node0.isAssignAdd());
135:       assertFalse(node0.isNew());
136:       assertTrue(node0.isString());
137:       assertFalse(node0.isOr());
138:       assertFalse(node0.isAdd());
139:       assertFalse(node0.hasChildren());
140:       assertFalse(node0.isTypeOf());
141:       assertFalse(node0.isDec());
142:       assertFalse(node0.isName());
143:       assertFalse(node0.isAssign());
144:       assertFalse(node0.isNull());
145:       assertFalse(node0.isReturn());
146:       assertFalse(node0.isExprResult());
147:       assertFalse(node0.isCall());
148:       assertFalse(node0.hasMoreThanOneChild());
149:       assertEquals(36, node0.getLineno());
150:       assertFalse(node0.isGetElem());
151:       assertFalse(node0.isCatch());
152:       assertFalse(node0.isWith());
153:       assertFalse(node0.isDefaultCase());
154:       assertFalse(node0.isRegExp());
155:       assertFalse(node0.isTrue());
156:       assertFalse(node0.hasOneChild());
157:       assertEquals(147492, node0.getSourcePosition());
158:       assertFalse(node0.isTry());
159:       assertFalse(node0.isScript());
160:       assertFalse(node0.isEmpty());
161:       assertFalse(node0.isNumber());
162:       assertFalse(node0.isLabelName());
163:       assertFalse(node0.isGetterDef());
164:       assertFalse(node0.isParamList());
165:       assertFalse(node0.isStringKey());
166:       assertFalse(node0.isVar());
167:       assertFalse(node0.isLabel());
168:       assertFalse(node0.isArrayLit());
169:       assertEquals(0, node0.getChildCount());
170:       assertEquals(36, node0.getCharno());
171:       assertFalse(node0.isCase());
172:       assertFalse(node0.isSwitch());
173:       assertFalse(node0.isIn());
174:       assertFalse(node0.isInc());
175:       assertFalse(node0.isBreak());
176:       assertFalse(node0.isIf());
177:       assertFalse(node0.isDelProp());
178:       assertFalse(node0.isThis());
179:       assertFalse(node0.isComma());
180:       assertFalse(node0.isHook());
181:       assertFalse(node0.isFor());
182:       assertFalse(node0.isNE());
183:       assertFalse(node0.isVoid());
184:       assertFalse(node0.isInstanceOf());
185:       assertFalse(node0.isNot());
186:       assertFalse(node0.isDebugger());
187:       assertFalse(node0.isAnd());
188:       assertEquals(40, node0.getType());
189:       assertFalse(node0.isSetterDef());
190:       assertFalse(node0.isObjectLit());
191:       assertFalse(node0.isGetProp());
192:       assertFalse(node0.isFalse());
193:       assertFalse(node0.isThrow());
194:       assertFalse(node0.isFunction());
195:       assertFalse(node0.isContinue());
196:       assertFalse(node0.isCast());
197:       assertFalse(boolean0);
198:       assertEquals(8, Node.FLAG_NO_THROWS);
199:       assertEquals(39, Node.EMPTY_BLOCK);
200:       assertEquals(48, Node.DIRECTIVES);
201:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
202:       assertEquals(55, Node.INFERRED_FUNCTION);
203:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
204:       assertEquals(4095, Node.COLUMN_MASK);
205:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
206:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
207:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
208:       assertEquals(36, Node.QUOTED_PROP);
209:       assertEquals(52, Node.LENGTH);
210:       assertEquals(15, Node.NO_SIDE_EFFECTS);
211:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
212:       assertEquals(53, Node.INPUT_ID);
213:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
214:       assertEquals(49, Node.DIRECT_EVAL);
215:       assertEquals(56, Node.CHANGE_TIME);
216:       assertEquals(57, Node.REFLECTED_OBJECT);
217:       assertEquals(37, Node.OPT_ARG_NAME);
218:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
219:       assertEquals(2, Node.POST_FLAG);
220:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
221:       assertEquals(29, Node.JSDOC_INFO_PROP);
222:       assertEquals(30, Node.VAR_ARGS_NAME);
223:       assertEquals(1, Node.DECR_FLAG);
224:       assertEquals(32, Node.INCRDECR_PROP);
225:       assertEquals(57, Node.LAST_PROP);
226:       assertEquals(47, Node.IS_DISPATCHER);
227:       assertEquals(12, Node.COLUMN_BITS);
228:       assertEquals(40, Node.ORIGINALNAME_PROP);
229:       assertEquals(51, Node.STATIC_SOURCE_FILE);
230:       assertEquals(50, Node.FREE_CALL);
231:       assertEquals(43, Node.IS_CONSTANT_NAME);
232:       assertEquals(46, Node.IS_NAMESPACE);
233:       assertEquals(54, Node.SLASH_V);
234:       
235:       boolean boolean1 = node0.isOr();
236:       assertTrue(boolean1 == boolean0);
237:       assertFalse(node0.isWhile());
238:       assertFalse(node0.isDo());
239:       assertFalse(node0.isBlock());
240:       assertFalse(node0.isAssignAdd());
241:       assertFalse(node0.isNew());
242:       assertTrue(node0.isString());
243:       assertFalse(node0.isOr());
244:       assertFalse(node0.isAdd());
245:       assertFalse(node0.hasChildren());
246:       assertFalse(node0.isTypeOf());
247:       assertFalse(node0.isDec());
248:       assertFalse(node0.isName());
249:       assertFalse(node0.isAssign());
250:       assertFalse(node0.isNull());
251:       assertFalse(node0.isReturn());
252:       assertFalse(node0.isExprResult());
253:       assertFalse(node0.isCall());
254:       assertFalse(node0.hasMoreThanOneChild());
255:       assertEquals(36, node0.getLineno());
256:       assertFalse(node0.isGetElem());
257:       assertFalse(node0.isCatch());
258:       assertFalse(node0.isWith());
259:       assertFalse(node0.isDefaultCase());
260:       assertFalse(node0.isRegExp());
261:       assertFalse(node0.isTrue());
262:       assertFalse(node0.hasOneChild());
263:       assertEquals(147492, node0.getSourcePosition());
264:       assertFalse(node0.isTry());
265:       assertFalse(node0.isScript());
266:       assertFalse(node0.isEmpty());
267:       assertFalse(node0.isNumber());
268:       assertFalse(node0.isLabelName());
269:       assertFalse(node0.isGetterDef());
270:       assertFalse(node0.isParamList());
271:       assertFalse(node0.isStringKey());
272:       assertFalse(node0.isVar());
273:       assertFalse(node0.isLabel());
274:       assertFalse(node0.isArrayLit());
275:       assertEquals(0, node0.getChildCount());
276:       assertEquals(36, node0.getCharno());
277:       assertFalse(node0.isCase());
278:       assertFalse(node0.isSwitch());
279:       assertFalse(node0.isIn());
280:       assertFalse(node0.isInc());
281:       assertFalse(node0.isBreak());
282:       assertFalse(node0.isIf());
283:       assertFalse(node0.isDelProp());
284:       assertFalse(node0.isThis());
285:       assertFalse(node0.isComma());
286:       assertFalse(node0.isHook());
287:       assertFalse(node0.isFor());
288:       assertFalse(node0.isNE());
289:       assertFalse(node0.isVoid());
290:       assertFalse(node0.isInstanceOf());
291:       assertFalse(node0.isNot());
292:       assertFalse(node0.isDebugger());
293:       assertFalse(node0.isAnd());
294:       assertEquals(40, node0.getType());
295:       assertFalse(node0.isSetterDef());
296:       assertFalse(node0.isObjectLit());
297:       assertFalse(node0.isGetProp());
298:       assertFalse(node0.isFalse());
299:       assertFalse(node0.isThrow());
300:       assertFalse(node0.isFunction());
301:       assertFalse(node0.isContinue());
302:       assertFalse(node0.isCast());
303:       assertFalse(boolean1);
304:       assertEquals(8, Node.FLAG_NO_THROWS);
305:       assertEquals(39, Node.EMPTY_BLOCK);
306:       assertEquals(48, Node.DIRECTIVES);
307:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
308:       assertEquals(55, Node.INFERRED_FUNCTION);
309:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
310:       assertEquals(4095, Node.COLUMN_MASK);
311:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
312:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
313:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
314:       assertEquals(36, Node.QUOTED_PROP);
315:       assertEquals(52, Node.LENGTH);
316:       assertEquals(15, Node.NO_SIDE_EFFECTS);
317:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
318:       assertEquals(53, Node.INPUT_ID);
319:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
320:       assertEquals(49, Node.DIRECT_EVAL);
321:       assertEquals(56, Node.CHANGE_TIME);
322:       assertEquals(57, Node.REFLECTED_OBJECT);
323:       assertEquals(37, Node.OPT_ARG_NAME);
324:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
325:       assertEquals(2, Node.POST_FLAG);
326:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
327:       assertEquals(29, Node.JSDOC_INFO_PROP);
328:       assertEquals(30, Node.VAR_ARGS_NAME);
329:       assertEquals(1, Node.DECR_FLAG);
330:       assertEquals(32, Node.INCRDECR_PROP);
331:       assertEquals(57, Node.LAST_PROP);
332:       assertEquals(47, Node.IS_DISPATCHER);
333:       assertEquals(12, Node.COLUMN_BITS);
334:       assertEquals(40, Node.ORIGINALNAME_PROP);
335:       assertEquals(51, Node.STATIC_SOURCE_FILE);
336:       assertEquals(50, Node.FREE_CALL);
337:       assertEquals(43, Node.IS_CONSTANT_NAME);
338:       assertEquals(46, Node.IS_NAMESPACE);
339:       assertEquals(54, Node.SLASH_V);
340:       
341:       Node node1 = Node.newString(38, "");
342:       assertFalse(node1.equals((Object)node0));
343:       assertNotSame(node1, node0);
344:       assertNotNull(node1);
345:       assertEquals(38, node1.getType());
346:       assertFalse(node1.isWith());
347:       assertFalse(node1.isNot());
348:       assertFalse(node1.isExprResult());
349:       assertFalse(node1.isObjectLit());
350:       assertFalse(node1.isInstanceOf());
351:       assertFalse(node1.isScript());
352:       assertFalse(node1.hasOneChild());
353:       assertFalse(node1.isThis());
354:       assertFalse(node1.isComma());
355:       assertEquals((-1), node1.getSourcePosition());
356:       assertFalse(node1.isNumber());
357:       assertFalse(node1.isFalse());
358:       assertFalse(node1.isLabelName());
359:       assertFalse(node1.isGetProp());
360:       assertFalse(node1.isCast());
361:       assertFalse(node1.isSwitch());
362:       assertEquals((-1), node1.getCharno());
363:       assertFalse(node1.isAnd());
364:       assertFalse(node1.isCase());
365:       assertFalse(node1.isInc());
366:       assertFalse(node1.hasMoreThanOneChild());
367:       assertFalse(node1.isContinue());
368:       assertFalse(node1.isHook());
369:       assertFalse(node1.isBlock());
370:       assertFalse(node1.isThrow());
371:       assertFalse(node1.isIf());
372:       assertFalse(node1.isSetterDef());
373:       assertEquals((-1), node1.getLineno());
374:       assertFalse(node1.isIn());
375:       assertTrue(node1.isName());
376:       assertFalse(node1.isNE());
377:       assertFalse(node1.isDefaultCase());
378:       assertFalse(node1.isRegExp());
379:       assertFalse(node1.isFunction());
380:       assertFalse(node1.isCatch());
381:       assertFalse(node1.isTry());
382:       assertEquals(0, node1.getChildCount());
383:       assertFalse(node1.isFor());
384:       assertFalse(node1.isGetterDef());
385:       assertFalse(node1.isArrayLit());
386:       assertFalse(node1.isParamList());
387:       assertFalse(node1.isDebugger());
388:       assertFalse(node1.isStringKey());
389:       assertFalse(node1.isWhile());
390:       assertFalse(node1.isString());
391:       assertFalse(node1.isDo());
392:       assertFalse(node1.isAdd());
393:       assertFalse(node1.isReturn());
394:       assertFalse(node1.isAssignAdd());
395:       assertFalse(node1.isLabel());
396:       assertFalse(node1.isNew());
397:       assertFalse(node1.isVar());
398:       assertFalse(node1.hasChildren());
399:       assertFalse(node1.isBreak());
400:       assertFalse(node1.isTypeOf());
401:       assertFalse(node1.isDec());
402:       assertFalse(node1.isAssign());
403:       assertFalse(node1.isDelProp());
404:       assertFalse(node1.isCall());
405:       assertFalse(node1.isGetElem());
406:       assertFalse(node1.isEmpty());
407:       assertFalse(node1.isOr());
408:       assertFalse(node1.isVoid());
409:       assertFalse(node1.isTrue());
410:       assertFalse(node1.isNull());
411:       assertEquals(37, Node.OPT_ARG_NAME);
412:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
413:       assertEquals(2, Node.POST_FLAG);
414:       assertEquals(32, Node.INCRDECR_PROP);
415:       assertEquals(47, Node.IS_DISPATCHER);
416:       assertEquals(56, Node.CHANGE_TIME);
417:       assertEquals(12, Node.COLUMN_BITS);
418:       assertEquals(46, Node.IS_NAMESPACE);
419:       assertEquals(30, Node.VAR_ARGS_NAME);
420:       assertEquals(49, Node.DIRECT_EVAL);
421:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
422:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
423:       assertEquals(43, Node.IS_CONSTANT_NAME);
424:       assertEquals(54, Node.SLASH_V);
425:       assertEquals(51, Node.STATIC_SOURCE_FILE);
426:       assertEquals(1, Node.DECR_FLAG);
427:       assertEquals(50, Node.FREE_CALL);
428:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
429:       assertEquals(8, Node.FLAG_NO_THROWS);
430:       assertEquals(39, Node.EMPTY_BLOCK);
431:       assertEquals(48, Node.DIRECTIVES);
432:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
433:       assertEquals(40, Node.ORIGINALNAME_PROP);
434:       assertEquals(4095, Node.COLUMN_MASK);
435:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
436:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
437:       assertEquals(36, Node.QUOTED_PROP);
438:       assertEquals(57, Node.LAST_PROP);
439:       assertEquals(57, Node.REFLECTED_OBJECT);
440:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
441:       assertEquals(52, Node.LENGTH);
442:       assertEquals(15, Node.NO_SIDE_EFFECTS);
443:       assertEquals(53, Node.INPUT_ID);
444:       assertEquals(55, Node.INFERRED_FUNCTION);
445:       assertEquals(29, Node.JSDOC_INFO_PROP);
446:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
447:       
448:       StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
449:       assertFalse(node1.equals((Object)node0));
450:       assertNotSame(node1, node0);
451:       assertNull(staticSourceFile0);
452:       assertEquals(38, node1.getType());
453:       assertFalse(node1.isWith());
454:       assertFalse(node1.isNot());
455:       assertFalse(node1.isExprResult());
456:       assertFalse(node1.isObjectLit());
457:       assertFalse(node1.isInstanceOf());
458:       assertFalse(node1.isScript());
459:       assertFalse(node1.hasOneChild());
460:       assertFalse(node1.isThis());
461:       assertFalse(node1.isComma());
462:       assertEquals((-1), node1.getSourcePosition());
463:       assertFalse(node1.isNumber());
464:       assertFalse(node1.isFalse());
465:       assertFalse(node1.isLabelName());
466:       assertFalse(node1.isGetProp());
467:       assertFalse(node1.isCast());
468:       assertFalse(node1.isSwitch());
469:       assertEquals((-1), node1.getCharno());
470:       assertFalse(node1.isAnd());
471:       assertFalse(node1.isCase());
472:       assertFalse(node1.isInc());
473:       assertFalse(node1.hasMoreThanOneChild());
474:       assertFalse(node1.isContinue());
475:       assertFalse(node1.isHook());
476:       assertFalse(node1.isBlock());
477:       assertFalse(node1.isThrow());
478:       assertFalse(node1.isIf());
479:       assertFalse(node1.isSetterDef());
480:       assertEquals((-1), node1.getLineno());
481:       assertFalse(node1.isIn());
482:       assertTrue(node1.isName());
483:       assertFalse(node1.isNE());
484:       assertFalse(node1.isDefaultCase());
485:       assertFalse(node1.isRegExp());
486:       assertFalse(node1.isFunction());
487:       assertFalse(node1.isCatch());
488:       assertFalse(node1.isTry());
489:       assertEquals(0, node1.getChildCount());
490:       assertFalse(node1.isFor());
491:       assertFalse(node1.isGetterDef());
492:       assertFalse(node1.isArrayLit());
493:       assertFalse(node1.isParamList());
494:       assertFalse(node1.isDebugger());
495:       assertFalse(node1.isStringKey());
496:       assertFalse(node1.isWhile());
497:       assertFalse(node1.isString());
498:       assertFalse(node1.isDo());
499:       assertFalse(node1.isAdd());
500:       assertFalse(node1.isReturn());
501:       assertFalse(node1.isAssignAdd());
502:       assertFalse(node1.isLabel());
503:       assertFalse(node1.isNew());
504:       assertFalse(node1.isVar());
505:       assertFalse(node1.hasChildren());
506:       assertFalse(node1.isBreak());
507:       assertFalse(node1.isTypeOf());
508:       assertFalse(node1.isDec());
509:       assertFalse(node1.isAssign());
510:       assertFalse(node1.isDelProp());
511:       assertFalse(node1.isCall());
512:       assertFalse(node1.isGetElem());
513:       assertFalse(node1.isEmpty());
514:       assertFalse(node1.isOr());
515:       assertFalse(node1.isVoid());
516:       assertFalse(node1.isTrue());
517:       assertFalse(node1.isNull());
518:       assertEquals(37, Node.OPT_ARG_NAME);
519:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
520:       assertEquals(2, Node.POST_FLAG);
521:       assertEquals(32, Node.INCRDECR_PROP);
522:       assertEquals(47, Node.IS_DISPATCHER);
523:       assertEquals(56, Node.CHANGE_TIME);
524:       assertEquals(12, Node.COLUMN_BITS);
525:       assertEquals(46, Node.IS_NAMESPACE);
526:       assertEquals(30, Node.VAR_ARGS_NAME);
527:       assertEquals(49, Node.DIRECT_EVAL);
528:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
529:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
530:       assertEquals(43, Node.IS_CONSTANT_NAME);
531:       assertEquals(54, Node.SLASH_V);
532:       assertEquals(51, Node.STATIC_SOURCE_FILE);
533:       assertEquals(1, Node.DECR_FLAG);
534:       assertEquals(50, Node.FREE_CALL);
535:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
536:       assertEquals(8, Node.FLAG_NO_THROWS);
537:       assertEquals(39, Node.EMPTY_BLOCK);
538:       assertEquals(48, Node.DIRECTIVES);
539:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
540:       assertEquals(40, Node.ORIGINALNAME_PROP);
541:       assertEquals(4095, Node.COLUMN_MASK);
542:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
543:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
544:       assertEquals(36, Node.QUOTED_PROP);
545:       assertEquals(57, Node.LAST_PROP);
546:       assertEquals(57, Node.REFLECTED_OBJECT);
547:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
548:       assertEquals(52, Node.LENGTH);
549:       assertEquals(15, Node.NO_SIDE_EFFECTS);
550:       assertEquals(53, Node.INPUT_ID);
551:       assertEquals(55, Node.INFERRED_FUNCTION);
552:       assertEquals(29, Node.JSDOC_INFO_PROP);
553:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
554:       
555:       Node node2 = Node.newNumber((double) 12, 36, 37);
556:       assertFalse(node2.equals((Object)node0));
557:       assertFalse(node2.equals((Object)node1));
558:       assertNotNull(node2);
559:       assertFalse(node2.isCatch());
560:       assertFalse(node2.isNull());
561:       assertFalse(node2.isSetterDef());
562:       assertFalse(node2.isParamList());
563:       assertFalse(node2.isTrue());
564:       assertFalse(node2.isDebugger());
565:       assertFalse(node2.isCall());
566:       assertFalse(node2.isName());
567:       assertFalse(node2.isDelProp());
568:       assertFalse(node2.isTry());
569:       assertFalse(node2.isVoid());
570:       assertFalse(node2.isRegExp());
571:       assertFalse(node2.isWhile());
572:       assertFalse(node2.isBlock());
573:       assertFalse(node2.isFor());
574:       assertEquals(39, node2.getType());
575:       assertFalse(node2.hasMoreThanOneChild());
576:       assertFalse(node2.isIn());
577:       assertFalse(node2.isReturn());
578:       assertFalse(node2.isContinue());
579:       assertTrue(node2.isNumber());
580:       assertFalse(node2.isIf());
581:       assertFalse(node2.isInc());
582:       assertFalse(node2.isString());
583:       assertFalse(node2.isNE());
584:       assertEquals(147493, node2.getSourcePosition());
585:       assertFalse(node2.isCast());
586:       assertFalse(node2.isThrow());
587:       assertFalse(node2.isFalse());
588:       assertFalse(node2.isFunction());
589:       assertFalse(node2.isAnd());
590:       assertFalse(node2.isInstanceOf());
591:       assertFalse(node2.isGetProp());
592:       assertEquals(37, node2.getCharno());
593:       assertFalse(node2.isScript());
594:       assertFalse(node2.isObjectLit());
595:       assertFalse(node2.isNot());
596:       assertFalse(node2.hasOneChild());
597:       assertFalse(node2.isHook());
598:       assertFalse(node2.isGetElem());
599:       assertFalse(node2.isTypeOf());
600:       assertFalse(node2.hasChildren());
601:       assertFalse(node2.isBreak());
602:       assertEquals(36, node2.getLineno());
603:       assertFalse(node2.isExprResult());
604:       assertFalse(node2.isThis());
605:       assertFalse(node2.isWith());
606:       assertFalse(node2.isComma());
607:       assertFalse(node2.isAssign());
608:       assertFalse(node2.isDec());
609:       assertFalse(node2.isCase());
610:       assertFalse(node2.isAssignAdd());
611:       assertFalse(node2.isDo());
612:       assertFalse(node2.isSwitch());
613:       assertFalse(node2.isEmpty());
614:       assertFalse(node2.isGetterDef());
615:       assertFalse(node2.isOr());
616:       assertFalse(node2.isArrayLit());
617:       assertFalse(node2.isVar());
618:       assertFalse(node2.isStringKey());
619:       assertFalse(node2.isAdd());
620:       assertFalse(node2.isNew());
621:       assertFalse(node2.isLabelName());
622:       assertFalse(node2.isDefaultCase());
623:       assertFalse(node2.isLabel());
624:       assertEquals(0, node2.getChildCount());
625:       assertEquals(29, Node.JSDOC_INFO_PROP);
626:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
627:       assertEquals(56, Node.CHANGE_TIME);
628:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
629:       assertEquals(47, Node.IS_DISPATCHER);
630:       assertEquals(2, Node.POST_FLAG);
631:       assertEquals(53, Node.INPUT_ID);
632:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
633:       assertEquals(32, Node.INCRDECR_PROP);
634:       assertEquals(1, Node.DECR_FLAG);
635:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
636:       assertEquals(55, Node.INFERRED_FUNCTION);
637:       assertEquals(12, Node.COLUMN_BITS);
638:       assertEquals(36, Node.QUOTED_PROP);
639:       assertEquals(4095, Node.COLUMN_MASK);
640:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
641:       assertEquals(37, Node.OPT_ARG_NAME);
642:       assertEquals(48, Node.DIRECTIVES);
643:       assertEquals(49, Node.DIRECT_EVAL);
644:       assertEquals(50, Node.FREE_CALL);
645:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
646:       assertEquals(40, Node.ORIGINALNAME_PROP);
647:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
648:       assertEquals(57, Node.REFLECTED_OBJECT);
649:       assertEquals(8, Node.FLAG_NO_THROWS);
650:       assertEquals(52, Node.LENGTH);
651:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
652:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
653:       assertEquals(15, Node.NO_SIDE_EFFECTS);
654:       assertEquals(39, Node.EMPTY_BLOCK);
655:       assertEquals(57, Node.LAST_PROP);
656:       assertEquals(51, Node.STATIC_SOURCE_FILE);
657:       assertEquals(30, Node.VAR_ARGS_NAME);
658:       assertEquals(46, Node.IS_NAMESPACE);
659:       assertEquals(54, Node.SLASH_V);
660:       assertEquals(43, Node.IS_CONSTANT_NAME);
661:       
662:       Node node3 = node0.copyInformationFrom(node2);
663:       assertFalse(node0.equals((Object)node1));
664:       assertFalse(node0.equals((Object)node2));
665:       assertFalse(node2.equals((Object)node0));
666:       assertFalse(node2.equals((Object)node1));
667:       assertFalse(node3.equals((Object)node1));
668:       assertFalse(node3.equals((Object)node2));
669:       assertSame(node0, node3);
670:       assertNotSame(node0, node1);
671:       assertSame(node3, node0);
672:       assertNotSame(node3, node1);
673:       assertNotNull(node3);
674:       assertFalse(node0.isWhile());
675:       assertFalse(node0.isDo());
676:       assertFalse(node0.isBlock());
677:       assertFalse(node0.isAssignAdd());
678:       assertFalse(node0.isNew());
679:       assertTrue(node0.isString());
680:       assertFalse(node0.isOr());
681:       assertFalse(node0.isAdd());
682:       assertFalse(node0.hasChildren());
683:       assertFalse(node0.isTypeOf());
684:       assertFalse(node0.isDec());
685:       assertFalse(node0.isName());
686:       assertFalse(node0.isAssign());
687:       assertFalse(node0.isNull());
688:       assertFalse(node0.isReturn());
689:       assertFalse(node0.isExprResult());
690:       assertFalse(node0.isCall());
691:       assertFalse(node0.hasMoreThanOneChild());
692:       assertEquals(36, node0.getLineno());
693:       assertFalse(node0.isGetElem());
694:       assertFalse(node0.isCatch());
695:       assertFalse(node0.isWith());
696:       assertFalse(node0.isDefaultCase());
697:       assertFalse(node0.isRegExp());
698:       assertFalse(node0.isTrue());
699:       assertFalse(node0.hasOneChild());
700:       assertFalse(node0.isTry());
701:       assertFalse(node0.isScript());
702:       assertFalse(node0.isEmpty());
703:       assertFalse(node0.isNumber());
704:       assertFalse(node0.isLabelName());
705:       assertFalse(node0.isGetterDef());
706:       assertFalse(node0.isParamList());
707:       assertFalse(node0.isStringKey());
708:       assertFalse(node0.isVar());
709:       assertFalse(node0.isLabel());
710:       assertFalse(node0.isArrayLit());
711:       assertEquals(0, node0.getChildCount());
712:       assertFalse(node0.isCase());
713:       assertFalse(node0.isSwitch());
714:       assertFalse(node0.isIn());
715:       assertEquals(147493, node0.getSourcePosition());
716:       assertFalse(node0.isInc());
717:       assertFalse(node0.isBreak());
718:       assertFalse(node0.isIf());
719:       assertFalse(node0.isDelProp());
720:       assertFalse(node0.isThis());
721:       assertFalse(node0.isComma());
722:       assertFalse(node0.isHook());
723:       assertFalse(node0.isFor());
724:       assertFalse(node0.isNE());
725:       assertFalse(node0.isVoid());
726:       assertFalse(node0.isInstanceOf());
727:       assertEquals(37, node0.getCharno());
728:       assertFalse(node0.isNot());
729:       assertFalse(node0.isDebugger());
730:       assertFalse(node0.isAnd());
731:       assertEquals(40, node0.getType());
732:       assertFalse(node0.isSetterDef());
733:       assertFalse(node0.isObjectLit());
734:       assertFalse(node0.isGetProp());
735:       assertFalse(node0.isFalse());
736:       assertFalse(node0.isThrow());
737:       assertFalse(node0.isFunction());
738:       assertFalse(node0.isContinue());
739:       assertFalse(node0.isCast());
740:       assertFalse(node2.isCatch());
741:       assertFalse(node2.isNull());
742:       assertFalse(node2.isSetterDef());
743:       assertFalse(node2.isParamList());
744:       assertFalse(node2.isTrue());
745:       assertFalse(node2.isDebugger());
746:       assertFalse(node2.isCall());
747:       assertFalse(node2.isName());
748:       assertFalse(node2.isDelProp());
749:       assertFalse(node2.isTry());
750:       assertFalse(node2.isVoid());
751:       assertFalse(node2.isRegExp());
752:       assertFalse(node2.isWhile());
753:       assertFalse(node2.isBlock());
754:       assertFalse(node2.isFor());
755:       assertEquals(39, node2.getType());
756:       assertFalse(node2.hasMoreThanOneChild());
757:       assertFalse(node2.isIn());
758:       assertFalse(node2.isReturn());
759:       assertFalse(node2.isContinue());
760:       assertTrue(node2.isNumber());
761:       assertFalse(node2.isIf());
762:       assertFalse(node2.isInc());
763:       assertFalse(node2.isString());
764:       assertFalse(node2.isNE());
765:       assertEquals(147493, node2.getSourcePosition());
766:       assertFalse(node2.isCast());
767:       assertFalse(node2.isThrow());
768:       assertFalse(node2.isFalse());
769:       assertFalse(node2.isFunction());
770:       assertFalse(node2.isAnd());
771:       assertFalse(node2.isInstanceOf());
772:       assertFalse(node2.isGetProp());
773:       assertEquals(37, node2.getCharno());
774:       assertFalse(node2.isScript());
775:       assertFalse(node2.isObjectLit());
776:       assertFalse(node2.isNot());
777:       assertFalse(node2.hasOneChild());
778:       assertFalse(node2.isHook());
779:       assertFalse(node2.isGetElem());
780:       assertFalse(node2.isTypeOf());
781:       assertFalse(node2.hasChildren());
782:       assertFalse(node2.isBreak());
783:       assertEquals(36, node2.getLineno());
784:       assertFalse(node2.isExprResult());
785:       assertFalse(node2.isThis());
786:       assertFalse(node2.isWith());
787:       assertFalse(node2.isComma());
788:       assertFalse(node2.isAssign());
789:       assertFalse(node2.isDec());
790:       assertFalse(node2.isCase());
791:       assertFalse(node2.isAssignAdd());
792:       assertFalse(node2.isDo());
793:       assertFalse(node2.isSwitch());
794:       assertFalse(node2.isEmpty());
795:       assertFalse(node2.isGetterDef());
796:       assertFalse(node2.isOr());
797:       assertFalse(node2.isArrayLit());
798:       assertFalse(node2.isVar());
799:       assertFalse(node2.isStringKey());
800:       assertFalse(node2.isAdd());
801:       assertFalse(node2.isNew());
802:       assertFalse(node2.isLabelName());
803:       assertFalse(node2.isDefaultCase());
804:       assertFalse(node2.isLabel());
805:       assertEquals(0, node2.getChildCount());
806:       assertFalse(node3.isWhile());
807:       assertFalse(node3.isDo());
808:       assertFalse(node3.hasMoreThanOneChild());
809:       assertFalse(node3.isContinue());
810:       assertFalse(node3.isOr());
811:       assertFalse(node3.isStringKey());
812:       assertFalse(node3.isName());
813:       assertFalse(node3.isLabelName());
814:       assertFalse(node3.isNull());
815:       assertFalse(node3.isSetterDef());
816:       assertFalse(node3.isCast());
817:       assertEquals(0, node3.getChildCount());
818:       assertFalse(node3.isAdd());
819:       assertFalse(node3.isNew());
820:       assertFalse(node3.isLabel());
821:       assertFalse(node3.isVar());
822:       assertFalse(node3.isAssignAdd());
823:       assertFalse(node3.isNot());
824:       assertEquals(40, node3.getType());
825:       assertFalse(node3.isExprResult());
826:       assertFalse(node3.isFunction());
827:       assertFalse(node3.isObjectLit());
828:       assertFalse(node3.isDebugger());
829:       assertFalse(node3.isTrue());
830:       assertFalse(node3.isAnd());
831:       assertFalse(node3.isVoid());
832:       assertFalse(node3.isDelProp());
833:       assertFalse(node3.isAssign());
834:       assertFalse(node3.isDec());
835:       assertFalse(node3.isGetElem());
836:       assertFalse(node3.hasChildren());
837:       assertFalse(node3.isBreak());
838:       assertFalse(node3.isCall());
839:       assertFalse(node3.isComma());
840:       assertFalse(node3.isTypeOf());
841:       assertFalse(node3.isReturn());
842:       assertFalse(node3.isGetProp());
843:       assertFalse(node3.isCase());
844:       assertFalse(node3.isInc());
845:       assertFalse(node3.isIn());
846:       assertEquals(147493, node3.getSourcePosition());
847:       assertFalse(node3.isNE());
848:       assertFalse(node3.isSwitch());
849:       assertFalse(node3.isIf());
850:       assertFalse(node3.isEmpty());
851:       assertFalse(node3.isFalse());
852:       assertFalse(node3.isThrow());
853:       assertFalse(node3.isDefaultCase());
854:       assertEquals(37, node3.getCharno());
855:       assertFalse(node3.isScript());
856:       assertFalse(node3.isCatch());
857:       assertFalse(node3.isInstanceOf());
858:       assertFalse(node3.isRegExp());
859:       assertFalse(node3.isWith());
860:       assertFalse(node3.isArrayLit());
861:       assertFalse(node3.isParamList());
862:       assertFalse(node3.isGetterDef());
863:       assertFalse(node3.isFor());
864:       assertFalse(node3.isNumber());
865:       assertEquals(36, node3.getLineno());
866:       assertFalse(node3.isTry());
867:       assertFalse(node3.hasOneChild());
868:       assertFalse(node3.isHook());
869:       assertFalse(node3.isBlock());
870:       assertFalse(node3.isThis());
871:       assertTrue(node3.isString());
872:       assertEquals(8, Node.FLAG_NO_THROWS);
873:       assertEquals(39, Node.EMPTY_BLOCK);
874:       assertEquals(48, Node.DIRECTIVES);
875:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
876:       assertEquals(55, Node.INFERRED_FUNCTION);
877:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
878:       assertEquals(4095, Node.COLUMN_MASK);
879:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
880:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
881:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
882:       assertEquals(36, Node.QUOTED_PROP);
883:       assertEquals(52, Node.LENGTH);
884:       assertEquals(15, Node.NO_SIDE_EFFECTS);
885:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
886:       assertEquals(53, Node.INPUT_ID);
887:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
888:       assertEquals(49, Node.DIRECT_EVAL);
889:       assertEquals(56, Node.CHANGE_TIME);
890:       assertEquals(57, Node.REFLECTED_OBJECT);
891:       assertEquals(37, Node.OPT_ARG_NAME);
892:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
893:       assertEquals(2, Node.POST_FLAG);
894:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
895:       assertEquals(29, Node.JSDOC_INFO_PROP);
896:       assertEquals(30, Node.VAR_ARGS_NAME);
897:       assertEquals(1, Node.DECR_FLAG);
898:       assertEquals(32, Node.INCRDECR_PROP);
899:       assertEquals(57, Node.LAST_PROP);
900:       assertEquals(47, Node.IS_DISPATCHER);
901:       assertEquals(12, Node.COLUMN_BITS);
902:       assertEquals(40, Node.ORIGINALNAME_PROP);
903:       assertEquals(51, Node.STATIC_SOURCE_FILE);
904:       assertEquals(50, Node.FREE_CALL);
905:       assertEquals(43, Node.IS_CONSTANT_NAME);
906:       assertEquals(46, Node.IS_NAMESPACE);
907:       assertEquals(54, Node.SLASH_V);
908:       assertEquals(29, Node.JSDOC_INFO_PROP);
909:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
910:       assertEquals(56, Node.CHANGE_TIME);
911:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
912:       assertEquals(47, Node.IS_DISPATCHER);
913:       assertEquals(2, Node.POST_FLAG);
914:       assertEquals(53, Node.INPUT_ID);
915:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
916:       assertEquals(32, Node.INCRDECR_PROP);
917:       assertEquals(1, Node.DECR_FLAG);
918:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
919:       assertEquals(55, Node.INFERRED_FUNCTION);
920:       assertEquals(12, Node.COLUMN_BITS);
921:       assertEquals(36, Node.QUOTED_PROP);
922:       assertEquals(4095, Node.COLUMN_MASK);
923:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
924:       assertEquals(37, Node.OPT_ARG_NAME);
925:       assertEquals(48, Node.DIRECTIVES);
926:       assertEquals(49, Node.DIRECT_EVAL);
927:       assertEquals(50, Node.FREE_CALL);
928:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
929:       assertEquals(40, Node.ORIGINALNAME_PROP);
930:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
931:       assertEquals(57, Node.REFLECTED_OBJECT);
932:       assertEquals(8, Node.FLAG_NO_THROWS);
933:       assertEquals(52, Node.LENGTH);
934:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
935:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
936:       assertEquals(15, Node.NO_SIDE_EFFECTS);
937:       assertEquals(39, Node.EMPTY_BLOCK);
938:       assertEquals(57, Node.LAST_PROP);
939:       assertEquals(51, Node.STATIC_SOURCE_FILE);
940:       assertEquals(30, Node.VAR_ARGS_NAME);
941:       assertEquals(46, Node.IS_NAMESPACE);
942:       assertEquals(54, Node.SLASH_V);
943:       assertEquals(43, Node.IS_CONSTANT_NAME);
944:       assertEquals(48, Node.DIRECTIVES);
945:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
946:       assertEquals(39, Node.EMPTY_BLOCK);
947:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
948:       assertEquals(55, Node.INFERRED_FUNCTION);
949:       assertEquals(57, Node.REFLECTED_OBJECT);
950:       assertEquals(50, Node.FREE_CALL);
951:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
952:       assertEquals(52, Node.LENGTH);
953:       assertEquals(8, Node.FLAG_NO_THROWS);
954:       assertEquals(54, Node.SLASH_V);
955:       assertEquals(53, Node.INPUT_ID);
956:       assertEquals(15, Node.NO_SIDE_EFFECTS);
957:       assertEquals(43, Node.IS_CONSTANT_NAME);
958:       assertEquals(57, Node.LAST_PROP);
959:       assertEquals(40, Node.ORIGINALNAME_PROP);
960:       assertEquals(30, Node.VAR_ARGS_NAME);
961:       assertEquals(37, Node.OPT_ARG_NAME);
962:       assertEquals(2, Node.POST_FLAG);
963:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
964:       assertEquals(47, Node.IS_DISPATCHER);
965:       assertEquals(32, Node.INCRDECR_PROP);
966:       assertEquals(46, Node.IS_NAMESPACE);
967:       assertEquals(56, Node.CHANGE_TIME);
968:       assertEquals(1, Node.DECR_FLAG);
969:       assertEquals(51, Node.STATIC_SOURCE_FILE);
970:       assertEquals(29, Node.JSDOC_INFO_PROP);
971:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
972:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
973:       assertEquals(36, Node.QUOTED_PROP);
974:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
975:       assertEquals(49, Node.DIRECT_EVAL);
976:       assertEquals(12, Node.COLUMN_BITS);
977:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
978:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
979:       assertEquals(4095, Node.COLUMN_MASK);
980:       
981:       boolean boolean2 = node0.getBooleanProp(53);
982:       assertFalse(node0.equals((Object)node1));
983:       assertFalse(node0.equals((Object)node2));
984:       assertTrue(boolean2 == boolean1);
985:       assertTrue(boolean2 == boolean0);
986:       assertSame(node0, node3);
987:       assertNotSame(node0, node1);
988:       assertFalse(node0.isWhile());
989:       assertFalse(node0.isDo());
990:       assertFalse(node0.isBlock());
991:       assertFalse(node0.isAssignAdd());
992:       assertFalse(node0.isNew());
993:       assertTrue(node0.isString());
994:       assertFalse(node0.isOr());
995:       assertFalse(node0.isAdd());
996:       assertFalse(node0.hasChildren());
997:       assertFalse(node0.isTypeOf());
998:       assertFalse(node0.isDec());
999:       assertFalse(node0.isName());
1000:       assertFalse(node0.isAssign());
1001:       assertFalse(node0.isNull());
1002:       assertFalse(node0.isReturn());
1003:       assertFalse(node0.isExprResult());
1004:       assertFalse(node0.isCall());
1005:       assertFalse(node0.hasMoreThanOneChild());
1006:       assertEquals(36, node0.getLineno());
1007:       assertFalse(node0.isGetElem());
1008:       assertFalse(node0.isCatch());
1009:       assertFalse(node0.isWith());
1010:       assertFalse(node0.isDefaultCase());
1011:       assertFalse(node0.isRegExp());
1012:       assertFalse(node0.isTrue());
1013:       assertFalse(node0.hasOneChild());
1014:       assertFalse(node0.isTry());
1015:       assertFalse(node0.isScript());
1016:       assertFalse(node0.isEmpty());
1017:       assertFalse(node0.isNumber());
1018:       assertFalse(node0.isLabelName());
1019:       assertFalse(node0.isGetterDef());
1020:       assertFalse(node0.isParamList());
1021:       assertFalse(node0.isStringKey());
1022:       assertFalse(node0.isVar());
1023:       assertFalse(node0.isLabel());
1024:       assertFalse(node0.isArrayLit());
1025:       assertEquals(0, node0.getChildCount());
1026:       assertFalse(node0.isCase());
1027:       assertFalse(node0.isSwitch());
1028:       assertFalse(node0.isIn());
1029:       assertEquals(147493, node0.getSourcePosition());
1030:       assertFalse(node0.isInc());
1031:       assertFalse(node0.isBreak());
1032:       assertFalse(node0.isIf());
1033:       assertFalse(node0.isDelProp());
1034:       assertFalse(node0.isThis());
1035:       assertFalse(node0.isComma());
1036:       assertFalse(node0.isHook());
1037:       assertFalse(node0.isFor());
1038:       assertFalse(node0.isNE());
1039:       assertFalse(node0.isVoid());
1040:       assertFalse(node0.isInstanceOf());
1041:       assertEquals(37, node0.getCharno());
1042:       assertFalse(node0.isNot());
1043:       assertFalse(node0.isDebugger());
1044:       assertFalse(node0.isAnd());
1045:       assertEquals(40, node0.getType());
1046:       assertFalse(node0.isSetterDef());
1047:       assertFalse(node0.isObjectLit());
1048:       assertFalse(node0.isGetProp());
1049:       assertFalse(node0.isFalse());
1050:       assertFalse(node0.isThrow());
1051:       assertFalse(node0.isFunction());
1052:       assertFalse(node0.isContinue());
1053:       assertFalse(node0.isCast());
1054:       assertFalse(boolean2);
1055:       assertEquals(8, Node.FLAG_NO_THROWS);
1056:       assertEquals(39, Node.EMPTY_BLOCK);
1057:       assertEquals(48, Node.DIRECTIVES);
1058:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1059:       assertEquals(55, Node.INFERRED_FUNCTION);
1060:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1061:       assertEquals(4095, Node.COLUMN_MASK);
1062:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1063:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1064:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1065:       assertEquals(36, Node.QUOTED_PROP);
1066:       assertEquals(52, Node.LENGTH);
1067:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1068:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1069:       assertEquals(53, Node.INPUT_ID);
1070:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1071:       assertEquals(49, Node.DIRECT_EVAL);
1072:       assertEquals(56, Node.CHANGE_TIME);
1073:       assertEquals(57, Node.REFLECTED_OBJECT);
1074:       assertEquals(37, Node.OPT_ARG_NAME);
1075:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1076:       assertEquals(2, Node.POST_FLAG);
1077:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1078:       assertEquals(29, Node.JSDOC_INFO_PROP);
1079:       assertEquals(30, Node.VAR_ARGS_NAME);
1080:       assertEquals(1, Node.DECR_FLAG);
1081:       assertEquals(32, Node.INCRDECR_PROP);
1082:       assertEquals(57, Node.LAST_PROP);
1083:       assertEquals(47, Node.IS_DISPATCHER);
1084:       assertEquals(12, Node.COLUMN_BITS);
1085:       assertEquals(40, Node.ORIGINALNAME_PROP);
1086:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1087:       assertEquals(50, Node.FREE_CALL);
1088:       assertEquals(43, Node.IS_CONSTANT_NAME);
1089:       assertEquals(46, Node.IS_NAMESPACE);
1090:       assertEquals(54, Node.SLASH_V);
1091:       
1092:       boolean boolean3 = node0.isReturn();
1093:       assertFalse(node0.equals((Object)node1));
1094:       assertFalse(node0.equals((Object)node2));
1095:       assertTrue(boolean3 == boolean1);
1096:       assertTrue(boolean3 == boolean2);
1097:       assertTrue(boolean3 == boolean0);
1098:       assertSame(node0, node3);
1099:       assertNotSame(node0, node1);
1100:       assertFalse(node0.isWhile());
1101:       assertFalse(node0.isDo());
1102:       assertFalse(node0.isBlock());
1103:       assertFalse(node0.isAssignAdd());
1104:       assertFalse(node0.isNew());
1105:       assertTrue(node0.isString());
1106:       assertFalse(node0.isOr());
1107:       assertFalse(node0.isAdd());
1108:       assertFalse(node0.hasChildren());
1109:       assertFalse(node0.isTypeOf());
1110:       assertFalse(node0.isDec());
1111:       assertFalse(node0.isName());
1112:       assertFalse(node0.isAssign());
1113:       assertFalse(node0.isNull());
1114:       assertFalse(node0.isReturn());
1115:       assertFalse(node0.isExprResult());
1116:       assertFalse(node0.isCall());
1117:       assertFalse(node0.hasMoreThanOneChild());
1118:       assertEquals(36, node0.getLineno());
1119:       assertFalse(node0.isGetElem());
1120:       assertFalse(node0.isCatch());
1121:       assertFalse(node0.isWith());
1122:       assertFalse(node0.isDefaultCase());
1123:       assertFalse(node0.isRegExp());
1124:       assertFalse(node0.isTrue());
1125:       assertFalse(node0.hasOneChild());
1126:       assertFalse(node0.isTry());
1127:       assertFalse(node0.isScript());
1128:       assertFalse(node0.isEmpty());
1129:       assertFalse(node0.isNumber());
1130:       assertFalse(node0.isLabelName());
1131:       assertFalse(node0.isGetterDef());
1132:       assertFalse(node0.isParamList());
1133:       assertFalse(node0.isStringKey());
1134:       assertFalse(node0.isVar());
1135:       assertFalse(node0.isLabel());
1136:       assertFalse(node0.isArrayLit());
1137:       assertEquals(0, node0.getChildCount());
1138:       assertFalse(node0.isCase());
1139:       assertFalse(node0.isSwitch());
1140:       assertFalse(node0.isIn());
1141:       assertEquals(147493, node0.getSourcePosition());
1142:       assertFalse(node0.isInc());
1143:       assertFalse(node0.isBreak());
1144:       assertFalse(node0.isIf());
1145:       assertFalse(node0.isDelProp());
1146:       assertFalse(node0.isThis());
1147:       assertFalse(node0.isComma());
1148:       assertFalse(node0.isHook());
1149:       assertFalse(node0.isFor());
1150:       assertFalse(node0.isNE());
1151:       assertFalse(node0.isVoid());
1152:       assertFalse(node0.isInstanceOf());
1153:       assertEquals(37, node0.getCharno());
1154:       assertFalse(node0.isNot());
1155:       assertFalse(node0.isDebugger());
1156:       assertFalse(node0.isAnd());
1157:       assertEquals(40, node0.getType());
1158:       assertFalse(node0.isSetterDef());
1159:       assertFalse(node0.isObjectLit());
1160:       assertFalse(node0.isGetProp());
1161:       assertFalse(node0.isFalse());
1162:       assertFalse(node0.isThrow());
1163:       assertFalse(node0.isFunction());
1164:       assertFalse(node0.isContinue());
1165:       assertFalse(node0.isCast());
1166:       assertFalse(boolean3);
1167:       assertEquals(8, Node.FLAG_NO_THROWS);
1168:       assertEquals(39, Node.EMPTY_BLOCK);
1169:       assertEquals(48, Node.DIRECTIVES);
1170:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1171:       assertEquals(55, Node.INFERRED_FUNCTION);
1172:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1173:       assertEquals(4095, Node.COLUMN_MASK);
1174:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1175:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1176:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1177:       assertEquals(36, Node.QUOTED_PROP);
1178:       assertEquals(52, Node.LENGTH);
1179:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1180:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1181:       assertEquals(53, Node.INPUT_ID);
1182:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1183:       assertEquals(49, Node.DIRECT_EVAL);
1184:       assertEquals(56, Node.CHANGE_TIME);
1185:       assertEquals(57, Node.REFLECTED_OBJECT);
1186:       assertEquals(37, Node.OPT_ARG_NAME);
1187:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1188:       assertEquals(2, Node.POST_FLAG);
1189:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1190:       assertEquals(29, Node.JSDOC_INFO_PROP);
1191:       assertEquals(30, Node.VAR_ARGS_NAME);
1192:       assertEquals(1, Node.DECR_FLAG);
1193:       assertEquals(32, Node.INCRDECR_PROP);
1194:       assertEquals(57, Node.LAST_PROP);
1195:       assertEquals(47, Node.IS_DISPATCHER);
1196:       assertEquals(12, Node.COLUMN_BITS);
1197:       assertEquals(40, Node.ORIGINALNAME_PROP);
1198:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1199:       assertEquals(50, Node.FREE_CALL);
1200:       assertEquals(43, Node.IS_CONSTANT_NAME);
1201:       assertEquals(46, Node.IS_NAMESPACE);
1202:       assertEquals(54, Node.SLASH_V);
1203:       
1204:       Node node4 = new Node(471, node3, node3, node0, node1);
1205:       assertFalse(node0.equals((Object)node1));
1206:       assertFalse(node0.equals((Object)node2));
1207:       assertFalse(node1.equals((Object)node0));
1208:       assertFalse(node1.equals((Object)node2));
1209:       assertFalse(node1.equals((Object)node3));
1210:       assertFalse(node2.equals((Object)node0));
1211:       assertFalse(node2.equals((Object)node1));
1212:       assertFalse(node2.equals((Object)node3));
1213:       assertFalse(node3.equals((Object)node1));
1214:       assertFalse(node3.equals((Object)node2));
1215:       assertFalse(node4.equals((Object)node0));
1216:       assertFalse(node4.equals((Object)node2));
1217:       assertFalse(node4.equals((Object)node1));
1218:       assertFalse(node4.equals((Object)node3));
1219:       assertNotNull(node4);
1220:       assertFalse(node0.isWhile());
1221:       assertFalse(node0.isDo());
1222:       assertFalse(node0.isBlock());
1223:       assertFalse(node0.isAssignAdd());
1224:       assertFalse(node0.isNew());
1225:       assertTrue(node0.isString());
1226:       assertFalse(node0.isOr());
1227:       assertFalse(node0.isAdd());
1228:       assertFalse(node0.hasChildren());
1229:       assertFalse(node0.isTypeOf());
1230:       assertFalse(node0.isDec());
1231:       assertFalse(node0.isName());
1232:       assertFalse(node0.isAssign());
1233:       assertFalse(node0.isNull());
1234:       assertFalse(node0.isReturn());
1235:       assertFalse(node0.isExprResult());
1236:       assertFalse(node0.isCall());
1237:       assertFalse(node0.hasMoreThanOneChild());
1238:       assertEquals(36, node0.getLineno());
1239:       assertFalse(node0.isGetElem());
1240:       assertFalse(node0.isCatch());
1241:       assertFalse(node0.isWith());
1242:       assertFalse(node0.isDefaultCase());
1243:       assertFalse(node0.isRegExp());
1244:       assertFalse(node0.isTrue());
1245:       assertFalse(node0.hasOneChild());
1246:       assertFalse(node0.isTry());
1247:       assertFalse(node0.isScript());
1248:       assertFalse(node0.isEmpty());
1249:       assertFalse(node0.isNumber());
1250:       assertFalse(node0.isLabelName());
1251:       assertFalse(node0.isGetterDef());
1252:       assertFalse(node0.isParamList());
1253:       assertFalse(node0.isStringKey());
1254:       assertFalse(node0.isVar());
1255:       assertFalse(node0.isLabel());
1256:       assertFalse(node0.isArrayLit());
1257:       assertEquals(0, node0.getChildCount());
1258:       assertFalse(node0.isCase());
1259:       assertFalse(node0.isSwitch());
1260:       assertFalse(node0.isIn());
1261:       assertEquals(147493, node0.getSourcePosition());
1262:       assertFalse(node0.isInc());
1263:       assertFalse(node0.isBreak());
1264:       assertFalse(node0.isIf());
1265:       assertFalse(node0.isDelProp());
1266:       assertFalse(node0.isThis());
1267:       assertFalse(node0.isComma());
1268:       assertFalse(node0.isHook());
1269:       assertFalse(node0.isFor());
1270:       assertFalse(node0.isNE());
1271:       assertFalse(node0.isVoid());
1272:       assertFalse(node0.isInstanceOf());
1273:       assertEquals(37, node0.getCharno());
1274:       assertFalse(node0.isNot());
1275:       assertFalse(node0.isDebugger());
1276:       assertFalse(node0.isAnd());
1277:       assertEquals(40, node0.getType());
1278:       assertFalse(node0.isSetterDef());
1279:       assertFalse(node0.isObjectLit());
1280:       assertFalse(node0.isGetProp());
1281:       assertFalse(node0.isFalse());
1282:       assertFalse(node0.isThrow());
1283:       assertFalse(node0.isFunction());
1284:       assertFalse(node0.isContinue());
1285:       assertFalse(node0.isCast());
1286:       assertEquals(38, node1.getType());
1287:       assertFalse(node1.isWith());
1288:       assertFalse(node1.isNot());
1289:       assertFalse(node1.isExprResult());
1290:       assertFalse(node1.isObjectLit());
1291:       assertFalse(node1.isInstanceOf());
1292:       assertFalse(node1.isScript());
1293:       assertFalse(node1.hasOneChild());
1294:       assertFalse(node1.isThis());
1295:       assertFalse(node1.isComma());
1296:       assertEquals((-1), node1.getSourcePosition());
1297:       assertFalse(node1.isNumber());
1298:       assertFalse(node1.isFalse());
1299:       assertFalse(node1.isLabelName());
1300:       assertFalse(node1.isGetProp());
1301:       assertFalse(node1.isCast());
1302:       assertFalse(node1.isSwitch());
1303:       assertEquals((-1), node1.getCharno());
1304:       assertFalse(node1.isAnd());
1305:       assertFalse(node1.isCase());
1306:       assertFalse(node1.isInc());
1307:       assertFalse(node1.hasMoreThanOneChild());
1308:       assertFalse(node1.isContinue());
1309:       assertFalse(node1.isHook());
1310:       assertFalse(node1.isBlock());
1311:       assertFalse(node1.isThrow());
1312:       assertFalse(node1.isIf());
1313:       assertFalse(node1.isSetterDef());
1314:       assertEquals((-1), node1.getLineno());
1315:       assertFalse(node1.isIn());
1316:       assertTrue(node1.isName());
1317:       assertFalse(node1.isNE());
1318:       assertFalse(node1.isDefaultCase());
1319:       assertFalse(node1.isRegExp());
1320:       assertFalse(node1.isFunction());
1321:       assertFalse(node1.isCatch());
1322:       assertFalse(node1.isTry());
1323:       assertEquals(0, node1.getChildCount());
1324:       assertFalse(node1.isFor());
1325:       assertFalse(node1.isGetterDef());
1326:       assertFalse(node1.isArrayLit());
1327:       assertFalse(node1.isParamList());
1328:       assertFalse(node1.isDebugger());
1329:       assertFalse(node1.isStringKey());
1330:       assertFalse(node1.isWhile());
1331:       assertFalse(node1.isString());
1332:       assertFalse(node1.isDo());
1333:       assertFalse(node1.isAdd());
1334:       assertFalse(node1.isReturn());
1335:       assertFalse(node1.isAssignAdd());
1336:       assertFalse(node1.isLabel());
1337:       assertFalse(node1.isNew());
1338:       assertFalse(node1.isVar());
1339:       assertFalse(node1.hasChildren());
1340:       assertFalse(node1.isBreak());
1341:       assertFalse(node1.isTypeOf());
1342:       assertFalse(node1.isDec());
1343:       assertFalse(node1.isAssign());
1344:       assertFalse(node1.isDelProp());
1345:       assertFalse(node1.isCall());
1346:       assertFalse(node1.isGetElem());
1347:       assertFalse(node1.isEmpty());
1348:       assertFalse(node1.isOr());
1349:       assertFalse(node1.isVoid());
1350:       assertFalse(node1.isTrue());
1351:       assertFalse(node1.isNull());
1352:       assertFalse(node2.isCatch());
1353:       assertFalse(node2.isNull());
1354:       assertFalse(node2.isSetterDef());
1355:       assertFalse(node2.isParamList());
1356:       assertFalse(node2.isTrue());
1357:       assertFalse(node2.isDebugger());
1358:       assertFalse(node2.isCall());
1359:       assertFalse(node2.isName());
1360:       assertFalse(node2.isDelProp());
1361:       assertFalse(node2.isTry());
1362:       assertFalse(node2.isVoid());
1363:       assertFalse(node2.isRegExp());
1364:       assertFalse(node2.isWhile());
1365:       assertFalse(node2.isBlock());
1366:       assertFalse(node2.isFor());
1367:       assertEquals(39, node2.getType());
1368:       assertFalse(node2.hasMoreThanOneChild());
1369:       assertFalse(node2.isIn());
1370:       assertFalse(node2.isReturn());
1371:       assertFalse(node2.isContinue());
1372:       assertTrue(node2.isNumber());
1373:       assertFalse(node2.isIf());
1374:       assertFalse(node2.isInc());
1375:       assertFalse(node2.isString());
1376:       assertFalse(node2.isNE());
1377:       assertEquals(147493, node2.getSourcePosition());
1378:       assertFalse(node2.isCast());
1379:       assertFalse(node2.isThrow());
1380:       assertFalse(node2.isFalse());
1381:       assertFalse(node2.isFunction());
1382:       assertFalse(node2.isAnd());
1383:       assertFalse(node2.isInstanceOf());
1384:       assertFalse(node2.isGetProp());
1385:       assertEquals(37, node2.getCharno());
1386:       assertFalse(node2.isScript());
1387:       assertFalse(node2.isObjectLit());
1388:       assertFalse(node2.isNot());
1389:       assertFalse(node2.hasOneChild());
1390:       assertFalse(node2.isHook());
1391:       assertFalse(node2.isGetElem());
1392:       assertFalse(node2.isTypeOf());
1393:       assertFalse(node2.hasChildren());
1394:       assertFalse(node2.isBreak());
1395:       assertEquals(36, node2.getLineno());
1396:       assertFalse(node2.isExprResult());
1397:       assertFalse(node2.isThis());
1398:       assertFalse(node2.isWith());
1399:       assertFalse(node2.isComma());
1400:       assertFalse(node2.isAssign());
1401:       assertFalse(node2.isDec());
1402:       assertFalse(node2.isCase());
1403:       assertFalse(node2.isAssignAdd());
1404:       assertFalse(node2.isDo());
1405:       assertFalse(node2.isSwitch());
1406:       assertFalse(node2.isEmpty());
1407:       assertFalse(node2.isGetterDef());
1408:       assertFalse(node2.isOr());
1409:       assertFalse(node2.isArrayLit());
1410:       assertFalse(node2.isVar());
1411:       assertFalse(node2.isStringKey());
1412:       assertFalse(node2.isAdd());
1413:       assertFalse(node2.isNew());
1414:       assertFalse(node2.isLabelName());
1415:       assertFalse(node2.isDefaultCase());
1416:       assertFalse(node2.isLabel());
1417:       assertEquals(0, node2.getChildCount());
1418:       assertFalse(node3.isWhile());
1419:       assertFalse(node3.isDo());
1420:       assertFalse(node3.hasMoreThanOneChild());
1421:       assertFalse(node3.isContinue());
1422:       assertFalse(node3.isOr());
1423:       assertFalse(node3.isStringKey());
1424:       assertFalse(node3.isName());
1425:       assertFalse(node3.isLabelName());
1426:       assertFalse(node3.isNull());
1427:       assertFalse(node3.isSetterDef());
1428:       assertFalse(node3.isCast());
1429:       assertEquals(0, node3.getChildCount());
1430:       assertFalse(node3.isAdd());
1431:       assertFalse(node3.isNew());
1432:       assertFalse(node3.isLabel());
1433:       assertFalse(node3.isVar());
1434:       assertFalse(node3.isAssignAdd());
1435:       assertFalse(node3.isNot());
1436:       assertEquals(40, node3.getType());
1437:       assertFalse(node3.isExprResult());
1438:       assertFalse(node3.isFunction());
1439:       assertFalse(node3.isObjectLit());
1440:       assertFalse(node3.isDebugger());
1441:       assertFalse(node3.isTrue());
1442:       assertFalse(node3.isAnd());
1443:       assertFalse(node3.isVoid());
1444:       assertFalse(node3.isDelProp());
1445:       assertFalse(node3.isAssign());
1446:       assertFalse(node3.isDec());
1447:       assertFalse(node3.isGetElem());
1448:       assertFalse(node3.hasChildren());
1449:       assertFalse(node3.isBreak());
1450:       assertFalse(node3.isCall());
1451:       assertFalse(node3.isComma());
1452:       assertFalse(node3.isTypeOf());
1453:       assertFalse(node3.isReturn());
1454:       assertFalse(node3.isGetProp());
1455:       assertFalse(node3.isCase());
1456:       assertFalse(node3.isInc());
1457:       assertFalse(node3.isIn());
1458:       assertEquals(147493, node3.getSourcePosition());
1459:       assertFalse(node3.isNE());
1460:       assertFalse(node3.isSwitch());
1461:       assertFalse(node3.isIf());
1462:       assertFalse(node3.isEmpty());
1463:       assertFalse(node3.isFalse());
1464:       assertFalse(node3.isThrow());
1465:       assertFalse(node3.isDefaultCase());
1466:       assertEquals(37, node3.getCharno());
1467:       assertFalse(node3.isScript());
1468:       assertFalse(node3.isCatch());
1469:       assertFalse(node3.isInstanceOf());
1470:       assertFalse(node3.isRegExp());
1471:       assertFalse(node3.isWith());
1472:       assertFalse(node3.isArrayLit());
1473:       assertFalse(node3.isParamList());
1474:       assertFalse(node3.isGetterDef());
1475:       assertFalse(node3.isFor());
1476:       assertFalse(node3.isNumber());
1477:       assertEquals(36, node3.getLineno());
1478:       assertFalse(node3.isTry());
1479:       assertFalse(node3.hasOneChild());
1480:       assertFalse(node3.isHook());
1481:       assertFalse(node3.isBlock());
1482:       assertFalse(node3.isThis());
1483:       assertTrue(node3.isString());
1484:       assertFalse(node4.isHook());
1485:       assertEquals((-1), node4.getCharno());
1486:       assertFalse(node4.isInc());
1487:       assertFalse(node4.isFalse());
1488:       assertFalse(node4.isString());
1489:       assertFalse(node4.isCase());
1490:       assertFalse(node4.isThis());
1491:       assertFalse(node4.isThrow());
1492:       assertFalse(node4.isGetProp());
1493:       assertEquals(2, node4.getChildCount());
1494:       assertFalse(node4.isObjectLit());
1495:       assertFalse(node4.isGetterDef());
1496:       assertFalse(node4.isNot());
1497:       assertFalse(node4.isSwitch());
1498:       assertFalse(node4.isAnd());
1499:       assertFalse(node4.isArrayLit());
1500:       assertFalse(node4.isDebugger());
1501:       assertFalse(node4.isExprResult());
1502:       assertFalse(node4.isAssign());
1503:       assertFalse(node4.isEmpty());
1504:       assertFalse(node4.isDec());
1505:       assertFalse(node4.isDefaultCase());
1506:       assertFalse(node4.isAssignAdd());
1507:       assertFalse(node4.isReturn());
1508:       assertFalse(node4.isOr());
1509:       assertFalse(node4.isComma());
1510:       assertFalse(node4.isTypeOf());
1511:       assertFalse(node4.isDelProp());
1512:       assertFalse(node4.isGetElem());
1513:       assertTrue(node4.hasMoreThanOneChild());
1514:       assertFalse(node4.isBreak());
1515:       assertEquals(471, node4.getType());
1516:       assertFalse(node4.isTrue());
1517:       assertFalse(node4.isNull());
1518:       assertFalse(node4.isVoid());
1519:       assertFalse(node4.isName());
1520:       assertFalse(node4.isAdd());
1521:       assertFalse(node4.isBlock());
1522:       assertFalse(node4.isNew());
1523:       assertFalse(node4.isCall());
1524:       assertFalse(node4.isWhile());
1525:       assertFalse(node4.isDo());
1526:       assertFalse(node4.isVar());
1527:       assertFalse(node4.isLabel());
1528:       assertFalse(node4.isNumber());
1529:       assertFalse(node4.isContinue());
1530:       assertFalse(node4.isLabelName());
1531:       assertEquals((-1), node4.getSourcePosition());
1532:       assertFalse(node4.isParamList());
1533:       assertFalse(node4.isStringKey());
1534:       assertFalse(node4.isTry());
1535:       assertFalse(node4.hasOneChild());
1536:       assertFalse(node4.isFunction());
1537:       assertFalse(node4.isCast());
1538:       assertFalse(node4.isScript());
1539:       assertFalse(node4.isRegExp());
1540:       assertFalse(node4.isWith());
1541:       assertFalse(node4.isFor());
1542:       assertEquals((-1), node4.getLineno());
1543:       assertTrue(node4.hasChildren());
1544:       assertFalse(node4.isCatch());
1545:       assertFalse(node4.isSetterDef());
1546:       assertFalse(node4.isInstanceOf());
1547:       assertFalse(node4.isIn());
1548:       assertFalse(node4.isNE());
1549:       assertFalse(node4.isIf());
1550:       assertEquals(8, Node.FLAG_NO_THROWS);
1551:       assertEquals(39, Node.EMPTY_BLOCK);
1552:       assertEquals(48, Node.DIRECTIVES);
1553:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1554:       assertEquals(55, Node.INFERRED_FUNCTION);
1555:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1556:       assertEquals(4095, Node.COLUMN_MASK);
1557:       
1558:       String string0 = node2.toString(false, false, false);
1559:       assertFalse(node2.equals((Object)node0));
1560:       assertFalse(node2.equals((Object)node1));
1561:       assertFalse(node2.equals((Object)node4));
1562:       assertFalse(node2.equals((Object)node3));
1563:       assertNotNull(string0);
1564:       assertFalse(node2.isCatch());
1565:       assertFalse(node2.isNull());
1566:       assertFalse(node2.isSetterDef());
1567:       assertFalse(node2.isParamList());
1568:       assertFalse(node2.isTrue());
1569:       assertFalse(node2.isDebugger());
1570:       assertFalse(node2.isCall());
1571:       assertFalse(node2.isName());
1572:       assertFalse(node2.isDelProp());
1573:       assertFalse(node2.isTry());
1574:       assertFalse(node2.isVoid());
1575:       assertFalse(node2.isRegExp());
1576:       assertFalse(node2.isWhile());
1577:       assertFalse(node2.isBlock());
1578:       assertFalse(node2.isFor());
1579:       assertEquals(39, node2.getType());
1580:       assertFalse(node2.hasMoreThanOneChild());
1581:       assertFalse(node2.isIn());
1582:       assertFalse(node2.isReturn());
1583:       assertFalse(node2.isContinue());
1584:       assertTrue(node2.isNumber());
1585:       assertFalse(node2.isIf());
1586:       assertFalse(node2.isInc());
1587:       assertFalse(node2.isString());
1588:       assertFalse(node2.isNE());
1589:       assertEquals(147493, node2.getSourcePosition());
1590:       assertFalse(node2.isCast());
1591:       assertFalse(node2.isThrow());
1592:       assertFalse(node2.isFalse());
1593:       assertFalse(node2.isFunction());
1594:       assertFalse(node2.isAnd());
1595:       assertFalse(node2.isInstanceOf());
1596:       assertFalse(node2.isGetProp());
1597:       assertEquals(37, node2.getCharno());
1598:       assertFalse(node2.isScript());
1599:       assertFalse(node2.isObjectLit());
1600:       assertFalse(node2.isNot());
1601:       assertFalse(node2.hasOneChild());
1602:       assertFalse(node2.isHook());
1603:       assertFalse(node2.isGetElem());
1604:       assertFalse(node2.isTypeOf());
1605:       assertFalse(node2.hasChildren());
1606:       assertFalse(node2.isBreak());
1607:       assertEquals(36, node2.getLineno());
1608:       assertFalse(node2.isExprResult());
1609:       assertFalse(node2.isThis());
1610:       assertFalse(node2.isWith());
1611:       assertFalse(node2.isComma());
1612:       assertFalse(node2.isAssign());
1613:       assertFalse(node2.isDec());
1614:       assertFalse(node2.isCase());
1615:       assertFalse(node2.isAssignAdd());
1616:       assertFalse(node2.isDo());
1617:       assertFalse(node2.isSwitch());
1618:       assertFalse(node2.isEmpty());
1619:       assertFalse(node2.isGetterDef());
1620:       assertFalse(node2.isOr());
1621:       assertFalse(node2.isArrayLit());
1622:       assertFalse(node2.isVar());
1623:       assertFalse(node2.isStringKey());
1624:       assertFalse(node2.isAdd());
1625:       assertFalse(node2.isNew());
1626:       assertFalse(node2.isLabelName());
1627:       assertFalse(node2.isDefaultCase());
1628:       assertFalse(node2.isLabel());
1629:       assertEquals(0, node2.getChildCount());
1630:       assertEquals("NUMBER 12.0", string0);
1631:       
1632:       boolean boolean4 = node3.isTrue();
1633:       assertFalse(node0.equals((Object)node4));
1634:       assertFalse(node0.equals((Object)node1));
1635:       assertFalse(node0.equals((Object)node2));
1636:       assertFalse(node2.equals((Object)node0));
1637:       assertFalse(node2.equals((Object)node1));
1638:       assertFalse(node2.equals((Object)node4));
1639:       assertFalse(node2.equals((Object)node3));
1640:       assertFalse(node3.equals((Object)node4));
1641:       assertFalse(node3.equals((Object)node1));
1642:       assertFalse(node3.equals((Object)node2));
1643:       assertTrue(boolean4 == boolean0);
1644:       assertTrue(boolean4 == boolean2);
1645:       assertTrue(boolean4 == boolean3);
1646:       assertTrue(boolean4 == boolean1);
1647:       assertSame(node0, node3);
1648:       assertNotSame(node0, node1);
1649:       assertSame(node3, node0);
1650:       assertNotSame(node3, node1);
1651:       assertFalse(node0.isWhile());
1652:       assertFalse(node0.isDo());
1653:       assertFalse(node0.isBlock());
1654:       assertFalse(node0.isAssignAdd());
1655:       assertFalse(node0.isNew());
1656:       assertTrue(node0.isString());
1657:       assertFalse(node0.isOr());
1658:       assertFalse(node0.isAdd());
1659:       assertFalse(node0.hasChildren());
1660:       assertFalse(node0.isTypeOf());
1661:       assertFalse(node0.isDec());
1662:       assertFalse(node0.isName());
1663:       assertFalse(node0.isAssign());
1664:       assertFalse(node0.isNull());
1665:       assertFalse(node0.isReturn());
1666:       assertFalse(node0.isExprResult());
1667:       assertFalse(node0.isCall());
1668:       assertFalse(node0.hasMoreThanOneChild());
1669:       assertEquals(36, node0.getLineno());
1670:       assertFalse(node0.isGetElem());
1671:       assertFalse(node0.isCatch());
1672:       assertFalse(node0.isWith());
1673:       assertFalse(node0.isDefaultCase());
1674:       assertFalse(node0.isRegExp());
1675:       assertFalse(node0.isTrue());
1676:       assertFalse(node0.hasOneChild());
1677:       assertFalse(node0.isTry());
1678:       assertFalse(node0.isScript());
1679:       assertFalse(node0.isEmpty());
1680:       assertFalse(node0.isNumber());
1681:       assertFalse(node0.isLabelName());
1682:       assertFalse(node0.isGetterDef());
1683:       assertFalse(node0.isParamList());
1684:       assertFalse(node0.isStringKey());
1685:       assertFalse(node0.isVar());
1686:       assertFalse(node0.isLabel());
1687:       assertFalse(node0.isArrayLit());
1688:       assertEquals(0, node0.getChildCount());
1689:       assertFalse(node0.isCase());
1690:       assertFalse(node0.isSwitch());
1691:       assertFalse(node0.isIn());
1692:       assertEquals(147493, node0.getSourcePosition());
1693:       assertFalse(node0.isInc());
1694:       assertFalse(node0.isBreak());
1695:       assertFalse(node0.isIf());
1696:       assertFalse(node0.isDelProp());
1697:       assertFalse(node0.isThis());
1698:       assertFalse(node0.isComma());
1699:       assertFalse(node0.isHook());
1700:       assertFalse(node0.isFor());
1701:       assertFalse(node0.isNE());
1702:       assertFalse(node0.isVoid());
1703:       assertFalse(node0.isInstanceOf());
1704:       assertEquals(37, node0.getCharno());
1705:       assertFalse(node0.isNot());
1706:       assertFalse(node0.isDebugger());
1707:       assertFalse(node0.isAnd());
1708:       assertEquals(40, node0.getType());
1709:       assertFalse(node0.isSetterDef());
1710:       assertFalse(node0.isObjectLit());
1711:       assertFalse(node0.isGetProp());
1712:       assertFalse(node0.isFalse());
1713:       assertFalse(node0.isThrow());
1714:       assertFalse(node0.isFunction());
1715:       assertFalse(node0.isContinue());
1716:       assertFalse(node0.isCast());
1717:       assertFalse(node2.isCatch());
1718:       assertFalse(node2.isNull());
1719:       assertFalse(node2.isSetterDef());
1720:       assertFalse(node2.isParamList());
1721:       assertFalse(node2.isTrue());
1722:       assertFalse(node2.isDebugger());
1723:       assertFalse(node2.isCall());
1724:       assertFalse(node2.isName());
1725:       assertFalse(node2.isDelProp());
1726:       assertFalse(node2.isTry());
1727:       assertFalse(node2.isVoid());
1728:       assertFalse(node2.isRegExp());
1729:       assertFalse(node2.isWhile());
1730:       assertFalse(node2.isBlock());
1731:       assertFalse(node2.isFor());
1732:       assertEquals(39, node2.getType());
1733:       assertFalse(node2.hasMoreThanOneChild());
1734:       assertFalse(node2.isIn());
1735:       assertFalse(node2.isReturn());
1736:       assertFalse(node2.isContinue());
1737:       assertTrue(node2.isNumber());
1738:       assertFalse(node2.isIf());
1739:       assertFalse(node2.isInc());
1740:       assertFalse(node2.isString());
1741:       assertFalse(node2.isNE());
1742:       assertEquals(147493, node2.getSourcePosition());
1743:       assertFalse(node2.isCast());
1744:       assertFalse(node2.isThrow());
1745:       assertFalse(node2.isFalse());
1746:       assertFalse(node2.isFunction());
1747:       assertFalse(node2.isAnd());
1748:       assertFalse(node2.isInstanceOf());
1749:       assertFalse(node2.isGetProp());
1750:       assertEquals(37, node2.getCharno());
1751:       assertFalse(node2.isScript());
1752:       assertFalse(node2.isObjectLit());
1753:       assertFalse(node2.isNot());
1754:       assertFalse(node2.hasOneChild());
1755:       assertFalse(node2.isHook());
1756:       assertFalse(node2.isGetElem());
1757:       assertFalse(node2.isTypeOf());
1758:       assertFalse(node2.hasChildren());
1759:       assertFalse(node2.isBreak());
1760:       assertEquals(36, node2.getLineno());
1761:       assertFalse(node2.isExprResult());
1762:       assertFalse(node2.isThis());
1763:       assertFalse(node2.isWith());
1764:       assertFalse(node2.isComma());
1765:       assertFalse(node2.isAssign());
1766:       assertFalse(node2.isDec());
1767:       assertFalse(node2.isCase());
1768:       assertFalse(node2.isAssignAdd());
1769:       assertFalse(node2.isDo());
1770:       assertFalse(node2.isSwitch());
1771:       assertFalse(node2.isEmpty());
1772:       assertFalse(node2.isGetterDef());
1773:       assertFalse(node2.isOr());
1774:       assertFalse(node2.isArrayLit());
1775:       assertFalse(node2.isVar());
1776:       assertFalse(node2.isStringKey());
1777:       assertFalse(node2.isAdd());
1778:       assertFalse(node2.isNew());
1779:       assertFalse(node2.isLabelName());
1780:       assertFalse(node2.isDefaultCase());
1781:       assertFalse(node2.isLabel());
1782:       assertEquals(0, node2.getChildCount());
1783:       assertFalse(node3.isWhile());
1784:       assertFalse(node3.isDo());
1785:       assertFalse(node3.hasMoreThanOneChild());
1786:       assertFalse(node3.isContinue());
1787:       assertFalse(node3.isOr());
1788:       assertFalse(node3.isStringKey());
1789:       assertFalse(node3.isName());
1790:       assertFalse(node3.isLabelName());
1791:       assertFalse(node3.isNull());
1792:       assertFalse(node3.isSetterDef());
1793:       assertFalse(node3.isCast());
1794:       assertEquals(0, node3.getChildCount());
1795:       assertFalse(node3.isAdd());
1796:       assertFalse(node3.isNew());
1797:       assertFalse(node3.isLabel());
1798:       assertFalse(node3.isVar());
1799:       assertFalse(node3.isAssignAdd());
1800:       assertFalse(node3.isNot());
1801:       assertEquals(40, node3.getType());
1802:       assertFalse(node3.isExprResult());
1803:       assertFalse(node3.isFunction());
1804:       assertFalse(node3.isObjectLit());
1805:       assertFalse(node3.isDebugger());
1806:       assertFalse(node3.isTrue());
1807:       assertFalse(node3.isAnd());
1808:       assertFalse(node3.isVoid());
1809:       assertFalse(node3.isDelProp());
1810:       assertFalse(node3.isAssign());
1811:       assertFalse(node3.isDec());
1812:       assertFalse(node3.isGetElem());
1813:       assertFalse(node3.hasChildren());
1814:       assertFalse(node3.isBreak());
1815:       assertFalse(node3.isCall());
1816:       assertFalse(node3.isComma());
1817:       assertFalse(node3.isTypeOf());
1818:       assertFalse(node3.isReturn());
1819:       assertFalse(node3.isGetProp());
1820:       assertFalse(node3.isCase());
1821:       assertFalse(node3.isInc());
1822:       assertFalse(node3.isIn());
1823:       assertEquals(147493, node3.getSourcePosition());
1824:       assertFalse(node3.isNE());
1825:       assertFalse(node3.isSwitch());
1826:       assertFalse(node3.isIf());
1827:       assertFalse(node3.isEmpty());
1828:       assertFalse(node3.isFalse());
1829:       assertFalse(node3.isThrow());
1830:       assertFalse(node3.isDefaultCase());
1831:       assertEquals(37, node3.getCharno());
1832:       assertFalse(node3.isScript());
1833:       assertFalse(node3.isCatch());
1834:       assertFalse(node3.isInstanceOf());
1835:       assertFalse(node3.isRegExp());
1836:       assertFalse(node3.isWith());
1837:       assertFalse(node3.isArrayLit());
1838:       assertFalse(node3.isParamList());
1839:       assertFalse(node3.isGetterDef());
1840:       assertFalse(node3.isFor());
1841:       assertFalse(node3.isNumber());
1842:       assertEquals(36, node3.getLineno());
1843:       assertFalse(node3.isTry());
1844:       assertFalse(node3.hasOneChild());
1845:       assertFalse(node3.isHook());
1846:       assertFalse(node3.isBlock());
1847:       assertFalse(node3.isThis());
1848:       assertTrue(node3.isString());
1849:       assertFalse(boolean4);
1850:       
1851:       Iterable<Node> iterable0 = node4.children();
1852:       assertFalse(node0.equals((Object)node4));
1853:       assertFalse(node0.equals((Object)node1));
1854:       assertFalse(node0.equals((Object)node2));
1855:       assertFalse(node1.equals((Object)node4));
1856:       assertFalse(node1.equals((Object)node0));
1857:       assertFalse(node1.equals((Object)node2));
1858:       assertFalse(node1.equals((Object)node3));
1859:       assertFalse(node2.equals((Object)node0));
1860:       assertFalse(node2.equals((Object)node1));
1861:       assertFalse(node2.equals((Object)node4));
1862:       assertFalse(node2.equals((Object)node3));
1863:       assertFalse(node3.equals((Object)node4));
1864:       assertFalse(node3.equals((Object)node1));
1865:       assertFalse(node3.equals((Object)node2));
1866:       assertFalse(node4.equals((Object)node0));
1867:       assertFalse(node4.equals((Object)node2));
1868:       assertFalse(node4.equals((Object)node1));
1869:       assertFalse(node4.equals((Object)node3));
1870:       assertSame(node0, node3);
1871:       assertNotSame(node0, node1);
1872:       assertNotSame(node1, node0);
1873:       assertNotSame(node1, node3);
1874:       assertSame(node3, node0);
1875:       assertNotSame(node3, node1);
1876:       assertNotNull(iterable0);
1877:       assertFalse(node0.isWhile());
1878:       assertFalse(node0.isDo());
1879:       assertFalse(node0.isBlock());
1880:       assertFalse(node0.isAssignAdd());
1881:       assertFalse(node0.isNew());
1882:       assertTrue(node0.isString());
1883:       assertFalse(node0.isOr());
1884:       assertFalse(node0.isAdd());
1885:       assertFalse(node0.hasChildren());
1886:       assertFalse(node0.isTypeOf());
1887:       assertFalse(node0.isDec());
1888:       assertFalse(node0.isName());
1889:       assertFalse(node0.isAssign());
1890:       assertFalse(node0.isNull());
1891:       assertFalse(node0.isReturn());
1892:       assertFalse(node0.isExprResult());
1893:       assertFalse(node0.isCall());
1894:       assertFalse(node0.hasMoreThanOneChild());
1895:       assertEquals(36, node0.getLineno());
1896:       assertFalse(node0.isGetElem());
1897:       assertFalse(node0.isCatch());
1898:       assertFalse(node0.isWith());
1899:       assertFalse(node0.isDefaultCase());
1900:       assertFalse(node0.isRegExp());
1901:       assertFalse(node0.isTrue());
1902:       assertFalse(node0.hasOneChild());
1903:       assertFalse(node0.isTry());
1904:       assertFalse(node0.isScript());
1905:       assertFalse(node0.isEmpty());
1906:       assertFalse(node0.isNumber());
1907:       assertFalse(node0.isLabelName());
1908:       assertFalse(node0.isGetterDef());
1909:       assertFalse(node0.isParamList());
1910:       assertFalse(node0.isStringKey());
1911:       assertFalse(node0.isVar());
1912:       assertFalse(node0.isLabel());
1913:       assertFalse(node0.isArrayLit());
1914:       assertEquals(0, node0.getChildCount());
1915:       assertFalse(node0.isCase());
1916:       assertFalse(node0.isSwitch());
1917:       assertFalse(node0.isIn());
1918:       assertEquals(147493, node0.getSourcePosition());
1919:       assertFalse(node0.isInc());
1920:       assertFalse(node0.isBreak());
1921:       assertFalse(node0.isIf());
1922:       assertFalse(node0.isDelProp());
1923:       assertFalse(node0.isThis());
1924:       assertFalse(node0.isComma());
1925:       assertFalse(node0.isHook());
1926:       assertFalse(node0.isFor());
1927:       assertFalse(node0.isNE());
1928:       assertFalse(node0.isVoid());
1929:       assertFalse(node0.isInstanceOf());
1930:       assertEquals(37, node0.getCharno());
1931:       assertFalse(node0.isNot());
1932:       assertFalse(node0.isDebugger());
1933:       assertFalse(node0.isAnd());
1934:       assertEquals(40, node0.getType());
1935:       assertFalse(node0.isSetterDef());
1936:       assertFalse(node0.isObjectLit());
1937:       assertFalse(node0.isGetProp());
1938:       assertFalse(node0.isFalse());
1939:       assertFalse(node0.isThrow());
1940:       assertFalse(node0.isFunction());
1941:       assertFalse(node0.isContinue());
1942:       assertFalse(node0.isCast());
1943:       assertEquals(38, node1.getType());
1944:       assertFalse(node1.isWith());
1945:       assertFalse(node1.isNot());
1946:       assertFalse(node1.isExprResult());
1947:       assertFalse(node1.isObjectLit());
1948:       assertFalse(node1.isInstanceOf());
1949:       assertFalse(node1.isScript());
1950:       assertFalse(node1.hasOneChild());
1951:       assertFalse(node1.isThis());
1952:       assertFalse(node1.isComma());
1953:       assertEquals((-1), node1.getSourcePosition());
1954:       assertFalse(node1.isNumber());
1955:       assertFalse(node1.isFalse());
1956:       assertFalse(node1.isLabelName());
1957:       assertFalse(node1.isGetProp());
1958:       assertFalse(node1.isCast());
1959:       assertFalse(node1.isSwitch());
1960:       assertEquals((-1), node1.getCharno());
1961:       assertFalse(node1.isAnd());
1962:       assertFalse(node1.isCase());
1963:       assertFalse(node1.isInc());
1964:       assertFalse(node1.hasMoreThanOneChild());
1965:       assertFalse(node1.isContinue());
1966:       assertFalse(node1.isHook());
1967:       assertFalse(node1.isBlock());
1968:       assertFalse(node1.isThrow());
1969:       assertFalse(node1.isIf());
1970:       assertFalse(node1.isSetterDef());
1971:       assertEquals((-1), node1.getLineno());
1972:       assertFalse(node1.isIn());
1973:       assertTrue(node1.isName());
1974:       assertFalse(node1.isNE());
1975:       assertFalse(node1.isDefaultCase());
1976:       assertFalse(node1.isRegExp());
1977:       assertFalse(node1.isFunction());
1978:       assertFalse(node1.isCatch());
1979:       assertFalse(node1.isTry());
1980:       assertEquals(0, node1.getChildCount());
1981:       assertFalse(node1.isFor());
1982:       assertFalse(node1.isGetterDef());
1983:       assertFalse(node1.isArrayLit());
1984:       assertFalse(node1.isParamList());
1985:       assertFalse(node1.isDebugger());
1986:       assertFalse(node1.isStringKey());
1987:       assertFalse(node1.isWhile());
1988:       assertFalse(node1.isString());
1989:       assertFalse(node1.isDo());
1990:       assertFalse(node1.isAdd());
1991:       assertFalse(node1.isReturn());
1992:       assertFalse(node1.isAssignAdd());
1993:       assertFalse(node1.isLabel());
1994:       assertFalse(node1.isNew());
1995:       assertFalse(node1.isVar());
1996:       assertFalse(node1.hasChildren());
1997:       assertFalse(node1.isBreak());
1998:       assertFalse(node1.isTypeOf());
1999:       assertFalse(node1.isDec());
2000:       assertFalse(node1.isAssign());
2001:       assertFalse(node1.isDelProp());
2002:       assertFalse(node1.isCall());
2003:       assertFalse(node1.isGetElem());
2004:       assertFalse(node1.isEmpty());
2005:       assertFalse(node1.isOr());
2006:       assertFalse(node1.isVoid());
2007:       assertFalse(node1.isTrue());
2008:       assertFalse(node1.isNull());
2009:       assertFalse(node2.isCatch());
2010:       assertFalse(node2.isNull());
2011:       assertFalse(node2.isSetterDef());
2012:       assertFalse(node2.isParamList());
2013:       assertFalse(node2.isTrue());
2014:       assertFalse(node2.isDebugger());
2015:       assertFalse(node2.isCall());
2016:       assertFalse(node2.isName());
2017:       assertFalse(node2.isDelProp());
2018:       assertFalse(node2.isTry());
2019:       assertFalse(node2.isVoid());
2020:       assertFalse(node2.isRegExp());
2021:       assertFalse(node2.isWhile());
2022:       assertFalse(node2.isBlock());
2023:       assertFalse(node2.isFor());
2024:       assertEquals(39, node2.getType());
2025:       assertFalse(node2.hasMoreThanOneChild());
2026:       assertFalse(node2.isIn());
2027:       assertFalse(node2.isReturn());
2028:       assertFalse(node2.isContinue());
2029:       assertTrue(node2.isNumber());
2030:       assertFalse(node2.isIf());
2031:       assertFalse(node2.isInc());
2032:       assertFalse(node2.isString());
2033:       assertFalse(node2.isNE());
2034:       assertEquals(147493, node2.getSourcePosition());
2035:       assertFalse(node2.isCast());
2036:       assertFalse(node2.isThrow());
2037:       assertFalse(node2.isFalse());
2038:       assertFalse(node2.isFunction());
2039:       assertFalse(node2.isAnd());
2040:       assertFalse(node2.isInstanceOf());
2041:       assertFalse(node2.isGetProp());
2042:       assertEquals(37, node2.getCharno());
2043:       assertFalse(node2.isScript());
2044:       assertFalse(node2.isObjectLit());
2045:       assertFalse(node2.isNot());
2046:       assertFalse(node2.hasOneChild());
2047:       assertFalse(node2.isHook());
2048:       assertFalse(node2.isGetElem());
2049:       assertFalse(node2.isTypeOf());
2050:       assertFalse(node2.hasChildren());
2051:       assertFalse(node2.isBreak());
2052:       assertEquals(36, node2.getLineno());
2053:       assertFalse(node2.isExprResult());
2054:       assertFalse(node2.isThis());
2055:       assertFalse(node2.isWith());
2056:       assertFalse(node2.isComma());
2057:       assertFalse(node2.isAssign());
2058:       assertFalse(node2.isDec());
2059:       assertFalse(node2.isCase());
2060:       assertFalse(node2.isAssignAdd());
2061:       assertFalse(node2.isDo());
2062:       assertFalse(node2.isSwitch());
2063:       assertFalse(node2.isEmpty());
2064:       assertFalse(node2.isGetterDef());
2065:       assertFalse(node2.isOr());
2066:       assertFalse(node2.isArrayLit());
2067:       assertFalse(node2.isVar());
2068:       assertFalse(node2.isStringKey());
2069:       assertFalse(node2.isAdd());
2070:       assertFalse(node2.isNew());
2071:       assertFalse(node2.isLabelName());
2072:       assertFalse(node2.isDefaultCase());
2073:       assertFalse(node2.isLabel());
2074:       assertEquals(0, node2.getChildCount());
2075:       assertFalse(node3.isWhile());
2076:       assertFalse(node3.isDo());
2077:       assertFalse(node3.hasMoreThanOneChild());
2078:       assertFalse(node3.isContinue());
2079:       assertFalse(node3.isOr());
2080:       assertFalse(node3.isStringKey());
2081:       assertFalse(node3.isName());
2082:       assertFalse(node3.isLabelName());
2083:       assertFalse(node3.isNull());
2084:       assertFalse(node3.isSetterDef());
2085:       assertFalse(node3.isCast());
2086:       assertEquals(0, node3.getChildCount());
2087:       assertFalse(node3.isAdd());
2088:       assertFalse(node3.isNew());
2089:       assertFalse(node3.isLabel());
2090:       assertFalse(node3.isVar());
2091:       assertFalse(node3.isAssignAdd());
2092:       assertFalse(node3.isNot());
2093:       assertEquals(40, node3.getType());
2094:       assertFalse(node3.isExprResult());
2095:       assertFalse(node3.isFunction());
2096:       assertFalse(node3.isObjectLit());
2097:       assertFalse(node3.isDebugger());
2098:       assertFalse(node3.isTrue());
2099:       assertFalse(node3.isAnd());
2100:       assertFalse(node3.isVoid());
2101:       assertFalse(node3.isDelProp());
2102:       assertFalse(node3.isAssign());
2103:       assertFalse(node3.isDec());
2104:       assertFalse(node3.isGetElem());
2105:       assertFalse(node3.hasChildren());
2106:       assertFalse(node3.isBreak());
2107:       assertFalse(node3.isCall());
2108:       assertFalse(node3.isComma());
2109:       assertFalse(node3.isTypeOf());
2110:       assertFalse(node3.isReturn());
2111:       assertFalse(node3.isGetProp());
2112:       assertFalse(node3.isCase());
2113:       assertFalse(node3.isInc());
2114:       assertFalse(node3.isIn());
2115:       assertEquals(147493, node3.getSourcePosition());
2116:       assertFalse(node3.isNE());
2117:       assertFalse(node3.isSwitch());
2118:       assertFalse(node3.isIf());
2119:       assertFalse(node3.isEmpty());
2120:       assertFalse(node3.isFalse());
2121:       assertFalse(node3.isThrow());
2122:       assertFalse(node3.isDefaultCase());
2123:       assertEquals(37, node3.getCharno());
2124:       assertFalse(node3.isScript());
2125:       assertFalse(node3.isCatch());
2126:       assertFalse(node3.isInstanceOf());
2127:       assertFalse(node3.isRegExp());
2128:       assertFalse(node3.isWith());
2129:       assertFalse(node3.isArrayLit());
2130:       assertFalse(node3.isParamList());
2131:       assertFalse(node3.isGetterDef());
2132:       assertFalse(node3.isFor());
2133:       assertFalse(node3.isNumber());
2134:       assertEquals(36, node3.getLineno());
2135:       assertFalse(node3.isTry());
2136:       assertFalse(node3.hasOneChild());
2137:       assertFalse(node3.isHook());
2138:       assertFalse(node3.isBlock());
2139:       assertFalse(node3.isThis());
2140:       assertTrue(node3.isString());
2141:       assertFalse(node4.isHook());
2142:       assertEquals((-1), node4.getCharno());
2143:       assertFalse(node4.isInc());
2144:       assertFalse(node4.isFalse());
2145:       assertFalse(node4.isString());
2146:       assertFalse(node4.isCase());
2147:       assertFalse(node4.isThis());
2148:       assertFalse(node4.isThrow());
2149:       assertFalse(node4.isGetProp());
2150:       assertEquals(2, node4.getChildCount());
2151:       assertFalse(node4.isObjectLit());
2152:       assertFalse(node4.isGetterDef());
2153:       assertFalse(node4.isNot());
2154:       assertFalse(node4.isSwitch());
2155:       assertFalse(node4.isAnd());
2156:       assertFalse(node4.isArrayLit());
2157:       assertFalse(node4.isDebugger());
2158:       assertFalse(node4.isExprResult());
2159:       assertFalse(node4.isAssign());
2160:       assertFalse(node4.isEmpty());
2161:       assertFalse(node4.isDec());
2162:       assertFalse(node4.isDefaultCase());
2163:       assertFalse(node4.isAssignAdd());
2164:       assertFalse(node4.isReturn());
2165:       assertFalse(node4.isOr());
2166:       assertFalse(node4.isComma());
2167:       assertFalse(node4.isTypeOf());
2168:       assertFalse(node4.isDelProp());
2169:       assertFalse(node4.isGetElem());
2170:       assertTrue(node4.hasMoreThanOneChild());
2171:       assertFalse(node4.isBreak());
2172:       assertEquals(471, node4.getType());
2173:       assertFalse(node4.isTrue());
2174:       assertFalse(node4.isNull());
2175:       assertFalse(node4.isVoid());
2176:       assertFalse(node4.isName());
2177:       assertFalse(node4.isAdd());
2178:       assertFalse(node4.isBlock());
2179:       assertFalse(node4.isNew());
2180:       assertFalse(node4.isCall());
2181:       assertFalse(node4.isWhile());
2182:       assertFalse(node4.isDo());
2183:       assertFalse(node4.isVar());
2184:       assertFalse(node4.isLabel());
2185:       assertFalse(node4.isNumber());
2186:       assertFalse(node4.isContinue());
2187:       assertFalse(node4.isLabelName());
2188:       assertEquals((-1), node4.getSourcePosition());
2189:       assertFalse(node4.isParamList());
2190:       assertFalse(node4.isStringKey());
2191:       assertFalse(node4.isTry());
2192:       assertFalse(node4.hasOneChild());
2193:       assertFalse(node4.isFunction());
2194:       assertFalse(node4.isCast());
2195:       assertFalse(node4.isScript());
2196:       assertFalse(node4.isRegExp());
2197:       assertFalse(node4.isWith());
2198:       assertFalse(node4.isFor());
2199:       assertEquals((-1), node4.getLineno());
2200:       assertTrue(node4.hasChildren());
2201:       assertFalse(node4.isCatch());
2202:       assertFalse(node4.isSetterDef());
2203:       assertFalse(node4.isInstanceOf());
2204:       assertFalse(node4.isIn());
2205:       assertFalse(node4.isNE());
2206:       assertFalse(node4.isIf());
2207:       
2208:       Node node5 = Node.newString(117, "", (-1049), 40);
2209:       assertFalse(node5.equals((Object)node1));
2210:       assertFalse(node5.equals((Object)node2));
2211:       assertFalse(node5.equals((Object)node3));
2212:       assertFalse(node5.equals((Object)node0));
2213:       assertFalse(node5.equals((Object)node4));
2214:       assertNotSame(node5, node1);
2215:       assertNotSame(node5, node3);
2216:       assertNotSame(node5, node0);
2217:       assertNotNull(node5);
2218:       assertFalse(node5.isThis());
2219:       assertFalse(node5.isComma());
2220:       assertFalse(node5.isBreak());
2221:       assertFalse(node5.isGetProp());
2222:       assertFalse(node5.isThrow());
2223:       assertFalse(node5.isHook());
2224:       assertFalse(node5.isWith());
2225:       assertFalse(node5.isInstanceOf());
2226:       assertFalse(node5.isFalse());
2227:       assertFalse(node5.isScript());
2228:       assertTrue(node5.isContinue());
2229:       assertEquals((-1), node5.getCharno());
2230:       assertFalse(node5.isSwitch());
2231:       assertFalse(node5.isAnd());
2232:       assertFalse(node5.isObjectLit());
2233:       assertFalse(node5.hasOneChild());
2234:       assertFalse(node5.isCase());
2235:       assertFalse(node5.isString());
2236:       assertEquals(117, node5.getType());
2237:       assertFalse(node5.isNot());
2238:       assertFalse(node5.isNumber());
2239:       assertFalse(node5.isDec());
2240:       assertFalse(node5.hasChildren());
2241:       assertFalse(node5.isLabel());
2242:       assertFalse(node5.isReturn());
2243:       assertFalse(node5.isLabelName());
2244:       assertFalse(node5.isDelProp());
2245:       assertFalse(node5.isAssignAdd());
2246:       assertFalse(node5.isGetElem());
2247:       assertFalse(node5.isArrayLit());
2248:       assertFalse(node5.isAssign());
2249:       assertFalse(node5.isTypeOf());
2250:       assertFalse(node5.isExprResult());
2251:       assertFalse(node5.isTrue());
2252:       assertFalse(node5.isVoid());
2253:       assertFalse(node5.isNew());
2254:       assertFalse(node5.isDo());
2255:       assertFalse(node5.isDefaultCase());
2256:       assertFalse(node5.isOr());
2257:       assertFalse(node5.isAdd());
2258:       assertFalse(node5.isEmpty());
2259:       assertFalse(node5.isParamList());
2260:       assertFalse(node5.isSetterDef());
2261:       assertFalse(node5.isNull());
2262:       assertFalse(node5.isStringKey());
2263:       assertFalse(node5.isName());
2264:       assertFalse(node5.isCatch());
2265:       assertFalse(node5.isCall());
2266:       assertFalse(node5.isVar());
2267:       assertEquals(0, node5.getChildCount());
2268:       assertFalse(node5.isRegExp());
2269:       assertFalse(node5.isBlock());
2270:       assertFalse(node5.isDebugger());
2271:       assertFalse(node5.isWhile());
2272:       assertFalse(node5.isTry());
2273:       assertFalse(node5.isGetterDef());
2274:       assertFalse(node5.isNE());
2275:       assertEquals((-1), node5.getSourcePosition());
2276:       assertEquals((-1), node5.getLineno());
2277:       assertFalse(node5.isFor());
2278:       assertFalse(node5.isIf());
2279:       assertFalse(node5.hasMoreThanOneChild());
2280:       assertFalse(node5.isCast());
2281:       assertFalse(node5.isFunction());
2282:       assertFalse(node5.isInc());
2283:       assertFalse(node5.isIn());
2284:       
2285:       boolean boolean5 = node2.isReturn();
2286:       assertFalse(node2.equals((Object)node0));
2287:       assertFalse(node2.equals((Object)node1));
2288:       assertFalse(node2.equals((Object)node4));
2289:       assertFalse(node2.equals((Object)node3));
2290:       assertFalse(node2.equals((Object)node5));
2291:       assertTrue(boolean5 == boolean0);
2292:       assertTrue(boolean5 == boolean3);
2293:       assertTrue(boolean5 == boolean2);
2294:       assertTrue(boolean5 == boolean1);
2295:       assertTrue(boolean5 == boolean4);
2296:       assertFalse(node2.isCatch());
2297:       assertFalse(node2.isNull());
2298:       assertFalse(node2.isSetterDef());
2299:       assertFalse(node2.isParamList());
2300:       assertFalse(node2.isTrue());
2301:       assertFalse(node2.isDebugger());
2302:       assertFalse(node2.isCall());
2303:       assertFalse(node2.isName());
2304:       assertFalse(node2.isDelProp());
2305:       assertFalse(node2.isTry());
2306:       assertFalse(node2.isVoid());
2307:       assertFalse(node2.isRegExp());
2308:       assertFalse(node2.isWhile());
2309:       assertFalse(node2.isBlock());
2310:       assertFalse(node2.isFor());
2311:       assertEquals(39, node2.getType());
2312:       assertFalse(node2.hasMoreThanOneChild());
2313:       assertFalse(node2.isIn());
2314:       assertFalse(node2.isReturn());
2315:       assertFalse(node2.isContinue());
2316:       assertTrue(node2.isNumber());
2317:       assertFalse(node2.isIf());
2318:       assertFalse(node2.isInc());
2319:       assertFalse(node2.isString());
2320:       assertFalse(node2.isNE());
2321:       assertEquals(147493, node2.getSourcePosition());
2322:       assertFalse(node2.isCast());
2323:       assertFalse(node2.isThrow());
2324:       assertFalse(node2.isFalse());
2325:       assertFalse(node2.isFunction());
2326:       assertFalse(node2.isAnd());
2327:       assertFalse(node2.isInstanceOf());
2328:       assertFalse(node2.isGetProp());
2329:       assertEquals(37, node2.getCharno());
2330:       assertFalse(node2.isScript());
2331:       assertFalse(node2.isObjectLit());
2332:       assertFalse(node2.isNot());
2333:       assertFalse(node2.hasOneChild());
2334:       assertFalse(node2.isHook());
2335:       assertFalse(node2.isGetElem());
2336:       assertFalse(node2.isTypeOf());
2337:       assertFalse(node2.hasChildren());
2338:       assertFalse(node2.isBreak());
2339:       assertEquals(36, node2.getLineno());
2340:       assertFalse(node2.isExprResult());
2341:       assertFalse(node2.isThis());
2342:       assertFalse(node2.isWith());
2343:       assertFalse(node2.isComma());
2344:       assertFalse(node2.isAssign());
2345:       assertFalse(node2.isDec());
2346:       assertFalse(node2.isCase());
2347:       assertFalse(node2.isAssignAdd());
2348:       assertFalse(node2.isDo());
2349:       assertFalse(node2.isSwitch());
2350:       assertFalse(node2.isEmpty());
2351:       assertFalse(node2.isGetterDef());
2352:       assertFalse(node2.isOr());
2353:       assertFalse(node2.isArrayLit());
2354:       assertFalse(node2.isVar());
2355:       assertFalse(node2.isStringKey());
2356:       assertFalse(node2.isAdd());
2357:       assertFalse(node2.isNew());
2358:       assertFalse(node2.isLabelName());
2359:       assertFalse(node2.isDefaultCase());
2360:       assertFalse(node2.isLabel());
2361:       assertEquals(0, node2.getChildCount());
2362:       assertFalse(boolean5);
2363:       
2364:       boolean boolean6 = node2.isTrue();
2365:       assertFalse(node2.equals((Object)node0));
2366:       assertFalse(node2.equals((Object)node1));
2367:       assertFalse(node2.equals((Object)node4));
2368:       assertFalse(node2.equals((Object)node3));
2369:       assertFalse(node2.equals((Object)node5));
2370:       assertTrue(boolean6 == boolean5);
2371:       assertTrue(boolean6 == boolean0);
2372:       assertTrue(boolean6 == boolean4);
2373:       assertTrue(boolean6 == boolean3);
2374:       assertTrue(boolean6 == boolean1);
2375:       assertTrue(boolean6 == boolean2);
2376:       assertFalse(node2.isCatch());
2377:       assertFalse(node2.isNull());
2378:       assertFalse(node2.isSetterDef());
2379:       assertFalse(node2.isParamList());
2380:       assertFalse(node2.isTrue());
2381:       assertFalse(node2.isDebugger());
2382:       assertFalse(node2.isCall());
2383:       assertFalse(node2.isName());
2384:       assertFalse(node2.isDelProp());
2385:       assertFalse(node2.isTry());
2386:       assertFalse(node2.isVoid());
2387:       assertFalse(node2.isRegExp());
2388:       assertFalse(node2.isWhile());
2389:       assertFalse(node2.isBlock());
2390:       assertFalse(node2.isFor());
2391:       assertEquals(39, node2.getType());
2392:       assertFalse(node2.hasMoreThanOneChild());
2393:       assertFalse(node2.isIn());
2394:       assertFalse(node2.isReturn());
2395:       assertFalse(node2.isContinue());
2396:       assertTrue(node2.isNumber());
2397:       assertFalse(node2.isIf());
2398:       assertFalse(node2.isInc());
2399:       assertFalse(node2.isString());
2400:       assertFalse(node2.isNE());
2401:       assertEquals(147493, node2.getSourcePosition());
2402:       assertFalse(node2.isCast());
2403:       assertFalse(node2.isThrow());
2404:       assertFalse(node2.isFalse());
2405:       assertFalse(node2.isFunction());
2406:       assertFalse(node2.isAnd());
2407:       assertFalse(node2.isInstanceOf());
2408:       assertFalse(node2.isGetProp());
2409:       assertEquals(37, node2.getCharno());
2410:       assertFalse(node2.isScript());
2411:       assertFalse(node2.isObjectLit());
2412:       assertFalse(node2.isNot());
2413:       assertFalse(node2.hasOneChild());
2414:       assertFalse(node2.isHook());
2415:       assertFalse(node2.isGetElem());
2416:       assertFalse(node2.isTypeOf());
2417:       assertFalse(node2.hasChildren());
2418:       assertFalse(node2.isBreak());
2419:       assertEquals(36, node2.getLineno());
2420:       assertFalse(node2.isExprResult());
2421:       assertFalse(node2.isThis());
2422:       assertFalse(node2.isWith());
2423:       assertFalse(node2.isComma());
2424:       assertFalse(node2.isAssign());
2425:       assertFalse(node2.isDec());
2426:       assertFalse(node2.isCase());
2427:       assertFalse(node2.isAssignAdd());
2428:       assertFalse(node2.isDo());
2429:       assertFalse(node2.isSwitch());
2430:       assertFalse(node2.isEmpty());
2431:       assertFalse(node2.isGetterDef());
2432:       assertFalse(node2.isOr());
2433:       assertFalse(node2.isArrayLit());
2434:       assertFalse(node2.isVar());
2435:       assertFalse(node2.isStringKey());
2436:       assertFalse(node2.isAdd());
2437:       assertFalse(node2.isNew());
2438:       assertFalse(node2.isLabelName());
2439:       assertFalse(node2.isDefaultCase());
2440:       assertFalse(node2.isLabel());
2441:       assertEquals(0, node2.getChildCount());
2442:       assertFalse(boolean6);
2443:       
2444:       Iterable<Node> iterable1 = node0.children();
2445:       assertFalse(iterable1.equals((Object)iterable0));
2446:       assertFalse(node0.equals((Object)node4));
2447:       assertFalse(node0.equals((Object)node1));
2448:       assertFalse(node0.equals((Object)node2));
2449:       assertFalse(node0.equals((Object)node5));
2450:       assertNotSame(node0, node1);
2451:       assertSame(node0, node3);
2452:       assertNotSame(node0, node5);
2453:       assertFalse(iterable1.contains(node0));
2454:       assertNotNull(iterable1);
2455:       assertFalse(node0.isWhile());
2456:       assertFalse(node0.isDo());
2457:       assertFalse(node0.isBlock());
2458:       assertFalse(node0.isAssignAdd());
2459:       assertFalse(node0.isNew());
2460:       assertTrue(node0.isString());
2461:       assertFalse(node0.isOr());
2462:       assertFalse(node0.isAdd());
2463:       assertFalse(node0.hasChildren());
2464:       assertFalse(node0.isTypeOf());
2465:       assertFalse(node0.isDec());
2466:       assertFalse(node0.isName());
2467:       assertFalse(node0.isAssign());
2468:       assertFalse(node0.isNull());
2469:       assertFalse(node0.isReturn());
2470:       assertFalse(node0.isExprResult());
2471:       assertFalse(node0.isCall());
2472:       assertFalse(node0.hasMoreThanOneChild());
2473:       assertEquals(36, node0.getLineno());
2474:       assertFalse(node0.isGetElem());
2475:       assertFalse(node0.isCatch());
2476:       assertFalse(node0.isWith());
2477:       assertFalse(node0.isDefaultCase());
2478:       assertFalse(node0.isRegExp());
2479:       assertFalse(node0.isTrue());
2480:       assertFalse(node0.hasOneChild());
2481:       assertFalse(node0.isTry());
2482:       assertFalse(node0.isScript());
2483:       assertFalse(node0.isEmpty());
2484:       assertFalse(node0.isNumber());
2485:       assertFalse(node0.isLabelName());
2486:       assertFalse(node0.isGetterDef());
2487:       assertFalse(node0.isParamList());
2488:       assertFalse(node0.isStringKey());
2489:       assertFalse(node0.isVar());
2490:       assertFalse(node0.isLabel());
2491:       assertFalse(node0.isArrayLit());
2492:       assertEquals(0, node0.getChildCount());
2493:       assertFalse(node0.isCase());
2494:       assertFalse(node0.isSwitch());
2495:       assertFalse(node0.isIn());
2496:       assertEquals(147493, node0.getSourcePosition());
2497:       assertFalse(node0.isInc());
2498:       assertFalse(node0.isBreak());
2499:       assertFalse(node0.isIf());
2500:       assertFalse(node0.isDelProp());
2501:       assertFalse(node0.isThis());
2502:       assertFalse(node0.isComma());
2503:       assertFalse(node0.isHook());
2504:       assertFalse(node0.isFor());
2505:       assertFalse(node0.isNE());
2506:       assertFalse(node0.isVoid());
2507:       assertFalse(node0.isInstanceOf());
2508:       assertEquals(37, node0.getCharno());
2509:       assertFalse(node0.isNot());
2510:       assertFalse(node0.isDebugger());
2511:       assertFalse(node0.isAnd());
2512:       assertEquals(40, node0.getType());
2513:       assertFalse(node0.isSetterDef());
2514:       assertFalse(node0.isObjectLit());
2515:       assertFalse(node0.isGetProp());
2516:       assertFalse(node0.isFalse());
2517:       assertFalse(node0.isThrow());
2518:       assertFalse(node0.isFunction());
2519:       assertFalse(node0.isContinue());
2520:       assertFalse(node0.isCast());
2521:       
2522:       StringWriter stringWriter0 = new StringWriter(25);
2523:       assertNotNull(stringWriter0);
2524:       assertEquals("", stringWriter0.toString());
2525:       
2526:       StringWriter stringWriter1 = stringWriter0.append((CharSequence) "NUMBER 12.0");
2527:       assertSame(stringWriter0, stringWriter1);
2528:       assertSame(stringWriter1, stringWriter0);
2529:       assertNotNull(stringWriter1);
2530:       assertEquals("NUMBER 12.0", stringWriter0.toString());
2531:       assertEquals("NUMBER 12.0", stringWriter1.toString());
2532:       
2533:       MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
2534:       assertNotNull(mockPrintWriter0);
2535:       
2536:       Locale locale0 = new Locale("H'Y@UN%");
2537:       assertNotNull(locale0);
2538:       assertEquals("", locale0.getCountry());
2539:       assertEquals("", locale0.getVariant());
2540:       assertEquals("h'y@un%", locale0.toString());
2541:       assertEquals("", locale0.getISO3Country());
2542:       assertEquals("h'y@un%", locale0.getLanguage());
2543:       
2544:       // Undeclared exception!
2545:       try { 
2546:         node3.addChildAfter(node0, node4);
2547:         fail("Expecting exception: IllegalArgumentException");
2548:       
2549:       } catch(IllegalArgumentException e) {
2550:          //
2551:          // The new child node has siblings.
2552:          //
2553:          verifyException("com.google.common.base.Preconditions", e);
2554:       }
2555:   }
2556: }
RegularFileObject[/tmp/EvoSuite_177_1628256046063/com/google/javascript/rhino/Node_177_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:46 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_177_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_177_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_177_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.InputId",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.javascript.rhino.jstype.TemplatizedType",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.Iterables",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.common.collect.Sets$ImprovedAbstractSet",
354:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
355:       "com.google.common.collect.Hashing",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
358:       "com.google.javascript.rhino.JSTypeExpression",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
367:     );
368:   }
369: }

[MASTER] 13:20:47.013 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("", 36, 36);
assertNotNull(node0);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(36, node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertEquals(36, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

boolean boolean0 = node0.isLabelName();
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(36, node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertEquals(36, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(boolean0);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

boolean boolean1 = node0.isOr();
assertTrue(boolean1 == boolean0);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(36, node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertEquals(36, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(boolean1);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Node node1 = Node.newString(38, "");
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertNotNull(node1);
assertEquals(38, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertNull(staticSourceFile0);
assertEquals(38, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

Node node2 = Node.newNumber((double) 12, 36, 37);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertEquals(39, node2.getType());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertTrue(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isNE());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertEquals(37, node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isGetElem());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertEquals(36, node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isThis());
assertFalse(node2.isWith());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isOr());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isLabelName());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node node3 = node0.copyInformationFrom(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertSame(node0, node3);
assertNotSame(node0, node1);
assertSame(node3, node0);
assertNotSame(node3, node1);
assertNotNull(node3);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(36, node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isInstanceOf());
assertEquals(37, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertEquals(39, node2.getType());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertTrue(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isNE());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertEquals(37, node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isGetElem());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertEquals(36, node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isThis());
assertFalse(node2.isWith());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isOr());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isLabelName());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isLabelName());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCast());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isLabel());
assertFalse(node3.isVar());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNot());
assertEquals(40, node3.getType());
assertFalse(node3.isExprResult());
assertFalse(node3.isFunction());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isAnd());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isGetElem());
assertFalse(node3.hasChildren());
assertFalse(node3.isBreak());
assertFalse(node3.isCall());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.isNE());
assertFalse(node3.isSwitch());
assertFalse(node3.isIf());
assertFalse(node3.isEmpty());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isDefaultCase());
assertEquals(37, node3.getCharno());
assertFalse(node3.isScript());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isRegExp());
assertFalse(node3.isWith());
assertFalse(node3.isArrayLit());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isNumber());
assertEquals(36, node3.getLineno());
assertFalse(node3.isTry());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isThis());
assertTrue(node3.isString());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

boolean boolean2 = node0.getBooleanProp(53);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(36, node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isInstanceOf());
assertEquals(37, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(boolean2);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

boolean boolean3 = node0.isReturn();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(36, node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isInstanceOf());
assertEquals(37, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(boolean3);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Node node4 = new Node(471, node3, node3, node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertNotNull(node4);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(36, node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isInstanceOf());
assertEquals(37, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(38, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertEquals(39, node2.getType());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertTrue(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isNE());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertEquals(37, node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isGetElem());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertEquals(36, node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isThis());
assertFalse(node2.isWith());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isOr());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isLabelName());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isLabelName());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCast());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isLabel());
assertFalse(node3.isVar());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNot());
assertEquals(40, node3.getType());
assertFalse(node3.isExprResult());
assertFalse(node3.isFunction());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isAnd());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isGetElem());
assertFalse(node3.hasChildren());
assertFalse(node3.isBreak());
assertFalse(node3.isCall());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.isNE());
assertFalse(node3.isSwitch());
assertFalse(node3.isIf());
assertFalse(node3.isEmpty());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isDefaultCase());
assertEquals(37, node3.getCharno());
assertFalse(node3.isScript());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isRegExp());
assertFalse(node3.isWith());
assertFalse(node3.isArrayLit());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isNumber());
assertEquals(36, node3.getLineno());
assertFalse(node3.isTry());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isThis());
assertTrue(node3.isString());
assertFalse(node4.isHook());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isInc());
assertFalse(node4.isFalse());
assertFalse(node4.isString());
assertFalse(node4.isCase());
assertFalse(node4.isThis());
assertFalse(node4.isThrow());
assertFalse(node4.isGetProp());
assertEquals(2, node4.getChildCount());
assertFalse(node4.isObjectLit());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNot());
assertFalse(node4.isSwitch());
assertFalse(node4.isAnd());
assertFalse(node4.isArrayLit());
assertFalse(node4.isDebugger());
assertFalse(node4.isExprResult());
assertFalse(node4.isAssign());
assertFalse(node4.isEmpty());
assertFalse(node4.isDec());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isReturn());
assertFalse(node4.isOr());
assertFalse(node4.isComma());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDelProp());
assertFalse(node4.isGetElem());
assertTrue(node4.hasMoreThanOneChild());
assertFalse(node4.isBreak());
assertEquals(471, node4.getType());
assertFalse(node4.isTrue());
assertFalse(node4.isNull());
assertFalse(node4.isVoid());
assertFalse(node4.isName());
assertFalse(node4.isAdd());
assertFalse(node4.isBlock());
assertFalse(node4.isNew());
assertFalse(node4.isCall());
assertFalse(node4.isWhile());
assertFalse(node4.isDo());
assertFalse(node4.isVar());
assertFalse(node4.isLabel());
assertFalse(node4.isNumber());
assertFalse(node4.isContinue());
assertFalse(node4.isLabelName());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertFalse(node4.isTry());
assertFalse(node4.hasOneChild());
assertFalse(node4.isFunction());
assertFalse(node4.isCast());
assertFalse(node4.isScript());
assertFalse(node4.isRegExp());
assertFalse(node4.isWith());
assertFalse(node4.isFor());
assertEquals((-1), node4.getLineno());
assertTrue(node4.hasChildren());
assertFalse(node4.isCatch());
assertFalse(node4.isSetterDef());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isIn());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);

String string0 = node2.toString(false, false, false);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertNotNull(string0);
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertEquals(39, node2.getType());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertTrue(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isNE());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertEquals(37, node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isGetElem());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertEquals(36, node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isThis());
assertFalse(node2.isWith());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isOr());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isLabelName());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertEquals("NUMBER 12.0", string0);

boolean boolean4 = node3.isTrue();
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertSame(node3, node0);
assertNotSame(node3, node1);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(36, node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isInstanceOf());
assertEquals(37, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertEquals(39, node2.getType());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertTrue(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isNE());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertEquals(37, node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isGetElem());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertEquals(36, node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isThis());
assertFalse(node2.isWith());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isOr());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isLabelName());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isLabelName());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCast());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isLabel());
assertFalse(node3.isVar());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNot());
assertEquals(40, node3.getType());
assertFalse(node3.isExprResult());
assertFalse(node3.isFunction());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isAnd());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isGetElem());
assertFalse(node3.hasChildren());
assertFalse(node3.isBreak());
assertFalse(node3.isCall());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.isNE());
assertFalse(node3.isSwitch());
assertFalse(node3.isIf());
assertFalse(node3.isEmpty());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isDefaultCase());
assertEquals(37, node3.getCharno());
assertFalse(node3.isScript());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isRegExp());
assertFalse(node3.isWith());
assertFalse(node3.isArrayLit());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isNumber());
assertEquals(36, node3.getLineno());
assertFalse(node3.isTry());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isThis());
assertTrue(node3.isString());
assertFalse(boolean4);

Iterable<Node> iterable0 = node4.children();
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node3);
assertSame(node3, node0);
assertNotSame(node3, node1);
assertNotNull(iterable0);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(36, node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isInstanceOf());
assertEquals(37, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(38, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isTry());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertEquals(39, node2.getType());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertTrue(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isNE());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertEquals(37, node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isGetElem());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertEquals(36, node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isThis());
assertFalse(node2.isWith());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isOr());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isLabelName());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isLabelName());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCast());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isLabel());
assertFalse(node3.isVar());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNot());
assertEquals(40, node3.getType());
assertFalse(node3.isExprResult());
assertFalse(node3.isFunction());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isAnd());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isGetElem());
assertFalse(node3.hasChildren());
assertFalse(node3.isBreak());
assertFalse(node3.isCall());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertEquals(147493, node3.getSourcePosition());
assertFalse(node3.isNE());
assertFalse(node3.isSwitch());
assertFalse(node3.isIf());
assertFalse(node3.isEmpty());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isDefaultCase());
assertEquals(37, node3.getCharno());
assertFalse(node3.isScript());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isRegExp());
assertFalse(node3.isWith());
assertFalse(node3.isArrayLit());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isNumber());
assertEquals(36, node3.getLineno());
assertFalse(node3.isTry());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isThis());
assertTrue(node3.isString());
assertFalse(node4.isHook());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isInc());
assertFalse(node4.isFalse());
assertFalse(node4.isString());
assertFalse(node4.isCase());
assertFalse(node4.isThis());
assertFalse(node4.isThrow());
assertFalse(node4.isGetProp());
assertEquals(2, node4.getChildCount());
assertFalse(node4.isObjectLit());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNot());
assertFalse(node4.isSwitch());
assertFalse(node4.isAnd());
assertFalse(node4.isArrayLit());
assertFalse(node4.isDebugger());
assertFalse(node4.isExprResult());
assertFalse(node4.isAssign());
assertFalse(node4.isEmpty());
assertFalse(node4.isDec());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isReturn());
assertFalse(node4.isOr());
assertFalse(node4.isComma());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDelProp());
assertFalse(node4.isGetElem());
assertTrue(node4.hasMoreThanOneChild());
assertFalse(node4.isBreak());
assertEquals(471, node4.getType());
assertFalse(node4.isTrue());
assertFalse(node4.isNull());
assertFalse(node4.isVoid());
assertFalse(node4.isName());
assertFalse(node4.isAdd());
assertFalse(node4.isBlock());
assertFalse(node4.isNew());
assertFalse(node4.isCall());
assertFalse(node4.isWhile());
assertFalse(node4.isDo());
assertFalse(node4.isVar());
assertFalse(node4.isLabel());
assertFalse(node4.isNumber());
assertFalse(node4.isContinue());
assertFalse(node4.isLabelName());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertFalse(node4.isTry());
assertFalse(node4.hasOneChild());
assertFalse(node4.isFunction());
assertFalse(node4.isCast());
assertFalse(node4.isScript());
assertFalse(node4.isRegExp());
assertFalse(node4.isWith());
assertFalse(node4.isFor());
assertEquals((-1), node4.getLineno());
assertTrue(node4.hasChildren());
assertFalse(node4.isCatch());
assertFalse(node4.isSetterDef());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isIn());
assertFalse(node4.isNE());
assertFalse(node4.isIf());

Node node5 = Node.newString(117, "", (-1049), 40);
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node4));
assertNotSame(node5, node1);
assertNotSame(node5, node3);
assertNotSame(node5, node0);
assertNotNull(node5);
assertFalse(node5.isThis());
assertFalse(node5.isComma());
assertFalse(node5.isBreak());
assertFalse(node5.isGetProp());
assertFalse(node5.isThrow());
assertFalse(node5.isHook());
assertFalse(node5.isWith());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isFalse());
assertFalse(node5.isScript());
assertTrue(node5.isContinue());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isSwitch());
assertFalse(node5.isAnd());
assertFalse(node5.isObjectLit());
assertFalse(node5.hasOneChild());
assertFalse(node5.isCase());
assertFalse(node5.isString());
assertEquals(117, node5.getType());
assertFalse(node5.isNot());
assertFalse(node5.isNumber());
assertFalse(node5.isDec());
assertFalse(node5.hasChildren());
assertFalse(node5.isLabel());
assertFalse(node5.isReturn());
assertFalse(node5.isLabelName());
assertFalse(node5.isDelProp());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isGetElem());
assertFalse(node5.isArrayLit());
assertFalse(node5.isAssign());
assertFalse(node5.isTypeOf());
assertFalse(node5.isExprResult());
assertFalse(node5.isTrue());
assertFalse(node5.isVoid());
assertFalse(node5.isNew());
assertFalse(node5.isDo());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isOr());
assertFalse(node5.isAdd());
assertFalse(node5.isEmpty());
assertFalse(node5.isParamList());
assertFalse(node5.isSetterDef());
assertFalse(node5.isNull());
assertFalse(node5.isStringKey());
assertFalse(node5.isName());
assertFalse(node5.isCatch());
assertFalse(node5.isCall());
assertFalse(node5.isVar());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isRegExp());
assertFalse(node5.isBlock());
assertFalse(node5.isDebugger());
assertFalse(node5.isWhile());
assertFalse(node5.isTry());
assertFalse(node5.isGetterDef());
assertFalse(node5.isNE());
assertEquals((-1), node5.getSourcePosition());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isFor());
assertFalse(node5.isIf());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isCast());
assertFalse(node5.isFunction());
assertFalse(node5.isInc());
assertFalse(node5.isIn());

boolean boolean5 = node2.isReturn();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node5));
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertEquals(39, node2.getType());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertTrue(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isNE());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertEquals(37, node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isGetElem());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertEquals(36, node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isThis());
assertFalse(node2.isWith());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isOr());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isLabelName());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(boolean5);

boolean boolean6 = node2.isTrue();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node5));
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean2);
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertEquals(39, node2.getType());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertTrue(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isNE());
assertEquals(147493, node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertEquals(37, node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isGetElem());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertEquals(36, node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isThis());
assertFalse(node2.isWith());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isOr());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isLabelName());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(boolean6);

Iterable<Node> iterable1 = node0.children();
assertFalse(iterable1.equals((Object)iterable0));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node5));
assertNotSame(node0, node1);
assertSame(node0, node3);
assertNotSame(node0, node5);
assertFalse(iterable1.contains(node0));
assertNotNull(iterable1);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(36, node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertEquals(147493, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isInstanceOf());
assertEquals(37, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());

StringWriter stringWriter0 = new StringWriter(25);
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

StringWriter stringWriter1 = stringWriter0.append((CharSequence) "NUMBER 12.0");
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);
assertEquals("NUMBER 12.0", stringWriter0.toString());
assertEquals("NUMBER 12.0", stringWriter1.toString());

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
assertNotNull(mockPrintWriter0);

Locale locale0 = new Locale("H'Y@UN%");
assertNotNull(locale0);
assertEquals("", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("h'y@un%", locale0.toString());
assertEquals("", locale0.getISO3Country());
assertEquals("h'y@un%", locale0.getLanguage());

node3.addChildAfter(node0, node4);

[MASTER] 13:20:50.832 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_189_1628256050215/com/google/javascript/rhino/Node_189_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_189_1628256050215/com/google/javascript/rhino/Node_189_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:50.832 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:50.832 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:50.833 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2257
[MASTER] 13:20:50.841 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_189_1628256050215/com/google/javascript/rhino/Node_189_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:50 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.StaticSourceFile;
13: import java.io.StringWriter;
14: import java.util.Locale;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.mock.java.io.MockPrintWriter;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_189_tmp__ESTest extends Node_189_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Node node0 = Node.newString("", 36, 36);
26:       assertNotNull(node0);
27:       assertFalse(node0.isFalse());
28:       assertFalse(node0.isThrow());
29:       assertFalse(node0.isHook());
30:       assertFalse(node0.isThis());
31:       assertFalse(node0.isSwitch());
32:       assertFalse(node0.isComma());
33:       assertFalse(node0.isInstanceOf());
34:       assertFalse(node0.isBreak());
35:       assertFalse(node0.isIn());
36:       assertFalse(node0.isInc());
37:       assertFalse(node0.isEmpty());
38:       assertFalse(node0.isLabelName());
39:       assertFalse(node0.isGetterDef());
40:       assertFalse(node0.isIf());
41:       assertFalse(node0.isNE());
42:       assertFalse(node0.isFor());
43:       assertFalse(node0.isLabel());
44:       assertFalse(node0.isRegExp());
45:       assertEquals(36, node0.getLineno());
46:       assertFalse(node0.isArrayLit());
47:       assertFalse(node0.isCase());
48:       assertFalse(node0.hasMoreThanOneChild());
49:       assertFalse(node0.isWith());
50:       assertEquals(36, node0.getCharno());
51:       assertEquals(147492, node0.getSourcePosition());
52:       assertFalse(node0.isTry());
53:       assertTrue(node0.isString());
54:       assertFalse(node0.hasOneChild());
55:       assertFalse(node0.isNumber());
56:       assertFalse(node0.isScript());
57:       assertFalse(node0.isStringKey());
58:       assertFalse(node0.isName());
59:       assertFalse(node0.isVar());
60:       assertFalse(node0.isBlock());
61:       assertFalse(node0.isNull());
62:       assertFalse(node0.isParamList());
63:       assertFalse(node0.isCatch());
64:       assertFalse(node0.isCall());
65:       assertFalse(node0.isContinue());
66:       assertFalse(node0.isDo());
67:       assertFalse(node0.isDefaultCase());
68:       assertEquals(0, node0.getChildCount());
69:       assertFalse(node0.isTrue());
70:       assertEquals(40, node0.getType());
71:       assertFalse(node0.isNew());
72:       assertFalse(node0.isAssignAdd());
73:       assertFalse(node0.isOr());
74:       assertFalse(node0.isSetterDef());
75:       assertFalse(node0.isAdd());
76:       assertFalse(node0.isGetElem());
77:       assertFalse(node0.isAssign());
78:       assertFalse(node0.isDelProp());
79:       assertFalse(node0.isDec());
80:       assertFalse(node0.hasChildren());
81:       assertFalse(node0.isTypeOf());
82:       assertFalse(node0.isFunction());
83:       assertFalse(node0.isVoid());
84:       assertFalse(node0.isCast());
85:       assertFalse(node0.isExprResult());
86:       assertFalse(node0.isAnd());
87:       assertFalse(node0.isNot());
88:       assertFalse(node0.isObjectLit());
89:       assertFalse(node0.isWhile());
90:       assertFalse(node0.isReturn());
91:       assertFalse(node0.isGetProp());
92:       assertFalse(node0.isDebugger());
93:       assertEquals(43, Node.IS_CONSTANT_NAME);
94:       assertEquals(36, Node.QUOTED_PROP);
95:       assertEquals(55, Node.INFERRED_FUNCTION);
96:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
97:       assertEquals(53, Node.INPUT_ID);
98:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
99:       assertEquals(47, Node.IS_DISPATCHER);
100:       assertEquals(8, Node.FLAG_NO_THROWS);
101:       assertEquals(2, Node.POST_FLAG);
102:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
103:       assertEquals(39, Node.EMPTY_BLOCK);
104:       assertEquals(40, Node.ORIGINALNAME_PROP);
105:       assertEquals(29, Node.JSDOC_INFO_PROP);
106:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
108:       assertEquals(57, Node.LAST_PROP);
109:       assertEquals(30, Node.VAR_ARGS_NAME);
110:       assertEquals(49, Node.DIRECT_EVAL);
111:       assertEquals(1, Node.DECR_FLAG);
112:       assertEquals(51, Node.STATIC_SOURCE_FILE);
113:       assertEquals(57, Node.REFLECTED_OBJECT);
114:       assertEquals(52, Node.LENGTH);
115:       assertEquals(46, Node.IS_NAMESPACE);
116:       assertEquals(54, Node.SLASH_V);
117:       assertEquals(56, Node.CHANGE_TIME);
118:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
119:       assertEquals(50, Node.FREE_CALL);
120:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
121:       assertEquals(48, Node.DIRECTIVES);
122:       assertEquals(37, Node.OPT_ARG_NAME);
123:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
124:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
125:       assertEquals(4095, Node.COLUMN_MASK);
126:       assertEquals(32, Node.INCRDECR_PROP);
127:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
128:       assertEquals(12, Node.COLUMN_BITS);
129:       
130:       boolean boolean0 = node0.isLabelName();
131:       assertFalse(node0.isFalse());
132:       assertFalse(node0.isThrow());
133:       assertFalse(node0.isHook());
134:       assertFalse(node0.isThis());
135:       assertFalse(node0.isSwitch());
136:       assertFalse(node0.isComma());
137:       assertFalse(node0.isInstanceOf());
138:       assertFalse(node0.isBreak());
139:       assertFalse(node0.isIn());
140:       assertFalse(node0.isInc());
141:       assertFalse(node0.isEmpty());
142:       assertFalse(node0.isLabelName());
143:       assertFalse(node0.isGetterDef());
144:       assertFalse(node0.isIf());
145:       assertFalse(node0.isNE());
146:       assertFalse(node0.isFor());
147:       assertFalse(node0.isLabel());
148:       assertFalse(node0.isRegExp());
149:       assertEquals(36, node0.getLineno());
150:       assertFalse(node0.isArrayLit());
151:       assertFalse(node0.isCase());
152:       assertFalse(node0.hasMoreThanOneChild());
153:       assertFalse(node0.isWith());
154:       assertEquals(36, node0.getCharno());
155:       assertEquals(147492, node0.getSourcePosition());
156:       assertFalse(node0.isTry());
157:       assertTrue(node0.isString());
158:       assertFalse(node0.hasOneChild());
159:       assertFalse(node0.isNumber());
160:       assertFalse(node0.isScript());
161:       assertFalse(node0.isStringKey());
162:       assertFalse(node0.isName());
163:       assertFalse(node0.isVar());
164:       assertFalse(node0.isBlock());
165:       assertFalse(node0.isNull());
166:       assertFalse(node0.isParamList());
167:       assertFalse(node0.isCatch());
168:       assertFalse(node0.isCall());
169:       assertFalse(node0.isContinue());
170:       assertFalse(node0.isDo());
171:       assertFalse(node0.isDefaultCase());
172:       assertEquals(0, node0.getChildCount());
173:       assertFalse(node0.isTrue());
174:       assertEquals(40, node0.getType());
175:       assertFalse(node0.isNew());
176:       assertFalse(node0.isAssignAdd());
177:       assertFalse(node0.isOr());
178:       assertFalse(node0.isSetterDef());
179:       assertFalse(node0.isAdd());
180:       assertFalse(node0.isGetElem());
181:       assertFalse(node0.isAssign());
182:       assertFalse(node0.isDelProp());
183:       assertFalse(node0.isDec());
184:       assertFalse(node0.hasChildren());
185:       assertFalse(node0.isTypeOf());
186:       assertFalse(node0.isFunction());
187:       assertFalse(node0.isVoid());
188:       assertFalse(node0.isCast());
189:       assertFalse(node0.isExprResult());
190:       assertFalse(node0.isAnd());
191:       assertFalse(node0.isNot());
192:       assertFalse(node0.isObjectLit());
193:       assertFalse(node0.isWhile());
194:       assertFalse(node0.isReturn());
195:       assertFalse(node0.isGetProp());
196:       assertFalse(node0.isDebugger());
197:       assertFalse(boolean0);
198:       assertEquals(43, Node.IS_CONSTANT_NAME);
199:       assertEquals(36, Node.QUOTED_PROP);
200:       assertEquals(55, Node.INFERRED_FUNCTION);
201:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
202:       assertEquals(53, Node.INPUT_ID);
203:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
204:       assertEquals(47, Node.IS_DISPATCHER);
205:       assertEquals(8, Node.FLAG_NO_THROWS);
206:       assertEquals(2, Node.POST_FLAG);
207:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
208:       assertEquals(39, Node.EMPTY_BLOCK);
209:       assertEquals(40, Node.ORIGINALNAME_PROP);
210:       assertEquals(29, Node.JSDOC_INFO_PROP);
211:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
212:       assertEquals(15, Node.NO_SIDE_EFFECTS);
213:       assertEquals(57, Node.LAST_PROP);
214:       assertEquals(30, Node.VAR_ARGS_NAME);
215:       assertEquals(49, Node.DIRECT_EVAL);
216:       assertEquals(1, Node.DECR_FLAG);
217:       assertEquals(51, Node.STATIC_SOURCE_FILE);
218:       assertEquals(57, Node.REFLECTED_OBJECT);
219:       assertEquals(52, Node.LENGTH);
220:       assertEquals(46, Node.IS_NAMESPACE);
221:       assertEquals(54, Node.SLASH_V);
222:       assertEquals(56, Node.CHANGE_TIME);
223:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
224:       assertEquals(50, Node.FREE_CALL);
225:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
226:       assertEquals(48, Node.DIRECTIVES);
227:       assertEquals(37, Node.OPT_ARG_NAME);
228:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
229:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
230:       assertEquals(4095, Node.COLUMN_MASK);
231:       assertEquals(32, Node.INCRDECR_PROP);
232:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
233:       assertEquals(12, Node.COLUMN_BITS);
234:       
235:       boolean boolean1 = node0.isOr();
236:       assertTrue(boolean1 == boolean0);
237:       assertFalse(node0.isFalse());
238:       assertFalse(node0.isThrow());
239:       assertFalse(node0.isHook());
240:       assertFalse(node0.isThis());
241:       assertFalse(node0.isSwitch());
242:       assertFalse(node0.isComma());
243:       assertFalse(node0.isInstanceOf());
244:       assertFalse(node0.isBreak());
245:       assertFalse(node0.isIn());
246:       assertFalse(node0.isInc());
247:       assertFalse(node0.isEmpty());
248:       assertFalse(node0.isLabelName());
249:       assertFalse(node0.isGetterDef());
250:       assertFalse(node0.isIf());
251:       assertFalse(node0.isNE());
252:       assertFalse(node0.isFor());
253:       assertFalse(node0.isLabel());
254:       assertFalse(node0.isRegExp());
255:       assertEquals(36, node0.getLineno());
256:       assertFalse(node0.isArrayLit());
257:       assertFalse(node0.isCase());
258:       assertFalse(node0.hasMoreThanOneChild());
259:       assertFalse(node0.isWith());
260:       assertEquals(36, node0.getCharno());
261:       assertEquals(147492, node0.getSourcePosition());
262:       assertFalse(node0.isTry());
263:       assertTrue(node0.isString());
264:       assertFalse(node0.hasOneChild());
265:       assertFalse(node0.isNumber());
266:       assertFalse(node0.isScript());
267:       assertFalse(node0.isStringKey());
268:       assertFalse(node0.isName());
269:       assertFalse(node0.isVar());
270:       assertFalse(node0.isBlock());
271:       assertFalse(node0.isNull());
272:       assertFalse(node0.isParamList());
273:       assertFalse(node0.isCatch());
274:       assertFalse(node0.isCall());
275:       assertFalse(node0.isContinue());
276:       assertFalse(node0.isDo());
277:       assertFalse(node0.isDefaultCase());
278:       assertEquals(0, node0.getChildCount());
279:       assertFalse(node0.isTrue());
280:       assertEquals(40, node0.getType());
281:       assertFalse(node0.isNew());
282:       assertFalse(node0.isAssignAdd());
283:       assertFalse(node0.isOr());
284:       assertFalse(node0.isSetterDef());
285:       assertFalse(node0.isAdd());
286:       assertFalse(node0.isGetElem());
287:       assertFalse(node0.isAssign());
288:       assertFalse(node0.isDelProp());
289:       assertFalse(node0.isDec());
290:       assertFalse(node0.hasChildren());
291:       assertFalse(node0.isTypeOf());
292:       assertFalse(node0.isFunction());
293:       assertFalse(node0.isVoid());
294:       assertFalse(node0.isCast());
295:       assertFalse(node0.isExprResult());
296:       assertFalse(node0.isAnd());
297:       assertFalse(node0.isNot());
298:       assertFalse(node0.isObjectLit());
299:       assertFalse(node0.isWhile());
300:       assertFalse(node0.isReturn());
301:       assertFalse(node0.isGetProp());
302:       assertFalse(node0.isDebugger());
303:       assertFalse(boolean1);
304:       assertEquals(43, Node.IS_CONSTANT_NAME);
305:       assertEquals(36, Node.QUOTED_PROP);
306:       assertEquals(55, Node.INFERRED_FUNCTION);
307:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
308:       assertEquals(53, Node.INPUT_ID);
309:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
310:       assertEquals(47, Node.IS_DISPATCHER);
311:       assertEquals(8, Node.FLAG_NO_THROWS);
312:       assertEquals(2, Node.POST_FLAG);
313:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
314:       assertEquals(39, Node.EMPTY_BLOCK);
315:       assertEquals(40, Node.ORIGINALNAME_PROP);
316:       assertEquals(29, Node.JSDOC_INFO_PROP);
317:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
318:       assertEquals(15, Node.NO_SIDE_EFFECTS);
319:       assertEquals(57, Node.LAST_PROP);
320:       assertEquals(30, Node.VAR_ARGS_NAME);
321:       assertEquals(49, Node.DIRECT_EVAL);
322:       assertEquals(1, Node.DECR_FLAG);
323:       assertEquals(51, Node.STATIC_SOURCE_FILE);
324:       assertEquals(57, Node.REFLECTED_OBJECT);
325:       assertEquals(52, Node.LENGTH);
326:       assertEquals(46, Node.IS_NAMESPACE);
327:       assertEquals(54, Node.SLASH_V);
328:       assertEquals(56, Node.CHANGE_TIME);
329:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
330:       assertEquals(50, Node.FREE_CALL);
331:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
332:       assertEquals(48, Node.DIRECTIVES);
333:       assertEquals(37, Node.OPT_ARG_NAME);
334:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
335:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
336:       assertEquals(4095, Node.COLUMN_MASK);
337:       assertEquals(32, Node.INCRDECR_PROP);
338:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
339:       assertEquals(12, Node.COLUMN_BITS);
340:       
341:       Node node1 = Node.newString(3, "");
342:       assertFalse(node1.equals((Object)node0));
343:       assertNotSame(node1, node0);
344:       assertNotNull(node1);
345:       assertEquals(0, node1.getChildCount());
346:       assertFalse(node1.isParamList());
347:       assertFalse(node1.isNull());
348:       assertFalse(node1.isRegExp());
349:       assertFalse(node1.isName());
350:       assertFalse(node1.isFunction());
351:       assertFalse(node1.isCall());
352:       assertEquals(3, node1.getType());
353:       assertFalse(node1.isCatch());
354:       assertFalse(node1.isArrayLit());
355:       assertFalse(node1.isTry());
356:       assertFalse(node1.isDebugger());
357:       assertFalse(node1.isBlock());
358:       assertFalse(node1.isStringKey());
359:       assertFalse(node1.isFor());
360:       assertFalse(node1.isWhile());
361:       assertFalse(node1.isGetterDef());
362:       assertEquals((-1), node1.getLineno());
363:       assertFalse(node1.isIn());
364:       assertFalse(node1.isNE());
365:       assertFalse(node1.isIf());
366:       assertFalse(node1.hasMoreThanOneChild());
367:       assertFalse(node1.isContinue());
368:       assertFalse(node1.isCast());
369:       assertFalse(node1.isThrow());
370:       assertFalse(node1.isInc());
371:       assertFalse(node1.isSetterDef());
372:       assertFalse(node1.isThis());
373:       assertFalse(node1.isComma());
374:       assertFalse(node1.isAnd());
375:       assertFalse(node1.isWith());
376:       assertFalse(node1.isBreak());
377:       assertFalse(node1.isFalse());
378:       assertFalse(node1.isExprResult());
379:       assertFalse(node1.isInstanceOf());
380:       assertFalse(node1.hasOneChild());
381:       assertFalse(node1.isSwitch());
382:       assertEquals((-1), node1.getCharno());
383:       assertFalse(node1.isHook());
384:       assertFalse(node1.isString());
385:       assertEquals((-1), node1.getSourcePosition());
386:       assertFalse(node1.isCase());
387:       assertFalse(node1.isNumber());
388:       assertFalse(node1.isNot());
389:       assertFalse(node1.isObjectLit());
390:       assertFalse(node1.isGetProp());
391:       assertFalse(node1.isScript());
392:       assertFalse(node1.isReturn());
393:       assertFalse(node1.isAssignAdd());
394:       assertFalse(node1.isLabel());
395:       assertFalse(node1.isOr());
396:       assertFalse(node1.isDelProp());
397:       assertFalse(node1.hasChildren());
398:       assertFalse(node1.isTypeOf());
399:       assertFalse(node1.isDec());
400:       assertFalse(node1.isAssign());
401:       assertFalse(node1.isLabelName());
402:       assertFalse(node1.isGetElem());
403:       assertFalse(node1.isNew());
404:       assertFalse(node1.isVoid());
405:       assertFalse(node1.isTrue());
406:       assertFalse(node1.isVar());
407:       assertFalse(node1.isDefaultCase());
408:       assertFalse(node1.isDo());
409:       assertFalse(node1.isAdd());
410:       assertFalse(node1.isEmpty());
411:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
412:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
413:       assertEquals(53, Node.INPUT_ID);
414:       assertEquals(29, Node.JSDOC_INFO_PROP);
415:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
416:       assertEquals(37, Node.OPT_ARG_NAME);
417:       assertEquals(36, Node.QUOTED_PROP);
418:       assertEquals(43, Node.IS_CONSTANT_NAME);
419:       assertEquals(56, Node.CHANGE_TIME);
420:       assertEquals(46, Node.IS_NAMESPACE);
421:       assertEquals(51, Node.STATIC_SOURCE_FILE);
422:       assertEquals(49, Node.DIRECT_EVAL);
423:       assertEquals(1, Node.DECR_FLAG);
424:       assertEquals(4095, Node.COLUMN_MASK);
425:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
426:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
427:       assertEquals(32, Node.INCRDECR_PROP);
428:       assertEquals(12, Node.COLUMN_BITS);
429:       assertEquals(40, Node.ORIGINALNAME_PROP);
430:       assertEquals(50, Node.FREE_CALL);
431:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
432:       assertEquals(52, Node.LENGTH);
433:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
434:       assertEquals(8, Node.FLAG_NO_THROWS);
435:       assertEquals(48, Node.DIRECTIVES);
436:       assertEquals(57, Node.REFLECTED_OBJECT);
437:       assertEquals(54, Node.SLASH_V);
438:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
439:       assertEquals(30, Node.VAR_ARGS_NAME);
440:       assertEquals(15, Node.NO_SIDE_EFFECTS);
441:       assertEquals(55, Node.INFERRED_FUNCTION);
442:       assertEquals(39, Node.EMPTY_BLOCK);
443:       assertEquals(2, Node.POST_FLAG);
444:       assertEquals(57, Node.LAST_PROP);
445:       assertEquals(47, Node.IS_DISPATCHER);
446:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
447:       
448:       StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
449:       assertFalse(node1.equals((Object)node0));
450:       assertNotSame(node1, node0);
451:       assertNull(staticSourceFile0);
452:       assertEquals(0, node1.getChildCount());
453:       assertFalse(node1.isParamList());
454:       assertFalse(node1.isNull());
455:       assertFalse(node1.isRegExp());
456:       assertFalse(node1.isName());
457:       assertFalse(node1.isFunction());
458:       assertFalse(node1.isCall());
459:       assertEquals(3, node1.getType());
460:       assertFalse(node1.isCatch());
461:       assertFalse(node1.isArrayLit());
462:       assertFalse(node1.isTry());
463:       assertFalse(node1.isDebugger());
464:       assertFalse(node1.isBlock());
465:       assertFalse(node1.isStringKey());
466:       assertFalse(node1.isFor());
467:       assertFalse(node1.isWhile());
468:       assertFalse(node1.isGetterDef());
469:       assertEquals((-1), node1.getLineno());
470:       assertFalse(node1.isIn());
471:       assertFalse(node1.isNE());
472:       assertFalse(node1.isIf());
473:       assertFalse(node1.hasMoreThanOneChild());
474:       assertFalse(node1.isContinue());
475:       assertFalse(node1.isCast());
476:       assertFalse(node1.isThrow());
477:       assertFalse(node1.isInc());
478:       assertFalse(node1.isSetterDef());
479:       assertFalse(node1.isThis());
480:       assertFalse(node1.isComma());
481:       assertFalse(node1.isAnd());
482:       assertFalse(node1.isWith());
483:       assertFalse(node1.isBreak());
484:       assertFalse(node1.isFalse());
485:       assertFalse(node1.isExprResult());
486:       assertFalse(node1.isInstanceOf());
487:       assertFalse(node1.hasOneChild());
488:       assertFalse(node1.isSwitch());
489:       assertEquals((-1), node1.getCharno());
490:       assertFalse(node1.isHook());
491:       assertFalse(node1.isString());
492:       assertEquals((-1), node1.getSourcePosition());
493:       assertFalse(node1.isCase());
494:       assertFalse(node1.isNumber());
495:       assertFalse(node1.isNot());
496:       assertFalse(node1.isObjectLit());
497:       assertFalse(node1.isGetProp());
498:       assertFalse(node1.isScript());
499:       assertFalse(node1.isReturn());
500:       assertFalse(node1.isAssignAdd());
501:       assertFalse(node1.isLabel());
502:       assertFalse(node1.isOr());
503:       assertFalse(node1.isDelProp());
504:       assertFalse(node1.hasChildren());
505:       assertFalse(node1.isTypeOf());
506:       assertFalse(node1.isDec());
507:       assertFalse(node1.isAssign());
508:       assertFalse(node1.isLabelName());
509:       assertFalse(node1.isGetElem());
510:       assertFalse(node1.isNew());
511:       assertFalse(node1.isVoid());
512:       assertFalse(node1.isTrue());
513:       assertFalse(node1.isVar());
514:       assertFalse(node1.isDefaultCase());
515:       assertFalse(node1.isDo());
516:       assertFalse(node1.isAdd());
517:       assertFalse(node1.isEmpty());
518:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
519:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
520:       assertEquals(53, Node.INPUT_ID);
521:       assertEquals(29, Node.JSDOC_INFO_PROP);
522:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
523:       assertEquals(37, Node.OPT_ARG_NAME);
524:       assertEquals(36, Node.QUOTED_PROP);
525:       assertEquals(43, Node.IS_CONSTANT_NAME);
526:       assertEquals(56, Node.CHANGE_TIME);
527:       assertEquals(46, Node.IS_NAMESPACE);
528:       assertEquals(51, Node.STATIC_SOURCE_FILE);
529:       assertEquals(49, Node.DIRECT_EVAL);
530:       assertEquals(1, Node.DECR_FLAG);
531:       assertEquals(4095, Node.COLUMN_MASK);
532:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
533:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
534:       assertEquals(32, Node.INCRDECR_PROP);
535:       assertEquals(12, Node.COLUMN_BITS);
536:       assertEquals(40, Node.ORIGINALNAME_PROP);
537:       assertEquals(50, Node.FREE_CALL);
538:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
539:       assertEquals(52, Node.LENGTH);
540:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
541:       assertEquals(8, Node.FLAG_NO_THROWS);
542:       assertEquals(48, Node.DIRECTIVES);
543:       assertEquals(57, Node.REFLECTED_OBJECT);
544:       assertEquals(54, Node.SLASH_V);
545:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
546:       assertEquals(30, Node.VAR_ARGS_NAME);
547:       assertEquals(15, Node.NO_SIDE_EFFECTS);
548:       assertEquals(55, Node.INFERRED_FUNCTION);
549:       assertEquals(39, Node.EMPTY_BLOCK);
550:       assertEquals(2, Node.POST_FLAG);
551:       assertEquals(57, Node.LAST_PROP);
552:       assertEquals(47, Node.IS_DISPATCHER);
553:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
554:       
555:       Node node2 = node0.copyInformationFrom(node0);
556:       assertFalse(node0.equals((Object)node1));
557:       assertFalse(node2.equals((Object)node1));
558:       assertNotSame(node0, node1);
559:       assertSame(node0, node2);
560:       assertSame(node2, node0);
561:       assertNotSame(node2, node1);
562:       assertNotNull(node2);
563:       assertFalse(node0.isFalse());
564:       assertFalse(node0.isThrow());
565:       assertFalse(node0.isHook());
566:       assertFalse(node0.isThis());
567:       assertFalse(node0.isSwitch());
568:       assertFalse(node0.isComma());
569:       assertFalse(node0.isInstanceOf());
570:       assertFalse(node0.isBreak());
571:       assertFalse(node0.isIn());
572:       assertFalse(node0.isInc());
573:       assertFalse(node0.isEmpty());
574:       assertFalse(node0.isLabelName());
575:       assertFalse(node0.isGetterDef());
576:       assertFalse(node0.isIf());
577:       assertFalse(node0.isNE());
578:       assertFalse(node0.isFor());
579:       assertFalse(node0.isLabel());
580:       assertFalse(node0.isRegExp());
581:       assertEquals(36, node0.getLineno());
582:       assertFalse(node0.isArrayLit());
583:       assertFalse(node0.isCase());
584:       assertFalse(node0.hasMoreThanOneChild());
585:       assertFalse(node0.isWith());
586:       assertEquals(36, node0.getCharno());
587:       assertEquals(147492, node0.getSourcePosition());
588:       assertFalse(node0.isTry());
589:       assertTrue(node0.isString());
590:       assertFalse(node0.hasOneChild());
591:       assertFalse(node0.isNumber());
592:       assertFalse(node0.isScript());
593:       assertFalse(node0.isStringKey());
594:       assertFalse(node0.isName());
595:       assertFalse(node0.isVar());
596:       assertFalse(node0.isBlock());
597:       assertFalse(node0.isNull());
598:       assertFalse(node0.isParamList());
599:       assertFalse(node0.isCatch());
600:       assertFalse(node0.isCall());
601:       assertFalse(node0.isContinue());
602:       assertFalse(node0.isDo());
603:       assertFalse(node0.isDefaultCase());
604:       assertEquals(0, node0.getChildCount());
605:       assertFalse(node0.isTrue());
606:       assertEquals(40, node0.getType());
607:       assertFalse(node0.isNew());
608:       assertFalse(node0.isAssignAdd());
609:       assertFalse(node0.isOr());
610:       assertFalse(node0.isSetterDef());
611:       assertFalse(node0.isAdd());
612:       assertFalse(node0.isGetElem());
613:       assertFalse(node0.isAssign());
614:       assertFalse(node0.isDelProp());
615:       assertFalse(node0.isDec());
616:       assertFalse(node0.hasChildren());
617:       assertFalse(node0.isTypeOf());
618:       assertFalse(node0.isFunction());
619:       assertFalse(node0.isVoid());
620:       assertFalse(node0.isCast());
621:       assertFalse(node0.isExprResult());
622:       assertFalse(node0.isAnd());
623:       assertFalse(node0.isNot());
624:       assertFalse(node0.isObjectLit());
625:       assertFalse(node0.isWhile());
626:       assertFalse(node0.isReturn());
627:       assertFalse(node0.isGetProp());
628:       assertFalse(node0.isDebugger());
629:       assertFalse(node2.isTypeOf());
630:       assertEquals(36, node2.getLineno());
631:       assertFalse(node2.isNumber());
632:       assertFalse(node2.hasChildren());
633:       assertFalse(node2.isDec());
634:       assertFalse(node2.isAssignAdd());
635:       assertFalse(node2.isLabel());
636:       assertFalse(node2.isLabelName());
637:       assertFalse(node2.isReturn());
638:       assertFalse(node2.hasOneChild());
639:       assertFalse(node2.isOr());
640:       assertFalse(node2.isScript());
641:       assertTrue(node2.isString());
642:       assertFalse(node2.isBlock());
643:       assertFalse(node2.isWhile());
644:       assertFalse(node2.hasMoreThanOneChild());
645:       assertFalse(node2.isAssign());
646:       assertFalse(node2.isGetElem());
647:       assertFalse(node2.isWith());
648:       assertFalse(node2.isExprResult());
649:       assertFalse(node2.isCall());
650:       assertFalse(node2.isInstanceOf());
651:       assertFalse(node2.isSetterDef());
652:       assertFalse(node2.isComma());
653:       assertFalse(node2.isThrow());
654:       assertFalse(node2.isObjectLit());
655:       assertFalse(node2.isNot());
656:       assertFalse(node2.isGetProp());
657:       assertFalse(node2.isFunction());
658:       assertFalse(node2.isInc());
659:       assertFalse(node2.isDebugger());
660:       assertEquals(40, node2.getType());
661:       assertFalse(node2.isAnd());
662:       assertFalse(node2.isFalse());
663:       assertFalse(node2.isContinue());
664:       assertFalse(node2.isCast());
665:       assertFalse(node2.isNE());
666:       assertFalse(node2.isGetterDef());
667:       assertFalse(node2.isDelProp());
668:       assertFalse(node2.isFor());
669:       assertFalse(node2.isIf());
670:       assertEquals(147492, node2.getSourcePosition());
671:       assertFalse(node2.isCase());
672:       assertFalse(node2.isEmpty());
673:       assertFalse(node2.isIn());
674:       assertFalse(node2.isRegExp());
675:       assertFalse(node2.isVoid());
676:       assertFalse(node2.isTry());
677:       assertFalse(node2.isTrue());
678:       assertFalse(node2.isHook());
679:       assertFalse(node2.isCatch());
680:       assertFalse(node2.isNull());
681:       assertFalse(node2.isThis());
682:       assertFalse(node2.isBreak());
683:       assertFalse(node2.isName());
684:       assertFalse(node2.isStringKey());
685:       assertFalse(node2.isParamList());
686:       assertFalse(node2.isAdd());
687:       assertFalse(node2.isSwitch());
688:       assertFalse(node2.isDefaultCase());
689:       assertFalse(node2.isNew());
690:       assertFalse(node2.isDo());
691:       assertEquals(36, node2.getCharno());
692:       assertFalse(node2.isVar());
693:       assertFalse(node2.isArrayLit());
694:       assertEquals(0, node2.getChildCount());
695:       assertEquals(43, Node.IS_CONSTANT_NAME);
696:       assertEquals(36, Node.QUOTED_PROP);
697:       assertEquals(55, Node.INFERRED_FUNCTION);
698:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
699:       assertEquals(53, Node.INPUT_ID);
700:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
701:       assertEquals(47, Node.IS_DISPATCHER);
702:       assertEquals(8, Node.FLAG_NO_THROWS);
703:       assertEquals(2, Node.POST_FLAG);
704:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
705:       assertEquals(39, Node.EMPTY_BLOCK);
706:       assertEquals(40, Node.ORIGINALNAME_PROP);
707:       assertEquals(29, Node.JSDOC_INFO_PROP);
708:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
709:       assertEquals(15, Node.NO_SIDE_EFFECTS);
710:       assertEquals(57, Node.LAST_PROP);
711:       assertEquals(30, Node.VAR_ARGS_NAME);
712:       assertEquals(49, Node.DIRECT_EVAL);
713:       assertEquals(1, Node.DECR_FLAG);
714:       assertEquals(51, Node.STATIC_SOURCE_FILE);
715:       assertEquals(57, Node.REFLECTED_OBJECT);
716:       assertEquals(52, Node.LENGTH);
717:       assertEquals(46, Node.IS_NAMESPACE);
718:       assertEquals(54, Node.SLASH_V);
719:       assertEquals(56, Node.CHANGE_TIME);
720:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
721:       assertEquals(50, Node.FREE_CALL);
722:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
723:       assertEquals(48, Node.DIRECTIVES);
724:       assertEquals(37, Node.OPT_ARG_NAME);
725:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
726:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
727:       assertEquals(4095, Node.COLUMN_MASK);
728:       assertEquals(32, Node.INCRDECR_PROP);
729:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
730:       assertEquals(12, Node.COLUMN_BITS);
731:       assertEquals(52, Node.LENGTH);
732:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
733:       assertEquals(40, Node.ORIGINALNAME_PROP);
734:       assertEquals(15, Node.NO_SIDE_EFFECTS);
735:       assertEquals(30, Node.VAR_ARGS_NAME);
736:       assertEquals(1, Node.DECR_FLAG);
737:       assertEquals(12, Node.COLUMN_BITS);
738:       assertEquals(57, Node.LAST_PROP);
739:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
740:       assertEquals(37, Node.OPT_ARG_NAME);
741:       assertEquals(48, Node.DIRECTIVES);
742:       assertEquals(4095, Node.COLUMN_MASK);
743:       assertEquals(8, Node.FLAG_NO_THROWS);
744:       assertEquals(39, Node.EMPTY_BLOCK);
745:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
746:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
747:       assertEquals(55, Node.INFERRED_FUNCTION);
748:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
749:       assertEquals(49, Node.DIRECT_EVAL);
750:       assertEquals(36, Node.QUOTED_PROP);
751:       assertEquals(57, Node.REFLECTED_OBJECT);
752:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
753:       assertEquals(56, Node.CHANGE_TIME);
754:       assertEquals(53, Node.INPUT_ID);
755:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
756:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
757:       assertEquals(29, Node.JSDOC_INFO_PROP);
758:       assertEquals(47, Node.IS_DISPATCHER);
759:       assertEquals(32, Node.INCRDECR_PROP);
760:       assertEquals(51, Node.STATIC_SOURCE_FILE);
761:       assertEquals(2, Node.POST_FLAG);
762:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
763:       assertEquals(50, Node.FREE_CALL);
764:       assertEquals(46, Node.IS_NAMESPACE);
765:       assertEquals(54, Node.SLASH_V);
766:       assertEquals(43, Node.IS_CONSTANT_NAME);
767:       
768:       boolean boolean2 = node0.getBooleanProp(53);
769:       assertFalse(node0.equals((Object)node1));
770:       assertTrue(boolean2 == boolean0);
771:       assertTrue(boolean2 == boolean1);
772:       assertNotSame(node0, node1);
773:       assertSame(node0, node2);
774:       assertFalse(node0.isFalse());
775:       assertFalse(node0.isThrow());
776:       assertFalse(node0.isHook());
777:       assertFalse(node0.isThis());
778:       assertFalse(node0.isSwitch());
779:       assertFalse(node0.isComma());
780:       assertFalse(node0.isInstanceOf());
781:       assertFalse(node0.isBreak());
782:       assertFalse(node0.isIn());
783:       assertFalse(node0.isInc());
784:       assertFalse(node0.isEmpty());
785:       assertFalse(node0.isLabelName());
786:       assertFalse(node0.isGetterDef());
787:       assertFalse(node0.isIf());
788:       assertFalse(node0.isNE());
789:       assertFalse(node0.isFor());
790:       assertFalse(node0.isLabel());
791:       assertFalse(node0.isRegExp());
792:       assertEquals(36, node0.getLineno());
793:       assertFalse(node0.isArrayLit());
794:       assertFalse(node0.isCase());
795:       assertFalse(node0.hasMoreThanOneChild());
796:       assertFalse(node0.isWith());
797:       assertEquals(36, node0.getCharno());
798:       assertEquals(147492, node0.getSourcePosition());
799:       assertFalse(node0.isTry());
800:       assertTrue(node0.isString());
801:       assertFalse(node0.hasOneChild());
802:       assertFalse(node0.isNumber());
803:       assertFalse(node0.isScript());
804:       assertFalse(node0.isStringKey());
805:       assertFalse(node0.isName());
806:       assertFalse(node0.isVar());
807:       assertFalse(node0.isBlock());
808:       assertFalse(node0.isNull());
809:       assertFalse(node0.isParamList());
810:       assertFalse(node0.isCatch());
811:       assertFalse(node0.isCall());
812:       assertFalse(node0.isContinue());
813:       assertFalse(node0.isDo());
814:       assertFalse(node0.isDefaultCase());
815:       assertEquals(0, node0.getChildCount());
816:       assertFalse(node0.isTrue());
817:       assertEquals(40, node0.getType());
818:       assertFalse(node0.isNew());
819:       assertFalse(node0.isAssignAdd());
820:       assertFalse(node0.isOr());
821:       assertFalse(node0.isSetterDef());
822:       assertFalse(node0.isAdd());
823:       assertFalse(node0.isGetElem());
824:       assertFalse(node0.isAssign());
825:       assertFalse(node0.isDelProp());
826:       assertFalse(node0.isDec());
827:       assertFalse(node0.hasChildren());
828:       assertFalse(node0.isTypeOf());
829:       assertFalse(node0.isFunction());
830:       assertFalse(node0.isVoid());
831:       assertFalse(node0.isCast());
832:       assertFalse(node0.isExprResult());
833:       assertFalse(node0.isAnd());
834:       assertFalse(node0.isNot());
835:       assertFalse(node0.isObjectLit());
836:       assertFalse(node0.isWhile());
837:       assertFalse(node0.isReturn());
838:       assertFalse(node0.isGetProp());
839:       assertFalse(node0.isDebugger());
840:       assertFalse(boolean2);
841:       assertEquals(43, Node.IS_CONSTANT_NAME);
842:       assertEquals(36, Node.QUOTED_PROP);
843:       assertEquals(55, Node.INFERRED_FUNCTION);
844:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
845:       assertEquals(53, Node.INPUT_ID);
846:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
847:       assertEquals(47, Node.IS_DISPATCHER);
848:       assertEquals(8, Node.FLAG_NO_THROWS);
849:       assertEquals(2, Node.POST_FLAG);
850:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
851:       assertEquals(39, Node.EMPTY_BLOCK);
852:       assertEquals(40, Node.ORIGINALNAME_PROP);
853:       assertEquals(29, Node.JSDOC_INFO_PROP);
854:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
855:       assertEquals(15, Node.NO_SIDE_EFFECTS);
856:       assertEquals(57, Node.LAST_PROP);
857:       assertEquals(30, Node.VAR_ARGS_NAME);
858:       assertEquals(49, Node.DIRECT_EVAL);
859:       assertEquals(1, Node.DECR_FLAG);
860:       assertEquals(51, Node.STATIC_SOURCE_FILE);
861:       assertEquals(57, Node.REFLECTED_OBJECT);
862:       assertEquals(52, Node.LENGTH);
863:       assertEquals(46, Node.IS_NAMESPACE);
864:       assertEquals(54, Node.SLASH_V);
865:       assertEquals(56, Node.CHANGE_TIME);
866:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
867:       assertEquals(50, Node.FREE_CALL);
868:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
869:       assertEquals(48, Node.DIRECTIVES);
870:       assertEquals(37, Node.OPT_ARG_NAME);
871:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
872:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
873:       assertEquals(4095, Node.COLUMN_MASK);
874:       assertEquals(32, Node.INCRDECR_PROP);
875:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
876:       assertEquals(12, Node.COLUMN_BITS);
877:       
878:       boolean boolean3 = node0.isReturn();
879:       assertFalse(node0.equals((Object)node1));
880:       assertTrue(boolean3 == boolean1);
881:       assertTrue(boolean3 == boolean2);
882:       assertTrue(boolean3 == boolean0);
883:       assertNotSame(node0, node1);
884:       assertSame(node0, node2);
885:       assertFalse(node0.isFalse());
886:       assertFalse(node0.isThrow());
887:       assertFalse(node0.isHook());
888:       assertFalse(node0.isThis());
889:       assertFalse(node0.isSwitch());
890:       assertFalse(node0.isComma());
891:       assertFalse(node0.isInstanceOf());
892:       assertFalse(node0.isBreak());
893:       assertFalse(node0.isIn());
894:       assertFalse(node0.isInc());
895:       assertFalse(node0.isEmpty());
896:       assertFalse(node0.isLabelName());
897:       assertFalse(node0.isGetterDef());
898:       assertFalse(node0.isIf());
899:       assertFalse(node0.isNE());
900:       assertFalse(node0.isFor());
901:       assertFalse(node0.isLabel());
902:       assertFalse(node0.isRegExp());
903:       assertEquals(36, node0.getLineno());
904:       assertFalse(node0.isArrayLit());
905:       assertFalse(node0.isCase());
906:       assertFalse(node0.hasMoreThanOneChild());
907:       assertFalse(node0.isWith());
908:       assertEquals(36, node0.getCharno());
909:       assertEquals(147492, node0.getSourcePosition());
910:       assertFalse(node0.isTry());
911:       assertTrue(node0.isString());
912:       assertFalse(node0.hasOneChild());
913:       assertFalse(node0.isNumber());
914:       assertFalse(node0.isScript());
915:       assertFalse(node0.isStringKey());
916:       assertFalse(node0.isName());
917:       assertFalse(node0.isVar());
918:       assertFalse(node0.isBlock());
919:       assertFalse(node0.isNull());
920:       assertFalse(node0.isParamList());
921:       assertFalse(node0.isCatch());
922:       assertFalse(node0.isCall());
923:       assertFalse(node0.isContinue());
924:       assertFalse(node0.isDo());
925:       assertFalse(node0.isDefaultCase());
926:       assertEquals(0, node0.getChildCount());
927:       assertFalse(node0.isTrue());
928:       assertEquals(40, node0.getType());
929:       assertFalse(node0.isNew());
930:       assertFalse(node0.isAssignAdd());
931:       assertFalse(node0.isOr());
932:       assertFalse(node0.isSetterDef());
933:       assertFalse(node0.isAdd());
934:       assertFalse(node0.isGetElem());
935:       assertFalse(node0.isAssign());
936:       assertFalse(node0.isDelProp());
937:       assertFalse(node0.isDec());
938:       assertFalse(node0.hasChildren());
939:       assertFalse(node0.isTypeOf());
940:       assertFalse(node0.isFunction());
941:       assertFalse(node0.isVoid());
942:       assertFalse(node0.isCast());
943:       assertFalse(node0.isExprResult());
944:       assertFalse(node0.isAnd());
945:       assertFalse(node0.isNot());
946:       assertFalse(node0.isObjectLit());
947:       assertFalse(node0.isWhile());
948:       assertFalse(node0.isReturn());
949:       assertFalse(node0.isGetProp());
950:       assertFalse(node0.isDebugger());
951:       assertFalse(boolean3);
952:       assertEquals(43, Node.IS_CONSTANT_NAME);
953:       assertEquals(36, Node.QUOTED_PROP);
954:       assertEquals(55, Node.INFERRED_FUNCTION);
955:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
956:       assertEquals(53, Node.INPUT_ID);
957:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
958:       assertEquals(47, Node.IS_DISPATCHER);
959:       assertEquals(8, Node.FLAG_NO_THROWS);
960:       assertEquals(2, Node.POST_FLAG);
961:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
962:       assertEquals(39, Node.EMPTY_BLOCK);
963:       assertEquals(40, Node.ORIGINALNAME_PROP);
964:       assertEquals(29, Node.JSDOC_INFO_PROP);
965:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
966:       assertEquals(15, Node.NO_SIDE_EFFECTS);
967:       assertEquals(57, Node.LAST_PROP);
968:       assertEquals(30, Node.VAR_ARGS_NAME);
969:       assertEquals(49, Node.DIRECT_EVAL);
970:       assertEquals(1, Node.DECR_FLAG);
971:       assertEquals(51, Node.STATIC_SOURCE_FILE);
972:       assertEquals(57, Node.REFLECTED_OBJECT);
973:       assertEquals(52, Node.LENGTH);
974:       assertEquals(46, Node.IS_NAMESPACE);
975:       assertEquals(54, Node.SLASH_V);
976:       assertEquals(56, Node.CHANGE_TIME);
977:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
978:       assertEquals(50, Node.FREE_CALL);
979:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
980:       assertEquals(48, Node.DIRECTIVES);
981:       assertEquals(37, Node.OPT_ARG_NAME);
982:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
983:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
984:       assertEquals(4095, Node.COLUMN_MASK);
985:       assertEquals(32, Node.INCRDECR_PROP);
986:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
987:       assertEquals(12, Node.COLUMN_BITS);
988:       
989:       Node node3 = new Node(471, node2, node2, node0, node1);
990:       assertFalse(node0.equals((Object)node1));
991:       assertFalse(node1.equals((Object)node0));
992:       assertFalse(node1.equals((Object)node2));
993:       assertFalse(node2.equals((Object)node1));
994:       assertFalse(node3.equals((Object)node1));
995:       assertFalse(node3.equals((Object)node2));
996:       assertFalse(node3.equals((Object)node0));
997:       assertNotNull(node3);
998:       assertFalse(node0.isFalse());
999:       assertFalse(node0.isThrow());
1000:       assertFalse(node0.isHook());
1001:       assertFalse(node0.isThis());
1002:       assertFalse(node0.isSwitch());
1003:       assertFalse(node0.isComma());
1004:       assertFalse(node0.isInstanceOf());
1005:       assertFalse(node0.isBreak());
1006:       assertFalse(node0.isIn());
1007:       assertFalse(node0.isInc());
1008:       assertFalse(node0.isEmpty());
1009:       assertFalse(node0.isLabelName());
1010:       assertFalse(node0.isGetterDef());
1011:       assertFalse(node0.isIf());
1012:       assertFalse(node0.isNE());
1013:       assertFalse(node0.isFor());
1014:       assertFalse(node0.isLabel());
1015:       assertFalse(node0.isRegExp());
1016:       assertEquals(36, node0.getLineno());
1017:       assertFalse(node0.isArrayLit());
1018:       assertFalse(node0.isCase());
1019:       assertFalse(node0.hasMoreThanOneChild());
1020:       assertFalse(node0.isWith());
1021:       assertEquals(36, node0.getCharno());
1022:       assertEquals(147492, node0.getSourcePosition());
1023:       assertFalse(node0.isTry());
1024:       assertTrue(node0.isString());
1025:       assertFalse(node0.hasOneChild());
1026:       assertFalse(node0.isNumber());
1027:       assertFalse(node0.isScript());
1028:       assertFalse(node0.isStringKey());
1029:       assertFalse(node0.isName());
1030:       assertFalse(node0.isVar());
1031:       assertFalse(node0.isBlock());
1032:       assertFalse(node0.isNull());
1033:       assertFalse(node0.isParamList());
1034:       assertFalse(node0.isCatch());
1035:       assertFalse(node0.isCall());
1036:       assertFalse(node0.isContinue());
1037:       assertFalse(node0.isDo());
1038:       assertFalse(node0.isDefaultCase());
1039:       assertEquals(0, node0.getChildCount());
1040:       assertFalse(node0.isTrue());
1041:       assertEquals(40, node0.getType());
1042:       assertFalse(node0.isNew());
1043:       assertFalse(node0.isAssignAdd());
1044:       assertFalse(node0.isOr());
1045:       assertFalse(node0.isSetterDef());
1046:       assertFalse(node0.isAdd());
1047:       assertFalse(node0.isGetElem());
1048:       assertFalse(node0.isAssign());
1049:       assertFalse(node0.isDelProp());
1050:       assertFalse(node0.isDec());
1051:       assertFalse(node0.hasChildren());
1052:       assertFalse(node0.isTypeOf());
1053:       assertFalse(node0.isFunction());
1054:       assertFalse(node0.isVoid());
1055:       assertFalse(node0.isCast());
1056:       assertFalse(node0.isExprResult());
1057:       assertFalse(node0.isAnd());
1058:       assertFalse(node0.isNot());
1059:       assertFalse(node0.isObjectLit());
1060:       assertFalse(node0.isWhile());
1061:       assertFalse(node0.isReturn());
1062:       assertFalse(node0.isGetProp());
1063:       assertFalse(node0.isDebugger());
1064:       assertEquals(0, node1.getChildCount());
1065:       assertFalse(node1.isParamList());
1066:       assertFalse(node1.isNull());
1067:       assertFalse(node1.isRegExp());
1068:       assertFalse(node1.isName());
1069:       assertFalse(node1.isFunction());
1070:       assertFalse(node1.isCall());
1071:       assertEquals(3, node1.getType());
1072:       assertFalse(node1.isCatch());
1073:       assertFalse(node1.isArrayLit());
1074:       assertFalse(node1.isTry());
1075:       assertFalse(node1.isDebugger());
1076:       assertFalse(node1.isBlock());
1077:       assertFalse(node1.isStringKey());
1078:       assertFalse(node1.isFor());
1079:       assertFalse(node1.isWhile());
1080:       assertFalse(node1.isGetterDef());
1081:       assertEquals((-1), node1.getLineno());
1082:       assertFalse(node1.isIn());
1083:       assertFalse(node1.isNE());
1084:       assertFalse(node1.isIf());
1085:       assertFalse(node1.hasMoreThanOneChild());
1086:       assertFalse(node1.isContinue());
1087:       assertFalse(node1.isCast());
1088:       assertFalse(node1.isThrow());
1089:       assertFalse(node1.isInc());
1090:       assertFalse(node1.isSetterDef());
1091:       assertFalse(node1.isThis());
1092:       assertFalse(node1.isComma());
1093:       assertFalse(node1.isAnd());
1094:       assertFalse(node1.isWith());
1095:       assertFalse(node1.isBreak());
1096:       assertFalse(node1.isFalse());
1097:       assertFalse(node1.isExprResult());
1098:       assertFalse(node1.isInstanceOf());
1099:       assertFalse(node1.hasOneChild());
1100:       assertFalse(node1.isSwitch());
1101:       assertEquals((-1), node1.getCharno());
1102:       assertFalse(node1.isHook());
1103:       assertFalse(node1.isString());
1104:       assertEquals((-1), node1.getSourcePosition());
1105:       assertFalse(node1.isCase());
1106:       assertFalse(node1.isNumber());
1107:       assertFalse(node1.isNot());
1108:       assertFalse(node1.isObjectLit());
1109:       assertFalse(node1.isGetProp());
1110:       assertFalse(node1.isScript());
1111:       assertFalse(node1.isReturn());
1112:       assertFalse(node1.isAssignAdd());
1113:       assertFalse(node1.isLabel());
1114:       assertFalse(node1.isOr());
1115:       assertFalse(node1.isDelProp());
1116:       assertFalse(node1.hasChildren());
1117:       assertFalse(node1.isTypeOf());
1118:       assertFalse(node1.isDec());
1119:       assertFalse(node1.isAssign());
1120:       assertFalse(node1.isLabelName());
1121:       assertFalse(node1.isGetElem());
1122:       assertFalse(node1.isNew());
1123:       assertFalse(node1.isVoid());
1124:       assertFalse(node1.isTrue());
1125:       assertFalse(node1.isVar());
1126:       assertFalse(node1.isDefaultCase());
1127:       assertFalse(node1.isDo());
1128:       assertFalse(node1.isAdd());
1129:       assertFalse(node1.isEmpty());
1130:       assertFalse(node2.isTypeOf());
1131:       assertEquals(36, node2.getLineno());
1132:       assertFalse(node2.isNumber());
1133:       assertFalse(node2.hasChildren());
1134:       assertFalse(node2.isDec());
1135:       assertFalse(node2.isAssignAdd());
1136:       assertFalse(node2.isLabel());
1137:       assertFalse(node2.isLabelName());
1138:       assertFalse(node2.isReturn());
1139:       assertFalse(node2.hasOneChild());
1140:       assertFalse(node2.isOr());
1141:       assertFalse(node2.isScript());
1142:       assertTrue(node2.isString());
1143:       assertFalse(node2.isBlock());
1144:       assertFalse(node2.isWhile());
1145:       assertFalse(node2.hasMoreThanOneChild());
1146:       assertFalse(node2.isAssign());
1147:       assertFalse(node2.isGetElem());
1148:       assertFalse(node2.isWith());
1149:       assertFalse(node2.isExprResult());
1150:       assertFalse(node2.isCall());
1151:       assertFalse(node2.isInstanceOf());
1152:       assertFalse(node2.isSetterDef());
1153:       assertFalse(node2.isComma());
1154:       assertFalse(node2.isThrow());
1155:       assertFalse(node2.isObjectLit());
1156:       assertFalse(node2.isNot());
1157:       assertFalse(node2.isGetProp());
1158:       assertFalse(node2.isFunction());
1159:       assertFalse(node2.isInc());
1160:       assertFalse(node2.isDebugger());
1161:       assertEquals(40, node2.getType());
1162:       assertFalse(node2.isAnd());
1163:       assertFalse(node2.isFalse());
1164:       assertFalse(node2.isContinue());
1165:       assertFalse(node2.isCast());
1166:       assertFalse(node2.isNE());
1167:       assertFalse(node2.isGetterDef());
1168:       assertFalse(node2.isDelProp());
1169:       assertFalse(node2.isFor());
1170:       assertFalse(node2.isIf());
1171:       assertEquals(147492, node2.getSourcePosition());
1172:       assertFalse(node2.isCase());
1173:       assertFalse(node2.isEmpty());
1174:       assertFalse(node2.isIn());
1175:       assertFalse(node2.isRegExp());
1176:       assertFalse(node2.isVoid());
1177:       assertFalse(node2.isTry());
1178:       assertFalse(node2.isTrue());
1179:       assertFalse(node2.isHook());
1180:       assertFalse(node2.isCatch());
1181:       assertFalse(node2.isNull());
1182:       assertFalse(node2.isThis());
1183:       assertFalse(node2.isBreak());
1184:       assertFalse(node2.isName());
1185:       assertFalse(node2.isStringKey());
1186:       assertFalse(node2.isParamList());
1187:       assertFalse(node2.isAdd());
1188:       assertFalse(node2.isSwitch());
1189:       assertFalse(node2.isDefaultCase());
1190:       assertFalse(node2.isNew());
1191:       assertFalse(node2.isDo());
1192:       assertEquals(36, node2.getCharno());
1193:       assertFalse(node2.isVar());
1194:       assertFalse(node2.isArrayLit());
1195:       assertEquals(0, node2.getChildCount());
1196:       assertFalse(node3.isCase());
1197:       assertFalse(node3.isNE());
1198:       assertFalse(node3.isInc());
1199:       assertFalse(node3.isGetterDef());
1200:       assertEquals((-1), node3.getCharno());
1201:       assertFalse(node3.isEmpty());
1202:       assertFalse(node3.isIn());
1203:       assertFalse(node3.isString());
1204:       assertFalse(node3.isHook());
1205:       assertFalse(node3.isFor());
1206:       assertFalse(node3.isTry());
1207:       assertEquals(471, node3.getType());
1208:       assertFalse(node3.isIf());
1209:       assertFalse(node3.isRegExp());
1210:       assertFalse(node3.isThis());
1211:       assertFalse(node3.isBreak());
1212:       assertFalse(node3.isVoid());
1213:       assertFalse(node3.isDelProp());
1214:       assertTrue(node3.hasMoreThanOneChild());
1215:       assertFalse(node3.isComma());
1216:       assertTrue(node3.hasChildren());
1217:       assertFalse(node3.isInstanceOf());
1218:       assertFalse(node3.isCatch());
1219:       assertFalse(node3.isObjectLit());
1220:       assertEquals(2, node3.getChildCount());
1221:       assertFalse(node3.isAnd());
1222:       assertFalse(node3.isSetterDef());
1223:       assertFalse(node3.isGetProp());
1224:       assertFalse(node3.isDebugger());
1225:       assertFalse(node3.isNot());
1226:       assertFalse(node3.isCast());
1227:       assertFalse(node3.isThrow());
1228:       assertFalse(node3.isFunction());
1229:       assertFalse(node3.isFalse());
1230:       assertFalse(node3.isContinue());
1231:       assertEquals((-1), node3.getLineno());
1232:       assertFalse(node3.isAssignAdd());
1233:       assertFalse(node3.isDo());
1234:       assertFalse(node3.isLabel());
1235:       assertFalse(node3.isReturn());
1236:       assertFalse(node3.isWhile());
1237:       assertFalse(node3.isNumber());
1238:       assertEquals((-1), node3.getSourcePosition());
1239:       assertFalse(node3.isNew());
1240:       assertFalse(node3.isOr());
1241:       assertFalse(node3.isAdd());
1242:       assertFalse(node3.isCall());
1243:       assertFalse(node3.hasOneChild());
1244:       assertFalse(node3.isBlock());
1245:       assertFalse(node3.isName());
1246:       assertFalse(node3.isTypeOf());
1247:       assertFalse(node3.isExprResult());
1248:       assertFalse(node3.isDec());
1249:       assertFalse(node3.isAssign());
1250:       assertFalse(node3.isGetElem());
1251:       assertFalse(node3.isWith());
1252:       assertFalse(node3.isDefaultCase());
1253:       assertFalse(node3.isParamList());
1254:       assertFalse(node3.isScript());
1255:       assertFalse(node3.isNull());
1256:       assertFalse(node3.isTrue());
1257:       assertFalse(node3.isVar());
1258:       assertFalse(node3.isArrayLit());
1259:       assertFalse(node3.isLabelName());
1260:       assertFalse(node3.isStringKey());
1261:       assertFalse(node3.isSwitch());
1262:       assertEquals(43, Node.IS_CONSTANT_NAME);
1263:       assertEquals(36, Node.QUOTED_PROP);
1264:       assertEquals(55, Node.INFERRED_FUNCTION);
1265:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1266:       assertEquals(53, Node.INPUT_ID);
1267:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1268:       assertEquals(47, Node.IS_DISPATCHER);
1269:       assertEquals(8, Node.FLAG_NO_THROWS);
1270:       assertEquals(2, Node.POST_FLAG);
1271:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1272:       assertEquals(39, Node.EMPTY_BLOCK);
1273:       assertEquals(40, Node.ORIGINALNAME_PROP);
1274:       assertEquals(29, Node.JSDOC_INFO_PROP);
1275:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1276:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1277:       assertEquals(57, Node.LAST_PROP);
1278:       assertEquals(30, Node.VAR_ARGS_NAME);
1279:       assertEquals(49, Node.DIRECT_EVAL);
1280:       assertEquals(1, Node.DECR_FLAG);
1281:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1282:       assertEquals(57, Node.REFLECTED_OBJECT);
1283:       assertEquals(52, Node.LENGTH);
1284:       assertEquals(46, Node.IS_NAMESPACE);
1285:       assertEquals(54, Node.SLASH_V);
1286:       assertEquals(56, Node.CHANGE_TIME);
1287:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1288:       assertEquals(50, Node.FREE_CALL);
1289:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1290:       assertEquals(48, Node.DIRECTIVES);
1291:       assertEquals(37, Node.OPT_ARG_NAME);
1292:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1293:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1294:       assertEquals(4095, Node.COLUMN_MASK);
1295:       assertEquals(32, Node.INCRDECR_PROP);
1296:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1297:       assertEquals(12, Node.COLUMN_BITS);
1298:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1299:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1300:       assertEquals(53, Node.INPUT_ID);
1301:       assertEquals(29, Node.JSDOC_INFO_PROP);
1302:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1303:       assertEquals(37, Node.OPT_ARG_NAME);
1304:       assertEquals(36, Node.QUOTED_PROP);
1305:       assertEquals(43, Node.IS_CONSTANT_NAME);
1306:       assertEquals(56, Node.CHANGE_TIME);
1307:       assertEquals(46, Node.IS_NAMESPACE);
1308:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1309:       assertEquals(49, Node.DIRECT_EVAL);
1310:       assertEquals(1, Node.DECR_FLAG);
1311:       assertEquals(4095, Node.COLUMN_MASK);
1312:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1313:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1314:       assertEquals(32, Node.INCRDECR_PROP);
1315:       assertEquals(12, Node.COLUMN_BITS);
1316:       assertEquals(40, Node.ORIGINALNAME_PROP);
1317:       assertEquals(50, Node.FREE_CALL);
1318:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1319:       assertEquals(52, Node.LENGTH);
1320:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1321:       assertEquals(8, Node.FLAG_NO_THROWS);
1322:       assertEquals(48, Node.DIRECTIVES);
1323:       assertEquals(57, Node.REFLECTED_OBJECT);
1324:       assertEquals(54, Node.SLASH_V);
1325:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1326:       assertEquals(30, Node.VAR_ARGS_NAME);
1327:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1328:       assertEquals(55, Node.INFERRED_FUNCTION);
1329:       assertEquals(39, Node.EMPTY_BLOCK);
1330:       assertEquals(2, Node.POST_FLAG);
1331:       assertEquals(57, Node.LAST_PROP);
1332:       assertEquals(47, Node.IS_DISPATCHER);
1333:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1334:       assertEquals(52, Node.LENGTH);
1335:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1336:       assertEquals(40, Node.ORIGINALNAME_PROP);
1337:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1338:       assertEquals(30, Node.VAR_ARGS_NAME);
1339:       assertEquals(1, Node.DECR_FLAG);
1340:       assertEquals(12, Node.COLUMN_BITS);
1341:       assertEquals(57, Node.LAST_PROP);
1342:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1343:       assertEquals(37, Node.OPT_ARG_NAME);
1344:       assertEquals(48, Node.DIRECTIVES);
1345:       assertEquals(4095, Node.COLUMN_MASK);
1346:       assertEquals(8, Node.FLAG_NO_THROWS);
1347:       assertEquals(39, Node.EMPTY_BLOCK);
1348:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1349:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1350:       assertEquals(55, Node.INFERRED_FUNCTION);
1351:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1352:       assertEquals(49, Node.DIRECT_EVAL);
1353:       assertEquals(36, Node.QUOTED_PROP);
1354:       assertEquals(57, Node.REFLECTED_OBJECT);
1355:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1356:       assertEquals(56, Node.CHANGE_TIME);
1357:       assertEquals(53, Node.INPUT_ID);
1358:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1359:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1360:       assertEquals(29, Node.JSDOC_INFO_PROP);
1361:       assertEquals(47, Node.IS_DISPATCHER);
1362:       assertEquals(32, Node.INCRDECR_PROP);
1363:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1364:       assertEquals(2, Node.POST_FLAG);
1365:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1366:       assertEquals(50, Node.FREE_CALL);
1367:       assertEquals(46, Node.IS_NAMESPACE);
1368:       assertEquals(54, Node.SLASH_V);
1369:       assertEquals(43, Node.IS_CONSTANT_NAME);
1370:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1371:       assertEquals(50, Node.FREE_CALL);
1372:       assertEquals(40, Node.ORIGINALNAME_PROP);
1373:       assertEquals(8, Node.FLAG_NO_THROWS);
1374:       assertEquals(39, Node.EMPTY_BLOCK);
1375:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1376:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1377:       assertEquals(57, Node.LAST_PROP);
1378:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1379:       assertEquals(49, Node.DIRECT_EVAL);
1380:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1381:       assertEquals(36, Node.QUOTED_PROP);
1382:       assertEquals(55, Node.INFERRED_FUNCTION);
1383:       assertEquals(4095, Node.COLUMN_MASK);
1384:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1385:       assertEquals(52, Node.LENGTH);
1386:       assertEquals(48, Node.DIRECTIVES);
1387:       assertEquals(37, Node.OPT_ARG_NAME);
1388:       assertEquals(57, Node.REFLECTED_OBJECT);
1389:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1390:       assertEquals(56, Node.CHANGE_TIME);
1391:       assertEquals(29, Node.JSDOC_INFO_PROP);
1392:       assertEquals(47, Node.IS_DISPATCHER);
1393:       assertEquals(2, Node.POST_FLAG);
1394:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1395:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1396:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1397:       assertEquals(53, Node.INPUT_ID);
1398:       assertEquals(32, Node.INCRDECR_PROP);
1399:       assertEquals(12, Node.COLUMN_BITS);
1400:       assertEquals(30, Node.VAR_ARGS_NAME);
1401:       assertEquals(1, Node.DECR_FLAG);
1402:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1403:       assertEquals(46, Node.IS_NAMESPACE);
1404:       assertEquals(54, Node.SLASH_V);
1405:       assertEquals(43, Node.IS_CONSTANT_NAME);
1406:       
1407:       String string0 = node0.toString(false, false, false);
1408:       assertFalse(node0.equals((Object)node1));
1409:       assertFalse(node0.equals((Object)node3));
1410:       assertNotSame(node0, node1);
1411:       assertSame(node0, node2);
1412:       assertNotNull(string0);
1413:       assertFalse(node0.isFalse());
1414:       assertFalse(node0.isThrow());
1415:       assertFalse(node0.isHook());
1416:       assertFalse(node0.isThis());
1417:       assertFalse(node0.isSwitch());
1418:       assertFalse(node0.isComma());
1419:       assertFalse(node0.isInstanceOf());
1420:       assertFalse(node0.isBreak());
1421:       assertFalse(node0.isIn());
1422:       assertFalse(node0.isInc());
1423:       assertFalse(node0.isEmpty());
1424:       assertFalse(node0.isLabelName());
1425:       assertFalse(node0.isGetterDef());
1426:       assertFalse(node0.isIf());
1427:       assertFalse(node0.isNE());
1428:       assertFalse(node0.isFor());
1429:       assertFalse(node0.isLabel());
1430:       assertFalse(node0.isRegExp());
1431:       assertEquals(36, node0.getLineno());
1432:       assertFalse(node0.isArrayLit());
1433:       assertFalse(node0.isCase());
1434:       assertFalse(node0.hasMoreThanOneChild());
1435:       assertFalse(node0.isWith());
1436:       assertEquals(36, node0.getCharno());
1437:       assertEquals(147492, node0.getSourcePosition());
1438:       assertFalse(node0.isTry());
1439:       assertTrue(node0.isString());
1440:       assertFalse(node0.hasOneChild());
1441:       assertFalse(node0.isNumber());
1442:       assertFalse(node0.isScript());
1443:       assertFalse(node0.isStringKey());
1444:       assertFalse(node0.isName());
1445:       assertFalse(node0.isVar());
1446:       assertFalse(node0.isBlock());
1447:       assertFalse(node0.isNull());
1448:       assertFalse(node0.isParamList());
1449:       assertFalse(node0.isCatch());
1450:       assertFalse(node0.isCall());
1451:       assertFalse(node0.isContinue());
1452:       assertFalse(node0.isDo());
1453:       assertFalse(node0.isDefaultCase());
1454:       assertEquals(0, node0.getChildCount());
1455:       assertFalse(node0.isTrue());
1456:       assertEquals(40, node0.getType());
1457:       assertFalse(node0.isNew());
1458:       assertFalse(node0.isAssignAdd());
1459:       assertFalse(node0.isOr());
1460:       assertFalse(node0.isSetterDef());
1461:       assertFalse(node0.isAdd());
1462:       assertFalse(node0.isGetElem());
1463:       assertFalse(node0.isAssign());
1464:       assertFalse(node0.isDelProp());
1465:       assertFalse(node0.isDec());
1466:       assertFalse(node0.hasChildren());
1467:       assertFalse(node0.isTypeOf());
1468:       assertFalse(node0.isFunction());
1469:       assertFalse(node0.isVoid());
1470:       assertFalse(node0.isCast());
1471:       assertFalse(node0.isExprResult());
1472:       assertFalse(node0.isAnd());
1473:       assertFalse(node0.isNot());
1474:       assertFalse(node0.isObjectLit());
1475:       assertFalse(node0.isWhile());
1476:       assertFalse(node0.isReturn());
1477:       assertFalse(node0.isGetProp());
1478:       assertFalse(node0.isDebugger());
1479:       assertEquals("STRING ", string0);
1480:       assertEquals(43, Node.IS_CONSTANT_NAME);
1481:       assertEquals(36, Node.QUOTED_PROP);
1482:       assertEquals(55, Node.INFERRED_FUNCTION);
1483:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1484:       assertEquals(53, Node.INPUT_ID);
1485:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1486:       assertEquals(47, Node.IS_DISPATCHER);
1487:       assertEquals(8, Node.FLAG_NO_THROWS);
1488:       assertEquals(2, Node.POST_FLAG);
1489:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1490:       assertEquals(39, Node.EMPTY_BLOCK);
1491:       assertEquals(40, Node.ORIGINALNAME_PROP);
1492:       assertEquals(29, Node.JSDOC_INFO_PROP);
1493:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1494:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1495:       assertEquals(57, Node.LAST_PROP);
1496:       assertEquals(30, Node.VAR_ARGS_NAME);
1497:       assertEquals(49, Node.DIRECT_EVAL);
1498:       assertEquals(1, Node.DECR_FLAG);
1499:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1500:       assertEquals(57, Node.REFLECTED_OBJECT);
1501:       assertEquals(52, Node.LENGTH);
1502:       assertEquals(46, Node.IS_NAMESPACE);
1503:       assertEquals(54, Node.SLASH_V);
1504:       assertEquals(56, Node.CHANGE_TIME);
1505:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1506:       assertEquals(50, Node.FREE_CALL);
1507:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1508:       assertEquals(48, Node.DIRECTIVES);
1509:       assertEquals(37, Node.OPT_ARG_NAME);
1510:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1511:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1512:       assertEquals(4095, Node.COLUMN_MASK);
1513:       assertEquals(32, Node.INCRDECR_PROP);
1514:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1515:       assertEquals(12, Node.COLUMN_BITS);
1516:       
1517:       boolean boolean4 = node2.isTrue();
1518:       assertFalse(node0.equals((Object)node1));
1519:       assertFalse(node0.equals((Object)node3));
1520:       assertFalse(node2.equals((Object)node3));
1521:       assertFalse(node2.equals((Object)node1));
1522:       assertTrue(boolean4 == boolean1);
1523:       assertTrue(boolean4 == boolean2);
1524:       assertTrue(boolean4 == boolean0);
1525:       assertTrue(boolean4 == boolean3);
1526:       assertNotSame(node0, node1);
1527:       assertSame(node0, node2);
1528:       assertSame(node2, node0);
1529:       assertNotSame(node2, node1);
1530:       assertFalse(node0.isFalse());
1531:       assertFalse(node0.isThrow());
1532:       assertFalse(node0.isHook());
1533:       assertFalse(node0.isThis());
1534:       assertFalse(node0.isSwitch());
1535:       assertFalse(node0.isComma());
1536:       assertFalse(node0.isInstanceOf());
1537:       assertFalse(node0.isBreak());
1538:       assertFalse(node0.isIn());
1539:       assertFalse(node0.isInc());
1540:       assertFalse(node0.isEmpty());
1541:       assertFalse(node0.isLabelName());
1542:       assertFalse(node0.isGetterDef());
1543:       assertFalse(node0.isIf());
1544:       assertFalse(node0.isNE());
1545:       assertFalse(node0.isFor());
1546:       assertFalse(node0.isLabel());
1547:       assertFalse(node0.isRegExp());
1548:       assertEquals(36, node0.getLineno());
1549:       assertFalse(node0.isArrayLit());
1550:       assertFalse(node0.isCase());
1551:       assertFalse(node0.hasMoreThanOneChild());
1552:       assertFalse(node0.isWith());
1553:       assertEquals(36, node0.getCharno());
1554:       assertEquals(147492, node0.getSourcePosition());
1555:       assertFalse(node0.isTry());
1556:       assertTrue(node0.isString());
1557:       assertFalse(node0.hasOneChild());
1558:       assertFalse(node0.isNumber());
1559:       assertFalse(node0.isScript());
1560:       assertFalse(node0.isStringKey());
1561:       assertFalse(node0.isName());
1562:       assertFalse(node0.isVar());
1563:       assertFalse(node0.isBlock());
1564:       assertFalse(node0.isNull());
1565:       assertFalse(node0.isParamList());
1566:       assertFalse(node0.isCatch());
1567:       assertFalse(node0.isCall());
1568:       assertFalse(node0.isContinue());
1569:       assertFalse(node0.isDo());
1570:       assertFalse(node0.isDefaultCase());
1571:       assertEquals(0, node0.getChildCount());
1572:       assertFalse(node0.isTrue());
1573:       assertEquals(40, node0.getType());
1574:       assertFalse(node0.isNew());
1575:       assertFalse(node0.isAssignAdd());
1576:       assertFalse(node0.isOr());
1577:       assertFalse(node0.isSetterDef());
1578:       assertFalse(node0.isAdd());
1579:       assertFalse(node0.isGetElem());
1580:       assertFalse(node0.isAssign());
1581:       assertFalse(node0.isDelProp());
1582:       assertFalse(node0.isDec());
1583:       assertFalse(node0.hasChildren());
1584:       assertFalse(node0.isTypeOf());
1585:       assertFalse(node0.isFunction());
1586:       assertFalse(node0.isVoid());
1587:       assertFalse(node0.isCast());
1588:       assertFalse(node0.isExprResult());
1589:       assertFalse(node0.isAnd());
1590:       assertFalse(node0.isNot());
1591:       assertFalse(node0.isObjectLit());
1592:       assertFalse(node0.isWhile());
1593:       assertFalse(node0.isReturn());
1594:       assertFalse(node0.isGetProp());
1595:       assertFalse(node0.isDebugger());
1596:       assertFalse(node2.isTypeOf());
1597:       assertEquals(36, node2.getLineno());
1598:       assertFalse(node2.isNumber());
1599:       assertFalse(node2.hasChildren());
1600:       assertFalse(node2.isDec());
1601:       assertFalse(node2.isAssignAdd());
1602:       assertFalse(node2.isLabel());
1603:       assertFalse(node2.isLabelName());
1604:       assertFalse(node2.isReturn());
1605:       assertFalse(node2.hasOneChild());
1606:       assertFalse(node2.isOr());
1607:       assertFalse(node2.isScript());
1608:       assertTrue(node2.isString());
1609:       assertFalse(node2.isBlock());
1610:       assertFalse(node2.isWhile());
1611:       assertFalse(node2.hasMoreThanOneChild());
1612:       assertFalse(node2.isAssign());
1613:       assertFalse(node2.isGetElem());
1614:       assertFalse(node2.isWith());
1615:       assertFalse(node2.isExprResult());
1616:       assertFalse(node2.isCall());
1617:       assertFalse(node2.isInstanceOf());
1618:       assertFalse(node2.isSetterDef());
1619:       assertFalse(node2.isComma());
1620:       assertFalse(node2.isThrow());
1621:       assertFalse(node2.isObjectLit());
1622:       assertFalse(node2.isNot());
1623:       assertFalse(node2.isGetProp());
1624:       assertFalse(node2.isFunction());
1625:       assertFalse(node2.isInc());
1626:       assertFalse(node2.isDebugger());
1627:       assertEquals(40, node2.getType());
1628:       assertFalse(node2.isAnd());
1629:       assertFalse(node2.isFalse());
1630:       assertFalse(node2.isContinue());
1631:       assertFalse(node2.isCast());
1632:       assertFalse(node2.isNE());
1633:       assertFalse(node2.isGetterDef());
1634:       assertFalse(node2.isDelProp());
1635:       assertFalse(node2.isFor());
1636:       assertFalse(node2.isIf());
1637:       assertEquals(147492, node2.getSourcePosition());
1638:       assertFalse(node2.isCase());
1639:       assertFalse(node2.isEmpty());
1640:       assertFalse(node2.isIn());
1641:       assertFalse(node2.isRegExp());
1642:       assertFalse(node2.isVoid());
1643:       assertFalse(node2.isTry());
1644:       assertFalse(node2.isTrue());
1645:       assertFalse(node2.isHook());
1646:       assertFalse(node2.isCatch());
1647:       assertFalse(node2.isNull());
1648:       assertFalse(node2.isThis());
1649:       assertFalse(node2.isBreak());
1650:       assertFalse(node2.isName());
1651:       assertFalse(node2.isStringKey());
1652:       assertFalse(node2.isParamList());
1653:       assertFalse(node2.isAdd());
1654:       assertFalse(node2.isSwitch());
1655:       assertFalse(node2.isDefaultCase());
1656:       assertFalse(node2.isNew());
1657:       assertFalse(node2.isDo());
1658:       assertEquals(36, node2.getCharno());
1659:       assertFalse(node2.isVar());
1660:       assertFalse(node2.isArrayLit());
1661:       assertEquals(0, node2.getChildCount());
1662:       assertFalse(boolean4);
1663:       assertEquals(43, Node.IS_CONSTANT_NAME);
1664:       assertEquals(36, Node.QUOTED_PROP);
1665:       assertEquals(55, Node.INFERRED_FUNCTION);
1666:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1667:       assertEquals(53, Node.INPUT_ID);
1668:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1669:       assertEquals(47, Node.IS_DISPATCHER);
1670:       assertEquals(8, Node.FLAG_NO_THROWS);
1671:       assertEquals(2, Node.POST_FLAG);
1672:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1673:       assertEquals(39, Node.EMPTY_BLOCK);
1674:       assertEquals(40, Node.ORIGINALNAME_PROP);
1675:       assertEquals(29, Node.JSDOC_INFO_PROP);
1676:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1677:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1678:       assertEquals(57, Node.LAST_PROP);
1679:       assertEquals(30, Node.VAR_ARGS_NAME);
1680:       assertEquals(49, Node.DIRECT_EVAL);
1681:       assertEquals(1, Node.DECR_FLAG);
1682:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1683:       assertEquals(57, Node.REFLECTED_OBJECT);
1684:       assertEquals(52, Node.LENGTH);
1685:       assertEquals(46, Node.IS_NAMESPACE);
1686:       assertEquals(54, Node.SLASH_V);
1687:       assertEquals(56, Node.CHANGE_TIME);
1688:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1689:       assertEquals(50, Node.FREE_CALL);
1690:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1691:       assertEquals(48, Node.DIRECTIVES);
1692:       assertEquals(37, Node.OPT_ARG_NAME);
1693:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1694:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1695:       assertEquals(4095, Node.COLUMN_MASK);
1696:       assertEquals(32, Node.INCRDECR_PROP);
1697:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1698:       assertEquals(12, Node.COLUMN_BITS);
1699:       assertEquals(52, Node.LENGTH);
1700:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1701:       assertEquals(40, Node.ORIGINALNAME_PROP);
1702:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1703:       assertEquals(30, Node.VAR_ARGS_NAME);
1704:       assertEquals(1, Node.DECR_FLAG);
1705:       assertEquals(12, Node.COLUMN_BITS);
1706:       assertEquals(57, Node.LAST_PROP);
1707:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1708:       assertEquals(37, Node.OPT_ARG_NAME);
1709:       assertEquals(48, Node.DIRECTIVES);
1710:       assertEquals(4095, Node.COLUMN_MASK);
1711:       assertEquals(8, Node.FLAG_NO_THROWS);
1712:       assertEquals(39, Node.EMPTY_BLOCK);
1713:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1714:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1715:       assertEquals(55, Node.INFERRED_FUNCTION);
1716:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1717:       assertEquals(49, Node.DIRECT_EVAL);
1718:       assertEquals(36, Node.QUOTED_PROP);
1719:       assertEquals(57, Node.REFLECTED_OBJECT);
1720:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1721:       assertEquals(56, Node.CHANGE_TIME);
1722:       assertEquals(53, Node.INPUT_ID);
1723:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1724:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1725:       assertEquals(29, Node.JSDOC_INFO_PROP);
1726:       assertEquals(47, Node.IS_DISPATCHER);
1727:       
1728:       Iterable<Node> iterable0 = node3.children();
1729:       assertFalse(node0.equals((Object)node1));
1730:       assertFalse(node0.equals((Object)node3));
1731:       assertFalse(node1.equals((Object)node3));
1732:       assertFalse(node1.equals((Object)node0));
1733:       assertFalse(node1.equals((Object)node2));
1734:       assertFalse(node2.equals((Object)node3));
1735:       assertFalse(node2.equals((Object)node1));
1736:       assertFalse(node3.equals((Object)node1));
1737:       assertFalse(node3.equals((Object)node2));
1738:       assertFalse(node3.equals((Object)node0));
1739:       assertNotSame(node0, node1);
1740:       assertSame(node0, node2);
1741:       assertNotSame(node1, node0);
1742:       assertNotSame(node1, node2);
1743:       assertSame(node2, node0);
1744:       assertNotSame(node2, node1);
1745:       assertNotNull(iterable0);
1746:       assertFalse(node0.isFalse());
1747:       assertFalse(node0.isThrow());
1748:       assertFalse(node0.isHook());
1749:       assertFalse(node0.isThis());
1750:       assertFalse(node0.isSwitch());
1751:       assertFalse(node0.isComma());
1752:       assertFalse(node0.isInstanceOf());
1753:       assertFalse(node0.isBreak());
1754:       assertFalse(node0.isIn());
1755:       assertFalse(node0.isInc());
1756:       assertFalse(node0.isEmpty());
1757:       assertFalse(node0.isLabelName());
1758:       assertFalse(node0.isGetterDef());
1759:       assertFalse(node0.isIf());
1760:       assertFalse(node0.isNE());
1761:       assertFalse(node0.isFor());
1762:       assertFalse(node0.isLabel());
1763:       assertFalse(node0.isRegExp());
1764:       assertEquals(36, node0.getLineno());
1765:       assertFalse(node0.isArrayLit());
1766:       assertFalse(node0.isCase());
1767:       assertFalse(node0.hasMoreThanOneChild());
1768:       assertFalse(node0.isWith());
1769:       assertEquals(36, node0.getCharno());
1770:       assertEquals(147492, node0.getSourcePosition());
1771:       assertFalse(node0.isTry());
1772:       assertTrue(node0.isString());
1773:       assertFalse(node0.hasOneChild());
1774:       assertFalse(node0.isNumber());
1775:       assertFalse(node0.isScript());
1776:       assertFalse(node0.isStringKey());
1777:       assertFalse(node0.isName());
1778:       assertFalse(node0.isVar());
1779:       assertFalse(node0.isBlock());
1780:       assertFalse(node0.isNull());
1781:       assertFalse(node0.isParamList());
1782:       assertFalse(node0.isCatch());
1783:       assertFalse(node0.isCall());
1784:       assertFalse(node0.isContinue());
1785:       assertFalse(node0.isDo());
1786:       assertFalse(node0.isDefaultCase());
1787:       assertEquals(0, node0.getChildCount());
1788:       assertFalse(node0.isTrue());
1789:       assertEquals(40, node0.getType());
1790:       assertFalse(node0.isNew());
1791:       assertFalse(node0.isAssignAdd());
1792:       assertFalse(node0.isOr());
1793:       assertFalse(node0.isSetterDef());
1794:       assertFalse(node0.isAdd());
1795:       assertFalse(node0.isGetElem());
1796:       assertFalse(node0.isAssign());
1797:       assertFalse(node0.isDelProp());
1798:       assertFalse(node0.isDec());
1799:       assertFalse(node0.hasChildren());
1800:       assertFalse(node0.isTypeOf());
1801:       assertFalse(node0.isFunction());
1802:       assertFalse(node0.isVoid());
1803:       assertFalse(node0.isCast());
1804:       assertFalse(node0.isExprResult());
1805:       assertFalse(node0.isAnd());
1806:       assertFalse(node0.isNot());
1807:       assertFalse(node0.isObjectLit());
1808:       assertFalse(node0.isWhile());
1809:       assertFalse(node0.isReturn());
1810:       assertFalse(node0.isGetProp());
1811:       assertFalse(node0.isDebugger());
1812:       assertEquals(0, node1.getChildCount());
1813:       assertFalse(node1.isParamList());
1814:       assertFalse(node1.isNull());
1815:       assertFalse(node1.isRegExp());
1816:       assertFalse(node1.isName());
1817:       assertFalse(node1.isFunction());
1818:       assertFalse(node1.isCall());
1819:       assertEquals(3, node1.getType());
1820:       assertFalse(node1.isCatch());
1821:       assertFalse(node1.isArrayLit());
1822:       assertFalse(node1.isTry());
1823:       assertFalse(node1.isDebugger());
1824:       assertFalse(node1.isBlock());
1825:       assertFalse(node1.isStringKey());
1826:       assertFalse(node1.isFor());
1827:       assertFalse(node1.isWhile());
1828:       assertFalse(node1.isGetterDef());
1829:       assertEquals((-1), node1.getLineno());
1830:       assertFalse(node1.isIn());
1831:       assertFalse(node1.isNE());
1832:       assertFalse(node1.isIf());
1833:       assertFalse(node1.hasMoreThanOneChild());
1834:       assertFalse(node1.isContinue());
1835:       assertFalse(node1.isCast());
1836:       assertFalse(node1.isThrow());
1837:       assertFalse(node1.isInc());
1838:       assertFalse(node1.isSetterDef());
1839:       assertFalse(node1.isThis());
1840:       assertFalse(node1.isComma());
1841:       assertFalse(node1.isAnd());
1842:       assertFalse(node1.isWith());
1843:       assertFalse(node1.isBreak());
1844:       assertFalse(node1.isFalse());
1845:       assertFalse(node1.isExprResult());
1846:       assertFalse(node1.isInstanceOf());
1847:       assertFalse(node1.hasOneChild());
1848:       assertFalse(node1.isSwitch());
1849:       assertEquals((-1), node1.getCharno());
1850:       assertFalse(node1.isHook());
1851:       assertFalse(node1.isString());
1852:       assertEquals((-1), node1.getSourcePosition());
1853:       assertFalse(node1.isCase());
1854:       assertFalse(node1.isNumber());
1855:       assertFalse(node1.isNot());
1856:       assertFalse(node1.isObjectLit());
1857:       assertFalse(node1.isGetProp());
1858:       assertFalse(node1.isScript());
1859:       assertFalse(node1.isReturn());
1860:       assertFalse(node1.isAssignAdd());
1861:       assertFalse(node1.isLabel());
1862:       assertFalse(node1.isOr());
1863:       assertFalse(node1.isDelProp());
1864:       assertFalse(node1.hasChildren());
1865:       assertFalse(node1.isTypeOf());
1866:       assertFalse(node1.isDec());
1867:       assertFalse(node1.isAssign());
1868:       assertFalse(node1.isLabelName());
1869:       assertFalse(node1.isGetElem());
1870:       assertFalse(node1.isNew());
1871:       assertFalse(node1.isVoid());
1872:       assertFalse(node1.isTrue());
1873:       assertFalse(node1.isVar());
1874:       assertFalse(node1.isDefaultCase());
1875:       assertFalse(node1.isDo());
1876:       assertFalse(node1.isAdd());
1877:       assertFalse(node1.isEmpty());
1878:       assertFalse(node2.isTypeOf());
1879:       assertEquals(36, node2.getLineno());
1880:       assertFalse(node2.isNumber());
1881:       assertFalse(node2.hasChildren());
1882:       assertFalse(node2.isDec());
1883:       assertFalse(node2.isAssignAdd());
1884:       assertFalse(node2.isLabel());
1885:       assertFalse(node2.isLabelName());
1886:       assertFalse(node2.isReturn());
1887:       assertFalse(node2.hasOneChild());
1888:       assertFalse(node2.isOr());
1889:       assertFalse(node2.isScript());
1890:       assertTrue(node2.isString());
1891:       assertFalse(node2.isBlock());
1892:       assertFalse(node2.isWhile());
1893:       assertFalse(node2.hasMoreThanOneChild());
1894:       assertFalse(node2.isAssign());
1895:       assertFalse(node2.isGetElem());
1896:       assertFalse(node2.isWith());
1897:       assertFalse(node2.isExprResult());
1898:       assertFalse(node2.isCall());
1899:       assertFalse(node2.isInstanceOf());
1900:       assertFalse(node2.isSetterDef());
1901:       assertFalse(node2.isComma());
1902:       assertFalse(node2.isThrow());
1903:       assertFalse(node2.isObjectLit());
1904:       assertFalse(node2.isNot());
1905:       assertFalse(node2.isGetProp());
1906:       assertFalse(node2.isFunction());
1907:       assertFalse(node2.isInc());
1908:       assertFalse(node2.isDebugger());
1909:       assertEquals(40, node2.getType());
1910:       assertFalse(node2.isAnd());
1911:       assertFalse(node2.isFalse());
1912:       assertFalse(node2.isContinue());
1913:       assertFalse(node2.isCast());
1914:       assertFalse(node2.isNE());
1915:       assertFalse(node2.isGetterDef());
1916:       assertFalse(node2.isDelProp());
1917:       assertFalse(node2.isFor());
1918:       assertFalse(node2.isIf());
1919:       assertEquals(147492, node2.getSourcePosition());
1920:       assertFalse(node2.isCase());
1921:       assertFalse(node2.isEmpty());
1922:       assertFalse(node2.isIn());
1923:       assertFalse(node2.isRegExp());
1924:       assertFalse(node2.isVoid());
1925:       assertFalse(node2.isTry());
1926:       assertFalse(node2.isTrue());
1927:       assertFalse(node2.isHook());
1928:       assertFalse(node2.isCatch());
1929:       assertFalse(node2.isNull());
1930:       assertFalse(node2.isThis());
1931:       assertFalse(node2.isBreak());
1932:       assertFalse(node2.isName());
1933:       assertFalse(node2.isStringKey());
1934:       assertFalse(node2.isParamList());
1935:       assertFalse(node2.isAdd());
1936:       assertFalse(node2.isSwitch());
1937:       assertFalse(node2.isDefaultCase());
1938:       assertFalse(node2.isNew());
1939:       assertFalse(node2.isDo());
1940:       assertEquals(36, node2.getCharno());
1941:       assertFalse(node2.isVar());
1942:       assertFalse(node2.isArrayLit());
1943:       assertEquals(0, node2.getChildCount());
1944:       assertFalse(node3.isCase());
1945:       assertFalse(node3.isNE());
1946:       assertFalse(node3.isInc());
1947:       assertFalse(node3.isGetterDef());
1948:       assertEquals((-1), node3.getCharno());
1949:       assertFalse(node3.isEmpty());
1950:       assertFalse(node3.isIn());
1951:       assertFalse(node3.isString());
1952:       assertFalse(node3.isHook());
1953:       assertFalse(node3.isFor());
1954:       assertFalse(node3.isTry());
1955:       assertEquals(471, node3.getType());
1956:       assertFalse(node3.isIf());
1957:       assertFalse(node3.isRegExp());
1958:       assertFalse(node3.isThis());
1959:       assertFalse(node3.isBreak());
1960:       assertFalse(node3.isVoid());
1961:       assertFalse(node3.isDelProp());
1962:       assertTrue(node3.hasMoreThanOneChild());
1963:       assertFalse(node3.isComma());
1964:       assertTrue(node3.hasChildren());
1965:       assertFalse(node3.isInstanceOf());
1966:       assertFalse(node3.isCatch());
1967:       assertFalse(node3.isObjectLit());
1968:       assertEquals(2, node3.getChildCount());
1969:       assertFalse(node3.isAnd());
1970:       assertFalse(node3.isSetterDef());
1971:       assertFalse(node3.isGetProp());
1972:       assertFalse(node3.isDebugger());
1973:       assertFalse(node3.isNot());
1974:       assertFalse(node3.isCast());
1975:       assertFalse(node3.isThrow());
1976:       assertFalse(node3.isFunction());
1977:       assertFalse(node3.isFalse());
1978:       assertFalse(node3.isContinue());
1979:       assertEquals((-1), node3.getLineno());
1980:       assertFalse(node3.isAssignAdd());
1981:       assertFalse(node3.isDo());
1982:       assertFalse(node3.isLabel());
1983:       assertFalse(node3.isReturn());
1984:       assertFalse(node3.isWhile());
1985:       assertFalse(node3.isNumber());
1986:       assertEquals((-1), node3.getSourcePosition());
1987:       assertFalse(node3.isNew());
1988:       assertFalse(node3.isOr());
1989:       assertFalse(node3.isAdd());
1990:       assertFalse(node3.isCall());
1991:       assertFalse(node3.hasOneChild());
1992:       assertFalse(node3.isBlock());
1993:       assertFalse(node3.isName());
1994:       assertFalse(node3.isTypeOf());
1995:       assertFalse(node3.isExprResult());
1996:       assertFalse(node3.isDec());
1997:       assertFalse(node3.isAssign());
1998:       assertFalse(node3.isGetElem());
1999:       assertFalse(node3.isWith());
2000:       assertFalse(node3.isDefaultCase());
2001:       assertFalse(node3.isParamList());
2002:       assertFalse(node3.isScript());
2003:       assertFalse(node3.isNull());
2004:       assertFalse(node3.isTrue());
2005:       assertFalse(node3.isVar());
2006:       assertFalse(node3.isArrayLit());
2007:       assertFalse(node3.isLabelName());
2008:       assertFalse(node3.isStringKey());
2009:       assertFalse(node3.isSwitch());
2010:       
2011:       Node node4 = Node.newString(117, "", 1, 40);
2012:       assertFalse(node4.equals((Object)node0));
2013:       assertFalse(node4.equals((Object)node1));
2014:       assertFalse(node4.equals((Object)node2));
2015:       assertFalse(node4.equals((Object)node3));
2016:       assertNotSame(node4, node0);
2017:       assertNotSame(node4, node1);
2018:       assertNotSame(node4, node2);
2019:       assertNotNull(node4);
2020:       assertFalse(node4.isCatch());
2021:       assertEquals(0, node4.getChildCount());
2022:       assertFalse(node4.isFunction());
2023:       assertFalse(node4.isRegExp());
2024:       assertFalse(node4.isSetterDef());
2025:       assertFalse(node4.isDefaultCase());
2026:       assertFalse(node4.isTry());
2027:       assertFalse(node4.isStringKey());
2028:       assertFalse(node4.isVar());
2029:       assertFalse(node4.isGetterDef());
2030:       assertFalse(node4.isParamList());
2031:       assertFalse(node4.isDebugger());
2032:       assertFalse(node4.isArrayLit());
2033:       assertFalse(node4.isCase());
2034:       assertFalse(node4.isIn());
2035:       assertFalse(node4.hasMoreThanOneChild());
2036:       assertFalse(node4.isBlock());
2037:       assertFalse(node4.isInc());
2038:       assertFalse(node4.isFor());
2039:       assertFalse(node4.isHook());
2040:       assertFalse(node4.isNE());
2041:       assertFalse(node4.isIf());
2042:       assertFalse(node4.isAnd());
2043:       assertFalse(node4.isInstanceOf());
2044:       assertFalse(node4.isWith());
2045:       assertFalse(node4.isNot());
2046:       assertFalse(node4.isObjectLit());
2047:       assertFalse(node4.isGetProp());
2048:       assertFalse(node4.isThis());
2049:       assertFalse(node4.isScript());
2050:       assertFalse(node4.hasOneChild());
2051:       assertFalse(node4.isFalse());
2052:       assertFalse(node4.isThrow());
2053:       assertFalse(node4.isCast());
2054:       assertFalse(node4.isNumber());
2055:       assertEquals(117, node4.getType());
2056:       assertEquals(4136, node4.getSourcePosition());
2057:       assertFalse(node4.isLabelName());
2058:       assertFalse(node4.isSwitch());
2059:       assertTrue(node4.isContinue());
2060:       assertEquals(40, node4.getCharno());
2061:       assertFalse(node4.isString());
2062:       assertFalse(node4.isOr());
2063:       assertFalse(node4.isNew());
2064:       assertFalse(node4.isLabel());
2065:       assertFalse(node4.isReturn());
2066:       assertFalse(node4.isAdd());
2067:       assertFalse(node4.isWhile());
2068:       assertFalse(node4.isAssignAdd());
2069:       assertFalse(node4.isDo());
2070:       assertFalse(node4.isGetElem());
2071:       assertFalse(node4.isEmpty());
2072:       assertFalse(node4.isCall());
2073:       assertFalse(node4.isDec());
2074:       assertFalse(node4.hasChildren());
2075:       assertFalse(node4.isAssign());
2076:       assertFalse(node4.isComma());
2077:       assertFalse(node4.isTypeOf());
2078:       assertFalse(node4.isExprResult());
2079:       assertEquals(1, node4.getLineno());
2080:       assertFalse(node4.isNull());
2081:       assertFalse(node4.isTrue());
2082:       assertFalse(node4.isBreak());
2083:       assertFalse(node4.isName());
2084:       assertFalse(node4.isVoid());
2085:       assertFalse(node4.isDelProp());
2086:       
2087:       boolean boolean5 = node0.isReturn();
2088:       assertFalse(node0.equals((Object)node4));
2089:       assertFalse(node0.equals((Object)node1));
2090:       assertFalse(node0.equals((Object)node3));
2091:       assertTrue(boolean5 == boolean3);
2092:       assertTrue(boolean5 == boolean1);
2093:       assertTrue(boolean5 == boolean4);
2094:       assertTrue(boolean5 == boolean2);
2095:       assertTrue(boolean5 == boolean0);
2096:       assertNotSame(node0, node4);
2097:       assertNotSame(node0, node1);
2098:       assertSame(node0, node2);
2099:       assertFalse(node0.isFalse());
2100:       assertFalse(node0.isThrow());
2101:       assertFalse(node0.isHook());
2102:       assertFalse(node0.isThis());
2103:       assertFalse(node0.isSwitch());
2104:       assertFalse(node0.isComma());
2105:       assertFalse(node0.isInstanceOf());
2106:       assertFalse(node0.isBreak());
2107:       assertFalse(node0.isIn());
2108:       assertFalse(node0.isInc());
2109:       assertFalse(node0.isEmpty());
2110:       assertFalse(node0.isLabelName());
2111:       assertFalse(node0.isGetterDef());
2112:       assertFalse(node0.isIf());
2113:       assertFalse(node0.isNE());
2114:       assertFalse(node0.isFor());
2115:       assertFalse(node0.isLabel());
2116:       assertFalse(node0.isRegExp());
2117:       assertEquals(36, node0.getLineno());
2118:       assertFalse(node0.isArrayLit());
2119:       assertFalse(node0.isCase());
2120:       assertFalse(node0.hasMoreThanOneChild());
2121:       assertFalse(node0.isWith());
2122:       assertEquals(36, node0.getCharno());
2123:       assertEquals(147492, node0.getSourcePosition());
2124:       assertFalse(node0.isTry());
2125:       assertTrue(node0.isString());
2126:       assertFalse(node0.hasOneChild());
2127:       assertFalse(node0.isNumber());
2128:       assertFalse(node0.isScript());
2129:       assertFalse(node0.isStringKey());
2130:       assertFalse(node0.isName());
2131:       assertFalse(node0.isVar());
2132:       assertFalse(node0.isBlock());
2133:       assertFalse(node0.isNull());
2134:       assertFalse(node0.isParamList());
2135:       assertFalse(node0.isCatch());
2136:       assertFalse(node0.isCall());
2137:       assertFalse(node0.isContinue());
2138:       assertFalse(node0.isDo());
2139:       assertFalse(node0.isDefaultCase());
2140:       assertEquals(0, node0.getChildCount());
2141:       assertFalse(node0.isTrue());
2142:       assertEquals(40, node0.getType());
2143:       assertFalse(node0.isNew());
2144:       assertFalse(node0.isAssignAdd());
2145:       assertFalse(node0.isOr());
2146:       assertFalse(node0.isSetterDef());
2147:       assertFalse(node0.isAdd());
2148:       assertFalse(node0.isGetElem());
2149:       assertFalse(node0.isAssign());
2150:       assertFalse(node0.isDelProp());
2151:       assertFalse(node0.isDec());
2152:       assertFalse(node0.hasChildren());
2153:       assertFalse(node0.isTypeOf());
2154:       assertFalse(node0.isFunction());
2155:       assertFalse(node0.isVoid());
2156:       assertFalse(node0.isCast());
2157:       assertFalse(node0.isExprResult());
2158:       assertFalse(node0.isAnd());
2159:       assertFalse(node0.isNot());
2160:       assertFalse(node0.isObjectLit());
2161:       assertFalse(node0.isWhile());
2162:       assertFalse(node0.isReturn());
2163:       assertFalse(node0.isGetProp());
2164:       assertFalse(node0.isDebugger());
2165:       assertFalse(boolean5);
2166:       
2167:       boolean boolean6 = node1.isTrue();
2168:       assertFalse(node1.equals((Object)node4));
2169:       assertFalse(node1.equals((Object)node3));
2170:       assertFalse(node1.equals((Object)node0));
2171:       assertFalse(node1.equals((Object)node2));
2172:       assertTrue(boolean6 == boolean0);
2173:       assertTrue(boolean6 == boolean2);
2174:       assertTrue(boolean6 == boolean3);
2175:       assertTrue(boolean6 == boolean5);
2176:       assertTrue(boolean6 == boolean1);
2177:       assertTrue(boolean6 == boolean4);
2178:       assertNotSame(node1, node4);
2179:       assertNotSame(node1, node0);
2180:       assertNotSame(node1, node2);
2181:       assertEquals(0, node1.getChildCount());
2182:       assertFalse(node1.isParamList());
2183:       assertFalse(node1.isNull());
2184:       assertFalse(node1.isRegExp());
2185:       assertFalse(node1.isName());
2186:       assertFalse(node1.isFunction());
2187:       assertFalse(node1.isCall());
2188:       assertEquals(3, node1.getType());
2189:       assertFalse(node1.isCatch());
2190:       assertFalse(node1.isArrayLit());
2191:       assertFalse(node1.isTry());
2192:       assertFalse(node1.isDebugger());
2193:       assertFalse(node1.isBlock());
2194:       assertFalse(node1.isStringKey());
2195:       assertFalse(node1.isFor());
2196:       assertFalse(node1.isWhile());
2197:       assertFalse(node1.isGetterDef());
2198:       assertEquals((-1), node1.getLineno());
2199:       assertFalse(node1.isIn());
2200:       assertFalse(node1.isNE());
2201:       assertFalse(node1.isIf());
2202:       assertFalse(node1.hasMoreThanOneChild());
2203:       assertFalse(node1.isContinue());
2204:       assertFalse(node1.isCast());
2205:       assertFalse(node1.isThrow());
2206:       assertFalse(node1.isInc());
2207:       assertFalse(node1.isSetterDef());
2208:       assertFalse(node1.isThis());
2209:       assertFalse(node1.isComma());
2210:       assertFalse(node1.isAnd());
2211:       assertFalse(node1.isWith());
2212:       assertFalse(node1.isBreak());
2213:       assertFalse(node1.isFalse());
2214:       assertFalse(node1.isExprResult());
2215:       assertFalse(node1.isInstanceOf());
2216:       assertFalse(node1.hasOneChild());
2217:       assertFalse(node1.isSwitch());
2218:       assertEquals((-1), node1.getCharno());
2219:       assertFalse(node1.isHook());
2220:       assertFalse(node1.isString());
2221:       assertEquals((-1), node1.getSourcePosition());
2222:       assertFalse(node1.isCase());
2223:       assertFalse(node1.isNumber());
2224:       assertFalse(node1.isNot());
2225:       assertFalse(node1.isObjectLit());
2226:       assertFalse(node1.isGetProp());
2227:       assertFalse(node1.isScript());
2228:       assertFalse(node1.isReturn());
2229:       assertFalse(node1.isAssignAdd());
2230:       assertFalse(node1.isLabel());
2231:       assertFalse(node1.isOr());
2232:       assertFalse(node1.isDelProp());
2233:       assertFalse(node1.hasChildren());
2234:       assertFalse(node1.isTypeOf());
2235:       assertFalse(node1.isDec());
2236:       assertFalse(node1.isAssign());
2237:       assertFalse(node1.isLabelName());
2238:       assertFalse(node1.isGetElem());
2239:       assertFalse(node1.isNew());
2240:       assertFalse(node1.isVoid());
2241:       assertFalse(node1.isTrue());
2242:       assertFalse(node1.isVar());
2243:       assertFalse(node1.isDefaultCase());
2244:       assertFalse(node1.isDo());
2245:       assertFalse(node1.isAdd());
2246:       assertFalse(node1.isEmpty());
2247:       assertFalse(boolean6);
2248:       
2249:       Iterable<Node> iterable1 = node0.children();
2250:       assertFalse(node0.equals((Object)node4));
2251:       assertFalse(node0.equals((Object)node1));
2252:       assertFalse(node0.equals((Object)node3));
2253:       assertFalse(iterable1.equals((Object)iterable0));
2254:       assertNotSame(node0, node4);
2255:       assertNotSame(node0, node1);
2256:       assertSame(node0, node2);
2257:       assertFalse(iterable1.contains(node4));
2258:       assertNotNull(iterable1);
2259:       assertFalse(node0.isFalse());
2260:       assertFalse(node0.isThrow());
2261:       assertFalse(node0.isHook());
2262:       assertFalse(node0.isThis());
2263:       assertFalse(node0.isSwitch());
2264:       assertFalse(node0.isComma());
2265:       assertFalse(node0.isInstanceOf());
2266:       assertFalse(node0.isBreak());
2267:       assertFalse(node0.isIn());
2268:       assertFalse(node0.isInc());
2269:       assertFalse(node0.isEmpty());
2270:       assertFalse(node0.isLabelName());
2271:       assertFalse(node0.isGetterDef());
2272:       assertFalse(node0.isIf());
2273:       assertFalse(node0.isNE());
2274:       assertFalse(node0.isFor());
2275:       assertFalse(node0.isLabel());
2276:       assertFalse(node0.isRegExp());
2277:       assertEquals(36, node0.getLineno());
2278:       assertFalse(node0.isArrayLit());
2279:       assertFalse(node0.isCase());
2280:       assertFalse(node0.hasMoreThanOneChild());
2281:       assertFalse(node0.isWith());
2282:       assertEquals(36, node0.getCharno());
2283:       assertEquals(147492, node0.getSourcePosition());
2284:       assertFalse(node0.isTry());
2285:       assertTrue(node0.isString());
2286:       assertFalse(node0.hasOneChild());
2287:       assertFalse(node0.isNumber());
2288:       assertFalse(node0.isScript());
2289:       assertFalse(node0.isStringKey());
2290:       assertFalse(node0.isName());
2291:       assertFalse(node0.isVar());
2292:       assertFalse(node0.isBlock());
2293:       assertFalse(node0.isNull());
2294:       assertFalse(node0.isParamList());
2295:       assertFalse(node0.isCatch());
2296:       assertFalse(node0.isCall());
2297:       assertFalse(node0.isContinue());
2298:       assertFalse(node0.isDo());
2299:       assertFalse(node0.isDefaultCase());
2300:       assertEquals(0, node0.getChildCount());
2301:       assertFalse(node0.isTrue());
2302:       assertEquals(40, node0.getType());
2303:       assertFalse(node0.isNew());
2304:       assertFalse(node0.isAssignAdd());
2305:       assertFalse(node0.isOr());
2306:       assertFalse(node0.isSetterDef());
2307:       assertFalse(node0.isAdd());
2308:       assertFalse(node0.isGetElem());
2309:       assertFalse(node0.isAssign());
2310:       assertFalse(node0.isDelProp());
2311:       assertFalse(node0.isDec());
2312:       assertFalse(node0.hasChildren());
2313:       assertFalse(node0.isTypeOf());
2314:       assertFalse(node0.isFunction());
2315:       assertFalse(node0.isVoid());
2316:       assertFalse(node0.isCast());
2317:       assertFalse(node0.isExprResult());
2318:       assertFalse(node0.isAnd());
2319:       assertFalse(node0.isNot());
2320:       assertFalse(node0.isObjectLit());
2321:       assertFalse(node0.isWhile());
2322:       assertFalse(node0.isReturn());
2323:       assertFalse(node0.isGetProp());
2324:       assertFalse(node0.isDebugger());
2325:       
2326:       StringWriter stringWriter0 = new StringWriter(25);
2327:       assertNotNull(stringWriter0);
2328:       assertEquals("", stringWriter0.toString());
2329:       
2330:       StringWriter stringWriter1 = stringWriter0.append((CharSequence) "STRING ");
2331:       assertSame(stringWriter0, stringWriter1);
2332:       assertSame(stringWriter1, stringWriter0);
2333:       assertNotNull(stringWriter1);
2334:       assertEquals("STRING ", stringWriter0.toString());
2335:       assertEquals("STRING ", stringWriter1.toString());
2336:       
2337:       MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
2338:       assertNotNull(mockPrintWriter0);
2339:       
2340:       Locale locale0 = new Locale("H'Y@UN%");
2341:       assertNotNull(locale0);
2342:       assertEquals("", locale0.getCountry());
2343:       assertEquals("h'y@un%", locale0.toString());
2344:       assertEquals("", locale0.getVariant());
2345:       assertEquals("h'y@un%", locale0.getLanguage());
2346:       assertEquals("", locale0.getISO3Country());
2347:       
2348:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
2349:       assertNotNull(node_SideEffectFlags0);
2350:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2351:       assertEquals(0, node_SideEffectFlags0.valueOf());
2352:       
2353:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
2354:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2355:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2356:       assertNotNull(node_SideEffectFlags1);
2357:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2358:       assertEquals(0, node_SideEffectFlags0.valueOf());
2359:       assertEquals(0, node_SideEffectFlags1.valueOf());
2360:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
2361:       
2362:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
2363:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2364:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2365:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2366:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
2367:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
2368:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
2369:       assertNotNull(node_SideEffectFlags2);
2370:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2371:       assertEquals(0, node_SideEffectFlags0.valueOf());
2372:       assertEquals(0, node_SideEffectFlags1.valueOf());
2373:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
2374:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
2375:       assertEquals(0, node_SideEffectFlags2.valueOf());
2376:       
2377:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
2378:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
2379:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2380:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2381:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2382:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
2383:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
2384:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
2385:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
2386:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
2387:       assertNotNull(node_SideEffectFlags3);
2388:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2389:       assertEquals(0, node_SideEffectFlags0.valueOf());
2390:       assertEquals(0, node_SideEffectFlags1.valueOf());
2391:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
2392:       assertEquals(0, node_SideEffectFlags3.valueOf());
2393:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
2394:       
2395:       node4.setLineno(1604);
2396:       assertFalse(node4.equals((Object)node0));
2397:       assertFalse(node4.equals((Object)node1));
2398:       assertFalse(node4.equals((Object)node2));
2399:       assertFalse(node4.equals((Object)node3));
2400:       assertNotSame(node4, node0);
2401:       assertNotSame(node4, node1);
2402:       assertNotSame(node4, node2);
2403:       assertFalse(node4.isCatch());
2404:       assertEquals(0, node4.getChildCount());
2405:       assertFalse(node4.isFunction());
2406:       assertFalse(node4.isRegExp());
2407:       assertFalse(node4.isSetterDef());
2408:       assertFalse(node4.isDefaultCase());
2409:       assertFalse(node4.isTry());
2410:       assertFalse(node4.isStringKey());
2411:       assertFalse(node4.isVar());
2412:       assertFalse(node4.isGetterDef());
2413:       assertFalse(node4.isParamList());
2414:       assertFalse(node4.isDebugger());
2415:       assertFalse(node4.isArrayLit());
2416:       assertFalse(node4.isCase());
2417:       assertFalse(node4.isIn());
2418:       assertFalse(node4.hasMoreThanOneChild());
2419:       assertFalse(node4.isBlock());
2420:       assertFalse(node4.isInc());
2421:       assertFalse(node4.isFor());
2422:       assertFalse(node4.isHook());
2423:       assertFalse(node4.isNE());
2424:       assertFalse(node4.isIf());
2425:       assertFalse(node4.isAnd());
2426:       assertFalse(node4.isInstanceOf());
2427:       assertFalse(node4.isWith());
2428:       assertFalse(node4.isNot());
2429:       assertFalse(node4.isObjectLit());
2430:       assertFalse(node4.isGetProp());
2431:       assertFalse(node4.isThis());
2432:       assertFalse(node4.isScript());
2433:       assertFalse(node4.hasOneChild());
2434:       assertFalse(node4.isFalse());
2435:       assertFalse(node4.isThrow());
2436:       assertFalse(node4.isCast());
2437:       assertFalse(node4.isNumber());
2438:       assertEquals(117, node4.getType());
2439:       assertEquals(1604, node4.getLineno());
2440:       assertFalse(node4.isLabelName());
2441:       assertFalse(node4.isSwitch());
2442:       assertTrue(node4.isContinue());
2443:       assertEquals(40, node4.getCharno());
2444:       assertFalse(node4.isString());
2445:       assertFalse(node4.isOr());
2446:       assertFalse(node4.isNew());
2447:       assertFalse(node4.isLabel());
2448:       assertFalse(node4.isReturn());
2449:       assertFalse(node4.isAdd());
2450:       assertFalse(node4.isWhile());
2451:       assertFalse(node4.isAssignAdd());
2452:       assertFalse(node4.isDo());
2453:       assertFalse(node4.isGetElem());
2454:       assertFalse(node4.isEmpty());
2455:       assertFalse(node4.isCall());
2456:       assertFalse(node4.isDec());
2457:       assertFalse(node4.hasChildren());
2458:       assertFalse(node4.isAssign());
2459:       assertFalse(node4.isComma());
2460:       assertFalse(node4.isTypeOf());
2461:       assertEquals(6570024, node4.getSourcePosition());
2462:       assertFalse(node4.isExprResult());
2463:       assertFalse(node4.isNull());
2464:       assertFalse(node4.isTrue());
2465:       assertFalse(node4.isBreak());
2466:       assertFalse(node4.isName());
2467:       assertFalse(node4.isVoid());
2468:       assertFalse(node4.isDelProp());
2469:       
2470:       Node node5 = Node.newString("STRING ", (-570), 1);
2471:       assertFalse(node5.equals((Object)node0));
2472:       assertFalse(node5.equals((Object)node1));
2473:       assertFalse(node5.equals((Object)node3));
2474:       assertFalse(node5.equals((Object)node2));
2475:       assertFalse(node5.equals((Object)node4));
2476:       assertNotSame(node5, node0);
2477:       assertNotSame(node5, node1);
2478:       assertNotSame(node5, node2);
2479:       assertNotSame(node5, node4);
2480:       assertNotNull(node5);
2481:       assertEquals((-1), node5.getCharno());
2482:       assertFalse(node5.isSwitch());
2483:       assertFalse(node5.isInc());
2484:       assertFalse(node5.isThrow());
2485:       assertFalse(node5.isFalse());
2486:       assertFalse(node5.isCase());
2487:       assertFalse(node5.isHook());
2488:       assertFalse(node5.isThis());
2489:       assertFalse(node5.isComma());
2490:       assertFalse(node5.isBreak());
2491:       assertFalse(node5.isIn());
2492:       assertFalse(node5.isEmpty());
2493:       assertFalse(node5.isInstanceOf());
2494:       assertFalse(node5.isDelProp());
2495:       assertFalse(node5.isIf());
2496:       assertFalse(node5.isNE());
2497:       assertFalse(node5.isVoid());
2498:       assertFalse(node5.isDebugger());
2499:       assertFalse(node5.isExprResult());
2500:       assertFalse(node5.isFunction());
2501:       assertFalse(node5.isCast());
2502:       assertEquals(40, node5.getType());
2503:       assertFalse(node5.isAssign());
2504:       assertFalse(node5.hasChildren());
2505:       assertFalse(node5.isGetProp());
2506:       assertEquals((-1), node5.getSourcePosition());
2507:       assertFalse(node5.isObjectLit());
2508:       assertFalse(node5.isAnd());
2509:       assertFalse(node5.isNot());
2510:       assertFalse(node5.isBlock());
2511:       assertTrue(node5.isString());
2512:       assertFalse(node5.isNew());
2513:       assertFalse(node5.isAdd());
2514:       assertFalse(node5.isContinue());
2515:       assertFalse(node5.hasMoreThanOneChild());
2516:       assertFalse(node5.isDo());
2517:       assertFalse(node5.isReturn());
2518:       assertFalse(node5.isAssignAdd());
2519:       assertFalse(node5.isVar());
2520:       assertFalse(node5.isWhile());
2521:       assertFalse(node5.isSetterDef());
2522:       assertFalse(node5.isTypeOf());
2523:       assertFalse(node5.isOr());
2524:       assertFalse(node5.isDec());
2525:       assertEquals((-1), node5.getLineno());
2526:       assertFalse(node5.isCatch());
2527:       assertFalse(node5.isGetElem());
2528:       assertFalse(node5.isName());
2529:       assertFalse(node5.isCall());
2530:       assertFalse(node5.isNull());
2531:       assertFalse(node5.isTrue());
2532:       assertFalse(node5.isRegExp());
2533:       assertFalse(node5.isTry());
2534:       assertFalse(node5.isWith());
2535:       assertFalse(node5.isScript());
2536:       assertFalse(node5.hasOneChild());
2537:       assertFalse(node5.isDefaultCase());
2538:       assertFalse(node5.isFor());
2539:       assertFalse(node5.isLabel());
2540:       assertFalse(node5.isGetterDef());
2541:       assertEquals(0, node5.getChildCount());
2542:       assertFalse(node5.isNumber());
2543:       assertFalse(node5.isLabelName());
2544:       assertFalse(node5.isArrayLit());
2545:       assertFalse(node5.isStringKey());
2546:       assertFalse(node5.isParamList());
2547:       
2548:       Node node6 = null;
2549:       try {
2550:         node6 = new Node(43, node3, node2, 1113, 54);
2551:         fail("Expecting exception: IllegalArgumentException");
2552:       
2553:       } catch(IllegalArgumentException e) {
2554:          //
2555:          // second new child has existing parent
2556:          //
2557:          verifyException("com.google.common.base.Preconditions", e);
2558:       }
2559:   }
2560: }
RegularFileObject[/tmp/EvoSuite_189_1628256050215/com/google/javascript/rhino/Node_189_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:50 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_189_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_189_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_189_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.InputId",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.javascript.rhino.jstype.TemplatizedType",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.common.collect.Iterables",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.common.collect.Sets$ImprovedAbstractSet",
354:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
355:       "com.google.common.collect.Hashing",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
358:       "com.google.javascript.rhino.JSTypeExpression",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
362:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
367:     );
368:   }
369: }

[MASTER] 13:20:51.118 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("", 36, 36);
assertNotNull(node0);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(36, node0.getCharno());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean0 = node0.isLabelName();
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(36, node0.getCharno());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(boolean0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean1 = node0.isOr();
assertTrue(boolean1 == boolean0);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(36, node0.getCharno());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(boolean1);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

Node node1 = Node.newString(3, "");
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertNotNull(node1);
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isName());
assertFalse(node1.isFunction());
assertFalse(node1.isCall());
assertEquals(3, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);
assertNull(staticSourceFile0);
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isName());
assertFalse(node1.isFunction());
assertFalse(node1.isCall());
assertEquals(3, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Node node2 = node0.copyInformationFrom(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertNotSame(node0, node1);
assertSame(node0, node2);
assertSame(node2, node0);
assertNotSame(node2, node1);
assertNotNull(node2);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(36, node0.getCharno());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node2.isTypeOf());
assertEquals(36, node2.getLineno());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isReturn());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertEquals(147492, node2.getSourcePosition());
assertFalse(node2.isCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isHook());
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isAdd());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertEquals(36, node2.getCharno());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

boolean boolean2 = node0.getBooleanProp(53);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(36, node0.getCharno());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(boolean2);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean3 = node0.isReturn();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(36, node0.getCharno());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(boolean3);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

Node node3 = new Node(471, node2, node2, node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertNotNull(node3);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(36, node0.getCharno());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isName());
assertFalse(node1.isFunction());
assertFalse(node1.isCall());
assertEquals(3, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node2.isTypeOf());
assertEquals(36, node2.getLineno());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isReturn());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertEquals(147492, node2.getSourcePosition());
assertFalse(node2.isCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isHook());
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isAdd());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertEquals(36, node2.getCharno());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node3.isCase());
assertFalse(node3.isNE());
assertFalse(node3.isInc());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isEmpty());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertFalse(node3.isHook());
assertFalse(node3.isFor());
assertFalse(node3.isTry());
assertEquals(471, node3.getType());
assertFalse(node3.isIf());
assertFalse(node3.isRegExp());
assertFalse(node3.isThis());
assertFalse(node3.isBreak());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isComma());
assertTrue(node3.hasChildren());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isObjectLit());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isAnd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isDebugger());
assertFalse(node3.isNot());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNew());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isCall());
assertFalse(node3.hasOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isName());
assertFalse(node3.isTypeOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isGetElem());
assertFalse(node3.isWith());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isParamList());
assertFalse(node3.isScript());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isVar());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isSwitch());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

String string0 = node0.toString(false, false, false);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotNull(string0);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(36, node0.getCharno());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals("STRING ", string0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean4 = node2.isTrue();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(36, node0.getCharno());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node2.isTypeOf());
assertEquals(36, node2.getLineno());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isReturn());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertEquals(147492, node2.getSourcePosition());
assertFalse(node2.isCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isHook());
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isAdd());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertEquals(36, node2.getCharno());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(boolean4);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);

Iterable<Node> iterable0 = node3.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertSame(node2, node0);
assertNotSame(node2, node1);
assertNotNull(iterable0);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(36, node0.getCharno());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isName());
assertFalse(node1.isFunction());
assertFalse(node1.isCall());
assertEquals(3, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node2.isTypeOf());
assertEquals(36, node2.getLineno());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isReturn());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertEquals(147492, node2.getSourcePosition());
assertFalse(node2.isCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isHook());
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isAdd());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertEquals(36, node2.getCharno());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node3.isCase());
assertFalse(node3.isNE());
assertFalse(node3.isInc());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isEmpty());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertFalse(node3.isHook());
assertFalse(node3.isFor());
assertFalse(node3.isTry());
assertEquals(471, node3.getType());
assertFalse(node3.isIf());
assertFalse(node3.isRegExp());
assertFalse(node3.isThis());
assertFalse(node3.isBreak());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isComma());
assertTrue(node3.hasChildren());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isObjectLit());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isAnd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isDebugger());
assertFalse(node3.isNot());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNew());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isCall());
assertFalse(node3.hasOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isName());
assertFalse(node3.isTypeOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isGetElem());
assertFalse(node3.isWith());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isParamList());
assertFalse(node3.isScript());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isVar());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isSwitch());

Node node4 = Node.newString(117, "", 1, 40);
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertNotSame(node4, node0);
assertNotSame(node4, node1);
assertNotSame(node4, node2);
assertNotNull(node4);
assertFalse(node4.isCatch());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isFunction());
assertFalse(node4.isRegExp());
assertFalse(node4.isSetterDef());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isTry());
assertFalse(node4.isStringKey());
assertFalse(node4.isVar());
assertFalse(node4.isGetterDef());
assertFalse(node4.isParamList());
assertFalse(node4.isDebugger());
assertFalse(node4.isArrayLit());
assertFalse(node4.isCase());
assertFalse(node4.isIn());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isBlock());
assertFalse(node4.isInc());
assertFalse(node4.isFor());
assertFalse(node4.isHook());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isAnd());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isWith());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isGetProp());
assertFalse(node4.isThis());
assertFalse(node4.isScript());
assertFalse(node4.hasOneChild());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isCast());
assertFalse(node4.isNumber());
assertEquals(117, node4.getType());
assertEquals(4136, node4.getSourcePosition());
assertFalse(node4.isLabelName());
assertFalse(node4.isSwitch());
assertTrue(node4.isContinue());
assertEquals(40, node4.getCharno());
assertFalse(node4.isString());
assertFalse(node4.isOr());
assertFalse(node4.isNew());
assertFalse(node4.isLabel());
assertFalse(node4.isReturn());
assertFalse(node4.isAdd());
assertFalse(node4.isWhile());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());
assertFalse(node4.isGetElem());
assertFalse(node4.isEmpty());
assertFalse(node4.isCall());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isAssign());
assertFalse(node4.isComma());
assertFalse(node4.isTypeOf());
assertFalse(node4.isExprResult());
assertEquals(1, node4.getLineno());
assertFalse(node4.isNull());
assertFalse(node4.isTrue());
assertFalse(node4.isBreak());
assertFalse(node4.isName());
assertFalse(node4.isVoid());
assertFalse(node4.isDelProp());

boolean boolean5 = node0.isReturn();
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertNotSame(node0, node4);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(36, node0.getCharno());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(boolean5);

boolean boolean6 = node1.isTrue();
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean4);
assertNotSame(node1, node4);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isName());
assertFalse(node1.isFunction());
assertFalse(node1.isCall());
assertEquals(3, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(boolean6);

Iterable<Node> iterable1 = node0.children();
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(iterable1.equals((Object)iterable0));
assertNotSame(node0, node4);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertFalse(iterable1.contains(node4));
assertNotNull(iterable1);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isRegExp());
assertEquals(36, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(36, node0.getCharno());
assertEquals(147492, node0.getSourcePosition());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());

StringWriter stringWriter0 = new StringWriter(25);
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

StringWriter stringWriter1 = stringWriter0.append((CharSequence) "STRING ");
assertSame(stringWriter0, stringWriter1);
assertSame(stringWriter1, stringWriter0);
assertNotNull(stringWriter1);
assertEquals("STRING ", stringWriter0.toString());
assertEquals("STRING ", stringWriter1.toString());

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
assertNotNull(mockPrintWriter0);

Locale locale0 = new Locale("H'Y@UN%");
assertNotNull(locale0);
assertEquals("", locale0.getCountry());
assertEquals("h'y@un%", locale0.toString());
assertEquals("", locale0.getVariant());
assertEquals("h'y@un%", locale0.getLanguage());
assertEquals("", locale0.getISO3Country());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags3);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());

node4.setLineno(1604);
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertNotSame(node4, node0);
assertNotSame(node4, node1);
assertNotSame(node4, node2);
assertFalse(node4.isCatch());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isFunction());
assertFalse(node4.isRegExp());
assertFalse(node4.isSetterDef());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isTry());
assertFalse(node4.isStringKey());
assertFalse(node4.isVar());
assertFalse(node4.isGetterDef());
assertFalse(node4.isParamList());
assertFalse(node4.isDebugger());
assertFalse(node4.isArrayLit());
assertFalse(node4.isCase());
assertFalse(node4.isIn());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isBlock());
assertFalse(node4.isInc());
assertFalse(node4.isFor());
assertFalse(node4.isHook());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isAnd());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isWith());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isGetProp());
assertFalse(node4.isThis());
assertFalse(node4.isScript());
assertFalse(node4.hasOneChild());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isCast());
assertFalse(node4.isNumber());
assertEquals(117, node4.getType());
assertEquals(1604, node4.getLineno());
assertFalse(node4.isLabelName());
assertFalse(node4.isSwitch());
assertTrue(node4.isContinue());
assertEquals(40, node4.getCharno());
assertFalse(node4.isString());
assertFalse(node4.isOr());
assertFalse(node4.isNew());
assertFalse(node4.isLabel());
assertFalse(node4.isReturn());
assertFalse(node4.isAdd());
assertFalse(node4.isWhile());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());
assertFalse(node4.isGetElem());
assertFalse(node4.isEmpty());
assertFalse(node4.isCall());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isAssign());
assertFalse(node4.isComma());
assertFalse(node4.isTypeOf());
assertEquals(6570024, node4.getSourcePosition());
assertFalse(node4.isExprResult());
assertFalse(node4.isNull());
assertFalse(node4.isTrue());
assertFalse(node4.isBreak());
assertFalse(node4.isName());
assertFalse(node4.isVoid());
assertFalse(node4.isDelProp());

Node node5 = Node.newString("STRING ", (-570), 1);
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertNotSame(node5, node0);
assertNotSame(node5, node1);
assertNotSame(node5, node2);
assertNotSame(node5, node4);
assertNotNull(node5);
assertEquals((-1), node5.getCharno());
assertFalse(node5.isSwitch());
assertFalse(node5.isInc());
assertFalse(node5.isThrow());
assertFalse(node5.isFalse());
assertFalse(node5.isCase());
assertFalse(node5.isHook());
assertFalse(node5.isThis());
assertFalse(node5.isComma());
assertFalse(node5.isBreak());
assertFalse(node5.isIn());
assertFalse(node5.isEmpty());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isDelProp());
assertFalse(node5.isIf());
assertFalse(node5.isNE());
assertFalse(node5.isVoid());
assertFalse(node5.isDebugger());
assertFalse(node5.isExprResult());
assertFalse(node5.isFunction());
assertFalse(node5.isCast());
assertEquals(40, node5.getType());
assertFalse(node5.isAssign());
assertFalse(node5.hasChildren());
assertFalse(node5.isGetProp());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isObjectLit());
assertFalse(node5.isAnd());
assertFalse(node5.isNot());
assertFalse(node5.isBlock());
assertTrue(node5.isString());
assertFalse(node5.isNew());
assertFalse(node5.isAdd());
assertFalse(node5.isContinue());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isDo());
assertFalse(node5.isReturn());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isVar());
assertFalse(node5.isWhile());
assertFalse(node5.isSetterDef());
assertFalse(node5.isTypeOf());
assertFalse(node5.isOr());
assertFalse(node5.isDec());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isCatch());
assertFalse(node5.isGetElem());
assertFalse(node5.isName());
assertFalse(node5.isCall());
assertFalse(node5.isNull());
assertFalse(node5.isTrue());
assertFalse(node5.isRegExp());
assertFalse(node5.isTry());
assertFalse(node5.isWith());
assertFalse(node5.isScript());
assertFalse(node5.hasOneChild());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isFor());
assertFalse(node5.isLabel());
assertFalse(node5.isGetterDef());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isNumber());
assertFalse(node5.isLabelName());
assertFalse(node5.isArrayLit());
assertFalse(node5.isStringKey());
assertFalse(node5.isParamList());

Node node6 = new Node(43, node3, node2, 1113, 54);

* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-100/tests/22
* Done!

* Computation finished
