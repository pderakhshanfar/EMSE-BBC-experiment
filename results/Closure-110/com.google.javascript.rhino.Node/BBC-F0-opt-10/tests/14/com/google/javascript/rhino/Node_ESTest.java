/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 14:31:53 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.UnionType;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newString(38, "com.google.javascript.rhino.jstype.BooleanType", 35, (-1579));
      Node node1 = new Node(35, node0, node0);
      Node node2 = new Node(2001, node1, node1, 666, 58);
      Node node3 = Node.newString(30, "com.google.javascript.rhino.jstype.BooleanType");
      node2.useSourceInfoIfMissingFromForTree(node1);
      StringWriter stringWriter0 = new StringWriter();
      node0.appendStringTree(stringWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node4 = new Node(2001, node2, node2, node2);
      node4.setLineno(38);
      node4.mayMutateGlobalStateOrThrow();
      node1.getAncestor(30);
      node0.isSwitch();
      node1.isCatch();
      node1.getSourcePosition();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "com.google.javascript.rhino.jstype.BooleanType");
      // Undeclared exception!
      try { 
        node3.appendStringTree(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.isNull();
      ImmutableList.of();
      Node node1 = new Node(31, node0, node0, node0, 4, 42);
      Node node2 = Node.newNumber((double) 43);
      node2.getStaticSourceFile();
      Node node3 = new Node(148, node1);
      node2.children();
      Node node4 = Node.newString(38, "i+");
      node4.getInputId();
      node2.getCharno();
      Node.newNumber(0.5);
      Node.newNumber((double) 29, 2, 0);
      node3.removeChildren();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = new Node(112);
      node0.setType((-3780));
      node0.wasEmptyNode();
      node0.isNull();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node(3848);
      Node node1 = new Node(48);
      Node node2 = new Node(48, node0, node1, node1);
      node0.getAncestor(1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      NoType noType0 = (NoType)modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) noType0;
      jSTypeArray0[1] = (JSType) noType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.getProp(1);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      noType0.defineDeclaredProperty("Object#Element", jSTypeArray0[0], node1);
      node1.isComma();
      node0.isEquivalentToTyped(node1);
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isLocalResultCall();
      Node node1 = new Node(53, 793, 1);
      Node node2 = new Node(15, node0);
      node2.isEquivalentTo(node1, false, false, false);
      Node node3 = node0.clonePropsFrom(node2);
      node3.toString();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString("~c8& Em=d");
      Node node1 = Node.newString("~c8& Em=d");
      Node node2 = new Node(4095, node1, node1, node1, 46, 37);
      node2.mayMutateGlobalStateOrThrow();
      node2.addChildAfter(node0, node1);
      Node node3 = node1.getLastSibling();
      node3.toStringTree();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(95, 95, 95);
      node0.getAncestors();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(4095, nodeArray0);
      node0.copyInformationFromForTree(node1);
      node0.setSourceEncodedPositionForTree(39);
      node0.putIntProp(43, 36);
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      Node node1 = new Node(31, node0, node0, node0, 4, 42);
      Node.newNumber((double) 43);
      Node node2 = new Node(148, node1);
      node2.setType(33);
      node1.isUnscopedQualifiedName();
      node1.isReturn();
      node2.getQualifiedName();
      node2.cloneNode();
      node2.getType();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node((-543));
      Node node1 = new Node(647, node0, node0, node0, node0, (-3371), 2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.setLineno(16);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node1.clonePropsFrom(node0);
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags2.clearSideEffectFlags();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 647
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-62);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node(124);
      node0.cloneTree();
      node0.isBlock();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = Node.newString(2474, "3lg&Cm|H^)z", 1018, 4095);
      Node node2 = Node.newString("com.google.common.collect.ImmutableBiMap");
      node0.isIn();
      node2.isFunction();
      Node node3 = new Node(350, node1, node0, node0, 16, 38);
      node3.getLastChild();
      node3.removeChild(node1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      Node node1 = new Node(31, node0, node0, node0, 4, 42);
      Node.newNumber((double) 43);
      node0.detachFromParent();
      Node node2 = new Node(148, node1);
      node2.setType(33);
      node1.isContinue();
      node0.isObjectLit();
      node2.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(111);
      node0.isIn();
      node0.putIntProp(111, 12);
      Node node1 = Node.newString("m X7.");
      node0.addChildToFront(node1);
      node0.getExistingIntProp(111);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      Node node1 = node0.cloneTree();
      node0.isEmpty();
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(3848);
      Node node1 = new Node(48);
      node1.setSourceEncodedPosition(52);
      node1.isLocalResultCall();
      Node node2 = new Node(29, node0, node1, 56, 31);
      node0.isNot();
      node2.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node(13);
      node0.isNoSideEffectsCall();
      node0.isBlock();
      node0.isDelProp();
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(13);
      node0.mayMutateArguments();
      node0.isBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node(111);
      node0.isIn();
      node0.isBlock();
      Node node1 = Node.newString(43, "]mRZp60hY0");
      node1.isInstanceOf();
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      node0.isTrue();
      node0.isWhile();
      Node node1 = Node.newNumber((double) 48, 4, 2849);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(151);
      node0.putIntProp(151, (-2687));
      Node node1 = Node.newString(39, "'L}");
      // Undeclared exception!
      try { 
        node1.setDouble(37);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newString(77, " zJC7QGXKhN~6lAf/$$");
      node0.getSourceFileName();
      node0.isThrow();
      node0.isHook();
      node0.isTry();
      Node.newNumber((double) 77, 57, 57);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = new Node(4, node0, node0, 39, 16);
      Node node2 = node1.removeFirstChild();
      node0.isDelProp();
      Node node3 = new Node(112, node1);
      Node node4 = new Node(39, node3, node2, node3, 49, (-857));
      node0.isCast();
      node4.isNew();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      node0.putIntProp(50, 50);
      try { 
        node0.setDouble(1.2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING 5X}<c' [free_call: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.getProp(1);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.isComma();
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.setCharno(57);
      node2.isEquivalentTo(node0, false, true, false);
      node2.checkTreeEquals(node0);
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newString("GREATEST_FUNCTION_TYPE");
      node0.isObjectLit();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = new Node(38, node0, (-2041), 57);
      Node.newString("F*7");
      node0.srcrefTree(node1);
      // Undeclared exception!
      try { 
        node1.setString("GREATEST_FUNCTION_TYPE");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      modificationVisitor0.caseNoType();
      Node node0 = new Node(0, 0, 0);
      node0.isQuotedString();
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(111);
      node0.isCase();
      node0.isDefaultCase();
      node0.isLabelName();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(30, 30, 30);
      Node.newString((-928), "`\"(&QU#*U4>*wQ-v0");
      node0.setSideEffectFlags(30);
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      ImmutableList.of();
      node0.putIntProp(42, 4095);
      try { 
        node0.setDouble(1.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // AND 101 [side_effect_flags: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(101);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("comparator", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isAssignAdd();
      node0.removeProp(51);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      Node node1 = node0.cloneNode();
      int int0 = (-2982);
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newString("~c8& Em=d");
      node0.isVar();
      node0.setType(47);
      node0.setSourceEncodedPositionForTree(47);
      node0.putIntProp(47, 15);
      try { 
        node0.setDouble(1.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // REGEXP ~c8& Em=d 0 [is_dispatcher: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = new Node(57, node0, node0, 55, 40);
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      Node node3 = new Node(47);
      node0.isEquivalentTo(node3, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isOptionalArg();
      node2.getAncestors();
      Node node4 = Node.newString(4095, "5X}<c'", 38, 51);
      Node node5 = Node.newString((-2098), "%s (%s) must not be greater than size (%s)");
      InputId inputId0 = new InputId("IX>lc92=HV");
      node4.getStaticSourceFile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      node5.isThrow();
      node4.isNoSideEffectsCall();
      node5.isNot();
      node1.addChildrenToBack(node4);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node((-928));
      Node node1 = new Node(29, node0);
      Node node2 = node1.removeFirstChild();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte) (-103);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node3 = new Node(0, 15, (-928));
      node2.isDelProp();
      Node node4 = new Node((-1429), node1, node2, node2, 57, 32);
      node4.isCast();
      node1.isNew();
      node3.isAssign();
      node2.getParent();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newNumber((-1435.7839640324), 390, 390);
      Node node1 = node0.cloneNode();
      node1.removeProp(8);
      node0.isEquivalentToTyped(node1);
      Node node2 = new Node(0, node1, node0, node1);
      node2.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(111);
      Node node1 = Node.newString((-3728), ";l3%S=-U*I/66oe");
      node1.getJsDocBuilderForNode();
      node0.isTrue();
      node0.isWhile();
      node0.useSourceInfoIfMissingFromForTree(node1);
      node1.isComma();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(132);
      node0.isExprResult();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = Node.newString("bU(T7#t", 57, 155);
      node1.isOr();
      Node node2 = new Node(0, node0, node1, node1, node1);
      node0.srcref(node2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(93);
      node0.cloneNode();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = new Node(111);
      Node node1 = Node.newNumber((-738.28339670115));
      node0.useSourceInfoIfMissingFrom(node1);
      node0.isFromExterns();
      node0.isEmpty();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = new Node(42, node0, 54, 46);
      node0.type = 98;
      node1.cloneTree();
      node1.wasEmptyNode();
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      node0.isLabelName();
      Node node1 = new Node(52, node0, node0, 30, 52);
      node0.checkTreeEquals(node1);
      node0.copyInformationFrom(node1);
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(132);
      node0.isExprResult();
      Node node1 = new Node((-1799), node0, node0, 50, 105);
      node0.copyInformationFrom(node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isObjectLit();
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node(42, 1333, 48);
      Node node1 = Node.newString("5X}<c'");
      Node node2 = new Node(37, node0, node1, node1, 46, 43);
      node0.getQualifiedName();
      // Undeclared exception!
      try { 
        node1.removeChild(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      node0.isVar();
      node0.setType(38);
      node0.setSourceEncodedPositionForTree(39);
      node0.isThrow();
      node0.hasMoreThanOneChild();
      node0.setSourceEncodedPosition(17);
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = new Node(111);
      node0.isEmpty();
      node0.isSwitch();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = Node.newString("OBJECT_PROTOTYPE", 8, 12);
      node0.isVar();
      node1.setType(38);
      node1.setSourceEncodedPositionForTree(39);
      node1.isThrow();
      node0.putIntProp(32, 4095);
      node0.getIntProp(124);
      node0.getLastSibling();
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(41, 41, 41);
      node0.getInputId();
      node0.isQuotedString();
      Node node1 = Node.newNumber((double) 40, 4, 1342);
      node1.mayMutateGlobalStateOrThrow();
      node0.isUnscopedQualifiedName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.isGetElem();
      node1.mayMutateGlobalStateOrThrow();
      node0.getLength();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.useSourceInfoIfMissingFrom(node0);
      try { 
        node0.setString("`/Sd.u3Cus%Ek4NCp");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NULL 4 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString("~'8 Em=d");
      node0.putIntProp(58, 54);
      Node node1 = new Node(42, 1459, (-1249));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)4;
      node1.isFromExterns();
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-117);
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.useSourceInfoIfMissingFrom(node0);
      try { 
        node1.setDouble(0.7);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // THIS is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString(1004, "THIS");
      Node node1 = new Node(32, 165, 15);
      node1.isQualifiedName();
      node0.isSetterDef();
      node1.isUnscopedQualifiedName();
      node0.removeChildren();
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node((-262), (-262), (-262));
      node0.addChildrenAfter(node0, (Node) null);
      node0.getFirstChild();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(132);
      node0.isExprResult();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = Node.newNumber((double) 39, 43, 55);
      node0.useSourceInfoFrom(node1);
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = Node.newString("OBJECT_PROTOTYPE", 8, 12);
      node0.isVar();
      node1.setType(38);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.setSourceEncodedPositionForTree(39);
      node1.isThrow();
      node0.hasMoreThanOneChild();
      node0.setSourceEncodedPosition(17);
      node1.getQualifiedName();
      node1.isFalse();
      node0.getLineno();
      node1.getString();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node(37);
      Node node1 = node0.cloneNode();
      node0.isOr();
      node0.isGetProp();
      node1.isNull();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      nodeArray0[3] = node0;
      nodeArray0[4] = node1;
      nodeArray0[5] = node0;
      Node node2 = null;
      try {
        node2 = new Node(35, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newString("5X<c'");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(43);
      node1.isQualifiedName();
      node1.isAdd();
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = Node.newString("OBJECT_PROTOTYPE", 8, 12);
      node0.isVar();
      node1.setType(38);
      node1.setSourceEncodedPositionForTree(39);
      node1.isThrow();
      node1.putIntProp(43, (-622));
      try { 
        node1.setDouble(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME OBJECT_PROTOTYPE 0 [is_constant_name: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = Node.newString("OBJECT_PROTOTYPE", 8, 12);
      node0.isVar();
      node1.setType(38);
      node1.setSourceEncodedPositionForTree(39);
      node1.isThrow();
      node0.putIntProp(32, 4095);
      try { 
        node0.setDouble(56.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DO 114 [incrdecr: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(51, 51, (-700));
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      node0.isTrue();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("unexpected prop id ", false);
      node_NodeMismatch0.equals(simpleSourceFile0);
      node0.getLength();
      Node node1 = new Node((-689), node0);
      node0.isEquivalentTo(node1, false, false, false);
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node(132);
      node0.isExprResult();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("RfN>-^6Cc.Ii$7ad}", (String) null, 51, 130);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter2, true);
      Node node1 = Node.newString(57, "~");
      node0.useSourceInfoFromForTree(node1);
      node0.isScript();
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node((-1436));
      node0.getProp((-1));
      node0.isLabel();
      node0.isDelProp();
      Node node1 = new Node(47, node0, node0, node0, node0, 1553, 37);
      node0.setSourceEncodedPositionForTree((-328));
      node1.copyInformationFrom(node0);
      node1.useSourceInfoFromForTree(node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.addChildAfter(node1, (Node) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node2 = null;
      try {
        node2 = new Node(51, node0, node0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      node0.isEmpty();
      node0.isWhile();
      Node node1 = new Node(2354, 1, 43);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node(1191, 1191, 1191);
      Node node1 = new Node(12, node0);
      node1.putIntProp(49, 103);
      try { 
        node1.setDouble(42);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EQ [direct_eval: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = new Node(42, node0, 54, 42);
      node1.isIn();
      node0.setCharno(57);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = Node.newString(103, "3lg&Cm|H^)z", 48, 1);
      node2.isIn();
      node2.isFunction();
      node1.isSwitch();
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(124);
      Node node1 = Node.newString(";grTv%D FGr$mJ!");
      Node node2 = node0.srcref(node1);
      node1.putProp(4095, (Object) null);
      node1.isQualifiedName();
      node0.isAdd();
      node2.isTrue();
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING ;grTv%D FGr$mJ! is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(43);
      Node node2 = node1.srcref(node0);
      node2.putProp(48, node0);
      node1.isQualifiedName();
      node0.isAdd();
      node1.isTrue();
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FALSE [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(132, 130, 132);
      node0.isFromExterns();
      node0.isAssignAdd();
      node0.isWhile();
      Node node1 = node0.cloneNode();
      node1.isEquivalentTo(node0, false, false, false);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = new Node(42, node0, 54, 46);
      node1.setLength((-16));
      node1.wasEmptyNode();
      node1.isFalse();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 154, 154, 10);
      Node node1 = new Node(154, node0);
      Node node2 = new Node(154, node1, 32, 47);
      node2.isParamList();
      Node.newNumber(1.0);
      node2.isEquivalentToTyped(node1);
      Node node3 = Node.newString("&A$6S}|BX>:Il", 57, 55);
      node2.isVar();
      node3.isVarArgs();
      node3.isBreak();
      try { 
        node3.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING &A$6S}|BX>:Il 57 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(119);
      Node node1 = new Node(1, 12, (-2047));
      Node node2 = new Node(1, node0, node0, node0, node0);
      Node node3 = node2.removeFirstChild();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node4 = new Node(483446, node2, node0, node3);
      node3.getDirectives();
      Node node5 = Node.newNumber(1142.8408948858018);
      node0.isGetProp();
      node5.isGetElem();
      node1.isExprResult();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = Node.newNumber((double) 56, 154, (-2428));
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.copyInformationFromForTree(node1);
      node0.isEmpty();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = Node.newString(" is not a number node", 8, 12);
      node0.isVar();
      node1.setType(38);
      node1.getAncestors();
      node1.isBlock();
      node0.clonePropsFrom(node1);
      node1.isQualifiedName();
      node0.isScript();
      node1.isDebugger();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(2234, 2234, 101);
      node0.isOr();
      Node node1 = new Node(43, node0, node0, 101, 15);
      node1.copyInformationFromForTree(node0);
      node0.isEquivalentToShallow(node1);
      node1.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(4095);
      node0.isVar();
      Node node1 = new Node(117, node0);
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node(41, 41, 41);
      Node node1 = Node.newString("'4>CK~_Lft5~HPyaTb");
      node0.wasEmptyNode();
      node0.isNot();
      node1.children();
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(148, 148, 148);
      node0.isSetterDef();
      // Undeclared exception!
      try { 
        node0.addChildrenAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isNull();
      Node node1 = new Node(31, node0, node0, node0, 4, 42);
      Node node2 = Node.newNumber((double) 43);
      node1.getStaticSourceFile();
      Node node3 = new Node(148, node1);
      node3.setType(33);
      node1.isNoSideEffectsCall();
      node1.isReturn();
      node3.getQualifiedName();
      node2.getJsDocBuilderForNode();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString("~c8 Em=d");
      Node node1 = Node.newString(126, "~c8 Em=d", 48, 4095);
      node1.isLabel();
      node0.isDec();
      node0.isIf();
      node1.isAssign();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$FileLevlJsDocBuilder");
      Node node1 = new Node(677, node0);
      node1.putIntProp(40, 37);
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFromForTree(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$IntPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node((-928));
      Node node1 = new Node(29, node0);
      Node node2 = node1.removeFirstChild();
      Node node3 = new Node(0, 15, (-1073));
      node2.isDelProp();
      Node node4 = new Node((-1429), node1, node2, node2, 57, 32);
      node4.isCast();
      node1.isNew();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NEG
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = new Node(33, 33, 33);
      Node node1 = new Node(46, node0, node0, node0, node0);
      node1.removeFirstChild();
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte) (-119);
      byteArray0[4] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node2 = new Node(32, node0, node1, node1);
      node1.getDirectives();
      node2.getSourceOffset();
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node((-1931));
      Node node1 = new Node(122);
      Node node2 = new Node(1767, node0, node1, 42, 26);
      node1.isEmpty();
      node2.isNot();
      node2.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = Node.newString("OBJECT_PROTOTYPE", 8, 12);
      node0.isVar();
      node1.setType(38);
      node1.setSourceEncodedPositionForTree(39);
      node1.isThrow();
      node0.hasMoreThanOneChild();
      node1.isSetterDef();
      node1.getSourceOffset();
      Node node2 = new Node(10, node0, node0, 42, 155);
      node2.addChildrenToFront(node1);
      node1.isUnscopedQualifiedName();
      // Undeclared exception!
      try { 
        node0.addChildBefore(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(56, node0, node0, 4, (-1310));
      node0.addChildToFront(node1);
      node1.isExprResult();
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString("rIC");
      Locale locale0 = Locale.GERMANY;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[9];
      jSTypeArray0[0] = null;
      jSTypeArray0[1] = null;
      jSTypeArray0[2] = null;
      jSTypeArray0[3] = null;
      jSTypeArray0[4] = null;
      jSTypeArray0[5] = null;
      jSTypeArray0[6] = null;
      jSTypeArray0[7] = null;
      jSTypeArray0[8] = null;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      node0.setJSType(functionType0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node0.setDirectives(set0);
      Node node1 = new Node(62, node0, node0, node0, 56, 31);
      node0.isEquivalentTo(node1);
      node0.putIntProp(52, 49);
      // Undeclared exception!
      try { 
        node0.setDouble(16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NoType noType0 = (NoType)modificationVisitor0.caseNoType();
      jSTypeArray0[0] = (JSType) noType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isQuotedString();
      noType0.getPropertiesCount();
      node0.isEquivalentTo(node0);
      node0.children();
      node0.isContinue();
      Node.extractCharno(0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = new Node(103);
      node0.toStringTree();
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-91);
      byteArray0[8] = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node(38, 38, 38);
      Node node1 = new Node(0, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.isVarArgs();
      Node node3 = node0.getParent();
      String string0 = "";
      node2.cloneTree();
      Node.newString((-2804), "");
      // Undeclared exception!
      try { 
        node2.addChildAfter(node1, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(147, 147, 147);
      Node node1 = new Node(39, node0, node0, 466, 32);
      node0.clonePropsFrom(node1);
      node0.isSetterDef();
      node0.isNull();
      Node node2 = null;
      try {
        node2 = new Node(40, node0, node0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node.newString("~c8 Em=d");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[2];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      jSTypeArray0[0] = jSType0;
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) null);
      jSTypeArray0[1] = (JSType) objectType0;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.putIntProp(53, 147);
      try { 
        node0.setDouble((-1.0));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST [input_id: com.google.javascript.rhino.Node$IntPropListItem@0000000343] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 15;
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(148, nodeArray0, 15, 35);
      Node node1 = new Node(0, node0, node0);
      node1.setWasEmptyNode(true);
      node1.setSourceEncodedPosition(33);
      node0.srcref(node1);
      Node node2 = null;
      try {
        node2 = new Node(148, node0, node1, node0, node0, 2, 42);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = new Node(147);
      ImmutableList.of();
      Node node1 = Node.newString("");
      node0.isEquivalentTo(node1);
      node0.isInc();
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(115);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isOptionalArg();
      Node node1 = new Node(119, node0, node0, node0, node0);
      node1.isParamList();
      Node node2 = Node.newString("is_namespace", 4095, 1831);
      node1.isVar();
      node2.setType(15);
      Node node3 = node1.copyInformationFrom(node2);
      Node node4 = new Node(4227, node3, node1, 105, 28);
      node4.isDefaultCase();
      node3.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = Node.newString("OBJECT_PROTOTYPE", 8, 12);
      node0.isVar();
      Node node2 = node0.cloneNode();
      Node node3 = Node.newNumber(1.0);
      node1.useSourceInfoFrom(node0);
      node3.addChildToBack(node2);
      node2.removeProp(57);
      node3.isEquivalentToTyped(node0);
      node3.copyInformationFromForTree(node0);
      node1.hasChildren();
      node2.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node(2096, 51, 51);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isOptionalArg();
      PriorityQueue<Node> priorityQueue0 = new PriorityQueue<Node>();
      Node node1 = new Node(113, node0, node0, node0, node0);
      node0.isParamList();
      int int0 = Node.FLAG_LOCAL_RESULTS;
      node0.isSwitch();
      node0.isCatch();
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(102);
      node0.isNull();
      Node node1 = new Node(31, node0, node0, node0, 4, 42);
      node1.isVar();
      node1.setType(38);
      node1.setSourceEncodedPositionForTree((-5556));
      node0.isThrow();
      node0.hasMoreThanOneChild();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.setSourceEncodedPosition(32);
      node0.getQualifiedName();
      node0.isCall();
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString("fBi.{6aT6<&M_3&Wp");
      node0.type = 119;
      node0.isWith();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // WITH fBi.{6aT6<&M_3&Wp is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("fBi.{6aT6<&M_3&Wp");
      Node node1 = new Node(40, 151, 0);
      node1.isDelProp();
      Node node2 = node1.copyInformationFromForTree(node0);
      node0.getInputId();
      node2.setInputId((InputId) null);
      Node node3 = new Node(64, node0, node0, node1, 2969, 31);
      node1.isCast();
      node0.isNew();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3848);
      Node node1 = new Node(48);
      Node node2 = new Node(29, node0, node1, 56, 31);
      node1.isEmpty();
      node0.isNot();
      node2.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      node0.isSyntheticBlock();
      Node node1 = Node.newString(13639716, "WD^L@=fn<");
      node0.addChildToBack(node1);
      node0.putIntProp(42, 42);
      node0.isAssign();
      node0.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = new Node(42, node0, 54, (-522));
      Node node2 = Node.newString("slash_v", 15, 40);
      node1.addChildrenAfter(node2, node0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString(1004, "THIS");
      Node node1 = new Node(32, 177, 15);
      Node node2 = node1.copyInformationFrom(node0);
      node0.getInputId();
      node2.setInputId((InputId) null);
      node1.isQualifiedName();
      node0.isSetterDef();
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString(130, "F*7");
      Node node1 = new Node(130, node0, 43, (-2978));
      node1.copyInformationFromForTree(node0);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = new Node(145);
      node0.isExprResult();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setType(145);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
      ObjectType objectType0 = jSTypeRegistry1.getNativeObjectType(jSTypeNative0);
      jSTypeArray0[0] = (JSType) objectType0;
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.getProp((-2537));
      jSTypeRegistry1.createParametersWithVarArgs(jSTypeArray0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isComma();
      node2.isEquivalentTo(node1, true, false, true);
      // Undeclared exception!
      try { 
        node2.checkTreeEquals(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 145
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node(111);
      node0.isEmpty();
      node0.getLength();
      Node node1 = new Node(48, node0, node0, node0, 29, (-2684));
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      node0.setLineno(40);
      node0.setType(33);
      node0.isNoSideEffectsCall();
      node0.isReturn();
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Node node0 = Node.newString(1130, "1^ch?^Fc4gEB7N=v|gS", 117, 1130);
      Node node1 = new Node(53, node0, node0, node0, node0, 37, (-3484));
      node1.getQualifiedName();
      Node node2 = new Node(64, node1, node1);
      Node node3 = Node.newString("<H8V`'B^aO1CCpt", 799, 54);
      node3.getStaticSourceFile();
      node2.isObjectLit();
      node1.useSourceInfoFrom(node2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.isNull();
      ImmutableList.of();
      Node node1 = new Node(31, node0, node0, node0, 4, 42);
      Node node2 = Node.newNumber((double) 43);
      node2.getStaticSourceFile();
      Node node3 = new Node(148, node1);
      node2.children();
      Node node4 = Node.newString(38, "i+");
      node4.getInputId();
      node2.getCharno();
      Node.newNumber(0.5);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node.newNumber((double) 124, 124, 124);
      Node node0 = Node.newString("{ ");
      node0.setString("{ ");
      Node node1 = new Node(52, 8, 15);
      node1.isFromExterns();
      node1.getAncestors();
      node1.isAssign();
      node0.getChangeTime();
      Node node2 = node1.cloneTree();
      node2.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(145);
      node0.isExprResult();
      Node node1 = new Node(4, 43, (-18));
      node0.checkTreeEqualsImpl(node1);
      node1.setType(30);
      node0.isEmpty();
      Node node2 = new Node(124, node0, node1, node0, 8232, 1523);
      Node node3 = node1.srcrefTree(node0);
      node3.setLineno(2);
      node2.isLabelName();
      node1.copyInformationFrom(node0);
      node1.isDefaultCase();
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(33, 12, 51);
      Node node1 = Node.newString(">7oCmz\"7p=E4$Xp5;", 13, 40);
      node1.setType(47);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node1.isAnd();
      // Undeclared exception!
      try { 
        node0.isQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(115);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isOptionalArg();
      PriorityQueue<Node> priorityQueue0 = new PriorityQueue<Node>(48);
      Node node1 = new Node(119, node0, node0, node0, node0);
      node1.isParamList();
      node0.removeChildren();
      Node node2 = Node.newString("is_namespace", 4095, 1831);
      node1.isVar();
      node2.setType(15);
      node0.isSetterDef();
      node1.isBreak();
      node1.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = new Node(115);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isOptionalArg();
      PriorityQueue<Node> priorityQueue0 = new PriorityQueue<Node>(48);
      Node node1 = new Node(119, node0, node0, node0, node0);
      node1.isParamList();
      node0.getLength();
      node1.isSwitch();
      node1.isCatch();
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newString("input_id");
      Node node1 = new Node(44, node0, node0);
      Node node2 = Node.newString("F*7");
      node1.isDefaultCase();
      node1.isOnlyModifiesArgumentsCall();
      Node node3 = Node.newNumber((double) 57);
      node0.checkTreeEqualsImpl(node2);
      node2.isSwitch();
      Node node4 = node1.cloneNode();
      node4.getChangeTime();
      node2.isQuotedString();
      node2.srcref(node3);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node(115);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isOptionalArg();
      PriorityQueue<Node> priorityQueue0 = new PriorityQueue<Node>(48);
      Node node1 = new Node(119, node0, node0, node0, node0);
      node1.isParamList();
      Node node2 = Node.newString("is_namespace", 4095, 1831);
      node1.isVar();
      node2.setType(15);
      node2.isDebugger();
      node1.useSourceInfoFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      Node node1 = Node.newString("OBJECT_PROTOTYPE", 8, 12);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isEmpty();
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING OBJECT_PROTOTYPE 8 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(63, nodeArray0);
      Node node1 = new Node(63, node0);
      node1.setSourceEncodedPosition(6719);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node1.setStaticSourceFile(simpleSourceFile0);
      node1.getSourceFileName();
      node0.toString();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setSourceEncodedPosition(126);
      node0.setJSDocInfo(jSDocInfo0);
      jSDocInfo0.setConstructor(false);
      node1.getDirectives();
      // Undeclared exception!
      try { 
        node1.getChildAtIndex(1073741824);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      node0.isVar();
      node0.hasMoreThanOneChild();
      node0.cloneTree();
      node0.setSourceEncodedPosition(17);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newNumber(3038.131324134604);
      node0.addChildToFront(node0);
      // Undeclared exception!
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newNumber((double) 124, 124, 124);
      Node node1 = Node.newString("{ ");
      node1.setString("{ ");
      node0.removeProp((-2829));
      Node node2 = new Node(52, 8, 15);
      node2.isFromExterns();
      node0.getAncestors();
      Node node3 = new Node(2, node2, node1, node1, 1593, 113);
      node3.isAssign();
      node3.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newNumber((double) 124, 124, 124);
      Node node1 = Node.newString("{ ");
      node1.setString("{ ");
      Node node2 = new Node(52, 8, 15);
      node2.isFromExterns();
      Node node3 = new Node(39, node1, 1, 57);
      InputId inputId0 = new InputId("{ ");
      node1.setInputId(inputId0);
      node1.isEquivalentTo(node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node2.isEquivalentTo(node3, false, true, false);
      Node node4 = Node.newString(39, "_PvG.", 29, 36);
      Node node5 = new Node(95, node3, node4, node2, node0, 1621, 148);
      node3.useSourceInfoFromForTree(node5);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = new Node(34, 34, 34);
      Node node1 = new Node(46, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-119);
      byteArray0[4] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node3 = new Node(32, node0, node1, node1);
      node3.getSideEffectFlags();
      node1.getDirectives();
      Node.newNumber((double) 2);
      node3.isGetProp();
      node1.isWith();
      node0.isGetElem();
      node2.isExprResult();
      node3.getLastSibling();
      node2.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = new Node(54, 20, 1002);
      node0.isEmpty();
      Node node1 = new Node(0, node0, node0, node0, 133, 4);
      node1.setLineno(50);
      node1.isLabelName();
      node1.copyInformationFrom(node0);
      node1.isDefaultCase();
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newString("WN/");
      node0.setLineno(32);
      node0.putIntProp(633, 633);
      node0.getStaticSourceFile();
      node0.setChangeTime(633);
      Node node1 = new Node(39, node0, node0, node0, 57, 12);
      // Undeclared exception!
      try { 
        node1.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(1004, "THIS");
      Node node1 = new Node(32, 177, 15);
      node1.isQualifiedName();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isSetterDef();
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node(115);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isOptionalArg();
      PriorityQueue<Node> priorityQueue0 = new PriorityQueue<Node>(48);
      Node node1 = new Node(119, node0, node0, node0, node0);
      node1.isParamList();
      Node node2 = Node.newString("Z?~cRW");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node.newString(86, "GU/)BLgG?R");
      node0.useSourceInfoFromForTree(node2);
      Node node3 = null;
      try {
        node3 = new Node(12, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = new Node(102);
      node0.setSourceFileForTesting(".");
      node0.getProp(102);
      node0.isGetterDef();
      Node node1 = new Node(0, node0, node0, node0);
      Node node2 = node0.srcrefTree(node1);
      Node node3 = node2.useSourceInfoIfMissingFrom(node0);
      node2.isEquivalentTo(node3, false, false, true);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = new Node(115);
      node0.cloneTree();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isOptionalArg();
      PriorityQueue<Node> priorityQueue0 = new PriorityQueue<Node>(48);
      Node node1 = Node.newString("\n\nSubtree2: ");
      node0.isAssignAdd();
      node1.isNot();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node(42, node0, node0, node0, 36, 2762);
      node0.getQualifiedName();
      // Undeclared exception!
      try { 
        node1.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      ImmutableList.of();
      Node node1 = new Node((-3681), 55, 878);
      Node node2 = new Node(31, node1);
      node2.isQualifiedName();
      node0.isSetterDef();
      node0.isEquivalentToTyped(node1);
      node2.copyInformationFromForTree(node0);
      node2.isFor();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(true);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isQuotedString();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.checkTreeEquals(node1);
      node0.isArrayLit();
      Node node2 = Node.newString(29, "Not declared as a constructor", 43, 0);
      node1.useSourceInfoFrom(node2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 390, 390);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      node0.cloneNode();
      Node node1 = Node.newNumber((double) 16);
      node1.removeProp(8);
      node0.isAssignAdd();
      Node node2 = new Node(40, 31, 4095);
      node2.cloneTree();
      node2.setSourceEncodedPosition(93);
      node2.isNot();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newString("opt_arg");
      Node node1 = new Node(46, 49, 55);
      node0.isEquivalentTo(node1, false, false, true);
      Node node2 = Node.newString("mHrX~N{");
      Node node3 = new Node(465, node1, node1, node2, node1);
      // Undeclared exception!
      try { 
        node3.replaceChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(263);
      Node node1 = Node.newString(0, "EQo2,^.:'`", 8, 4095);
      Node node2 = new Node(51, node1, node1, 31, 46);
      Node node3 = new Node(12, node0);
      node0.getQualifiedName();
      node3.replaceChild(node0, node2);
      node0.isWith();
      node1.isQuotedString();
      node2.addChildBefore(node3, node1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = new Node(115);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isOptionalArg();
      PriorityQueue<Node> priorityQueue0 = new PriorityQueue<Node>(48);
      Node node1 = new Node(119, node0, node0, node0, node0);
      node1.isParamList();
      node0.removeProp(30);
      node1.isEquivalentToTyped(node0);
      node1.copyInformationFromForTree(node0);
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      ImmutableList.of();
      Node node1 = new Node((-3690), 55, 878);
      Node node2 = Node.newNumber((-4045.902475923));
      node2.isQualifiedName();
      node0.isSetterDef();
      Node node3 = new Node(38, node1, node1, 39, 103);
      // Undeclared exception!
      try { 
        node3.isUnscopedQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 39 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = new Node(42, node0, 54, 46);
      node1.wasEmptyNode();
      node1.isQualifiedName();
      node1.isScript();
      node1.isFor();
      node1.copyInformationFrom(node0);
      // Undeclared exception!
      try { 
        node1.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.isNull();
      ImmutableList.of();
      Node node1 = new Node(2512, 1, 47);
      Node node2 = Node.newNumber((double) 43);
      node2.getStaticSourceFile();
      Node node3 = new Node(148, node1);
      node3.setType(33);
      node1.isNoSideEffectsCall();
      node1.isNE();
      node3.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = new Node((-267));
      Node node1 = Node.newString("hDjCoJS*b}Rn4e/", 2, 49);
      node1.addChildToBack(node0);
      node1.isRegExp();
      node1.putIntProp(55, 43);
      try { 
        node1.setDouble(39);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING hDjCoJS*b}Rn4e/ 2 [inferred: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(true);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        node0.appendStringTree(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node(54, 20, 1002);
      node0.checkTreeEqualsImpl(node0);
      node0.setType(2);
      node0.isEmpty();
      Node node1 = new Node(124, node0, node0, node0, 133, 4);
      Node node2 = node1.srcrefTree(node0);
      node2.setLineno(50);
      node1.isLabelName();
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(112);
      node0.isFromExterns();
      node0.isCast();
      Node node1 = Node.newString(675, "ALWAYS_TRUE");
      node1.isVarArgs();
      node0.useSourceInfoIfMissingFrom(node1);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newNumber((-379.9879));
      node0.isAssignAdd();
      node0.getJSDocInfo();
      Node node1 = new Node(39, (-813), 8);
      Node node2 = node1.srcref(node0);
      node1.isEquivalentToShallow(node0);
      node2.isWith();
      node2.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(115);
      node0.getJsDocBuilderForNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isOptionalArg();
      PriorityQueue<Node> priorityQueue0 = new PriorityQueue<Node>(48);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sEGbgus7");
      Node node1 = new Node(119, node0, node0, node0, node0);
      node1.isUnscopedQualifiedName();
      node1.getJSDocInfo();
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = new Node(34, 34, 34);
      Node node1 = new Node(46, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      byteArray0[4] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node3 = new Node(32, node0, node1, node1);
      node2.isAssignAdd();
      node1.isNot();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node3.setJSDocInfo(jSDocInfo0);
      node3.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(15, 0, 4);
      Node node2 = new Node(42, node1);
      Node node3 = node2.srcref(node1);
      node3.isEquivalentToShallow(node0);
      node0.isWith();
      node2.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = new Node(115);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isOptionalArg();
      PriorityQueue<Node> priorityQueue0 = new PriorityQueue<Node>(48);
      Node node1 = new Node(49, node0, node0, node0, node0);
      node1.isParamList();
      node0.getIntProp(48);
      node0.addChildrenToFront(node1);
      node1.isDelProp();
      node1.setLength((-5380));
      node0.children();
      // Undeclared exception!
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(49, 49, 49);
      node0.isDec();
      Node node1 = new Node(49, node0);
      String string0 = null;
      int int0 = 154;
      int int1 = 27591;
      Node node2 = node0.clonePropsFrom(node1);
      // Undeclared exception!
      try { 
        node2.getChildBefore(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = new Node(43, node0, node0, node0, node0, 8, 55);
      node1.copyInformationFrom(node0);
      node1.getQualifiedName();
      node0.cloneTree();
      node1.removeChild(node0);
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3848);
      Node node1 = Node.newString("");
      Node node2 = Node.newString("s$");
      node1.wasEmptyNode();
      Node node3 = new Node(33, node2, 55, 42);
      Node node4 = new Node(16, node3, node3, node1, 32, 40);
      node2.isEquivalentTo(node4);
      node3.isSetterDef();
      node3.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = Node.newString("OBJECT_PROTOTYPE", 8, 12);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isVar();
      node1.setType(38);
      node1.isThrow();
      node0.hasMoreThanOneChild();
      node0.setSourceEncodedPosition(17);
      node0.getStaticSourceFile();
      node1.getQualifiedName();
      node1.isSetterDef();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      node0.setLineno(114);
      node0.putIntProp(41, 40);
      // Undeclared exception!
      try { 
        node0.setDouble(40);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 41
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newNumber((double) 124, 124, 124);
      Node node1 = Node.newString("{ ");
      node1.setString("{ ");
      Node node2 = new Node(52, 8, 15);
      node2.isFromExterns();
      Node node3 = new Node(52, 40, 56);
      node1.isEquivalentTo(node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node3.useSourceInfoFrom(node0);
      Node.newNumber(2213.1651);
      node2.isEquivalentTo(node3, false, true, false);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newNumber((double) 124, 124, 124);
      Node node1 = Node.newString("{ ");
      Node node2 = new Node(51, node1, node0, node0);
      Node node3 = node1.copyInformationFrom(node0);
      node1.isName();
      node3.getParent();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(2274, 2274, 2274);
      node0.getQualifiedName();
      Node node1 = new Node(56, node0, node0);
      node1.getStaticSourceFile();
      Node node2 = new Node(37, (-517), 49);
      node2.isCall();
      node2.isNot();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(147, 147, 147);
      node0.isSetterDef();
      node0.isNull();
      node0.isCall();
      Node node1 = Node.newString("is_namespace", 63, 57);
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = new Node(103);
      node0.setCharno(4095);
      Node node1 = Node.newString(52, "com.google.javascript.rhino.JSDocInfo$StringPosition");
      node1.getAncestors();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.toString();
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node1.isEquivalentTo(node2);
      node2.isArrayLit();
      node3.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      Node node1 = Node.newString("\n\nSubtree2: ");
      node0.clonePropsFrom(node1);
      node0.isAssignAdd();
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-553), nodeArray0, (-553), (-553));
      Node node1 = new Node(38, node0, 0, 15);
      node1.isQuotedString();
      node0.srcrefTree(node1);
      // Undeclared exception!
      try { 
        node1.isQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(103);
      node0.setCharno(4095);
      node0.getSourceFileName();
      Node node1 = Node.newString(54, "<invalid>");
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.getQualifiedName();
      node2.isDebugger();
      node0.hasChildren();
      node2.wasEmptyNode();
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = new Node(103);
      node0.setCharno(4095);
      Node node1 = Node.newString(52, "com.google.javascript.rhino.JSDocInfo$StringPosition");
      node1.getAncestors();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.toString();
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node1.isEquivalentTo(node2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node2.isInstanceOf();
      node3.isNE();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node(47);
      Node node1 = new Node(43, node0, node0, node0, node0, 47, 55);
      node1.getQualifiedName();
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isAssignAdd();
      node1.isNot();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.isNull();
      ImmutableList.of();
      node0.isNoSideEffectsCall();
      node0.isDec();
      Node node1 = new Node(30, node0, 15, 32);
      node0.isQuotedString();
      node0.isOptionalArg();
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newString("WN/");
      node0.setLineno(32);
      node0.putIntProp(40, 40);
      try { 
        node0.setDouble((-89.716383354122));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING WN/ 32 [originalname: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = new Node(43, node0, node0, node0, node0, 8, 55);
      node1.isNoSideEffectsCall();
      node1.isDec();
      Node node2 = new Node(120, node1, (-3091), 4095);
      node2.isHook();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node(678);
      node0.isScript();
      node0.isArrayLit();
      node0.isEquivalentTo(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createTemplateType("var_args_name");
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      Node node1 = new Node(100, node0, node0, node0, node0);
      Node node2 = Node.newString("Not declared as a constructor", 125, 39);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(102, nodeArray0, 102, 102);
      Node node1 = new Node(42, 0, 8);
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.getStaticSourceFile();
      node1.isDelProp();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "no message resource found for message property ");
      node2.isNull();
      node2.isCatch();
      node1.isExprResult();
      node1.hasChildren();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = new Node(103);
      node0.setCharno(4095);
      Node node1 = Node.newString(52, "com.google.javascript.rhino.JSDocInfo$StringPosition");
      node1.getAncestors();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.toString();
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node1.isEquivalentTo(node2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isEquivalentTo(node3, true, true, true);
      node3.isNot();
      node3.isSwitch();
      node0.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(111, 111, 111);
      node0.isSyntheticBlock();
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(57, node0, node0);
      node1.setIsSyntheticBlock(true);
      node0.isOptionalArg();
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("Q`n@\r>Q_ ", 372, 372);
      Node node1 = Node.newString(37, "UF1UcNWx(B0L9,)H/=C", 39, 83);
      node1.setSideEffectFlags(372);
      Node node2 = new Node(1746, node0, node1, node0, 11, (-2038));
      node0.isArrayLit();
      Node node3 = Node.newString("kW!bWS9_PI", 0, 118);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        node3.srcrefTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newString(":tbD3^<h[ff7fQm38u");
      node0.getJSDocInfo();
      Node node1 = new Node(42, 54, 57);
      Node node2 = node1.srcref(node0);
      node1.isCast();
      node1.isWith();
      node2.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = new Node((-3053));
      node0.isDo();
      Node node2 = new Node(1, node0, node0, node0, node0, 42, 5148);
      Node node3 = new Node((-794), node2, 16, 16);
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString(159, "P@Y ", 159, 159);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(114, node0, node0, node0, 47, 42);
      node1.addSuppression("P@Y ");
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.isEquivalentToTyped(node2);
      node2.putBooleanProp(43, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P@Y ");
      node1.getDirectives();
      node1.addChildrenToBack(node2);
      double double0 = 146.58536;
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isDo();
      Node node1 = new Node(4, node0, node0, node0, node0, 40, 57);
      Node node2 = new Node(32, node1, 4095, 30);
      node2.isSwitch();
      node1.getLastSibling();
      Node.extractCharno(40);
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = Node.newNumber(3831.8883809309436);
      node0.getJSDocInfo();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setIsSyntheticBlock(true);
      node0.isOr();
      Node node1 = new Node(122, 15, 29);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.getStaticSourceFile();
      node0.isDelProp();
      Node node3 = new Node(151, node2, node1, node0, 16, 115);
      node0.isArrayLit();
      node1.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, (-938), (-905));
      Node node1 = new Node(29, node0);
      node1.removeFirstChild();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node0);
      node_NodeMismatch0.equals(node1);
      Node node2 = new Node(0, 15, (-1073));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(45);
      Node node3 = Node.newNumber(2056.84606685);
      Node node4 = node2.copyInformationFromForTree(node3);
      node4.isThrow();
      node1.wasEmptyNode();
      node3.isNot();
      node4.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = new Node(101);
      node0.getProp(3);
      node0.isGetterDef();
      Node node1 = Node.newString((-87), "$|Qc_1gaL", 32, 124);
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString((-860), "Object#Key", (-860), (-229));
      Node node1 = new Node(52, node0, node0, node0, 54, 2);
      node1.isArrayLit();
      node1.srcrefTree(node0);
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.isNull();
      ImmutableList.of();
      node0.isNoSideEffectsCall();
      node0.isDec();
      node0.isArrayLit();
      Node node1 = new Node(2693, node0, node0, node0, node0, 4096, 32);
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.isNull();
      ImmutableList.of();
      node0.isNoSideEffectsCall();
      node0.isDec();
      Node node1 = new Node(30, node0, 15, 32);
      node0.isHook();
      node0.useSourceInfoIfMissingFrom(node1);
      Node.newString(" is not a number node");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(51, node0, node0, node0, node0, 15, 51);
      node1.isInstanceOf();
      node1.isString();
      node0.isCase();
      node0.isGetterDef();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.removeProp(8);
      Node.newString(" : ");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = Node.newString(21, " zFC7QGXUhN~6lAf/$$");
      node0.getSourceFileName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isDelProp();
      node0.isAdd();
      Node node1 = new Node(43, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newNumber(3848.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getJSDocInfo();
      Node node1 = new Node(120, 15, 29);
      Node node2 = node1.srcref(node0);
      node0.isCast();
      node1.isWith();
      node0.wasEmptyNode();
      node2.isQuotedString();
      node1.copyInformationFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isDo();
      Node node1 = new Node(4, node0, node0, node0, node0, 40, 57);
      node1.useSourceInfoFromForTree(node0);
      node0.getQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalParameters((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node0 = new Node((-1212));
      node0.getSourceFileName();
      node0.setCharno((-1212));
      Node node1 = Node.newString(154, "com.google.javascript.rhino.Node$FileLevelJsDocBuilder");
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.toString();
      Node node3 = node1.useSourceInfoFromForTree(node0);
      node1.isEquivalentTo(node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isEquivalentTo(node3, true, false, false);
      node2.isNot();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = Node.newString("OBJECT_PROTOTYPE", 8, 12);
      node0.checkTreeEqualsImpl(node1);
      node1.setType(38);
      node0.isEmpty();
      Node node2 = new Node(15, node1, node1, node1, 2, 55);
      node2.isArrayLit();
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newNumber(3848.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getJSDocInfo();
      Node node1 = new Node(120, 15, 29);
      Node node2 = node1.srcref(node0);
      node0.isCast();
      node1.isWith();
      node2.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString(1004, "THIS");
      Node node1 = new Node(32, 177, 15);
      node1.isQualifiedName();
      node0.isNull();
      node0.isCatch();
      node0.isExprResult();
      node1.hasChildren();
      node0.isExprResult();
      node0.copyInformationFrom(node1);
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = new Node(147, 147, 147);
      node0.isSetterDef();
      Node node1 = Node.newString("&3");
      node0.copyInformationFrom(node1);
      node0.getSideEffectFlags();
      node0.isIn();
      node0.hasMoreThanOneChild();
      node0.isFunction();
      node0.isDefaultCase();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = new Node(102);
      node0.isVar();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = Node.newString(101, "3lg&Cm|H^)z", (-259), 29);
      node0.setJSDocInfo(jSDocInfo0);
      node0.isFalse();
      node0.isIn();
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      node0.isNull();
      ImmutableList.of();
      node0.isNoSideEffectsCall();
      node0.isNoSideEffectsCall();
      Node node1 = new Node(30, node0, 15, 32);
      node0.isHook();
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      node_NodeMismatch0.equals(node0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = new Node(102);
      node0.isExprResult();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      simpleErrorReporter1.warning("5X}c'", "k^!/b`$kp", 120, 692);
      Node node1 = Node.newString("k^!/b`$kp");
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      Node.newString(47, "`BX!:q)6~R#\"QF");
      Node node2 = Node.newNumber((-994.55));
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.isOptionalArg();
      node1.isExprResult();
      node3.hasChildren();
      node2.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = new Node(101);
      ImmutableList.of();
      Node node1 = Node.newString("");
      Node node2 = new Node(33, node0);
      node0.isEquivalentTo(node2, true, true, true);
      node1.isLocalResultCall();
      node0.isInc();
      Node node3 = node0.getAncestor(0);
      node3.setSourceEncodedPositionForTree(29);
      node3.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = new Node(3843, 3843, 3843);
      Node node1 = Node.newString("bHmL+0@9)&`v~U", 1073, 12);
      node1.isVar();
      node0.setType(31);
      node1.getAncestors();
      node1.isBlock();
      Node node2 = Node.newNumber((-1.0), (-843), 49);
      node2.isQualifiedName();
      node2.isScript();
      node0.isDebugger();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = new Node((-1962), (-1962), (-1962));
      Node node1 = Node.newString("GuhlBuJO[B\"=#", 51, (-1962));
      node1.children();
      // Undeclared exception!
      try { 
        node0.addChildrenToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.putBooleanProp(102, false);
      node0.isEquivalentToTyped(node0);
      node0.isOr();
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node((-967));
      Node node1 = Node.newString(0, "EQo2,^.:'`", 8, 4095);
      Node node2 = new Node(51, node1, node1, 31, 46);
      Node node3 = new Node(12, node0);
      simpleErrorReporter0.warning("EQo2,^.:'`", "EQo2,^.:'`", (-1), 47);
      Node.newString("EQo2,^.:'`");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node4 = Node.newString(2054, "Object#Key");
      node2.useSourceInfoFromForTree(node4);
      node3.isScript();
      node2.isThrow();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newNumber(3848.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node(122, 15, 29);
      Node node2 = new Node(55, node0);
      node0.isDelProp();
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node2.getQualifiedName();
      node0.isDebugger();
      node3.isTrue();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newString(51, "\u0001\u0000\u00A0\u0000\u0000\u0000\u0000\u0000\u0000\t\n\u000B\f\r\u0000\u0000\u2028\u2029\u0000\u0000\u0000\u0000\u0000\u202F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u3000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0085\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u0000\u0000\u0000\u0000\u0000\u205F\u1680\u0000\u0000\u180E\u0000\u0000\u0000", 51, (-3411));
      Node node1 = new Node(49);
      node0.addChildToBack(node1);
      Node node2 = node1.cloneNode();
      node0.getJSDocInfo();
      node0.isFromExterns();
      node1.isQuotedString();
      node1.isContinue();
      node2.isNE();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-357));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(node_SideEffectFlags4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got THROW
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = new Node(101);
      InputId inputId0 = new InputId("SHNE");
      node0.setInputId(inputId0);
      Node node1 = new Node(43, node0, node0, node0, node0, 49, 55);
      node1.getQualifiedName();
      node1.removeChild(node0);
      node1.isIn();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      Node node1 = new Node(42, node0, 54, 124);
      node1.wasEmptyNode();
      node0.setCharno(57);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = new Node(0, node1, node1);
      Node node3 = node2.setJSDocInfo(jSDocInfo0);
      node2.isFalse();
      node0.isIn();
      Node node4 = new Node(15, node3, node2);
      node4.isFunction();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = new Node(147, 147, 147);
      node0.isSetterDef();
      Node node1 = new Node(30, node0, node0, node0, 1, 102);
      node0.isArrayLit();
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(124);
      node0.hasMoreThanOneChild();
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(633, 43, 13);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      node0.useSourceInfoFrom(node1);
      node1.getStaticSourceFile();
      node0.isNull();
      node1.isCatch();
      node1.isExprResult();
      node0.hasChildren();
      node1.isExprResult();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = new Node(34, 34, 34);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isVarArgs();
      Node node1 = new Node(46, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node3 = new Node(32, node0, node1, node1);
      node3.copyInformationFromForTree(node2);
      node1.getDirectives();
      Node.newNumber((double) 2);
      node3.isGetProp();
      node1.isStringKey();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = Node.newString(" is not a number node", 8, 12);
      node0.isVar();
      node1.setType(38);
      node1.getAncestors();
      node1.isBlock();
      node1.isQualifiedName();
      node0.isScript();
      node1.isDebugger();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.mayMutateArguments();
      Node node1 = new Node(372, node0, node0);
      node0.useSourceInfoFrom(node1);
      node0.isNull();
      ImmutableList.of();
      node0.isNoSideEffectsCall();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(1191, 1191, 1208);
      Node node1 = new Node(64, node0, node0, node0);
      Node node2 = new Node(64, node1, 4, 2739);
      node1.wasEmptyNode();
      node2.setCharno(33);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node3 = node1.setJSDocInfo(jSDocInfo0);
      node0.isFalse();
      node0.isIn();
      node3.isFunction();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = new Node(111, 111, (-723));
      node0.getBooleanProp(155);
      node0.isOnlyModifiesArgumentsCall();
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(30, node0);
      node1.setIsSyntheticBlock(true);
      node1.useSourceInfoIfMissingFromForTree(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      try { 
        node1.setDouble(1.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NEW [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = new Node(101);
      node0.setSourceFileForTesting("Sp|Ae)#D2d");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.getSideEffectFlags();
      node0.isIn();
      node0.isHook();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = Node.newNumber(3831.8883809309436);
      node0.getJSDocInfo();
      Node node1 = Node.newNumber((double) 31);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = new Node(37, (-3209), 38);
      node2.srcref(node0);
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(0.0);
      node0.setChangeTime(63);
      node0.setIsSyntheticBlock(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Node node1 = new Node(0, 52, 49);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = node1.useSourceInfoFrom(node0);
      node0.getStaticSourceFile();
      node0.srcref(node1);
      node2.isDelProp();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5#^GkXP");
      node2.isNull();
      // Undeclared exception!
      try { 
        node1.setDouble(0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3848);
      String string0 = "";
      Node node1 = Node.newString("");
      node1.wasEmptyNode();
      Node node2 = new Node((-585), node0, node1, 56, 2485);
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(37, nodeArray0);
      Node node4 = node3.useSourceInfoIfMissingFrom(node1);
      // Undeclared exception!
      try { 
        node1.removeChild(node4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = new Node(119, (-2078), (-2078));
      Node node1 = new Node(119, node0, node0, node0, node0, 852, 100);
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'", 52, 56);
      node0.addChildToBack(node1);
      Node node2 = Node.newString("GU/)BLgG?R", 0, 8);
      node1.putIntProp(1, 1);
      node0.isThrow();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        node0.getChildBefore(node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = new Node(101);
      ImmutableList.of();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node1 = new Node(2, 105, 47);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.getStaticSourceFile();
      Node node3 = node2.srcref(node0);
      node1.isDelProp();
      String string0 = "is_namespace";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "is_namespace");
      Node node4 = Node.newString(51, "5#^GkXP", 2, 282);
      node4.isNull();
      try { 
        node3.setDouble(105);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // AND 105 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString(119, "REGEXP_FUNCTION_TYPE", (-938), (-938));
      Node node1 = new Node(119, node0, node0, 2456, 1);
      nodeArray0[0] = node1;
      Node node2 = Node.newString("GU/)BLgG?R");
      nodeArray0[1] = node2;
      Node node3 = new Node(119, nodeArray0, 51, 42);
      node3.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = new Node(32);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node(4095, 56, 3081);
      Node node2 = node0.srcref(node1);
      node2.isDelProp();
      node2.isCast();
      node0.isWith();
      node2.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = new Node(115);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isOptionalArg();
      PriorityQueue<Node> priorityQueue0 = new PriorityQueue<Node>(48);
      Node node1 = new Node(119, node0, node0, node0, node0);
      node1.removeChildren();
      node1.isParamList();
      Node.newString("is_namespace", 4095, 1831);
      node0.isInc();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = Node.newString("OBJECT_PROTOTYPE", 8, 12);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.useSourceInfoFromForTree(node1);
      node0.isVar();
      node1.setType(38);
      node1.isBlock();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OBJECT_PROTOTYPE");
      node0.hasMoreThanOneChild();
      node0.setSourceEncodedPosition(17);
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node0 = new Node((-1212));
      node0.getSourceFileName();
      node0.setCharno((-1212));
      Node node1 = Node.newString(154, "com.google.javascript.rhino.Node$FileLevelJsDocBuilder");
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.putIntProp(52, 0);
      node0.addSuppression((String) null);
      node2.getQualifiedName();
      node1.isDebugger();
      node2.isTrue();
      node2.isStringKey();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(0.0);
      // Undeclared exception!
      try { 
        node0.addChildToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.isWhile();
      ImmutableList.of();
      node0.isName();
      node0.isScript();
      node0.isDebugger();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = Node.newNumber(6078.05015692);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("com.google.javascript.rhino.Node$AbstractPropListItem", "X6?", 154, 801);
      Node node1 = Node.newString("is_namespace");
      Node node2 = new Node(85, node1, node1, node0, node1);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      node2.setCharno(38);
      Node node3 = Node.newString(1870, "biyayNV[,l90!E;ErI");
      node2.useSourceInfoFromForTree(node3);
      node3.isCatch();
      node0.isBlock();
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Node node0 = Node.newString("Gbl}L8:B-");
      Node node1 = new Node(34, node0, node0);
      node1.setWasEmptyNode(false);
      node1.isOptionalArg();
      node1.isOnlyModifiesThisCall();
      node0.addChildrenToBack(node1);
      node1.isSwitch();
      // Undeclared exception!
      try { 
        node1.cloneTree();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newNumber(3848.0);
      node0.setChangeTime((-283));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Node node1 = new Node(38, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.srcref(node0);
      node0.isDelProp();
      Node node2 = new Node(1323);
      node2.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = new Node((-389), 2541, (-389));
      node0.isGetterDef();
      Node node1 = new Node(38, node0, node0, node0, node0, 38, 35);
      node0.getQualifiedName();
      node0.isNE();
      node0.isStringKey();
      node1.isThis();
      node1.useSourceInfoIfMissingFrom(node0);
      node1.removeChild(node0);
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = new Node(20);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(113, node0, node0, node0, 1573, 105);
      Node node2 = node1.srcrefTree(node0);
      node2.getInputId();
      node1.isTrue();
      node2.isStringKey();
      node2.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newString(1004, "?{R!kOf~");
      node0.getSourceFileName();
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.isSetterDef();
      ImmutableList.of();
      Node node1 = Node.newString("");
      node1.isDec();
      node1.isIn();
      node0.isEquivalentTo(node1);
      int int0 = Node.NO_SIDE_EFFECTS;
      node0.isInc();
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = new Node(101);
      Node.newNumber((double) 37, 51, 51);
      Node node1 = Node.newString("");
      node0.isNE();
      Node node2 = new Node(154, node1, node1, 30, 16);
      node2.isStringKey();
      node2.isContinue();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(102, nodeArray0, 102, 102);
      Node node1 = new Node((-989), node0, node0, node0, node0);
      Node node2 = new Node((-795), 54, 12);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node3 = node0.srcref(node1);
      node2.isDelProp();
      node3.isCast();
      node3.isWith();
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = new Node(13);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Node node1 = new Node(46, node0, node0, node0);
      node0.putIntProp(2, 53);
      node1.getBooleanProp(48);
      Node node2 = new Node(32, node1, node1, node1, 38, (-920));
      node0.getQualifiedName();
      node2.isString();
      node2.isAssign();
      node1.isNew();
      node0.isReturn();
      node2.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node.newString("sEGbgus7", 678, 678);
      Node node0 = Node.newString((-1546), ">", 15, 2);
      Node node1 = new Node(34, 154, 29);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        node0.srcref((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = new Node(64);
      node0.setSourceFileForTesting("fIZ;vQ-'xH");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = new Node(2, node0, node0, 4095, (-2373));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node1.setCharno(57);
      Node node2 = Node.newString(4, "Object#Element");
      node0.useSourceInfoFromForTree(node1);
      node2.isCatch();
      node0.isBlock();
      node1.hasChildren();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newString(111, "Foe-5#IEihb\"", 101, (-587));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      JSType[] jSTypeArray0 = new JSType[9];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[6] = jSType0;
      jSTypeArray0[7] = jSType0;
      jSTypeArray0[8] = jSType0;
      Node node1 = jSTypeRegistry1.createOptionalParameters(jSTypeArray0);
      Node node2 = new Node(50, node1, 8, 40);
      node2.getProp(111);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.isComma();
      node1.isGetElem();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node4.checkTreeEquals(node0);
      node3.isDo();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = Node.newNumber(3831.8883809309436);
      node0.getJSDocInfo();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setChangeTime(44);
      node0.isUnscopedQualifiedName();
      node0.setIsSyntheticBlock(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Node node1 = new Node(122, 15, 29);
      Node node2 = new Node(1779, node1, node0, 1952, 31);
      node2.isCall();
      node1.isCase();
      Node node3 = node2.removeChildAfter(node1);
      node3.isThrow();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = new Node(64);
      node0.setSourceFileForTesting("fIZ;vQ-'xH");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(50, node0, 162, (-2063));
      Node node2 = node0.useSourceInfoFrom(node1);
      node0.getStaticSourceFile();
      node0.srcref(node1);
      node2.isDelProp();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "is_namespace");
      node2.isNull();
      node2.isCatch();
      node2.isExprResult();
      node1.hasChildren();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.isGetterDef();
      Node node1 = new Node(51, node0, node0, node0, node0, 8, 57);
      node1.getQualifiedName();
      node0.isNE();
      node1.isStringKey();
      node0.isThis();
      node1.useSourceInfoIfMissingFrom(node0);
      node1.isIn();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'", 52, 56);
      node0.addChildToBack(node1);
      Node node2 = Node.newString("GU/)BLgG?R", 0, 8);
      node2.isRegExp();
      node1.putIntProp(31, 4);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.checkTreeTypeAwareEqualsImpl(node0);
      // Undeclared exception!
      try { 
        node1.setDouble(43);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 31
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = new Node(111, 111, (-723));
      node0.getBooleanProp(155);
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(155, node0, node0, node0, 52, 15);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.getStaticSourceFile();
      Node node3 = node2.srcref(node0);
      node2.isDelProp();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5#^GkXP");
      node3.isNull();
      node1.isCatch();
      Node node4 = Node.newString("l_Q/4xM", 50, 43);
      node4.isExprResult();
      node1.hasChildren();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      node0.isSetterDef();
      Node node1 = new Node(51, node0, node0, node0, node0);
      Node node2 = new Node(1, 2, (-871));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node3 = node0.useSourceInfoFrom(node2);
      node1.getStaticSourceFile();
      Node node4 = node2.srcref(node1);
      node1.isDelProp();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      node3.isNull();
      node3.isCatch();
      node4.isExprResult();
      Node node5 = null;
      try {
        node5 = new Node((-1826), node4, node1, node3, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = new Node(35);
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newString("uq_Gl");
      Node node2 = node0.srcrefTree(node1);
      node2.getInputId();
      node0.isTrue();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isDo();
      node0.isString();
      Node node1 = new Node(15, node0, node0, 1685, 50);
      node0.copyInformationFromForTree(node1);
      node1.isScript();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString((-1725), " is not a number node");
      Node node1 = new Node(124, node0, node0, node0);
      nodeArray0[0] = node1;
      Node node2 = new Node(124, nodeArray0);
      Node node3 = new Node((-1725), node2, 167, 40);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node1.setJSDocInfo(jSDocInfo0);
      node3.setCharno(40);
      node1.getSideEffectFlags();
      Node node4 = Node.newNumber(249.531, 50, 2605);
      node4.isFalse();
      Node node5 = Node.newString(2, " is not a number node");
      node5.isIn();
      node5.isFunction();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = Node.newString("3e");
      node1.setChangeTime(32);
      node1.setIsSyntheticBlock(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Node node2 = new Node(155, 48, 0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node3 = node2.useSourceInfoFrom(node0);
      node3.getStaticSourceFile();
      Node node4 = node0.srcref(node3);
      node4.isDelProp();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3e");
      node3.isNull();
      try { 
        node0.setDouble(1891.483576);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // AND 101 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node node0 = Node.newString(1004, "?{R!kOf~");
      Node node1 = new Node(32, 177, 15);
      node1.isQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.checkTreeEqualsImpl(node1);
      node0.setLineno(31);
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(51, node0, node0, node0, node0, 15, 51);
      node1.isInstanceOf();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      node0.isThrow();
      node0.isGetterDef();
      node0.isBlock();
      node0.isTry();
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = new Node(111, 111, (-723));
      node0.getBooleanProp(155);
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(155, node0, node0, node0, 52, 15);
      Node node2 = new Node(117, 114, 37);
      node2.mayMutateArguments();
      node0.isCall();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newNumber(3833.471946507115);
      node0.getJSDocInfo();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setChangeTime(44);
      node0.setIsSyntheticBlock(true);
      node0.isVar();
      node0.isSyntheticBlock();
      Node node1 = new Node(47, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = new Node((-1962), (-1962), (-1962));
      Node node1 = new Node(36, node0, 476, 43);
      node0.setCharno(32);
      node0.setSourceFileForTesting("I@U{-dH2!)<D6[Wm[");
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = Node.newString("");
      Node.newNumber((double) 51, 57, 4);
      node2.isDo();
      node0.getSourceFileName();
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newNumber(2270.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setChangeTime((-2078));
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isUnscopedQualifiedName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Node node1 = new Node(49, 56, 32);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.srcref(node0);
      node0.isDelProp();
      node0.isCast();
      node0.isWith();
      node0.isQuotedString();
      try { 
        node1.setString("com.google.javascript.rhino.jstype.AllType");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // THROW is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = Node.newString("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(49, node0, node0, node0);
      node1.copyInformationFrom(node0);
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = Node.newNumber(3848.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node$AncestorIterable$1");
      Node node1 = new Node(29, (-629), 2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isStringKey();
      node1.isQuotedString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      node1.cloneNode();
      node0.isCatch();
      node1.getChildAtIndex((-962));
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = new Node(122, 122, (-1956));
      Node node1 = Node.newNumber((-1.0));
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isLabel();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp((-1956));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -1956
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node0 = Node.newString((-1212), "");
      node0.getSourceFileName();
      Node node1 = new Node(152, 51, 4);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      node0.isDelProp();
      node1.isCast();
      node0.setString("");
      node1.cloneNode();
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      Node node1 = Node.newString((-1534), "GU/)BLgG?R");
      Node node2 = new Node(47, (-2061), 0);
      node1.getJsDocBuilderForNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node3 = new Node(86, node2);
      node3.isCast();
      node0.isQualifiedName();
      // Undeclared exception!
      try { 
        node3.useSourceInfoFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = new Node(2274, 2274, 2274);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(56, node0, node0);
      node1.getChildBefore(node0);
      node1.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node0.addChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = Node.newNumber(5432.29125749544, 48, 154);
      node0.getStaticSourceFile();
      node0.getJsDocBuilderForNode();
      node0.isOnlyModifiesArgumentsCall();
      node0.setLength((-1647));
      node0.putIntProp(48, 33);
      node0.isOptionalArg();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.getJSType();
      Node node1 = Node.newNumber((double) 38, 1, 1283);
      node0.copyInformationFromForTree(node1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6n^.j");
      node1.getIntProp(3117);
      node1.addChildrenToFront(node0);
      node0.isDelProp();
      node0.setLength(52);
      node0.children();
      node1.checkTreeEquals(node0);
      node0.getJSType();
      node1.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.isWhile();
      ImmutableList.of();
      node0.isNoSideEffectsCall();
      node0.isDec();
      Node node1 = new Node(112, 204, 142);
      node1.isIn();
      node1.setCharno(53);
      Node node2 = Node.newString(57, "2");
      node1.useSourceInfoFromForTree(node2);
      node1.isCatch();
      node1.isBlock();
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O{}5S}i^'.");
      Node node0 = new Node(115, 115, 115);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isStringKey();
      node0.isQuotedString();
      node0.isThis();
      Node node1 = new Node(64, 57, 1);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      // Undeclared exception!
      try { 
        node2.removeChild(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = new Node((-823), 115, (-823));
      Node node1 = new Node(115, node0, 2837, 2);
      node1.setCharno(15);
      node0.setSourceFileForTesting(" is not a number node");
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.isDelProp();
      node0.isCast();
      node1.useSourceInfoIfMissingFromForTree(node0);
      Node node2 = Node.newNumber(2053.12958111211, 50, 3173);
      node2.isOnlyModifiesThisCall();
      node2.isWith();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(102, nodeArray0, 102, 44);
      Node node1 = new Node((-989), node0, node0, node0, node0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      try { 
        node0.setDouble(1.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // INC is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = new Node((-1954));
      Node node1 = Node.newNumber((double) 57);
      node1.siblings();
      Node node2 = new Node(40, node0, node1, node1);
      Node node3 = node0.copyInformationFrom(node1);
      node3.isName();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = new Node(141, 141, 141);
      node0.isSetterDef();
      Node node1 = new Node(51, node0, node0, node0, node0);
      node1.isCall();
      node0.isAnd();
      node1.copyInformationFrom(node0);
      node0.isStringKey();
      node1.isScript();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = Node.newNumber((double) 111, 111, 111);
      Node node1 = new Node(147, 40, 8);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = node1.srcref(node0);
      Node node3 = new Node((-893), node1, node0, node1, node0, 114, 211);
      node3.isDelProp();
      node1.isCast();
      node0.isWith();
      Node node4 = null;
      try {
        node4 = new Node(53, node2, 16, 40);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isInstanceOf();
      Node node1 = Node.newString(4, "Object#Element", 125, 4095);
      node1.isString();
      Node node2 = Node.newString("Object#Element");
      Node node3 = new Node(57);
      node0.isBreak();
      Node node4 = new Node(43, node2, node3, node0, 51, (-1770));
      node4.isTrue();
      // Undeclared exception!
      try { 
        node0.addChildAfter(node3, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = Node.newNumber(1.2, (-2206), (-2157));
      node0.setIsSyntheticBlock(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = new Node(49, 52, 52);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.getStaticSourceFile();
      Node node3 = node0.srcref(node1);
      node2.isDelProp();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Key");
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      Node node4 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node4.isNull();
      node3.setDouble(1);
      node2.isUnscopedQualifiedName();
      node0.isStringKey();
      node4.isScript();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = Node.newNumber(56.0);
      Node node1 = Node.newNumber((double) 0, 44, 49);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.isDebugger();
      node0.toStringTree();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node2 = node1.srcrefTree(node0);
      node2.getParent();
      int int0 = 49;
      // Undeclared exception!
      try { 
        node1.removeChildAfter((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = new Node(2274, 2274, 2274);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newNumber((double) 57);
      Node node2 = Node.newNumber((double) 4095, 29, 102);
      Node node3 = Node.newString("side_effect_flags");
      Node node4 = Node.newNumber(2890.56976782, 4676, 52);
      Node node5 = new Node(42, node2, node1, node3, node4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node0.setCharno(435);
      Node node6 = Node.newString(6449, "directives");
      node5.useSourceInfoFromForTree(node0);
      node1.useSourceInfoFromForTree(node2);
      node6.getQualifiedName();
      Node node7 = null;
      try {
        node7 = new Node(65536, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.isGetterDef();
      Node node1 = new Node(51, node0, node0, node0, node0, 8, 57);
      node1.getQualifiedName();
      node0.isNE();
      node1.isStringKey();
      Node node2 = node0.srcref(node1);
      node2.isDelProp();
      node0.isCast();
      node2.isWith();
      node2.isQuotedString();
      Node node3 = Node.newString(31, "GU/)BLgG?R");
      // Undeclared exception!
      try { 
        node3.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      Node node1 = Node.newNumber((double) 37, 51, 51);
      Node node2 = new Node(42, node0, 54, 124);
      node1.setCharno(57);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node3 = node0.setJSDocInfo(jSDocInfo0);
      node1.setCharno(29);
      node3.getSideEffectFlags();
      node2.isFalse();
      // Undeclared exception!
      try { 
        node0.srcrefTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      Node node1 = Node.newNumber((double) 37, 51, 51);
      Node node2 = new Node(43, node1, node1, node0, node1, 49, 1978);
      node2.getQualifiedName();
      node2.isNE();
      // Undeclared exception!
      try { 
        node2.addChildrenToBack(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = new Node(122, 122, (-1962));
      node0.isLabelName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, node0);
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) functionType0;
      jSTypeArray0[2] = (JSType) functionType0;
      jSTypeArray0[3] = (JSType) functionType0;
      jSTypeArray0[4] = (JSType) functionType0;
      jSTypeArray0[5] = (JSType) functionType0;
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, jSTypeArray0);
      modificationVisitor0.caseFunctionType(functionType1);
      jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // VOID is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      JSType[] jSTypeArray0 = new JSType[8];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      // Undeclared exception!
      try { 
        modificationVisitor0.caseFunctionType(functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      Node node1 = Node.newNumber((double) 37, 51, 51);
      Node node2 = new Node(43, node1, node1, node0, node1, 49, 1978);
      node2.getQualifiedName();
      node2.isNE();
      node0.isStringKey();
      node2.isThis();
      Node node3 = node2.useSourceInfoIfMissingFrom(node1);
      // Undeclared exception!
      try { 
        node3.removeChild(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      modificationVisitor0.caseNumberType();
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Not declared as a type name");
      Node node1 = node0.cloneNode();
      node1.isCatch();
      node0.getBooleanProp(47);
      Node node2 = Node.newNumber(0.5);
      Node node3 = new Node(152, node0, node0, node2);
      node3.useSourceInfoIfMissingFromForTree(node1);
      node3.srcrefTree(node2);
      node3.hasChildren();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = Node.newString("nL8");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.getQualifiedName();
      node0.setLineno(32);
      node0.putIntProp(36, 36);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isNull();
      try { 
        node0.setDouble((-89.716383354122));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING nL8 32 [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newNumber(3848.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setChangeTime((-283));
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isUnscopedQualifiedName();
      node0.putIntProp(33, 102);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = Node.newNumber((double) 33);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5X}<c'");
      node1.isNull();
      node0.setDouble(102);
      node1.getChildAtIndex(0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newString("WN/");
      node0.getQualifiedName();
      node0.setLineno(32);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Node node1 = new Node(40, 32, 46);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.srcref(node1);
      node1.isDelProp();
      node0.isCast();
      node0.isWith();
      node1.isQuotedString();
      // Undeclared exception!
      try { 
        node1.setString((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.getBooleanProp(101);
      node0.isUnscopedQualifiedName();
      node0.setIsSyntheticBlock(true);
      node0.isAssignAdd();
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(40, node0);
      node0.isIf();
      Node node2 = Node.newString("}\"dP*YwVe,S.>/tx");
      node0.isNE();
      node1.isStringKey();
      node1.copyInformationFrom(node2);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = new Node(111, 111, (-723));
      node0.getBooleanProp(155);
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(4095, node0, node0, node0, node0, 57, 47);
      node0.isAssignAdd();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pjhH|x|\"'/ mqxl");
      node0.cloneNode();
      Node node2 = new Node(2, node1, node1);
      node2.isCatch();
      node1.getBooleanProp(53);
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = new Node(43, 43, 64);
      Node node1 = Node.newString("inferred");
      Node node2 = node0.srcrefTree(node1);
      // Undeclared exception!
      try { 
        node2.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node((-967));
      Node node1 = Node.newString(0, "EQo2,^.:'`", 8, 4095);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)118;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(51, node1, node1, 31, 46);
      Node node3 = new Node(12, node0);
      node1.isWith();
      node3.replaceChild(node0, node2);
      Node node4 = Node.newString("fBi.{6aT6<&M_3&Wp");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[2];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node3);
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) functionType0, (Map<TemplateType, JSType>) hashMap0);
      templatizedType0.isPropertyTypeInferred("Unknown class name");
      jSTypeArray0[1] = (JSType) templatizedType0;
      jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node4.isAssignAdd();
      Node node5 = new Node(49, node0, node4);
      node5.isNE();
      node5.addChildAfter(node3, node4);
      node4.isGetProp();
      node5.removeChildren();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = "GU/)BLgG?R";
      Node node0 = Node.newString("GU/)BLgG?R");
      node0.setLength((-76));
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        node0.addChildToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O{}5S}i^'.");
      Node node0 = new Node(115, 115, 115);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isVarArgs();
      Node node1 = new Node(118, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node3 = new Node(32, node1, node0, node2);
      node0.getDirectives();
      Node.newNumber((double) 29);
      node3.isGetProp();
      node3.isWith();
      node1.isGetElem();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = new Node(111, 111, (-723));
      node0.getBooleanProp(155);
      node0.isUnscopedQualifiedName();
      Node node1 = new Node(4095, node0, node0, node0, node0, 57, 47);
      node1.setIsSyntheticBlock(true);
      node0.isAssignAdd();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node1.setCharno(1800);
      Node node2 = Node.newString(29, "Object#Key");
      node0.useSourceInfoFromForTree(node2);
      node0.isCatch();
      node1.isBlock();
      node2.hasChildren();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      Node node0 = Node.newString("r");
      node0.siblings();
      Node node1 = new Node(77, node0, node0, node0);
      node1.copyInformationFrom(node0);
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = new Node(678);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("`BX!:q)6~R#\"QF", "5X}<c'", 672, 48);
      Node node1 = Node.newNumber((-1.0), 32, 221);
      Node node2 = Node.newString("(yE1");
      Node node3 = new Node(38, node0, node0, node2, node2);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.setCharno(108);
      Node node4 = Node.newString(53, "Object#Key");
      Node node5 = node3.useSourceInfoFromForTree(node4);
      node4.useSourceInfoFromForTree(node0);
      node0.getQualifiedName();
      node1.isEquivalentTo(node5, false, false, true);
      node2.isDebugger();
      node1.isExprResult();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = Node.newNumber(3848.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setChangeTime((-283));
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isUnscopedQualifiedName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Node node1 = new Node((-1));
      node1.isSwitch();
      node0.isAssign();
      Node node2 = new Node(53, node1, node0);
      node1.getAncestors();
      node2.isDebugger();
      node2.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 130, 130, 130);
      FileSystemHandling.shouldAllThrowIOExceptions();
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("`BX!:q)6~R#\"QF", "`BX!:q)6~R#\"QF", 126, 55);
      Node.newNumber(130.0, 15, 3833);
      Node node1 = Node.newString("`BX!:q)6~R#\"QF");
      Node node2 = new Node(1, node1, node1, node1, node0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = Node.newString("Object#Element");
      node3.children();
      // Undeclared exception!
      try { 
        node2.addChildrenAfter(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = new Node((-1962));
      Node node1 = Node.newString("GuhlBuJO[B\"=#", 51, (-1962));
      node0.setCharno(658);
      Node node2 = Node.newString(16, "com.google.common.collect.ImmutableList");
      node1.useSourceInfoFromForTree(node2);
      Node node3 = new Node(520, node2, node0, node1, node0, (-1944), 38);
      node3.setType(0);
      node3.useSourceInfoFromForTree(node2);
      node0.getQualifiedName();
      node0.isEquivalentTo(node2, true, true, true);
      node3.isDebugger();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 130, 130, 130);
      FileSystemHandling.shouldAllThrowIOExceptions();
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("`BX!:q)6~R#\"QF", "`BX!:q)6~R#\"QF", 126, 55);
      Node.newNumber(130.0, 15, 3833);
      Node node1 = Node.newString("`BX!:q)6~R#\"QF");
      Node node2 = new Node(1, node1, node1, node1, node0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node2.srcref(node0);
      node0.setCharno(156);
      Node node3 = Node.newString(126, "MQ<\u0003m>+");
      node3.useSourceInfoFromForTree(node1);
      node2.isGetProp();
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.isThrow();
      node0.isUnscopedQualifiedName();
      node0.setIsSyntheticBlock(false);
      node0.setSourceFileForTesting("!lDV;b5:NNE5>6wa7");
      Node node1 = Node.newString((-2397), "qR/p,");
      Node node2 = new Node(36, node1);
      node2.isWith();
      node1.getInputId();
      node0.isIf();
      Node node3 = Node.newString("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node4 = new Node(1, 56, 4095);
      node4.isEmpty();
      node3.isEquivalentTo(node1);
      node1.getQualifiedName();
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = new Node(13);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      node0.putIntProp(54, 103);
      Node node1 = new Node(1, node0, node0, node0, 53, 42);
      Node node2 = node0.srcrefTree(node1);
      node2.isWhile();
      node0.isNoSideEffectsCall();
      node0.addChildToFront(node1);
      node1.detachChildren();
      node0.setLength(123);
      try { 
        node0.setDouble(54);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NE 53 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000004] [slash_v: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      Node node0 = jSTypeRegistry1.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(40, node0, node0, node0, node0, 5, 42);
      node1.isInstanceOf();
      InputId inputId0 = new InputId("Object#Key");
      node1.useSourceInfoIfMissingFrom(node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      node1.isThrow();
      node0.isNoSideEffectsCall();
      node1.isNot();
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = Node.newNumber(3831.8883809309436);
      node0.getJSDocInfo();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setChangeTime(44);
      node0.isUnscopedQualifiedName();
      node0.setIsSyntheticBlock(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Node node1 = new Node(122, 15, 29);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.getStaticSourceFile();
      Node node3 = node1.srcref(node0);
      node0.isDelProp();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5#^GkXP");
      node0.isNull();
      node0.setDouble(46.0);
      node3.isUnscopedQualifiedName();
      node3.isStringKey();
      node2.isScript();
      node2.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.getSideEffectFlags();
      node1.isUnscopedQualifiedName();
      node1.isIn();
      // Undeclared exception!
      try { 
        node1.addChildBefore((Node) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = new Node(122);
      node0.mayMutateGlobalStateOrThrow();
      node0.isWhile();
      ImmutableList.of();
      node0.setSourceFileForTesting("Sp|Ae)#D2d");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.getSideEffectFlags();
      node0.isIn();
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = Node.newString("sEGbgus7", 678, 678);
      Node node1 = Node.newNumber((double) 39, 2, (-2089));
      node0.siblings();
      Node node2 = new Node(37, node0, node0, 12, 50);
      node2.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = node2.copyInformationFrom(node1);
      node3.getLength();
      Node node4 = null;
      try {
        node4 = new Node(337, node2, node0, node0, 56, (-2487));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      Node node1 = Node.newNumber((double) 37, 51, 51);
      Node node2 = new Node(42, node0, 54, 124);
      node1.setCharno(57);
      node2.isThis();
      node0.isOr();
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newString("GU/)BLgG?R");
      node0.setLength((-76));
      node0.setSourceFileForTesting("com.google.common.base.CharMatcher$2");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node0.getSideEffectFlags();
      node1.isIn();
      node0.isHook();
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isDo();
      node0.isString();
      node0.toString(false, false, false);
      Node node1 = new Node((-682), node0, node0, 50, (-1212));
      node0.isSwitch();
      node0.isAssign();
      node1.isComma();
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O{}5S}i^'.");
      Node node0 = new Node(115, 115, 115);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isDelProp();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = new Node(163, 114, 122);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      node1.useSourceInfoFrom(node0);
      Node node2 = node0.srcref(node1);
      node2.isDelProp();
      node2.isNull();
      try { 
        node2.setDouble(0.5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FOR 115 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 130, 130, 130);
      FileSystemHandling.shouldAllThrowIOExceptions();
      nodeArray0[0] = node0;
      node0.setChangeTime((-283));
      node0.getBooleanProp(4095);
      node0.isUnscopedQualifiedName();
      node0.setIsSyntheticBlock(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Node node1 = new Node(52, 30, 56);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = node0.useSourceInfoFrom(node1);
      Node node3 = node1.srcref(node0);
      Node node4 = new Node(154, node3, node2, 845, 12);
      node4.isDelProp();
      node1.isNull();
      try { 
        node3.setDouble(47);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // INSTANCEOF 30 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = new Node(115);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isOptionalArg();
      node0.setOptionalArg(true);
      node0.children();
      node0.toString(true, false, false);
      Node node1 = new Node(119, node0, node0, node0, node0);
      node1.isParamList();
      Node node2 = Node.newString("is_namespace", 4095, 1831);
      node1.isVar();
      node2.setType(15);
      node0.isSetterDef();
      node1.isBreak();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      Node node1 = Node.newNumber((double) 37, 51, 51);
      Node node2 = new Node(42, node0, 54, 124);
      node1.setCharno(57);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node2.removeChildren();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node3 = node0.setJSDocInfo(jSDocInfo0);
      node1.setCharno(29);
      node3.getSideEffectFlags();
      node2.isFalse();
      node2.isIn();
      node3.hasMoreThanOneChild();
      node0.isFunction();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(1191, (-967), 1191);
      Node node1 = Node.newString(0, "EQo2,^._:'X`", (-2118), 4095);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(51, node1, node1, 31, 46);
      Node node3 = new Node(12, node0);
      node1.isWith();
      node3.replaceChild(node0, node2);
      node3.isIf();
      Node node4 = Node.newString("fBi.{6aT6<&M_3&Wp");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[2];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node3);
      jSTypeArray0[0] = (JSType) functionType0;
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) functionType0, (Map<TemplateType, JSType>) hashMap0);
      jSTypeArray0[1] = (JSType) templatizedType0;
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node5.isAssignAdd();
      Node node6 = new Node(49, node0, node4);
      node6.isNE();
      node6.addChildAfter(node3, node4);
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNoType();
      Node node0 = new Node(39, 39, 1);
      node0.isCall();
      node0.isCase();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.mayMutateGlobalStateOrThrow();
      node0.isWhile();
      ImmutableList.of();
      node0.isNoSideEffectsCall();
      node0.isDec();
      Node node1 = new Node(112, 204, 142);
      node1.isIn();
      Node node2 = new Node(878, (-219), 47);
      node1.isArrayLit();
      node1.isCase();
      Node node3 = new Node(4831, node0, node1, 32, 2);
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(51, node0, node0, node0, node0, 15, 51);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isInstanceOf();
      InputId inputId0 = new InputId("Object#Key");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1803);
      node0.isThrow();
      node1.isNoSideEffectsCall();
      node1.isNot();
      node0.getAncestor(1);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.getSideEffectFlags();
      node1.isIn();
      node0.isVar();
      Node.newNumber((-2881.65229534));
      String string0 = null;
      try { 
        node1.setDouble(6119.100382736596);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // OR 100 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = new Node(678);
      node0.isEquivalentTo(node0, true, true, true);
      Node node1 = Node.newString("var_args_name");
      Node node2 = new Node(49, node0, node0, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node1.setCharno((-3031));
      Node node3 = Node.newString(730, "Object#Key");
      Node node4 = node2.useSourceInfoFromForTree(node3);
      node1.isEquivalentTo(node0, true, false, true);
      node1.getJSType();
      Node node5 = new Node(4, 8, 30);
      node5.isCatch();
      node4.isBlock();
      node2.hasChildren();
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = new Node(42);
      Node node1 = new Node(42, node0, node0);
      node1.isLocalResultCall();
      node0.getSourceOffset();
      node1.isFor();
      node0.setSourceFileForTesting((String) null);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.children();
      String string0 = "x^{:;/y:\\E";
      ObjectType.cast((JSType) null);
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("x^{:;/y:E", node3, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = Node.newString("nL8");
      node0.setChangeTime(125);
      node0.getBooleanProp(2811);
      node0.isUnscopedQualifiedName();
      node0.setIsSyntheticBlock(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = new Node((-2885), (-3238), 39);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = node2.srcref(node0);
      node3.isDelProp();
      node3.isNull();
      // Undeclared exception!
      try { 
        node2.setDouble(32);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2885
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.mayMutateGlobalStateOrThrow();
      node0.isWhile();
      ImmutableList.of();
      node0.setSourceFileForTesting("Sp|Ae)#D2d");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Sp|Ae)#D2d", false);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      TemplateType templateType1 = JSType.toMaybeTemplateType((JSType) templateType0);
      TemplateType templateType2 = templateType1.toMaybeTemplateType();
      node_NodeMismatch0.equals(templateType2);
      node0.isEquivalentTo(node1, false, false, false);
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.mayMutateGlobalStateOrThrow();
      node0.getBooleanProp((-5217));
      Node.mergeLineCharNo(49, 100);
      Node node1 = new Node((-3963), 844, 0);
      Node node2 = new Node(111, node1, node0, 2, 43);
      node2.isCall();
      node0.isCase();
      node1.useSourceInfoFrom(node2);
      Node node3 = node0.cloneTree();
      // Undeclared exception!
      try { 
        node3.addChildToBack(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.mayMutateGlobalStateOrThrow();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "boolean");
      node0.isNoSideEffectsCall();
      node0.isDec();
      Node node1 = new Node(52);
      node0.isIn();
      node1.checkTreeEquals(node0);
      Node node2 = Node.newNumber((double) 40, (-815), (-815));
      node2.isThrow();
      node2.isExprResult();
      node0.useSourceInfoIfMissingFromForTree(node2);
      node1.cloneNode();
      try { 
        node1.setString("Node tree inequality:\nTree1:\nINSTANCEOF\n\n\nTree2:\nAND 101\n\n\nSubtree1: INSTANCEOF\n\n\nSubtree2: AND 101\n");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // INSTANCEOF is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("`BX!:q)6~O#\"QF", "`BX!:q)6~O#\"QF", 126, 55);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      jSType0.isStringObjectType();
      node0.getProp(47);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node2.isSyntheticBlock();
      node2.hasMoreThanOneChild();
      node1.isSwitch();
      node2.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(1004, "?{R!kOf~");
      node0.getSourceFileName();
      Node node1 = new Node(32, 161, 15);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isCall();
      node1.isCast();
      node1.isNew();
      // Undeclared exception!
      try { 
        node0.addChildrenToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.mayMutateGlobalStateOrThrow();
      node0.getBooleanProp((-5217));
      Node.mergeLineCharNo(49, 100);
      Node node1 = new Node((-3963), 844, 0);
      Node node2 = new Node(111, node1, node0, 2, 43);
      node2.isCall();
      node0.isCase();
      node0.cloneTree();
      // Undeclared exception!
      try { 
        node2.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = Node.newString(" is not a number node", 8, 12);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.toString(false, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isVar();
      node1.setType(38);
      node0.isIn();
      node0.hasMoreThanOneChild();
      node0.setSourceEncodedPosition(16);
      node1.isAssign();
      node0.getStaticSourceFile();
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.mayMutateGlobalStateOrThrow();
      node0.isWhile();
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      node0.setSourceFileForTesting("Sp|Ae)#D2d");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      Node node2 = new Node(43, 15, 4501);
      Node node3 = node2.useSourceInfoFrom(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node5 = node4.srcref(node1);
      node3.isDelProp();
      node5.isNull();
      try { 
        node1.setDouble(3011.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // AND 101 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000005] [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.isSetterDef();
      ImmutableList.of();
      Node node1 = Node.newString("");
      node1.isDec();
      node1.isIn();
      node0.isEquivalentTo(node1);
      node1.getIndexOfChild(node1);
      node0.isInc();
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = Node.newString("sGg8s}", 678, 678);
      node0.isComma();
      node0.isTry();
      node0.isFromExterns();
      node0.setWasEmptyNode(false);
      Node node1 = new Node(4095, node0, node0, node0, node0, 57, 16);
      node1.isFalse();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(49, nodeArray0, 29, (-2239));
      Node node3 = Node.newString("DATE_FUNCTION_TYPE", 2, 148);
      node0.useSourceInfoIfMissingFrom(node3);
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = Node.newNumber((-1343.06), (-813), (-813));
      Node node1 = new Node(38, node0, 136, (-536870912));
      node1.setCharno(86);
      node1.setSourceFileForTesting(" is not a number node");
      node1.setOptionalArg(true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node1.setCharno((-210));
      node2.getSideEffectFlags();
      node1.isFalse();
      node2.isIn();
      node0.hasMoreThanOneChild();
      node2.isFunction();
      node1.isDefaultCase();
      node2.getBooleanProp((-53));
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = new Node(101);
      node0.isEquivalentToShallow(node0);
      node0.isSetterDef();
      node0.isThrow();
      Node node1 = node0.cloneNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = Node.newNumber((-1902.26687978443));
      node2.getQualifiedName();
      node0.isNE();
      node0.isOr();
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O{}5S}i^'.");
      Node node0 = Node.newString(115, "O{}5S}i^'.");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isDec();
      node0.isIn();
      Node node1 = new Node(2232, node0, node0, 40, 1723);
      node0.isEquivalentTo(node1);
      Node node2 = new Node(300, node1);
      node0.getIndexOfChild(node2);
      node1.isInc();
      Node node3 = node0.getParent();
      node3.isSyntheticBlock();
      node3.getSourcePosition();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.mayMutateGlobalStateOrThrow();
      node0.isNoSideEffectsCall();
      node0.isDec();
      Node node1 = new Node(30, 0, 8);
      node0.isIn();
      Node node2 = new Node(39, 31, 8);
      node1.isArrayLit();
      node1.isCase();
      Node node3 = new Node(55, node1, node1, 57, 51);
      node1.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(4, nodeArray0, 4, 4);
      node0.mayMutateGlobalStateOrThrow();
      node0.isWhile();
      ImmutableList.of();
      node0.setSourceFileForTesting((String) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      try { 
        node1.setDouble(453.43645442);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // RETURN 4 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000005] [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      Node node1 = new Node(113, node0, node0, node0, 32, 12);
      node1.getLastChild();
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(54, node0, node0, 36, 2283);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = node1.removeFirstChild();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node4 = new Node(33, node2, node2, node3);
      node2.getDirectives();
      Node.newNumber(3848.0);
      node1.isGetProp();
      node1.isThis();
      node1.isFor();
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(1004, "?{R!kOf~");
      node0.getSourceFileName();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(32, 163, 15);
      node1.useSourceInfoFromForTree(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isOptionalArg();
      node1.isCast();
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 678, 678);
      node0.isEquivalentTo(node0, true, true, true);
      node0.isVar();
      Node node1 = new Node(1557, node0, node0, node0);
      node0.getDirectives();
      Node node2 = Node.newNumber(933.43);
      node2.isGetProp();
      node2.isHook();
      Node node3 = new Node(1862);
      node3.isFor();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = Node.newNumber(3848.0);
      node0.getJSDocInfo();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setChangeTime((-283));
      node0.getBooleanProp(2580);
      node0.isUnscopedQualifiedName();
      node0.setIsSyntheticBlock(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Node node1 = new Node(122, 15, 29);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.useSourceInfoFrom(node0);
      Node node2 = node1.srcref(node0);
      node0.isDelProp();
      node0.isNull();
      node0.setDouble(46.0);
      node2.isUnscopedQualifiedName();
      node2.isStringKey();
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = new Node((-1296), (-1296), (-1897));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      jSDocInfo0.setNoCheck(false);
      node1.checkTreeEquals(node0);
      node0.removeProp(36);
      node0.type = (-2452);
      node0.isTrue();
      node0.isGetElem();
      String string0 = "";
      Node node2 = new Node(585, node1, node0, 390, 77);
      // Undeclared exception!
      try { 
        node0.replaceChild(node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = Node.newNumber((-1163.8642191), (-938), 39);
      Node node1 = node0.cloneNode();
      node1.siblings();
      Node node2 = new Node(52, node1, node0, 57, 0);
      Node node3 = node2.copyInformationFrom(node0);
      node3.isName();
      node1.isGetElem();
      Node.newNumber((double) 30, 2231, 57);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O{}5S}i^'.");
      Node node0 = Node.newString(115, "O{}5S}i^'.");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isDelProp();
      node0.isWith();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&8T?");
      Node node1 = node0.cloneNode();
      node1.checkTreeEqualsImpl(node0);
      node1.isStringKey();
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(51, node0, node0, node0, node0, 15, 51);
      node1.isInstanceOf();
      InputId inputId0 = new InputId("Object#Key");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1803);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      linkedList0.push(templateType0);
      node0.isThrow();
      node1.isNoSideEffectsCall();
      node1.isNot();
      node0.isTry();
      node0.isQualifiedName();
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = Node.newNumber(46.0, 115, (-813));
      Node node1 = new Node(115, node0, 37, 2);
      node1.setCharno(15);
      node0.setSourceFileForTesting(" is not a number node");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node2.isDo();
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(".<", ".<", 102, 1250);
      Node node0 = Node.newString("`BX!:q)6~R#\"QF");
      Node node1 = new Node(31, node0, node0, node0, node0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      node0.setCharno(102);
      Node node2 = Node.newString(47, "Object#Element");
      node1.useSourceInfoFromForTree(node0);
      node2.getJSType();
      node1.isCatch();
      node2.isBlock();
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      Node node1 = Node.newString(" is not a number node", 8, 12);
      node1.isVar();
      node0.isString();
      Node node2 = new Node(110, node1, node0, node0, node0);
      node2.cloneTree();
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 678, 678);
      node0.isVar();
      node0.isString();
      Node node1 = new Node(50, node0, node0, node0, node0);
      Node node2 = node1.cloneTree();
      node0.isWith();
      // Undeclared exception!
      try { 
        node1.replaceChild(node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(1191, (-967), 41);
      Node node1 = Node.newString(0, "EQo2,^._:'X`", (-2118), 4095);
      node0.isEquivalentToShallow(node1);
      Node node2 = Node.newString("EQo2,^._:'X`", 42, 46);
      Node node3 = new Node(12, node0);
      node1.isWith();
      node3.replaceChild(node0, node2);
      Node node4 = Node.newString("EQo2,^._:'X`");
      node4.isBlock();
      node1.hasChildren();
      Node node5 = Node.newString("EQo2,^._:'X`");
      node5.getChangeTime();
      node3.isUnscopedQualifiedName();
      Node.extractCharno((-1488));
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(" is not a number node");
      Node node1 = Node.newString(" is not a number node", 8, 36);
      node0.addChildToBack(node1);
      node0.isEquivalentToTyped(node1);
      node0.removeChildren();
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = Node.newString("WN/");
      node0.getQualifiedName();
      node0.setLineno(32);
      node0.putIntProp(46, 46);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isNull();
      try { 
        node0.setDouble((-89.716383354122));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING WN/ 32 [is_namespace: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(51, node0, node0, node0, node0, 15, 51);
      node1.isInstanceOf();
      InputId inputId0 = new InputId("Object#Key");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.useSourceInfoFrom(node0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1803);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      linkedList0.push(templateType0);
      node0.isThrow();
      node1.isNoSideEffectsCall();
      node1.isNot();
      node0.isTry();
      Node.newNumber(1.0, 102, 38);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.isGetterDef();
      Node node1 = new Node(51, node0, node0, node0, node0, 8, 57);
      node1.getQualifiedName();
      node0.isNE();
      node1.isStringKey();
      node0.isThis();
      node1.useSourceInfoIfMissingFrom(node0);
      node1.removeChild(node0);
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.isGetterDef();
      Node node1 = new Node(51, node0, node0, node0, node0, 8, 57);
      node1.getQualifiedName();
      node0.isNE();
      node1.isStringKey();
      node0.isThis();
      node1.useSourceInfoIfMissingFrom(node0);
      node1.isInstanceOf();
      node1.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = Node.newNumber(46.0, 115, (-813));
      Node node1 = new Node(115, node0, 37, 2);
      node1.setCharno(15);
      node0.setSourceFileForTesting(" is not a number node");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node2.setCharno(113);
      node1.getSideEffectFlags();
      node1.isFalse();
      node2.isEquivalentTo(node1, false, false, true);
      node1.isIn();
      node0.isEquivalentToTyped(node2);
      node0.hasMoreThanOneChild();
      node1.isFunction();
      node1.isDefaultCase();
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.isGetterDef();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cjh.0Y*kVBMLS*8LU-");
      node0.isTrue();
      Node node1 = new Node(4095);
      Node node2 = new Node(31);
      node2.getQualifiedName();
      node0.isFalse();
      Node node3 = node2.clonePropsFrom(node1);
      node3.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = Node.newString("lYI&l]", (-359), 44);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node1.getQualifiedName();
      node0.isNE();
      node0.isStringKey();
      Node node2 = Node.newNumber(1502.0866932);
      node2.hasMoreThanOneChild();
      node0.isFunction();
      Node node3 = Node.newNumber((double) (-953));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.newString("");
      node2.addChildToFront(node1);
      node1.useSourceInfoFrom(node3);
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node node0 = Node.newString(42, "Tj");
      node0.getAncestors();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "opt_arg");
      Node node0 = Node.newString(4011, "opt_arg");
      Node node1 = new Node(4011, node0, 56, (-649));
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-124);
      byteArray0[8] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString("N/");
      Node.newString("N/", 71, 1661);
      Node node1 = new Node(32, node0, (-1103), 38);
      node0.isIn();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isThis();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node1.isOr();
      node2.isCast();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node node0 = Node.newNumber(46.0, 115, (-813));
      Node node1 = new Node(115, node0, 37, 2);
      node1.setCharno(15);
      node0.setSourceFileForTesting(" is not a number node");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node2.setCharno(113);
      node1.getSideEffectFlags();
      node1.isFalse();
      node2.isEquivalentTo(node1, false, false, true);
      node1.isIn();
      node0.isEquivalentToTyped(node2);
      node0.hasMoreThanOneChild();
      node1.isFunction();
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = Node.newNumber((-1031.3503));
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>((-3145));
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) arrayDeque0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node2 = new Node(47, node1, node0, 12, 38);
      Node node3 = new Node((-1067), node2);
      node1.isWith();
      // Undeclared exception!
      try { 
        node2.replaceChild(node3, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("input_id");
      node0.setWasEmptyNode(true);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING input_id [empty_block: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = Node.newNumber((double) 111, 111, 111);
      node0.getBooleanProp(111);
      node0.isUnscopedQualifiedName();
      node0.setIsSyntheticBlock(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node node1 = new Node(47, 52, 105);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = node1.srcref(node0);
      node2.isDelProp();
      node1.isCast();
      node2.isWith();
      node1.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = Node.newNumber(46.0, 115, (-813));
      Node node1 = new Node(115, node0, 37, 2);
      node1.setCharno(15);
      Node node2 = node1.cloneNode();
      Node node3 = node2.copyInformationFrom(node1);
      Node node4 = Node.newNumber((double) 48);
      node1.removeProp(900);
      node4.isEquivalentToTyped(node3);
      Node node5 = new Node(115, node2, node2);
      Node node6 = node5.copyInformationFromForTree(node2);
      node6.isNew();
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = new Node(53);
      Node node1 = new Node(53, node0, node0);
      node1.isLocalResultCall();
      node0.getSourceOffset();
      node1.isFor();
      node0.setSourceFileForTesting((String) null);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.children();
      String string0 = "x^{:;/y:\\E";
      ObjectType.cast((JSType) null);
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("x^{:;/y:E", node3, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newNumber((double) 57);
      node1.getQualifiedName();
      Node node2 = new Node(56, node0, node1);
      node2.getStaticSourceFile();
      Node node3 = new Node(0, 56, 55);
      node0.addChildAfter(node3, (Node) null);
      Node node4 = Node.newString("", 4, 50);
      node4.getQualifiedName();
      node1.isDelProp();
      node4.isCast();
      node2.isWith();
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.getProp(1);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.isIn();
      node1.isEquivalentTo(node0);
      node1.isBlock();
      node1.copyInformationFrom(node0);
      jSType0.isUnknownType();
      Node node2 = new Node(117, node0, node0);
      node1.useSourceInfoIfMissingFromForTree(node2);
      node2.isTry();
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = Node.newString(" is not a number node", 2854, 2854);
      Node node1 = Node.newString("", 16, 4095);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.copyInformationFrom(node1);
      node0.isTrue();
      Node node2 = new Node(49, node0, node1, 16, 154);
      node2.getIndexOfChild(node1);
      node2.isVoid();
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(85, nodeArray0);
      Node node1 = new Node(33, node0, node0);
      node1.isGetterDef();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cjh.0Y*kVBMLS*8LU-");
      node1.isTrue();
      Node node2 = new Node(4);
      node0.getQualifiedName();
      node0.isString();
      node2.isEmpty();
      node2.isNew();
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node node0 = new Node(2928, 2928, 2928);
      node0.isGetterDef();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cjh.0Y*kVBMLS*8LU-");
      node0.isIn();
      Node node1 = new Node((-1926), node0, node0, node0);
      node1.isGetterDef();
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2928
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.mayMutateGlobalStateOrThrow();
      node0.isNoSideEffectsCall();
      Node node1 = Node.newString("?17(3wfsv}5W_]");
      node0.isDec();
      Node node2 = new Node(52);
      node1.isIn();
      node1.isGetterDef();
      node2.checkTreeEquals(node0);
      node2.isExprResult();
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(" is not a number node", true);
      node_NodeMismatch0.equals(simpleSourceFile0);
      node1.isBlock();
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      Node node0 = new Node(163, 720, 155);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      node0.isAssign();
      Node node1 = new Node((-137), node0, node0);
      node0.isAdd();
      node0.getAncestors();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(51, node0, node0, node0, node0, 15, 51);
      node1.isInstanceOf();
      node1.isString();
      ObjectType.cast((JSType) null);
      Node node2 = node1.srcref(node0);
      node0.isDelProp();
      node0.isCast();
      node2.isWith();
      node1.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isOptionalArg();
      node2.getAncestors();
      Node node3 = Node.newString(4095, "5X}<c'", 38, 51);
      Node node4 = Node.newString((-2085), "%s (%s) must not be greater than size (%s)");
      InputId inputId0 = new InputId("IX>lc92=HV");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      node4.isThrow();
      node3.isNoSideEffectsCall();
      node4.isNot();
      node1.addChildrenToBack(node3);
      node2.removeChildren();
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeTypeAwareEqualsImpl(node2);
      node_NodeMismatch0.equals((Object) null);
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 130, 130, 130);
      FileSystemHandling.shouldAllThrowIOExceptions();
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("`BX!:q)6~R#\"QF", "`BX!:q)6~R#\"QF", 126, 55);
      Node node1 = Node.newString("`BX!:q)6~R#\"QF");
      Node node2 = new Node(1, node1, node1, node1, node0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node0.setCharno(154);
      Node node3 = Node.newString(126, "MQ<\u0003m>+");
      node3.useSourceInfoFromForTree(node1);
      node3.getJSType();
      node1.isInc();
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12, 12);
      Node node1 = new Node(49, node0, node0, node0, node0);
      Node node2 = new Node(47, 50, 0);
      InputId inputId0 = new InputId("%s (%s) must not be greater than size (%s)");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x");
      String string0 = "5X}C?Z";
      Node node0 = Node.newString("5X}C?Z");
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      // Undeclared exception!
      try { 
        node2.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Node node0 = Node.newNumber(3848.0);
      node0.getJSDocInfo();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setChangeTime((-283));
      node0.getBooleanProp(2580);
      node0.isUnscopedQualifiedName();
      node0.setIsSyntheticBlock(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Node node1 = new Node(122, 15, 29);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = node1.srcref(node0);
      node0.isDelProp();
      node0.isCast();
      node1.isWith();
      node2.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(46.0, (-1105), (-813));
      Node node1 = new Node(1, node0, 8, 2924);
      Node node2 = new Node(93, 2854, 31);
      node2.setCharno(90);
      node1.setSourceFileForTesting(" is not a number node");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node3 = node2.setJSDocInfo(jSDocInfo0);
      node2.getSideEffectFlags();
      node0.isFalse();
      node3.isIn();
      node0.hasMoreThanOneChild();
      node3.isFunction();
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Node node0 = new Node(122, 122, (-1956));
      node0.isLabelName();
      Node node1 = Node.newString(720, "K*lymWr7@}", 15, (-1956));
      node1.removeProp((-2501));
      node0.isNE();
      node1.isEquivalentToTyped(node0);
      node0.copyInformationFromForTree(node1);
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(15);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 720
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node node0 = Node.newNumber((-1031.3503));
      node0.getAncestors();
      node0.isFromExterns();
      node0.mayMutateArguments();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node node0 = Node.newNumber(46.0, 115, (-813));
      Node node1 = new Node(115, node0, 37, 2);
      node1.isVarArgs();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isOptionalArg();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node1.isSetterDef();
      node1.isFor();
      node0.isSyntheticBlock();
      node0.isArrayLit();
      node1.isSwitch();
      node1.removeProp(57);
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.getBooleanProp(101);
      node0.isUnscopedQualifiedName();
      node0.setIsSyntheticBlock(true);
      Node node1 = Node.newString((-2381), "qR/p,");
      Node node2 = new Node(36, node1);
      node2.isWith();
      node0.isIf();
      Node node3 = Node.newString("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isTrue();
      Node node4 = new Node(105);
      Node node5 = new Node(263, node0, node3, node0);
      node1.isString();
      node4.isEmpty();
      node4.isNew();
      // Undeclared exception!
      try { 
        node4.addChildrenToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node node0 = Node.newString(": ");
      Node node1 = new Node(40, node0, node0, node0, 1661, 1);
      node0.getQualifiedName();
      node1.setWasEmptyNode(true);
      node0.setLineno(32);
      node1.isRegExp();
      node0.isName();
      node1.cloneNode();
      node0.isExprResult();
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 414, 122);
      Node node1 = Node.newNumber(1.0);
      node0.getQualifiedName();
      Node node2 = new Node(2);
      Node node3 = new Node((-2617), node1, node2, 3914, 111);
      node3.isSwitch();
      node2.isAssign();
      Node node4 = new Node(8, node3, node0);
      node4.isAdd();
      node4.getAncestors();
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("com.google.javascript.rhino.Node", 54, (-363));
      Node node1 = new Node((-1788), node0, node0, node0, (-1915), 4095);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isSyntheticBlock();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node1.isOptionalArg();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      node0.isLocalResultCall();
      node1.isSyntheticBlock();
      node2.wasEmptyNode();
      // Undeclared exception!
      try { 
        node2.toString(true, true, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1788
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.isGetterDef();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 414, 122);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = node0.cloneNode();
      node1.siblings();
      Node node2 = node0.copyInformationFrom(node1);
      node2.getDouble();
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Node node0 = Node.newNumber(46.0, 115, (-813));
      node0.setIsSyntheticBlock(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      node0.isAssignAdd();
      node0.setOptionalArg(true);
      node0.toString(true, true, true);
      node0.isParamList();
      node0.isVar();
      node0.setType(115);
      Node node1 = Node.newNumber(0.0, 54, 53);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      Node.newString("Fn3[)+ \"#Z-p", 8388608, (-647));
      node1.getSourceFileName();
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isInstanceOf();
      node1.isString();
      Node node2 = new Node(47, node0, node1, 306, 43);
      node1.isSwitch();
      node2.isRegExp();
      Node node3 = null;
      try {
        node3 = new Node(15, node0, 40, (-4126));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node node0 = Node.newNumber(46.0, 115, (-813));
      Node node1 = new Node(115, node0, 37, 2);
      Node node2 = node0.copyInformationFrom(node1);
      node2.getIntProp(57);
      node0.isTrue();
      Node node3 = new Node(16);
      node1.getQualifiedName();
      node1.isString();
      Node node4 = Node.newString(1073741823, "global this");
      node4.isEmpty();
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Node node0 = Node.newNumber(16.91251589745677, 115, (-813));
      Node node1 = new Node(115, node0, 37, 2);
      node1.setCharno(15);
      node0.setSourceFileForTesting(" is not a nuber node");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node1.setJSDocInfo(jSDocInfo0);
      node1.getSideEffectFlags();
      node1.isFalse();
      node1.isIn();
      node0.hasMoreThanOneChild();
      node1.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newNumber((double) 57);
      node1.getQualifiedName();
      Node node2 = new Node(46);
      node2.getStaticSourceFile();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node3.getProp(132);
      node3.isIn();
      node3.isEquivalentTo(node2);
      Node node4 = Node.newString("Object#Key", 672, (-3526));
      node1.checkTreeEquals(node4);
      node1.isCall();
      node2.getJSType();
      Node node5 = node2.useSourceInfoFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node5.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got SHNE
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isInstanceOf();
      node0.isIf();
      Node.newString(52, "*\"", (-3925), 29);
      node0.getSideEffectFlags();
      Node node1 = new Node(56, node0, node0);
      node1.putIntProp(49, 4095);
      node1.removeFirstChild();
      // Undeclared exception!
      try { 
        node1.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 56
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      Node node3 = new Node((-716), node2, node1, node0, 47, 2);
      Node node4 = Node.newString("5X}<c'");
      node3.srcrefTree(node0);
      Node node5 = null;
      try {
        node5 = new Node(55, node2, node4, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Node node0 = Node.newNumber(6078.05015692);
      node0.isFromExterns();
      // Undeclared exception!
      try { 
        node0.addChildAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = Node.newString("\n\nSubtee1: ");
      Node node2 = new Node(41, node0);
      node1.isWith();
      node2.isIf();
      Node node3 = Node.newString("\n\nSubtee1: ");
      node2.srcref(node1);
      node0.isNE();
      Node node4 = Node.newString(8, "Object#Element", 57, 53);
      node4.getSourceFileName();
      node0.isHook();
      node3.getAncestors();
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(" is not a number node", 122, (-1274));
      Node node1 = new Node(3302, node0, node0, node0);
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Node node0 = Node.newString(" is not a number node", 2854, 2854);
      Node node1 = Node.newString("", 16, 4095);
      Node.newNumber(1814.0, 32, 32);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = node0.copyInformationFrom(node1);
      node0.getIntProp((-2355));
      node0.isTrue();
      Node node3 = new Node(31);
      node2.isRegExp();
      node1.checkTreeEqualsImpl(node3);
      Node.newString("", 13, (-905));
      Node node4 = new Node(46, node3, 151554, 3813);
      node3.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d[_z_,A");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node((-938), (-938), 672);
      node0.getSourceOffset();
      Node node1 = new Node(46, node0, node0);
      node1.isOnlyModifiesArgumentsCall();
      node0.copyInformationFromForTree(node1);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 1
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node0 = Node.newString(153, "/:}|uYR[", 92, (-2995));
      node0.removeProp(443);
      Node.extractLineno((-4012));
      node0.isHook();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = Node.newString(4095, "Object#Element", 55, 46);
      node0.isBlock();
      node1.isAnd();
      node0.isObjectLit();
      node1.getString();
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isInstanceOf();
      node0.isString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.getBooleanProp(46);
      Node node1 = new Node(740, node0, node0, node0, 2147483645, (-1541));
      node0.getQualifiedName();
      node0.isString();
      node0.isEmpty();
      node0.isNew();
      node0.copyInformationFrom(node1);
      node1.isDefaultCase();
      node1.isDec();
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.getBooleanProp(101);
      node0.isUnscopedQualifiedName();
      node0.setIsSyntheticBlock(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      node0.isAssignAdd();
      Node.newString("T5XB5X'O[h#bK");
      node0.setOptionalArg(false);
      node0.children();
      node0.toString(false, false, false);
      node0.isParamList();
      node0.isVar();
      node0.setType(101);
      Node node1 = Node.newNumber(1086.5617, 49, 39);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      node1.isSetterDef();
      node0.isOptionalArg();
      node2.getAncestors();
      Node node3 = Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      node2.isIn();
      node1.isEquivalentTo(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node3.putBooleanProp(15, false);
      Node node4 = new Node(1, 2752, 57);
      node4.setWasEmptyNode(false);
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(39, node0, node0, node0, node0, 830, 30);
      node0.isParamList();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = Node.newString("");
      node2.getBooleanProp((-1237));
      Node node3 = new Node(56);
      node3.isBreak();
      node0.isTrue();
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      Node.newString("GU/)BLgG?R", 0, 8);
      node1.getStaticSourceFile();
      node1.putIntProp(1, 1);
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isThrow();
      // Undeclared exception!
      try { 
        node0.addChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Node node0 = Node.newNumber(1082.012);
      node0.isComma();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-414));
      node_SideEffectFlags0.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = new Node(14, 14, 14);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node0.isEquivalentToShallow((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = Node.newString(218, "Umy0^b!-Iq$V_Mw}", 1624, 1304);
      node0.isLabelName();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = Node.newNumber(2142.49, 1144, 37);
      node1.isExprResult();
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node node0 = new Node(122, 122, (-1962));
      Node node1 = Node.newString("GuhlBuJO[B\"=#", 51, (-1962));
      node1.children();
      node1.addChildrenAfter(node0, (Node) null);
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.mayMutateGlobalStateOrThrow();
      node0.isWhile();
      ImmutableList.of();
      Node node1 = Node.newString("");
      node1.isDec();
      Node node2 = new Node(4);
      node1.isIn();
      node0.isEquivalentTo(node1);
      node1.checkTreeEquals(node0);
      node1.getIndexOfChild(node2);
      node1.addChildrenToFront(node2);
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setWasEmptyNode(false);
      simpleErrorReporter0.warning("`BX!:q)6~O#\"QF", "`BX!:q)6~O#\"QF", 126, 55);
      Node node1 = Node.newString(290, "`BX!:q)6~O#\"QF");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node0.putBooleanProp((-425), false);
      node1.setWasEmptyNode(false);
      node0.isScript();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      Node node1 = Node.newNumber((double) 8, 132, 1163);
      Node node2 = new Node(52, node1, 52, 2330);
      node0.setCharno(2);
      node2.setSourceFileForTesting("The new child node has siblings.");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.setJSDocInfo(jSDocInfo0);
      node1.getSideEffectFlags();
      node2.isFalse();
      Node node3 = Node.newNumber((-1468.4));
      node3.isIn();
      node3.hasMoreThanOneChild();
      node2.isFunction();
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = Node.newString("\n\nSubtree1: ");
      Node node2 = new Node(41, node0);
      node1.isWith();
      node0.toString(true, false, true);
      node0.isParamList();
      node1.isVar();
      node1.setType((-5179));
      Node.newNumber((-233.8732205099942), 262, 49);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Node.newNumber((double) 111, 111, 111);
      Node node0 = Node.newString("The existing child node of the parent should not be null.");
      Node node1 = new Node(52, 8, 15);
      node1.isFromExterns();
      Node node2 = new Node(30, node0, node1, node0, node1);
      try { 
        node2.setString("The existing child node of the parent should not be null.");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NEW is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node((-1690));
      node0.cloneTree();
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.mayMutateGlobalStateOrThrow();
      node0.getBooleanProp(101);
      node0.isUnscopedQualifiedName();
      node0.setIsSyntheticBlock(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      node0.isRegExp();
      node0.setOptionalArg(false);
      node0.children();
      node0.toString(false, false, false);
      node0.isParamList();
      node0.isVar();
      node0.setType(101);
      Node node1 = Node.newNumber(1086.5617, 49, 39);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = Node.newString(4095, "Object#Element", 55, 46);
      node0.isBlock();
      node1.isLabel();
      node0.isObjectLit();
      node1.getString();
      node0.isOnlyModifiesThisCall();
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      int int0 = 4095;
      Node node0 = new Node(4095, 4095, 147);
      node0.setSourceFileForTesting("first new child has existing parent");
      node0.getSourcePosition();
      node0.getStaticSourceFile();
      node0.isLocalResultCall();
      node0.isInc();
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(41, nodeArray0, 1191, (-967));
      Node node1 = Node.newString(0, "Eo2,^._:'X`", (-2118), 4095);
      node0.isEquivalentToShallow(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Eo2,^._:'X`", false);
      simpleSourceFile0.getLineOffset(122);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = new Node(16, node2, node1, node0, node0);
      node0.getBooleanProp(4095);
      Node.mergeLineCharNo(1, 1);
      node3.isArrayLit();
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 1191, (-967));
      Node node1 = Node.newString(0, "Eo2,^._:'X`", (-2118), 4095);
      node0.isEquivalentToShallow(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Eo2,^._:'X`", false);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      Node node2 = node0.setJSDocInfo(jSDocInfo1);
      node2.getSideEffectFlags();
      node1.isFalse();
      Node node3 = Node.newNumber((double) 46);
      node3.isIn();
      node2.isLabel();
      node3.isFunction();
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.getProp(1);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.isIn();
      node1.isEquivalentTo(node0);
      node0.checkTreeEquals(node1);
      node0.getIndexOfChild(node1);
      node1.isCall();
      node1.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newString("<invalid>");
      node0.isThis();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(39, node0, node0, node0, node0, 841, 30);
      node0.isEquivalentTo(node1, true, true, true);
      node0.isParamList();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = Node.newString("");
      node2.getAncestors();
      Node node3 = new Node(3643);
      node0.getQualifiedName();
      node1.isString();
      node1.isEmpty();
      node0.isNew();
      node3.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isOptionalArg();
      node2.getAncestors();
      Node node3 = Node.newString(4095, "5X}<c'", 38, 51);
      Node node4 = Node.newString((-2085), "%s (%s) must not be greater than size (%s)");
      node3.isNumber();
      node3.isWith();
      Node node5 = new Node(333, node4, node1);
      node5.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(51, node0, node0, node0, node0, 15, 51);
      node1.isInstanceOf();
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(39, node0, node0, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.copyInformationFrom(node0);
      node1.getIntProp((-2693));
      Node node2 = Node.newString(47, "");
      node2.isTrue();
      Node node3 = new Node(49);
      node2.getQualifiedName();
      node1.isString();
      node3.isEmpty();
      node3.isNew();
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      node1.isSetterDef();
      node0.isOptionalArg();
      node2.getAncestors();
      Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      node2.isIn();
      node1.isEquivalentTo(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("EA+VOI3!gOO[\"z]n");
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      TemplateTypeMap templateTypeMap0 = templatizedType0.getTemplateTypeMap();
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseTemplateType(templateType0);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) templateType0;
      jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node2.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Node node0 = Node.newString(" is not a number node", 2854, 2854);
      node0.checkTreeTypeAwareEqualsImpl(node0);
      Node node1 = node0.copyInformationFrom(node0);
      node0.getIntProp((-2355));
      node0.isTrue();
      Node node2 = new Node(31);
      node1.getQualifiedName();
      node0.isString();
      node0.isEmpty();
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      InputId inputId0 = new InputId("@GzEnX");
      inputId0.toString();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("");
      node0.isDec();
      Node.newString("");
      jSTypeRegistry0.setLastGeneration(true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      ImmutableList.builder();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      InputId inputId0 = new InputId("@GzEnX");
      inputId0.toString();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("");
      node0.isDec();
      Node node1 = new Node((-851));
      jSTypeRegistry0.setLastGeneration(false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      ImmutableList.builder();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3848);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.isVar();
      node1.isString();
      Node node2 = new Node(1, node0, node1, 57, 103);
      node2.isSwitch();
      node2.putBooleanProp(1569, false);
      node2.getIndexOfChild(node0);
      node1.isWith();
      node2.isNot();
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node node0 = Node.newString("\n\nTree2:\n");
      Node node1 = new Node(13, node0, node0, node0, node0, 1711, 97);
      node1.isEquivalentTo(node0, false, false, false);
      node0.isParamList();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = Node.newString("[63g5a0dN%");
      node1.getAncestors();
      Node node3 = new Node(0);
      node1.isBreak();
      node1.isTrue();
      Node.newString("Qg[U51j>Ty8Z(7so", 85, 36);
      node2.getQualifiedName();
      node2.isBlock();
      node1.hasChildren();
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Node node0 = Node.newString(36, "var_args_name", 1848, (-1237));
      node0.isUnscopedQualifiedName();
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Node node0 = Node.newNumber((double) 111, 111, 111);
      Node node1 = Node.newString("input_id");
      Node node2 = Node.newString(42, "input_id", 32, 55);
      node2.isFromExterns();
      Node node3 = new Node(52, 40, 56);
      node2.isIn();
      node1.isEquivalentTo(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("input_id");
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      TemplateTypeMap templateTypeMap0 = templatizedType0.getTemplateTypeMap();
      node2.getSourceFileName();
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
      JSType jSType0 = templateTypeMapReplacer0.caseTemplateType(templateType0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) templatizedType0;
      jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node3.copyInformationFrom(node0);
      Node.newString(15, "Not declared as a type name");
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.mayMutateGlobalStateOrThrow();
      node0.isSetterDef();
      node0.isVarArgs();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node0.mayMutateArguments();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Node node0 = new Node((-244), 545, 16);
      Node node1 = new Node(545, node0, node0, node0, node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isAdd();
      node0.getNext();
      node1.getSideEffectFlags();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "*!%,DXiM[JOj5:$h~fg";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " is not a number node");
      Node node0 = Node.newNumber(1.0);
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayCountry();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node0.removeProp(130);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.setType((-1244));
      node0.getAncestor(47);
      node0.isWhile();
      node0.isName();
      Node node1 = node0.getLastSibling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node1.removeProp(43);
      node1.putProp((-630), (Object) null);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Node node0 = Node.newString("\u0001\u0000\u00A0\u0000\u0000\u0000\u0000\u0000\u0000\t\n\u000B\f\r\u0000\u0000\u2028\u2029\u0000\u0000\u0000\u0000\u0000\u202F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u3000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0085\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u0000\u0000\u0000\u0000\u0000\u205F\u1680\u0000\u0000\u180E\u0000\u0000\u0000");
      node0.isGetterDef();
      node0.isLabelName();
      node0.isFromExterns();
      Node node1 = Node.newString("\u0001\u0000\u00A0\u0000\u0000\u0000\u0000\u0000\u0000\t\n\u000B\f\r\u0000\u0000\u2028\u2029\u0000\u0000\u0000\u0000\u0000\u202F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u3000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0085\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u0000\u0000\u0000\u0000\u0000\u205F\u1680\u0000\u0000\u180E\u0000\u0000\u0000");
      node1.isNE();
      Node node2 = Node.newString(111, "\u0001\u0000\u00A0\u0000\u0000\u0000\u0000\u0000\u0000\t\n\u000B\f\r\u0000\u0000\u2028\u2029\u0000\u0000\u0000\u0000\u0000\u202F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u3000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0085\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u0000\u0000\u0000\u0000\u0000\u205F\u1680\u0000\u0000\u180E\u0000\u0000\u0000", 4, 37);
      node2.setJSType((JSType) null);
      node0.isUnscopedQualifiedName();
      node1.getSourceFileName();
      node0.isHook();
      node1.getAncestors();
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newNumber(0.0, (-1212), (-1212));
      node0.getIntProp(122);
      node0.isTrue();
      Node.newString((-1694), "RUM*0i");
      node0.addSuppression("inferred");
      node0.isName();
      node0.addSuppression("RUM*0i");
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      JSType[] jSTypeArray0 = new JSType[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!_fFN%\"kK]");
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.getProp(1);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.isIn();
      node1.isEquivalentTo(node0);
      node0.checkTreeEquals(node1);
      node0.getIndexOfChild(node1);
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Node node0 = new Node(678);
      node0.isEquivalentTo(node0, true, true, true);
      Node node1 = new Node(2, 4, 29);
      node1.isIn();
      node1.isEquivalentTo(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("var_args_name");
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseTemplateType(templateType0);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) templateType0;
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      // Undeclared exception!
      try { 
        node2.checkTreeEquals(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 678
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12, 32);
      Node node1 = Node.newString(50, "%s (%s) must not be greater than size (%s)");
      Node node2 = new Node(1, node0, node0, node1, node1, 43, 39);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node2.setJSDocInfo(jSDocInfo0);
      node1.getSideEffectFlags();
      node2.isFalse();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Node node0 = Node.newNumber(3848.0);
      node0.getJSDocInfo();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setChangeTime((-283));
      node0.getBooleanProp(2580);
      node0.isUnscopedQualifiedName();
      node0.setIsSyntheticBlock(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.isRegExp();
      node0.setOptionalArg(false);
      node0.children();
      node0.toString(false, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isVar();
      node0.setType(2580);
      node0.isGetProp();
      Node node1 = Node.newNumber(3044.006);
      node0.isStringKey();
      node0.isFalse();
      node0.isOr();
      node1.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isOptionalArg();
      node2.getAncestors();
      Node node3 = Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      Node node4 = Node.newString(57, "5X}<c'", 29, 1787);
      node0.setString("5X}<c'");
      Node node5 = new Node(43, node3, node3, node4);
      Node node6 = Node.newNumber(1.2);
      node2.removeProp(55);
      node1.setDirectives((Set<String>) null);
      node6.isNE();
      Node node7 = Node.newNumber((double) 46);
      node7.isEquivalentToTyped(node6);
      node4.isRegExp();
      Node node8 = new Node(54, node5, 4, 53);
      node8.useSourceInfoIfMissingFrom(node6);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 1191, (-967));
      Node node1 = Node.newString(0, "Eo2,^._:'X`", (-2118), 4095);
      node0.isEquivalentToShallow(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Eo2,^._:'X`", false);
      simpleSourceFile0.getLineOffset(122);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node2 = new Node(148, 7, 54);
      Node node3 = Node.newNumber(111.0, (-2371), 40);
      node3.isIn();
      node3.isEquivalentTo(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("ek");
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseTemplateType(templateType0);
      try { 
        node2.setString("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SETTER_DEF 7 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("`BX!:q)6~O#\"QF", "`BX!:q)6~O#\"QF", 126, 55);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      jSType0.isStringObjectType();
      node0.getProp(47);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.removeFirstChild();
      node2.getBooleanProp(122);
      Node.mergeLineCharNo(50, 1);
      try { 
        node3.setDouble(32);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST 111 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString((-1351), "Eo2,^._:'X`");
      node0.getStaticSourceFile();
      node0.addSuppression("zIHyZor");
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node.newString("\n\nSubtree1: ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Wbb2t~l1(tLKKGjQ_}");
      Node node1 = Node.newString(29, "Wbb2t~l1(tLKKGjQ_}", 1118, 4);
      node1.isThrow();
      node0.isFromExterns();
      node0.isDefaultCase();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 1191, (-967));
      Node node1 = Node.newString(0, "Eo2,^._:'X`", (-2118), 4095);
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(51, node1, node1, 31, 46);
      Node node3 = new Node(12, node0);
      node1.isWith();
      node3.replaceChild(node0, node2);
      node3.isIf();
      Node.newString("iv+AI#");
      node3.isNE();
      node2.getSourceFileName();
      node2.isHook();
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Node node0 = Node.newString("uq_Gl", (-1962), 122);
      node0.putIntProp(122, 122);
      Node node1 = new Node(32, node0, node0, node0, 122, 38);
      Node node2 = node1.srcrefTree(node0);
      node1.isStringKey();
      node1.addChildToFront(node2);
      node1.getChangeTime();
      Node node3 = null;
      try {
        node3 = new Node(52, node2, node0, node2, node1, 4095, 1048576);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Node node0 = Node.newNumber(46.0, 115, (-813));
      Node node1 = new Node(115, node0, 37, 2);
      node1.setCharno(15);
      node0.setSourceFileForTesting(" is not a number node");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node1.setJSDocInfo(jSDocInfo0);
      node1.getSideEffectFlags();
      node1.isFalse();
      node1.isIn();
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      ImmutableList.of();
      Node node0 = Node.newString(" is not a number node", 2854, 2854);
      Node node1 = Node.newString("", 16, 4095);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.copyInformationFrom(node1);
      node0.getIntProp((-2355));
      node0.isTrue();
      // Undeclared exception!
      try { 
        Node.newString((-2930), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isInstanceOf();
      node0.isIf();
      Node node1 = new Node(48, 29, 101);
      node1.isNull();
      Node node2 = new Node(101, node0, node1, 39, 1718);
      Node node3 = node2.cloneNode();
      Node node4 = null;
      try {
        node4 = new Node(1, node3, node3, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.setSourceEncodedPositionForTree((-900));
      node0.isSetterDef();
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = Node.newNumber((double) 57);
      ImmutableList.of();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node.newString("", 41, (-1124));
      node1.isSetterDef();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isParamList();
      Node node1 = Node.newString("", 47, 48);
      node0.isEquivalentTo(node1, false, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isBlock();
      node1.isDebugger();
      node0.getString();
      Node node2 = Node.newNumber(1.0);
      // Undeclared exception!
      try { 
        node1.getChildBefore(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isOptionalArg();
      node2.getAncestors();
      Node node3 = Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      Node node4 = Node.newString(57, "5X}<c'", 29, 1787);
      node0.setString("5X}<c'");
      Node node5 = new Node(43, node3, node3, node4);
      Node node6 = Node.newNumber(1.2);
      node2.removeProp(55);
      node1.setDirectives((Set<String>) null);
      node6.isNE();
      Node node7 = Node.newNumber((double) 46);
      node7.isEquivalentToTyped(node6);
      node4.copyInformationFromForTree(node5);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node8 = jSTypeRegistry0.createParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        node7.getChildBefore(node8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags5.valueOf();
      Node node0 = Node.newString(0, "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      Node node1 = Node.newString("input_id");
      nodeArray0[1] = node1;
      Node node2 = new Node(52, 8, 13);
      nodeArray0[2] = node2;
      Node node3 = new Node(111, nodeArray0);
      Node.newString(":]_\"ILNvx5y^YV", 53, 900);
      node2.useSourceInfoIfMissingFromForTree(node0);
      node2.detachFromParent();
      node2.getBooleanProp(1033);
      Node.mergeLineCharNo((-2170), 12);
      try { 
        node2.setDouble(37);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // INSTANCEOF 111 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Node node0 = Node.newString("", 2241, 2412);
      node0.children();
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.addChildrenAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 678, 678);
      node0.isEquivalentTo(node0, true, true, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("comgoogle.commn.collect.Sets$3");
      JSType jSType0 = modificationVisitor0.caseTemplateType(templateType0);
      node0.setString("Not declared as a constructor");
      jSTypeRegistry0.createOptionalNullableType(jSType0);
      Node node1 = Node.newNumber((double) 0, 27, (-381));
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      Node node3 = new Node(42, 678, 752);
      node2.isHook();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node5 = new Node(98, node4);
      node5.removeChildren();
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Node node0 = new Node(13);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Node node1 = new Node(46, node0, node0, node0);
      node0.putIntProp(2, 53);
      node1.getBooleanProp(48);
      Node node2 = new Node(32, node1, node1, node1, 38, (-920));
      node0.getQualifiedName();
      node2.isString();
      node2.isEmpty();
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3848);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.isVar();
      node1.isString();
      Node node2 = new Node(1, node0, node1, 57, 103);
      node2.isSwitch();
      node2.getIndexOfChild(node0);
      Node node3 = null;
      try {
        node3 = new Node(56, node2, node1, node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 118, 118);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sEGg8s}");
      Node node1 = new Node(678, node0, node0, 39, (-1));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      simpleSourceFile0.getLineOffset(36);
      simpleSourceFile0.getLineOffset(29);
      node1.setStaticSourceFile(simpleSourceFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)125;
      Node node2 = node1.removeFirstChild();
      node1.getBooleanProp((-391));
      Node.mergeLineCharNo(47, 55);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node3.removeFirstChild();
      node3.isTry();
      node3.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = Node.newString("L+V1~G=iav");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.isInstanceOf();
      Node node2 = new Node((-3806), node1, node0);
      node2.isIf();
      Node.newString(32, "g_tR9g,k:_", 103, 39);
      node2.isNull();
      Node node3 = Node.newNumber(1.0);
      node3.cloneNode();
      node0.cloneNode();
      node1.detachFromParent();
      Node.newString("Object#Key");
      Node node4 = null;
      try {
        node4 = new Node(3661, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.isGetterDef();
      node0.isLabelName();
      node0.isFromExterns();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isIn();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node0.isEquivalentTo((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.isGetterDef();
      node0.isLabelName();
      node0.isFromExterns();
      node0.setCharno(101);
      Node node1 = Node.newString((-2703), "=|[(g`C3U8", (-3463), 13);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.getJSType();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node node0 = new Node((-1434), 8, 1270);
      Node node1 = new Node(2, node0, node0, node0);
      node1.isFromExterns();
      Node node2 = new Node(85, 1, 29);
      node1.isIn();
      node1.isEquivalentTo(node2);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("sEGg8s}");
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      TemplatizedType templatizedType1 = templatizedType0.toMaybeTemplatizedType();
      TemplateTypeMap templateTypeMap0 = templatizedType1.getTemplateTypeMap();
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
      JSType jSType0 = templateTypeMapReplacer0.caseTemplateType(templateType0);
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[1] = (JSType) templatizedType0;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseNoType();
      jSTypeArray0[2] = jSType1;
      jSTypeArray0[3] = (JSType) templatizedType0;
      jSTypeArray0[4] = (JSType) templatizedType0;
      jSTypeArray0[5] = jSType0;
      jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      // Undeclared exception!
      try { 
        node1.checkTreeTypeAwareEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber(312.62105, 32, 32);
      Node node1 = Node.newString((-1393), "%s (%s) must not be greater than size (%s)");
      Node node2 = Node.newNumber((double) 56, 15, 148);
      Node node3 = new Node((-270), node0, node0, node0, node2, 0, 53);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      node2.putBooleanProp(41, false);
      node0.setCharno(1822);
      node3.useSourceInfoFromForTree(node2);
      node2.getJSType();
      node2.isCatch();
      node3.isThis();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("Unknown class name", node1, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Node node0 = new Node(20);
      Node node1 = Node.newString("");
      node0.checkTreeEquals(node1);
      node0.mayMutateGlobalStateOrThrow();
      node0.isCase();
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 1191, (-967));
      Node node1 = Node.newString(0, "Eo2,^._:'X`", (-2118), 4095);
      node0.isEquivalentToShallow(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Eo2,^._:'X`", false);
      simpleSourceFile0.getLineOffset(122);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.removeFirstChild();
      node0.getBooleanProp(4095);
      Node.mergeLineCharNo(1, 1);
      try { 
        node2.setDouble(1.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NULL [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000005] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isOptionalArg();
      node2.getAncestors();
      Node node3 = Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.spliterator();
      node_AncestorIterable0.iterator();
      Node node4 = Node.newString(57, "5X}<c'", 29, 47);
      node0.setString("5X}<c'");
      node4.setSourceEncodedPositionForTree((-551));
      node3.isNumber();
      node3.isWith();
      node3.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node0.isNull();
      Node node1 = node0.cloneNode();
      node1.cloneNode();
      // Undeclared exception!
      try { 
        node1.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("`BX!:q)6~O#\"QF", "`BX!:q)6~O#\"QF", 126, 55);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      jSType0.isStringObjectType();
      node0.getProp(47);
      jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(130, 1191, 40);
      node1.isIn();
      node0.isEquivalentTo(node0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Not declared as a type name");
      modificationVisitor0.caseTemplateType(templateType0);
      try { 
        node0.setString("Not declared as a constructor");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 111.0 111 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Node node0 = Node.newString(56, "", 56, 114);
      node0.setSourceEncodedPositionForTree(114);
      node0.isFromExterns();
      Node.newString(4, "");
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 56
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString(55, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(51, node0, node0, node0, node0, 15, 51);
      node1.isInstanceOf();
      node1.isString();
      Node node2 = null;
      try {
        node2 = new Node(36, node1, node0, 41, (-862048943));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      node0.removeChildren();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isOptionalArg();
      Node node2 = node0.cloneNode();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node3 = new Node(4, nodeArray0, (-1703), 38);
      Node node4 = node0.srcrefTree(node3);
      node0.siblings();
      node3.copyInformationFrom(node4);
      node2.getLength();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("`BX!:q)6~O#\"QF", "`BX!:q)6~O#\"QF", 126, 55);
      Node node1 = Node.newString(290, "`BX!:q)6~O#\"QF");
      Node node2 = new Node((-1694), node1, node0, node1, node0, 54, 990);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node0.putBooleanProp((-425), false);
      node0.setCharno(154);
      Node node3 = Node.newString(126, "MQ<\u0003m>+");
      Node node4 = Node.newString(4, "`BX!:q)6~O#\"QF");
      node3.getJSType();
      node4.isCatch();
      node4.isReturn();
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.FunctionBuilder");
      node0.isGetterDef();
      node0.isLabelName();
      node0.isAnd();
      Node node1 = new Node((-2537));
      node1.children();
      // Undeclared exception!
      try { 
        node1.toString(true, true, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2537
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("`BX!:q)6~O#\"QF", "`BX!:q)6~O#\"QF", 126, 55);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      jSType0.isStringObjectType();
      node0.getProp(47);
      jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(130, 1191, 40);
      node1.isIn();
      node0.isEquivalentTo(node0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Not declared as a type name");
      modificationVisitor0.caseTemplateType(templateType0);
      modificationVisitor0.caseNumberType();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.checkTreeEquals(node2);
      node1.getIndexOfChild(node2);
      node2.isAssign();
      node1.isCase();
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node((-1003));
      Node node1 = node0.cloneNode();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      nodeArray0[3] = node1;
      Node node2 = null;
      try {
        node2 = new Node(40, nodeArray0, (-732), 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isOptionalArg();
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node1.setDirectives(set0);
      node2.getAncestors();
      Node node3 = Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      Node node4 = Node.newString(57, "5X}<c'", 29, 1787);
      node0.setString("5X}<c'");
      node2.isNull();
      Node node5 = node0.cloneNode();
      node5.cloneNode();
      InputId inputId0 = new InputId("");
      node1.removeProp(1162);
      node5.isDelProp();
      node4.addChildrenToFront(node0);
      node5.isTypeOf();
      node1.checkTreeEqualsImpl(node3);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3848);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.isVar();
      node1.isString();
      Node node2 = new Node(1, node0, node1, 57, 103);
      node2.isSwitch();
      node2.getIndexOfChild(node0);
      // Undeclared exception!
      try { 
        node2.getChildAtIndex(34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Node node0 = Node.newString("\u0001\u0000\u00A0\u0000\u0000\u0000\u0000\u0000\u0000\t\n\u000B\f\r\u0000\u0000\u2028\u2029\u0000\u0000\u0000\u0000\u0000\u202F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u3000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0085\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u0000\u0000\u0000\u0000\u0000\u205F\u1680\u0000\u0000\u180E\u0000\u0000\u0000");
      node0.isGetterDef();
      node0.isArrayLit();
      node0.isFromExterns();
      node0.setWasEmptyNode(false);
      node0.isStringKey();
      node0.isName();
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 678, 678);
      boolean boolean0 = true;
      boolean boolean1 = true;
      Node node1 = Node.newNumber(245.048768, 51, 1);
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(31, node0, node0, node0, node0, 40, 56);
      node0.isEquivalentToShallow(node1);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = new Node(51, node1, node1, node2, node2);
      node2.useSourceInfoFrom(node3);
      Node node4 = null;
      try {
        node4 = new Node(4095, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node((-516), node0, node0, node0, node0);
      node0.addSuppression("");
      node1.setType(43);
      node0.toString(false, false, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-93);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.isFunction();
      node1.isNull();
      node0.isLabel();
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12, 32);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      Node node1 = new Node(43, node0, 36, 31);
      nodeArray0[4] = node1;
      Node node2 = null;
      try {
        node2 = new Node(29, nodeArray0, 49, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isOptionalArg();
      node2.getAncestors();
      Node node3 = Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      Node node4 = Node.newString(57, "5X}<c'", 29, 1787);
      node0.setString("5X}<c'");
      Node node5 = new Node(43, node3, node3, node4);
      Node node6 = Node.newNumber(1.2);
      node2.removeProp(55);
      node1.setDirectives((Set<String>) null);
      node6.isNE();
      Node node7 = Node.newNumber((double) 46);
      node7.isEquivalentToTyped(node6);
      node4.copyInformationFromForTree(node5);
      node0.checkTreeEquals(node1);
      node7.setDouble(51);
      node5.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.FunctionBuilder");
      node0.isGetterDef();
      node0.isLabelName();
      node0.isAnd();
      node0.setWasEmptyNode(true);
      node0.isTypeOf();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("`BX!:q)6~O#\"QF", "`BX!:q)6~O#\"QF", 126, 55);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      jSType0.isStringObjectType();
      node0.getProp(47);
      jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = new Node(130, 1191, 40);
      Node node3 = Node.newNumber((double) 40);
      Node node4 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node4.clonePropsFrom(node3);
      node1.getChangeTime();
      node3.getQualifiedName();
      node0.isString();
      node0.isBlock();
      node3.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Node node0 = Node.newString("input_id");
      Node node1 = new Node(300, (-1064), 300);
      node1.isFromExterns();
      Node node2 = new Node(32, 40, (-1));
      node1.isIn();
      node1.isEquivalentTo(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("Object#Key");
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry1.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      templatizedType0.getTemplateTypeMap();
      Node.newString(15, "Named type with empty name component", 132, 36);
      node0.isBlock();
      node1.isDebugger();
      node0.isObjectLit();
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ANNOTATION is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch", 831, 54);
      node0.setString("P< <v*]iG5or6&#7)1c");
      node0.getType();
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, (-938), (-905));
      node0.setDouble(937.2997807319);
      node0.getInputId();
      node0.putIntProp((-905), (-905));
      Node node1 = new Node((-732), node0, node0, node0, 1, 2028);
      Node node2 = node0.srcrefTree(node1);
      node0.isStringKey();
      node2.isNoSideEffectsCall();
      node0.addChildToFront(node1);
      node2.detachChildren();
      node0.setLength(0);
      node2.setDouble(0.0);
      node0.getChangeTime();
      node2.isBreak();
      node1.isTrue();
      Node node3 = node1.clonePropsFrom(node2);
      node3.isLocalResultCall();
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -732
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Node node0 = Node.newString("uq_Gl", (-1962), 122);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.putIntProp(122, 122);
      Node node1 = new Node(32, node0, node0, node0, 122, 38);
      Node node2 = new Node(40, node1, 31, 2);
      Node node3 = node2.srcrefTree(node0);
      node2.isStringKey();
      node1.addChildToFront(node3);
      node0.detachChildren();
      node3.setLength(48);
      try { 
        node2.setDouble((-85.9653535));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING [length: com.google.javascript.rhino.Node$IntPropListItem@0000000005] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Node node0 = Node.newString("input_id");
      Node node1 = new Node(300, (-1064), 300);
      node1.isFromExterns();
      Node node2 = new Node(32, 40, (-1));
      node1.isIn();
      node1.isEquivalentTo(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("Object#Key");
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry1.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      TemplateTypeMap templateTypeMap0 = templatizedType0.getTemplateTypeMap();
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry1, templateTypeMap0);
      templateTypeMapReplacer0.caseTemplateType(templateType0);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) templatizedType0;
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeArray0[2] = (JSType) templatizedType0;
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node3.checkTreeEquals(node0);
      node0.getIndexOfChild(node3);
      node1.isAssign();
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("`BX!:q)6~O#\"QF", "`BX!:q)6~O#\"QF", 126, 55);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      jSType0.isStringObjectType();
      node0.getProp(47);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = new Node(130, 1191, 40);
      node2.isIn();
      node0.isEquivalentTo(node0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Not declared as a type name");
      modificationVisitor0.caseTemplateType(templateType0);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.checkTreeEquals(node3);
      node1.isFalse();
      node3.isOr();
      node1.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.getProp(1);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.isIn();
      node0.setType(16);
      node1.isEquivalentTo(node0);
      node0.checkTreeEquals(node1);
      node0.getIndexOfChild(node1);
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Node node0 = Node.newString(678, "sEGg8s}", 678, 678);
      node0.isNot();
      node0.isLabelName();
      node0.isFromExterns();
      node0.setWasEmptyNode(false);
      Node node1 = new Node(4095, node0, node0, node0, node0, 57, 16);
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node node0 = Node.newNumber((double) 111, 111, 111);
      Node node1 = Node.newString("input_id");
      Node node2 = new Node(52, 8, 15);
      node2.isLabelName();
      Node node3 = new Node(116, 0, 15);
      node3.isIn();
      node1.isEquivalentTo(node3);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection");
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0);
      TemplateType templateType1 = JSType.toMaybeTemplateType((JSType) templateType0);
      ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) templateType0, (JSType) templateType1);
      ImmutableList<JSType> immutableList2 = immutableList1.asList();
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.createTemplateTypeMap(immutableList0, immutableList2);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
      templateTypeMapReplacer0.caseTemplateType(templateType0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node4 = jSTypeRegistry1.createParametersWithVarArgs(jSTypeArray0);
      node0.checkTreeEquals(node4);
      node1.getIndexOfChild(node2);
      node3.isAssign();
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = new Node(32, 35, 108);
      node0.isTypeOf();
      Node node1 = null;
      int int0 = 416;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType.toMaybeFunctionType((JSType) null);
      ObjectType.cast((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("fkf>JRLf>nPB$&<7?}&", node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node1.isEquivalentToTyped(node0);
      node0.removeChildren();
      node0.isOptionalArg();
      Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, true);
      jSTypeRegistry0.setLastGeneration(true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node2.putBooleanProp(57, true);
      node2.getChangeTime();
      Node node3 = new Node(43);
      node3.isQualifiedName();
      Node.newNumber((double) 57, 122, 154);
      node0.isThrow();
      // Undeclared exception!
      try { 
        node1.checkTreeEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isOptionalArg();
      node2.getAncestors();
      Node node3 = Node.newString(39, "5X}<c'", 83, 52);
      node2.isEquivalentToShallow(node0);
      Node node4 = node1.useSourceInfoIfMissingFromForTree(node3);
      Node node5 = new Node(3254, node2, node2, node1, node1);
      node4.setOptionalArg(false);
      node4.isWith();
      node1.isIf();
      Node.newString("");
      node2.isNE();
      node5.isEquivalentToTyped(node1);
      Node.newString(336, "");
      Node node6 = new Node(52, node3, node5, (-754), 50);
      Node node7 = new Node(54, node6, 454767, 933);
      Node node8 = new Node(2, node7);
      // Undeclared exception!
      try { 
        node4.checkTreeEquals(node8);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 1191, (-967));
      node0.setWasEmptyNode(false);
      Node node1 = Node.newString(40, "Eo2,^._:'X`", 56, 42);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
      Node node2 = Node.newString(55, "gm)p{>Kdy", (-683), 31);
      node2.setString("Eo2,^._:'X`");
      node1.isNull();
      Node node3 = node1.cloneNode();
      Node node4 = node1.cloneNode();
      InputId inputId0 = new InputId("Eo2,^._:'X`");
      node1.removeProp(56);
      node2.isDelProp();
      Node node5 = new Node(51, node0, node1, node4);
      node5.addChildrenToFront(node2);
      node3.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Node node0 = Node.newNumber(3848.0);
      node0.getJSDocInfo();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setChangeTime((-283));
      node0.getBooleanProp(2580);
      node0.isUnscopedQualifiedName();
      node0.setIsSyntheticBlock(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.isRegExp();
      node0.setOptionalArg(false);
      node0.children();
      node0.toString(false, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isVar();
      node0.setType(2580);
      Node node1 = Node.newNumber(3848.0, 122, 47);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("NUMBER 3848.0 [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000002]");
      node_FileLevelJsDocBuilder0.append("NUMBER 3848.0 [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000002]");
      node_FileLevelJsDocBuilder0.append((String) null);
      node1.getSideEffectFlags();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.removeProp(3549);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1436), (-1436));
      node0.getProp((-1));
      node0.isLabel();
      node0.isDelProp();
      Node node1 = new Node(47, node0, node0, node0, node0, 1553, 37);
      node0.setSourceEncodedPositionForTree((-328));
      node1.checkTreeTypeAwareEqualsImpl(node0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node2 = new Node(40, node1, node1, (-1973), 2136);
      // Undeclared exception!
      try { 
        node0.replaceChild(node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, (-938), (-905));
      node0.getQualifiedName();
      node0.getStaticSourceFile();
      Node node1 = Node.newNumber((double) 56);
      node0.isEquivalentToShallow(node1);
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isThrow();
      Node node2 = new Node(149, node0);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      node0.cloneNode();
      Node node1 = new Node(2, nodeArray0, (-1003), 57);
      Node node2 = node0.srcrefTree(node1);
      node2.siblings();
      node0.copyInformationFrom(node2);
      node0.removeProp(0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BLOCK is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isGetterDef();
      node0.isLabelName();
      Node node1 = null;
      try {
        node1 = new Node((-478), node0, (Node) null, (Node) null, node0, 37, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12, 32);
      Node node1 = Node.newString(50, "%s (%s) must not be greater than size (%s)");
      Node node2 = new Node(1, node0, node0, node1, node1, 43, 39);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node2.putBooleanProp(63, true);
      node1.setCharno((-1042));
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node1.getJSType();
      node1.isCatch();
      node3.isThis();
      // Undeclared exception!
      try { 
        node2.addChildBefore(node3, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 678, 678);
      node0.isComma();
      node0.isLabelName();
      node0.isFromExterns();
      node0.setWasEmptyNode(false);
      Node node1 = new Node(4095, node0, node0, node0, node0, 57, 16);
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Node node0 = Node.newString("\u0001\u0000\u00A0\u0000\u0000\u0000\u0000\u0000\u0000\t\n\u000B\f\r\u0000\u0000\u2028\u2029\u0000\u0000\u0000\u0000\u0000\u202F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u3000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0085\u2000\u2001\u2002\u2003\u2005\u2006\u2007\u2008\u2009\u200A\u0000\u0000\u0000\u0000\u0000\u205F\u1680\u0000\u0000\u180E\u0000\u0000\u0000");
      Node node1 = new Node(490, node0, node0, node0, 995, 52);
      node0.isEquivalentTo(node1, false, true, false);
      node0.isVar();
      node1.isString();
      int int0 = (-499);
      Node node2 = null;
      try {
        node2 = new Node(57, node1, node0, node0, 0, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 118, 118);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sEGg8s}");
      Node node1 = new Node(678, node0, node0, 39, (-1));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      simpleSourceFile0.getLineOffset(36);
      simpleSourceFile0.getLineOffset(29);
      node1.setStaticSourceFile(simpleSourceFile0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)125;
      node1.removeFirstChild();
      Node node3 = Node.newString("sEGg8s}");
      node3.getBooleanProp((-391));
      Node.mergeLineCharNo(47, 55);
      try { 
        node2.setDouble(Double.POSITIVE_INFINITY);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING sEGg8s} [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000005] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1212), (-1212));
      node0.getIntProp(122);
      node0.isTrue();
      Node node1 = Node.newString((-1694), "RUM*0i");
      node0.addSuppression("inferred");
      node1.isStringKey();
      node0.isName();
      node0.isNumber();
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 1191, (-967));
      node0.setWasEmptyNode(false);
      Node node1 = Node.newString(0, "Eo2,^._:'X`", (-2118), 4095);
      node0.isEquivalentToShallow(node1);
      Node.newNumber((double) 49, 4, 38);
      node1.useSourceInfoIfMissingFromForTree(node0);
      Node node2 = new Node(12, node0);
      node2.setOptionalArg(false);
      node0.removeFirstChild();
      // Undeclared exception!
      try { 
        node2.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3848);
      Node node1 = new Node(3848, node0, node0, 0, (-345));
      node0.isUnscopedQualifiedName();
      node0.wasEmptyNode();
      node1.isScript();
      node1.isHook();
      node0.getSourceFileName();
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isOptionalArg();
      node2.getAncestors();
      Node node3 = Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      Node node4 = Node.newString(57, "5X}<c'", 29, 1787);
      node0.setString("5X}<c'");
      Node node5 = new Node(43, node3, node3, node4);
      Node node6 = Node.newNumber(1.2);
      node2.removeProp(55);
      node1.setDirectives((Set<String>) null);
      node6.isNE();
      Node node7 = Node.newNumber((double) 46);
      node7.isEquivalentToTyped(node6);
      node4.copyInformationFromForTree(node5);
      node0.checkTreeEquals(node1);
      node5.useSourceInfoFromForTree(node2);
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Node node0 = Node.newString("input_id");
      Node node1 = new Node(48, 52, 57);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node2 = new Node(2678, nodeArray0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = Node.newString(2, "Tu", 114, 36);
      node2.isDelProp();
      node0.isCast();
      Node.mergeLineCharNo((-603), 2);
      // Undeclared exception!
      try { 
        node3.setSideEffectFlags((Node.SideEffectFlags) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Node.newNumber((double) 111, 111, 111);
      ImmutableList.of();
      Node node0 = Node.newString("", (-1728), 54);
      int int0 = 154;
      Node node1 = Node.newString(65535, "");
      Node node2 = new Node(1, node0, node1, node0, 454656, 1191);
      node1.setSourceEncodedPosition(0);
      Node node3 = null;
      try {
        node3 = new Node(1, node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Node node0 = Node.newString("L+V1~G=iav");
      Node node1 = Node.newString((-345), "L+V1~G=iav");
      Node node2 = new Node(30, node1, node0, node0, node0, 11, 37);
      InputId inputId0 = new InputId((String) null);
      node0.getAncestor(244);
      inputId0.toString();
      // Undeclared exception!
      try { 
        node2.replaceChildAfter((Node) null, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Node node0 = Node.newString("\u0001\u0000\u00A0\u0000\u0000\u0000\u0000\u0000\u0000\t\n\u000B\f\r\u0000\u0000\u2028\u2029\u0000\u0000\u0000\u0000\u0000\u202F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u3000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0085\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u0000\u0000\u0000\u0000\u0000\u205F\u1680\u0000\u0000\u180E\u0000\u0000\u0000");
      node0.isGetterDef();
      node0.isLabelName();
      node0.isFromExterns();
      node0.isScript();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isInstanceOf();
      node0.isString();
      Node node1 = new Node(218, node0, node0, 35, 454688);
      node1.isSwitch();
      node1.isRegExp();
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      Node node1 = Node.newString("input_id");
      nodeArray0[1] = node1;
      Node node2 = new Node(52, 8, 13);
      nodeArray0[2] = node2;
      Node node3 = new Node(111, nodeArray0);
      node0.setDirectives((Set<String>) null);
      node0.isNE();
      node0.isEquivalentToTyped(node0);
      node2.copyInformationFromForTree(node0);
      node2.checkTreeEquals(node0);
      node2.useSourceInfoFromForTree(node1);
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Node node0 = Node.newNumber((double) 111, 111, 111);
      Node node1 = Node.newString("input_id");
      Node node2 = new Node(52, 8, 15);
      node2.isFromExterns();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node2.setJSDocInfo(jSDocInfo0);
      node2.putIntProp(1140, (-2767));
      // Undeclared exception!
      try { 
        node2.addChildBefore(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-905), 111, 93);
      Object object0 = new Object();
      node0.isTypeOf();
      Node node1 = new Node(5, node0, node0);
      Node node2 = Node.newString("&98&1(8n[KW");
      node2.isNE();
      node0.isEquivalentToTyped(node1);
      Node.newString(53, "&98&1(8n[KW");
      // Undeclared exception!
      try { 
        node2.checkTreeEquals((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Node.extractCharno(93);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      Node node1 = new Node((-498), node0, node0, node0, node0, 17, 40);
      JSType jSType0 = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("", node1, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(" is not a number node");
      Node node1 = new Node((-1386), 39, 24);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node1;
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      nodeArray0[3] = node1;
      nodeArray0[4] = node1;
      Node node2 = null;
      try {
        node2 = new Node(15, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Node node0 = new Node(1847, 1847, 1847);
      Node node1 = new Node(1847, node0, node0, node0, 85, (-1));
      node1.isSwitch();
      node1.isRegExp();
      node1.setLineno(37);
      Node node2 = Node.newNumber(1252.2, (-466), 1);
      node0.isQualifiedName();
      node0.clonePropsFrom(node2);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 118, 118);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sEGg8s}");
      Node node1 = new Node(678, node0, node0, 39, (-1));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      simpleSourceFile0.getLineOffset(36);
      simpleSourceFile0.getLineOffset(29);
      node1.setStaticSourceFile(simpleSourceFile0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)125;
      node1.removeFirstChild();
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)49;
      Node node3 = new Node(29, node1, node0, node0);
      node2.getDirectives();
      Node node4 = Node.newNumber((double) 54);
      node3.isFalse();
      node3.isGetProp();
      Node node5 = Node.newNumber((double) 43);
      node0.isStringKey();
      node5.isQuotedString();
      node2.getChangeTime();
      Node node6 = node4.useSourceInfoIfMissingFromForTree(node0);
      node6.isNot();
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      String string0 = "L+V1~G=iav";
      Node node0 = Node.newString("L+V1~G=iav");
      Node node1 = new Node(1558, node0, node0, 1075, 3203);
      Node node2 = new Node(112, 1230, (-2162));
      node2.cloneNode();
      Node node3 = Node.newNumber((double) 2);
      Node node4 = null;
      try {
        node4 = new Node(32781, (Node) null, (Node) null, node3, (-185), 57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 390, 122);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = node0.cloneNode();
      Node node2 = new Node(2, nodeArray0, (-1003), 57);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node3 = node2.copyInformationFrom(node0);
      Node node4 = Node.newNumber(1.2);
      node0.removeProp(46);
      node1.setDirectives((Set<String>) null);
      node2.isNE();
      node0.isEquivalentToTyped(node3);
      node4.copyInformationFromForTree(node0);
      Node node5 = null;
      try {
        node5 = new Node(4095, nodeArray0, 445, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newNumber(0.0, 390, 122);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = node0.cloneNode();
      Node node2 = new Node(2, nodeArray0, (-1003), 57);
      Node node3 = node0.srcrefTree(node2);
      node3.siblings();
      node1.srcrefTree(node0);
      node0.siblings();
      Node node4 = Node.newString(1091, "", 390, 48);
      node2.copyInformationFrom(node4);
      Node node5 = Node.newNumber(1.2);
      node5.removeProp((-2658));
      node2.setDirectives((Set<String>) null);
      Node node6 = null;
      try {
        node6 = new Node(711, node0, node3, node3, node4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      Node node1 = Node.newString("input_id");
      nodeArray0[1] = node1;
      Node node2 = new Node(52, 8, 13);
      nodeArray0[2] = node2;
      Node node3 = new Node(111, nodeArray0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.putBooleanProp((-1073), false);
      node2.setCharno(49);
      node0.useSourceInfoFromForTree(node0);
      node1.getJSType();
      node3.isCatch();
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString("Object#Element", 1011, 118);
      node0.putBooleanProp(593, false);
      node0.setCharno(29);
      Node node1 = new Node(152, node0, node0, node0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node1.getJSType();
      node2.isCatch();
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isOptionalArg();
      node2.getAncestors();
      Node node3 = Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      Node node4 = Node.newString(57, "5X}<c'", 29, 1787);
      node0.setString("5X}<c'");
      Node node5 = node4.copyInformationFrom(node3);
      Node node6 = Node.newNumber(1.2);
      node2.removeProp(55);
      node1.setDirectives((Set<String>) null);
      node6.isNE();
      Node node7 = Node.newNumber((double) 46);
      node7.isEquivalentToTyped(node6);
      node4.copyInformationFromForTree(node5);
      node0.checkTreeEquals(node1);
      node5.useSourceInfoFromForTree(node2);
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a numer node", " is not a numer node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.getProp(1);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.isIn();
      JSType jSType1 = modificationVisitor0.caseUnknownType();
      node1.isEquivalentTo(node0);
      node0.checkTreeEquals(node1);
      node0.getIndexOfChild(node1);
      node0.getJSType();
      node0.setIsSyntheticBlock(true);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, jSType1);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      node0.putProp(54, enumType1);
      node1.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 118, 118);
      Node node1 = new Node(678, node0, node0, 51, (-1));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      simpleSourceFile0.getLineOffset(36);
      node1.setStaticSourceFile(simpleSourceFile0);
      node1.isExprResult();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(4941);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 678, 678);
      node0.isEquivalentTo(node0, true, true, true);
      Node node1 = Node.newString(36, "var_args_name", 1848, (-1237));
      node1.isBlock();
      node0.isDebugger();
      node1.isObjectLit();
      node1.setVarArgs(false);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Node node0 = Node.newString("uq_Gl", (-1962), 122);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.setSourceEncodedPositionForTree((-1962));
      Node node1 = new Node(35);
      Node node2 = new Node((-1962), node0, node1, node1, node0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node0.putBooleanProp(52, false);
      node0.setCharno(2);
      node1.type = 2146427070;
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.getJSType();
      node3.isCatch();
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 118, 118);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sEGg8s}");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(678, node0, node0, 39, (-1));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      simpleSourceFile0.getLineOffset(36);
      simpleSourceFile0.getLineOffset(29);
      node0.useSourceInfoIfMissingFromForTree(node1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.getQualifiedName();
      node1.removeChild(node0);
      node1.isUnscopedQualifiedName();
      node0.wasEmptyNode();
      node1.isFunction();
      node1.getSourceFileName();
      node0.addChildrenToFront(node1);
      // Undeclared exception!
      try { 
        node1.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 678
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Node node0 = Node.newNumber((double) 111, 40, 102);
      Node node1 = node0.cloneNode();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(51, nodeArray0, 42, 56);
      Node node3 = node0.srcrefTree(node0);
      node1.siblings();
      node3.copyInformationFrom(node1);
      Node node4 = Node.newNumber(2142.49);
      node0.removeProp(36);
      node4.setDirectives((Set<String>) null);
      node4.isNE();
      node4.isEquivalentToTyped(node0);
      node2.copyInformationFromForTree(node1);
      node0.checkTreeEquals(node0);
      int int0 = (-1330);
      // Undeclared exception!
      try { 
        Node.newString((String) null, 16, (-1126));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 390, 122);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      node0.cloneNode();
      Node node1 = new Node(2, nodeArray0, (-1003), 57);
      Node node2 = node0.srcrefTree(node1);
      node2.siblings();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.copyInformationFrom(node2);
      Node node3 = Node.newNumber(2016.7202026);
      node3.removeProp(0);
      // Undeclared exception!
      try { 
        node0.clonePropsFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 390, 122);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = node0.cloneNode();
      Node node2 = new Node(2, nodeArray0, (-1003), 57);
      Node node3 = node0.srcrefTree(node2);
      node3.siblings();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node4 = node2.copyInformationFrom(node0);
      Node.newNumber((double) 56);
      node0.removeProp(32);
      node0.setDirectives((Set<String>) null);
      node0.isNE();
      node0.isEquivalentToTyped(node2);
      node1.copyInformationFromForTree(node2);
      // Undeclared exception!
      try { 
        node3.checkTreeEquals(node4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 390, 122);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = node0.cloneNode();
      Node node2 = new Node(2, nodeArray0, (-1003), 57);
      Node node3 = node0.srcrefTree(node2);
      node3.siblings();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.copyInformationFrom(node0);
      Node node4 = Node.newNumber(3848.0);
      node1.removeProp((-664));
      node4.setDirectives((Set<String>) null);
      node2.isNE();
      Node node5 = null;
      try {
        node5 = new Node(335, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 390, 122);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      node0.cloneNode();
      Node node1 = new Node(2, nodeArray0, (-1003), 57);
      Node node2 = node0.srcrefTree(node1);
      node2.siblings();
      node0.getQualifiedName();
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.isThrow();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3848);
      Node node1 = new Node(3848, node0, node0, 0, (-345));
      node0.isUnscopedQualifiedName();
      node0.wasEmptyNode();
      node1.isScript();
      node0.isFunction();
      node0.getSourceFileName();
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Node node0 = Node.newNumber((double) 111, 111, 111);
      Node node1 = Node.newString("input_id");
      Node node2 = new Node(52, 8, 15);
      node2.putIntProp(1140, (-2767));
      // Undeclared exception!
      try { 
        node2.addChildBefore(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Node node0 = Node.newString("", 101, (-3632));
      Node node1 = new Node(29, node0, 48, (-1859));
      node0.isEquivalentTo(node1, false, false, true);
      Node node2 = Node.newString((-1038), "JDU!25Z&`&UM2", 4, (-634));
      node2.isBlock();
      node1.isDebugger();
      node1.isObjectLit();
      node0.getString();
      node1.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      Node node1 = new Node((-345), node0, node0, 4095, (-2252));
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(54, nodeArray0, 8, 55);
      node2.cloneNode();
      // Undeclared exception!
      try { 
        node2.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.setLastGeneration(false);
      ImmutableList.of();
      Node node0 = Node.newString(" is not a number node", 2854, 2854);
      Node node1 = new Node((-268), node0, node0, node0, node0);
      node1.isBreak();
      node0.isTrue();
      Node node2 = Node.newNumber((double) (-268));
      Node node3 = node0.clonePropsFrom(node1);
      node1.hasChild(node3);
      node1.getBooleanProp(155);
      node2.setDouble(1894.892191);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isOptionalArg();
      node2.getAncestors();
      Node node3 = Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      Node.newString(57, "5X}<c'", 29, 1787);
      node0.setString("5X}<c'");
      node2.isNull();
      Node node4 = node0.cloneNode();
      Node node5 = node4.cloneNode();
      InputId inputId0 = new InputId("");
      Node node6 = new Node(56, node0, node3, node1);
      node6.getDirectives();
      Node node7 = Node.newNumber(1.0);
      node7.isFalse();
      node0.isGetProp();
      Node node8 = Node.newNumber((double) 32);
      node8.isStringKey();
      node5.isQuotedString();
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 390, 122);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = node0.cloneNode();
      Node node2 = new Node(2, nodeArray0, (-1003), 57);
      Node node3 = node0.srcrefTree(node2);
      node3.siblings();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node4 = node0.copyInformationFrom(node3);
      Node node5 = Node.newNumber(2016.7202026);
      node5.removeProp(0);
      node0.setDirectives((Set<String>) null);
      node0.isNE();
      node0.isEquivalentToTyped(node4);
      Node node6 = node1.copyInformationFromForTree(node3);
      node6.checkTreeEquals(node3);
      node3.useSourceInfoFromForTree(node6);
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      node0.isOptionalArg();
      node0.getAncestors();
      Node node1 = Node.newString(40, "input_id", 8232, 32);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      Node.newString(2557, "input_id", 8388608, 4);
      // Undeclared exception!
      try { 
        node1.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Node node0 = new Node(98);
      Node node1 = new Node(98, node0);
      InputId inputId0 = new InputId("SFoQi1o^+d?Uc\n");
      node1.setInputId(inputId0);
      InputId inputId1 = new InputId("");
      node1.setInputId(inputId1);
      // Undeclared exception!
      try { 
        node1.clonePropsFrom(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Node node0 = Node.newNumber((double) 44);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = Node.newString(12, "Z#}1mZtqUw^Y+>Dsi");
      Node node2 = new Node(44, node0, node1, node1, node1);
      node2.toString(true, false, false);
      try { 
        node2.setDouble(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TRUE is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      Node node1 = Node.newString("input_id");
      Node node2 = node0.copyInformationFrom(node0);
      node2.setSourceEncodedPositionForTree(102);
      Node node3 = Node.newString(5148, "    ");
      node0.isNE();
      Node node4 = new Node(44, node3);
      node4.isOnlyModifiesThisCall();
      node0.getStaticSourceFile();
      node1.children();
      // Undeclared exception!
      try { 
        node3.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 5148
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      Node node1 = Node.newString("input_id");
      nodeArray0[1] = node1;
      Node node2 = new Node(52, 8, 13);
      nodeArray0[2] = node2;
      Node node3 = new Node(111, nodeArray0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.putBooleanProp((-1073), false);
      node2.setCharno(49);
      node0.useSourceInfoFromForTree(node0);
      node1.getJSType();
      node3.isCatch();
      node2.getNext();
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 118, 118);
      Node node1 = new Node(678, node0, node0, 51, (-1));
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      ObjectType objectType0 = jSTypeRegistry1.createAnonymousObjectType(jSDocInfo0);
      simpleErrorReporter0.warning("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", "Object#Element", 5676, (-4146));
      jSTypeRegistry1.resetImplicitPrototype(objectType0, objectType0);
      jSTypeRegistry1.setLastGeneration(false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node2 = new Node(30, node1, 29, 49);
      node2.putBooleanProp(120, false);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node3.getChangeTime();
      Node node4 = new Node(52);
      Node node5 = new Node(4, 1, 39);
      node5.isQualifiedName();
      Node node6 = Node.newNumber((double) 43, 52, (-1726));
      node5.setSourceEncodedPositionForTree(46);
      Node node7 = new Node(54, 0, 50);
      node7.isNumber();
      node2.isWith();
      node6.hasOneChild();
      node4.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12, 32);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node1 = Node.newString(4095, ")vNNp|N", 2, 4095);
      node_AncestorIterable0.iterator();
      node0.detachChildren();
      node1.setLength(83);
      node0.setDouble((-438.208619698));
      node1.getChangeTime();
      node1.isBreak();
      node0.isTrue();
      Node.newNumber((double) 40);
      Node node2 = Node.newNumber(3848.0);
      node2.clonePropsFrom(node1);
      node2.isLocalResultCall();
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -438.208619698 12 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.getProp(1);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.isIn();
      node1.isEquivalentTo(node0);
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(unionType0).getAlternates();
      // Undeclared exception!
      try { 
        modificationVisitor0.caseUnionType(unionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 118, 118);
      Node node1 = new Node(678, node0, node0, 51, (-1));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      simpleSourceFile0.getLineOffset(36);
      simpleSourceFile0.getLineOffset(29);
      node1.setStaticSourceFile(simpleSourceFile0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error((String) null, (String) null, 3637, 30);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.putBooleanProp(54, false);
      node1.setCharno(44);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.children();
      node2.getJSType();
      node1.isCatch();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 118, 118);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sEGg8s}");
      Node node1 = new Node(678, node0, node0, 39, (-1));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      simpleSourceFile0.getLineOffset(36);
      simpleSourceFile0.getLineOffset(29);
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.getQualifiedName();
      node1.removeChild(node0);
      node1.isUnscopedQualifiedName();
      node0.wasEmptyNode();
      node1.isFunction();
      node1.getSourceFileName();
      node0.addChildrenToFront(node1);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isVar();
      node0.isString();
      Node node1 = new Node(218, node0, node0, 35, 454688);
      node1.isSwitch();
      node1.isRegExp();
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      simpleErrorReporter0.error("cNCY", "", 2854, 0);
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.getProp(1);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.isIn();
      node1.isFunction();
      node0.getSourceFileName();
      // Undeclared exception!
      try { 
        node0.appendStringTree((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(329.701, 32768, 41);
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        node0.isEquivalentTo((Node) null, true, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Node node0 = null;
      try {
        node0 = new Node((-345), (Node) null, (Node) null, (-367), (-298));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3848);
      Node node1 = new Node(3848, node0, node0, 0, (-345));
      Node node2 = node1.cloneNode();
      // Undeclared exception!
      try { 
        node1.removeChild(node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      Node node1 = Node.newString("input_id");
      nodeArray0[1] = node1;
      Node node2 = new Node(52, 8, 13);
      nodeArray0[2] = node2;
      Node node3 = new Node(111, nodeArray0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.putBooleanProp((-1073), false);
      node2.setCharno(49);
      node0.useSourceInfoFromForTree(node0);
      node1.getJSType();
      // Undeclared exception!
      try { 
        node0.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Object object0 = new Object();
      node0.putProp(9, object0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      jSTypeRegistry0.setLastGeneration(false);
      ImmutableList.of();
      Node node1 = new Node(0, node0, 4095, 4095);
      node0.putBooleanProp((-2927), false);
      node0.getChangeTime();
      Node node2 = new Node(1848);
      node1.isQualifiedName();
      Node node3 = Node.newNumber(3848.0, 1848, 38);
      node3.setSourceEncodedPositionForTree(57);
      node1.isNumber();
      node2.isWith();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got CATCH
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 32, (-1135));
      Node node1 = Node.newString(53, "%s (%s) must not be greater than size (%s)");
      Node node2 = new Node(57, node0, node1, node0, node0, (-682), (-682));
      InputId inputId0 = new InputId("[sM|~}!c");
      node1.useSourceInfoIfMissingFrom(node2);
      node0.getAncestor(42);
      inputId0.toString();
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.setLastGeneration(false);
      ImmutableList.of();
      Node node0 = Node.newString(" is not a number node", 2854, 2854);
      Node node1 = new Node((-268), node0, node0, node0, node0);
      node1.isBreak();
      node0.isTrue();
      Node node2 = Node.newNumber((double) (-268));
      Node node3 = node0.clonePropsFrom(node1);
      node3.isLocalResultCall();
      try { 
        node2.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -268.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 678, 678);
      Node node1 = new Node(1104, 51, 39);
      Node node2 = node1.srcrefTree(node0);
      Node node3 = Node.newString("l", 47, 900);
      node1.isWhile();
      node2.isNoSideEffectsCall();
      node0.addChildToFront(node3);
      ImmutableList.of();
      Node node4 = Node.newString("", 5353, 0);
      node2.getBooleanProp(49);
      Node.mergeLineCharNo(1, 4095);
      try { 
        node4.setDouble((-2720.455102550396));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  5353 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 118, 118);
      Node node1 = new Node(678, node0, node0, 51, (-1));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      simpleSourceFile0.getLineOffset(36);
      simpleSourceFile0.getLineOffset(29);
      node1.setStaticSourceFile(simpleSourceFile0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error((String) null, (String) null, 3637, 30);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.putBooleanProp(54, false);
      node1.setCharno(44);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.getJSType();
      node1.isCatch();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 118, 118);
      Node node1 = new Node(678, node0, node0, 39, (-1));
      int int0 = 559;
      Node node2 = null;
      try {
        node2 = new Node(2005, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      Node node0 = new Node(13);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      node0.putIntProp(2, 53);
      Node node1 = new Node(32, node0, node0, node0, 38, (-920));
      Node node2 = node0.srcrefTree(node0);
      Node node3 = Node.newString("", 30, 676);
      node3.isWhile();
      node3.isNoSideEffectsCall();
      ImmutableList.of();
      Node node4 = Node.newString("", (-479), 39);
      node2.getBooleanProp(111);
      Node.mergeLineCharNo(112, 43);
      try { 
        node4.setDouble(54);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      Node node1 = Node.newString("input_id");
      nodeArray0[1] = node1;
      Node node2 = new Node(52, 8, 13);
      nodeArray0[2] = node2;
      Node node3 = new Node(111, nodeArray0);
      Node.newString(":]_\"ILNvx5y^YV", 53, 900);
      node2.useSourceInfoIfMissingFromForTree(node0);
      node2.getBooleanProp(1044);
      Node.mergeLineCharNo((-2170), 12);
      try { 
        node2.setDouble(37);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // INSTANCEOF 111 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      int int0 = 0;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      Node node0 = null;
      try {
        node0 = new Node(0, (Node) null, 2996, 3969);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.getProp(1);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.isIn();
      node1.isEquivalentTo(node0);
      node0.checkTreeEquals(node1);
      node0.getIndexOfChild(node1);
      node0.getJSType();
      node0.setIsSyntheticBlock(true);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      Node node1 = Node.newString("input_id");
      nodeArray0[1] = node1;
      Node node2 = new Node(52, 8, 13);
      nodeArray0[2] = node2;
      Node node3 = new Node(111, nodeArray0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node.newString(48, "com.google.javascript.rhino.Node$NodeMismatch", (-2018), (-3670));
      node0.isDelProp();
      node2.isCast();
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      node0.isOptionalArg();
      node2.getAncestors();
      Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      Node node3 = Node.newString(12, "5X}<c'", 1471, 804);
      node3.setString("5X}<c'");
      node3.isNull();
      Node node4 = node2.cloneNode();
      Node node5 = node3.cloneNode();
      InputId inputId0 = new InputId("5X}<c'");
      Node node6 = new Node((-1582), node0, node5, node2);
      node6.type = 40;
      node6.getDirectives();
      node3.isFalse();
      node5.isGetProp();
      node4.isStringKey();
      node0.isQuotedString();
      node2.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Object object0 = new Object();
      node0.putProp(9, object0);
      Node node1 = new Node(2860, node0, node0, node0, node0);
      node1.setCharno(30);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = node2.detachFromParent();
      // Undeclared exception!
      try { 
        node3.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 9
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Node.extractLineno(20);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      int int0 = 461;
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString("", 461, 461);
      Node node1 = new Node(461, node0, node0, node0, (-4048), 47);
      Node node2 = new Node(678, 15, (-804));
      Node node3 = new Node((-664), node1, node1, node1, node2, 48, 32);
      Node node4 = new Node(96, node3);
      Node node5 = new Node(461, node4, 4095, 2);
      nodeArray0[0] = node5;
      Node node6 = null;
      try {
        node6 = new Node(57, node3, (-2081), 55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Node node0 = new Node(13);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Node node1 = new Node(46, node0, node0, node0);
      node0.putIntProp(2, 53);
      Node node2 = new Node(32, node1, node1, node1, 38, (-920));
      node1.srcrefTree(node0);
      String string0 = "";
      Node node3 = Node.newString("", 30, 676);
      node3.isWhile();
      node3.isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        node3.addChildToFront(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) (-905), 98, 147);
      node0.setSourceEncodedPositionForTree(86);
      Node node1 = Node.newString("directives");
      node1.useSourceInfoFrom(node0);
      node1.isThrow();
      Node node2 = new Node(33, 15, 3234);
      node2.getAncestor(1337);
      node2.isExprResult();
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 118, 118);
      Node node1 = new Node(678, node0, node0, 39, (-1));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      simpleSourceFile0.getLineOffset(36);
      simpleSourceFile0.getLineOffset(29);
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node1.getQualifiedName();
      node1.removeChild(node0);
      node1.isUnscopedQualifiedName();
      node0.wasEmptyNode();
      node1.isFunction();
      node1.getSourceFileName();
      // Undeclared exception!
      try { 
        node1.appendStringTree((Appendable) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 678
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 678, 678);
      node0.isEquivalentTo(node0, true, true, true);
      node0.isVar();
      node0.isString();
      Node node1 = new Node(56, node0, node0, 4095, 31);
      node1.isSwitch();
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 118, 118);
      Node node1 = new Node(678, node0, node0, 39, (-1));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      simpleSourceFile0.getLineOffset(36);
      simpleSourceFile0.getLineOffset(29);
      node1.setStaticSourceFile(simpleSourceFile0);
      node1.getQualifiedName();
      node1.removeChild(node0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("sEGg8s}");
      mockFileWriter0.append('p');
      mockFileWriter0.flush();
      node0.appendStringTree(mockFileWriter0);
      node1.isUnscopedQualifiedName();
      node0.getDirectives();
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3848);
      Node node1 = new Node(3848, node0, node0, 0, (-345));
      node1.cloneNode();
      node1.cloneNode();
      Node node2 = Node.newNumber((double) 37);
      node2.isFunction();
      // Undeclared exception!
      try { 
        node2.appendStringTree((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      node0.isOptionalArg();
      Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      Node node3 = Node.newString(12, "5X}<c'", 1494, 804);
      node3.setString("5X}<c'");
      node3.isNull();
      Node node4 = node2.cloneNode();
      Node node5 = node3.cloneNode();
      node5.getInputId();
      Node node6 = new Node((-1582), node0, node5, node2);
      node6.type = 40;
      node6.getDirectives();
      node3.isFalse();
      node0.isOr();
      node4.isStringKey();
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Node node0 = Node.newString("uq_Gl", (-1962), 122);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.setSourceEncodedPositionForTree((-1962));
      Node node1 = new Node(35);
      Node node2 = new Node((-1962), node0, node1, node1, node0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      node2.mayMutateGlobalStateOrThrow();
      Node node3 = node2.removeFirstChild();
      node3.setQuotedString();
      node2.isReturn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(102);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.areAllFlagsSet();
      // Undeclared exception!
      try { 
        node3.addChildToBack(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNoType();
      Node node0 = Node.newString("Node has existing properties.");
      node0.setSourceFileForTesting("Rv2,+%HMv{kc#qAqkU ");
      node0.getProp(678);
      node0.isTypeOf();
      // Undeclared exception!
      try { 
        node0.useSourceInfoFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 390, 122);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = node0.cloneNode();
      Node node2 = new Node(2, nodeArray0, (-1003), 57);
      Node node3 = node0.srcrefTree(node2);
      node3.siblings();
      Node node4 = node0.copyInformationFrom(node3);
      Node node5 = Node.newNumber(2016.7202026);
      node5.removeProp(0);
      node0.setDirectives((Set<String>) null);
      node0.isNE();
      node0.isEquivalentToTyped(node4);
      Node node6 = node1.copyInformationFromForTree(node3);
      node6.checkTreeEquals(node3);
      node3.useSourceInfoFromForTree(node6);
      node1.isRegExp();
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node1.isEquivalentToTyped(node0);
      node0.removeChildren();
      node0.isOptionalArg();
      Node node2 = Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, true);
      jSTypeRegistry0.setLastGeneration(false);
      ImmutableList.of();
      Node node3 = new Node(49, node2, 56, 54);
      node3.putBooleanProp(57, false);
      node3.getChangeTime();
      Node node4 = new Node(43);
      node4.isQualifiedName();
      Node node5 = Node.newNumber((double) 57, 166, 154);
      node5.setSourceEncodedPositionForTree(37);
      node1.isNumber();
      node0.isWith();
      node5.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Object object0 = new Object();
      node0.putProp(9, object0);
      node0.putBooleanProp(8, false);
      node0.setCharno(30);
      Node node1 = node0.useSourceInfoFromForTree(node0);
      // Undeclared exception!
      try { 
        node1.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Node node0 = new Node(2344, 1847, 1847);
      Node node1 = new Node((-1338), node0, node0, 4931, 48);
      node1.removeFirstChild();
      Node node2 = new Node(0, node0);
      // Undeclared exception!
      try { 
        node2.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12, 32);
      Node node1 = Node.newString(50, "%s (%s) must not be greater than size (%s)");
      Node node2 = new Node(1, node0, node0, node1, node1, 43, 39);
      InputId inputId0 = new InputId("U^?$,M#z D");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2487));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setMutatesGlobalState();
      node2.getDirectives();
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Node node0 = Node.newString("uq_Gl", (-1962), 122);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.setSourceEncodedPositionForTree((-1962));
      Node node1 = new Node(35);
      Node node2 = new Node((-1962), node0, node1, node1, node0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      node2.mayMutateGlobalStateOrThrow();
      node2.isEquivalentTo(node1, false, false, false);
      node1.isVar();
      node2.isString();
      Node node3 = null;
      try {
        node3 = new Node(29, node0, node2, 52, 56);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString(39, "G#HO'v\"", 39, 971);
      node0.isBlock();
      node0.isDebugger();
      node0.isObjectLit();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      Node node0 = Node.newString("uq_Gl", (-1962), 122);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.setSourceEncodedPositionForTree((-1962));
      Node node1 = new Node(35);
      Node node2 = new Node((-1962), node0, node1, node1, node0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      node2.mayMutateGlobalStateOrThrow();
      Node node3 = node2.removeFirstChild();
      node3.setQuotedString();
      node2.isReturn();
      Node node4 = new Node(54);
      // Undeclared exception!
      try { 
        node3.replaceChildAfter(node4, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Node node0 = new Node(120);
      Object object0 = new Object();
      node0.putProp(28, object0);
      Node node1 = new Node((-680), node0, node0, node0, node0);
      node1.putBooleanProp((-1), false);
      node1.setCharno(30);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.getJsDocBuilderForNode();
      node1.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node1.isEquivalentToTyped(node0);
      node0.removeChildren();
      node0.isOptionalArg();
      Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, true);
      jSTypeRegistry0.setLastGeneration(false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node2.putBooleanProp(57, false);
      node2.getChangeTime();
      Node node3 = new Node(43);
      node3.isQualifiedName();
      Node node4 = Node.newNumber((double) 57, 122, 154);
      node0.setSourceEncodedPositionForTree((-682));
      Node.newString(54, "Ttt4Gt");
      node4.getDouble();
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Node node0 = Node.newString(": ");
      node0.setWasEmptyNode(true);
      Node node1 = Node.newString(48, "String node not created with Node.newString", (-352), 12);
      node1.isEquivalentToShallow(node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.setOptionalArg(true);
      node0.isWith();
      // Undeclared exception!
      try { 
        node1.addChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Object object0 = new Object();
      node0.putProp(9, object0);
      Node node1 = new Node(2860, node0, node0, node0, node0);
      node1.putBooleanProp(8, false);
      node1.setCharno(30);
      Node.mergeLineCharNo(2624, 119);
      Node node2 = Node.newString(2147483645, ".zl_ta9", 52, 56);
      node2.setSourceEncodedPositionForTree(51);
      node2.isObjectLit();
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Node node0 = new Node(120);
      Object object0 = new Object();
      node0.putProp((-58), object0);
      node0.putBooleanProp((-58), true);
      node0.setCharno((-1));
      node0.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      Node node1 = Node.newString("input_id");
      nodeArray0[1] = node1;
      Node node2 = new Node(52, 8, 13);
      nodeArray0[2] = node2;
      Node node3 = new Node(111, nodeArray0);
      Node.newString("", 3538, 8);
      node1.getBooleanProp(0);
      Node.mergeLineCharNo((-814), 40);
      try { 
        node2.setDouble(53);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // INSTANCEOF 8 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      node0.isOptionalArg();
      Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      Node node3 = Node.newString(12, "5X}<c'", 1494, 804);
      node3.setString("5X}<c'");
      node3.isNull();
      node2.cloneNode();
      Node node4 = node3.cloneNode();
      Node node5 = new Node((-1582), node0, node4, node2);
      node5.type = 40;
      node5.getDirectives();
      node3.isFalse();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3848);
      Node node1 = new Node(3848, node0, node0, 0, (-345));
      Node node2 = node1.cloneTree();
      node1.isEquivalentTo(node2, false, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VN6hS0+@[.XdZ");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags0.areAllFlagsSet();
      node2.addChildToBack(node1);
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 678, 678);
      node0.isEquivalentTo(node0, true, false, true);
      node0.isVar();
      node0.isString();
      Node node1 = new Node(56, node0, node0, 4095, 31);
      Node.newNumber((-5178.232490415923), 48, (-66));
      node1.setSourceEncodedPositionForTree(43);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      Node node0 = new Node(2344, 1847, 1847);
      Node node1 = new Node(1847, node0, node0, node0, 85, (-1));
      node1.isSwitch();
      node1.isRegExp();
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3851);
      Node node1 = new Node(31, node0);
      node0.cloneNode();
      Node node2 = node1.cloneNode();
      // Undeclared exception!
      try { 
        node2.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 678, 678);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      Node node0 = new Node(13);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Node node1 = new Node(29, node0, node0, 29, 2);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      simpleSourceFile0.getLineOffset(27);
      simpleSourceFile0.getLineOffset(4095);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.getQualifiedName();
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      Node node1 = Node.newString("input_id");
      nodeArray0[1] = node1;
      Node node2 = new Node(52, 8, 13);
      nodeArray0[2] = node1;
      Node node3 = null;
      try {
        node3 = new Node(111, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Node node0 = new Node(120);
      Object object0 = new Object();
      node0.putProp(28, object0);
      Node node1 = new Node(2860, node0, node0, node0, node0);
      node1.isTrue();
      Node node2 = Node.newNumber((-322.62789139));
      node2.clonePropsFrom(node0);
      node2.isLocalResultCall();
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2860
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, (-938), (-905));
      node0.setDouble(937.2997807319);
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.putIntProp((-905), (-905));
      Node node1 = new Node((-732), node0, node0, node0, 1, 2028);
      Node node2 = node0.srcrefTree(node1);
      node0.isStringKey();
      node2.isNoSideEffectsCall();
      node0.addChildToFront(node1);
      node2.detachChildren();
      node0.setLength(0);
      node2.setDouble(0.0);
      node0.getChangeTime();
      node2.isBreak();
      node2.putBooleanProp(52, false);
      node0.setCharno(1751);
      node2.useSourceInfoFromForTree(node0);
      // Undeclared exception!
      try { 
        node1.setDouble(543.9478);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -732
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("");
      // Undeclared exception!
      try { 
        node0.isEquivalentToTyped((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Node node0 = Node.newString(": ");
      node0.setWasEmptyNode(false);
      Node node1 = Node.newString(48, "String node not created with Node.newString", (-352), 1191);
      node1.isEquivalentToShallow(node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.setOptionalArg(false);
      node0.isFunction();
      node2.isIf();
      // Undeclared exception!
      try { 
        node1.addChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Object object0 = new Object();
      node0.putProp(9, object0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.setLastGeneration(false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = jSType0;
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node1.getProp(42);
      jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.isIn();
      node0.isEquivalentTo(node1);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'", 52, 56);
      node0.addChildToBack(node1);
      Node node2 = Node.newString("GU/)BLgG?R", 0, 8);
      node0.isRegExp();
      node1.putIntProp(31, 4);
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node2.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node1.isEquivalentToTyped(node0);
      node0.removeChildren();
      node0.isOptionalArg();
      Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, true);
      jSTypeRegistry0.setLastGeneration(false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node2.putBooleanProp(57, false);
      node2.getChangeTime();
      Node node3 = new Node(43);
      node3.isQualifiedName();
      Node node4 = Node.newNumber((double) 57, 122, 154);
      node4.checkTreeTypeAwareEqualsImpl(node2);
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      Node node0 = Node.newString("L+V1~G=iav");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Iterator<EnumType> iterator0 = (Iterator<EnumType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString("input_id");
      nodeArray0[1] = node0;
      Node node1 = new Node(52, 8, 13);
      nodeArray0[2] = node1;
      Node node2 = null;
      try {
        node2 = new Node(111, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      Node node0 = new Node(13);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-4314));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      Node node1 = new Node((-241), node0, node0, node0, node0, 4095, 40);
      node1.isStringKey();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NE
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.removeProp(120);
      node0.setOptionalArg(false);
      Node node1 = new Node(831, node0);
      node1.isWith();
      node1.isIf();
      node0.toString(false, false, true);
      Node node2 = new Node(3165, node1, node1, 50, 48);
      Node node3 = null;
      try {
        node3 = new Node(2521, node1, node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(39, (Node) null, (Node) null, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12, 32);
      Node node1 = Node.newString(50, "%s (%s) must not be greater than size (%s)");
      Node node2 = new Node(1, node0, node0, node1, node1, 43, 39);
      InputId inputId0 = new InputId("U^?$,M#z D");
      Node.newString(43, "hj.*6J$qh", 4931, 52);
      node2.isDelProp();
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Object object0 = new Object();
      node0.putProp(9, object0);
      Node node1 = new Node(2860, node0, node0, node0, node0);
      node1.putBooleanProp(8, false);
      node1.setCharno(30);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.detachFromParent();
      // Undeclared exception!
      try { 
        node2.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 9
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Node node0 = new Node(13);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedInputStream0.mark(50);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ".OaKu&";
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) ".OaKu&";
      objectArray0[7] = objectArray0[3];
      node0.isThrow();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 678, 678);
      node0.getQualifiedName();
      node0.isString();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(12, node0, node0, node0, 53, 53);
      node0.isEquivalentTo(node1, true, true, true);
      node0.isVar();
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Object object0 = new Object();
      node0.putProp(9, object0);
      Node node1 = new Node(2860, node0, node0, node0, node0);
      node1.putBooleanProp((-1), false);
      node0.isString();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      Node node0 = new Node(13);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Node node1 = new Node(49, node0, 1522, 36);
      node1.putIntProp(54, 103);
      Node node2 = null;
      try {
        node2 = new Node(1, node1, node1, node0, 53, 42);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(12, node0, node0, node0, 53, 53);
      node0.isEquivalentTo(node1, true, true, true);
      node0.isVar();
      node0.isSyntheticBlock();
      node1.isString();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Object object0 = new Object();
      node0.putProp(9, object0);
      Node node1 = new Node(2860, node0, node0, node0, node0);
      node1.putBooleanProp((-1), false);
      node1.setCharno(30);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.getLineno();
      node1.removeChild(node2);
      node1.setSourceFileForTesting("");
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      Node node0 = new Node(101);
      node0.mayMutateGlobalStateOrThrow();
      node0.isSetterDef();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      jSTypeRegistry0.setLastGeneration(true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      ImmutableList.builder();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node1.getChangeTime();
      node1.isQualifiedName();
      node1.setChangeTime(8);
      node1.isNumber();
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3851);
      Node node1 = new Node(12, node0, node0, node0, node0);
      node1.cloneNode();
      node1.cloneNode();
      node1.getDirectives();
      Node node2 = null;
      try {
        node2 = new Node(29, node0, node0, 244, 55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      String string0 = "source_file";
      Node node0 = Node.newString("source_file", 0, 0);
      int int0 = Node.ORIGINALNAME_PROP;
      // Undeclared exception!
      try { 
        node0.copyInformationFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node1.isEquivalentToTyped(node0);
      node0.removeChildren();
      node0.isOptionalArg();
      Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, true);
      jSTypeRegistry0.setLastGeneration(false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node2.putBooleanProp(57, false);
      node2.getChangeTime();
      Node node3 = new Node(43);
      node3.isQualifiedName();
      Node node4 = Node.newNumber((double) 57, 122, 154);
      node4.setSourceEncodedPositionForTree(37);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      Node node0 = Node.newString("sEGg8s}", 118, 118);
      Node node1 = new Node(678, node0, node0, 39, (-1));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      simpleSourceFile0.getLineOffset(36);
      simpleSourceFile0.getLineOffset(29);
      node1.setStaticSourceFile(simpleSourceFile0);
      node1.getQualifiedName();
      node1.removeChild(node0);
      node1.isUnscopedQualifiedName();
      node1.isFunction();
      // Undeclared exception!
      try { 
        node1.appendStringTree((Appendable) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 678
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newNumber((double) 111, 111, 111);
      nodeArray0[0] = node0;
      Node node1 = Node.newString("input_id");
      nodeArray0[1] = node1;
      Node node2 = new Node(52, 8, 13);
      nodeArray0[2] = node2;
      Node node3 = new Node(111, nodeArray0);
      int int0 = 1186;
      Node node4 = null;
      try {
        node4 = new Node(39, node3, node3, node3, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      Node node0 = Node.newString(154, ": ", 154, 154);
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      String string0 = "EvalError";
      Node node0 = Node.newString((-14), "EvalError");
      node0.getLength();
      node0.getType();
      Node node1 = new Node((-1144), node0, node0, node0, 1522, 120);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EvalError");
      Node node2 = node0.cloneTree();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        node2.addChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12, 12);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node.newString(4095, ")vNNp|N", 2, 4095);
      node_AncestorIterable0.iterator();
      node0.isNull();
      Node node1 = Node.newString(")vNNp|N", 4095, 57);
      JSType jSType0 = null;
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3848);
      Node node1 = new Node(3848, node0, node0, 0, (-345));
      node1.cloneNode();
      node1.cloneNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(46);
      node0.isQuotedString();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(831, 56, 126);
      node0.isEquivalentToShallow(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 831
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.setOptionalArg(false);
      Node node1 = new Node(831, node0);
      node1.isWith();
      node1.isIf();
      node0.toString(false, false, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2936);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node1.isStringKey();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(65535);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 831
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Node.newString((-996), "", 51, 42);
      Node node0 = Node.newString("");
      // Undeclared exception!
      try { 
        node0.copyInformationFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 390, 122);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = node0.cloneNode();
      node1.checkTreeEquals(node0);
      Node node2 = new Node(2, nodeArray0, (-1003), 57);
      Node node3 = node0.srcrefTree(node2);
      node3.siblings();
      node0.copyInformationFrom(node3);
      int int0 = 1610612736;
      Node node4 = null;
      try {
        node4 = new Node(110, node0, node1, node0, node0, 1, (-319));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      node0.removeChildren();
      node0.isOptionalArg();
      Node node2 = Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      Node node3 = Node.newString(12, "5X}<c'", 1494, 804);
      node3.setString("5X}<c'");
      node3.isNull();
      Node node4 = node2.cloneTree();
      node4.isEquivalentTo(node0, false, false, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12, 32);
      Node node1 = Node.newString(50, "%s (%s) must not be greater than size (%s)");
      Node node2 = new Node(1, node0, node0, node1, node1, 43, 39);
      InputId inputId0 = new InputId("");
      node2.getAncestor(305);
      inputId0.toString();
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      Node node0 = new Node(13);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ".OaKu&";
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) ".OaKu&";
      objectArray0[7] = objectArray0[3];
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      Node node1 = new Node(390, node0, node0, node0, node0);
      node1.getChildCount();
      node1.isThrow();
      node0.setJSDocInfo((JSDocInfo) null);
      Node.newNumber(0.0, (-2765), (-2270));
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      Node node0 = Node.newString("Qo;9/H<I0%#Z{W+)#>b");
      node0.isParamList();
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12, 32);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node.newString(4095, ")vNNp|N", 2, 4095);
      node_AncestorIterable0.iterator();
      node0.isNull();
      node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, (-938), (-905));
      node0.setDouble(937.2997807319);
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.putIntProp((-905), (-905));
      Node node1 = new Node((-732), node0, node0, node0, 1, 2028);
      Node node2 = node0.srcrefTree(node1);
      node0.isStringKey();
      node2.isNoSideEffectsCall();
      node0.addChildToFront(node1);
      node2.detachChildren();
      node0.setLength(0);
      node2.setDouble(0.0);
      node0.getChangeTime();
      node2.isBreak();
      node1.isTrue();
      Node node3 = Node.newNumber((double) 40);
      Node node4 = node3.clonePropsFrom(node2);
      node4.isLocalResultCall();
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -732
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12, 32);
      Node node1 = new Node((-934), node0, node0, node0, 53, 57);
      Node node2 = new Node(16, node1, node1, 16, 77);
      Node node3 = node1.srcrefTree(node2);
      node3.isStringKey();
      node3.isNoSideEffectsCall();
      node3.addChildToFront(node2);
      node0.detachChildren();
      node3.setLength(1);
      try { 
        node2.setDouble(47);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // GT 16 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      Node node0 = new Node(13);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ".OaKu&";
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[3] = (Object) mockPrintWriter1;
      objectArray0[6] = (Object) ".OaKu&";
      node0.getProp(13);
      objectArray0[7] = null;
      objectArray0[8] = (Object) node0;
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(12, node0, node0, node0, 53, 53);
      node0.isEquivalentTo(node1, true, true, true);
      node0.isVar();
      node1.isString();
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      ImmutableList.of();
      Node node0 = Node.newString(" is not a number node", 2854, 2854);
      node0.getBooleanProp(2669);
      Node.mergeLineCharNo(886, 51);
      try { 
        node0.setDouble((-104));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  is not a number node 2854 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.setOptionalArg(false);
      Node node1 = new Node(831, node0);
      node1.isWith();
      node1.isIf();
      node0.toString(false, true, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2936);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node1.isStringKey();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(65535);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 831
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3848);
      Node node1 = new Node(3848, node0, node0, 0, (-345));
      Node node2 = null;
      try {
        node2 = new Node(4095, node1, node0, 57, 39);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 390, 122);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(42, node0, node0, 42, 31);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(52);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.ROOT;
      Node node1 = new Node(1045, 29, 12);
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1045
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(2693);
      Node node1 = new Node(2854, node0, node0, node0, node0, (-938), 48);
      InputId inputId0 = new InputId("Object#Element");
      node1.setInputId(inputId0);
      int int0 = 2125;
      Node node2 = new Node(57, (-905), 2125);
      Node node3 = null;
      try {
        node3 = new Node(38, node1, node1, node0, node2, 4921, 90);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3281), nodeArray0, (-3281), 128);
      Node node1 = new Node(32, node0, node0, node0, node0, (-3266), 1);
      InputId inputId0 = new InputId("@GzEnX");
      // Undeclared exception!
      try { 
        node0.getAncestor((-851));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3848);
      Node node1 = new Node(3848, node0, node0, 0, (-345));
      node1.cloneNode();
      node1.cloneNode();
      node1.getDirectives();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      Node node0 = Node.newNumber(3848.0);
      node0.getJSDocInfo();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setChangeTime((-283));
      node0.getBooleanProp(2580);
      node0.isUnscopedQualifiedName();
      node0.setIsSyntheticBlock(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Node node1 = new Node(122, 15, 29);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.detachChildren();
      node1.isObjectLit();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isFalse();
      node1.mayMutateGlobalStateOrThrow();
      node1.isVoid();
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node1.hasMoreThanOneChild();
      node0.removeChildren();
      node0.isOptionalArg();
      Node node2 = Node.newString(4095, "5X}<c'", 38, 51);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      jSTypeRegistry0.setLastGeneration(false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node3.putBooleanProp(57, false);
      node3.getChangeTime();
      Node node4 = new Node(43);
      Node node5 = new Node(54, node0, node2, node4);
      node5.getLength();
      // Undeclared exception!
      try { 
        node5.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.getProp(1);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.isIn();
      node1.isEquivalentTo(node0);
      node0.checkTreeEquals(node1);
      node0.getIndexOfChild(node1);
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12, 32);
      Node node1 = Node.newString(50, "%s (%s) must not be greater than size (%s)");
      Node node2 = new Node(1, node0, node0, node1, node1, 43, 39);
      InputId inputId0 = new InputId("U^'\"?$,M#z D");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      node1.isThrow();
      node2.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isParamList();
      Node node1 = Node.newString("");
      node1.getAncestors();
      Node node2 = node1.copyInformationFrom(node0);
      node0.setSourceEncodedPositionForTree(0);
      Node node3 = Node.newString(0, "");
      node0.isNE();
      node3.isOnlyModifiesThisCall();
      node0.getStaticSourceFile();
      node3.children();
      node0.toStringTree();
      node0.setLineno(115);
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12, 32);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node1 = Node.newString(4095, ")vNNp|N", 2, 4095);
      node_AncestorIterable0.iterator();
      node1.isVoid();
      node0.cloneTree();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags3.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node0.isDo();
      Node node1 = Node.newString(77, "*N*a?&Ms^", 30, 12);
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Iterator<JSType> iterator0 = (Iterator<JSType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isVoid();
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      ImmutableList.copyOf((Iterable<? extends Integer>) serviceLoader0);
      node0.toStringTree();
      node0.getChangeTime();
      node0.type = 0;
      node0.hasMoreThanOneChild();
      node0.isOnlyModifiesArgumentsCall();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage1("Object#Element", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property Object#Element
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags5.valueOf();
      Node node0 = Node.newString(0, "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("", node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      int int0 = 114;
      Node node0 = new Node(114, 1667, 114);
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      Node node0 = Node.newString("5X}<c'");
      Node node1 = Node.newString("5X}<c'");
      node0.addChildToBack(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.removeChildren();
      node2.mayMutateArguments();
      // Undeclared exception!
      try { 
        node2.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      int int0 = 0;
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      Node node0 = null;
      try {
        node0 = new Node((-845), (Node) null, (Node) null, (Node) null, 53, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      Node node0 = null;
      try {
        node0 = new Node(1148, (Node[]) null, 1148, 680);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 12, 32);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node1 = Node.newString(4095, ")vNNp|N", 2, 4095);
      node_AncestorIterable0.iterator();
      node0.isNull();
      Node node2 = node0.cloneTree();
      Node node3 = new Node(0, node1, node2, node1, 40, 587);
      node2.isEquivalentToTyped(node3);
      node2.copyInformationFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      int int0 = 0;
      int int1 = (-2340);
      Node[] nodeArray0 = new Node[6];
      Node node0 = Node.newString(0, "|");
      Node node1 = new Node(0, node0, node0, node0, node0, 4, 49);
      nodeArray0[0] = node1;
      Node node2 = new Node(1196, node1, node1);
      nodeArray0[1] = node2;
      Node node3 = Node.newString(57, "|");
      nodeArray0[2] = node3;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node4 = Node.newNumber(84.288);
      JSType jSType0 = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("|", node4, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      Node node0 = Node.newString(": ");
      node0.setWasEmptyNode(false);
      Node node1 = Node.newString(48, "String node not created with Node.newString", (-352), 1191);
      node1.isEquivalentToShallow(node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.setOptionalArg(false);
      node0.isWith();
      node2.isIf();
      // Undeclared exception!
      try { 
        node1.addChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      int int0 = 101;
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      Node node0 = null;
      try {
        node0 = new Node(101, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      int int0 = (-3281);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-3281), nodeArray0, (-3281), 128);
      Node node1 = new Node((-3266), node0, 1661, 489);
      int int1 = 153;
      InputId inputId0 = new InputId("@GzEnX");
      inputId0.toString();
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Object object0 = new Object();
      node0.putProp(9, object0);
      Node node1 = new Node(2860, node0, node0, node0, node0);
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      Node node0 = new Node(20);
      node0.mayMutateGlobalStateOrThrow();
      node0.isSetterDef();
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(" is not a number node", " is not a number node", 2854, 2854);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.setLastGeneration(false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getChangeTime();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("", 0, 0);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(49);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 49
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(0, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      Node node0 = Node.newNumber((-2393.5803207598888), 154, (-2610));
      Node node1 = new Node(154, node0, node0, (-2610), 48);
      Node node2 = new Node(0, node1, node1);
      node2.getStaticSourceFile();
      Node node3 = new Node(154, node2, 0, 1993);
      Node node4 = null;
      try {
        node4 = new Node(154, node3, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags3.clearSideEffectFlags();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      Node node0 = Node.newString("\u0001\u0000\u00A0\u0000\u0000\u0000\u0000\u0000\u0000\t\n\u000B\f\r\u0000\u0000\u2028\u2029\u0000\u0000\u0000\u0000\u0000\u202F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u3000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0085\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u0000\u0000\u0000\u0000\u0000\u205F\u1680\u0000\u0000\u180E\u0000\u0000\u0000");
      Node node1 = new Node(0, node0, node0, node0, (-1808), 15);
      node1.setLineno(55);
      node0.toString();
      node1.isTypeOf();
      node0.isGetterDef();
      node0.isLabelName();
      node1.isNoSideEffectsCall();
      node0.isFromExterns();
      node0.setLength(12);
      node1.detachChildren();
      node0.hasChild(node1);
      Node.newNumber(239.099, (-2369), (-890));
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      Node node0 = new Node(304, 304, 304);
      Node node1 = new Node(304, node0, node0, node0);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      int int0 = 0;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node((-2811), (Node) null, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      String string0 = "thisType";
      int int0 = 1513;
      Node node0 = Node.newString("thisType", 1513, 11);
      node0.mayMutateArguments();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.setDisposedParameter("$Mlw9mn<:1KDjCXGgxN");
      node0.setJSDocInfo(jSDocInfo0);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING thisType 1513 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      int int0 = (-2397);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(965);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("source_file", node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      Node node0 = new Node(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "qOaKu&";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[3] = (Object) mockPrintWriter1;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) pipedInputStream0;
      objectArray0[6] = (Object) "qOaKu&";
      node0.getProp(0);
      objectArray0[7] = null;
      objectArray0[8] = (Object) node0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "qOaKu&", objectArray0);
      // Undeclared exception!
      try { 
        node0.appendStringTree(printWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 390, 122);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = node0.cloneNode();
      node1.checkTreeEquals(node0);
      Node node2 = new Node(2, nodeArray0, (-1003), 57);
      Node node3 = node0.srcrefTree(node2);
      node3.siblings();
      node0.copyInformationFrom(node3);
      Node node4 = Node.newNumber(2016.7202026);
      node4.removeProp(0);
      node0.setDirectives((Set<String>) null);
      node0.isNE();
      // Undeclared exception!
      try { 
        Node.newString((-1235), (String) null, (-841), 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      Node node0 = Node.newString("!*bYs", (-744), 0);
      node0.putIntProp(0, (-3658));
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
  }
}
