/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 10:07:58 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.UnionType;
import java.io.StringWriter;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newString(2137, "");
      node0.isUnscopedQualifiedName();
      node0.getStaticSourceFile();
      node0.getChildCount();
      node0.isQualifiedName();
      node0.detachChildren();
      node0.getLineno();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newNumber(2053.06149205);
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType.cast((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      enumType1.getElementsType();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.clearTemplateTypeNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      String string0 = node0.getQualifiedName();
      node0.isOnlyModifiesArgumentsCall();
      node0.getInputId();
      node0.isOnlyModifiesThisCall();
      node0.setSourceEncodedPosition(1693);
      int int0 = (-3302);
      Node.newString((String) null, 51, 2485);
      int int1 = 3648;
      int int2 = 0;
      // Undeclared exception!
      try { 
        Node.newString(int0, string0, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString("", 3382, 2414);
      Node node1 = new Node(3382, node0, node0, 679, 51);
      node1.addSuppression("");
      node1.toStringTree();
      node1.isOnlyModifiesThisCall();
      int int0 = 48;
      node0.setChangeTime(int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = (-3851);
      Node node0 = new Node((-3851), (-3851), 0);
      Node node1 = new Node(3844, node0, 40, 3903);
      Node node2 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ObjectType objectType0 = null;
      FunctionType.getTopDefiningInterface((ObjectType) null, "Object#Key");
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) objectType0);
      ObjectType.cast(objectType0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) templateType0;
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newNumber(1170.6074, (-4696), (-4696));
      Node node1 = new Node((-4696), node0, node0, 46, 48);
      boolean boolean0 = node1.isEquivalentToTyped(node0);
      node1.isVarArgs();
      node1.addChildrenAfter(node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      // Undeclared exception!
      try { 
        node0.setJSDocInfo(jSDocInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node0 = jSDocInfo0.getAssociatedNode();
      Node node1 = new Node(0, (Node) null, (Node) null, (Node) null, (Node) null, 42, 16);
      int int0 = 32;
      int int1 = 915;
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = (-554);
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-1700));
      nodeArray0[0] = node0;
      Node node1 = new Node((-1700), nodeArray0);
      node0.isVarArgs();
      Node node2 = new Node((-3334), node0, 57, 0);
      int int1 = (-355);
      int int2 = (-715);
      // Undeclared exception!
      try { 
        Node.newNumber((double) node0.EMPTY_BLOCK, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newString(2987, "com.google.javascript.rhino.Node");
      node0.isUnscopedQualifiedName();
      node0.setSourceEncodedPositionForTree(0);
      node0.putBooleanProp(0, false);
      node0.setQuotedString();
      node0.putBooleanProp(0, true);
      Node node1 = Node.newString("com.google.javascript.rhino.Node");
      Node node2 = new Node(1927, node1);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.putProp(4095, node2);
      Node node3 = node0.useSourceInfoFromForTree((Node) null);
      node3.getProp(node0.DIRECTIVES);
      Node node4 = node3.getLastSibling();
      node3.getSideEffectFlags();
      node3.getSourceFileName();
      node0.isCatch();
      node1.isName();
      node1.isTypeOf();
      // Undeclared exception!
      try { 
        node4.removeFirstChild();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.clearSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString((-1204), "StringNode: str is null", (-1815), 2577);
      Node node2 = new Node(0, node0, node0, node1, 0, 54);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      node3.isQualifiedName();
      node0.setChangeTime(42);
      node2.isEquivalentTo(node0, true, false, true);
      node0.isDebugger();
      node0.getSourceOffset();
      node2.setCharno(2159);
      node2.setIsSyntheticBlock(false);
      node1.isRegExp();
      node2.isDec();
      node2.isInc();
      node2.getProp(2119);
      node2.hasMoreThanOneChild();
      node3.isIf();
      node0.isGetElem();
      node0.setString("");
      node1.getLineno();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString(0, (String) null);
      int int0 = 2144;
      Node node1 = null;
      try {
        node1 = new Node(node0.MAX_COLUMN_NUMBER, node0, node0, node0, node0, int0, node0.IS_NAMESPACE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newString("Node tree inequality:\nTree1:\n", 27, 27);
      Node node1 = new Node(27, node0, node0, node0);
      node1.detachChildren();
      node0.getChildCount();
      node0.siblings();
      Node node2 = node1.clonePropsFrom(node0);
      Node.extractCharno(2851);
      node1.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesThis();
      Node node3 = new Node(0, node1, node1, node1, 26, 2);
      node3.addChildrenToFront(node1);
      node3.children();
      node1.addChildBefore(node2, node3);
      int int0 = 2048;
      // Undeclared exception!
      try { 
        node3.setSourceEncodedPosition(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node((-2361));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[6];
      JSType.toMaybeFunctionType((JSType) null);
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) functionType0, jSTypeArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        templatizedType0.getPropertyType(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newNumber((-931.646742039904));
      Node node1 = new Node(0, node0, node0, node0, 1, 30);
      Node node2 = new Node(2366, node1);
      String string0 = "var_args_name";
      boolean boolean0 = true;
      node1.isEquivalentTo(node2, true, true, true);
      node1.setString("var_args_name");
      Node node3 = Node.newString(string0, node1.DIRECTIVES, node1.EMPTY_BLOCK);
      node3.getSideEffectFlags();
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node3);
      // Undeclared exception!
      try { 
        node_NodeMismatch0.equals(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node(0, (Node) null, (Node) null, (Node) null);
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(2, node0, node0, node0, node0);
      node1.getSourceFileName();
      Node node2 = node0.removeFirstChild();
      Node node3 = Node.newString("", 3562, 38);
      Node node4 = new Node(701, node0, node1, node1, node0, 3289, 0);
      boolean boolean0 = false;
      node3.setVarArgs(boolean0);
      node2.copyInformationFromForTree(node1);
      node4.detachFromParent();
      node4.replaceChildAfter(node3, node3);
      // Undeclared exception!
      try { 
        node4.isEquivalentToShallow(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 34;
      Node node0 = new Node(34, (Node[]) null, 34, 34);
      int int1 = 0;
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = (-3334);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-3334));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setAllFlags();
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node((-3334), (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(103);
      node1.getExistingIntProp(0);
      node0.removeChildAfter(node1);
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("");
      String string1 = "";
      Node node1 = Node.newString("");
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", 2595, (-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, 0, 1);
      node1.getQualifiedName();
      node1.getIntProp(4095);
      node1.getDirectives();
      node1.addChildBefore(node0, node0);
      node1.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString("");
      int int0 = 24;
      String string0 = "y1%qKprXgFmfGdUkDd";
      node0.setOptionalArg(false);
      Node node1 = Node.newString(0, "", 2, 899);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(2472);
      StringWriter stringWriter1 = stringWriter0.append('O');
      node1.appendStringTree(stringWriter1);
      Node node2 = Node.newString(int0, string0);
      node2.getInputId();
      node0.removeChild(node2);
      node0.isLocalResultCall();
      node2.isRegExp();
      int int1 = 0;
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = new Node((-663));
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newNumber(186.738189257093, 47, 47);
      node0.replaceChild((Node) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node(21, (Node[]) null);
      node0.getSourceFileName();
      Node node1 = null;
      try {
        node1 = new Node(node0.SIDE_EFFECT_FLAGS, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node(114, node0, node0, node0);
      node1.getChangeTime();
      node1.isGetProp();
      node1.isRegExp();
      Node.newString("V;a,", 2731, 631);
      node0.setVarArgs(false);
      node1.mayMutateGlobalStateOrThrow();
      node0.isOr();
      node0.getQualifiedName();
      Node node2 = node0.srcref(node1);
      node2.hasOneChild();
      node2.hasOneChild();
      Node node3 = node0.detachFromParent();
      Node node4 = node0.clonePropsFrom(node2);
      node1.removeChild(node0);
      node3.isQuotedString();
      node1.setSideEffectFlags(node4.STATIC_SOURCE_FILE);
      node3.getAncestors();
      int int0 = 2889;
      // Undeclared exception!
      try { 
        node3.putProp(int0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newString("@sYY@+lDjWMFj<%");
      Node node1 = new Node((-1136), node0, node0, node0, node0, (-1323), 127);
      Node node2 = new Node(120, node1, node1, 4095, 49);
      node1.removeChildAfter(node2);
      boolean boolean0 = true;
      node2.setWasEmptyNode(boolean0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
      String string0 = "";
      // Undeclared exception!
      try { 
        node_FileLevelJsDocBuilder0.append(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-420));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags5.setMutatesArguments();
      int int0 = (-5248);
      int int1 = 122;
      Node[] nodeArray0 = new Node[9];
      Node node0 = new Node((-420), nodeArray0);
      nodeArray0[0] = node0;
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = node0.getAncestor(0);
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = Node.newString(">f`Zj4sf2\"39Bw*K", 39, (-921));
      node2.isOptionalArg();
      node1.isOnlyModifiesThisCall();
      node0.isUnscopedQualifiedName();
      Node node3 = new Node(1172, node0);
      node3.srcref(node0);
      node3.setVarArgs(true);
      node1.getType();
      node1.toStringTree();
      node3.useSourceInfoIfMissingFromForTree(node0);
      node0.removeProp(29);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newString(27, "\n\nSubtree1: ");
      node0.isEquivalentTo((Node) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node0.SIDE_EFFECTS_FLAGS_MASK);
      node0.isQualifiedName();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setReturnsTainted();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newString(0, "free_call", 0, (-917));
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      int int0 = 706;
      int int1 = (-981);
      int int2 = 89;
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      Node node1 = new Node(44, (Node) null, node0);
      nodeArray0[7] = node1;
      nodeArray0[1].isOptionalArg();
      nodeArray0[8] = node0;
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString("3SI#_8AHbAfB(~*E");
      Node.newNumber((double) 12, 0, 4);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.isCall();
      node0.getJSDocInfo();
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      int int0 = (-3030);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[4];
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      jSTypeArray0[0] = (JSType) templateType1;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      jSTypeArray0[1] = jSType0;
      Node node0 = null;
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) templateType1);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType(templateType0.NOT_A_CLASS, node0, functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = node0.getAncestor(0);
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = Node.newString(">f`Zj4sf2\"39Bw*K", 39, (-921));
      node2.isOptionalArg();
      node1.isOnlyModifiesThisCall();
      node0.isUnscopedQualifiedName();
      Node node3 = new Node(1172, node0);
      Node node4 = node3.srcref(node0);
      node4.getAncestors();
      node3.setVarArgs(true);
      node1.getType();
      node1.toStringTree();
      Node node5 = node3.useSourceInfoIfMissingFromForTree(node0);
      node0.removeProp(29);
      node5.getAncestor(47);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newString(512, "com.google.javascript.rhino.Node$AncestorIterable");
      node0.isNE();
      node0.setSourceEncodedPosition(512);
      Node node1 = new Node(4095, node0);
      node1.getJSDocInfo();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.getInputId();
      node2.isGetElem();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.getAncestors();
      node2.isWhile();
      node0.isIf();
      node2.setChangeTime(16);
      node1.isAdd();
      node2.isObjectLit();
      node0.getInputId();
      node2.setInputId((InputId) null);
      node2.getExistingIntProp(1652);
      node0.isEquivalentToTyped(node0);
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newNumber(1170.6074, (-4696), (-4696));
      Node node1 = new Node((-4696), node0, node0, 46, 48);
      boolean boolean0 = node0.isDelProp();
      node1.isParamList();
      node1.addChildrenAfter(node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      // Undeclared exception!
      try { 
        node0.setJSDocInfo(jSDocInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString(2987, "com.google.javascript.rhino.Node");
      node0.isUnscopedQualifiedName();
      node0.setSourceEncodedPositionForTree(0);
      node0.putBooleanProp(0, false);
      node0.setQuotedString();
      node0.putBooleanProp(0, true);
      Node node1 = Node.newString("com.google.javascript.rhino.Node");
      Node node2 = new Node(1927, node1);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.putProp(4095, node2);
      Object object0 = new Object();
      node_NodeMismatch0.equals(node2);
      node1.wasEmptyNode();
      node0.getSourceFileName();
      node1.getSourceFileName();
      node1.siblings();
      node2.setVarArgs(false);
      node0.getDouble();
      int int0 = (-2494);
      node0.setLineno(int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newString(2987, "com.google.javascript.rhino.Node");
      node0.isUnscopedQualifiedName();
      node0.setSourceEncodedPositionForTree(0);
      node0.putBooleanProp(0, false);
      Node node1 = Node.newNumber(0.0, 29, 2222);
      node1.getBooleanProp(12);
      node1.replaceChild(node0, (Node) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newNumber(2053.06149205);
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.toStringTree();
      node0.isOnlyModifiesThisCall();
      node0.setChangeTime(48);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newString("", 3382, 2414);
      Node node1 = new Node(3382, node0, node0, 679, 51);
      node1.addSuppression("");
      node0.isName();
      node1.isCatch();
      Node.newString("j|+h0*!N");
      Node node2 = new Node(2015);
      node2.useSourceInfoFromForTree(node1);
      Node node3 = Node.newNumber((-2214.114861784466));
      node3.setIsSyntheticBlock(false);
      node2.isSwitch();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node4.getCharno();
      node0.isQualifiedName();
      node2.isContinue();
      node1.isSwitch();
      node4.getDouble();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = Node.newString(42, "Object#Element", 38, 57);
      Node node2 = node0.srcref(node1);
      node0.isFor();
      node0.isComma();
      node0.addChildrenToBack(node1);
      node0.toString();
      node1.getChildBefore(node2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setDouble(1783.3);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-1700));
      nodeArray0[0] = node0;
      Node node1 = new Node((-3334), node0, 57, 0);
      Node node2 = Node.newNumber((double) 39, (-355), (-715));
      Node.newString(1344, "");
      node1.useSourceInfoIfMissingFromForTree(node2);
      Node node3 = new Node((-554), node0, node0, node0, node1, 2346, 50);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = node0.getAncestor(0);
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = Node.newString(">f`Zj4sf2\"39Bw*K", 39, (-921));
      node2.isOptionalArg();
      node1.isOnlyModifiesThisCall();
      node0.isUnscopedQualifiedName();
      Node node3 = new Node(1172, node0);
      Node node4 = node3.srcref(node0);
      node4.addChildToFront(node1);
      boolean boolean0 = true;
      node3.setVarArgs(boolean0);
      node1.getType();
      node1.toStringTree();
      // Undeclared exception!
      try { 
        node3.useSourceInfoIfMissingFromForTree(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node(114, node0, node0, node0);
      node1.getChangeTime();
      node1.isGetProp();
      node1.isRegExp();
      Node node2 = Node.newString("V;a,", 2731, 631);
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
      node0.setVarArgs(false);
      node1.mayMutateGlobalStateOrThrow();
      node0.isOr();
      node0.getQualifiedName();
      Node node4 = node0.srcref(node1);
      node4.hasOneChild();
      node4.hasOneChild();
      Node node5 = node0.detachFromParent();
      Node node6 = node0.clonePropsFrom(node4);
      node6.addChildrenAfter(node1, node3);
      node1.removeChild(node0);
      node5.isQuotedString();
      node1.setSideEffectFlags(node6.STATIC_SOURCE_FILE);
      node5.getAncestors();
      int int0 = 2889;
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString(2987, "com.google.javascript.rhino.Node");
      node0.isUnscopedQualifiedName();
      node0.setSourceEncodedPositionForTree(0);
      node0.putBooleanProp(0, false);
      node0.setDouble((-1.0));
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      node0.putBooleanProp(51, true);
      Node node1 = Node.newString("Vu%:z\"[n[MC");
      Node node2 = new Node(96, node0);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node2);
      Node node3 = new Node(8, node2, node1, node2);
      node3.putProp(53, node_NodeMismatch0);
      Object object0 = new Object();
      boolean boolean0 = node_NodeMismatch0.equals("Vu%:z\"[n[MC");
      node3.wasEmptyNode();
      node3.getSourceFileName();
      Node node4 = new Node(36, node2, node0, node0);
      node4.getSourceFileName();
      node0.siblings();
      node0.setVarArgs(boolean0);
      node1.getDouble();
      int int0 = 65535;
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = node0.getAncestor(0);
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = Node.newString(">f`Zj4sf2\"39Bw*K", 39, (-921));
      node2.isOptionalArg();
      node1.isOnlyModifiesThisCall();
      node0.isUnscopedQualifiedName();
      Node node3 = new Node(1172, node0);
      node3.srcref(node0);
      node3.setVarArgs(true);
      node1.getType();
      node1.toStringTree();
      node3.useSourceInfoIfMissingFromForTree(node0);
      node2.setChangeTime((-20));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newString(0, "free_call", 0, (-917));
      node0.putIntProp((-917), 0);
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      int int0 = 155;
      Node node0 = null;
      Node node1 = new Node(155, (Node) null, 496, 440);
      Node node2 = new Node(int0, node1, node1);
      // Undeclared exception!
      try { 
        node2.isParamList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", 2595, (-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, 0, 1);
      node1.getQualifiedName();
      node1.getIntProp(4095);
      node1.getDirectives();
      node1.getChangeTime();
      node0.children();
      node0.isHook();
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node(114, node0, node0, node0);
      node1.isQuotedString();
      node1.getChangeTime();
      node1.isGetProp();
      Node node2 = Node.newString("|XY&Tja}D_Kz%hRO[^V");
      node0.setDouble((-3786.807));
      node2.toStringTree();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newNumber(2053.06149205);
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.getAncestors();
      node0.isWhile();
      Node node1 = Node.newNumber(2331.510097191862);
      node1.isIf();
      node1.setChangeTime((-1929));
      node0.isAdd();
      node0.isObjectLit();
      String string0 = "/0qx~=3dWJ;;eAow{@";
      Node node2 = Node.newString(40, "/0qx~=3dWJ;;eAow{@", 16, 48);
      node2.getInputId();
      node2.setInputId((InputId) null);
      node1.getExistingIntProp(746);
      int int0 = (-540);
      Node node3 = Node.newString(int0, string0);
      node2.isEquivalentToTyped(node3);
      // Undeclared exception!
      try { 
        node1.isVarArgs();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 746
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.areAllFlagsSet();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      node_SideEffectFlags2.setMutatesThis();
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      Node node0 = null;
      JSType.toMaybeFunctionType(jSType0);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("h.dbd.S", (Node) null, templateType1);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.toMaybeEnumElementType();
      enumElementType0.getConstructor();
      JSType[] jSTypeArray0 = new JSType[9];
      jSTypeArray0[0] = (JSType) enumType0;
      jSTypeRegistry1.createUnionType(jSTypeArray0);
      jSTypeRegistry0.createParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.UnionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(44, 44, (-512));
      node0.setLength(120);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString("3SI#_8AHbAfB(~*E");
      Node.extractCharno((-2748));
      node0.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesThis();
      Node node1 = new Node(48, node0, node0, node0, 43, 2);
      node1.addChildrenToFront(node0);
      node1.children();
      node0.addChildBefore(node1, node1);
      // Undeclared exception!
      try { 
        node1.setSourceEncodedPosition(node0.FLAG_GLOBAL_STATE_UNMODIFIED);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString("Node tree inequality:\nTree1:\n", 27, 27);
      Node node1 = new Node(27, node0, node0, node0);
      node1.detachChildren();
      node0.getChildCount();
      node0.siblings();
      Node node2 = node1.clonePropsFrom(node0);
      Node node3 = Node.newNumber((double) 40, 2938, (-1508));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
      node2.isCall();
      node1.getJSDocInfo();
      node3.isEmpty();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString("3SI#_8AHbAfB(~*E");
      node0.removeFirstChild();
      Node node1 = Node.newNumber((double) 12, 0, 4);
      node1.getDouble();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.isCall();
      node0.getJSDocInfo();
      node0.isComma();
      Node node2 = Node.newNumber((double) 50, (-1), 52);
      node2.mayMutateGlobalStateOrThrow();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      node0.putBooleanProp(51, true);
      Node node1 = Node.newString("Vu%:z\"[n[MC");
      Node node2 = new Node(96, node0);
      Node node3 = new Node(8, node2, node1, node2);
      node3.setDouble((-1660.8));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      node0.putProp((-2631), templateType0);
      Object object0 = new Object();
      Node node1 = null;
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl((Node) null);
      InputId inputId0 = node0.getInputId();
      // Undeclared exception!
      try { 
        node_NodeMismatch0.equals(inputId0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", 2595, (-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, 0, 1);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      node0.children();
      node0.isHook();
      node0.hasChildren();
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = Node.newString(42, "Object#Element", 38, 57);
      Node.newNumber((double) 38);
      node0.srcref(node1);
      node0.isFor();
      node1.isFor();
      node0.setSourceFileForTesting(">SCRhWE");
      Node node2 = new Node(8, node0, 37, 819);
      node2.isComma();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = Node.newString(42, "Object#Element", 38, 57);
      Node node2 = Node.newString(24, (String) null, (-3733), 46);
      node0.srcref(node2);
      node1.isFor();
      node2.isComma();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", 2595, (-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, 0, 1);
      node1.getQualifiedName();
      node1.setLineno(16);
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      node1.getDirectives();
      node1.getChangeTime();
      node0.children();
      node0.isHook();
      node0.hasChildren();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString("3SI#_8AHbAfB(~*E");
      Node node1 = Node.newNumber((double) 12, 0, 4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType.toMaybeTemplateType((JSType) null);
      JSType.toMaybeTemplatizedType((JSType) null);
      JSType.toMaybeFunctionType((JSType) null);
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      JSType[] jSTypeArray0 = new JSType[0];
      Node.newString("", 36, 44);
      node0.getLength();
      Node.mergeLineCharNo(147, 4949);
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[2] = node0;
      Node node1 = new Node(57, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node((-1905), node0, node0, node0);
      node1.getChangeTime();
      node1.isGetProp();
      node1.isRegExp();
      Node node2 = Node.newString("V;a,", 2731, 631);
      node0.setVarArgs(false);
      node1.mayMutateGlobalStateOrThrow();
      node0.isOr();
      node0.getQualifiedName();
      Node node3 = node0.srcref(node1);
      node3.hasOneChild();
      Node node4 = node0.detachFromParent();
      node1.setLength(52);
      node1.getChangeTime();
      Node node5 = node0.clonePropsFrom(node3);
      node1.removeChild(node0);
      node1.toStringTree();
      node4.useSourceInfoIfMissingFromForTree(node5);
      node2.removeProp(node4.IS_DISPATCHER);
      node0.checkTreeEquals(node3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(54);
      Node node2 = new Node(13, node0, node0, node1);
      Node node3 = new Node(12, node1, node1, node1, node2);
      node0.getSourceFileName();
      // Undeclared exception!
      try { 
        node1.removeFirstChild();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newString("", 2414, 701);
      Node node1 = new Node(51, node0, node0, 3270, (-1905));
      node0.addSuppression("");
      node0.isName();
      node0.isCatch();
      Node node2 = Node.newString("2\"Nkf,mJU");
      Node node3 = new Node(631);
      Node node4 = Node.newString(122, "j|+h0*!N", 34, 3529);
      node4.useSourceInfoFromForTree(node3);
      Node.newNumber((double) 40);
      node2.setIsSyntheticBlock(false);
      node2.isSwitch();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node5.getCharno();
      node1.isContinue();
      node5.isSwitch();
      node5.getDouble();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.removeChildren();
      node0.setDouble(1783.3);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "i3";
      Node node0 = Node.newString("i3", (-457), (-457));
      node0.setChangeTime((-457));
      node0.isQualifiedName();
      node0.getStaticSourceFile();
      node0.isDelProp();
      boolean boolean0 = node0.isString();
      node0.isObjectLit();
      node0.isTrue();
      node0.cloneTree();
      Node node1 = new Node(39);
      node0.addChildToFront(node1);
      Node node2 = new Node(3882, node1, node1, node1, 51, 2);
      node2.getStaticSourceFile();
      // Undeclared exception!
      try { 
        node1.setIsSyntheticBlock(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node(47, (-2284), 47);
      node0.isWhile();
      node0.copyInformationFrom((Node) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString("i3", (-457), (-457));
      node0.setChangeTime((-457));
      node0.isQualifiedName();
      node0.getStaticSourceFile();
      node0.isDelProp();
      node0.isString();
      node0.isObjectLit();
      node0.isTrue();
      node0.cloneTree();
      int int0 = 3882;
      Node node1 = new Node(39);
      node1.toString(true, false, false);
      node0.getProp(node1.SLASH_V);
      Node node2 = new Node(int0, node1, node1, node1, node1.STATIC_SOURCE_FILE, node1.FLAG_THIS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newNumber(1170.6074, (-4696), (-4696));
      Node node1 = new Node((-4696), node0, node0, 46, 48);
      boolean boolean0 = node0.isDelProp();
      node1.isParamList();
      node1.children();
      node0.removeProp(51);
      node0.putBooleanProp(97, false);
      node1.addChildrenAfter(node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      node0.setJSDocInfo(jSDocInfo0);
      // Undeclared exception!
      try { 
        node1.checkTreeTypeAwareEqualsImpl(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString("3SI#_8AHbAfB(~*E");
      Node.extractCharno((-2748));
      node0.getSourcePosition();
      Node node1 = node0.cloneNode();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesThis();
      Object object0 = new Object();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals("3SI#_8AHbAfB(~*E");
      node0.wasEmptyNode();
      Node node2 = Node.newString("com.google.common.collect.ImmutableMapValues", 36, 15);
      node2.getSourceFileName();
      Node node3 = new Node(3281, node2, node2, node2);
      node0.getSourceFileName();
      node3.siblings();
      node3.setVarArgs(false);
      node3.getDouble();
      int int0 = (-2475);
      node3.setLineno(int0);
      node3.isNumber();
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString("", 2414, 701);
      Node node1 = new Node(51, node0, node0, 3270, (-1905));
      node0.addSuppression("");
      node0.isName();
      node0.isCatch();
      Node node2 = new Node(4095, node1, node0, node1, 31, 4);
      node2.getQualifiedName();
      node2.setLineno(node0.DIRECTIVES);
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      node2.getDirectives();
      node1.getChangeTime();
      // Undeclared exception!
      try { 
        node2.children();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      node0.putBooleanProp(51, true);
      Node node1 = Node.newString("Vu%:z\"[n[MC");
      Node node2 = new Node(96, node0);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node2);
      Node node3 = new Node(8, node2, node1, node2);
      node3.putProp(53, node_NodeMismatch0);
      Object object0 = new Object();
      int int0 = (-1375);
      int int1 = 43;
      Node node4 = new Node(3270, 48, (-1574));
      node0.addChildBefore(node1, node4);
      Node node5 = new Node(node2.ORIGINALNAME_PROP, node2, node1, node2, int0, int1);
      node2.addChildrenToFront(node3);
      Node node6 = Node.newNumber((double) node5.COLUMN_BITS, node0.QUOTED_PROP, node2.SIDE_EFFECT_FLAGS);
      node6.children();
      node5.addChildBefore(node6, node0);
      int int2 = (-2968);
      // Undeclared exception!
      try { 
        node2.setSourceEncodedPosition(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newString("Node tree inequality:\nTree1:\n", 27, 27);
      Node node1 = new Node(27, node0, node0, node0);
      node1.detachChildren();
      node0.getChildCount();
      node0.siblings();
      Node node2 = node1.clonePropsFrom(node0);
      Node node3 = Node.newNumber((double) 40, 2938, (-1508));
      node2.getSourceFileName();
      Node node4 = new Node((-932), node3, node3, node1);
      node1.getSourceFileName();
      node3.siblings();
      node0.setVarArgs(true);
      node3.getDouble();
      node4.setLineno(34);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString("3SI#_8AHbAfB(~*E");
      Node.extractCharno((-2748));
      node0.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesThis();
      node0.addChildrenToFront(node0);
      node0.children();
      node0.addChildBefore(node0, node0);
      node0.setSourceEncodedPosition(node0.FLAG_GLOBAL_STATE_UNMODIFIED);
      node0.isTypeOf();
      // Undeclared exception!
      try { 
        node0.getDirectives();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = Node.newString("");
      Node node1 = Node.newNumber((double) 12);
      node0.addChildToBack(node1);
      Node node2 = new Node((-668), node0, node0, node1, node0, 51, 112);
      node0.copyInformationFrom(node2);
      node0.isNot();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString(512, "com.google.javascript.rhino.Node$AncestorIterable");
      node0.isNE();
      node0.setSourceEncodedPosition(512);
      Node node1 = new Node(4095, node0);
      node1.getJSDocInfo();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.getInputId();
      node2.isGetElem();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.getAncestors();
      node2.isWhile();
      node0.isIf();
      node2.setChangeTime(16);
      node1.isAdd();
      node2.isObjectLit();
      node2.children();
      node1.isHook();
      node1.hasChildren();
      node2.isVoid();
      Node.newString("com.google.javascript.rhino.Node$AncestorIterable");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      node0.putProp((-2631), templateType0);
      Object object0 = new Object();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Node node1 = Node.newString(31, "Named type with empty name component", 304, 54);
      node1.putIntProp((-1905), (-712));
      node1.getDouble();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 1565;
      Node[] nodeArray0 = new Node[7];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("YgL");
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      EnumType enumType0 = jSTypeRegistry0.createEnumType(">/V}/jIMhpCdXvU", node0, templateType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getRootNode();
      nodeArray0[0] = null;
      Node node1 = new Node(43, node0, node0);
      nodeArray0[1] = node1;
      Node node2 = Node.newString("Named type with empty name component", 4095, 55);
      nodeArray0[2] = node2;
      JSType[] jSTypeArray0 = new JSType[9];
      jSTypeArray0[0] = (JSType) templateType0;
      jSTypeArray0[1] = (JSType) templateType0;
      jSTypeArray0[2] = (JSType) enumElementType0;
      jSTypeArray0[3] = (JSType) enumType0;
      jSTypeArray0[4] = (JSType) enumType0;
      jSTypeArray0[5] = (JSType) enumType0;
      jSTypeArray0[6] = (JSType) templateType0;
      jSTypeArray0[7] = (JSType) enumType0;
      jSTypeArray0[8] = (JSType) enumElementType0;
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[3] = node3;
      enumElementType0.getRootNode();
      nodeArray0[4] = null;
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      nodeArray0[5] = node4;
      int int1 = 2356;
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = Node.newString(42, "Object#Element", 1, 57);
      Node node2 = node0.srcref(node1);
      node0.isFor();
      node2.isFromExterns();
      node0.addChildrenToBack(node1);
      node0.toString();
      node1.getChildBefore(node2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setChangeTime((-1051));
      node0.isQualifiedName();
      node0.getStaticSourceFile();
      Node node1 = new Node(152, node0, node0, node0, node0);
      node1.isDelProp();
      node1.isObjectLit();
      node1.isTrue();
      node1.cloneTree();
      Node node2 = new Node((-2337));
      node0.toString(true, false, false);
      Node node3 = new Node(2, node1, node0, node1, 34, 1912);
      node3.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = Node.newString(42, "Object#Element", 38, 57);
      Node node2 = node0.srcref(node1);
      node0.isFor();
      node0.isComma();
      node0.addChildrenToBack(node1);
      node0.toString();
      Node node3 = new Node(310, node1, node2);
      node3.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = node0.getAncestor(0);
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = Node.newString(">f`Zj4sf2\"39Bw*K", 39, (-921));
      node2.isOptionalArg();
      node1.isOnlyModifiesThisCall();
      node0.isUnscopedQualifiedName();
      Node node3 = new Node(1172, node0);
      Node node4 = node3.srcref(node0);
      node3.setVarArgs(true);
      node1.getType();
      node1.toStringTree();
      node3.useSourceInfoIfMissingFromForTree(node0);
      Node.newNumber(0.0, (-1588), 4095);
      node4.removeChildren();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      node0.putBooleanProp(51, true);
      Node node1 = Node.newNumber((-5572.351565451), 29, 4);
      node1.getDouble();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node0.isCall();
      node1.getJSDocInfo();
      Node.newNumber((double) 1, 962, 57);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString("3SI#_8AHbAfB(~*E");
      Node node1 = node0.removeFirstChild();
      String string0 = "Vu%:z\"[n[MC";
      Node node2 = Node.newString("Vu%:z\"[n[MC");
      Node node3 = new Node(1553, node2);
      node0.checkTreeTypeAwareEqualsImpl((Node) null);
      Node node4 = new Node(node1.COLUMN_MASK, node3, node0, node2);
      int int0 = 100;
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      boolean boolean0 = true;
      node0.getChildCount();
      node0.clonePropsFrom((Node) null);
      double double0 = 0.0;
      int int0 = 34;
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = node0.getAncestor(0);
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = Node.newString(">f`Zj4sf2\"39Bw*K", 39, (-921));
      node2.isOptionalArg();
      node1.isOnlyModifiesThisCall();
      node0.isUnscopedQualifiedName();
      Node node3 = new Node(1172, node0);
      Node node4 = node3.srcref(node0);
      node3.setVarArgs(true);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node3;
      Node node5 = Node.newString("", 1495, 37);
      nodeArray0[1] = node5;
      nodeArray0[2] = node1;
      nodeArray0[3] = node3;
      nodeArray0[4] = node1;
      nodeArray0[5] = node3;
      Node node6 = new Node((-1758), node4, node3, node3);
      nodeArray0[6] = node6;
      nodeArray0[7] = node0;
      Node node7 = new Node(360, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      node0.getType();
      node0.toStringTree();
      Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
      node1.removeProp(2753);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1208));
      Node node1 = new Node((-1208), node0, node0, (-747), 4095);
      node0.setSideEffectFlags(2006);
      node0.getDouble();
      node1.removeFirstChild();
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node((-250));
      Node node1 = Node.newString(41, "index");
      node1.children();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.setStruct();
      node1.setJSDocInfo(jSDocInfo0);
      Node node2 = Node.newString("index", 2485, 4);
      node2.mayMutateGlobalStateOrThrow();
      Node node3 = Node.newString(13, "index", 2090, (-29));
      Node node4 = Node.newString(32, "7");
      Node node5 = Node.newNumber(0.0);
      node5.setSideEffectFlags(47);
      Node node6 = node5.removeChildAfter(node4);
      node6.checkTreeEqualsImpl(node4);
      node0.replaceChild(node2, node4);
      node2.isArrayLit();
      node2.getJSType();
      node3.isVoid();
      node2.getChangeTime();
      node4.getJsDocBuilderForNode();
      int int0 = 12;
      Node node7 = new Node(int0);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newString("", 2414, 701);
      Node node1 = new Node(51, node0, node0, 3247, (-1905));
      node0.addSuppression("");
      node0.isName();
      node1.isDefaultCase();
      Node node2 = new Node(4095, node1, node0, node1, 31, 4);
      node2.getQualifiedName();
      node2.setLineno(node0.DIRECTIVES);
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      node2.getDirectives();
      // Undeclared exception!
      try { 
        node1.getChangeTime();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node(114, node0, node0, node0);
      node1.isQuotedString();
      node1.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(47);
      node1.setSideEffectFlags(node_SideEffectFlags2);
      node1.isFor();
      // Undeclared exception!
      try { 
        node0.isObjectLit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got DO
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2987);
      node0.setChangeTime((-23));
      node0.isQualifiedName();
      node0.getStaticSourceFile();
      Node node1 = new Node(3012, node0, node0, node0, node0);
      node1.isDelProp();
      Node node2 = new Node(57, node1, 52, 5914);
      node2.isObjectLit();
      node1.isTrue();
      Node node3 = node0.cloneTree();
      Node node4 = new Node((-142));
      node3.toString(false, true, false);
      Node node5 = new Node(30, node2, node2, node1, 50, 51);
      node2.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newNumber(2053.06149205);
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.getAncestors();
      node0.toStringTree();
      Node node1 = node0.useSourceInfoIfMissingFromForTree((Node) null);
      node0.removeProp(node1.SIDE_EFFECT_FLAGS);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node((-4696));
      Node node1 = new Node((-4696), node0, node0, 46, 48);
      boolean boolean0 = node0.isDelProp();
      node1.isParamList();
      node1.addChildrenAfter(node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      // Undeclared exception!
      try { 
        node0.setJSDocInfo(jSDocInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", 2595, (-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, 0, 1);
      node1.setType((-519));
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      node0.children();
      node0.isHook();
      node0.hasChildren();
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, 0, 1);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      Node node2 = new Node(85, 362, 52);
      node2.isFor();
      node2.isComma();
      node0.addChildToFront(node2);
      node0.removeChildren();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = new Node((-1208));
      Node node1 = new Node((-1208));
      Node node2 = new Node(1, node1, node0, (-747), 4095);
      node0.setSideEffectFlags(13);
      node0.getDouble();
      node2.removeFirstChild();
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1208
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newString("3SI#_8AHbAfB(~*E");
      Node.newString("3SI#_8AHbAfB(~*E");
      Node node1 = Node.newString(37, "com.google.javascript.rhino.jstype.UnknownType", 43, 8);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      Node node3 = Node.newNumber(888.1906418902);
      node3.setIsSyntheticBlock(false);
      node0.isSwitch();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      simpleErrorReporter0.warning((String) null, (String) null, 54, (-376));
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedHashSet<TemplateType> linkedHashSet0 = new LinkedHashSet<TemplateType>(359);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) linkedHashSet0);
      Node node4 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) immutableList0);
      node2.getCharno();
      node3.isContinue();
      node0.isSwitch();
      node3.getDouble();
      node1.replaceChild(node0, node0);
      String string0 = "com.google.common.collect.ImmutableSet";
      int int0 = 111;
      Node.newString(string0, node4.IS_CONSTANT_NAME, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newNumber(2053.06149205);
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.getAncestors();
      Node node1 = Node.newNumber(2331.510097191862);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node0.setDouble(1.0);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newString(2987, "com.google.javascript.rhino.Node");
      node0.isUnscopedQualifiedName();
      node0.setSourceEncodedPositionForTree(0);
      node0.putBooleanProp(0, false);
      node0.isCall();
      node0.getJSDocInfo();
      node0.isComma();
      Node.newNumber((double) 31, 4095, 1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newNumber(2053.06149205);
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.getAncestors();
      node0.isWhile();
      Node node1 = Node.newNumber(2331.510097191862);
      node1.isIf();
      node1.setChangeTime((-1929));
      node0.isAdd();
      node0.isObjectLit();
      String string0 = "/0qx~=3dWJ;;eAow{@";
      Node node2 = Node.newString(40, "/0qx~=3dWJ;;eAow{@", 16, 48);
      node0.srcrefTree(node1);
      node2.getInputId();
      node2.setInputId((InputId) null);
      node1.getExistingIntProp(746);
      int int0 = (-540);
      Node node3 = Node.newString(int0, string0);
      node2.isEquivalentToTyped(node3);
      // Undeclared exception!
      try { 
        node1.isVarArgs();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 746
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", 2414, 48);
      Node node1 = new Node(177, node0, node0, (-2035), 50);
      node1.addSuppression("xRlLl.)&:");
      node0.isName();
      node1.isDefaultCase();
      Node node2 = new Node(43, node0, node0, node0, 126, 2887);
      node0.getQualifiedName();
      int int0 = 1880;
      node0.setLineno(int0);
      int int1 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      node1.getDirectives();
      node0.getChangeTime();
      // Undeclared exception!
      try { 
        node2.children();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newString("unexpected prop id ", (-1029), 701);
      node0.isQualifiedName();
      Node node1 = new Node(2740, node0, node0, node0, (-3548), 49);
      node1.getQualifiedName();
      Node node2 = new Node(46, node0);
      node2.getDirectives();
      node0.getChangeTime();
      int int0 = (-2679);
      int int1 = (-1025);
      Node node3 = null;
      try {
        node3 = new Node(int0, int1, node2.IS_CONSTANT_NAME);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2987);
      node0.setChangeTime((-23));
      node0.isQualifiedName();
      node0.getStaticSourceFile();
      Node node1 = new Node(3012, node0, node0, node0, node0);
      node1.isDelProp();
      Node node2 = new Node(57, node1, 52, 5914);
      node2.isObjectLit();
      node1.isTrue();
      Node node3 = node0.cloneTree();
      Node node4 = new Node((-142));
      node3.toString(false, true, false);
      Node node5 = new Node(2987, node4, node4, node2, node3);
      node1.isTypeOf();
      Node.mergeLineCharNo(32, 40);
      node2.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newNumber(2062.3428691789863);
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isName();
      node0.isCatch();
      node0.getQualifiedName();
      node0.setLineno(154);
      int int0 = Node.DIRECTIVES;
      node0.getDirectives();
      Node node1 = new Node(38, node0, node0, node0);
      Node node2 = new Node(39, node1, node0, 46, 38);
      node2.getChangeTime();
      // Undeclared exception!
      try { 
        node0.children();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString(701, "");
      node0.addSuppression("");
      node0.isName();
      node0.isString();
      Node node1 = new Node(4095, node0, node0, node0, 31, 4);
      node1.getQualifiedName();
      node1.setLineno(48);
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      node1.getDirectives();
      node0.getChangeTime();
      node1.children();
      node0.isHook();
      node0.hasChildren();
      node0.isQualifiedName();
      node0.getChildAtIndex(0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = Node.newString("com.google.javascript.rhino.jstype.NoObjectType", 1, (-470));
      node1.isQualifiedName();
      Node node2 = new Node(110, node0, node0, (Node) null, 77, 56);
      node1.getQualifiedName();
      Node node3 = new Node(node1.ORIGINALNAME_PROP);
      node3.getDirectives();
      node1.getChangeTime();
      node3.isFor();
      node2.isComma();
      // Undeclared exception!
      try { 
        node0.addChildToFront(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setChangeTime((-1051));
      node0.isQualifiedName();
      node0.getStaticSourceFile();
      Node node1 = new Node(51, node0, node0, node0, node0);
      node1.isObjectLit();
      node1.isTrue();
      Node node2 = node1.cloneTree();
      Node node3 = new Node((-2337));
      node1.srcref(node3);
      node0.getType();
      node1.useSourceInfoIfMissingFromForTree(node2);
      node1.removeProp(53);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, 0, 1);
      node1.getQualifiedName();
      Node node2 = Node.newString(42, "NR:+`#Ns", 39, 42);
      node1.srcref(node2);
      node0.isFor();
      node0.isFromExterns();
      node2.addChildrenToBack(node0);
      int int0 = 4095;
      int int1 = 1094;
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node1;
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, 0, 1);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      Node node2 = new Node(37, node1, 50, 1);
      Node node3 = node2.cloneTree();
      Node node4 = new Node(56);
      node2.toString(true, true, true);
      Node node5 = new Node(57, node3, node1, node0, 53, (-5380));
      node2.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node.extractCharno(8);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      jSTypeArray0[0] = (JSType) objectType0;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = Node.newString("DATE_TYPE");
      node0.setCharno(40);
      node0.addChildToBack(node1);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.setSourceFileForTesting(" [");
      node1.getChangeTime();
      node0.detachChildren();
      node0.getLineno();
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = null;
      Node node4 = node2.useSourceInfoIfMissingFrom((Node) null);
      node4.getExistingIntProp(node2.OPT_ARG_NAME);
      Node node5 = Node.newString(objectType0.EMPTY_TYPE_COMPONENT);
      // Undeclared exception!
      try { 
        node5.isGetElem();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = node0.getAncestor(0);
      node0.mayMutateArguments();
      Node node2 = Node.newString(">f`Zj4sf2\"39Bw*K", 39, (-921));
      node2.isOptionalArg();
      node1.isOnlyModifiesThisCall();
      node0.isUnscopedQualifiedName();
      Node node3 = new Node(1172, node0);
      node3.srcref(node0);
      node3.setVarArgs(true);
      node1.getType();
      node1.toStringTree();
      node3.useSourceInfoIfMissingFromForTree(node0);
      node0.removeProp(29);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setChangeTime((-1051));
      node0.isQualifiedName();
      node0.getStaticSourceFile();
      Node node1 = new Node(51, node0, node0, node0, node0);
      node1.isObjectLit();
      node1.isTrue();
      Node node2 = node1.cloneTree();
      node0.setSourceFileForTesting("com.google.common.base.Predicates$IsEqualToPredicate");
      Node node3 = new Node((-2337));
      node1.srcref(node3);
      node0.getType();
      node1.useSourceInfoIfMissingFromForTree(node2);
      node1.removeProp(53);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newNumber(2053.06149205);
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags5.setMutatesArguments();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("\n\nSubtree2: ");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.toStringTree();
      node0.isOnlyModifiesThisCall();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(147);
      node0.getChangeTime();
      node0.isGetProp();
      node0.isRegExp();
      Node node1 = Node.newString("V;a,", 2731, 631);
      node1.isNoSideEffectsCall();
      node0.setVarArgs(false);
      node0.mayMutateGlobalStateOrThrow();
      node0.getQualifiedName();
      Node node2 = node0.srcref(node0);
      node2.hasOneChild();
      node2.hasOneChild();
      Node node3 = node0.detachFromParent();
      Node node4 = node0.clonePropsFrom(node2);
      node0.removeChild(node0);
      node4.getSourceFileName();
      node3.isQuotedString();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node4.STATIC_SOURCE_FILE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node(114, node0, node0, node0);
      node1.isQualifiedName();
      node1.isQuotedString();
      node1.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      node0.srcrefTree(node1);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(47);
      node1.setSideEffectFlags(node_SideEffectFlags2);
      node1.isFor();
      // Undeclared exception!
      try { 
        node0.isObjectLit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got DO
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = Node.newString(37, "Object#Key");
      Node node2 = node0.srcref(node1);
      node0.children();
      node0.getType();
      node2.useSourceInfoIfMissingFromForTree(node0);
      node0.removeProp(4095);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newNumber(2053.06149205);
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.getAncestors();
      node0.isWhile();
      Node node1 = Node.newNumber(2331.510097191862);
      node1.isIf();
      node1.setChangeTime((-1929));
      node0.isAdd();
      node0.isObjectLit();
      Node node2 = Node.newString(40, "/0qx~=3dWJ;;eAow{@", 16, 48);
      node2.getInputId();
      node1.isEquivalentToTyped(node0);
      node2.setInputId((InputId) null);
      Node node3 = new Node(2877, node1);
      node1.replaceChildAfter(node3, node3);
      node2.isOr();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-1690));
      nodeArray0[0] = node0;
      Node node1 = new Node((-1690), nodeArray0);
      node0.isVarArgs();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(unionType0).getAlternates();
      JSType jSType0 = modificationVisitor0.caseUnionType(unionType0);
      node1.setJSType(jSType0);
      Node node2 = new Node((-3334), node0, 57, 0);
      int int0 = (-355);
      int int1 = (-715);
      // Undeclared exception!
      try { 
        Node.newNumber((double) node0.EMPTY_BLOCK, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = new Node((-411));
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node(31, nodeArray0);
      // Undeclared exception!
      try { 
        nodeArray0[0].isVarArgs();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newString("3SI#_8AHbAfB(~*E");
      Node.extractCharno((-2748));
      node0.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(37, nodeArray0);
      node1.isQualifiedName();
      Node node2 = new Node(83, node1, node1, node0, (-894), 2);
      node0.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      node0.children();
      node1.replaceChildAfter(node0, node2);
      boolean boolean0 = node0.isHook();
      node2.isUnscopedQualifiedName();
      node2.isVoid();
      node1.getInputId();
      JSDocInfo jSDocInfo0 = new JSDocInfo(boolean0);
      Node node3 = new Node(node1.COLUMN_BITS, node1, node2);
      node3.setJSDocInfo(jSDocInfo0);
      int int0 = (-1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, (-84), 1);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      Node node2 = new Node(85, 362, 52);
      node2.isFor();
      node2.isComma();
      node0.addChildToFront(node2);
      Node node3 = node0.removeChildren();
      node3.toString();
      node0.checkTreeEquals(node3);
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      node0.putProp((-2631), templateType0);
      Object object0 = new Object();
      Node node1 = null;
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl((Node) null);
      InputId inputId0 = node0.getInputId();
      // Undeclared exception!
      try { 
        node_NodeMismatch0.equals(inputId0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newString(701, "");
      node0.isName();
      node0.isString();
      Node node1 = new Node(4095, node0, node0, node0, 31, 4);
      node1.getQualifiedName();
      node1.setLineno(48);
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      node1.getDirectives();
      HashSet<Node> hashSet0 = new HashSet<Node>();
      node0.isHook();
      node0.hasChildren();
      node0.isQualifiedName();
      Node node2 = node0.getChildAtIndex(53);
      node2.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = Node.newString(42, "Object#Element", 38, 57);
      node0.srcref(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      node1.toStringTree();
      node0.isOnlyModifiesThisCall();
      node0.cloneTree();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.isComma();
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setChangeTime((-1051));
      node0.isQualifiedName();
      node0.getStaticSourceFile();
      Node node1 = new Node(51, node0, node0, node0, node0);
      node1.isObjectLit();
      node1.isTrue();
      node1.cloneTree();
      Node node2 = new Node((-2337));
      node1.srcref(node2);
      node0.hasChildren();
      node1.isVoid();
      node1.isNumber();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setChangeTime((-1051));
      node0.isQualifiedName();
      node0.getStaticSourceFile();
      Node node1 = new Node(51, node0, node0, node0, node0);
      node1.isObjectLit();
      node1.isTrue();
      Node node2 = node1.cloneTree();
      Node node3 = new Node((-2337));
      Node node4 = node1.srcref(node3);
      node4.isLocalResultCall();
      node0.hasChildren();
      node1.isVoid();
      node2.isString();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node0 = Node.newNumber((double) 34);
      Node node1 = Node.newString("", 35, 42);
      Node node2 = new Node(0, node0, node0, node1, 56, 56);
      node2.getAncestor((-1903));
      JSTypeExpression jSTypeExpression0 = jSDocInfo0.getType();
      jSDocInfo0.declareThrows(jSTypeExpression0);
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        ImmutableList.of(string0, string0, string0, string1, string1, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = Node.newString(42, "Object#Element", 38, 57);
      Node node2 = node0.srcref(node1);
      node0.isFor();
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node.newString("J#5[5Dd4tj`");
      node3.isEmpty();
      node2.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newString("", 2414, 701);
      node0.getJSDocInfo();
      Node node1 = new Node(51, node0, node0, 3247, (-1905));
      node0.addSuppression("");
      node0.isName();
      node1.isDefaultCase();
      Node.newNumber((double) 39, (-1307), 32);
      node1.getString();
      String string0 = "";
      Node node2 = Node.newString(node1.IS_CONSTANT_NAME, string0);
      node1.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, 0, 1);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      Node node2 = new Node((-4033));
      Node node3 = node0.srcref(node1);
      node2.isFromExterns();
      node3.isVoid();
      Node node4 = new Node(36, node2, node1, node2, node1, 105, 1495);
      node4.isString();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = " [";
      Node node0 = Node.newString(" [", 108, 108);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      Node node1 = new Node(9, nodeArray0);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      // Undeclared exception!
      try { 
        node_NodeMismatch0.equals(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newString(701, "");
      node0.addSuppression("");
      node0.isName();
      node0.isString();
      Node node1 = new Node(4095, node0, node0, node0, 31, 4);
      node1.getQualifiedName();
      node1.setLineno(48);
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      node1.getDirectives();
      node0.getChangeTime();
      Iterable<Node> iterable0 = new HashSet<Node>();
      node0.isHook();
      node0.hasChildren();
      node0.isQualifiedName();
      node0.getChildAtIndex(0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      node0.isQuotedString();
      Node node1 = new Node(41, node0, node0, node0, node0);
      InputId inputId0 = new InputId((String) null);
      node1.isNoSideEffectsCall();
      node0.setInputId(inputId0);
      node1.setSideEffectFlags(57);
      node0.isHook();
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newString(512, "com.google.javascript.rhino.Node$AncestorIteable");
      node0.isNE();
      node0.setSourceEncodedPosition(512);
      Node node1 = new Node(4095, node0);
      node1.getJSDocInfo();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.getInputId();
      node2.isGetElem();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node2.isWhile();
      node0.isIf();
      node2.setChangeTime(16);
      node1.isFor();
      node2.isComma();
      Node node3 = Node.newNumber((-741.08028647206));
      node1.addChildToFront(node3);
      Node node4 = node1.removeChildren();
      node3.checkTreeEquals(node0);
      node4.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, (-84), 1);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      Node node2 = new Node(85, 362, 52);
      node2.isFor();
      node2.isComma();
      node0.addChildToFront(node2);
      Node node3 = node0.removeChildren();
      node3.toString();
      node0.checkTreeEquals(node3);
      node3.isOnlyModifiesThisCall();
      node0.getChangeTime();
      node3.isCase();
      node2.addChildAfter(node0, node3);
      double double0 = (-452.4);
      int int0 = (-242);
      Node.newNumber(double0, int0, node3.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      node0.setIsSyntheticBlock(false);
      node0.isSwitch();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      Node node1 = Node.newString(2, "Object#Element", 53, 54);
      node0.getCharno();
      node1.isContinue();
      node1.isSwitch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      node1.isAdd();
      node1.isObjectLit();
      Node node2 = Node.newString(1216, "I~-4Y-O&?rZ' <gF6", 37, 4);
      node1.getInputId();
      node1.setInputId((InputId) null);
      node2.getExistingIntProp(50);
      String string0 = "is_dispatcher";
      Node.newString(node1.SIDE_EFFECT_FLAGS, string0);
      node2.isEquivalentToTyped(node0);
      // Undeclared exception!
      try { 
        node0.isVarArgs();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 50
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      Node node1 = new Node(8, node0, 54, 47);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      Node node2 = new Node(85, 362, 52);
      node2.isFor();
      node2.isComma();
      node0.addChildToFront(node2);
      Node node3 = node0.removeChildren();
      node0.isNull();
      node3.isReturn();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", 751619276, 108);
      node0.isQualifiedName();
      Node node1 = new Node(37, node0, node0, node0, 717, 0);
      node1.getQualifiedName();
      node0.getDirectives();
      node1.getChangeTime();
      Node node2 = new Node((-441), 49, 125);
      node1.isFor();
      node1.isComma();
      node2.addChildToFront(node1);
      Node node3 = node2.removeChildren();
      node2.toString();
      node1.checkTreeEquals(node0);
      node3.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      node0.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.valueOf();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newNumber(2053.06149205);
      node0.getDirectives();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isString();
      node0.isObjectLit();
      node0.isTrue();
      Node node1 = node0.cloneTree();
      Node node2 = new Node(52);
      node2.toStringTree();
      node2.useSourceInfoIfMissingFromForTree(node1);
      node2.removeProp(2068);
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newString("new child has existing sibling");
      Node node1 = new Node((-1321), node0, node0, 40, 120);
      node0.isEquivalentToShallow(node1);
      node0.addSuppression("gU<B");
      node0.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node1.getJsDocBuilderForNode();
      node_SideEffectFlags1.areAllFlagsSet();
      node1.hasChild((Node) null);
      Node node2 = node1.srcrefTree((Node) null);
      node2.isEquivalentTo(node1);
      node0.getExistingIntProp(node1.IS_DISPATCHER);
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, (-1905), (-1905));
      Node node1 = new Node((-1905), node0, node0, node0);
      Node node2 = new Node((-1905), node1);
      node2.detachChildren();
      node0.getSideEffectFlags();
      node2.useSourceInfoIfMissingFrom(node0);
      node2.toStringTree();
      node2.isOnlyModifiesArgumentsCall();
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newNumber(437.0);
      node0.isNoSideEffectsCall();
      Node node1 = new Node(23, node0, node0, 362, 30);
      Node node2 = Node.newString(119, "9DG&s", 30, 40);
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node1);
      node1.srcrefTree(node0);
      node1.isLabelName();
      node3.removeProp(31);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", 751619276, 108);
      node0.isQualifiedName();
      Node node1 = new Node(37, node0, node0, node0, 717, 0);
      node1.getQualifiedName();
      node0.getDirectives();
      node1.getChangeTime();
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = null;
      Node node4 = node2.useSourceInfoIfMissingFrom(node1);
      node4.getExistingIntProp(2);
      int int0 = 52;
      Node node5 = new Node(int0, node2, node3);
      node5.isGetElem();
      // Undeclared exception!
      try { 
        node0.cloneTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 2
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-1690));
      node0.isVarArgs();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags5.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags(31);
      node0.setSideEffectFlags(node_SideEffectFlags5);
      // Undeclared exception!
      try { 
        nodeArray0[0].isFor();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1690
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", 751619276, 751619276);
      node0.isQualifiedName();
      Node node1 = new Node(37, node0, node0, node0, 717, 0);
      node1.getQualifiedName();
      Set<String> set0 = new HashSet<String>();
      node1.getChangeTime();
      Node node2 = new Node((-441), 49, 125);
      node1.isFor();
      node1.isComma();
      node2.addChildToFront(node1);
      Node node3 = node2.removeChildren();
      node1.checkTreeEquals(node0);
      node3.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, (-84), 1);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      Node node2 = new Node(85, 362, 52);
      node2.isFor();
      node2.setQuotedString();
      node2.isComma();
      node0.addChildToFront(node2);
      Node node3 = node0.removeChildren();
      // Undeclared exception!
      try { 
        node3.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      Node node1 = Node.newNumber((double) 30);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node0.isCall();
      node0.getJSDocInfo();
      Node node2 = Node.newString(46, "Z2*~p?fzS0yEbc");
      node2.useSourceInfoIfMissingFromForTree(node0);
      node1.isCall();
      node2.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = Node.newString("i3", (-457), (-457));
      node0.setChangeTime((-457));
      node0.isQualifiedName();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("i3", false);
      node0.isDelProp();
      node0.isString();
      node0.isObjectLit();
      node0.isTrue();
      Node node1 = node0.cloneTree();
      node1.addChildToFront(node0);
      Node node2 = node1.removeChildren();
      node1.toString();
      node0.checkTreeEquals(node2);
      node2.isOnlyModifiesThisCall();
      node1.getChangeTime();
      node2.isCase();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newNumber(2053.06149205);
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.getAncestors();
      node0.isWhile();
      Node node1 = Node.newString("{:9B*|K-x/HN");
      Node node2 = Node.newString("R8hO~a0CqG");
      Node node3 = new Node(113, node2);
      Node node4 = new Node((-1694), node1, node0, node3);
      node0.isCall();
      node3.getJSDocInfo();
      node0.isEmpty();
      node1.setString("{:9B*|K-x/HN");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[2] = node0;
      node0.isEquivalentToTyped(node0);
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newNumber(2053.06149205);
      node0.getDirectives();
      node0.setChangeTime(120);
      node0.isQualifiedName();
      node0.getStaticSourceFile();
      Node node1 = new Node(52, node0, node0, node0, node0);
      node1.isObjectLit();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      nodeArray0[3] = node0;
      nodeArray0[4] = node1;
      nodeArray0[5] = node1;
      nodeArray0[6] = node1;
      Node node2 = new Node((-916), nodeArray0, (-1), 23);
      node2.isTrue();
      node1.cloneTree();
      int int0 = (-780);
      Node node3 = new Node(int0);
      // Undeclared exception!
      try { 
        node3.srcref(nodeArray0[4]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newString("3I#8AHbAf(~*E");
      Node.extractCharno((-2748));
      node0.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isEquivalentToShallow((Node) null);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setMutatesThis();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getAncestor(0);
      Node node1 = new Node((-818), (-2748), 15);
      node1.isFor();
      node1.isComma();
      Node node2 = Node.newString((-1362), "", 1350, (-2705));
      node2.addChildToFront(node1);
      node2.removeChildren();
      node2.isNull();
      node1.isReturn();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      Node node1 = new Node(8, node0, 54, 47);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.replaceChildAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.setLength(4);
      Node node1 = Node.newString("", 2264, 1578);
      node0.isEquivalentTo(node1, true, true, false);
      node0.siblings();
      Node node2 = node0.getAncestor((-81));
      Node node3 = node1.removeChildren();
      node1.addChildrenAfter(node3, node3);
      node3.useSourceInfoFrom(node2);
      node0.isSyntheticBlock();
      node2.getInputId();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newString(701, "");
      node0.addSuppression("");
      boolean boolean0 = node0.isName();
      node0.isString();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.createOptionalParameters((JSType[]) null);
      jSDocInfo0.setDeprecated(boolean0);
      String string0 = "";
      int int0 = 705;
      // Undeclared exception!
      try { 
        Node.newString(node0.POST_FLAG, string0, node1.NO_SIDE_EFFECTS, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newString("new child has existing sibling");
      Node node1 = new Node((-1321), node0, node0, 40, 120);
      node0.isEquivalentToShallow(node1);
      node0.addSuppression("gU<B");
      node0.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node1.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(44);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node0.getJsDocBuilderForNode();
      Node.SideEffectFlags node_SideEffectFlags4 = new Node.SideEffectFlags((-563));
      node_SideEffectFlags4.areAllFlagsSet();
      Node node1 = null;
      node0.hasChild((Node) null);
      Node node2 = node0.srcrefTree((Node) null);
      node0.isEquivalentTo(node2);
      int int0 = 548;
      Node node3 = null;
      try {
        node3 = new Node(int0, node2, node1, node2, node0.CHANGE_TIME, node0.REFLECTED_OBJECT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newNumber(2053.06149205);
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      Node.extractCharno(538);
      node0.addChildrenToFront((Node) null);
      int int0 = (-115);
      node0.setSourceEncodedPosition(int0);
      // Undeclared exception!
      try { 
        node0.isNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      jSTypeRegistry0.getObjectIndexKey();
      Node node0 = Node.newString("CHECKED_UNKNOWN_TYPE", 1, 1);
      Node node1 = new Node(46, node0, node0, 37, (-2090));
      node0.addChildrenToFront(node1);
      node0.setSourceEncodedPosition(43);
      node1.isNumber();
      node1.getDirectives();
      Node.mergeLineCharNo(46, (-1764));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newString(512, "com.google.javascript.rhino.Node$AncestorIterable");
      node0.isNE();
      node0.setSourceEncodedPosition(512);
      Node node1 = new Node(4095, node0);
      node1.getJSDocInfo();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.getInputId();
      node2.isGetElem();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isIf();
      node0.isDo();
      node2.isObjectLit();
      node0.getInputId();
      node2.setInputId((InputId) null);
      node2.toString();
      node1.checkTreeEquals(node2);
      // Undeclared exception!
      try { 
        node0.isInc();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 512
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(39, node0, node0, 4, (-140));
      node0.isEquivalentToShallow(node1);
      node1.addSuppression("gU<B");
      node0.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node1.getJsDocBuilderForNode();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      node0.hasChild((Node) null);
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(55, nodeArray0);
      Node node3 = node1.srcrefTree(node2);
      node2.isEquivalentTo(node3);
      node3.getExistingIntProp(2097152);
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setAllFlags();
      Node node0 = new Node((-1762), (Node) null, (Node) null, (-1762), (-1762));
      String string0 = "-U%xsdcF`;F";
      // Undeclared exception!
      try { 
        node0.addSuppression(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      int int0 = 33;
      int int1 = 1;
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString("K;mQ&J");
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      nodeArray0[1] = node1;
      Node node2 = new Node(124, nodeArray0, 56, 57);
      Node node3 = new Node(1, node2, node0);
      Node node4 = new Node(int1, node3, node2.ORIGINALNAME_PROP, node2.STATIC_SOURCE_FILE);
      Node node5 = new Node(int0, node4);
      // Undeclared exception!
      try { 
        node5.isDefaultCase();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", 2595, (-84));
      node0.isQualifiedName();
      Node node1 = Node.newString("7l~q=1$>g9F5|j");
      Node node2 = Node.newString(15, "7l~q=1$>g9F5|j", 2, 1);
      Node node3 = node0.useSourceInfoFromForTree(node0);
      Node.newNumber((double) 12);
      node1.setIsSyntheticBlock(false);
      node3.isSwitch();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      simpleErrorReporter0.warning("Object#Key", "com.google.javascript.rhino.Node$NodeMismatch", 12, 55);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node4.srcref(node2);
      node1.getCharno();
      node1.isContinue();
      node4.isSwitch();
      node3.toStringTree();
      node2.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newNumber(2053.06149205);
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      Node node1 = new Node(4, node0, node0, node0, 50, 154);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      Node node2 = new Node(412, (-2039), 1762);
      node0.isFor();
      node0.isComma();
      node1.addChildToFront(node2);
      node2.removeChildren();
      node2.isNull();
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newNumber(2053.06149205);
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags3.clearAllFlags();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.getAncestors();
      node0.isWhile();
      Node node1 = Node.newString("{:9B*|K-x/HN");
      Node node2 = Node.newString(954, "{:9B*|K-x/HN", 626, 49);
      Node node3 = new Node(1, node1, node2, 51, 50);
      Node node4 = node3.srcrefTree(node0);
      node4.isLabelName();
      node2.removeProp(51);
      node2.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-1690));
      nodeArray0[0] = node0;
      Node node1 = new Node((-1690), nodeArray0);
      node0.isVarArgs();
      node1.isBlock();
      node0.setString("0NqSMHw");
      Node node2 = new Node(node0.POST_FLAG, node1, node0);
      // Undeclared exception!
      try { 
        node0.cloneTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1690
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      node0.isOr();
      node0.getQualifiedName();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node0.srcref((Node) null);
      double double0 = (-1027.0568286563);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newNumber(2053.06149205);
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.getAncestors();
      node0.isWhile();
      Node node1 = Node.newString("{:9B*|K-x/HN");
      Node node2 = Node.newString("R8hO~a0CqG");
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      node1.getAncestors();
      Node node3 = new Node(0);
      node3.srcref(node2);
      node0.hasChildren();
      node3.isVoid();
      node1.isNumber();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-1654), (-1654));
      node0.isQualifiedName();
      Node node1 = new Node(8, node0, 54, 47);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      Node node2 = new Node(85, 362, 52);
      node2.isFor();
      node2.isComma();
      node0.addChildToFront(node2);
      Node node3 = node0.removeChildren();
      Node.newString(425, "xRlLl.)&:");
      node3.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(57);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isGetProp();
      node0.isTypeOf();
      node0.setWasEmptyNode(false);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, 0, 1);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      Node node2 = new Node((-4033));
      Node node3 = node0.srcref(node1);
      node2.isFromExterns();
      node3.isVoid();
      int int0 = 105;
      node0.replaceChild(node2, node3);
      int int1 = 1495;
      Node node4 = new Node(node1.QUOTED_PROP, node2, node1, node2, node1, int0, int1);
      node4.isString();
      // Undeclared exception!
      try { 
        node4.isStringKey();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = new Node(3580);
      Node node1 = new Node(43, node0, node0);
      node0.getIndexOfChild(node1);
      node0.getString();
      int int0 = 147;
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, (-84), 1);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      Node node2 = new Node(85, 362, 52);
      node2.isFor();
      node2.isComma();
      node0.addChildToFront(node2);
      Node node3 = node0.removeChildren();
      node3.toString();
      node0.checkTreeEquals(node3);
      node3.isInc();
      node0.toStringTree();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.isRegExp();
      node0.isQualifiedName();
      Node node1 = new Node(42, node0, 4, 8);
      node1.getQualifiedName();
      node1.getDirectives();
      node0.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.replaceChildAfter(node0, node0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$AncestorIterable", 505, 505);
      node0.isNE();
      node0.setSourceEncodedPosition(505);
      node0.getJSDocInfo();
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      node0.getInputId();
      node1.isGetElem();
      node0.wasEmptyNode();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isIf();
      node0.isOr();
      node1.isObjectLit();
      node0.getInputId();
      node1.setInputId((InputId) null);
      node1.toString();
      node0.checkTreeEquals(node1);
      node0.isInc();
      node0.toStringTree();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = new Node((-2337));
      node0.getLength();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newString("3I#8AHbAf(~*E");
      Node.extractCharno(51);
      node0.getSourcePosition();
      Node.newString("3I#8AHbAf(~*E");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setMutatesThis();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(58, nodeArray0);
      node1.clonePropsFrom(node0);
      node1.isQualifiedName();
      node0.getQualifiedName();
      node0.getIntProp(43);
      node0.getDirectives();
      node1.addChildBefore(node0, node0);
      node1.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      int int0 = 305;
      Node[] nodeArray0 = new Node[6];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Key");
      node0.getJSType();
      // Undeclared exception!
      try { 
        ImmutableList.of((JSType) null, (JSType) null, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Node node1 = new Node((-84), node0, node0, node0, (-84), 1);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      Node node2 = new Node(85, 362, 52);
      node2.isFor();
      node2.isComma();
      node0.addChildToFront(node2);
      Node node3 = node0.removeChildren();
      Node.newString("xRlLl.)&:", 42, 12);
      Node node4 = new Node(8, node1, node3, node1);
      node2.isCall();
      node3.getJSDocInfo();
      node3.isEmpty();
      node3.setString("");
      node1.useSourceInfoFrom(node3);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, 0, 1);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      Node node2 = new Node(85, 362, 52);
      node1.useSourceInfoFrom(node2);
      node2.isFor();
      node2.isComma();
      node0.addChildToFront(node2);
      node0.removeChildren();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString("call", 82, 82);
      node0.getSourcePosition();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isVarArgs();
      node0.toString(true, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.getBooleanProp(82);
      node0.isObjectLit();
      node0.isIn();
      node0.type = 42;
      node0.getIndexOfChild((Node) null);
      node0.isSetterDef();
      node0.isTry();
      node0.getExistingIntProp(82);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(49, "U\"");
      Node node1 = Node.newNumber((double) 57);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node1.isCall();
      node1.getJSDocInfo();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, 0, 1);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      Node node2 = new Node(85, 362, 52);
      node2.useSourceInfoFrom(node1);
      node2.isFor();
      node2.isComma();
      node0.addChildToFront(node2);
      Node node3 = node0.removeChildren();
      node0.isNull();
      node1.checkTreeEqualsImpl(node3);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newString("", 2414, 701);
      node0.getJSDocInfo();
      Node node1 = new Node(51, node0, node0, 3247, (-1905));
      node0.addSuppression("");
      node1.isDo();
      node1.isDefaultCase();
      Node.newNumber((double) 39, (-1307), 32);
      node1.getString();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      jSTypeRegistry0.getObjectIndexKey();
      boolean boolean1 = true;
      JSType[] jSTypeArray0 = new JSType[4];
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      node0.setIsSyntheticBlock(false);
      node0.isSwitch();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      node0.isBlock();
      node0.setString("Object#Element");
      Node node1 = new Node(2414, node0, node0);
      Node node2 = node0.cloneTree();
      Node node3 = Node.newNumber((-1027.0568286563), 40, 33);
      Node node4 = Node.newString(2308, "+{ov$^?");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node3;
      nodeArray0[1] = node4;
      nodeArray0[2] = node4;
      nodeArray0[3] = node3;
      Node node5 = new Node(303, nodeArray0, 50, 113);
      double double0 = 0.0;
      int int0 = 2146;
      Node node6 = Node.newNumber(double0, node1.OPT_ARG_NAME, int0);
      Node node7 = new Node(node1.INFERRED_FUNCTION, node0, node4, node5, node6, node6.INFERRED_FUNCTION, node2.COLUMN_MASK);
      node7.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node(114, node0, node0, node0);
      node1.isQuotedString();
      node1.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.getInputId();
      node0.isGetElem();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.isIf();
      node1.isDo();
      node0.isObjectLit();
      node1.getInputId();
      node0.setInputId((InputId) null);
      node1.toString();
      node0.checkTreeEquals(node1);
      node1.isInc();
      node1.toStringTree();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newString("EZ)vt8`.D<");
      node0.setQuotedString();
      Node node1 = new Node((-316), 8, 2414);
      node1.isFor();
      node0.addChildToFront(node1);
      Node node2 = node0.removeChildren();
      node2.isNull();
      Node[] nodeArray0 = new Node[1];
      Node node3 = Node.newString("com.google.common.collect.Iterators$MergingIterator");
      nodeArray0[0] = node3;
      Node node4 = new Node(31, nodeArray0, 131072, 19);
      node4.isReturn();
      node3.isWhile();
      node4.setSourceEncodedPositionForTree(4714);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(154, (-2923), 154);
      Node node1 = new Node(1911, node0);
      node1.isScript();
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-1690));
      nodeArray0[0] = node0;
      node0.setVarArgs(false);
      node0.isString();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(1936, 16, 47);
      node0.isComma();
      node1.addChildToFront(node0);
      Node node2 = node1.removeChildren();
      Node node3 = new Node(52, node2, node2, node2, 147, 36);
      node3.toString();
      node3.checkTreeEquals(node0);
      node3.getChangeTime();
      nodeArray0[0].isCase();
      node1.addChildAfter(node3, node0);
      // Undeclared exception!
      try { 
        node2.isScript();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1690
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node((-1690));
      nodeArray0[0] = node0;
      node0.isString();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(110);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node0.getJsDocBuilderForNode();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node1 = new Node(37, nodeArray0);
      node1.hasChild((Node) null);
      Node node2 = node0.srcrefTree(node1);
      node0.isEquivalentTo((Node) null);
      node1.getExistingIntProp(node2.INPUT_ID);
      node2.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newString("", 2414, 701);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.getInputId();
      node0.isGetElem();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isIf();
      node0.isDo();
      node0.isObjectLit();
      node0.getInputId();
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.toString();
      Node node1 = Node.newString("com.google.javascript.rhino.Node$AncestorIterable$1");
      node0.checkTreeEquals(node1);
      node0.isInc();
      node1.toStringTree();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node((-1905), node0, node0, node0);
      node1.getChangeTime();
      node1.isGetProp();
      node1.isRegExp();
      node0.addChildToFront(node1);
      Node node2 = node1.removeChildren();
      node2.isNull();
      Node.newString("com.google.common.base.CharMatcher$1");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node1;
      nodeArray0[1] = node2;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node1;
      Node node3 = new Node(8);
      nodeArray0[6] = node3;
      nodeArray0[7] = node1;
      nodeArray0[8] = node0;
      Node node4 = new Node(256, nodeArray0, 2731, 0);
      node2.isReturn();
      nodeArray0[8].isWhile();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      Node node1 = Node.newNumber((double) 30);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node0.isCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      node1.hasChild(node0);
      Node node2 = node1.srcrefTree(node0);
      node0.isArrayLit();
      node0.getExistingIntProp(119);
      int int0 = 3463;
      Node node3 = null;
      try {
        node3 = new Node(int0, node2, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 119
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = new Node(64);
      node0.getSourcePosition();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isVarArgs();
      node0.toString(true, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.getBooleanProp(64);
      node0.isObjectLit();
      node0.isIn();
      node0.type = 42;
      node0.getIndexOfChild((Node) null);
      node0.isSetterDef();
      node0.isTry();
      node0.getExistingIntProp(64);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      Node node1 = Node.newNumber((double) 30);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append((String) null);
      node0.isCall();
      node_FileLevelJsDocBuilder0.append("Z2*~p?fzS0yEbc");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      ObjectType objectType0 = null;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("true", node0, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      // Undeclared exception!
      try { 
        enumElementType0.toMaybeEnumElementType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newString("", 701, 701);
      node0.addSuppression("");
      node0.isName();
      node0.isString();
      Node node1 = new Node(4095, node0, node0, node0, 31, 4);
      node1.getQualifiedName();
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      node1.getDirectives();
      node0.getChangeTime();
      HashSet<Node> hashSet0 = new HashSet<Node>();
      node1.copyInformationFromForTree(node0);
      JSType[] jSTypeArray0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      jSTypeRegistry0.createOptionalParameters((JSType[]) null);
      node1.isEmpty();
      jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        node0.getSourceOffset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node$IntPropListItem");
      Node node0 = Node.newNumber(0.0, 917, 879);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node$IntPropListItem");
      node0.getChildCount();
      node0.isNE();
      node0.isGetProp();
      node0.addSuppression("LB");
      node0.getDouble();
      node0.isThrow();
      Node node1 = Node.newNumber((-1.0), 0, 2);
      node0.addChildAfter(node1, node1);
      node1.isAssign();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newString("", 701, 701);
      node0.addSuppression("");
      node0.isName();
      node0.isString();
      Node node1 = new Node(4095, node0, node0, node0, 31, 4);
      node1.getQualifiedName();
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      node1.getDirectives();
      node0.getChangeTime();
      HashSet<Node> hashSet0 = new HashSet<Node>();
      node0.isHook();
      node0.hasChildren();
      node1.getChildAtIndex(4);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newNumber(2053.06149205);
      node0.getDirectives();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.getInputId();
      node0.isGetElem();
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      Node node1 = new Node(38);
      node1.isIf();
      Node node2 = Node.newNumber(0.0);
      node2.isAdd();
      Node node3 = new Node((-3595), node1, node0);
      node3.isObjectLit();
      node3.clonePropsFrom(node0);
      node3.putProp(2, node0);
      node2.getInputId();
      node1.setDouble(1651.480151628);
      node3.toStringTree();
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newString("", 701, 701);
      node0.getJSDocInfo();
      Node node1 = new Node(51, node0, node0, 36, (-1900));
      node0.addSuppression("");
      node0.getBooleanProp(30);
      node1.isObjectLit();
      node0.isIn();
      node1.getIndexOfChild(node0);
      node1.isSetterDef();
      node0.isTry();
      int int0 = Node.INCRDECR_PROP;
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = Node.newString("call", 82, 82);
      node0.getSourcePosition();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isVarArgs();
      node0.toString(true, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = new Node(32, node0, node0, node0, node0, 54, 50);
      node1.isName();
      node1.isDefaultCase();
      Node node2 = Node.newString("STRING call 82", 16, 52);
      node2.getString();
      Node node3 = Node.newString(56, "DATE_FUNCTION_TYPE");
      node2.useSourceInfoIfMissingFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      Node node1 = new Node(38, node0, node0, node0, 57, 51);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isGetProp();
      node1.isTypeOf();
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newString("", 2414, 701);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.getInputId();
      node0.isAssignAdd();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isIf();
      node0.isDo();
      node0.isObjectLit();
      node0.getInputId();
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.toString();
      Node node1 = Node.newString("com.google.javascript.rhino.Node$AncestorIterable$1");
      node0.checkTreeEquals(node1);
      node0.isInc();
      node1.toStringTree();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      Node node1 = Node.newNumber((double) 30);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node0.isCall();
      node_FileLevelJsDocBuilder0.append("Z2*~p?fzS0yEbc");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      node1.isHook();
      node1.isEquivalentToShallow(node1);
      Node node2 = new Node(35, node1, node0, node0, node1);
      Node node3 = new Node(816, node2);
      node2.replaceChildAfter(node0, node3);
      node1.isOr();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node0 = Node.newString(48, "", 85, 48);
      node0.getDirectives();
      Node node1 = node0.cloneTree();
      node0.getQualifiedName();
      node1.getString();
      node0.isWhile();
      node0.getExistingIntProp(85);
      node0.getDirectives();
      node0.hasChild(node1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newString(701, "AY;uPt5R[");
      Node node1 = null;
      node0.putIntProp(1788, (-3022));
      node0.addChildToFront((Node) null);
      node0.getQualifiedName();
      node0.srcref(node1);
      int int0 = 82;
      // Undeclared exception!
      try { 
        node0.getBooleanProp(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = Node.newString("");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)116;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(709, node0, node0, 41, 2);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node2 = new Node(38, node1, (-1758), 29);
      node2.isVar();
      node2.isOnlyModifiesArgumentsCall();
      node0.isWith();
      Node node3 = Node.newNumber((double) 54);
      node3.setVarArgs(false);
      node3.isFalse();
      node1.isLabel();
      node0.isFromExterns();
      node3.getIntProp(53);
      node3.getInputId();
      node0.isNE();
      node1.getLineno();
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      node0.setIsSyntheticBlock(false);
      node0.isSwitch();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node2 = new Node(104, node1, node0, node1, 43, 29);
      node1.getQualifiedName();
      node2.getDirectives();
      node0.getChangeTime();
      node0.children();
      node2.isHook();
      Node node3 = new Node(2627, node2, node1, node1, node0, 2627, 0);
      node3.hasChildren();
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = "~^r+Y:e";
      Node node0 = Node.newString("~^r+Y:e", 701, 701);
      node0.getJSDocInfo();
      Node node1 = new Node(51, node0, node0, 36, (-1900));
      node0.addSuppression("~^r+Y:e");
      node0.getBooleanProp(30);
      node1.isHook();
      node1.isEquivalentTo(node1, false, false, false);
      Node node2 = null;
      Node node3 = new Node(16, node0, (Node) null, (Node) null, node0);
      int int0 = 309;
      // Undeclared exception!
      try { 
        Node.newString(int0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.getJSDocInfo();
      Node node1 = new Node(955, node0, node0, 0, 3689);
      node0.addSuppression("Z2*~p?fzS0yEbc");
      node1.getBooleanProp(8);
      node0.isObjectLit();
      node1.isIn();
      node0.getIndexOfChild(node1);
      node1.isSetterDef();
      node0.isTry();
      int int0 = Node.INCRDECR_PROP;
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node((-1905), node0, node0, node0);
      node0.addChildToBack(node1);
      node1.getChangeTime();
      node1.isGetProp();
      node1.isRegExp();
      Node node2 = Node.newString(";a,", 2731, 631);
      node0.setVarArgs(false);
      node1.mayMutateGlobalStateOrThrow();
      node0.isOr();
      node0.getQualifiedName();
      Node node3 = node0.srcref(node1);
      node3.hasOneChild();
      Node node4 = node0.detachFromParent();
      node1.setLength(52);
      node1.getChangeTime();
      Node node5 = node0.clonePropsFrom(node3);
      node1.removeChild(node0);
      node1.toStringTree();
      node4.useSourceInfoIfMissingFromForTree(node5);
      node2.removeProp(node4.IS_DISPATCHER);
      node0.checkTreeEquals(node3);
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFrom(node5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newString("Jl<VxpY-");
      Node node1 = new Node(114, node0, node0, 40, 40);
      node1.isString();
      node0.addSuppression("gU<B");
      node0.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node_SideEffectFlags0.clearAllFlags();
      node1.isVar();
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = Node.newString("Jl<VxpY-", 4095, 110);
      node2.isWith();
      Node node3 = Node.newNumber((double) 42);
      node2.setVarArgs(false);
      node3.isNoSideEffectsCall();
      node3.isFalse();
      node3.isLabel();
      node1.isFromExterns();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = Node.IS_CONSTANT_NAME;
      node0.getInputId();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      jSTypeArray0[0] = jSType0;
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) null);
      jSTypeArray0[1] = (JSType) objectType0;
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      jSTypeArray0[2] = (JSType) templateType0;
      Node node4 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node4.isNE();
      int int1 = Node.IS_CONSTANT_NAME;
      node4.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = Node.newString("");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)116;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(709, node0, node0, 41, 2);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node2 = new Node(38, node1, (-1758), 29);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(29);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.setMutatesArguments();
      node1.getJsDocBuilderForNode();
      node_SideEffectFlags4.areAllFlagsSet();
      node2.hasChild((Node) null);
      Node node3 = node1.srcrefTree(node0);
      Node node4 = new Node(40, (Node) null, node3, node2, node3);
      node4.isEquivalentTo(node0);
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newString("Jl<VxpY-");
      Node node1 = new Node(114, node0, node0, 40, 40);
      node1.isString();
      node0.addSuppression("gU<B");
      node1.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node_SideEffectFlags0.clearAllFlags();
      node1.isVar();
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = Node.newString("Jl<VxpY-", 4095, 110);
      node2.isWith();
      Node node3 = Node.newNumber((double) 42);
      node2.setVarArgs(false);
      node3.isNoSideEffectsCall();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node3;
      Node node4 = new Node((-6207), nodeArray0, 57, (-1177));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ObjectType.cast((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("gU<B", node4, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      Node node5 = enumElementType1.getRootNode();
      node0.addChildrenAfter(node4, node5);
      node3.isFalse();
      node3.isLabel();
      node1.isFromExterns();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = null;
      try {  
      int0 = Node.IS_CONSTANT_NAME;
      } catch(NullPointerException e) {}
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int int0 = (-1905);
      Node node0 = new Node(147);
      Node node1 = new Node((-1905), node0, node0, node0);
      node1.getChangeTime();
      node1.isGetProp();
      node1.getJSDocInfo();
      Node node2 = new Node(2414, node1, node1, 64, 2243);
      node2.addSuppression("-qTBd~L)[W,B{");
      node0.isDec();
      node2.isIn();
      node1.getIndexOfChild(node0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node2.isSetterDef();
      node0.isTry();
      int int1 = Node.INCRDECR_PROP;
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node1;
      nodeArray0[1] = node2;
      nodeArray0[2] = node0;
      Node node3 = new Node((-3533), node0, (-1504), 1);
      nodeArray0[3] = node3;
      nodeArray0[4] = node2;
      nodeArray0[5] = node1;
      nodeArray0[6] = node2;
      nodeArray0[7] = node0;
      nodeArray0[8] = node1;
      Node node4 = null;
      try {
        node4 = new Node(int0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newString("*$-7#ya$g", 119, 701);
      node0.isQualifiedName();
      Node node1 = new Node((-921), node0, node0, node0, 4131, 12);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = new Node(43, 12, 124);
      node2.isFor();
      node2.isComma();
      node3.addChildToFront(node1);
      Node node4 = node3.removeChildren();
      node3.toString();
      node1.checkTreeEquals(node4);
      node1.isOnlyModifiesThisCall();
      node1.getChangeTime();
      node1.isCase();
      node4.isEmpty();
      node3.toString();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node(114, node0, node0, node0);
      node0.isWith();
      node1.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node0.getInputId();
      node0.isGetElem();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.isIf();
      node1.isDo();
      node1.getInputId();
      node0.setInputId((InputId) null);
      node1.toString();
      node0.checkTreeEquals(node1);
      node0.isQualifiedName();
      Node node2 = new Node(32, node0, node0, 31, 46);
      int int0 = 13;
      node0.getChildAtIndex(int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = new Node(103);
      Node node1 = new Node(1546, node0, node0, 701, (-1177));
      node1.addSuppression("");
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1611));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node1.getJsDocBuilderForNode();
      node_SideEffectFlags0.areAllFlagsSet();
      node1.hasChild((Node) null);
      Node node2 = node0.srcrefTree(node1);
      Node node3 = Node.newString("", 85, 45);
      node3.isEquivalentTo(node0);
      node2.getDouble();
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getCharno();
      node0.isContinue();
      node0.isSwitch();
      Node node1 = Node.newNumber((double) (-1), (-1594), 12);
      node0.copyInformationFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags((-516));
      node0.isHook();
      ObjectType.cast((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("", node0, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      Node node2 = enumElementType1.getRootNode();
      // Undeclared exception!
      try { 
        node0.isEquivalentToShallow(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      node0.setIsSyntheticBlock(false);
      node0.isSwitch();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node2 = new Node((-1786), node1, node0, node0, 1358, 0);
      node2.getQualifiedName();
      node0.getDirectives();
      node0.getChangeTime();
      Node node3 = new Node(55, 32, 56);
      node0.isFor();
      node3.isComma();
      node2.addChildToFront(node3);
      node2.isAnd();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString("3SI#_8AHbAfB(~*E");
      Node node1 = new Node(15, node0);
      node0.getJSDocInfo();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.getInputId();
      node0.isGetElem();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node2.isIf();
      node2.isAdd();
      node1.isObjectLit();
      node1.getInputId();
      node0.getChangeTime();
      Node node3 = new Node(33, (-1014), 53);
      node3.isFor();
      node1.isComma();
      node0.addChildToFront(node3);
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node$IntPropListItem");
      Node node0 = Node.newNumber(0.0, 917, 879);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node$IntPropListItem");
      node0.getChildCount();
      node0.isGetProp();
      node0.addSuppression("LB");
      node0.getDouble();
      node0.isThrow();
      Node node1 = Node.newNumber((-1.0), 0, 2);
      node1.isAssign();
      node1.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = Node.newString("3SI#_8AHbAfB(~*E");
      Node node1 = new Node(42, node0, node0);
      node0.getJSDocInfo();
      node1.copyInformationFrom(node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.getInputId();
      node0.isGetElem();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node2.isIf();
      node2.isAdd();
      node1.isObjectLit();
      node1.getInputId();
      Node node3 = new Node(3963, node2);
      node1.setQuotedString();
      double double0 = (-1262.011392889563);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = Node.newString("EZ)vt8`.D<");
      node0.setQuotedString();
      Node node1 = new Node(119, 8, 2414);
      node1.isFor();
      node0.addChildToFront(node1);
      Node node2 = node0.removeChildren();
      node2.isNull();
      node2.getDirectives();
      node0.getChangeTime();
      node0.children();
      node2.isHook();
      Node node3 = new Node(1314, node0, node1, node1, node2, 467, 50);
      node0.hasChildren();
      node3.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("", 701, 701);
      node0.getJSDocInfo();
      Node node1 = new Node(51, node0, node0, 36, (-1900));
      node0.addSuppression("");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node1.copyInformationFrom(node0);
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags3.setMutatesArguments();
      node0.getJsDocBuilderForNode();
      node_SideEffectFlags3.areAllFlagsSet();
      node1.hasChild(node0);
      Node node2 = new Node(1);
      node2.srcrefTree((Node) null);
      Node node3 = Node.newString(string0, node2.INPUT_ID, node0.SIDE_EFFECTS_FLAGS_MASK);
      node2.isEquivalentTo(node3);
      // Undeclared exception!
      try { 
        node2.getDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = new Node(103);
      Node node1 = new Node(1546, node0, node0, 701, (-1177));
      node1.addSuppression("");
      node0.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1611));
      node0.isDec();
      node0.isObjectLit();
      node0.isIn();
      node1.getIndexOfChild(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "com.google.javascript.rhino.jstype.FunctionType";
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) null, "");
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node1, objectType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      Node node2 = enumElementType1.getPropertyNode(objectType0.NOT_A_TYPE);
      node2.isSetterDef();
      // Undeclared exception!
      try { 
        node1.isTry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newString("Jl<VxpY-");
      String string0 = "gU<B";
      Node node1 = new Node(114, node0, node0, 40, 40);
      node1.isString();
      node0.addSuppression("gU<B");
      node0.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node_SideEffectFlags0.clearAllFlags();
      node1.isVar();
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = Node.newString("Jl<VxpY-", 4095, 110);
      node2.isWith();
      Node node3 = new Node(54, node2, node1, node2, node0);
      node3.addSuppression(string0);
      node3.isName();
      // Undeclared exception!
      try { 
        node0.isCatch();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = Node.newString("", 2414, 701);
      Node node1 = new Node(51, node0, node0, 3270, (-1905));
      node1.getSourceFileName();
      Node node2 = Node.newNumber((double) 12);
      node1.setVarArgs(false);
      node2.isNoSideEffectsCall();
      node1.isFalse();
      node1.isLabel();
      node2.isFromExterns();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = Node.SIDE_EFFECT_FLAGS;
      node0.getInputId();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      node1.getDirectives();
      node1.isVoid();
      node1.getDouble();
      node1.isDelProp();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString((-1204), "StringNode: str is null", (-1815), 2577);
      Node node2 = new Node(0, node0, node0, node1, 0, 54);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      node3.isQualifiedName();
      node0.setChangeTime(42);
      node1.isWith();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.hasChild(node2);
      node2.srcrefTree(node0);
      node3.isNoSideEffectsCall();
      node3.getExistingIntProp((-4434));
      int int0 = 306654252;
      Node node4 = new Node(int0, node2, node0);
      node4.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setChangeTime((-1051));
      node0.isQualifiedName();
      node0.getStaticSourceFile();
      Node node1 = new Node(51, node0, node0, node0, node0);
      node1.isObjectLit();
      node1.isTrue();
      Node node2 = node1.cloneTree();
      node2.setLength(48);
      Node node3 = new Node((-2337));
      Node node4 = node1.srcref(node3);
      node4.isLocalResultCall();
      node0.hasChildren();
      node1.isVoid();
      node0.isOr();
      node2.removeChild(node4);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      Node node1 = node0.getAncestor(0);
      node1.mayMutateArguments();
      Node node2 = Node.newString("Za`Bo+OLI4-", 4095, (-2031));
      node2.isOptionalArg();
      node2.isOnlyModifiesThisCall();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node3 = new Node(35, nodeArray0, 51, (-5239));
      node3.isUnscopedQualifiedName();
      Node node4 = new Node(32, node3);
      node2.srcref(node0);
      node2.setVarArgs(true);
      Node node5 = Node.newNumber(1794.234133167097, 32, 32);
      node5.getType();
      node5.toStringTree();
      Node node6 = Node.newString("NUMBER 1794.234133167097 32\n");
      node6.isTypeOf();
      node2.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      Node node1 = Node.newNumber((double) 30);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Z2*~p?fzS0yEbc");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isEquivalentTo(node1, true, true, false);
      node1.isDebugger();
      node0.getSourceOffset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.setCharno(1);
      node1.setIsSyntheticBlock(true);
      node1.isRegExp();
      node0.isDec();
      node1.isInc();
      node0.getProp(0);
      node1.hasMoreThanOneChild();
      node0.isIf();
      node0.isGetElem();
      node0.setString("jsdoc_info");
      node0.getCharno();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node node0 = Node.newString("3SI#_8AHbAfB(~*E");
      Node node1 = Node.newString("3SI#_8AHbAfB(~*E");
      Node node2 = new Node(2, node0);
      Node node3 = Node.newNumber(888.1906418902);
      node3.setIsSyntheticBlock(false);
      node3.isGetterDef();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      simpleErrorReporter0.warning((String) null, (String) null, 54, (-337));
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node.newNumber((double) 37, 56, 12);
      node1.isLabelName();
      node2.getChildBefore(node0);
      Node node4 = Node.newNumber(228.293593499, 43, (-570));
      node4.isNE();
      node2.isDefaultCase();
      node4.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, (-84), 1);
      node0.isGetProp();
      node0.isRegExp();
      Node node2 = Node.newString("Qmg", 4095, (-1543));
      node1.copyInformationFrom(node0);
      node0.setVarArgs(true);
      node0.mayMutateGlobalStateOrThrow();
      node2.isOr();
      node1.getQualifiedName();
      node1.hasOneChild();
      node2.setLength(32);
      node1.getChangeTime();
      node0.clonePropsFrom(node2);
      node0.addChildToBack(node1);
      node2.toString();
      node1.removeChild(node1);
      node0.toStringTree();
      // Undeclared exception!
      try { 
        node1.useSourceInfoIfMissingFromForTree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = Node.newString("3SI#_8AHbAfB(~*E");
      Node node1 = new Node(15, node0);
      node0.getJSDocInfo();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.isName();
      node1.removeChildren();
      node0.isString();
      node2.getQualifiedName();
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      Node node3 = new Node(0, node1, node0, node0);
      node3.getDirectives();
      node0.getChangeTime();
      HashSet<Node> hashSet0 = new HashSet<Node>();
      node1.isHook();
      node2.hasChildren();
      node2.isQualifiedName();
      node0.getChildAtIndex((-918));
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      node0.isGetProp();
      node0.isRegExp();
      Node node1 = Node.newString("Qmg", 4095, (-1543));
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = new Node(2, 302, 32);
      node3.isFor();
      node0.isComma();
      node2.addChildToFront(node0);
      Node node4 = node2.removeChildren();
      node1.toString();
      node1.checkTreeEquals(node2);
      node2.isOnlyModifiesThisCall();
      node1.getChangeTime();
      node0.isCase();
      node4.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = new Node(147);
      node0.isQuotedString();
      node0.siblings();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node2 = new Node(36, node1, node1, node1, 54, 52);
      node2.addChildToBack(node0);
      node2.getQualifiedName();
      node1.getDirectives();
      node2.getChangeTime();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node3.children();
      node1.isRegExp();
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.addChildToFront(node4);
      node1.removeChildren();
      node1.isNull();
      node2.srcref(node3);
      node2.isGetElem();
      node3.clonePropsFrom(node2);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = new Node(149, 2583, 55);
      node0.isWith();
      node0.isName();
      node0.getLastSibling();
      node0.getBooleanProp(55);
      node0.isIf();
      Node node1 = node0.cloneNode();
      node1.toString(false, false, true);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      Node node1 = new Node(52, node0, 46, 30);
      node1.getQualifiedName();
      Node node2 = Node.newString(42, "NR:+`#Ns", 39, 42);
      node1.srcref(node2);
      node0.isFor();
      node0.isFromExterns();
      node2.addChildrenToBack(node0);
      String string0 = "z0_A!&}R";
      int int0 = 1283;
      Node.newString(string0, int0, node1.FREE_CALL);
      int int1 = 4095;
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = Node.newNumber(2053.06149205);
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.getAncestors();
      node0.isWhile();
      Node.newString("{:9B*|K-x/HN");
      Node node1 = Node.newString(4, "{:9B*|K-x/HN", 626, 49);
      LinkedHashSet<TemplateType> linkedHashSet1 = new LinkedHashSet<TemplateType>(51);
      ImmutableList.copyOf((Iterable<? extends JSType>) linkedHashSet1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedHashSet<String> linkedHashSet2 = new LinkedHashSet<String>();
      Node node2 = Node.newNumber((double) 37);
      node2.getAncestors();
      Node node3 = new Node(47);
      Node node4 = node3.srcref(node0);
      node1.isVoid();
      Node node5 = new Node(55, node1, node1, node2, node4);
      node4.getDouble();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = new Node((-2932));
      node0.isQuotedString();
      node0.siblings();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node2 = new Node(43, node0, node1, node0, 911, 29);
      node2.addChildToBack(node0);
      node0.getQualifiedName();
      // Undeclared exception!
      try { 
        node0.getDirectives();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = Node.newString("Jl<VxpY-");
      Node node1 = new Node(114, node0, node0, 40, 40);
      node1.isString();
      node0.addSuppression("gU<B");
      node0.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node_SideEffectFlags0.clearAllFlags();
      node1.isVar();
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = Node.newString("Jl<VxpY-", 4095, 110);
      node2.isWith();
      Node node3 = Node.newNumber((double) 42);
      node2.setVarArgs(false);
      node3.isNoSideEffectsCall();
      node3.isFalse();
      node3.isLabel();
      node1.isFromExterns();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.getChildBefore(node2);
      double double0 = (-2660.0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      int int0 = 41;
      Node.newNumber(double0, int0, node3.DECR_FLAG);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = new Node((-1905));
      node0.cloneNode();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = new Node(147);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.common.collect.AbstractMapEntry");
      Node node1 = new Node(114, node0, node0, node0);
      node0.isWith();
      node1.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node0.getInputId();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.hasChild(node1);
      Node node2 = node1.srcrefTree(node0);
      node1.isArrayLit();
      node0.getExistingIntProp((-1899));
      Node node3 = new Node(node2.FLAG_LOCAL_RESULTS, node2, node2);
      node3.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = Node.newString("Jl<VxpY-");
      Node node1 = new Node(114, node0, node0, 40, 40);
      node0.isExprResult();
      node0.isDelProp();
      node0.isParamList();
      int int0 = (-664);
      Node node2 = new Node(30, node0, node1);
      Node node3 = new Node(int0, node0, node2, node1, node0, node1.CHANGE_TIME, node1.EMPTY_BLOCK);
      int int1 = 113;
      String string0 = null;
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("*10Es", 43, 43);
      node0.appendStringTree((Appendable) null);
      String string0 = null;
      node0.setSourceFileForTesting(string0);
      int int0 = 880;
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newNumber((-405.220455184));
      Node node1 = node0.getAncestor(0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(110);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.isWhile();
      Node node2 = Node.newNumber(3021.04277);
      node2.isIf();
      node2.isAdd();
      node1.isObjectLit();
      Node node3 = Node.newString(0, "xRlLl.)&:", 40, 52);
      node1.isEquivalentToTyped(node2);
      Node node4 = new Node(50, node2, node3, node3);
      node3.replaceChildAfter(node4, node0);
      node2.isOr();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", 751619276, 751619276);
      node0.isQualifiedName();
      Node node1 = new Node(37, node0, node0, node0, 717, 0);
      node1.getQualifiedName();
      HashSet<String> hashSet0 = new HashSet<String>();
      node1.getChangeTime();
      Node node2 = new Node((-431), 49, 125);
      node1.isFor();
      node1.isComma();
      node2.addChildToFront(node1);
      node2.removeChildren();
      node1.checkTreeEquals(node0);
      node2.isScript();
      node1.setSideEffectFlags(412);
      node1.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzcsS0Ebc");
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node1.getCharno();
      node1.isStringKey();
      node1.isSwitch();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.clearAllFlags();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.getCharno();
      node2.isContinue();
      node2.isSwitch();
      Node.newString(4, "Z2*~p?fzcsS0Ebc");
      node0.getJSDocInfo();
      node1.isThrow();
      node0.setDouble(29);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = Node.newString("Jl<VxpY-");
      Node node1 = new Node(114, node0, node0, 40, 40);
      node1.isString();
      node0.addSuppression("gU<B");
      node1.isCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node_SideEffectFlags0.clearAllFlags();
      node1.isVar();
      node0.isOnlyModifiesArgumentsCall();
      node1.isCall();
      node0.getJSDocInfo();
      Node node2 = Node.newString(57, "Jl<VxpY-");
      node1.setLength(55);
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node1);
      node3.isCall();
      node1.getJSDocInfo();
      node1.getDouble();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = new Node(147);
      node0.isQuotedString();
      node0.siblings();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node2 = new Node(36, node1, node1, node1, 54, 52);
      node2.addChildToBack(node0);
      node2.getQualifiedName();
      node1.getDirectives();
      node2.getChangeTime();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node3.children();
      node3.mayMutateArguments();
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.addChildToFront(node4);
      node1.removeChildren();
      node1.isNull();
      node2.srcref(node3);
      node2.isGetElem();
      node0.isEmpty();
      node0.removeChild(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = null;
      try {
        node_SideEffectFlags0 = new Node.SideEffectFlags(node4.JSDOC_INFO_PROP);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = new Node(147);
      node0.isQuotedString();
      node0.siblings();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node2 = new Node(36, node1, node1, node1, 54, 52);
      node2.addChildToBack(node0);
      node1.getDirectives();
      node2.getChangeTime();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node3.children();
      node3.mayMutateArguments();
      Node node4 = new Node(49, node3, 43, 48);
      node2.getChildBefore(node3);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = Node.newString("E:Rj%7*H_\u0006>xh");
      Node node1 = new Node(40, node0);
      node1.getJSDocInfo();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node1.isName();
      node1.isString();
      node1.getQualifiedName();
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      Node node3 = new Node(27, node2, node0, node0);
      node3.getDirectives();
      node1.getChangeTime();
      HashSet<Node> hashSet0 = null;
      try {
        hashSet0 = new HashSet<Node>();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node(114, node0, node0, node0);
      node1.isQuotedString();
      node1.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.getInputId();
      node0.isGetElem();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.isIf();
      node1.isDo();
      node0.isObjectLit();
      node1.getInputId();
      node1.isGetProp();
      node1.isOr();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isThis();
      node0.isGetProp();
      node0.isRegExp();
      Node node1 = Node.newString("Qmg", 4095, (-1543));
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = new Node(2, 302, 32);
      node3.isFor();
      node0.isComma();
      node2.addChildToFront(node0);
      node2.removeChildren();
      node1.toString();
      node1.checkTreeEquals(node2);
      node1.getChangeTime();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Z2*~p?fzS0yEbc");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      node0.isHook();
      node0.isEquivalentToShallow(node0);
      Node node1 = new Node(35, node0, node0, node0, node0);
      Node node2 = Node.newString("Object#Key", 38, 49);
      node1.replaceChildAfter(node0, node2);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isEquivalentToTyped(node1);
      Node node2 = new Node((-84), node0, node0, node0, (-84), 1);
      node0.isGetProp();
      node0.isRegExp();
      Node node3 = Node.newString("Qmg", 4095, (-1539));
      node0.setVarArgs(true);
      node0.isVar();
      node2.isInstanceOf();
      node2.getQualifiedName();
      node2.hasOneChild();
      node3.setLength(32);
      node2.getChangeTime();
      node2.addChildToFront(node0);
      int int0 = (-3875);
      node3.setLineno(int0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = Node.newString("3I#8AHbAf(~*E");
      Node.extractCharno(51);
      node0.getSourcePosition();
      Node node1 = new Node(33, node0, node0, 33, 40);
      node1.getSourceFileName();
      node0.addSuppression((String) null);
      node1.isCatch();
      node1.isGetProp();
      Node.newString((String) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newString("3I#8AHbAf(~*E");
      Node.extractCharno(51);
      node0.setChangeTime(51);
      node0.isQualifiedName();
      node0.getStaticSourceFile();
      Node node1 = new Node((-4975), node0, node0, node0, node0);
      node0.isObjectLit();
      node1.isTrue();
      node0.cloneTree();
      node0.srcref(node1);
      node1.hasChildren();
      node0.isVoid();
      node1.isNumber();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(147);
      Node node1 = Node.newString("\n\nTree2:\n", 52, 30);
      node1.isQualifiedName();
      node1.isGetProp();
      node0.isRegExp();
      Node node2 = Node.newString("", 50, 1);
      node0.setVarArgs(true);
      node1.mayMutateGlobalStateOrThrow();
      node0.getQualifiedName();
      node0.isFalse();
      node2.isIf();
      node0.isDo();
      node2.isObjectLit();
      node2.getInputId();
      node0.isNot();
      node2.isOr();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = "Jl<VxpY-";
      Node node0 = Node.newString("Jl<VxpY-");
      node0.removeChild((Node) null);
      String string1 = "gU<B";
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      node0.putBooleanProp(51, true);
      Node node1 = Node.newString("Vu%:z\"[n[MC");
      Node node2 = new Node(96, node0);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node2);
      Node node3 = new Node(8, node2, node1, node2);
      node3.putProp(53, node_NodeMismatch0);
      Object object0 = new Object();
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node3.setDirectives(set0);
      node_NodeMismatch0.equals("Vu%:z\"[n[MC");
      node3.wasEmptyNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
      node3.isCall();
      node1.getProp(48);
      node1.getJSDocInfo();
      node2.isOnlyModifiesThisCall();
      node1.isThrow();
      node2.addChildBefore(node1, node0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = Node.newString("Jl<VxpY-");
      Node node1 = new Node(1584, node0, node0, 40, 40);
      node1.isString();
      node0.addSuppression("gU<B");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node_SideEffectFlags0.clearAllFlags();
      node1.isVar();
      node0.isOnlyModifiesArgumentsCall();
      node1.isCall();
      node0.getJSDocInfo();
      Node node2 = Node.newString(57, "Jl<VxpY-");
      node1.setLength(55);
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node1);
      node3.isCall();
      node1.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", 751619276, 751619276);
      node0.isQualifiedName();
      node0.isNoSideEffectsCall();
      Node node1 = Node.newString(3122, "xRlLl.)&:", 47, 55);
      Node node2 = Node.newString(108, "xRlLl.)&:", 399, 52);
      node2.toString(false, false, false);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      node3.srcrefTree(node1);
      node1.isLabelName();
      node1.removeProp(56);
      node3.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1208));
      Node node1 = new Node((-1208), node0, node0, (-747), 4095);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node0.getInputId();
      Node node2 = Node.newString(30, "1w)QGBP&,/<4", 1146, 149);
      node2.isGetElem();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isIf();
      node1.isDo();
      node1.isObjectLit();
      node1.getInputId();
      node1.isGetProp();
      node2.isOr();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = Node.newString("xRlLl.)&:", 0, 47);
      node0.isEquivalentToTyped(node1);
      Node node2 = new Node(813, node1);
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node0);
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node4 = new Node(1, node0, node0, node3);
      node1.getProp(6);
      node1.putProp((-81), (Object) null);
      Object object0 = new Object();
      node_NodeMismatch0.equals("xRlLl.)&:");
      node0.wasEmptyNode();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node5 = new Node(47, nodeArray0);
      node5.isCall();
      node4.getJSDocInfo();
      node1.isOnlyModifiesThisCall();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      Node node1 = Node.newNumber((double) 30);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Z2*~p?fzS0yEbc");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.addChildrenToFront(node0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      node1.isHook();
      node1.isEquivalentToShallow(node1);
      int int0 = 816;
      Node node2 = new Node(35, node1, node0, node0, node1);
      Node node3 = new Node(int0, node2);
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node0, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newString("Jl<VxpY-");
      Node node1 = new Node(114, node0, node0, 40, 40);
      node1.isString();
      node0.addSuppression("gU<B");
      node0.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node1.removeChild(node0);
      node_SideEffectFlags0.clearAllFlags();
      node1.isVar();
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = Node.newString("Jl<VxpY-", 4095, 110);
      node2.isWith();
      Node node3 = Node.newNumber((double) 42);
      node2.setVarArgs(false);
      node3.isNoSideEffectsCall();
      node3.isFalse();
      node3.isLabel();
      node1.isFromExterns();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = Node.IS_CONSTANT_NAME;
      node0.getInputId();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.getDirectives();
      node1.isVoid();
      node2.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", 751619276, 751619276);
      node0.isQualifiedName();
      Node node1 = new Node(37, node0, node0, node0, 717, 0);
      node1.getQualifiedName();
      HashSet<String> hashSet0 = new HashSet<String>();
      node1.getChangeTime();
      Node node2 = new Node((-441), 49, 125);
      node1.isFor();
      node1.isComma();
      node2.addChildToFront(node1);
      Node node3 = node2.removeChildren();
      node0.checkTreeEquals((Node) null);
      node3.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(156);
      Node node1 = Node.newString("\n\nTree2:\n", 52, 30);
      node1.isQualifiedName();
      node1.isGetProp();
      node0.isRegExp();
      node1.setString("\n\nTree2:\n");
      Node node2 = Node.newString("", 50, 1);
      node0.setVarArgs(true);
      node1.mayMutateGlobalStateOrThrow();
      node0.getQualifiedName();
      node0.isFalse();
      node2.isIf();
      node0.isDo();
      node0.isThis();
      node0.hasChildren();
      node2.isQualifiedName();
      Node node3 = node0.getChildAtIndex(8);
      node3.getAncestors();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setChangeTime((-1051));
      node0.getStaticSourceFile();
      Node node1 = new Node(37, node0, node0, node0, node0, 4095, 46);
      node1.cloneTree();
      Node node2 = node1.srcref(node0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.hasChildren();
      node2.isIn();
      node1.isNumber();
      node2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = Node.newNumber(3399.35);
      Node node1 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)123;
      node0.toStringTree();
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.addChildrenToBack((Node) null);
      node0.isNE();
      node0.children();
      node0.isIn();
      node0.isNew();
      node0.isAssignAdd();
      node0.addChildToFront(node1);
      node0.replaceChild(node1, node1);
      // Undeclared exception!
      try { 
        node0.getJSDocInfo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      node0.isQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isEquivalentToTyped(node1);
      Node node2 = new Node((-84), node0, node0, node0, (-84), 1);
      node0.isGetProp();
      node0.isRegExp();
      Node node3 = Node.newString("Qmg", 4095, (-1539));
      node0.setVarArgs(true);
      node0.isVar();
      node1.isInstanceOf();
      node2.getQualifiedName();
      node2.setLength(4095);
      Node node4 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node3.useSourceInfoIfMissingFromForTree(node4);
      node0.isCall();
      node4.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:");
      node0.setQuotedString();
      Node node1 = Node.newNumber((double) 56);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = Node.newNumber(1766.5414);
      node2.isHook();
      node0.isEquivalentToShallow(node1);
      Node node3 = new Node(42, node1, node0, node2, node1);
      Node node4 = new Node((-614), node3);
      node3.replaceChildAfter(node0, node4);
      node2.isNumber();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      int int0 = (-84);
      Node node0 = Node.newString("xRlLl.)&:", (-84), (-84));
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      node0.isEquivalentTo((Node) null, false, false, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType[] jSTypeArray0 = new JSType[0];
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node(114, node0, node0, node0);
      node1.isQuotedString();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.getAncestors();
      node1.isWhile();
      node0.getQualifiedName();
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      node1.getDirectives();
      node0.getChangeTime();
      HashSet<Node> hashSet0 = new HashSet<Node>();
      node0.isHook();
      node0.getDirectives();
      node0.isComma();
      node0.addChildToFront(node1);
      node1.isAnd();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", 751619276, 751619276);
      node0.isQualifiedName();
      Node node1 = new Node(37, node0, node0, node0, 717, 0);
      node1.getQualifiedName();
      HashSet<String> hashSet0 = new HashSet<String>();
      node1.getChangeTime();
      Node node2 = new Node((-431), 49, 125);
      node1.isFor();
      node2.setSourceEncodedPosition(1239);
      Node node3 = new Node(998, 4127, 50);
      Node node4 = Node.newString(15, "directives");
      node4.isFor();
      node2.isComma();
      node4.addChildToFront(node2);
      Node node5 = node3.cloneNode();
      node3.isCast();
      node5.isOptionalArg();
      node3.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      Node node1 = new Node(50);
      Node node2 = new Node(40, node1, node0, node1, 51, 38);
      node2.isString();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.createOptionalParameters((JSType[]) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = true;
      jSDocInfo0.setDeprecated(boolean0);
      // Undeclared exception!
      try { 
        node2.isContinue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = new Node(114);
      Node node1 = new Node(114, node0, node0, node0);
      node1.isQuotedString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xRlLl.)&:");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node1.isEquivalentTo(node0, false, false, true);
      node0.isDebugger();
      node0.getSourceOffset();
      Node node3 = Node.newString(36, "xRlLl.)&:", 2, 1);
      node1.setWasEmptyNode(false);
      node3.setCharno(103);
      node2.setIsSyntheticBlock(false);
      node2.isRegExp();
      node1.isDec();
      node2.isInc();
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node4.getProp(77);
      node1.hasMoreThanOneChild();
      node2.isIf();
      node4.setString("G*Tsr<c^5~L|QO2O");
      node4.isGetterDef();
      node3.getCharno();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      node0.setIsSyntheticBlock(false);
      node0.isSwitch();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      node0.isBlock();
      node0.setString("Object#Element");
      node0.getChangeTime();
      HashSet<Node> hashSet1 = new HashSet<Node>();
      node0.isHook();
      node0.isLabelName();
      Node node1 = new Node(0, 25, 29);
      node0.isFor();
      node0.isComma();
      node0.addChildToFront(node1);
      node0.removeChildren();
      node1.toString();
      int int0 = 2327;
      int int1 = 41;
      int int2 = (-4354);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      node0.isSwitch();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node2 = new Node(33, node0, node0, node0, 55, (-2130));
      node2.getQualifiedName();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node2;
      nodeArray0[1] = node1;
      Node node3 = new Node(47, nodeArray0);
      node3.getDirectives();
      node2.getChangeTime();
      node2.children();
      node3.isHook();
      node3.addChildToFront(node1);
      node3.removeChildren();
      nodeArray0[1].isNull();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = Node.newString(339, "ASSIGN_URSH");
      Node node1 = new Node((-1106));
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.type = 2;
      Node node2 = null;
      node0.addChildrenAfter((Node) null, (Node) null);
      node0.isExprResult();
      node0.toStringTree();
      node0.isStringKey();
      // Undeclared exception!
      try { 
        node0.isCast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = Node.newString("*$-7#ya$g", 119, 701);
      node0.isQualifiedName();
      Node node1 = new Node((-921), node0, node0, node0, 4131, 12);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = new Node(43, 12, 124);
      node2.isFor();
      node2.isComma();
      node2.isRegExp();
      node2.isDec();
      node2.isInc();
      node0.getProp(12);
      node1.hasMoreThanOneChild();
      node1.isIf();
      node2.isGetElem();
      node0.setString((String) null);
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = new Node(147);
      node0.isQuotedString();
      node0.siblings();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node2 = new Node(36, node1, node1, node1, 54, 52);
      node2.addChildToBack(node0);
      node1.getDirectives();
      node2.getChangeTime();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node.newString(64, "Object#Key");
      node0.setLength(171);
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node3);
      node4.isCall();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = Node.newString("Jl<VxpY-");
      Node node1 = new Node(114, node0, node0, 40, 40);
      node1.isString();
      node0.addSuppression("gU<B");
      node0.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node_SideEffectFlags0.clearAllFlags();
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = Node.newString("Jl<VxpY-", 4095, 110);
      node2.isWith();
      Node node3 = Node.newNumber((double) 42);
      node2.setVarArgs(false);
      node3.isNoSideEffectsCall();
      node3.isFalse();
      node3.isLabel();
      node0.addChildToFront(node1);
      Node node4 = node3.removeChildren();
      node2.isNull();
      node2.srcref(node0);
      node3.isGetElem();
      Node node5 = node2.clonePropsFrom((Node) null);
      node4.getSourceFileName();
      node5.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = Node.newString("3I#8AHbAf(~*E");
      Node.extractCharno(51);
      int int0 = Node.IS_DISPATCHER;
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(61, nodeArray0);
      node1.isTry();
      node0.getQualifiedName();
      node0.getIntProp(43);
      node0.getDirectives();
      node0.addChildToFront(node1);
      node1.isAnd();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = new Node(512, 512, 512);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y.9QGEn$>E+");
      Node node1 = Node.newString("Y.9QGEn$>E+");
      Node.newNumber((double) 55, 55, 2197);
      node0.setWasEmptyNode(false);
      Node node2 = new Node(43, node0, node0, node0, node1);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node1.getAncestor(32);
      node3.isFromExterns();
      node3.removeProp(37);
      node2.isGetElem();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", 751619276, 751619276);
      node0.isQualifiedName();
      Node node1 = new Node(37, node0, node0, node0, 717, 0);
      node1.getQualifiedName();
      HashSet<String> hashSet0 = new HashSet<String>();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.createOptionalParameters((JSType[]) null);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = new Node(147);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.common.collect.AbstractMapEntry");
      node0.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node1 = new Node(100, node0, 110, 46);
      Node node2 = node1.srcrefTree(node0);
      node1.isArrayLit();
      node1.isDefaultCase();
      node2.isOnlyModifiesThisCall();
      Node.newString((-1089), "com.google.common.collect.AbstractMapEntry", 339, 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node3 = jSTypeRegistry0.createOptionalParameters((JSType[]) null);
      node3.isThrow();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node(114, node0, node0, node0);
      node1.isQuotedString();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.getAncestors();
      node1.isWhile();
      node0.getQualifiedName();
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      node1.getDirectives();
      node0.getChangeTime();
      Node node2 = Node.newNumber(0.0, (-911), 32);
      node0.isNE();
      node1.isDefaultCase();
      node2.isFromExterns();
      node1.isAssign();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newString("~&", 701, 701);
      node0.getJSDocInfo();
      Node node1 = new Node(51, node0, node0, 36, (-1905));
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = new Node(120, 43, 38);
      node2.isFor();
      node2.addChildToFront(node3);
      Node node4 = node2.removeChildren();
      node1.toString();
      node3.checkTreeEquals(node4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node1.addChildToFront(node2);
      node5.setLineno(node2.SLASH_V);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = "Z2*~p?fzS0yEbc";
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      Node node1 = new Node(4095, node0, node0, node0);
      node1.isExprResult();
      node1.isDelProp();
      node0.isParamList();
      int int0 = 108;
      Node node2 = null;
      try {
        node2 = new Node(1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(57);
      nodeArray0[0] = node0;
      node0.isString();
      node0.checkTreeEqualsImpl(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.createOptionalParameters((JSType[]) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jSDocInfo0.setDeprecated(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = new Node(487);
      node0.isQuotedString();
      node0.siblings();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node0.isBlock();
      node0.setString("}|CA");
      int int0 = (-1547);
      int int1 = 114;
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node(4);
      node1.getJSDocInfo();
      Node node2 = new Node((-3700), node0, node1, (-704), (-2259));
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node4 = new Node(47, (-785), 46);
      node1.addChildToFront(node0);
      node1.removeChildren();
      node4.toString();
      int int0 = 584;
      Node node5 = new Node(int0, node4, node4, node3.INFERRED_FUNCTION, node4.IS_NAMESPACE);
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", 751619276, 751619276);
      node0.isQualifiedName();
      Node node1 = new Node(37, node0, node0, node0, 717, 0);
      node1.getQualifiedName();
      HashSet<String> hashSet0 = new HashSet<String>();
      node1.mayMutateArguments();
      node1.getChangeTime();
      node0.isVoid();
      node1.isTrue();
      Node node2 = node1.cloneTree();
      node2.srcref(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      ListIterator<JSType> listIterator0 = linkedList0.listIterator(888);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator0);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node3.hasChildren();
      // Undeclared exception!
      try { 
        node3.isCall();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 888, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(47);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)59;
      Node node1 = Node.newString((-918), "Z2*~p?fzS0yEbc", 31, (int) (byte)59);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.getExistingIntProp(1655);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-71);
      byteArray0[1] = byte1;
      byte byte2 = (byte)65;
      byteArray0[2] = byte2;
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(36, node0, node0, 0, 4095);
      node0.hasChild(node1);
      Node node2 = node0.srcrefTree(node1);
      node0.isArrayLit();
      node1.isComma();
      node2.toString();
      node0.addChildToFront(node1);
      node1.detachFromParent();
      node0.isEquivalentToTyped(node2);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = new Node((-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, (-84), 1);
      node0.isGetProp();
      node0.isRegExp();
      node1.isWhile();
      node1.getQualifiedName();
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      node1.getDirectives();
      node1.getChangeTime();
      Node node2 = Node.newNumber((double) 12, 4, 294);
      node0.isNE();
      node0.isCall();
      node2.isFromExterns();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(1, node0);
      Node node2 = new Node(1, node1, node1);
      node2.isEquivalentTo(node1);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = Node.newString("~&", 701, 701);
      node0.getJSDocInfo();
      Node node1 = new Node(51, node0, node0, 36, (-1905));
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = new Node(120, 43, 38);
      node2.isFor();
      node2.addChildToFront(node3);
      node0.getJSDocInfo();
      node0.getIndexOfChild(node2);
      node1.isSetterDef();
      node2.isTypeOf();
      Node node4 = new Node((-720), (-548), 110);
      node4.getDouble();
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = new Node((-84), (-84), (-84));
      node0.isQualifiedName();
      Node node1 = new Node((-84), node0, node0, node0, (-84), 1);
      node1.getInputId();
      node1.setInputId((InputId) null);
      node0.isGetProp();
      node0.isRegExp();
      Node node2 = Node.newString("Qmg", 4095, (-1539));
      node0.setVarArgs(false);
      Node node3 = new Node(1, 31, (-520));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node2.isFor();
      node0.isComma();
      node2.isAdd();
      node2.isObjectLit();
      node0.getJSDocInfo();
      node2.isSetterDef();
      node0.isTypeOf();
      node2.getDouble();
      node2.isEquivalentTo(node0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = new Node(114);
      Node node1 = new Node(114, node0, node0, node0);
      node1.isGetProp();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node2 = Node.newString("ft`5h7tFz5(2.u^.K&u", 29, 38);
      node1.mayMutateGlobalStateOrThrow();
      node2.isOr();
      node2.getQualifiedName();
      node1.isFalse();
      node1.isLabel();
      node0.isFromExterns();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isFor();
      Node node3 = new Node(124, 30, 1);
      Node node4 = new Node(38);
      node4.isFor();
      node0.isComma();
      node4.addChildToFront(node1);
      Node node5 = node4.removeChildren();
      node5.isNull();
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.isQualifiedName();
      node0.isWith();
      node0.getJSDocInfo();
      node0.isDebugger();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = new Node((-3099));
      node0.getJSDocInfo();
      node0.setSourceEncodedPositionForTree((-3099));
      Node node1 = Node.newString(154, "]J7afP4a!xl<Z3n/Z.", (-2034), 1605);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.getDirectives();
      node0.isOptionalArg();
      node1.setSourceFileForTesting("]J7afP4a!xl<Z3n/Z.");
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isDefaultCase();
      node0.isThrow();
      node1.isTry();
      node1.isOnlyModifiesArgumentsCall();
      node1.isBreak();
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node(114, node0, node0, node0);
      node1.isQuotedString();
      node1.getAncestors();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = new Node(3708, node1, node1, node1, node1, 112, 4095);
      node2.isOptionalArg();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node1.isHook();
      node0.isEquivalentToShallow(node1);
      node0.getLastSibling();
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplatizedType((JSType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType(" is not a number node", node0, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      String string0 = "set1";
      enumElementType1.getPropertyNode(string0);
      int int0 = 44;
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = Node.newString("*$-7#ya$g", 119, 701);
      node0.isQualifiedName();
      Node node1 = new Node(30, node0, node0, node0, 4131, 12);
      node1.getQualifiedName();
      node1.getDirectives();
      node1.getChangeTime();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = new Node(43, 12, 124);
      node2.isFor();
      node3.addChildToFront(node1);
      Node node4 = node3.removeChildren();
      node3.toString();
      node1.checkTreeEquals(node4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node5.isAssign();
      node1.children();
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = new Node((-3099));
      node0.getJSDocInfo();
      node0.setSourceEncodedPositionForTree((-3099));
      Node node1 = Node.newString(154, "]J7afP4a!xl<Z3n/Z.", (-2034), 1605);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.getDirectives();
      node0.isOptionalArg();
      node1.setSourceFileForTesting("]J7afP4a!xl<Z3n/Z.");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isCall();
      node1.isEmpty();
      node1.toString();
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newString("xRlLl.)&:", 751619276, 751619276);
      node0.isQualifiedName();
      Node node1 = new Node(37, node0, node0, node0, 717, 0);
      node1.getQualifiedName();
      HashSet<String> hashSet0 = new HashSet<String>();
      node1.getChangeTime();
      node1.getCharno();
      node1.isVar();
      node0.isNot();
      node1.getQualifiedName();
      node0.setLength((-6220));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node2 = jSTypeRegistry0.createParameters((JSType[]) null);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node2);
      node3.cloneTree();
      node3.isLocalResultCall();
      String string0 = "ASSIGN_URSH";
      Node node4 = Node.newString(string0);
      // Undeclared exception!
      try { 
        node4.isAnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setChangeTime((-1051));
      node0.isQualifiedName();
      node0.getStaticSourceFile();
      Node node1 = new Node(55, node0, node0);
      node1.isVoid();
      node1.isTrue();
      Node node2 = node1.cloneTree();
      Node node3 = new Node(49, node1, node2, 50, (-3036));
      node3.isThrow();
      node0.isEquivalentTo(node1);
      node3.isTry();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = new Node((-3099));
      node0.getJSDocInfo();
      node0.setSourceEncodedPositionForTree((-3099));
      Node node1 = Node.newString(154, "]J7afP4a!xl<Z3n/Z.", (-2034), 1605);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.getDirectives();
      node0.isOptionalArg();
      node1.setSourceFileForTesting("]J7afP4a!xl<Z3n/Z.");
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isDefaultCase();
      Node node2 = node0.srcref(node1);
      node2.useSourceInfoIfMissingFrom(node0);
      node1.hasChildren();
      node1.isCall();
      node0.isEmpty();
      node1.toString();
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = Node.newString("a2*~p?fzS0yEbc");
      node0.addChildrenToBack(node0);
      node0.hasChildren();
      node0.getAncestor(4095);
      node0.isCase();
      node0.getSourceOffset();
      node0.isEmpty();
      node0.toString();
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = new Node(103);
      String string0 = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node(49, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      node1.getDouble();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
      // Undeclared exception!
      try { 
        node0.isCall();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // THROW is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = Node.newString("~&", 701, 701);
      node0.getJSDocInfo();
      Node node1 = new Node(51, node0, node0, 36, (-1905));
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = new Node(120, 43, 38);
      node2.addChildToFront(node3);
      Node node4 = node2.removeChildren();
      node1.toString();
      node3.checkTreeEquals(node4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node.newString("a]F*'GH#j!*ODy");
      node2.isOr();
      node4.isOr();
      node4.cloneTree();
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(100);
      node0.isTrue();
      Node node1 = node0.cloneTree();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      node0.isCall();
      node1.isEmpty();
      node1.toString();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = new Node(147);
      Node node1 = new Node(114, node0, node0, node0);
      node1.isQuotedString();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.isDebugger();
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      node1.getDirectives();
      node0.setSourceFileForTesting("elLE].CC>U%#$S");
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isDefaultCase();
      node1.isThrow();
      node1.isTry();
      node0.isNew();
      node1.isGetProp();
      node1.isOr();
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node.extractLineno((-4679));
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      String string0 = "Qmg";
      jSDocInfo0.disposesOf("Qmg");
      Node node0 = new Node(1048574, (Node) null, (-4544), 2);
      Node node1 = node0.detachFromParent();
      // Undeclared exception!
      try { 
        node1.getInputId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = new Node(40);
      node0.hasChild(node0);
      Node node1 = new Node(114, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(148);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      ImmutableList.of();
      node1.isContinue();
      node1.isSwitch();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node.newString(39, "f*tgP@s");
      JSType jSType0 = null;
      node0.getString();
      JSType.toMaybeTemplatizedType(jSType0);
      node1.toStringTree();
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = Node.newString(154, "]J7afP4a!xl<Z3n/Z.", (-2034), 1605);
      node0.isParamList();
      node0.getDirectives();
      node0.setSourceFileForTesting("]J7afP4a!xl<Z3n/Z.");
      node0.isDefaultCase();
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(36, node0, node0, 0, 4095);
      node0.hasChild(node1);
      Node node2 = node0.srcrefTree(node1);
      node2.isTrue();
      node1.isComma();
      node2.toString();
      node0.addChildToFront(node1);
      Node node3 = node1.detachFromParent();
      node3.checkTreeTypeAwareEqualsImpl(node1);
      node0.isEquivalentToTyped(node2);
      node3.isThis();
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = node0.getAncestor(0);
      node0.mayMutateArguments();
      Node.newString(">f`Zj4sf2\"39Bw*K", 39, (-921));
      node0.isUnscopedQualifiedName();
      Node node2 = new Node(1172, node0);
      node2.setVarArgs(true);
      Node node3 = node0.detachFromParent();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node3.isEquivalentToTyped(node1);
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = new Node(114);
      Node node1 = new Node(114, node0, node0, node0);
      node1.isQuotedString();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.isDebugger();
      Node node2 = new Node(4, node1, node1, 57, 4);
      node0.addSuppression("com.google.javascript.rhino.Node$ObjectPropListItem");
      node2.isName();
      Node node3 = Node.newString(62, "com.google.javascript.rhino.Node$ObjectPropListItem");
      node0.setLength(53);
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node0);
      node4.isOnlyModifiesArgumentsCall();
      node3.isCall();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node node0 = Node.newNumber((-405.220455184));
      Node node1 = node0.getAncestor(0);
      node1.getJSDocInfo();
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      node0.getDirectives();
      node1.setSourceFileForTesting("Z2*~p?fzS0yEbc");
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isDefaultCase();
      node1.isThrow();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ASSIGN_URSH");
      node1.isTry();
      node1.isNew();
      node1.isGetProp();
      node1.isOr();
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = new Node(103);
      node0.addSuppression("");
      node0.isOr();
      node0.getDirectives();
      node0.getChangeTime();
      Node node1 = new Node(759, node0, node0, node0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node node2 = new Node(4095, 30, 126);
      node2.isFor();
      node2.addChildToFront(node1);
      node1.isEquivalentTo(node2);
      Node node3 = node1.removeChildren();
      node1.toString();
      node3.checkTreeEquals(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = null;
      try {
        jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 759
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = Node.newNumber((-405.220455184));
      int int0 = 0;
      Node node1 = node0.getAncestor(0);
      node1.getJSDocInfo();
      Node node2 = new Node(14, node0, node0, 12, 57);
      node2.isNot();
      String string0 = node1.getQualifiedName();
      node0.setLength(48);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createParameters((JSType[]) null);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node1);
      node3.setString(string0);
      node2.isLocalResultCall();
      // Undeclared exception!
      try { 
        node2.isAnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = Node.newString("~&", 701, 701);
      node0.getJSDocInfo();
      Node node1 = Node.newString(37, "up%7W9wY;");
      Node node2 = new Node(1, node0, node1, node1);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node2;
      Node node3 = new Node(2, nodeArray0, 1826, 2474);
      Node node4 = Node.newNumber((double) 8, (-2353), 2);
      node4.setType(51);
      node3.replaceChild(node3, node4);
      nodeArray0[0].getAncestors();
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = new Node(100);
      Node node1 = new Node(40, node0, node0, node0);
      node1.mayMutateArguments();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.getAncestors();
      node0.getQualifiedName();
      node0.getDirectives();
      int int0 = Node.VAR_ARGS_NAME;
      HashSet<Node> hashSet0 = new LinkedHashSet<Node>();
      node0.isHook();
      node0.isLabelName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.srcref(node1);
      Object object0 = new Object();
      node1.getSourceFileName();
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = new Node((-84));
      node0.isQualifiedName();
      Node node1 = new Node(31, node0, node0, node0, node0, 29, 55);
      Node node2 = Node.newString("zRlLl.)y:");
      node2.isBlock();
      node2.setString("Qmg");
      node0.isTrue();
      Node node3 = node1.srcref(node0);
      node1.hasChildren();
      node3.isCall();
      Node node4 = new Node((-536870912), node2);
      node4.isEmpty();
      node1.toString();
      node1.isFor();
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      Node node1 = node0.getAncestor(0);
      node1.mayMutateArguments();
      Node node2 = Node.newString("Z2*~p?fzS0yEbc", 4095, 8);
      node0.isIf();
      node2.isOnlyModifiesThisCall();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node2;
      Node node3 = new Node(35, nodeArray0, 51, (-5239));
      node3.isUnscopedQualifiedName();
      Node node4 = new Node(32, node3);
      node1.addChildToFront(node4);
      node0.removeChildren();
      node3.isNull();
      int int0 = 1710;
      Node node5 = Node.newNumber((-3792.0));
      Node node6 = new Node(37, node2, node1, 601, 4095);
      int int1 = (-645);
      int int2 = 335;
      Node node7 = new Node(int0, node5, node6, nodeArray0[0], node4, int1, int2);
      node7.srcref(node4);
      Node node8 = Node.newNumber((double) node0.CHANGE_TIME);
      // Undeclared exception!
      try { 
        node8.isGetElem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setMutatesThis();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(37, nodeArray0);
      node0.isQualifiedName();
      Node node1 = Node.newNumber(1868.889389793494, 46, (-3820));
      node1.isQuotedString();
      node1.setIsSyntheticBlock(false);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = Node.newString(227, "com.google.javascript.rhino.Node$AbstractPropListItem", 227, 227);
      Node node1 = Node.newString("com.google.javascript.rhino.Node$AbstractPropListItem", 147, 172);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node.newString(16, "}|CA", 55, 52);
      node0.replaceChild(node1, node1);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      int int0 = 102;
      int int1 = 125;
      node2.setSourceEncodedPosition(int1);
      // Undeclared exception!
      try { 
        node1.removeProp(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = new Node(40);
      node0.hasChild(node0);
      Node node1 = new Node(114, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(148);
      node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      ImmutableList.of();
      node1.isContinue();
      node1.isSwitch();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = Node.newString(39, "f*tgP@s");
      Node.newString(12, "f*tgP@s");
      node2.isEquivalentTo(node0, false, false, false);
      Node.extractLineno(17);
      node0.replaceChild(node2, node1);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = new Node(701);
      node0.getJSDocInfo();
      node0.isDebugger();
      int int0 = Node.FLAG_ARGUMENTS_UNMODIFIED;
      node0.getDirectives();
      int int1 = Node.COLUMN_BITS;
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>();
      node0.getDirectives();
      node0.isComma();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType((JSDocInfo) null);
      jSTypeArray0[0] = (JSType) objectType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.addChildToFront(node1);
      node1.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = Node.newString("Z2*~p?fzS0yEbc");
      node0.setQuotedString();
      Node node1 = new Node(4, node0, 50, 57);
      node1.useSourceInfoFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(29);
      node1.getIndexOfChild(node0);
      node1.isEmpty();
      node1.isTry();
      node0.getExistingIntProp(12);
      // Undeclared exception!
      try { 
        node1.isNoSideEffectsCall();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 12
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }
}
