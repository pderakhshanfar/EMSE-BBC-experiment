/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 22:48:11 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.mayMutateArguments();
      node0.hasMoreThanOneChild();
      Node node1 = node0.cloneNode();
      node1.setType(55);
      node0.getSourceFileName();
      node0.isNoSideEffectsCall();
      node1.isOnlyModifiesArgumentsCall();
      node0.cloneNode();
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newString(26, "com.google.javascript.rhino.Node$AncestorIterable", 26, 26);
      Node node1 = new Node(1, node0, 3902, 48);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node node2 = Node.newString("OwV>u/JH5io<L", 38, 30);
      Node node3 = node1.useSourceInfoFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(39);
      node_SideEffectFlags1.clearSideEffectFlags();
      node2.isGetElem();
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-4096), 35, 35);
      nodeArray0[0] = node0;
      Node node1 = new Node(119, 739, 29);
      nodeArray0[1] = node1;
      node1.isOptionalArg();
      Node node2 = node1.useSourceInfoFromForTree(node1);
      Locale locale0 = new Locale("{g!,-IW|L!bQ'vs}", "o^4/jN7gN");
      Locale locale1 = Locale.ITALY;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node3 = Node.newNumber((double) 1);
      node3.isGetterDef();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      node1.isInc();
      node3.setSourceFileForTesting("_(7");
      node0.isGetProp();
      Node node4 = Node.newNumber((double) 4095, 739, 301);
      node2.isVarArgs();
      node4.removeFirstChild();
      node1.isBreak();
      node2.isName();
      node3.isHook();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      node0.setWasEmptyNode(true);
      node0.isStringKey();
      node0.setDouble(32);
      node0.setVarArgs(true);
      node0.getJSDocInfo();
      Node node1 = new Node(100, node0);
      Node node2 = node0.getParent();
      node0.setVarArgs(true);
      node0.toString(false, true, false);
      node2.isThrow();
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
      node_NodeMismatch0.equals(node2);
      Node.mergeLineCharNo(49, 1366);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node(39, node0, node0);
      // Undeclared exception!
      try { 
        node1.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node(2076, (-415), 2076);
      node0.setType(2076);
      node0.isString();
      Node node1 = Node.newNumber((double) 16);
      node1.putIntProp((-1107), 55);
      node1.addChildToFront(node0);
      node1.removeProp((-1107));
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node(101);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(101, node0, node0, node0, 55, 685);
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString(3269, "");
      nodeArray0[0] = node0;
      node0.isUnscopedQualifiedName();
      node0.isString();
      node0.isLabel();
      Node node1 = new Node(4, node0, node0, node0, node0);
      node0.isFor();
      node1.useSourceInfoIfMissingFrom(node0);
      node1.isEquivalentToShallow(node0);
      node1.getIndexOfChild(node0);
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-4096), 35, 35);
      nodeArray0[0] = node0;
      Node node1 = new Node(117, 739, 29);
      nodeArray0[1] = node1;
      Node node2 = node1.useSourceInfoFromForTree(node1);
      Node node3 = new Node(37, nodeArray0);
      node1.getProp(147);
      node0.setVarArgs(true);
      node3.getJSDocInfo();
      Node node4 = new Node((-4096), node3);
      Node node5 = node0.getParent();
      node0.isLabel();
      node5.removeChild(node1);
      node0.isCase();
      node3.isThis();
      node2.getLength();
      node0.checkTreeTypeAwareEqualsImpl(node5);
      Node.extractLineno(56);
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      stack0.add((JSType) templateType0);
      stack0.add((JSType) templateType0);
      simpleErrorReporter0.error("directves", "p\")]I", 2, 56);
      Locale locale0 = new Locale("Object#Element", "'qPnYp\"+");
      Locale locale1 = Locale.ITALY;
      jSTypeRegistry0.clearTemplateTypeNames();
      Node node1 = new Node(30, node0);
      node0.wasEmptyNode();
      Node node2 = node0.getParent();
      node1.isLabel();
      Node node3 = null;
      // Undeclared exception!
      try { 
        node2.replaceChildAfter((Node) null, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.isIf();
      node0.isAssignAdd();
      Node node1 = new Node(57, node0, node0, node0, node0);
      node1.isEquivalentTo(node0);
      node1.mayMutateGlobalStateOrThrow();
      node1.hasOneChild();
      Node node2 = new Node(1931);
      Node node3 = Node.newNumber((-1689.9084374), (-262), 31);
      node3.isThis();
      node3.isWith();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-4096), 35, 35);
      nodeArray0[0] = node0;
      Node node1 = new Node(119, 739, 29);
      nodeArray0[1] = node1;
      node1.isOptionalArg();
      Node node2 = node1.useSourceInfoFromForTree(node1);
      Locale locale0 = new Locale("{g!,-IW|L!bQ'vs}", "o^4/jN7gN");
      Locale locale1 = Locale.ITALY;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node3 = Node.newNumber((double) 1);
      node3.isGetterDef();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      node1.isInc();
      node3.setSourceFileForTesting("_(7");
      node0.isGetProp();
      Node node4 = Node.newNumber((double) 4095, 739, 301);
      node4.removeFirstChild();
      node1.isBreak();
      node2.isName();
      Node node5 = Node.newNumber(382.0679407764, 12, 49);
      node5.isHook();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString(3269, "");
      nodeArray0[0] = node0;
      Node node1 = Node.newString("", 39, 15);
      Node.newString("");
      nodeArray0[1] = node1;
      node0.removeChildren();
      // Undeclared exception!
      try { 
        node1.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newString(26, "com.google.javascript.rhino.Node$AncestorIterable", 26, 26);
      Node node1 = new Node(1, node0, 3902, 48);
      Node node2 = node1.copyInformationFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setMutatesArguments();
      node1.setVarArgs(true);
      Node node3 = Node.newString(2, "com.google.javascript.rhino.Node$AncestorIterable", (-2823), 21);
      node3.getJSDocInfo();
      Node node4 = new Node(31, node2);
      node1.getParent();
      node3.isLabel();
      // Undeclared exception!
      try { 
        node0.removeChild(node4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-4096), 35, 35);
      nodeArray0[0] = node0;
      Node node1 = new Node(119, 739, 29);
      nodeArray0[1] = node1;
      node1.useSourceInfoFromForTree(node1);
      Node node2 = new Node(37, nodeArray0);
      node1.getProp(147);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(374);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      node1.putProp(118, node_SideEffectFlags1);
      node2.isFalse();
      node0.isContinue();
      node1.isEquivalentToShallow(node0);
      node1.getBooleanProp((-259));
      Node node3 = node1.cloneTree();
      node3.addChildToFront(node2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      immutableList0.stream();
      simpleErrorReporter0.error("Object#Key", "first new child has existing parent", 2606, 115);
      jSTypeRegistry0.createTemplateType("[4!9p<O'4");
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newString("length");
      node1.isUnscopedQualifiedName();
      Node node2 = new Node(2606, node0, 12, (-3790));
      node2.isOnlyModifiesArgumentsCall();
      node2.mayMutateGlobalStateOrThrow();
      node2.isGetterDef();
      node2.isIf();
      node2.isVar();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      node0.setWasEmptyNode(true);
      node0.isStringKey();
      node0.setDouble(32);
      node0.setVarArgs(false);
      node0.getJSDocInfo();
      Node node1 = new Node(100, node0);
      node0.setVarArgs(false);
      Node node2 = node0.getParent();
      node1.isLabel();
      Node node3 = Node.newNumber((double) 1, 40, 0);
      node1.isAnd();
      node3.setVarArgs(true);
      node2.isParamList();
      node3.isObjectLit();
      node2.hasChild(node3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      node0.setWasEmptyNode(true);
      node0.isStringKey();
      node0.setDouble(32);
      node0.setVarArgs(true);
      node0.getJSDocInfo();
      Node node1 = new Node(119, node0);
      Node node2 = Node.newString(119, "");
      node1.hasOneChild();
      node2.getProp(758);
      node0.wasEmptyNode();
      Node node3 = new Node(2, node1, 55, 115);
      node3.isIf();
      node3.isTry();
      Node node4 = new Node((-1200), node2);
      node1.useSourceInfoIfMissingFromForTree(node4);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-39), 38, 33);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType.toMaybeFunctionType(jSType0);
      node0.isInc();
      node0.setSourceFileForTesting("Not declared as a type name");
      node0.isGetProp();
      Node node1 = Node.newNumber(0.5, (-3220), 48);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node1, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getRootNode();
      // Undeclared exception!
      try { 
        node0.copyInformationFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(33, 2076, 2076);
      node0.setVarArgs(true);
      node0.isNot();
      Node node1 = new Node(4095, node0, node0);
      // Undeclared exception!
      try { 
        node1.setString("lBb?u8VK^@>(;zJ0I;");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-39), 38, 57);
      Node node1 = new Node(43, node0, node0, node0, node0);
      node1.getProp(53);
      node1.setVarArgs(true);
      node0.getJSDocInfo();
      node0.putProp(31, "qro9+>oRPrC");
      node1.isFalse();
      node1.isContinue();
      Node node2 = Node.newNumber(0.5, (-1929), (-2));
      Node node3 = new Node(56, node2, node1, 54, 49);
      Node node4 = null;
      try {
        node4 = new Node(43, node2, node3, node2, node3, 282, 148);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      node0.setWasEmptyNode(true);
      node0.isStringKey();
      node0.setDouble(1.0);
      Node node1 = Node.newNumber(1762.36);
      node1.setVarArgs(true);
      node0.getJSDocInfo();
      Node node2 = new Node(54, node1);
      Node node3 = Node.newString(133, "The new child node has siblings.", 103, 29);
      node3.getParent();
      // Undeclared exception!
      try { 
        node0.isEquivalentToTyped((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = new Node(33, 2076, 2076);
      node0.setType((-2562));
      node0.isHook();
      node0.isDec();
      Node node1 = Node.newString(4, "Tn");
      node0.hasOneChild();
      node1.getProp((-2754));
      node1.isIf();
      node1.isTry();
      node1.getSideEffectFlags();
      node1.getCharno();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      node0.setWasEmptyNode(true);
      node0.isStringKey();
      node0.putBooleanProp(53, true);
      node0.isQualifiedName();
      node0.isNot();
      Node node1 = Node.newString("iterators");
      node0.wasEmptyNode();
      node0.children();
      node0.isParamList();
      node0.getSourcePosition();
      node0.isNoSideEffectsCall();
      node1.isCase();
      node0.setDouble(39.0);
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = new Node(38);
      Node node1 = Node.newNumber((double) 52, 4, 47);
      Node node2 = new Node(47, 2037, 12);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      Locale locale0 = Locale.ITALY;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node4 = Node.newNumber((-1.0));
      node2.isGetterDef();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node3.isInc();
      node1.setSourceFileForTesting("{g!,-IW|L!bQ'vs}");
      node0.isGetProp();
      Node node5 = Node.newNumber((double) 38, 1, 35);
      node1.isSetterDef();
      node2.isFunction();
      node5.isThis();
      node3.isCast();
      node5.getLineno();
      node4.isEmpty();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setWasEmptyNode(true);
      node0.isStringKey();
      node0.setDouble(32);
      node0.setVarArgs(true);
      node0.getJSDocInfo();
      Node node1 = new Node(119, node0);
      node0.isEquivalentToTyped(node0);
      Node node2 = Node.newNumber((double) 1, 40, 0);
      node1.mayMutateGlobalStateOrThrow();
      node1.isEquivalentTo(node1, false, true, false);
      node2.getLength();
      node0.isOr();
      node0.getIndexOfChild(node1);
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newNumber(2374.1, 64, 3419);
      Node node1 = new Node(2406, 739, 3000);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(105, nodeArray0);
      node2.getProp(3964);
      node2.isEquivalentTo(node1, false, false, false);
      node0.isExprResult();
      node1.setVarArgs(false);
      Node node4 = new Node(47, node1, 42, (-427));
      node4.isScript();
      node3.checkTreeEqualsImpl(node2);
      node4.removeProp(8233);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString(26, "com.google.javascript.rhino.Node$AncestorIterable", 26, 26);
      Node node1 = new Node(1, node0, 3902, 48);
      Node node2 = node1.copyInformationFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags0.setAllFlags();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      node2.putProp(55, node_SideEffectFlags0);
      node1.isFalse();
      node0.isContinue();
      node2.isEquivalentToShallow(node1);
      node1.getBooleanProp(626692);
      Node node3 = node1.cloneTree();
      node0.addChildToFront(node3);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.addChildToBack(node1);
      stack0.clear();
      jSTypeRegistry0.createTemplateType("directives");
      node0.getSourceFileName();
      node0.isBlock();
      Node node2 = new Node(563);
      Node node3 = Node.newNumber((-2389.04), 2, 38);
      node3.isThis();
      node3.isWith();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 3964, 3964);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(38, nodeArray0, (-39), 51);
      node0.getJSDocInfo();
      node0.getInputId();
      node0.setInputId((InputId) null);
      node1.isComma();
      // Undeclared exception!
      try { 
        node1.isUnscopedQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-4096), 37, 37);
      nodeArray0[0] = node0;
      InputId inputId0 = new InputId("duplicate child");
      node0.setInputId(inputId0);
      node0.getSourceFileName();
      Node node1 = new Node(119, 739, 29);
      nodeArray0[1] = node1;
      Node node2 = node1.useSourceInfoFromForTree(node1);
      Node node3 = new Node(37, nodeArray0);
      node3.isOnlyModifiesThisCall();
      node1.type = 51;
      node1.getProp(147);
      node1.isLabel();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node2.srcrefTree(node3);
      Node node4 = null;
      try {
        node4 = new Node(154, node2, node2, node1, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      node0.setWasEmptyNode(true);
      node0.isStringKey();
      node0.setDouble(32);
      node0.setVarArgs(true);
      node0.getJSDocInfo();
      Node node1 = new Node(119, node0);
      Node node2 = node0.getParent();
      node2.isEquivalentToTyped(node0);
      Node.newNumber((double) 1, 40, 0);
      node1.mayMutateGlobalStateOrThrow();
      node2.isEquivalentTo(node1, false, true, false);
      node2.addChildrenAfter(node1, node0);
      Node.newNumber((double) 31);
      node2.isReturn();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-4070), 35, 35);
      nodeArray0[0] = node0;
      Node node1 = new Node(119, 739, 29);
      nodeArray0[1] = node1;
      node1.useSourceInfoFromForTree(node1);
      Node node2 = new Node(37, nodeArray0);
      node2.isEquivalentTo(node0, true, true, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2534));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.areAllFlagsSet();
      // Undeclared exception!
      try { 
        Node.newString((-28), (String) null, 43, 159);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      simpleErrorReporter0.error("$hQD45XbaZ>UOaU~)", "", 49, 4);
      arrayList0.ensureCapacity(39);
      Node node1 = new Node(115, node0, node0, node0, node0);
      node1.isVarArgs();
      node0.addChildrenToBack(node1);
      node0.toString(false, true, false);
      node0.isThis();
      Node node2 = Node.newString(2, "second new child has existing parent");
      node0.addChildrenToFront(node2);
      node2.srcref(node0);
      node2.copyInformationFrom(node0);
      node2.isLocalResultCall();
      node2.isEquivalentToTyped(node0);
      // Undeclared exception!
      try { 
        Node.newString((-1591), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-4070), 35, 35);
      nodeArray0[0] = node0;
      Node node1 = new Node(114, 742, 29);
      nodeArray0[1] = node1;
      node1.useSourceInfoFromForTree(node1);
      Node node2 = new Node(37, nodeArray0);
      node0.setVarArgs(false);
      node0.isParamList();
      node0.isObjectLit();
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-4096), 35, 35);
      nodeArray0[0] = node0;
      Node node1 = new Node(31, node0, node0, 12, 1);
      nodeArray0[1] = node1;
      node1.useSourceInfoFromForTree(node1);
      Locale locale0 = new Locale("{g!,-IW|L!bQ'vs}", "o^4.jN7gN");
      Locale locale1 = Locale.ITALY;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = Node.newNumber((double) 1);
      node2.isGetterDef();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      node1.isInc();
      node2.setSourceFileForTesting("_(7");
      node0.isGetProp();
      Node node3 = Node.newNumber((double) 4095, 739, 301);
      node3.isSetterDef();
      node0.isFunction();
      node0.isThis();
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 3964, 3964);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(38, nodeArray0, (-39), 51);
      node0.getJSDocInfo();
      node0.getInputId();
      node0.setInputId((InputId) null);
      node1.isComma();
      node1.isReturn();
      node0.siblings();
      Node.newNumber((double) 57);
      node0.getQualifiedName();
      node0.getChildAtIndex((-1532));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(2062, 2062, 2062);
      node0.isInstanceOf();
      // Undeclared exception!
      try { 
        node0.setDouble(57);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2062
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isVoid();
      Node node1 = Node.newString("Object#Key", 37, 141);
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.isWhile();
      node2.isEmpty();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[2] = node2;
      nodeArray0[6] = node0;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node_SideEffectFlags0.clearSideEffectFlags();
      node0.setVarArgs(false);
      node0.getBooleanProp((-645));
      node2.isFalse();
      node2.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = Node.newString("Object#Element");
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = Node.newString("$hQD45XbaZ>UOaU~)", (-4828), 1);
      Node node2 = node1.srcref(node0);
      node0.addChildToFront(node2);
      Node node3 = Node.newString("limit is negative");
      node1.isEquivalentTo(node0);
      node3.getSourceFileName();
      node0.isBlock();
      node2.isNull();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node2);
      Node node4 = new Node(4);
      node3.setIsSyntheticBlock(true);
      node0.isGetProp();
      node1.isSetterDef();
      node1.getProp(55);
      node3.isName();
      node3.isQuotedString();
      try { 
        node1.setDouble((-149.38024314702));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING $hQD45XbaZ>UOaU~) is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newNumber(897.3);
      Locale locale0 = new Locale("length", "length");
      Locale locale1 = Locale.ITALY;
      node0.isGetterDef();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor1 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor1.caseNoType();
      JSType.toMaybeFunctionType(jSType0);
      node0.isInc();
      node0.setSourceFileForTesting("Object#Element");
      node0.getStaticSourceFile();
      node0.wasEmptyNode();
      Node node1 = Node.newString(37, "Named type with empty name component");
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.isTypeOf();
      node0.isNoSideEffectsCall();
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 3964, 3964);
      node0.setVarArgs(false);
      node0.setLineno(662);
      node0.isTypeOf();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("Y4", "Y4", (-207), 40);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        node0.checkTreeEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, (-1327), (-1327));
      Node node1 = Node.newNumber(2066.915559967654, 38, (-1397));
      node0.isUnscopedQualifiedName();
      node0.isString();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node1.hasOneChild();
      Node node3 = new Node(98);
      Node node4 = new Node(467, node2, node3, node2, 2158, (-1532));
      node4.isFor();
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node2, node4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "length";
      Node node0 = Node.newString(2115, "length", 2115, 2115);
      node0.getIntProp(39);
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.addChildBefore((Node) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node(1149, 1149, 1149);
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      stack0.clear();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      jSTypeRegistry0.createTemplateType("hD453XbaZ>UOaU)");
      node1.isDo();
      node1.setSourceEncodedPosition(56);
      node1.isDebugger();
      node0.setVarArgs(true);
      node1.setVarArgs(true);
      node1.isParamList();
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(33, 2076, 2076);
      node0.setType((-2562));
      node0.isString();
      Node node1 = Node.newNumber((double) 16);
      node0.putIntProp(473, 8);
      node0.addChildToFront(node1);
      node0.removeProp(43);
      node0.isAnd();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      node0.addSuppression("k|TAqh#]=");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 3964, 3964);
      node0.setVarArgs(false);
      node0.setVarArgs(true);
      Node node1 = new Node((-641), (-1116), (-406));
      node1.addChildrenToFront(node0);
      node1.isNoSideEffectsCall();
      node1.removeProp(48);
      node1.isAnd();
      node0.setVarArgs(false);
      node1.isParamList();
      node1.isObjectLit();
      node1.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-4096), 35, 35);
      nodeArray0[0] = node0;
      node0.getSourceFileName();
      Node node1 = new Node(119, 739, 29);
      nodeArray0[1] = node1;
      Node node2 = node1.useSourceInfoFromForTree(node1);
      Node node3 = new Node(37, nodeArray0);
      node3.useSourceInfoIfMissingFromForTree(node1);
      node3.isOnlyModifiesThisCall();
      node1.getProp(147);
      node1.isLabel();
      node1.useSourceInfoFrom(node0);
      Node node4 = null;
      try {
        node4 = new Node(154, node2, node2, node1, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-4096), 35, 35);
      nodeArray0[0] = node0;
      Node node1 = new Node(119, 741, 29);
      node1.setVarArgs(true);
      node0.getJSDocInfo();
      Node node2 = new Node(41, node0);
      Node node3 = node0.getParent();
      node3.isLabel();
      Node node4 = Node.newNumber((double) 4095, 47, 1073741824);
      node2.mayMutateGlobalStateOrThrow();
      node4.isEquivalentTo(node0, true, false, true);
      Node.newNumber((-2470.7783), 0, 25);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(54);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(29);
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags3.setThrows();
      Node node0 = Node.newNumber((double) 29, 29, 29);
      Node node1 = new Node(29, node0, node0, node0, 49, 40);
      Node node2 = new Node(8, node1);
      Node node3 = Node.newString("", 39, 36);
      node3.getLength();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      Node.extractLineno(31);
      Node.extractCharno(0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(1149, 1149, 1149);
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      stack0.clear();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      jSTypeRegistry0.createTemplateType("hD453XbaZ>UOaU)");
      node1.getSourceFileName();
      node1.isBlock();
      node0.isNull();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node0);
      Node node2 = new Node(1713);
      node0.setIsSyntheticBlock(false);
      node2.getStaticSourceFile();
      node2.wasEmptyNode();
      // Undeclared exception!
      try { 
        Node.newString((-190), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node(33, 2076, 2076);
      Node.newNumber((-3509.0), 16, 31);
      Node.newNumber((double) 2, 4206, 52);
      // Undeclared exception!
      try { 
        node0.isUnscopedQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-39), 32, 4198);
      node0.isNE();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newString("OBECT_NUMBER_STRING_BOLEAN", 1856, 3011);
      Node node1 = new Node(3011, node0);
      Node node2 = node1.removeFirstChild();
      InputId inputId0 = new InputId("OBECT_NUMBER_STRING_BOLEAN");
      Node node3 = Node.newNumber((double) 4095, 47, 32);
      Node node4 = new Node(32);
      node4.isUnscopedQualifiedName();
      node3.isString();
      node4.isLabel();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.setReturnsTainted();
      node0.isOr();
      node2.isGetterDef();
      node4.getNext();
      node4.getFirstChild();
      Node.newNumber(0.7);
      node4.isNumber();
      Node node5 = new Node(57, node0);
      // Undeclared exception!
      try { 
        node5.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      node0.setWasEmptyNode(true);
      node0.isStringKey();
      node0.setDouble(32);
      node0.setVarArgs(true);
      node0.getJSDocInfo();
      Node node1 = new Node(119, node0);
      Node node2 = node0.getParent();
      node2.isEquivalentToTyped(node0);
      Node node3 = Node.newNumber((double) 1, 40, 0);
      node1.mayMutateGlobalStateOrThrow();
      node2.isEquivalentTo(node1, false, true, false);
      node3.getLength();
      node2.isOr();
      node0.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = new Node(55);
      Node node1 = new Node(55, node0);
      node1.isScript();
      node1.isBlock();
      node0.isOnlyModifiesArgumentsCall();
      node1.isEquivalentToTyped(node0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString("OBJECT_NUMBER_STRING_BOOLEAN", 1856, 3011);
      Node node1 = new Node(3011, node0);
      Node node2 = node1.removeFirstChild();
      InputId inputId0 = new InputId("OBJECT_NUMBER_STRING_BOOLEAN");
      Node node3 = Node.newString("OBJECT_NUMBER_STRING_BOOLEAN");
      node1.isEquivalentTo(node0);
      node1.getSourceFileName();
      node3.isBlock();
      node3.isOnlyModifiesArgumentsCall();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      Node node4 = new Node(1750);
      node2.setIsSyntheticBlock(true);
      node3.getStaticSourceFile();
      node2.wasEmptyNode();
      Node node5 = new Node(1, node4, node2, node4, node4, 48, 32);
      node5.copyInformationFrom(node2);
      Node node6 = node4.clonePropsFrom(node1);
      Node.newNumber((double) 1);
      node0.getString();
      node4.checkTreeEqualsImpl(node6);
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node.extractLineno((-814));
      Node node0 = Node.newString("B }>O[28");
      node0.setVarArgs(true);
      Node node1 = new Node(50, 39, 116);
      node1.addChildrenToFront(node0);
      Node.newString("");
      node0.isAnd();
      node0.setVarArgs(true);
      node0.isTrue();
      node0.hasChildren();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      node0.setWasEmptyNode(true);
      node0.setIsSyntheticBlock(true);
      node0.setDouble((-1.0));
      Node node1 = Node.newNumber(0.5);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setMutatesThis();
      node1.isEquivalentTo(node0, false, false, true);
      node1.isExprResult();
      node0.setVarArgs(true);
      node2.setIsSyntheticBlock(false);
      node1.isScript();
      node2.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = (-4096);
      Node node0 = Node.newNumber(1.0);
      int int1 = 119;
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.addChildToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString((-1430), "", 55, 55);
      node0.setString("");
      node0.getBooleanProp(0);
      node0.setSourceFileForTesting("this");
      node0.isFromExterns();
      Node node1 = Node.newNumber((double) 56);
      Node node2 = new Node(111);
      Node node3 = new Node(54, node0, node2);
      node3.isHook();
      node0.putBooleanProp(55, false);
      node1.isQualifiedName();
      node0.isNot();
      node2.wasEmptyNode();
      node0.children();
      node1.isParamList();
      node1.getSourcePosition();
      node0.isString();
      node2.isCase();
      node1.setDouble(48);
      Node.newString("");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      String string0 = null;
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      stack0.add((JSType) templateType0);
      stack0.add((JSType) templateType0);
      simpleErrorReporter0.error("directives", "p\")]I", 2, 56);
      node0.isQualifiedName();
      node0.isNot();
      node0.wasEmptyNode();
      node0.children();
      node0.isParamList();
      node0.getSourcePosition();
      node0.isString();
      node0.isCase();
      try { 
        node0.setDouble((-1218.63));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString(132, "directives", 132, 132);
      node0.getBooleanProp(132);
      node0.setSourceFileForTesting("directives");
      node0.setIsSyntheticBlock(true);
      try { 
        node0.setDouble(132);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SCRIPT directives 132 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000004] [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 3964, 3964);
      node0.setVarArgs(false);
      Node node1 = new Node(50, (-259), (-952));
      node1.type = 53;
      node0.addChildrenToFront(node1);
      node0.removeProp(19);
      node0.isAnd();
      node0.setVarArgs(true);
      node1.isParamList();
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = Node.newNumber((double) (-39), 32, 4198);
      node0.toString();
      node0.isNE();
      // Undeclared exception!
      try { 
        node0.removeChildAfter((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Locale locale0 = new Locale("", "co|.google.common.collect.LinkeUHashMultimap$ValueEntry");
      Locale locale1 = Locale.ITALY;
      Node node0 = new Node(38, 38, 8287);
      node0.isGetterDef();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      node0.getInputId();
      Node node1 = Node.newNumber((double) 16);
      Node node2 = Node.newNumber((double) 4095, 47, 53);
      node1.isEquivalentToShallow(node2);
      Node node3 = new Node(1, node0, node1, node0, node1);
      Node.newNumber((double) 37, (-94), 83);
      node3.isDelProp();
      Node node4 = new Node(38, 38, 53);
      node3.isNot();
      Node node5 = null;
      try {
        node5 = new Node(36, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      stack0.add((JSType) templateType0);
      stack0.add((JSType) templateType0);
      simpleErrorReporter0.error("directves", "p\")]I", 2, 56);
      Locale locale0 = new Locale("Object#Element", "'qPnYp\"+");
      Locale locale1 = Locale.ITALY;
      jSTypeRegistry0.clearTemplateTypeNames();
      Node node1 = new Node(30, node0);
      Node node2 = node0.getParent();
      node1.isLabel();
      node1.setLength(7);
      node2.isScript();
      node0.hasOneChild();
      node0.isArrayLit();
      Node node3 = node2.removeFirstChild();
      node3.isBreak();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node2.setJSDocInfo(jSDocInfo0);
      node3.addSuppression("Not declared as a constructor");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString(132, "directives", 132, 132);
      node0.setString("");
      node0.getBooleanProp(132);
      node0.setSourceFileForTesting("directives");
      node0.isFromExterns();
      Node node1 = Node.newNumber(1762.36);
      node0.isHook();
      node0.putBooleanProp(132, false);
      node0.isQualifiedName();
      node0.isNot();
      node0.wasEmptyNode();
      node0.children();
      node0.isParamList();
      node0.getSourcePosition();
      node1.isString();
      node0.isCase();
      try { 
        node0.setDouble(52);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SCRIPT  132 [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString("OBJECT_NUMBER_STRING_BOOLEAN", 1856, 3011);
      Node node1 = new Node(3011, node0);
      Node node2 = node1.removeFirstChild();
      node2.isFalse();
      node0.copyInformationFromForTree(node1);
      node1.getSourcePosition();
      node1.isString();
      node2.isRegExp();
      node0.isCase();
      node0.isSetterDef();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-2901), nodeArray0, (-2901), (-2901));
      node0.isVar();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "length";
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface((ObjectType) null, "second new child has existing parent");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      Node.newNumber((double) 29, 1, 1);
      Node node0 = new Node(1);
      node0.isVarArgs();
      node0.getInputId();
      Node node1 = Node.newString(53, "second new child has existing parent");
      node1.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(33, 2076, 2076);
      Node node1 = Node.newString((-3001), "#rs[i{i9.N_{a");
      Node node2 = new Node(63, node0, node0, node1, node1);
      node0.useSourceInfoIfMissingFrom(node2);
      node0.setType((-2562));
      node0.isString();
      Node node3 = null;
      try {
        node3 = new Node(4, node0, 56, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newString((-1392), "this", (-1392), (-1392));
      Node node1 = new Node(43, node0, 15, (-108));
      Node node2 = node1.copyInformationFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setAllFlags();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("this", true);
      node2.putProp(43, simpleSourceFile0);
      Node node3 = new Node(16, 446, (-1407));
      node3.isFalse();
      node0.isContinue();
      node1.isEquivalentToShallow(node3);
      node2.getBooleanProp((-1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newNumber((-121.9611734));
      node0.setLength(83);
      node0.isLocalResultCall();
      node0.setCharno(83);
      node0.isQualifiedName();
      node0.setLength((-474));
      node0.isQuotedString();
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      node0.setWasEmptyNode(true);
      node0.isStringKey();
      node0.setDouble(32);
      node0.setVarArgs(true);
      node0.getJSDocInfo();
      Node node1 = new Node(100, node0);
      Node node2 = node0.getParent();
      node1.isLabel();
      Node.newNumber((double) 1, 40, 0);
      node1.mayMutateGlobalStateOrThrow();
      node2.isEquivalentTo(node1, false, true, false);
      Node.newNumber((double) 52, 4095, 48);
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node.extractLineno((-814));
      Node node0 = Node.newString("B }>O[28");
      Node node1 = new Node(50, 39, 116);
      node1.isTry();
      node1.getIntProp(153);
      node1.setSourceEncodedPosition(42);
      node0.getChildCount();
      Node.newString(51, "B }>O[28", 38, 116);
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      node0.setWasEmptyNode(true);
      node0.isStringKey();
      node0.setDouble(32);
      node0.setVarArgs(true);
      node0.getJSDocInfo();
      Node node1 = new Node(100, node0);
      Node node2 = node0.getParent();
      node1.isLabel();
      node2.setLength(48);
      node2.isScript();
      node2.hasOneChild();
      node2.isArrayLit();
      node0.removeFirstChild();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newNumber((-1689.605555), 1389, 996);
      Node node1 = Node.newNumber((double) 0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = node0.srcrefTree(node1);
      Node node4 = node1.copyInformationFromForTree(node3);
      node2.isTry();
      node2.isSwitch();
      node4.isHook();
      node2.mayMutateGlobalStateOrThrow();
      Node node5 = Node.newNumber((double) 52, 2716, 42);
      node0.mayMutateGlobalStateOrThrow();
      node2.isEquivalentTo(node5, false, false, true);
      Node node6 = Node.newNumber(1514.547, 43, 11);
      node5.getIntProp((-76));
      node6.setSourceEncodedPosition(57);
      node3.getChildCount();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-4096), (-4096), (-4096));
      nodeArray0[0] = node0;
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString(21, "directives", 21, 21);
      node0.setString("xyQI@X\u0004");
      node0.getBooleanProp(21);
      node0.setSourceFileForTesting("directives");
      node0.isFromExterns();
      Node node1 = Node.newNumber(1762.36);
      node0.getIntProp((-4828));
      node0.isHook();
      node0.putBooleanProp(21, false);
      node0.isQualifiedName();
      node0.isNot();
      node0.wasEmptyNode();
      node0.children();
      node0.toString(true, true, false);
      node0.isParamList();
      node0.isNull();
      node0.mayMutateGlobalStateOrThrow();
      node0.isBlock();
      node1.isFor();
      Node node2 = Node.newString((-1936), "ADD xyQI@X\u0004 21 [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003]", 2, (-43));
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = Node.newString("Object#Element");
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = Node.newString("$hQD45XbaZ>UOaU~)", (-4828), 1);
      Node node2 = node1.srcref(node0);
      node0.addChildToFront(node2);
      Node node3 = Node.newString("limit is negative");
      node1.isEquivalentTo(node0);
      node3.getSourceFileName();
      node0.isBlock();
      node2.isNull();
      node2.checkTreeTypeAwareEqualsImpl(node0);
      Node node4 = new Node(4);
      node3.setIsSyntheticBlock(true);
      node4.getStaticSourceFile();
      node3.wasEmptyNode();
      Node node5 = node1.copyInformationFrom(node0);
      node5.clonePropsFrom(node0);
      Node node6 = Node.newNumber(1.2);
      node5.getString();
      node0.checkTreeEqualsImpl(node6);
      node4.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newNumber(105.38832, 2214, (-2251));
      node0.setCharno(124);
      node0.hasChildren();
      Node.extractCharno((-548));
      node0.isOr();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      modificationVisitor0.caseNoType();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      Node node2 = jSTypeRegistry1.createParameters(jSTypeArray0);
      Node node3 = new Node(2315, node1, node2, node1, node2, 32, 32);
      node3.getChildBefore(node1);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1);
      FunctionType functionType0 = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry1.createFunctionTypeWithNewThisType((FunctionType) null, (ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber(960.3247274);
      // Undeclared exception!
      try { 
        node0.copyInformationFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-4096), 35, 35);
      nodeArray0[0] = node0;
      node0.removeProp(310);
      Node node1 = new Node(119, 739, 29);
      nodeArray0[1] = node1;
      Node node2 = node1.useSourceInfoFromForTree(node1);
      Locale locale0 = new Locale("{g!,-IW|L!bQ'vs}", "o^4/jN7gN");
      Locale locale1 = Locale.ITALY;
      node1.setChangeTime((-2255));
      InputId inputId0 = new InputId("J^Be");
      inputId0.toString();
      node0.copyInformationFromForTree(node0);
      node2.setInputId(inputId0);
      node1.getSourcePosition();
      node0.isString();
      node1.isRegExp();
      String string0 = "by5<,]$Q0tTNGM$.L";
      Node node3 = Node.newString(21, "by5<,]$Q0tTNGM$.L");
      node3.isCase();
      try { 
        node3.setDouble(4095);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ADD by5<,]$Q0tTNGM$.L is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString("OBJECT_NUMBER_STRING_BOOLEAN", 1856, 3011);
      Node node1 = new Node(3011, node0);
      Node node2 = node1.removeFirstChild();
      InputId inputId0 = new InputId("OBJECT_NUMBER_STRING_BOOLEAN");
      inputId0.toString();
      node2.isFalse();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node3 = Node.newString("OBJECT_NUMBER_STRING_BOOLEAN");
      node2.isGetterDef();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node3.isInc();
      node3.setSourceFileForTesting("-GV#");
      node2.isGetProp();
      Node node4 = Node.newNumber((-2487.39097), 26, (-15));
      node4.isSetterDef();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node5 = new Node(1568, nodeArray0, 5621, 114);
      node5.isFunction();
      node5.isThis();
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString("o6gK");
      node0.isQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      node0.setSourceFileForTesting("Object#Element");
      node0.isName();
      try { 
        node0.setDouble(1252.0873364);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING o6gK [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000338] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      node0.setWasEmptyNode(true);
      node0.isStringKey();
      node0.setDouble(32);
      node0.removeProp(2);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter2, true);
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node.extractLineno((-814));
      Node node0 = Node.newString("B }>O[28");
      boolean boolean0 = true;
      node0.setVarArgs(true);
      node0.putIntProp(1048575, 8);
      // Undeclared exception!
      try { 
        node0.addChildToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 3964, 3964);
      boolean boolean0 = false;
      node0.setVarArgs(false);
      Node node1 = new Node(50, (-259), (-952));
      node1.type = 53;
      node0.addChildrenToFront(node1);
      node1.isOnlyModifiesArgumentsCall();
      node0.removeProp(2);
      Node node2 = node0.getFirstChild();
      node2.getSourceFileName();
      node0.isNumber();
      node2.isEquivalentTo(node0, true, true, true);
      node0.setSourceEncodedPositionForTree(52);
      Node node3 = null;
      try {
        node3 = new Node(53, node2, 46, 56);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(3269, "");
      nodeArray0[0] = node0;
      Node node1 = new Node(57, node0, node0, node0);
      nodeArray0[1] = node1;
      Node node2 = Node.newNumber(1.0, 1542, 0);
      nodeArray0[2] = node2;
      node2.isUnscopedQualifiedName();
      node0.isString();
      Node.newString("WHILE");
      node0.isFunction();
      Node node3 = null;
      try {
        node3 = new Node((-3119), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString(":+BxXcG bsmn.", (-1978), 239);
      node0.addSuppression("$hQD45XbaZ>UOaU~)");
      node0.setSourceEncodedPosition((-527));
      node0.isDebugger();
      node0.setVarArgs(false);
      node0.isGetElem();
      Node node1 = new Node(35, node0, node0, node0, 8, (-1978));
      node1.srcref(node0);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString(26, "com.google.javascript.rhino.Node$AncestorIterable", 26, 26);
      Node node1 = new Node(1, node0, 3902, 48);
      Node node2 = new Node(43, 1, 4095);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      Node node4 = node2.cloneTree();
      Node node5 = new Node(39, node2, node2, node3, node1, (-1983), 881);
      node4.setSourceEncodedPositionForTree(4095);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NOT com.google.javascript.rhino.Node$AncestorIterable 26 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString("o6gK");
      Node node1 = new Node((-477), node0, node0, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.isDo();
      Node.extractLineno(2);
      // Undeclared exception!
      try { 
        node1.isEquivalentTo((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "$hQD45XbaZ>UOaU~)";
      Node node0 = Node.newString("$hQD45XbaZ>UOaU~)");
      node0.isFromExterns();
      node0.hasChildren();
      Node node1 = new Node((-1771), node0, node0);
      node1.children();
      node0.putProp(108, "$hQD45XbaZ>UOaU~)");
      node1.getDirectives();
      node1.removeChildren();
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newNumber(2326.95);
      Node node1 = new Node(56, 40, 42);
      Node node2 = new Node(31, node1, node0);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      // Undeclared exception!
      try { 
        node2.appendStringTree(mockPrintWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 56
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber(897.3);
      Node node1 = new Node(4095, node0, (-51), 1234);
      Node node2 = node1.copyInformationFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      node0.getInputId();
      Node node3 = Node.newString(51, "length");
      node3.isFalse();
      Node node4 = null;
      try {
        node4 = new Node((-1461), node0, node1, node2, 3026973, 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(39, "", 98, 53);
      // Undeclared exception!
      try { 
        node0.srcref((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = new Node(1149, 1149, 1149);
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("hD453XbaZ>UOaU)");
      node1.isDo();
      node1.setSourceEncodedPosition(56);
      node1.isDebugger();
      stack0.add((JSType) templateType0);
      node0.setVarArgs(true);
      node1.isTypeOf();
      node1.toString(true, false, true);
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(79, 0, (-1532));
      Node node1 = new Node(74, node0, node0, 29, 2);
      Node node2 = Node.newNumber(199.0);
      node1.getDirectives();
      node0.setVarArgs(true);
      node1.checkTreeEqualsImpl(node1);
      node1.setJSDocInfo((JSDocInfo) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      node_SideEffectFlags0.setReturnsTainted();
      node1.isOr();
      Node.newNumber(1.0, 147, 1650);
      node0.isNE();
      node2.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 3964, 3964);
      node0.setVarArgs(false);
      node0.cloneTree();
      Node node1 = new Node(50, (-259), (-952));
      node1.type = 53;
      Node.newString("");
      node0.addChildrenToFront(node1);
      Node node2 = Node.newString("", 56, 9);
      node1.setSourceEncodedPositionForTree((-1666));
      node1.isThis();
      node2.isThrow();
      node2.removeProp(57);
      node1.isDec();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newNumber(897.3);
      Locale locale0 = new Locale("length", "length");
      Locale locale1 = Locale.ITALY;
      node0.isGetterDef();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor1 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor1.caseNoType();
      JSType.toMaybeFunctionType(jSType0);
      node0.isInc();
      node0.setSourceFileForTesting("Object#Element");
      node0.isGetProp();
      node0.isSetterDef();
      node0.getProp(1);
      node0.isName();
      Node node1 = new Node(47, node0, (-1577), 1);
      node1.toString();
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-4096), 35, 35);
      nodeArray0[0] = node0;
      Node node1 = new Node(119, 739, 29);
      nodeArray0[1] = node1;
      Node node2 = node1.useSourceInfoFromForTree(node1);
      Node node3 = new Node(37, nodeArray0);
      node0.mayMutateArguments();
      node2.getStaticSourceFile();
      Locale locale0 = new Locale("{g!,-IW|L!bQ'vs}", "o^4/jN7gN");
      Locale locale1 = Locale.ITALY;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node4 = new Node((-551), 32, 52);
      node1.isTry();
      Node node5 = Node.newString("length", (-3386), 57);
      // Undeclared exception!
      try { 
        node5.setSideEffectFlags((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString(26, "com.google.javascript.rhino.Node$AncestorIterable", 26, 26);
      Node node1 = new Node(1, node0, 3902, 48);
      Node node2 = node1.copyInformationFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      node0.getParent();
      node2.isLabel();
      // Undeclared exception!
      try { 
        node0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newNumber(105.38832, 2214, (-2251));
      node0.setCharno(124);
      node0.hasChildren();
      Node.extractCharno((-548));
      node0.isOr();
      Node node1 = Node.newString("unexpected prop id ", 112, 27);
      Node node2 = node0.srcref(node1);
      node2.addChildToFront(node1);
      Node node3 = Node.newString("limit is negative");
      node3.isEquivalentTo(node0);
      node0.getSourceFileName();
      node0.isBlock();
      node0.isNull();
      node3.checkTreeTypeAwareEqualsImpl(node2);
      Node node4 = new Node((-2374));
      node3.setIsSyntheticBlock(false);
      node4.getStaticSourceFile();
      node4.wasEmptyNode();
      node0.copyInformationFrom(node4);
      node1.clonePropsFrom(node3);
      Node node5 = Node.newNumber((double) 0);
      try { 
        node5.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-4096), 35, 35);
      nodeArray0[0] = node0;
      Node node1 = new Node(119, 739, 29);
      nodeArray0[1] = node1;
      Node node2 = node1.useSourceInfoFromForTree(node1);
      Node node3 = new Node(37, nodeArray0);
      node2.getStaticSourceFile();
      Locale locale0 = new Locale("{g!,-IW|L!bQ'vs}", "o^4/jN7gN");
      Locale locale1 = Locale.ITALY;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.clearTemplateTypeNames();
      Node node4 = Node.newNumber((double) 1);
      node4.isGetterDef();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType.toMaybeFunctionType(jSType0);
      node1.isInc();
      node4.setSourceFileForTesting("_(7");
      node0.isGetProp();
      Node node5 = Node.newNumber((double) 4095, 739, 301);
      node5.isSetterDef();
      node2.isCatch();
      Node.newString(15, "Object#Element", 2, 46);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-4096), 35, 35);
      nodeArray0[0] = node0;
      Node node1 = new Node(119, 739, 29);
      nodeArray0[1] = node1;
      node1.useSourceInfoFromForTree(node1);
      Locale locale0 = new Locale("{g!,-IW|L!bQ'vs}", "o^4/jN7gN");
      Locale locale1 = Locale.ITALY;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = Node.newNumber((double) 1);
      node2.isGetterDef();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      node1.isInc();
      node2.setSourceFileForTesting("_(7");
      node0.isGetProp();
      Node node3 = Node.newNumber((double) 4095, 739, 301);
      node3.isSetterDef();
      node0.isFunction();
      node0.isThis();
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newNumber((double) 8, (-39), 38);
      node0.isAssign();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = null;
      String string0 = ",{-1=";
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface((ObjectType) null, "7_;pBG,8n{YIW4:d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newString("o6gK");
      Node node1 = new Node((-477), node0, node0, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      jSTypeRegistry0.getNativeType(jSTypeNative0);
      node2.isDo();
      Node.extractLineno(2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      node2.isAnd();
      node0.setVarArgs(false);
      node2.hasOneChild();
      node1.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString("o6gK");
      Node node1 = new Node((-477), node0, node0, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.isDo();
      Node.extractLineno(2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setThrows();
      // Undeclared exception!
      try { 
        node1.setString("<,|'t5!");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -477
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 797, 797);
      node0.setVarArgs(true);
      node0.isNot();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      Node node1 = new Node(4095, node0);
      node0.checkTreeEqualsImpl(node1);
      node1.isBlock();
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(79, 0, (-1532));
      Node node1 = new Node(74, node0, node0, 29, 2);
      Node node2 = Node.newNumber(199.0);
      node1.getDirectives();
      node0.setVarArgs(true);
      node1.checkTreeEqualsImpl(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      node_SideEffectFlags0.setReturnsTainted();
      node1.isOr();
      Node.newNumber(1.0, 147, 1650);
      node0.isNE();
      node2.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newString("length");
      Node node1 = Node.newString("$hQD45XbaZ>UOaU~)", 15, 0);
      node0.getSourceFileName();
      node1.setSourceEncodedPositionForTree(48);
      node0.isGetterDef();
      node0.isEquivalentToShallow(node1);
      node0.toString(true, true, false);
      node1.isParamList();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      node0.setWasEmptyNode(true);
      node0.setIsSyntheticBlock(true);
      node0.setDouble((-1.0));
      Node node1 = Node.newNumber(0.5);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setReturnsTainted();
      node0.checkTreeEqualsImpl(node2);
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newString(111, "should never be called", 1479, (-1898));
      node0.detachChildren();
      String string0 = "$hQD45XbaZ>UOaU~)";
      Node node1 = Node.newString("$hQD45XbaZ>UOaU~)", 40, 4);
      Node node2 = new Node(852, node0);
      node2.siblings();
      Node node3 = node2.useSourceInfoIfMissingFrom(node0);
      Node node4 = node3.useSourceInfoIfMissingFrom(node1);
      node1.toString();
      node4.isFromExterns();
      node3.putIntProp((-2207), (-1768));
      node2.setWasEmptyNode(false);
      node3.setCharno(57);
      node3.detachChildren();
      // Undeclared exception!
      try { 
        node4.removeChildAfter(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 3964, 3977);
      node0.setVarArgs(false);
      Node node1 = new Node(50, (-259), (-952));
      node1.type = 53;
      node0.addChildrenToFront(node1);
      node1.cloneTree();
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString(2011, "hD453XbaZ>UOaU~)", 13, 1932);
      node0.children();
      Node node1 = new Node(53, node0, node0, node0, node0, 112, 132);
      node1.detachChildren();
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 37;
      Node[] nodeArray0 = new Node[2];
      Node.newNumber((double) (-4096), 35, 35);
      Node node0 = new Node(119, 739, 29);
      nodeArray0[0] = node0;
      // Undeclared exception!
      try { 
        node0.useSourceInfoFromForTree(nodeArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      node0.setWasEmptyNode(true);
      node0.isStringKey();
      node0.setDouble(32);
      node0.setVarArgs(true);
      node0.getJSDocInfo();
      Node node1 = new Node(100, node0);
      Node node2 = node0.getParent();
      node1.isLabel();
      node2.mayMutateGlobalStateOrThrow();
      Node.newNumber((double) 1, 40, 0);
      node1.mayMutateGlobalStateOrThrow();
      node2.isEquivalentTo(node1, true, true, false);
      Node.newNumber((double) 52, 4095, 48);
      node2.getIntProp(1271);
      node2.setSourceEncodedPosition(85);
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = Node.newString((-3558), "");
      node0.setChangeTime(2020);
      Node node1 = Node.newNumber((double) 1, 126, 38);
      Node node2 = node0.copyInformationFrom(node1);
      node2.children();
      node0.getString();
      node1.mayMutateGlobalStateOrThrow();
      node0.wasEmptyNode();
      // Undeclared exception!
      try { 
        node2.removeChildAfter(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(3269, "");
      nodeArray0[0] = node0;
      Node node1 = new Node(57, node0, node0, node0);
      nodeArray0[1] = node1;
      Node node2 = Node.newNumber(1.0, 1542, 0);
      nodeArray0[2] = node2;
      node1.removeProp(55);
      Node.newNumber((double) 4095, (-445), 872);
      node2.isNE();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isVoid();
      Node node1 = Node.newString("Object#Key", 37, 141);
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.isWhile();
      node0.getSourceOffset();
      node2.isEmpty();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[2] = node2;
      Node node3 = Node.newNumber(16.0, 52, 55);
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node4.isNE();
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node5.isDelProp();
      jSTypeRegistry0.unregisterPropertyOnType("missing prop: ", (JSType) null);
      node1.isNot();
      node0.getLength();
      Node.newString("Object#Key");
      node5.checkTreeEqualsImpl(node2);
      node3.isBlock();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newNumber((double) 9);
      Node node1 = new Node(9, node0, node0, node0, node0);
      node1.siblings();
      node0.setSourceEncodedPositionForTree(52);
      Node node2 = Node.newString("g6O)$", 42, 4095);
      node2.mayMutateArguments();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Set<String> set0 = jSDocInfo0.getSuppressions();
      node2.setDirectives(set0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.checkTreeEquals(node0);
      node2.isDebugger();
      node0.isGetElem();
      node2.toStringTree();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(1149, 1149, 1149);
      node0.getIntProp(1149);
      Node node1 = new Node(1, node0, node0, node0, node0, 19, 1969);
      node1.getAncestor(8);
      node1.setCharno((-2374));
      node1.type = (-1291);
      node1.isEquivalentTo(node0, false, true, false);
      node0.isExprResult();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node2 = Node.newString("hD453XbaZ>UOaU)", 54, (-283));
      node2.isComma();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "OBJECT_NUMBER_STRING_BOOLEAN";
      Node node0 = Node.newString("OBJECT_NUMBER_STRING_BOOLEAN", 1856, 3011);
      Node node1 = new Node(3011, node0);
      Node node2 = node1.removeFirstChild();
      InputId inputId0 = new InputId("OBJECT_NUMBER_STRING_BOOLEAN");
      inputId0.toString();
      node2.isFalse();
      node2.setChangeTime((-76));
      inputId0.toString();
      node0.copyInformationFromForTree(node1);
      node2.setInputId(inputId0);
      node1.getSourcePosition();
      node1.isString();
      node2.isRegExp();
      node0.isCase();
      try { 
        node0.setDouble(39);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING OBJECT_NUMBER_STRING_BOOLEAN [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000005] [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = Node.newString("Object#Element");
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      NoType noType0 = (NoType)modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) noType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      modificationVisitor0.caseNoType();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = jSTypeRegistry2.createParameters(jSTypeArray0);
      noType0.getPropertyNames();
      node2.srcrefTree(node0);
      // Undeclared exception!
      try { 
        node2.getChildBefore(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      node0.setWasEmptyNode(true);
      node0.isStringKey();
      node0.setDouble(32);
      node0.setVarArgs(true);
      node0.getJSDocInfo();
      Node node1 = new Node(100, node0);
      Node node2 = node0.getParent();
      node1.isLabel();
      node2.mayMutateGlobalStateOrThrow();
      Node node3 = Node.newNumber((double) 1, 40, 0);
      Node node4 = new Node(1073741824, node2, node2);
      node4.getIntProp(15);
      node0.setSourceEncodedPosition(113);
      node3.isComma();
      Node node5 = null;
      try {
        node5 = new Node(38, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node(79, 0, (-1532));
      Node node1 = new Node(74, node0, node0, 29, 2);
      Node node2 = Node.newNumber(199.0);
      node1.getDirectives();
      node0.setVarArgs(true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      node_SideEffectFlags0.setReturnsTainted();
      Node.newNumber((double) 53, 1856, 1);
      node1.isNE();
      node2.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      Node node0 = Node.newNumber((double) 1);
      node0.isExprResult();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("$hQD45XbaZ>UOaU~)", node0, templateType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.getPropertyNode("$hQD45XbaZ>UOaU~)");
      // Undeclared exception!
      try { 
        node0.useSourceInfoFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("$hQD45XbaZ>UOaU~)", "$hQD45XbaZ>UOaU~)", 54, 1);
      node0.setDouble(16);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Set<String> set0 = jSDocInfo0.getSuppressions();
      node0.setDirectives(set0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.checkTreeEquals(node0);
      node0.isDebugger();
      node0.isGetElem();
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      stack0.add((JSType) templateType0);
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.addChildrenToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Object#Key");
      stack0.add((JSType) templateType0);
      stack0.add((JSType) templateType0);
      simpleErrorReporter0.error("Object#Key", "p\")]I", 2, 56);
      node0.getProp(1);
      node0.setVarArgs(false);
      node0.getJSDocInfo();
      Node node1 = new Node(0, node0);
      node1.getParent();
      node0.isLabel();
      Node node2 = null;
      // Undeclared exception!
      try { 
        node1.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newNumber(2326.95);
      Node node1 = new Node(57, node0, node0, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      node2.appendStringTree(mockPrintWriter0);
      node2.isVarArgs();
      node2.getInputId();
      node1.isAdd();
      node2.isNumber();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags5.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 467;
      Node node0 = Node.newNumber(0.0, 130, 467);
      boolean boolean0 = true;
      node0.setWasEmptyNode(true);
      node0.setIsSyntheticBlock(false);
      node0.setDouble(0.0);
      Node node1 = Node.newNumber(1260.155608765);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = null;
      // Undeclared exception!
      try { 
        node2.srcrefTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node((-2447), 0, 0);
      node0.getIntProp(0);
      Node node1 = new Node((-2447), node0, node0, node0, node0, 55, 32);
      int int0 = (-962);
      node0.putIntProp((-2197), 48);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newString(26, "com.google.javascript.rhino.Node$AncestorIterable", 26, 26);
      Node node1 = new Node(1, node0, 3902, 48);
      node1.copyInformationFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      InputId inputId0 = new InputId("Dgl/ii*%p)c>");
      inputId0.toString();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node2.isFalse();
      inputId0.toString();
      Node node3 = node2.copyInformationFromForTree(node0);
      node1.getSourcePosition();
      node3.isString();
      node0.isRegExp();
      Node node4 = null;
      try {
        node4 = new Node(40, node0, node0, node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      stack0.add((JSType) templateType0);
      stack0.add((JSType) templateType0);
      simpleErrorReporter0.error("directives", "p\")]I", 2, 56);
      Locale locale0 = new Locale("]HE.N.pl*9R}_m1;:", "'qPnYp\"+");
      Locale locale1 = Locale.ITALY;
      jSTypeRegistry0.clearTemplateTypeNames();
      node0.isGetterDef();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      modificationVisitor0.caseNoType();
      JSType.toMaybeFunctionType((JSType) templateType0);
      node0.isInc();
      node0.setSourceFileForTesting("8UXh;TYSHYCW-1.");
      node0.isGetProp();
      node0.isSetterDef();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      stack0.add((JSType) templateType0);
      node0.isLabel();
      node0.children();
      node0.getInputId();
      Node node1 = new Node(52, 105, (-1));
      node0.isEquivalentToShallow(node1);
      Node node2 = new Node(55, node1, node1, node1, node1);
      Node node3 = new Node(31, node2);
      node3.getSourceFileName();
      Node node4 = Node.newNumber(0.0, 126, 30);
      node1.isNE();
      node2.isDelProp();
      node1.isNot();
      node0.getLength();
      Node node5 = Node.newNumber((double) 40);
      node5.checkTreeEqualsImpl(node4);
      node5.isBlock();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      stack0.add((JSType) templateType0);
      node0.setSourceEncodedPosition(50);
      node0.isDebugger();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('W');
      stringWriter1.append((CharSequence) "Object#Key");
      StringWriter stringWriter2 = new StringWriter(49);
      stringWriter2.append('{');
      stringWriter2.getBuffer();
      node0.appendStringTree(stringWriter1);
      // Undeclared exception!
      try { 
        node0.getAncestor((-1083));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 13;
      boolean boolean0 = true;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(2011, (Node) null, 53, 2011);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      Node node1 = Node.newString(47, "2K<>H>H", 153, 4);
      node1.isStringKey();
      node0.setDouble(32);
      Node.newString(32, "    ", 154, 50);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesThis();
      Node node2 = Node.newString("    ");
      node2.isAnd();
      node0.setVarArgs(false);
      node2.getBooleanProp((-2511));
      node0.isTrue();
      node2.isString();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newNumber(897.3);
      Locale locale0 = new Locale("length", "length");
      Locale locale1 = Locale.ITALY;
      node0.isGetterDef();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setCharno((-1856));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor1 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor1.caseNoType();
      JSType.toMaybeFunctionType(jSType0);
      node0.isInc();
      node0.setSourceFileForTesting("Object#Element");
      node0.isGetProp();
      node0.isSetterDef();
      node0.getProp(1);
      node0.isName();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isEquivalentTo(node1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node((-2447), 0, 0);
      node0.getIntProp(0);
      Node node1 = new Node((-2447), node0, node0, node0, node0, 55, 32);
      node1.isFromExterns();
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node0);
      node2.removeChildren();
      Node.newNumber((double) 4095);
      node1.isVoid();
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = new Node(79, 0, 0);
      Node node1 = new Node(74, node0, node0, 29, 2);
      Node node2 = Node.newNumber(199.0);
      Node[] nodeArray0 = new Node[1];
      Node node3 = new Node(2369, node2);
      nodeArray0[0] = node3;
      Node node4 = new Node((-557), nodeArray0, 38, 48);
      node3.isSetterDef();
      node3.isThrow();
      node0.getSourcePosition();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node2.putBooleanProp(40, false);
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags4.valueOf();
      node_SideEffectFlags1.setAllFlags();
      node4.isLocalResultCall();
      node3.isUnscopedQualifiedName();
      Node node5 = Node.newString("kRkLuPdUW%+&O;$", 57, 1628);
      node5.putIntProp(2, (-2960));
      node1.srcref(node3);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newString("o6gK");
      Node node1 = new Node((-477), node0, node0, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.isDo();
      Node.extractLineno(536870912);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      node2.isAnd();
      node0.setVarArgs(false);
      // Undeclared exception!
      try { 
        node1.removeChild(node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newString("", 2636, 2636);
      node0.setVarArgs(true);
      node0.getJSDocInfo();
      node0.isGetterDef();
      node0.setSourceFileForTesting("Not(");
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "capacity must be >= 0 but was %s";
      Node node0 = Node.newString(1366, "capacity must be >= 0 but was %s");
      node0.setLineno((-536870912));
      node0.setCharno((-536870912));
      Node node1 = new Node(53, node0, node0, node0, node0);
      node0.isUnscopedQualifiedName();
      node0.isString();
      node0.isLabel();
      node0.isEquivalentToShallow(node1);
      Node node2 = null;
      try {
        node2 = new Node(39, node1, node0, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(55, 1475, 15);
      node0.wasEmptyNode();
      node0.isIf();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      Node node1 = new Node(4095, node0, node0);
      node1.getJsDocBuilderForNode();
      node1.getLastChild();
      // Undeclared exception!
      try { 
        vector0.listIterator(39);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 39
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newString(2, "b}");
      Node node1 = new Node(1960, node0, 1170, 77);
      Node node2 = node0.copyInformationFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      InputId inputId0 = new InputId("b}");
      inputId0.toString();
      node1.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node2.isEquivalentToShallow(node1);
      inputId0.toString();
      Node node3 = node2.copyInformationFromForTree(node1);
      node0.setInputId(inputId0);
      node3.getSourcePosition();
      node0.isString();
      node3.isRegExp();
      node1.isCase();
      // Undeclared exception!
      try { 
        node0.setDouble(4818.3369);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(1475, 1475, 26);
      node0.wasEmptyNode();
      node0.isIf();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, true);
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      // Undeclared exception!
      try { 
        vector0.listIterator((-1428));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1428
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = new Node((-465), 0, 0);
      node0.setVarArgs(false);
      Node node1 = new Node(4095, node0);
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newNumber((double) 9);
      Node node1 = new Node(9, node0, node0, node0, node0);
      node1.siblings();
      node0.setSourceEncodedPositionForTree((-2533));
      node1.isUnscopedQualifiedName();
      Node node2 = new Node(31, 43, 46);
      node2.isString();
      node1.isLabel();
      node2.children();
      node2.getInputId();
      node1.isEquivalentToShallow(node2);
      Node node3 = new Node(50, node2, node1, node1, node1);
      node3.getSourceFileName();
      Node node4 = Node.newNumber((double) 57, 638, 15);
      node4.isNE();
      node0.isDelProp();
      node1.isNot();
      node2.getLength();
      Node node5 = Node.newNumber((double) 51);
      node3.checkTreeEqualsImpl(node5);
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newNumber((double) 9);
      Node node1 = new Node(9, node0, node0, node0, node0);
      node1.siblings();
      node0.getJSDocInfo();
      Node node2 = new Node(87, 1, 2377);
      Node node3 = node1.useSourceInfoFromForTree(node0);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node2;
      nodeArray0[1] = node3;
      nodeArray0[2] = node3;
      nodeArray0[3] = node2;
      nodeArray0[4] = node3;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      nodeArray0[7] = node2;
      Node node4 = null;
      try {
        node4 = new Node(43, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newString(2, "b}");
      Node node1 = new Node(1960, node0, 1170, 77);
      node0.copyInformationFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags4.setAllFlags();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Node node2 = new Node(130, node1);
      node2.putProp(2208, (Object) null);
      node2.isFalse();
      node2.isContinue();
      node2.isEquivalentToShallow(node1);
      node1.getBooleanProp(1);
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString((-1024), "1iW!*[;%saYL");
      Node node1 = new Node(48, node0, 1170, 4118);
      Node node2 = null;
      try {
        node2 = new Node(40, node0, 57, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = Node.newNumber((double) 38, 57, 57);
      Node node2 = Node.newNumber(628.714263792, 55, 110);
      node2.isUnscopedQualifiedName();
      Node node3 = new Node(48, 2, 29);
      node3.isString();
      node0.isLabel();
      node3.getInputId();
      node3.isEquivalentToShallow(node2);
      Node node4 = new Node((-3432), node3, node3, node1, node1);
      Node node5 = Node.newNumber((double) 38, 50, 13);
      node1.isNE();
      node0.isDelProp();
      node4.isNot();
      node1.getLength();
      node5.checkTreeTypeAwareEqualsImpl(node1);
      Node.extractLineno(39);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("$hQD45XbaZ>UOaU~)", "$hQD45XbaZ>UOaU~)", 54, 1);
      node0.setDouble(16);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.checkTreeEquals(node0);
      node0.isDebugger();
      node0.isGetElem();
      node_SideEffectFlags0.areAllFlagsSet();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(79, 0, (-1532));
      Node node1 = new Node(32);
      node1.setJSType((JSType) null);
      node0.isHook();
      node0.srcref(node1);
      node1.isCall();
      node0.isThrow();
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 79
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 3964, 3964);
      Node node1 = new Node(54, node0, node0, node0);
      Node node2 = node0.cloneNode();
      Node node3 = node1.removeChildren();
      node2.getInputId();
      node2.setSourceFileForTesting((String) null);
      node0.addChildrenToBack(node3);
      node3.setOptionalArg(false);
      node1.removeProp(54);
      node3.isOr();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node2;
      nodeArray0[1] = node1;
      Node node4 = new Node(1586, nodeArray0, 57, (-1327));
      node2.getQualifiedName();
      // Undeclared exception!
      try { 
        node4.addChildToBack(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(3269, "");
      nodeArray0[0] = node0;
      node0.setVarArgs(false);
      Node node1 = new Node(8, 555, 43);
      node0.addChildrenToFront(node1);
      node0.isAnd();
      node0.setVarArgs(false);
      node0.isScript();
      Node.newNumber((double) 53);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newString("OBJECT_NUMBER_STRING_BOOLEAN", 1856, 3011);
      Node node1 = new Node(3011, node0);
      Node node2 = node1.removeFirstChild();
      InputId inputId0 = new InputId("OBJECT_NUMBER_STRING_BOOLEAN");
      inputId0.toString();
      node2.isEquivalentToShallow(node0);
      inputId0.toString();
      node0.copyInformationFromForTree(node1);
      node2.setInputId(inputId0);
      node1.getSourcePosition();
      node1.isString();
      node2.isRegExp();
      node0.isCase();
      try { 
        node0.setDouble(39);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING OBJECT_NUMBER_STRING_BOOLEAN [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry1.createParameters((List<JSType>) stack0);
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType((String) null);
      stack0.add((JSType) templateType0);
      node0.setSourceEncodedPosition(0);
      node0.isDebugger();
      node0.setVarArgs(false);
      node0.isGetElem();
      Node node1 = new Node((-1459), node0, node0, node0, 48, 48);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      // Undeclared exception!
      try { 
        node2.replaceChild(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-4096), 35, 35);
      nodeArray0[0] = node0;
      node0.getJSDocInfo();
      Node node1 = new Node(119, 739, 29);
      nodeArray0[1] = node1;
      node1.useSourceInfoFromForTree(node1);
      Node node2 = new Node(37, nodeArray0);
      node1.getProp(147);
      node0.setVarArgs(true);
      node2.getJSDocInfo();
      Node node3 = new Node((-4096), node2);
      Node node4 = node0.getParent();
      node0.isLabel();
      node4.removeChild(node1);
      node1.isSwitch();
      node2.isThis();
      node4.checkTreeEqualsImpl(node1);
      node4.useSourceInfoFrom(node0);
      node2.isComma();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newString(2, "com.google.javascript.rhino.Node$AncestorIterable", 31, 31);
      Node node1 = new Node(0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(0, node1, node1, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = new Node(13, 13, 13);
      Node node1 = Node.newString((-1398), "com.google.javascript.rhino.jstype.EquivalenceMethod");
      Node node2 = new Node(3281, node1, node0, node0);
      node1.isFromExterns();
      node1.isSwitch();
      node0.isHook();
      node1.isScript();
      node1.isDebugger();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      // Undeclared exception!
      try { 
        node2.getChildAtIndex(86);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newString("o6gK");
      Node node1 = new Node((-477), node0, node0, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.isDo();
      Node.extractLineno(536870912);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      node1.isSwitch();
      Node node3 = null;
      try {
        node3 = new Node(52, node2, node1, node2, node0, 52, 38);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "length";
      Node node0 = Node.newString("length");
      Node node1 = Node.newString("$hQD45XbaZ>UOaU~)", 15, 0);
      node1.setSourceEncodedPositionForTree(48);
      node0.isGetterDef();
      node0.isEquivalentToShallow(node1);
      Object object0 = new Object();
      node1.putProp((-495), object0);
      // Undeclared exception!
      try { 
        node1.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id -495
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node((-2447), 0, 0);
      node0.getIntProp(0);
      node0.wasEmptyNode();
      Node node1 = new Node((-2447), node0, node0, node0, node0, 55, 32);
      node0.isFor();
      Node node2 = Node.newNumber((double) 12, 12, 101);
      node1.isFromExterns();
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      node3.removeChildren();
      Node.newNumber((-2830.38855714201));
      node0.isReturn();
      node2.isVoid();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node.extractLineno((-814));
      Node node0 = Node.newString("B }>O[28");
      Node node1 = new Node(40, 1757, 2011);
      node0.setVarArgs(true);
      Node node2 = new Node(186, 39, 116);
      node2.addChildrenToFront(node1);
      Node.newString("");
      node0.isAnd();
      node1.setVarArgs(true);
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = new Node((-2447), 0, 0);
      node0.getIntProp(0);
      node0.wasEmptyNode();
      Node node1 = new Node((-2447), node0, node0, node0, node0, 55, 32);
      node1.setLineno(29);
      node1.setCharno((-962));
      node0.isEquivalentTo(node1, true, true, false);
      node1.isExprResult();
      Node node2 = new Node((-2447), 52, 4);
      int int0 = 620;
      Node node3 = null;
      try {
        node3 = new Node(31, node0, node2, node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.checkTreeEquals(node0);
      node0.isDebugger();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newString(2, "b}");
      Node node1 = new Node(1960, node0, 1170, 77);
      node0.copyInformationFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags4.setAllFlags();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Node node2 = new Node(130, node1);
      node2.putProp(2208, (Object) null);
      node2.isFalse();
      node2.isContinue();
      node2.isEquivalentToShallow(node1);
      node1.getChildCount();
      node2.cloneNode();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newString("OBJECT_NUMBER_STRING_BOOLEAN", 1856, 3011);
      Node node1 = new Node(3011, node0);
      Node node2 = node1.removeFirstChild();
      InputId inputId0 = new InputId("OBJECT_NUMBER_STRING_BOOLEAN");
      inputId0.toString();
      node2.isEquivalentToShallow(node0);
      inputId0.toString();
      node0.copyInformationFromForTree(node1);
      node2.setInputId(inputId0);
      node1.getSourcePosition();
      node1.isString();
      node1.isName();
      node0.isCase();
      try { 
        node0.setDouble(39);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING OBJECT_NUMBER_STRING_BOOLEAN [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node.extractLineno((-814));
      String string0 = "B }>O[28";
      Node node0 = Node.newString("B }>O[28");
      node0.getDirectives();
      node0.isNew();
      String string1 = null;
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      stack0.add((JSType) templateType0);
      node0.setSourceEncodedPosition(50);
      node0.isDebugger();
      node0.setVarArgs(true);
      node0.isGetElem();
      Node node1 = new Node((-634), node0, node0, node0, 40, 56);
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      // Undeclared exception!
      try { 
        node1.replaceChild(node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = Node.newNumber(861.0, (-2633), 57);
      node1.isNot();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = Node.newString("Object#Element", 47, 42);
      node2.checkTreeEquals(node1);
      node0.isComma();
      node2.getChildCount();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = Node.newNumber((double) 9);
      Node node1 = new Node(9, node0, node0, node0, node0);
      node1.siblings();
      node0.setSourceEncodedPositionForTree((-2533));
      Node node2 = Node.newString("g6O)$", 42, 4095);
      node1.isInstanceOf();
      try { 
        node2.setDouble(0.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING g6O)$ 42 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = new Node((-503), 0, 0);
      node0.setVarArgs(true);
      Node node1 = new Node(1135, 40, 50);
      node1.addChildrenToFront(node0);
      Node node2 = Node.newString(" is not a number node");
      node2.isAnd();
      node0.setVarArgs(false);
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(50);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setAllFlags();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Object object0 = new Object();
      Node node0 = Node.newString("length");
      Node node1 = new Node(50, node0, node0, node0, 57, 4095);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      node1.putProp(93, templateType1);
      node0.isFalse();
      node1.isCall();
      node1.isDelProp();
      node1.isWhile();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-4096), 35, 35);
      nodeArray0[0] = node0;
      node0.getJSDocInfo();
      Node node1 = new Node(119, 739, 29);
      nodeArray0[1] = node1;
      node1.useSourceInfoFromForTree(node1);
      Node node2 = new Node((-2624), nodeArray0);
      node1.getProp(147);
      node0.setVarArgs(false);
      node2.getJSDocInfo();
      Node node3 = new Node((-4096), node2);
      Node node4 = node0.getParent();
      node0.isLabel();
      node4.removeChild(node1);
      node1.isSwitch();
      node2.isThis();
      node4.checkTreeEqualsImpl(node1);
      node4.useSourceInfoFrom(node0);
      node2.isComma();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 3964, 3964);
      node0.isOnlyModifiesArgumentsCall();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(38, nodeArray0, (-39), 51);
      node0.getQualifiedName();
      node1.getProp(857);
      Node.newString((-1829), "com.google.javascript.rhino.Node$NodeMismatch", 40, 40);
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = new Node((-2447), 0, 0);
      node0.getIntProp(0);
      node0.wasEmptyNode();
      Node node1 = Node.newString("d8tgT~Rv{m]jK`Pt'", (-5), 38);
      node0.setSourceEncodedPositionForTree(12);
      node1.isGetterDef();
      node0.isEquivalentToShallow(node1);
      node1.toString(true, false, true);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = new Node(13, 13, 13);
      Node node1 = new Node(13, node0, node0, node0, node0, 124, 2);
      node1.getIntProp(2);
      node1.isVoid();
      node1.isEquivalentToShallow(node0);
      Node node2 = Node.newString("3yXQgdTUy", (-1197), 988);
      Node node3 = node1.useSourceInfoFrom(node2);
      node3.isWhile();
      node0.isNot();
      node3.getSourceOffset();
      node2.getChangeTime();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor((JSTypeRegistry) null);
      ModificationVisitor modificationVisitor1 = new ModificationVisitor((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        modificationVisitor1.caseNoType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newString("o6gK");
      Node node1 = new Node((-477), node0, node0, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.isDo();
      Node.extractLineno(536870912);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      node2.isAnd();
      node0.setVarArgs(false);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = new Node(13, 13, 13);
      node0.setVarArgs(true);
      int int0 = 29;
      node0.setLineno(29);
      try { 
        node0.setDouble(13);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NE 29 [var_args_name: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = new Node(79, 0, (-1532));
      Node node1 = new Node(74, node0, node0, 29, 2);
      Node node2 = Node.newNumber(199.0);
      node0.setVarArgs(true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setAllFlags();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      node1.putProp(51, node_SideEffectFlags3);
      node1.isFalse();
      node2.isCall();
      node0.isEquivalentToShallow(node2);
      node0.isSetterDef();
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = new Node(79, 0, (-1532));
      Node node1 = Node.newString("IJ", 3091, 583);
      node0.setSourceEncodedPositionForTree(39);
      node0.isGetterDef();
      node0.isEquivalentToShallow(node1);
      // Undeclared exception!
      try { 
        node0.toString(false, false, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 79
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newString(2, "b}");
      Node node1 = new Node(51, node0, node0, node0, node0);
      node0.isFromExterns();
      node1.isSwitch();
      node0.isOnlyModifiesThisCall();
      node0.isHook();
      node0.isScript();
      node1.isDebugger();
      node0.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      // Undeclared exception!
      try { 
        node0.appendStringTree((Appendable) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node.mergeLineCharNo(141, 1089);
      Node node0 = new Node(592);
      node0.isFalse();
      node0.setWasEmptyNode(false);
      node0.getAncestor(1089);
      node0.getLength();
      // Undeclared exception!
      try { 
        node0.isEquivalentTo((Node) null, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(3269, "");
      nodeArray0[0] = node0;
      Node node1 = Node.newString("", 39, 15);
      Node.newString("");
      nodeArray0[1] = node1;
      node0.removeChildren();
      node0.getInputId();
      node0.addChildrenToBack(node0);
      Node node2 = null;
      try {
        node2 = new Node(4273, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString("legh", 671, 1902);
      node0.addSuppression("legh");
      node0.setSourceEncodedPosition(55);
      node0.isDebugger();
      node0.setVarArgs(false);
      node0.isGetElem();
      Node node1 = new Node(54, node0, node0, node0, (-421), 55);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newNumber((double) 9);
      Node node1 = new Node(9, node0, node0, node0, node0);
      boolean boolean0 = false;
      node1.siblings();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      node0.setDirectives(set0);
      node0.setSourceEncodedPositionForTree((-2533));
      Node node2 = Node.newString("g6O)$", 42, 4095);
      node2.mayMutateArguments();
      try { 
        node2.setDouble(0.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING g6O)$ 42 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newString((-1677), "not a StringNode", 671, (-1677));
      node0.setVarArgs(false);
      node0.removeProp(664);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      node0.setQuotedString();
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1677
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 8, 8);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(8);
      node0.setWasEmptyNode(true);
      node0.setIsSyntheticBlock(true);
      node0.setDouble(1.0);
      Node node1 = Node.newNumber(0.5);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = node1.srcrefTree(node2);
      Node node4 = node3.copyInformationFromForTree(node1);
      node2.isTry();
      node0.isSwitch();
      node2.isHook();
      node3.setLength(12);
      node2.isScript();
      node3.isDebugger();
      node1.hasOneChild();
      node2.isArrayLit();
      node3.removeFirstChild();
      node4.isBreak();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node.mergeLineCharNo(141, 1089);
      Node node0 = new Node(592);
      node0.isFalse();
      node0.setWasEmptyNode(false);
      node0.getAncestor(1089);
      node0.getLength();
      Node node1 = null;
      try {
        node1 = new Node(126, (Node) null, node0, (Node) null, (Node) null, 51, 4095);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newString(1705, "");
      Node node1 = new Node(2, node0, node0, node0);
      Node.newNumber((double) 55, 10, 37);
      node1.removeProp(32);
      node0.isOr();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node2 = null;
      try {
        node2 = new Node(55, nodeArray0, 15, 3424);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString(2011, "hD453XbaZ>UOaU~)", 13, 1932);
      node0.isLocalResultCall();
      node0.isStringKey();
      node0.mayMutateGlobalStateOrThrow();
      node0.isGetterDef();
      Node node1 = new Node(2320, node0, node0, (-443), 110);
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(1429, "");
      nodeArray0[0] = node0;
      Node node1 = new Node(57, node0, node0, node0);
      nodeArray0[1] = node1;
      node1.removeProp(4095);
      node1.isEquivalentTo(node1);
      Node node2 = Node.newNumber(1.0, 1542, 0);
      node1.isHook();
      node0.isCall();
      node0.isThrow();
      node0.srcref(node0);
      node2.addSuppression("l128Q<K[");
      node0.getJsDocBuilderForNode();
      node1.getChildCount();
      node1.setChangeTime(2110);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 3964, 3964);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(38, nodeArray0, (-39), 51);
      node0.getJSDocInfo();
      node0.getInputId();
      node0.setInputId((InputId) null);
      node1.isComma();
      node1.isReturn();
      node0.siblings();
      node1.hasChildren();
      try { 
        node0.setString("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 3964 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = new Node(2076, 2076, 0);
      Node node1 = Node.newString((-2325), "first new child has existing sibling");
      Node node2 = new Node(1, node1, node0, node1);
      node1.setCharno((-760));
      node0.isEquivalentTo(node1, false, true, false);
      node0.isAssignAdd();
      node2.useSourceInfoIfMissingFrom(node1);
      Node node3 = null;
      try {
        node3 = new Node(36, node1, node2, node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newString(26, "com.google.javascript.rhino.Node$AncestorIterable", 26, 26);
      Node node1 = new Node(1, node0, 3902, 48);
      Node node2 = node1.copyInformationFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      node2.putProp(55, node_SideEffectFlags0);
      node1.isFalse();
      node0.isContinue();
      node2.isEquivalentToShallow(node1);
      node1.getBooleanProp(626692);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = new Node(79, (-16), (-16));
      Node node1 = new Node(32);
      node1.getSourceFileName();
      Node node2 = new Node(50, node1);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node[] nodeArray0 = new Node[6];
      Node node0 = Node.newString(3269, "");
      nodeArray0[0] = node0;
      Node node1 = new Node(57, node0, node0, node0);
      node1.isOnlyModifiesArgumentsCall();
      nodeArray0[1] = node1;
      Node node2 = Node.newNumber((-4.319946343), 1542, 0);
      nodeArray0[2] = node2;
      node2.isUnscopedQualifiedName();
      node0.isString();
      node1.isLabel();
      node1.isFor();
      node1.getIndexOfChild(node1);
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 3964, 3964);
      node0.setVarArgs(false);
      Node node1 = new Node(50, (-259), (-952));
      node1.type = 4;
      Node node2 = Node.newString("$hQD45XbaZ>UOaU~)");
      node2.getStaticSourceFile();
      node2.toString(false, true, false);
      // Undeclared exception!
      try { 
        node2.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newString(1429, "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getIntProp(32);
      node1.isVoid();
      node1.isEquivalentToShallow(node0);
      Node node2 = Node.newString(">b77BLR45IUD", 128, (-94));
      Node node3 = node1.useSourceInfoFrom(node2);
      node0.isWhile();
      node0.isNot();
      node2.getSourceOffset();
      node3.getChangeTime();
      node2.isEmpty();
      jSTypeRegistry0.forwardDeclareType("Sn:Z");
      node2.addChildToFront(node0);
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(47);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 47
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newString("o6gK");
      node0.isQualifiedName();
      Node node1 = new Node((-477), node0, node0, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = null;
      try {
        node2 = new Node(2, node0, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = new Node((-503), 0, 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Node node1 = new Node(54, node0, node0, 48, 2982);
      Node node2 = Node.newNumber((double) 4095);
      Node node3 = new Node(57, node1);
      Node[] nodeArray0 = new Node[0];
      Node node4 = new Node(2675, nodeArray0, 0, 47);
      node1.isSetterDef();
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      node4.isEmpty();
      jSTypeRegistry0.forwardDeclareType("empty_block");
      node1.addChildToFront(node2);
      // Undeclared exception!
      try { 
        node2.getExistingIntProp(38);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 38
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = Node.newNumber(871.50342091, (-1633), (-1633));
      Node node1 = new Node(42, node0, node0, node0, 154, (-2120));
      node1.mayMutateGlobalStateOrThrow();
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.getNext();
      node1.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      String string0 = "]HE.N.pl*9R}_m1;:";
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      stack0.add((JSType) templateType0);
      stack0.add((JSType) templateType0);
      simpleErrorReporter0.error("directives", "p\")]I", 2, 56);
      Locale locale0 = new Locale("]HE.N.pl*9R}_m1;:", "'qPnYp\"+");
      Locale locale1 = Locale.ITALY;
      locale0.getDisplayScript(locale1);
      locale0.getDisplayName();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      try { 
        node0.setDouble(0.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000338] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      node0.setWasEmptyNode(true);
      Node node1 = Node.newString(47, "2K<>H>H", 153, 4);
      node1.isStringKey();
      node0.setDouble(32);
      Node node2 = Node.newString(32, "    ", 154, 50);
      node2.setVarArgs(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node0.removeFirstChild();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags5.clearSideEffectFlags();
      node0.setVarArgs(false);
      node2.isGetElem();
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newString("}bC", 1618, (-259));
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newString("length");
      Node node1 = new Node(49, 102, 16);
      Node node2 = new Node(4095);
      node2.setJSType((JSType) null);
      node1.isHook();
      node0.isCall();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = null;
      jSTypeArray0[1] = null;
      jSTypeArray0[2] = null;
      jSTypeArray0[3] = null;
      jSTypeArray0[4] = null;
      node0.isThrow();
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node[] nodeArray0 = new Node[6];
      Node node0 = Node.newString(3269, "");
      nodeArray0[0] = node0;
      Node node1 = new Node(57, node0, node0, node0);
      nodeArray0[1] = node1;
      Node node2 = Node.newNumber((-4.319946343), 1542, 0);
      nodeArray0[2] = node2;
      node2.isUnscopedQualifiedName();
      node0.isString();
      node1.isLabel();
      node1.isFor();
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = new Node((-503), 0, 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[6] = jSType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      modificationVisitor0.caseNoType();
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node1;
      nodeArray0[1] = node2;
      nodeArray0[2] = node2;
      nodeArray0[3] = node1;
      Node node3 = null;
      try {
        node3 = new Node(57, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newString(2011, "hD453XbaZ>UOaU~)", (-6), 44);
      node0.children();
      node0.isCase();
      boolean boolean0 = false;
      Node node1 = null;
      try {
        node1 = new Node(39, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(3269, "");
      nodeArray0[0] = node0;
      Node node1 = new Node(57, node0, node0, node0);
      node0.cloneNode();
      nodeArray0[1] = node1;
      node0.removeChildren();
      node0.getInputId();
      // Undeclared exception!
      try { 
        node0.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = Node.newString("length");
      Node node1 = Node.newString("$hQD45XbaZ>UOaU~)", 15, 0);
      node1.setSourceEncodedPositionForTree(48);
      node0.isGetterDef();
      node0.isEquivalentToShallow(node1);
      Node node2 = Node.newString(51, "q&2bu", 39, 1);
      node0.setVarArgs(true);
      node0.removeProp(8287);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      node0.setQuotedString();
      try { 
        node2.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // IN q&2bu 39 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      node0.setWasEmptyNode(true);
      Node node1 = Node.newString(47, "2K<>H>H", 153, 4);
      node1.isStringKey();
      node0.setDouble(32);
      node0.toString(false, true, false);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node.mergeLineCharNo(141, 1089);
      Node node0 = new Node(592);
      node0.isFalse();
      node0.setWasEmptyNode(false);
      node0.getAncestor(1089);
      node0.getLength();
      int int0 = (-3567);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 592
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = new Node((-508), (-31), 29);
      node0.isFromExterns();
      node0.isFromExterns();
      Iterable<Node> iterable0 = new Vector<Node>(4);
      node0.getChangeTime();
      Node node1 = Node.newNumber(897.3);
      node0.isThrow();
      node1.setLength(16);
      node1.isLocalResultCall();
      node1.isSetterDef();
      node1.isWhile();
      node1.isStringKey();
      Node node2 = Node.newNumber((double) 2);
      node2.getFirstChild();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = 3269;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(1849, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = new Node(0, 0, 16384);
      node0.wasEmptyNode();
      boolean boolean0 = false;
      node0.isIf();
      node0.isThis();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      // Undeclared exception!
      try { 
        vector0.listIterator(43);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(3269, "");
      nodeArray0[0] = node0;
      Node node1 = new Node(57, node0, node0, node0);
      nodeArray0[1] = node1;
      Node node2 = Node.newNumber(1.0, 1542, 0);
      nodeArray0[2] = node2;
      node2.isUnscopedQualifiedName();
      node0.isString();
      node2.hasOneChild();
      node1.isFor();
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = new Node(79, 0, (-1532));
      Node node1 = new Node(32);
      node1.setJSType((JSType) null);
      node0.isHook();
      node1.isCall();
      node0.isThrow();
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 79
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newString(26, "com.google.javascript.rhino.Node$AncestorIterable", 26, 26);
      Node node1 = new Node(1, node0, 3902, 48);
      Node node2 = node1.copyInformationFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      node2.putProp(55, node_SideEffectFlags0);
      node1.isFalse();
      node0.isCall();
      node2.isEquivalentToShallow(node1);
      node1.getBooleanProp(626692);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 130, 467);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
      enumType0.toMaybeEnumType();
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) enumType0;
      jSTypeArray0[2] = jSType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      modificationVisitor0.caseNoType();
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      JSType.toMaybeFunctionType((JSType) objectType0);
      node0.isInc();
      node1.setSourceFileForTesting("IsInstanceOf(");
      node1.isGetProp();
      node0.getInputId();
      node1.getLineno();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-759), 79);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      Node node1 = null;
      try {
        node1 = new Node(15, nodeArray0, 906, 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newString("length", 671, 1902);
      node0.setSourceEncodedPositionForTree((-1532));
      node0.isThis();
      node0.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(3269, "");
      nodeArray0[0] = node0;
      Node node1 = new Node(57, node0, node0, node0);
      nodeArray0[1] = node1;
      Node.newString("appendable", 57, 2);
      node0.isComma();
      node0.getAncestors();
      Node.newString(153, "", 49, 1385);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = new Node(79, 0, (-1532));
      Node node1 = new Node(32);
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newString("length");
      Node node1 = Node.newString("$hQD45XbaZ>UOaU~)", 15, 0);
      node1.setSourceEncodedPositionForTree(48);
      node0.isGetterDef();
      node0.isEquivalentToShallow(node1);
      node0.toString(true, true, false);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newString(110, "K-%r[KUsa,BzCqrN&");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node.newString(55, "");
      node0.putBooleanProp(42, true);
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = Node.newString(26, "com.google.javascript.rhino.Node$AncestorIterable", 26, 26);
      Node node1 = new Node(1, node0, 3902, 48);
      Node node2 = node1.copyInformationFromForTree(node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      node2.putProp(55, node_SideEffectFlags0);
      node1.isFalse();
      node0.isCall();
      node2.isEquivalentToShallow(node1);
      node0.toString(false, true, false);
      node2.isScript();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node.newNumber(0.0, 3964, 3964);
      // Undeclared exception!
      try { 
        Node.newString((String) null, 33, 151);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 130, 467);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) enumType1;
      jSTypeArray0[1] = (JSType) enumType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = (JSType) enumType1;
      jSTypeArray0[4] = (JSType) enumType0;
      jSTypeArray0[5] = (JSType) enumType1;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      JSType jSType1 = modificationVisitor0.caseNoType();
      JSType.toMaybeFunctionType(jSType1);
      node0.isInc();
      node0.setSourceFileForTesting("com.google.common.collect.RegularImmutableTable$Values");
      node1.isGetProp();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newString(26, "com.google.javascript.rhino.Node$AncestorIterable", 26, 26);
      Node node1 = new Node((-757), node0, 3902, 48);
      node1.copyInformationFromForTree(node0);
      node1.wasEmptyNode();
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.getLength();
      node0.getProp(1453);
      node1.isOnlyModifiesThisCall();
      node1.getSourceOffset();
      node2.setLineno(55);
      node1.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags4.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags();
      node_SideEffectFlags5.setMutatesArguments();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString("length");
      Node node1 = new Node(36, node0, node0, node0, node0);
      node1.setSourceEncodedPositionForTree(48);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = node1.clonePropsFrom(node0);
      node0.isGetterDef();
      Node node4 = new Node(1, node1, node2, node1, 39, 49);
      node2.srcrefTree(node3);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$AncestorIterable", 26, 26);
      Node node1 = new Node((-757), node0, 3902, 48);
      Node node2 = node1.copyInformationFromForTree(node0);
      node1.wasEmptyNode();
      Node node3 = null;
      try {
        node3 = new Node(32, node2, node0, node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(3269, "");
      nodeArray0[0] = node0;
      Node node1 = new Node(57, node0, node0, node0);
      nodeArray0[1] = node1;
      Node node2 = Node.newNumber(1.0, 1542, 0);
      nodeArray0[2] = node2;
      node1.removeProp(55);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("%2zfU*}cB,f(p)]", false);
      node1.setStaticSourceFile(simpleSourceFile0);
      node1.isOr();
      Node node3 = null;
      try {
        node3 = new Node(3269, nodeArray0, 0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = new Node(79, 79, 79);
      Node node1 = new Node(32);
      Node node2 = new Node(50, node1);
      node2.useSourceInfoFromForTree(node0);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = new Node((-503), 0, 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Node node1 = new Node(54, node0, node0, 48, 2982);
      Node.newNumber((double) 4095);
      Node node2 = new Node(57, node1);
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(2675, nodeArray0, 0, 47);
      node1.isSetterDef();
      node3.getDirectives();
      Node node4 = new Node(8, (-3788), 48);
      int int0 = 148;
      Node node5 = null;
      try {
        node5 = new Node(980, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newString("length");
      Node node1 = Node.newString("$hQD45XbaZ>UOaU~)", 15, 0);
      node1.setSourceEncodedPositionForTree(48);
      node1.useSourceInfoIfMissingFromForTree(node0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(53, nodeArray0);
      node2.isAnd();
      node0.setVarArgs(true);
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 3964, 3964);
      node0.setVarArgs(false);
      Node node1 = new Node(50, (-259), (-952));
      node1.type = 53;
      node0.setSourceEncodedPosition(4);
      node0.addChildrenToFront(node1);
      node0.isAnd();
      node0.setVarArgs(true);
      node1.isScript();
      Node.newString("", (-1790), 50);
      node0.setOptionalArg(false);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node.extractCharno((-97));
      Node.mergeLineCharNo(3999, (-97));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("", "pcIs*ng;ZnT-AZG", (-4592), (-97));
      simpleErrorReporter0.warning("pcIs*ng;ZnT-AZG", "pcIs*ng;ZnT-AZG", 1271, (-688));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      // Undeclared exception!
      try { 
        ImmutableList.of((JSType) null, (JSType) null, (JSType) null, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      simpleErrorReporter0.error("Object#Key", "Object#Element", (-1611), (-1270));
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Iterable<? extends JSType>) immutableList0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      simpleErrorReporter0.error("", "The new child node already has a parent.", 15, 42);
      Node node1 = node0.cloneTree();
      node1.setCharno(8);
      Node node2 = Node.newString(26, "Object#Element", (-388), 37);
      int int0 = (-4327);
      JSType[] jSTypeArray0 = new JSType[6];
      JSType[] jSTypeArray1 = new JSType[9];
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      jSTypeArray1[0] = (JSType) functionType0;
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) functionType0, (Map<TemplateType, JSType>) hashMap0);
      TemplateTypeMap templateTypeMap0 = templatizedType0.getTemplateTypeMap();
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
      JSType jSType0 = templateTypeMapReplacer0.caseNoType();
      jSTypeArray1[1] = jSType0;
      JSType jSType1 = templateTypeMapReplacer0.caseBooleanType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("tS0f7|@RzDLG1V(JgC@", node2, jSType1);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      ObjectType objectType0 = enumType1.getImplicitPrototype();
      jSTypeArray1[2] = (JSType) objectType0;
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, templatizedType0);
      jSTypeArray1[3] = (JSType) functionType1;
      JSType jSType2 = templateTypeMapReplacer0.caseNoType();
      jSTypeArray1[4] = jSType2;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createConstructorType((JSType) functionType1, true, jSTypeArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = new Node(0, 2076, 2076);
      Node node1 = Node.newString(56, "");
      Node node2 = new Node(50, node0, node0, node1);
      node2.setCharno(55);
      node1.isEquivalentTo(node0, false, false, false);
      Node node3 = new Node(6003);
      node0.getSourceFileName();
      Node node4 = null;
      try {
        node4 = new Node((-6932), node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "{;{BTex)oG%{R";
      Node node0 = Node.newString("{;{BTex)oG%{R");
      node0.getQualifiedName();
      node0.setVarArgs(false);
      node0.setLineno(117);
      Node node1 = new Node((-1161), node0);
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      node0.setWasEmptyNode(true);
      Node node1 = Node.newString(47, "2K<>H>H", 153, 4);
      node1.isStringKey();
      node0.setDouble(32);
      Node node2 = Node.newString(32, "    ", 154, 50);
      node2.setVarArgs(false);
      node2.removeProp(2);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter2, true);
      node2.setQuotedString();
      try { 
        node2.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TYPEOF      154 [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000341] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = "length";
      Node node0 = Node.newString("length");
      Node node1 = Node.newString("hD453XbaZ>UOaU~)", 15, 0);
      Node node2 = new Node((-505), node1);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node3 = null;
      try {
        node3 = new Node(128, (Node) null, node0, node2, (-505), 55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = new Node(79, 0, (-1532));
      int int0 = 74;
      Node node1 = new Node(74, node0, node0, 29, 2);
      Node node2 = Node.newNumber(199.0);
      Node[] nodeArray0 = new Node[1];
      Node node3 = new Node(2369, node2);
      nodeArray0[0] = node3;
      Node node4 = new Node((-557), nodeArray0, 38, 48);
      node3.isSetterDef();
      node3.getDirectives();
      Node node5 = new Node(57, 4, 2);
      int int1 = 1457;
      Node node6 = null;
      try {
        node6 = new Node(4, node2, node0, node5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = Node.newString("hD453XbaZ>UOaU~)", 1116, 101);
      node0.setSourceEncodedPositionForTree(1116);
      Node node1 = Node.newString("");
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.useSourceInfoFromForTree(node2);
      // Undeclared exception!
      try { 
        node2.clonePropsFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newString("length");
      Node node1 = Node.newString(56, "$hQD45XbaZ>UOaU~)", 63, 1);
      Node node2 = new Node(55, node1, node1, node1);
      node2.children();
      Node node3 = null;
      try {
        node3 = new Node(55, node1, node2, node2, node0, 62, (-2929));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = new Node((-503), 0, 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[6] = jSType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      modificationVisitor0.caseNoType();
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        node2.getChildBefore(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newNumber((-55.34420070904429));
      Node node1 = new Node(51, node0, node0, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-240));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      node_SideEffectFlags5.setAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node2.getJSDocInfo();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node2;
      nodeArray0[3] = node1;
      nodeArray0[4] = node2;
      Node node3 = null;
      try {
        node3 = new Node(127, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = new Node((-503), 0, 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = jSType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      jSTypeArray0[2] = (JSType) enumType1;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[6] = jSType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      modificationVisitor0.caseNoType();
      JSType.toMaybeFunctionType(jSType0);
      node0.isInc();
      node1.setSourceFileForTesting("7E5u");
      node1.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.setDouble(16);
      node0.setWasEmptyNode(true);
      node0.setIsSyntheticBlock(true);
      node0.setDouble(1.0);
      Node node1 = Node.newNumber(0.5);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = node1.srcrefTree(node2);
      node2.isTry();
      node1.isFromExterns();
      node0.isSwitch();
      node2.isHook();
      node2.isScript();
      node3.isDebugger();
      node1.hasOneChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.setAllFlags();
      node3.getJsDocBuilderForNode();
      node0.addChildToBack(node2);
      node0.setSourceEncodedPosition(56);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = new Node(79, 0, (-1532));
      Node node1 = new Node(74, node0, node0, 29, 2);
      Node node2 = Node.newNumber(199.0);
      Node[] nodeArray0 = new Node[1];
      Node node3 = new Node(2369, node2);
      nodeArray0[0] = node3;
      Node node4 = new Node((-557), nodeArray0, 38, 48);
      node3.isSetterDef();
      node3.getDirectives();
      Node node5 = new Node(57, 4, 2);
      int int0 = 40;
      // Undeclared exception!
      try { 
        node3.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2369
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = new Node(0, 2076, 2076);
      Node node1 = Node.newString(56, "");
      Node node2 = new Node(50, node0, node0, node1);
      node2.setCharno(55);
      node1.isEquivalentTo(node0, false, false, false);
      node0.isAssignAdd();
      Node node3 = node0.useSourceInfoIfMissingFrom(node1);
      Node node4 = null;
      try {
        node4 = new Node(16384, node0, node3, node3, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = new Node(79, 13, 13);
      Node node1 = new Node(32);
      node0.isEquivalentTo(node0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = Node.newString((-2532), "");
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = new Node((-2447), 0, 0);
      assertNotNull(node0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      Node node1 = new Node(978, node0, 4095, 8);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertEquals(8, node1.getCharno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTrue());
      assertEquals(4095, node1.getLineno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertEquals(16773128, node1.getSourcePosition());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isIf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isIn());
      assertEquals(978, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      Node node2 = node1.copyInformationFromForTree(node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isIf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isIn());
      assertEquals(978, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertEquals(0, node1.getLineno());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertEquals(978, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isTry());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isSetterDef());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      
      boolean boolean0 = node1.wasEmptyNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isIf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isIn());
      assertEquals(978, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertEquals(0, node1.getLineno());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node3 = node2.useSourceInfoFromForTree(node0);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node3);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertSame(node3, node1);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isIf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isIn());
      assertEquals(978, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertEquals(0, node1.getLineno());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertEquals(978, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isTry());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isSetterDef());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isAdd());
      assertFalse(node3.isBlock());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNew());
      assertFalse(node3.isVar());
      assertFalse(node3.isWhile());
      assertFalse(node3.isContinue());
      assertEquals(0, node3.getLineno());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isParamList());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.isCast());
      assertFalse(node3.isFunction());
      assertFalse(node3.isTry());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isFor());
      assertFalse(node3.isIn());
      assertFalse(node3.isRegExp());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCatch());
      assertFalse(node3.isWith());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isInstanceOf());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isThis());
      assertFalse(node3.isInc());
      assertFalse(node3.isComma());
      assertFalse(node3.isHook());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isCase());
      assertFalse(node3.isScript());
      assertFalse(node3.isString());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isAssign());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isEmpty());
      assertEquals(978, node3.getType());
      assertFalse(node3.isLabel());
      assertFalse(node3.isDec());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isReturn());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isVoid());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isTrue());
      assertFalse(node3.isOr());
      assertEquals(0, node3.getSourcePosition());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isNull());
      
      int int0 = node0.getLength();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertEquals(0, int0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      
      Object object0 = node2.getProp(41);
      assertNull(object0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node3);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isIf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isIn());
      assertEquals(978, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertEquals(0, node1.getLineno());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertEquals(978, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isTry());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isSetterDef());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      
      boolean boolean1 = node3.isOnlyModifiesThisCall();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node3);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertSame(node3, node1);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isIf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isIn());
      assertEquals(978, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertEquals(0, node1.getLineno());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertEquals(978, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isTry());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isSetterDef());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isAdd());
      assertFalse(node3.isBlock());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNew());
      assertFalse(node3.isVar());
      assertFalse(node3.isWhile());
      assertFalse(node3.isContinue());
      assertEquals(0, node3.getLineno());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isParamList());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.isCast());
      assertFalse(node3.isFunction());
      assertFalse(node3.isTry());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isFor());
      assertFalse(node3.isIn());
      assertFalse(node3.isRegExp());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCatch());
      assertFalse(node3.isWith());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isInstanceOf());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isThis());
      assertFalse(node3.isInc());
      assertFalse(node3.isComma());
      assertFalse(node3.isHook());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isCase());
      assertFalse(node3.isScript());
      assertFalse(node3.isString());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isAssign());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isEmpty());
      assertEquals(978, node3.getType());
      assertFalse(node3.isLabel());
      assertFalse(node3.isDec());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isReturn());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isVoid());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isTrue());
      assertFalse(node3.isOr());
      assertEquals(0, node3.getSourcePosition());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isNull());
      
      int int1 = node1.getSourceOffset();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node3);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isIf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isIn());
      assertEquals(978, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertEquals(0, node1.getLineno());
      
      node0.setLineno(8);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertEquals(32768, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertEquals(8, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      
      boolean boolean2 = node1.isTypeOf();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node3);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertEquals(32768, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertEquals(8, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isIf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isIn());
      assertEquals(978, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertEquals(0, node1.getLineno());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      assertNotNull(immutableList0);
      assertEquals(0, immutableList0.size());
      
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      assertNotNull(node4);
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertNotSame(node4, node2);
      assertNotSame(node4, node1);
      assertNotSame(node4, node3);
      assertNotSame(node4, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, immutableList0.size());
      assertEquals(83, node4.getType());
      assertFalse(node4.isComma());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isBreak());
      assertFalse(node4.isThis());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isThrow());
      assertFalse(node4.isHook());
      assertFalse(node4.isWith());
      assertFalse(node4.isFalse());
      assertFalse(node4.isScript());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isCase());
      assertFalse(node4.isAnd());
      assertFalse(node4.isSwitch());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isNot());
      assertFalse(node4.isString());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNumber());
      assertTrue(node4.isParamList());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isReturn());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAssign());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDo());
      assertFalse(node4.isNew());
      assertFalse(node4.isVoid());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isAdd());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isOr());
      assertFalse(node4.isNull());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isName());
      assertFalse(node4.isVar());
      assertFalse(node4.isCatch());
      assertFalse(node4.isCall());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isBlock());
      assertFalse(node4.isTry());
      assertFalse(node4.isWhile());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isNE());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isFor());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isIf());
      assertFalse(node4.isCast());
      assertFalse(node4.isContinue());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isFunction());
      assertFalse(node4.isInc());
      assertFalse(node4.isIn());
      
      Node node5 = node2.useSourceInfoIfMissingFromForTree(node4);
      assertNotNull(node5);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node4));
      assertNotSame(node0, node1);
      assertNotSame(node0, node4);
      assertNotSame(node0, node2);
      assertNotSame(node0, node5);
      assertNotSame(node0, node3);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node5);
      assertNotSame(node1, node4);
      assertSame(node1, node3);
      assertSame(node2, node5);
      assertSame(node2, node3);
      assertNotSame(node2, node4);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertNotSame(node4, node2);
      assertNotSame(node4, node1);
      assertNotSame(node4, node3);
      assertNotSame(node4, node5);
      assertNotSame(node4, node0);
      assertSame(node5, node1);
      assertSame(node5, node2);
      assertSame(node5, node3);
      assertNotSame(node5, node0);
      assertNotSame(node5, node4);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isIn());
      assertEquals(978, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getCharno());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertEquals(978, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isTry());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCatch());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertFalse(node2.isNew());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, immutableList0.size());
      assertEquals(83, node4.getType());
      assertFalse(node4.isComma());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isBreak());
      assertFalse(node4.isThis());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isThrow());
      assertFalse(node4.isHook());
      assertFalse(node4.isWith());
      assertFalse(node4.isFalse());
      assertFalse(node4.isScript());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isCase());
      assertFalse(node4.isAnd());
      assertFalse(node4.isSwitch());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isNot());
      assertFalse(node4.isString());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNumber());
      assertTrue(node4.isParamList());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isReturn());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAssign());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDo());
      assertFalse(node4.isNew());
      assertFalse(node4.isVoid());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isAdd());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isOr());
      assertFalse(node4.isNull());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isName());
      assertFalse(node4.isVar());
      assertFalse(node4.isCatch());
      assertFalse(node4.isCall());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isBlock());
      assertFalse(node4.isTry());
      assertFalse(node4.isWhile());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isNE());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isFor());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isIf());
      assertFalse(node4.isCast());
      assertFalse(node4.isContinue());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isFunction());
      assertFalse(node4.isInc());
      assertFalse(node4.isIn());
      assertFalse(node5.isAdd());
      assertFalse(node5.isBlock());
      assertFalse(node5.isNew());
      assertFalse(node5.isCall());
      assertFalse(node5.isWhile());
      assertFalse(node5.isDo());
      assertFalse(node5.isVar());
      assertFalse(node5.isLabel());
      assertFalse(node5.isNumber());
      assertFalse(node5.isContinue());
      assertFalse(node5.isLabelName());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isParamList());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isDebugger());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isAssign());
      assertFalse(node5.isDec());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isReturn());
      assertFalse(node5.isOr());
      assertFalse(node5.isComma());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isNull());
      assertFalse(node5.isBreak());
      assertFalse(node5.isTrue());
      assertFalse(node5.isVoid());
      assertFalse(node5.isName());
      assertFalse(node5.isHook());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isInc());
      assertFalse(node5.isFalse());
      assertFalse(node5.isString());
      assertFalse(node5.isCase());
      assertFalse(node5.isThis());
      assertFalse(node5.isThrow());
      assertFalse(node5.isGetProp());
      assertEquals(978, node5.getType());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isNot());
      assertFalse(node5.isAnd());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isTry());
      assertFalse(node5.isFunction());
      assertFalse(node5.isCast());
      assertFalse(node5.isScript());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isFor());
      assertEquals(1, node5.getChildCount());
      assertEquals((-1), node5.getLineno());
      assertTrue(node5.hasChildren());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isCatch());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isWith());
      assertFalse(node5.isIn());
      assertFalse(node5.isNE());
      assertFalse(node5.isIf());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = new Node(79, 0, (-1532));
      assertNotNull(node0);
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals(79, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      
      Node node1 = new Node(74, node0, node0, 29, 2);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals(79, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(29, node1.getLineno());
      assertFalse(node1.isCatch());
      assertEquals(118786, node1.getSourcePosition());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNot());
      assertEquals(74, node1.getType());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertEquals(2, node1.getCharno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node node2 = Node.newNumber(199.0);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertTrue(node2.isNumber());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNot());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetElem());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCall());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVar());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertEquals(39, node2.getType());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isScript());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIn());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      Node[] nodeArray0 = new Node[1];
      Node node3 = new Node(2369, node2);
      assertNotNull(node3);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertTrue(node2.isNumber());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNot());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetElem());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCall());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVar());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertEquals(39, node2.getType());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isScript());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIn());
      assertFalse(node3.isIf());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isNE());
      assertFalse(node3.isFor());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isGetterDef());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isInc());
      assertFalse(node3.isTrue());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isBreak());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isFalse());
      assertFalse(node3.isComma());
      assertFalse(node3.isThrow());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isString());
      assertEquals(2369, node3.getType());
      assertFalse(node3.isContinue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isFunction());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isCast());
      assertFalse(node3.isAnd());
      assertFalse(node3.isNumber());
      assertFalse(node3.isDec());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isLabel());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isReturn());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isWhile());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isBlock());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isWith());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isName());
      assertFalse(node3.isParamList());
      assertFalse(node3.isThis());
      assertFalse(node3.isNull());
      assertFalse(node3.isHook());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isNew());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isScript());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isLabelName());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      nodeArray0[0] = node3;
      Node node4 = node0.removeChildren();
      assertNull(node4);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals(79, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      
      InputId inputId0 = node3.getInputId();
      assertNull(inputId0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertTrue(node2.isNumber());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNot());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetElem());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCall());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVar());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertEquals(39, node2.getType());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isScript());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIn());
      assertFalse(node3.isIf());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isNE());
      assertFalse(node3.isFor());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isGetterDef());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isInc());
      assertFalse(node3.isTrue());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isBreak());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isFalse());
      assertFalse(node3.isComma());
      assertFalse(node3.isThrow());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isString());
      assertEquals(2369, node3.getType());
      assertFalse(node3.isContinue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isFunction());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isCast());
      assertFalse(node3.isAnd());
      assertFalse(node3.isNumber());
      assertFalse(node3.isDec());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isLabel());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isReturn());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isWhile());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isBlock());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isWith());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isName());
      assertFalse(node3.isParamList());
      assertFalse(node3.isThis());
      assertFalse(node3.isNull());
      assertFalse(node3.isHook());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isNew());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isScript());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isLabelName());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      // Undeclared exception!
      try { 
        node3.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newString("length");
      assertNotNull(node0);
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node1 = Node.newString("$hQD45XbaZ>UOaU~)", 15, 0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertEquals(61440, node1.getSourcePosition());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertEquals(15, node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      
      node1.setSourceEncodedPositionForTree(48);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertEquals(48, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertEquals(48, node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isCast());
      assertFalse(node2.isFunction());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertEquals(40, node2.getType());
      assertFalse(node2.isThrow());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isCatch());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isBlock());
      assertTrue(node2.isString());
      assertFalse(node2.isTry());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssign());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDefaultCase());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node node3 = node1.clonePropsFrom(node0);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertSame(node1, node3);
      assertSame(node1, node2);
      assertSame(node3, node1);
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isIf());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDelProp());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isNE());
      assertFalse(node3.isHook());
      assertFalse(node3.isTry());
      assertFalse(node3.isVoid());
      assertFalse(node3.isComma());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFor());
      assertFalse(node3.isThis());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isCatch());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCast());
      assertFalse(node3.isInc());
      assertFalse(node3.isFunction());
      assertFalse(node3.isThrow());
      assertEquals(40, node3.getType());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isContinue());
      assertFalse(node3.isNumber());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isLabelName());
      assertFalse(node3.hasOneChild());
      assertTrue(node3.isString());
      assertFalse(node3.isScript());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCall());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isWhile());
      assertFalse(node3.isWith());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isReturn());
      assertFalse(node3.isBlock());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isBreak());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isParamList());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isNew());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isAdd());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isDo());
      assertFalse(node3.isLabel());
      assertFalse(node3.isVar());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      boolean boolean0 = node0.isGetterDef();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean1 = node1.isDelProp();
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node1, node0);
      assertSame(node1, node3);
      assertSame(node1, node2);
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(0, 0, 16384);
      assertNotNull(node0);
      assertFalse(node0.hasOneChild());
      assertEquals(4095, node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      // Undeclared exception!
      try { 
        Node.newString((-2573), (String) null, 2, 47);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 8, 8);
      assertNotNull(node0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertEquals(8, node0.getLineno());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals(32776, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(8, node0.getCharno());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      node0.setDouble(8);
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertEquals(8, node0.getLineno());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals(32776, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(8, node0.getCharno());
      
      node0.setWasEmptyNode(true);
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertEquals(8, node0.getLineno());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals(32776, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(8, node0.getCharno());
      
      node0.setIsSyntheticBlock(true);
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertEquals(8, node0.getLineno());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals(32776, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(8, node0.getCharno());
      
      node0.setDouble(1.0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertEquals(8, node0.getLineno());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals(32776, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(8, node0.getCharno());
      
      Node node1 = Node.newNumber(0.5);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node0, node1);
      assertSame(node0, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertSame(node2, node0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isFunction());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDebugger());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isReturn());
      assertTrue(node2.isNumber());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFor());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isWith());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIn());
      assertFalse(node2.isRegExp());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      
      Node node3 = node1.srcrefTree(node2);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertSame(node0, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node3);
      assertSame(node2, node0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertSame(node3, node1);
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isFunction());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDebugger());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isReturn());
      assertTrue(node2.isNumber());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFor());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isWith());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIn());
      assertFalse(node2.isRegExp());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertTrue(node3.isNumber());
      assertFalse(node3.isIn());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDebugger());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isTry());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isString());
      assertFalse(node3.isCase());
      assertFalse(node3.isHook());
      assertFalse(node3.isFor());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isAnd());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isFunction());
      assertFalse(node3.isCast());
      assertFalse(node3.isInc());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isLabelName());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isScript());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCall());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isWith());
      assertFalse(node3.isAssign());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isWhile());
      assertEquals(39, node3.getType());
      assertFalse(node3.isReturn());
      assertFalse(node3.isBlock());
      assertFalse(node3.isParamList());
      assertFalse(node3.isComma());
      assertFalse(node3.isBreak());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertFalse(node3.isNew());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isAdd());
      assertFalse(node3.isDo());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isLabel());
      assertFalse(node3.isVar());
      
      boolean boolean0 = node2.isTry();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertSame(node0, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node3);
      assertSame(node2, node0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isFunction());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDebugger());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isReturn());
      assertTrue(node2.isNumber());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFor());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isWith());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIn());
      assertFalse(node2.isRegExp());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      
      boolean boolean1 = node0.isSwitch();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertSame(node0, node2);
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      
      boolean boolean2 = node2.isHook();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertSame(node0, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node3);
      assertSame(node2, node0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isFunction());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDebugger());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isReturn());
      assertTrue(node2.isNumber());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFor());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isWith());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIn());
      assertFalse(node2.isRegExp());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      
      node3.setLength(12);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertSame(node0, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node3);
      assertSame(node2, node0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertSame(node3, node1);
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isFunction());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDebugger());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isReturn());
      assertTrue(node2.isNumber());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFor());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isWith());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIn());
      assertFalse(node2.isRegExp());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertTrue(node3.isNumber());
      assertFalse(node3.isIn());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDebugger());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isTry());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isString());
      assertFalse(node3.isCase());
      assertFalse(node3.isHook());
      assertFalse(node3.isFor());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isAnd());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isFunction());
      assertFalse(node3.isCast());
      assertFalse(node3.isInc());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isLabelName());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isScript());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCall());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isWith());
      assertFalse(node3.isAssign());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isWhile());
      assertEquals(39, node3.getType());
      assertFalse(node3.isReturn());
      assertFalse(node3.isBlock());
      assertFalse(node3.isParamList());
      assertFalse(node3.isComma());
      assertFalse(node3.isBreak());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertFalse(node3.isNew());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isAdd());
      assertFalse(node3.isDo());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isLabel());
      assertFalse(node3.isVar());
      
      boolean boolean3 = node2.isScript();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertSame(node0, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node3);
      assertSame(node2, node0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isFunction());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDebugger());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isReturn());
      assertTrue(node2.isNumber());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFor());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isWith());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIn());
      assertFalse(node2.isRegExp());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      
      boolean boolean4 = node3.isDebugger();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertSame(node0, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node3);
      assertSame(node2, node0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertSame(node3, node1);
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isFunction());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDebugger());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isReturn());
      assertTrue(node2.isNumber());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFor());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isWith());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIn());
      assertFalse(node2.isRegExp());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertTrue(node3.isNumber());
      assertFalse(node3.isIn());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDebugger());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isTry());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isString());
      assertFalse(node3.isCase());
      assertFalse(node3.isHook());
      assertFalse(node3.isFor());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isAnd());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isFunction());
      assertFalse(node3.isCast());
      assertFalse(node3.isInc());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isTypeOf());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isLabelName());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isScript());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCall());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isWith());
      assertFalse(node3.isAssign());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isWhile());
      assertEquals(39, node3.getType());
      assertFalse(node3.isReturn());
      assertFalse(node3.isBlock());
      assertFalse(node3.isParamList());
      assertFalse(node3.isComma());
      assertFalse(node3.isBreak());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertFalse(node3.isNew());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isAdd());
      assertFalse(node3.isDo());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isLabel());
      assertFalse(node3.isVar());
      
      boolean boolean5 = node1.hasOneChild();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
      assertNotSame(node1, node0);
      assertSame(node1, node3);
      assertNotSame(node1, node2);
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      assertNotNull(node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      assertNotNull(node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setThrows();
      assertNotNull(node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setAllFlags();
      assertNotNull(node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags1.setMutatesArguments();
      assertNotNull(node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags7.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags7.valueOf());
      
      boolean boolean6 = node2.isArrayLit();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertSame(node0, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node3);
      assertSame(node2, node0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExport());
      
      List<JSTypeExpression> list0 = jSDocInfo0.getThrownTypes();
      assertNotNull(list0);
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExport());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean0 = jSDocInfo0.disposesOf("");
      assertFalse(boolean0);
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExport());
      
      Node node0 = jSDocInfo0.getAssociatedNode();
      assertNull(node0);
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExport());
      
      Node node1 = null;
      try {
        node1 = new Node(550, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newString(26, "com.google.javascript.rhino.Node$AncestorIterable", 26, 26);
      assertNotNull(node0);
      assertFalse(node0.isNew());
      assertEquals(106522, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals(26, node0.getType());
      assertFalse(node0.isNumber());
      assertEquals(26, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertEquals(26, node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      Node node1 = new Node((-757), node0, 3902, 48);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isNew());
      assertEquals(106522, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals(26, node0.getType());
      assertFalse(node0.isNumber());
      assertEquals(26, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertEquals(26, node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasChildren());
      assertEquals(48, node1.getCharno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertEquals(15982640, node1.getSourcePosition());
      assertEquals(3902, node1.getLineno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertEquals((-757), node1.getType());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node2 = node1.copyInformationFromForTree(node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.isNew());
      assertEquals(106522, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals(26, node0.getType());
      assertFalse(node0.isNumber());
      assertEquals(26, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertEquals(26, node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(26, node1.getLineno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(26, node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals(106522, node1.getSourcePosition());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertEquals((-757), node1.getType());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertEquals(26, node2.getLineno());
      assertFalse(node2.isHook());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isInc());
      assertFalse(node2.isNE());
      assertFalse(node2.isComma());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isBreak());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isWith());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isTry());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isParamList());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabel());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertEquals(26, node2.getCharno());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isNull());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isOr());
      assertFalse(node2.isReturn());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFunction());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertEquals((-757), node2.getType());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFalse());
      assertEquals(106522, node2.getSourcePosition());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      boolean boolean0 = node1.wasEmptyNode();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertSame(node1, node2);
      assertFalse(node0.isNew());
      assertEquals(106522, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals(26, node0.getType());
      assertFalse(node0.isNumber());
      assertEquals(26, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertEquals(26, node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(26, node1.getLineno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(26, node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals(106522, node1.getSourcePosition());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertEquals((-757), node1.getType());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node3 = node0.useSourceInfoFromForTree(node1);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertSame(node0, node3);
      assertSame(node1, node2);
      assertSame(node3, node0);
      assertFalse(node0.isNew());
      assertEquals(106522, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals(26, node0.getType());
      assertFalse(node0.isNumber());
      assertEquals(26, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertEquals(26, node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(26, node1.getLineno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(26, node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals(106522, node1.getSourcePosition());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertEquals((-757), node1.getType());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNE());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isCatch());
      assertFalse(node3.isCase());
      assertFalse(node3.isString());
      assertFalse(node3.isRegExp());
      assertTrue(node3.isNot());
      assertFalse(node3.isTry());
      assertFalse(node3.isFor());
      assertFalse(node3.isThrow());
      assertFalse(node3.isHook());
      assertFalse(node3.isFalse());
      assertEquals(26, node3.getCharno());
      assertEquals(106522, node3.getSourcePosition());
      assertFalse(node3.isContinue());
      assertFalse(node3.isIn());
      assertFalse(node3.isFunction());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertEquals(26, node3.getType());
      assertFalse(node3.isCast());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isWith());
      assertFalse(node3.isThis());
      assertFalse(node3.isComma());
      assertFalse(node3.isScript());
      assertFalse(node3.isBlock());
      assertFalse(node3.isDec());
      assertFalse(node3.isGetProp());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isWhile());
      assertFalse(node3.isReturn());
      assertFalse(node3.isCall());
      assertFalse(node3.isVar());
      assertFalse(node3.isParamList());
      assertFalse(node3.isNull());
      assertFalse(node3.isBreak());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.isSwitch());
      assertEquals(26, node3.getLineno());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isOr());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isLabel());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDefaultCase());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      int int0 = node0.getLength();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals(0, int0);
      assertSame(node0, node3);
      assertFalse(node0.isNew());
      assertEquals(106522, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals(26, node0.getType());
      assertFalse(node0.isNumber());
      assertEquals(26, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertEquals(26, node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      Object object0 = node0.getProp(1453);
      assertNull(object0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertSame(node0, node3);
      assertFalse(node0.isNew());
      assertEquals(106522, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals(26, node0.getType());
      assertFalse(node0.isNumber());
      assertEquals(26, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertEquals(26, node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      boolean boolean1 = node1.isOnlyModifiesThisCall();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(node0, node3);
      assertSame(node1, node2);
      assertFalse(node0.isNew());
      assertEquals(106522, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals(26, node0.getType());
      assertFalse(node0.isNumber());
      assertEquals(26, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertEquals(26, node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(26, node1.getLineno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(26, node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals(106522, node1.getSourcePosition());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertEquals((-757), node1.getType());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      
      int int1 = node1.getSourceOffset();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertSame(node0, node3);
      assertSame(node1, node2);
      assertFalse(node0.isNew());
      assertEquals(106522, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals(26, node0.getType());
      assertFalse(node0.isNumber());
      assertEquals(26, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertEquals(26, node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(26, node1.getLineno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(26, node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals(106522, node1.getSourcePosition());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertEquals((-757), node1.getType());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      
      node3.setLineno(55);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertSame(node0, node3);
      assertSame(node1, node2);
      assertSame(node3, node0);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals(26, node0.getType());
      assertFalse(node0.isNumber());
      assertEquals(26, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertEquals(55, node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(225306, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(26, node1.getLineno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(26, node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals(106522, node1.getSourcePosition());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertEquals((-757), node1.getType());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNE());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isCatch());
      assertFalse(node3.isCase());
      assertFalse(node3.isString());
      assertFalse(node3.isRegExp());
      assertTrue(node3.isNot());
      assertFalse(node3.isTry());
      assertFalse(node3.isFor());
      assertFalse(node3.isThrow());
      assertFalse(node3.isHook());
      assertFalse(node3.isFalse());
      assertEquals(26, node3.getCharno());
      assertFalse(node3.isContinue());
      assertFalse(node3.isIn());
      assertFalse(node3.isFunction());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertEquals(26, node3.getType());
      assertFalse(node3.isCast());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isWith());
      assertFalse(node3.isThis());
      assertFalse(node3.isComma());
      assertFalse(node3.isScript());
      assertFalse(node3.isBlock());
      assertFalse(node3.isDec());
      assertFalse(node3.isGetProp());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isWhile());
      assertFalse(node3.isReturn());
      assertEquals(225306, node3.getSourcePosition());
      assertFalse(node3.isCall());
      assertFalse(node3.isVar());
      assertFalse(node3.isParamList());
      assertFalse(node3.isNull());
      assertFalse(node3.isBreak());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.isSwitch());
      assertEquals(55, node3.getLineno());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isOr());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isLabel());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDefaultCase());
      
      boolean boolean2 = node1.isTypeOf();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertSame(node0, node3);
      assertSame(node1, node2);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals(26, node0.getType());
      assertFalse(node0.isNumber());
      assertEquals(26, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertEquals(55, node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(225306, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(26, node1.getLineno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(26, node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals(106522, node1.getSourcePosition());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertEquals((-757), node1.getType());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      assertNotNull(immutableList0);
      assertEquals(0, immutableList0.size());
      
      Node node4 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      assertNotNull(node4);
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertNotSame(node4, node1);
      assertNotSame(node4, node2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, immutableList0.size());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isLabel());
      assertFalse(node4.isBlock());
      assertFalse(node4.isReturn());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isContinue());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isVar());
      assertFalse(node4.isNull());
      assertFalse(node4.isAdd());
      assertFalse(node4.isNew());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isOr());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertFalse(node4.isAnd());
      assertFalse(node4.isTrue());
      assertFalse(node4.isFunction());
      assertFalse(node4.isVoid());
      assertFalse(node4.isComma());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isCast());
      assertFalse(node4.isDec());
      assertFalse(node4.isAssign());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isDebugger());
      assertTrue(node4.isParamList());
      assertFalse(node4.isString());
      assertFalse(node4.isCase());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isFalse());
      assertFalse(node4.isBreak());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node4.isThrow());
      assertEquals(83, node4.getType());
      assertFalse(node4.isInc());
      assertFalse(node4.isIn());
      assertFalse(node4.isWith());
      assertFalse(node4.isDefaultCase());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isCatch());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isFor());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isThis());
      assertFalse(node4.isHook());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isTry());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isScript());
      assertFalse(node4.isNumber());
      
      Node node5 = node2.useSourceInfoIfMissingFromForTree(node4);
      assertNotNull(node5);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node4));
      assertSame(node0, node3);
      assertSame(node1, node5);
      assertSame(node1, node2);
      assertNotSame(node1, node4);
      assertSame(node2, node1);
      assertNotSame(node2, node4);
      assertSame(node2, node5);
      assertNotSame(node4, node1);
      assertNotSame(node4, node5);
      assertNotSame(node4, node2);
      assertSame(node5, node1);
      assertSame(node5, node2);
      assertNotSame(node5, node4);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals(26, node0.getType());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertEquals((-757), node1.getType());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isInc());
      assertFalse(node2.isNE());
      assertFalse(node2.isComma());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isBreak());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isWith());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isTry());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isParamList());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabel());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isNull());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isOr());
      assertFalse(node2.isReturn());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isName());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFunction());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertEquals((-757), node2.getType());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFalse());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, immutableList0.size());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isLabel());
      assertFalse(node4.isBlock());
      assertFalse(node4.isReturn());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isContinue());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isVar());
      assertFalse(node4.isNull());
      assertFalse(node4.isAdd());
      assertFalse(node4.isNew());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isOr());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertFalse(node4.isAnd());
      assertFalse(node4.isTrue());
      assertFalse(node4.isFunction());
      assertFalse(node4.isVoid());
      assertFalse(node4.isComma());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isCast());
      assertFalse(node4.isDec());
      assertFalse(node4.isAssign());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isDebugger());
      assertTrue(node4.isParamList());
      assertFalse(node4.isString());
      assertFalse(node4.isCase());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isFalse());
      assertFalse(node4.isBreak());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node4.isThrow());
      assertEquals(83, node4.getType());
      assertFalse(node4.isInc());
      assertFalse(node4.isIn());
      assertFalse(node4.isWith());
      assertFalse(node4.isDefaultCase());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isCatch());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isFor());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isThis());
      assertFalse(node4.isHook());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isTry());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isScript());
      assertFalse(node4.isNumber());
      assertTrue(node5.hasChildren());
      assertFalse(node5.isIn());
      assertFalse(node5.isNE());
      assertFalse(node5.isGetterDef());
      assertEquals(1, node5.getChildCount());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isIf());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isVoid());
      assertFalse(node5.isFunction());
      assertFalse(node5.isTrue());
      assertFalse(node5.isThrow());
      assertFalse(node5.isEmpty());
      assertEquals((-757), node5.getType());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isInc());
      assertFalse(node5.isNull());
      assertFalse(node5.isComma());
      assertFalse(node5.isFalse());
      assertFalse(node5.isName());
      assertFalse(node5.isAnd());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isCall());
      assertFalse(node5.isBreak());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isNot());
      assertFalse(node5.isWhile());
      assertFalse(node5.isString());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isOr());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isNumber());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isDec());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isReturn());
      assertFalse(node5.isLabel());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isAssign());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isContinue());
      assertFalse(node5.isCast());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isNew());
      assertFalse(node5.isAdd());
      assertFalse(node5.isVar());
      assertFalse(node5.isDo());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isParamList());
      assertFalse(node5.isThis());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isCatch());
      assertFalse(node5.isWith());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isBlock());
      assertFalse(node5.isTry());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isHook());
      assertFalse(node5.isRegExp());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isCase());
      assertFalse(node5.isFor());
      assertFalse(node5.isScript());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = new Node(124, 124, 233);
      assertNotNull(node0);
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals(508137, node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(124, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssign());
      assertEquals(124, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertEquals(233, node0.getCharno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Node node1 = Node.newNumber(356.0, 52, 1308);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isWith());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertEquals(52, node1.getLineno());
      assertEquals(1308, node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertTrue(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals(214300, node1.getSourcePosition());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertNotNull(node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      assertNotNull(node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      assertNotNull(node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      assertNotNull(node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertEquals(31, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesThis();
      assertNotNull(node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags3.valueOf());
      assertEquals(29, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = Node.newNumber((-55.34420070904429));
      assertNotNull(node0);
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      Node node1 = new Node(51, node0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isScript());
      assertEquals(51, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isHook());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDo());
      assertTrue(node1.isIn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVoid());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isScript());
      assertEquals(51, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isHook());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDo());
      assertTrue(node1.isIn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVoid());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInc());
      assertFalse(node2.isBreak());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCase());
      assertTrue(node2.isNumber());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTry());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isOr());
      assertFalse(node2.isTrue());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isCast());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIn());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-240));
      assertNotNull(node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals((-240), node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals((-240), node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals((-240), node_SideEffectFlags1.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      assertNotNull(node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals((-240), node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals((-240), node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals((-240), node_SideEffectFlags2.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      assertNotNull(node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals((-240), node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals((-240), node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals((-240), node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals((-240), node_SideEffectFlags3.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      assertNotNull(node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesArguments();
      assertNotNull(node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setReturnsTainted();
      assertNotNull(node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setAllFlags();
      assertNotNull(node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertEquals(0, node_SideEffectFlags7.valueOf());
      assertTrue(node_SideEffectFlags7.areAllFlagsSet());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.IGNORE_EXTENDED_RANGES, locale_FilteringMode0);
      
      node1.putProp((-343), locale_FilteringMode0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertSame(node0, node2);
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isScript());
      assertEquals(51, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isHook());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDo());
      assertTrue(node1.isIn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVoid());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      boolean boolean0 = node1.isFalse();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(boolean0);
      assertSame(node0, node2);
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isScript());
      assertEquals(51, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isHook());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDo());
      assertTrue(node1.isIn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVoid());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      boolean boolean1 = node1.isCall();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(node0, node2);
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isScript());
      assertEquals(51, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isHook());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDo());
      assertTrue(node1.isIn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVoid());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      // Undeclared exception!
      try { 
        node0.isEquivalentToShallow((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = Node.newString("null", (-826), (-826));
      assertNotNull(node0);
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      
      boolean boolean0 = node0.isVarArgs();
      assertFalse(boolean0);
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      
      boolean boolean1 = node0.isWith();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node node1 = Node.newString("\n\nTree2:\n", 8, 16);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertEquals(16, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isStringKey());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertEquals(8, node1.getLineno());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertEquals(32784, node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertEquals(40, node1.getType());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      // Undeclared exception!
      try { 
        node1.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(1429, "");
      assertNotNull(node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      nodeArray0[0] = node0;
      Node node1 = new Node(57, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node1.isIf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertEquals(57, node1.getType());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isName());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      
      boolean boolean0 = node0.isFromExterns();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      boolean boolean1 = node0.isSwitch();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      boolean boolean2 = node0.isHook();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      boolean boolean3 = node0.isScript();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      boolean boolean4 = node0.isDebugger();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      boolean boolean5 = node0.hasOneChild();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      assertNotNull(node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      assertNotNull(node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setAllFlags();
      assertNotNull(node_SideEffectFlags6);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags3.setMutatesArguments();
      assertNotNull(node_SideEffectFlags7);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags7.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags7.valueOf());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = Node.newNumber(0.5);
      assertNotNull(node0);
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      Node node1 = new Node(1929, node0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertEquals(1929, node1.getType());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      int int0 = node1.getIntProp(54);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, int0);
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertEquals(1929, node1.getType());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean0 = node1.isVoid();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertEquals(1929, node1.getType());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node2 = node1.useSourceInfoFrom(node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertEquals(1929, node1.getType());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isTrue());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCase());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertEquals((-1), node2.getCharno());
      assertEquals(1929, node2.getType());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isScript());
      assertFalse(node2.isOr());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetProp());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isDec());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isThrow());
      assertFalse(node2.isString());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      
      boolean boolean1 = node0.isWhile();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      boolean boolean2 = node1.isNot();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertSame(node1, node2);
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertEquals(1929, node1.getType());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      int int1 = node1.getSourceOffset();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertSame(node1, node2);
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertEquals(1929, node1.getType());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      int int2 = node0.getChangeTime();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      boolean boolean3 = node0.isEmpty();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      Node node3 = new Node(4121);
      assertNotNull(node3);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isScript());
      assertFalse(node3.isFalse());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isThrow());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCast());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isNumber());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIn());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isIf());
      assertFalse(node3.isBlock());
      assertFalse(node3.isFor());
      assertFalse(node3.isHook());
      assertFalse(node3.isNE());
      assertFalse(node3.isThis());
      assertFalse(node3.isRegExp());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isWith());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isTry());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isVar());
      assertFalse(node3.isParamList());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDo());
      assertFalse(node3.isWhile());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNew());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isOr());
      assertFalse(node3.isString());
      assertFalse(node3.isAdd());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isCall());
      assertEquals(4121, node3.getType());
      assertFalse(node3.isName());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDelProp());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isNull());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isComma());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isVoid());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      boolean boolean4 = node1.isInc();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      assertNotSame(node1, node3);
      assertSame(node1, node2);
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertEquals(1929, node1.getType());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node4 = node2.getLastChild();
      assertNotNull(node4);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertSame(node0, node4);
      assertNotSame(node1, node3);
      assertSame(node1, node2);
      assertNotSame(node2, node3);
      assertSame(node2, node1);
      assertSame(node4, node0);
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals(39, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertEquals(1929, node1.getType());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isTrue());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCase());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertEquals((-1), node2.getCharno());
      assertEquals(1929, node2.getType());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isScript());
      assertFalse(node2.isOr());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetProp());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isDec());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isThrow());
      assertFalse(node2.isString());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertFalse(node4.isTrue());
      assertFalse(node4.isVoid());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isTry());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isVar());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isParamList());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isAssignAdd());
      assertTrue(node4.isNumber());
      assertFalse(node4.isOr());
      assertFalse(node4.isAdd());
      assertFalse(node4.isNew());
      assertFalse(node4.isString());
      assertFalse(node4.isAssign());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isName());
      assertFalse(node4.isBreak());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isDec());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isNull());
      assertFalse(node4.isReturn());
      assertFalse(node4.isComma());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isCall());
      assertFalse(node4.isWith());
      assertFalse(node4.isNot());
      assertFalse(node4.isAnd());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isScript());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isLabelName());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isThrow());
      assertFalse(node4.isLabel());
      assertFalse(node4.isCast());
      assertFalse(node4.isFalse());
      assertFalse(node4.isContinue());
      assertEquals(39, node4.getType());
      assertFalse(node4.isCase());
      assertFalse(node4.isSwitch());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isInc());
      assertFalse(node4.isIn());
      assertFalse(node4.isFor());
      assertFalse(node4.isNE());
      assertFalse(node4.isThis());
      assertFalse(node4.isIf());
      assertFalse(node4.isBlock());
      assertFalse(node4.isHook());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isCatch());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isInstanceOf());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(0, 0, 16384);
      assertNotNull(node0);
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals(4095, node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      nodeArray0[0] = node0;
      node0.setType(153);
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertTrue(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals(4095, node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertEquals(153, node0.getType());
      assertFalse(node0.isBlock());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      boolean boolean0 = node0.isUnscopedQualifiedName();
      assertFalse(boolean0);
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertTrue(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals(4095, node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertEquals(153, node0.getType());
      assertFalse(node0.isBlock());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      Node node1 = Node.newString(8, "change_time");
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertEquals(8, node1.getType());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isObjectLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node2 = new Node(30, node1, node0, node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertTrue(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals(4095, node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertEquals(153, node0.getType());
      assertFalse(node0.isBlock());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertEquals(8, node1.getType());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isObjectLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node2.isCast());
      assertEquals(30, node2.getType());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isInstanceOf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isComma());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWith());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDec());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBreak());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNull());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertFalse(node2.isTry());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isCatch());
      assertFalse(node2.isString());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCase());
      assertFalse(node2.isRegExp());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertTrue(node2.isNew());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFunction());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags((-1129));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got LABEL_NAME
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      assertNotNull(node0);
      assertFalse(node0.isNot());
      assertEquals(65552, node0.getSourcePosition());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSwitch());
      assertEquals(39, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertEquals(16, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      node0.setDouble(16);
      assertFalse(node0.isNot());
      assertEquals(65552, node0.getSourcePosition());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSwitch());
      assertEquals(39, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertEquals(16, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      node0.setWasEmptyNode(true);
      assertFalse(node0.isNot());
      assertEquals(65552, node0.getSourcePosition());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSwitch());
      assertEquals(39, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertEquals(16, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      Node node1 = Node.newString(47, "2K<>H>H", 153, 4);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isCatch());
      assertEquals(153, node1.getLineno());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertEquals(4, node1.getCharno());
      assertEquals(626692, node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetElem());
      assertTrue(node1.isRegExp());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWith());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertEquals(47, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      boolean boolean0 = node1.isStringKey();
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(node1.isCatch());
      assertEquals(153, node1.getLineno());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertEquals(4, node1.getCharno());
      assertEquals(626692, node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetElem());
      assertTrue(node1.isRegExp());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWith());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertEquals(47, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      Node node2 = Node.newString(32, "", 154, 50);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node2, node1);
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isHook());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNumber());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertEquals(154, node2.getLineno());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isName());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isOr());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertEquals(32, node2.getType());
      assertFalse(node2.isFunction());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertTrue(node2.isTypeOf());
      assertFalse(node2.isCase());
      assertEquals(50, node2.getCharno());
      assertEquals(630834, node2.getSourcePosition());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      
      node2.setVarArgs(false);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node2, node1);
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isHook());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNumber());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertEquals(154, node2.getLineno());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isName());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isOr());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertEquals(32, node2.getType());
      assertFalse(node2.isFunction());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertTrue(node2.isTypeOf());
      assertFalse(node2.isCase());
      assertEquals(50, node2.getCharno());
      assertEquals(630834, node2.getSourcePosition());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      
      node2.removeProp(2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node2, node1);
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isHook());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNumber());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertEquals(154, node2.getLineno());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isName());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isOr());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertEquals(32, node2.getType());
      assertFalse(node2.isFunction());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertTrue(node2.isTypeOf());
      assertFalse(node2.isCase());
      assertEquals(50, node2.getCharno());
      assertEquals(630834, node2.getSourcePosition());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter1);
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter2);
      assertFalse(simpleErrorReporter2.equals((Object)simpleErrorReporter0));
      assertFalse(simpleErrorReporter2.equals((Object)simpleErrorReporter1));
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter2, true);
      assertNotNull(jSTypeRegistry0);
      assertFalse(simpleErrorReporter2.equals((Object)simpleErrorReporter0));
      assertFalse(simpleErrorReporter2.equals((Object)simpleErrorReporter1));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      node2.setQuotedString();
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node2, node1);
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isHook());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNumber());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertEquals(154, node2.getLineno());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isName());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isOr());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertEquals(32, node2.getType());
      assertFalse(node2.isFunction());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertTrue(node2.isTypeOf());
      assertFalse(node2.isCase());
      assertEquals(50, node2.getCharno());
      assertEquals(630834, node2.getSourcePosition());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newString("o6gK");
      assertNotNull(node0);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      Node node1 = new Node((-477), node0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertEquals((-477), node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isTry());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node2, node1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isThrow());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertEquals(83, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isAnd());
      assertTrue(node2.isParamList());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThis());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertEquals(0, jSTypeArray0.length);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      
      int int0 = node2.getIntProp(30);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(0, int0);
      assertNotSame(node2, node1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isThrow());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertEquals(83, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isAnd());
      assertTrue(node2.isParamList());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThis());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertEquals(0, jSTypeArray0.length);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      
      boolean boolean0 = node2.isVoid();
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node2, node1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isThrow());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertEquals(83, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isAnd());
      assertTrue(node2.isParamList());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThis());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertEquals(0, jSTypeArray0.length);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      
      boolean boolean1 = node0.isEquivalentToShallow(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node2, node1);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isThrow());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertEquals(83, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isAnd());
      assertTrue(node2.isParamList());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThis());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertEquals(0, jSTypeArray0.length);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      
      Node node3 = Node.newString("Object#Key", 37, 141);
      assertNotNull(node3);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertNotSame(node3, node0);
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFor());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertEquals(0, node3.getChildCount());
      assertEquals(40, node3.getType());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isParamList());
      assertEquals(37, node3.getLineno());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertFalse(node3.isBlock());
      assertFalse(node3.isSetterDef());
      assertTrue(node3.isString());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCatch());
      assertFalse(node3.isIn());
      assertFalse(node3.isNE());
      assertFalse(node3.isThis());
      assertFalse(node3.isIf());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCast());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isAssign());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isNumber());
      assertFalse(node3.isScript());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAnd());
      assertEquals(151693, node3.getSourcePosition());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNot());
      assertFalse(node3.isLabel());
      assertEquals(141, node3.getCharno());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isName());
      assertFalse(node3.isVar());
      assertFalse(node3.isNull());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isWhile());
      assertFalse(node3.isComma());
      assertFalse(node3.isDec());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isVoid());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCall());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      
      Node node4 = node2.useSourceInfoFrom(node3);
      assertNotNull(node4);
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertSame(node2, node4);
      assertNotSame(node2, node1);
      assertNotSame(node3, node0);
      assertNotSame(node4, node1);
      assertSame(node4, node2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isThrow());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertEquals(83, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isAnd());
      assertTrue(node2.isParamList());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertEquals(151693, node2.getSourcePosition());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertEquals(37, node2.getLineno());
      assertEquals(141, node2.getCharno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThis());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFor());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertEquals(0, node3.getChildCount());
      assertEquals(40, node3.getType());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isParamList());
      assertEquals(37, node3.getLineno());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertFalse(node3.isBlock());
      assertFalse(node3.isSetterDef());
      assertTrue(node3.isString());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCatch());
      assertFalse(node3.isIn());
      assertFalse(node3.isNE());
      assertFalse(node3.isThis());
      assertFalse(node3.isIf());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCast());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isAssign());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isNumber());
      assertFalse(node3.isScript());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAnd());
      assertEquals(151693, node3.getSourcePosition());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNot());
      assertFalse(node3.isLabel());
      assertEquals(141, node3.getCharno());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isName());
      assertFalse(node3.isVar());
      assertFalse(node3.isNull());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isWhile());
      assertFalse(node3.isComma());
      assertFalse(node3.isDec());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isVoid());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCall());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isAdd());
      assertFalse(node4.isOr());
      assertFalse(node4.isNumber());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCall());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isName());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.isExprResult());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isBlock());
      assertFalse(node4.isAssign());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isWith());
      assertFalse(node4.isCatch());
      assertFalse(node4.isInstanceOf());
      assertEquals(151693, node4.getSourcePosition());
      assertFalse(node4.isAnd());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertTrue(node4.isParamList());
      assertFalse(node4.isCast());
      assertFalse(node4.isThrow());
      assertEquals(141, node4.getCharno());
      assertFalse(node4.isContinue());
      assertEquals(37, node4.getLineno());
      assertFalse(node4.isFunction());
      assertFalse(node4.isFalse());
      assertFalse(node4.isCase());
      assertFalse(node4.isNE());
      assertFalse(node4.isInc());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isString());
      assertFalse(node4.isIn());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isHook());
      assertFalse(node4.isTry());
      assertFalse(node4.isFor());
      assertFalse(node4.isIf());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isComma());
      assertFalse(node4.isBreak());
      assertFalse(node4.isThis());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isScript());
      assertEquals(83, node4.getType());
      assertFalse(node4.isNull());
      assertFalse(node4.isTrue());
      assertFalse(node4.isVar());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isNew());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isLabel());
      assertEquals(0, jSTypeArray0.length);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      
      boolean boolean2 = node4.isWhile();
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertSame(node2, node4);
      assertNotSame(node2, node1);
      assertNotSame(node3, node0);
      assertNotSame(node4, node1);
      assertSame(node4, node2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isThrow());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertEquals(83, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isAnd());
      assertTrue(node2.isParamList());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertEquals(151693, node2.getSourcePosition());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertEquals(37, node2.getLineno());
      assertEquals(141, node2.getCharno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThis());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFor());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertEquals(0, node3.getChildCount());
      assertEquals(40, node3.getType());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isParamList());
      assertEquals(37, node3.getLineno());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertFalse(node3.isBlock());
      assertFalse(node3.isSetterDef());
      assertTrue(node3.isString());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCatch());
      assertFalse(node3.isIn());
      assertFalse(node3.isNE());
      assertFalse(node3.isThis());
      assertFalse(node3.isIf());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCast());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isAssign());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isNumber());
      assertFalse(node3.isScript());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAnd());
      assertEquals(151693, node3.getSourcePosition());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNot());
      assertFalse(node3.isLabel());
      assertEquals(141, node3.getCharno());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isName());
      assertFalse(node3.isVar());
      assertFalse(node3.isNull());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isWhile());
      assertFalse(node3.isComma());
      assertFalse(node3.isDec());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isVoid());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCall());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isAdd());
      assertFalse(node4.isOr());
      assertFalse(node4.isNumber());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCall());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isName());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.isExprResult());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isBlock());
      assertFalse(node4.isAssign());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isWith());
      assertFalse(node4.isCatch());
      assertFalse(node4.isInstanceOf());
      assertEquals(151693, node4.getSourcePosition());
      assertFalse(node4.isAnd());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertTrue(node4.isParamList());
      assertFalse(node4.isCast());
      assertFalse(node4.isThrow());
      assertEquals(141, node4.getCharno());
      assertFalse(node4.isContinue());
      assertEquals(37, node4.getLineno());
      assertFalse(node4.isFunction());
      assertFalse(node4.isFalse());
      assertFalse(node4.isCase());
      assertFalse(node4.isNE());
      assertFalse(node4.isInc());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isString());
      assertFalse(node4.isIn());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isHook());
      assertFalse(node4.isTry());
      assertFalse(node4.isFor());
      assertFalse(node4.isIf());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isComma());
      assertFalse(node4.isBreak());
      assertFalse(node4.isThis());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isScript());
      assertEquals(83, node4.getType());
      assertFalse(node4.isNull());
      assertFalse(node4.isTrue());
      assertFalse(node4.isVar());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isNew());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isLabel());
      assertEquals(0, jSTypeArray0.length);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      
      boolean boolean3 = node1.isNot();
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertNotSame(node0, node3);
      assertNotSame(node1, node4);
      assertNotSame(node1, node2);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertEquals((-477), node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isTry());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      int int1 = node2.getSourceOffset();
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertSame(node2, node4);
      assertNotSame(node2, node1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isThrow());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertEquals(83, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isAnd());
      assertTrue(node2.isParamList());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertEquals(151693, node2.getSourcePosition());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertEquals(37, node2.getLineno());
      assertEquals(141, node2.getCharno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThis());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertEquals(0, jSTypeArray0.length);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      
      int int2 = node0.getChangeTime();
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertNotSame(node0, node3);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      boolean boolean4 = node4.isEmpty();
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      assertSame(node2, node4);
      assertNotSame(node2, node1);
      assertNotSame(node3, node0);
      assertNotSame(node4, node1);
      assertSame(node4, node2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isThrow());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertEquals(83, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isAnd());
      assertTrue(node2.isParamList());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertEquals(151693, node2.getSourcePosition());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertEquals(37, node2.getLineno());
      assertEquals(141, node2.getCharno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThis());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFor());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertEquals(0, node3.getChildCount());
      assertEquals(40, node3.getType());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isParamList());
      assertEquals(37, node3.getLineno());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertFalse(node3.isBlock());
      assertFalse(node3.isSetterDef());
      assertTrue(node3.isString());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCatch());
      assertFalse(node3.isIn());
      assertFalse(node3.isNE());
      assertFalse(node3.isThis());
      assertFalse(node3.isIf());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCast());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isAssign());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isNumber());
      assertFalse(node3.isScript());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAnd());
      assertEquals(151693, node3.getSourcePosition());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNot());
      assertFalse(node3.isLabel());
      assertEquals(141, node3.getCharno());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isName());
      assertFalse(node3.isVar());
      assertFalse(node3.isNull());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isWhile());
      assertFalse(node3.isComma());
      assertFalse(node3.isDec());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isVoid());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCall());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isAdd());
      assertFalse(node4.isOr());
      assertFalse(node4.isNumber());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCall());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isName());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.isExprResult());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isBlock());
      assertFalse(node4.isAssign());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isWith());
      assertFalse(node4.isCatch());
      assertFalse(node4.isInstanceOf());
      assertEquals(151693, node4.getSourcePosition());
      assertFalse(node4.isAnd());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertTrue(node4.isParamList());
      assertFalse(node4.isCast());
      assertFalse(node4.isThrow());
      assertEquals(141, node4.getCharno());
      assertFalse(node4.isContinue());
      assertEquals(37, node4.getLineno());
      assertFalse(node4.isFunction());
      assertFalse(node4.isFalse());
      assertFalse(node4.isCase());
      assertFalse(node4.isNE());
      assertFalse(node4.isInc());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isString());
      assertFalse(node4.isIn());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isHook());
      assertFalse(node4.isTry());
      assertFalse(node4.isFor());
      assertFalse(node4.isIf());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isComma());
      assertFalse(node4.isBreak());
      assertFalse(node4.isThis());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isScript());
      assertEquals(83, node4.getType());
      assertFalse(node4.isNull());
      assertFalse(node4.isTrue());
      assertFalse(node4.isVar());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isNew());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isLabel());
      assertEquals(0, jSTypeArray0.length);
      
      jSTypeRegistry0.forwardDeclareType("o6gK");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      node3.addChildToFront(node4);
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertSame(node2, node4);
      assertNotSame(node2, node1);
      assertNotSame(node3, node0);
      assertNotSame(node4, node1);
      assertSame(node4, node2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isThrow());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertEquals(83, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isAnd());
      assertTrue(node2.isParamList());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertEquals(151693, node2.getSourcePosition());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertEquals(37, node2.getLineno());
      assertEquals(141, node2.getCharno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThis());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node3.isArrayLit());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isFor());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertEquals(40, node3.getType());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isParamList());
      assertEquals(37, node3.getLineno());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertFalse(node3.isBlock());
      assertFalse(node3.isSetterDef());
      assertTrue(node3.isString());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCatch());
      assertFalse(node3.isIn());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isNE());
      assertFalse(node3.isThis());
      assertFalse(node3.isIf());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCast());
      assertFalse(node3.isAssign());
      assertFalse(node3.isNumber());
      assertFalse(node3.isScript());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAnd());
      assertEquals(151693, node3.getSourcePosition());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNot());
      assertFalse(node3.isLabel());
      assertEquals(141, node3.getCharno());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isName());
      assertFalse(node3.isVar());
      assertFalse(node3.isNull());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isWhile());
      assertFalse(node3.isComma());
      assertFalse(node3.isDec());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isVoid());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCall());
      assertFalse(node4.isReturn());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isAdd());
      assertFalse(node4.isOr());
      assertFalse(node4.isNumber());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCall());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isName());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.isExprResult());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isBlock());
      assertFalse(node4.isAssign());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isWith());
      assertFalse(node4.isCatch());
      assertFalse(node4.isInstanceOf());
      assertEquals(151693, node4.getSourcePosition());
      assertFalse(node4.isAnd());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertTrue(node4.isParamList());
      assertFalse(node4.isCast());
      assertFalse(node4.isThrow());
      assertEquals(141, node4.getCharno());
      assertFalse(node4.isContinue());
      assertEquals(37, node4.getLineno());
      assertFalse(node4.isFunction());
      assertFalse(node4.isFalse());
      assertFalse(node4.isCase());
      assertFalse(node4.isNE());
      assertFalse(node4.isInc());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isString());
      assertFalse(node4.isIn());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isHook());
      assertFalse(node4.isTry());
      assertFalse(node4.isFor());
      assertFalse(node4.isIf());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isComma());
      assertFalse(node4.isBreak());
      assertFalse(node4.isThis());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isScript());
      assertEquals(83, node4.getType());
      assertFalse(node4.isNull());
      assertFalse(node4.isTrue());
      assertFalse(node4.isVar());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isNew());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isLabel());
      assertEquals(0, jSTypeArray0.length);
      
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(43);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 43
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(1429, "");
      assertNotNull(node0);
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      
      nodeArray0[0] = node0;
      Node node1 = new Node(57, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertEquals(57, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isContinue());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      nodeArray0[1] = node1;
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertEquals(57, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isContinue());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isWhile());
      assertFalse(node2.isLabel());
      assertFalse(node2.isContinue());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isNull());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertEquals((-1), node2.getCharno());
      assertEquals(57, node2.getType());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isFunction());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIf());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(0, "");
      assertNotNull(node0);
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      int int0 = node0.getIntProp(0);
      assertEquals(0, int0);
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      boolean boolean0 = node0.wasEmptyNode();
      assertFalse(boolean0);
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      Node node1 = new Node((-2447), node0, node0, node0, node0, 55, 32);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertEquals(225312, node1.getSourcePosition());
      assertFalse(node1.isNew());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-2447), node1.getType());
      assertFalse(node1.isTry());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertEquals(32, node1.getCharno());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertEquals(55, node1.getLineno());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      node1.setLineno(29);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertEquals(29, node1.getLineno());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-2447), node1.getType());
      assertFalse(node1.isTry());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertEquals(32, node1.getCharno());
      assertEquals(118816, node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      node1.setCharno((-962));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-2447), node1.getType());
      assertFalse(node1.isTry());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      boolean boolean1 = node0.isEquivalentTo(node1, true, true, false);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-2447), node1.getType());
      assertFalse(node1.isTry());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      boolean boolean2 = node1.isAssignAdd();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-2447), node1.getType());
      assertFalse(node1.isTry());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = new Node((-503), 0, 0);
      assertNotNull(node0);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertEquals((-503), node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = (NoType)modificationVisitor0.caseNoType();
      assertNotNull(noType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = (JSType) noType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, noType0);
      assertNotNull(enumType0);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertEquals((-503), node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isNoResolvedType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isFunctionType());
      assertTrue(enumType0.matchesObjectContext());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNoObjectType());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumType enumType1 = enumType0.toMaybeEnumType();
      assertNotNull(enumType1);
      assertSame(enumType0, enumType1);
      assertSame(enumType1, enumType0);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertEquals((-503), node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isNoResolvedType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isFunctionType());
      assertTrue(enumType0.matchesObjectContext());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType1.isObject());
      assertFalse(enumType1.isNumberValueType());
      assertFalse(enumType1.isNoResolvedType());
      assertFalse(enumType1.isNoObjectType());
      assertFalse(enumType1.isStringValueType());
      assertTrue(enumType1.matchesObjectContext());
      assertFalse(enumType1.isUnionType());
      assertTrue(enumType1.isEnumType());
      assertFalse(enumType1.isNoType());
      assertFalse(enumType1.isNominalType());
      assertFalse(enumType1.isVoidType());
      assertFalse(enumType1.isConstructor());
      assertFalse(enumType1.isNominalConstructor());
      assertFalse(enumType1.isFunctionPrototypeType());
      assertFalse(enumType1.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertFalse(enumType1.isCheckedUnknownType());
      assertFalse(enumType1.isTemplateType());
      assertFalse(enumType1.isBooleanValueType());
      assertFalse(enumType1.matchesNumberContext());
      assertFalse(enumType1.isNullType());
      assertTrue(enumType1.matchesStringContext());
      assertFalse(enumType1.isAllType());
      assertFalse(enumType1.isFunctionType());
      assertFalse(enumType1.isEnumElementType());
      assertFalse(enumType1.isInterface());
      assertFalse(enumType1.isTemplatizedType());
      assertFalse(enumType1.isResolved());
      assertFalse(enumType1.isOrdinaryFunction());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSTypeArray0[2] = (JSType) enumType1;
      jSTypeArray0[3] = (JSType) noType0;
      jSTypeArray0[4] = (JSType) noType0;
      jSTypeArray0[5] = (JSType) noType0;
      jSTypeArray0[6] = (JSType) noType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.hasChildren());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isHook());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isThis());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCase());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDec());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertEquals(7, node1.getChildCount());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isBreak());
      assertEquals(83, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isCall());
      assertFalse(node1.isWhile());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertTrue(node1.isParamList());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      assertEquals(7, jSTypeArray0.length);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      NoType noType1 = (NoType)modificationVisitor0.caseNoType();
      assertNotNull(noType1);
      assertSame(noType1, noType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType1.matchesObjectContext());
      assertFalse(noType1.isAllType());
      assertTrue(noType1.matchesNumberContext());
      assertFalse(noType1.isFunctionType());
      assertFalse(noType1.isInterface());
      assertTrue(noType1.canBeCalled());
      assertFalse(noType1.isBooleanValueType());
      assertFalse(noType1.isRecordType());
      assertFalse(noType1.isTemplateType());
      assertFalse(noType1.isEnumType());
      assertTrue(noType1.isNoType());
      assertFalse(noType1.isVoidType());
      assertFalse(noType1.isNoObjectType());
      assertFalse(noType1.isReturnTypeInferred());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertFalse(noType1.hasCachedValues());
      assertFalse(noType1.isStringValueType());
      assertFalse(noType1.isResolved());
      assertTrue(noType1.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertFalse(noType1.isNoResolvedType());
      assertTrue(noType1.isNullable());
      assertTrue(noType1.matchesStringContext());
      assertFalse(noType1.isFunctionPrototypeType());
      assertFalse(noType1.isNumberValueType());
      assertFalse(noType1.isUnionType());
      assertFalse(noType1.isTemplatizedType());
      assertFalse(noType1.isNominalConstructor());
      assertFalse(noType1.isEnumElementType());
      assertTrue(noType1.hasInstanceType());
      assertNull(noType1.getReferenceName());
      assertFalse(noType1.isOrdinaryFunction());
      assertFalse(noType1.isNominalType());
      assertTrue(noType1.isConstructor());
      assertFalse(noType1.isCheckedUnknownType());
      assertFalse(noType1.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) noType0);
      assertNull(functionType0);
      assertSame(noType0, noType1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = node0.isInc();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertEquals((-503), node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      node1.setSourceFileForTesting("7E5u");
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.hasChildren());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isHook());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isThis());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCase());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDec());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertEquals(7, node1.getChildCount());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isBreak());
      assertEquals(83, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isCall());
      assertFalse(node1.isWhile());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertTrue(node1.isParamList());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      assertEquals(7, jSTypeArray0.length);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      boolean boolean1 = node0.isGetProp();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node0, node1);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertEquals((-503), node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(1429, "");
      assertNotNull(node0);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      nodeArray0[0] = node0;
      Node node1 = new Node(57, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertEquals(57, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      nodeArray0[1] = node1;
      node1.removeProp(4095);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertEquals(57, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Node node2 = Node.newNumber(1.0, 1542, 0);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isString());
      assertFalse(node2.isTry());
      assertTrue(node2.isNumber());
      assertFalse(node2.isCase());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isFalse());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getChildCount());
      assertEquals(1542, node2.getLineno());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssign());
      assertFalse(node2.isOr());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThis());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThrow());
      assertFalse(node2.isBlock());
      assertEquals(6316032, node2.getSourcePosition());
      assertFalse(node2.isInc());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isWith());
      assertFalse(node2.isHook());
      assertFalse(node2.isRegExp());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isIf());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      boolean boolean0 = node1.isHook();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertEquals(57, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      boolean boolean1 = node0.isCall();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      boolean boolean2 = node0.isThrow();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      node2.addSuppression("l128Q<K[");
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isString());
      assertFalse(node2.isTry());
      assertTrue(node2.isNumber());
      assertFalse(node2.isCase());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isFalse());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getChildCount());
      assertEquals(1542, node2.getLineno());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssign());
      assertFalse(node2.isOr());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThis());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThrow());
      assertFalse(node2.isBlock());
      assertEquals(6316032, node2.getSourcePosition());
      assertFalse(node2.isInc());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isWith());
      assertFalse(node2.isHook());
      assertFalse(node2.isRegExp());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isIf());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      assertNotNull(node_FileLevelJsDocBuilder0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      int int0 = node1.getChildCount();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, int0);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertEquals(57, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      node1.setChangeTime(2110);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertEquals(1429, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertEquals(57, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      int int0 = 303;
      Node node0 = new Node((-2530));
      assertNotNull(node0);
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertEquals((-2530), node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      
      Node node1 = new Node((-323), node0, node0, node0, 1035, 50);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertEquals((-2530), node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertEquals(1, node1.getChildCount());
      assertEquals(4239410, node1.getSourcePosition());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertEquals((-323), node1.getType());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIf());
      assertEquals(50, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertEquals(1035, node1.getLineno());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node2 = null;
      try {
        node2 = new Node(303, node1, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newString("");
      assertNotNull(node0);
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      int int0 = 33;
      int int1 = 37;
      int int2 = 3;
      // Undeclared exception!
      try { 
        Node.newString(29, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newNumber((-159.74853617220631), 54, 0);
      assertNotNull(node0);
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertEquals(221184, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals(54, node0.getLineno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertEquals(39, node0.getType());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      Node node1 = new Node(57, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertEquals(221184, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals(54, node0.getLineno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertEquals(39, node0.getType());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFor());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isIf());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertEquals(57, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertEquals(221184, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals(54, node0.getLineno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertEquals(39, node0.getType());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = (NoType)modificationVisitor0.caseNoType();
      assertNotNull(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isNullable());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      Node node0 = new Node(154, 1, 105);
      assertNotNull(node0);
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertEquals(154, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertTrue(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isComma());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertEquals(4201, node0.getSourcePosition());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, noType0);
      assertNotNull(enumType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isNullable());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertEquals(154, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertTrue(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isComma());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertEquals(4201, node0.getSourcePosition());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertTrue(enumType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isFunctionType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumType enumType1 = enumType0.toMaybeEnumType();
      assertNotNull(enumType1);
      assertSame(enumType0, enumType1);
      assertSame(enumType1, enumType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isNullable());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertEquals(154, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertTrue(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isComma());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertEquals(4201, node0.getSourcePosition());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertTrue(enumType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isFunctionType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType1.isResolved());
      assertFalse(enumType1.isConstructor());
      assertFalse(enumType1.isRecordType());
      assertFalse(enumType1.isInterface());
      assertFalse(enumType1.isFunctionPrototypeType());
      assertFalse(enumType1.isFunctionType());
      assertFalse(enumType1.isAllType());
      assertFalse(enumType1.matchesNumberContext());
      assertTrue(enumType1.matchesStringContext());
      assertFalse(enumType1.isTemplateType());
      assertFalse(enumType1.isStringValueType());
      assertFalse(enumType1.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertFalse(enumType1.isVoidType());
      assertFalse(enumType1.isNominalConstructor());
      assertFalse(enumType1.isNominalType());
      assertTrue(enumType1.matchesObjectContext());
      assertFalse(enumType1.isUnionType());
      assertFalse(enumType1.isNoResolvedType());
      assertFalse(enumType1.isTemplatizedType());
      assertFalse(enumType1.isEnumElementType());
      assertTrue(enumType1.isEnumType());
      assertFalse(enumType1.isNoType());
      assertFalse(enumType1.isNoObjectType());
      assertFalse(enumType1.isNullType());
      assertFalse(enumType1.isBooleanValueType());
      assertFalse(enumType1.isNumberValueType());
      assertTrue(enumType1.isObject());
      assertFalse(enumType1.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) noType0;
      jSTypeArray0[1] = (JSType) noType0;
      jSTypeArray0[2] = (JSType) enumType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.isParamList());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertEquals(83, node1.getType());
      assertEquals(3, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isVoid());
      assertEquals(3, jSTypeArray0.length);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      NoType noType1 = (NoType)modificationVisitor0.caseNoType();
      assertNotNull(noType1);
      assertSame(noType1, noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType1.isOrdinaryFunction());
      assertFalse(noType1.isAllType());
      assertTrue(noType1.matchesObjectContext());
      assertFalse(noType1.isEnumElementType());
      assertFalse(noType1.isTemplatizedType());
      assertFalse(noType1.isBooleanValueType());
      assertFalse(noType1.isEnumType());
      assertFalse(noType1.isTemplateType());
      assertTrue(noType1.matchesStringContext());
      assertFalse(noType1.isNominalType());
      assertFalse(noType1.isCheckedUnknownType());
      assertFalse(noType1.isInterface());
      assertNull(noType1.getReferenceName());
      assertTrue(noType1.matchesNumberContext());
      assertFalse(noType1.isFunctionType());
      assertTrue(noType1.isNullable());
      assertFalse(noType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertTrue(noType1.isObject());
      assertFalse(noType1.isNullType());
      assertFalse(noType1.hasCachedValues());
      assertTrue(noType1.isConstructor());
      assertFalse(noType1.isNoObjectType());
      assertFalse(noType1.isNoResolvedType());
      assertFalse(noType1.isFunctionPrototypeType());
      assertFalse(noType1.isNumberValueType());
      assertFalse(noType1.isUnionType());
      assertTrue(noType1.hasInstanceType());
      assertTrue(noType1.isNoType());
      assertFalse(noType1.isRecordType());
      assertTrue(noType1.canBeCalled());
      assertFalse(noType1.isResolved());
      assertFalse(noType1.isReturnTypeInferred());
      assertFalse(noType1.isVoidType());
      assertFalse(noType1.isStringValueType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) noType0);
      assertNull(functionType0);
      assertSame(noType0, noType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isNullable());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      node1.setJSType(jSTypeArray0[0]);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.isParamList());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertEquals(83, node1.getType());
      assertEquals(3, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isVoid());
      assertEquals(3, jSTypeArray0.length);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      boolean boolean0 = node0.isHook();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertEquals(154, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertTrue(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isComma());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertEquals(4201, node0.getSourcePosition());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      boolean boolean1 = node1.isCall();
      assertTrue(boolean1 == boolean0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean1);
      assertNotSame(node1, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.isParamList());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertEquals(83, node1.getType());
      assertEquals(3, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isVoid());
      assertEquals(3, jSTypeArray0.length);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      boolean boolean2 = node1.isThrow();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean2);
      assertNotSame(node1, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.isParamList());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertEquals(83, node1.getType());
      assertEquals(3, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isVoid());
      assertEquals(3, jSTypeArray0.length);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 3964, 3964);
      assertNotNull(node0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertEquals(3964, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals(3964, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertEquals(16240508, node0.getSourcePosition());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      
      Node node1 = Node.newNumber((double) 8, 4095, 49);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertEquals(16773169, node1.getSourcePosition());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertEquals(4095, node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFor());
      assertEquals(49, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isNumber());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      node0.removeProp((-2498));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertEquals(3964, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals(3964, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertEquals(16240508, node0.getSourcePosition());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      
      boolean boolean0 = node0.isOr();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertEquals(3964, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals(3964, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertEquals(16240508, node0.getSourcePosition());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(3964, nodeArray0, (-234), 2057);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.isContinue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isCast());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isNot());
      assertFalse(node2.isName());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertEquals(3964, node2.getType());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isString());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isWhile());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIf());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isDefaultCase());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFor());
      assertFalse(node2.isWith());
      assertFalse(node2.isCase());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertEquals(0, nodeArray0.length);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      String string0 = node2.getQualifiedName();
      assertNull(string0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.isContinue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isCast());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isNot());
      assertFalse(node2.isName());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertEquals(3964, node2.getType());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isString());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isWhile());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIf());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isDefaultCase());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFor());
      assertFalse(node2.isWith());
      assertFalse(node2.isCase());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertEquals(0, nodeArray0.length);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(3269, "");
      assertNotNull(node0);
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(3269, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      nodeArray0[0] = node0;
      Node node1 = null;
      try {
        node1 = new Node(31, nodeArray0, 3716, 960);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = Node.newString("length");
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      
      Node node1 = Node.newString("$hQD45XbaZ>UOaU~)", 15, 0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertEquals(15, node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertTrue(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isParamList());
      assertEquals(61440, node1.getSourcePosition());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = new Node(0, 2076, 2076);
      assertNotNull(node0);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertEquals(2076, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertEquals(2076, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertEquals(8505372, node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      
      node0.setType((-2528));
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertEquals((-2528), node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertEquals(2076, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertEquals(2076, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertEquals(8505372, node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      
      boolean boolean0 = node0.isString();
      assertFalse(boolean0);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertEquals((-2528), node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertEquals(2076, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertEquals(2076, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertEquals(8505372, node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      
      boolean boolean1 = node0.isNot();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertEquals((-2528), node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertEquals(2076, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertEquals(2076, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertEquals(8505372, node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) simpleErrorReporter0;
      objectArray0[1] = (Object) jSTypeRegistry0;
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage("", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property 
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = Node.newNumber((-55.34420070904429));
      assertNotNull(node0);
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      Node node1 = new Node(51, node0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertEquals(51, node1.getType());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertTrue(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertEquals(51, node1.getType());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertTrue(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isEmpty());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isInc());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isThis());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertEquals(39, node2.getType());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNew());
      assertFalse(node2.isString());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isGetProp());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertTrue(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-240));
      assertNotNull(node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals((-240), node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals((-240), node_SideEffectFlags0.valueOf());
      assertEquals((-240), node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      assertNotNull(node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals((-240), node_SideEffectFlags0.valueOf());
      assertEquals((-240), node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals((-240), node_SideEffectFlags2.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      assertNotNull(node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals((-240), node_SideEffectFlags0.valueOf());
      assertEquals((-240), node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals((-240), node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals((-240), node_SideEffectFlags3.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      assertNotNull(node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setReturnsTainted();
      assertNotNull(node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setAllFlags();
      assertNotNull(node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      
      node_SideEffectFlags4.clearSideEffectFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags0.valueOf());
      assertEquals(15, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags3.valueOf());
      assertEquals(15, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      
      boolean boolean0 = node2.isDebugger();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(boolean0);
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertEquals(51, node1.getType());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertTrue(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isEmpty());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isInc());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isThis());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertEquals(39, node2.getType());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNew());
      assertFalse(node2.isString());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isGetProp());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertTrue(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node2.setVarArgs(false);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabel());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertEquals(51, node1.getType());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertTrue(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isEmpty());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isInc());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isThis());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertEquals(39, node2.getType());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNew());
      assertFalse(node2.isString());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isGetProp());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertTrue(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean1 = node0.isGetElem();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(node0, node2);
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      assertNotNull(node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      
      node_SideEffectFlags0.clearSideEffectFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      assertNotNull(node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesThis();
      assertNotNull(node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setReturnsTainted();
      assertNotNull(node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags2.setMutatesArguments();
      assertNotNull(node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags3.setThrows();
      assertNotNull(node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags7.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags7.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags3.setAllFlags();
      assertNotNull(node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags8.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags8.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags3.setThrows();
      assertNotNull(node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags9.valueOf());
      assertTrue(node_SideEffectFlags9.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags9.setMutatesThis();
      assertNotNull(node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags9.valueOf());
      assertTrue(node_SideEffectFlags9.areAllFlagsSet());
      assertTrue(node_SideEffectFlags10.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags10.valueOf());
      
      node_SideEffectFlags2.clearSideEffectFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags1.valueOf());
      assertEquals(15, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags10.setAllFlags();
      assertNotNull(node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags7);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags9.valueOf());
      assertTrue(node_SideEffectFlags9.areAllFlagsSet());
      assertTrue(node_SideEffectFlags10.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags10.valueOf());
      assertTrue(node_SideEffectFlags11.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags11.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags12 = node_SideEffectFlags0.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags12.valueOf());
      assertTrue(node_SideEffectFlags12.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags13 = node_SideEffectFlags2.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags7);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags13.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags13.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags14 = node_SideEffectFlags1.setThrows();
      assertNotNull(node_SideEffectFlags14);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertTrue(node_SideEffectFlags14.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags14.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags15 = node_SideEffectFlags10.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags15);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags15.valueOf());
      assertTrue(node_SideEffectFlags15.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags9.valueOf());
      assertTrue(node_SideEffectFlags9.areAllFlagsSet());
      assertTrue(node_SideEffectFlags10.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags10.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags16 = node_SideEffectFlags9.setAllFlags();
      assertNotNull(node_SideEffectFlags16);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags16.valueOf());
      assertTrue(node_SideEffectFlags16.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags9.valueOf());
      assertTrue(node_SideEffectFlags9.areAllFlagsSet());
      
      Node node0 = Node.newString("REGEXP_FUNCTION_TYPE", 52, 0);
      assertNotNull(node0);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertEquals(52, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(212992, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      Node node1 = Node.newNumber(0.0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAnd());
      assertFalse(node1.isHook());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.isNumber());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertEquals(39, node1.getType());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCase());
      assertFalse(node1.isOr());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = new Node(79, 0, (-1532));
      assertNotNull(node0);
      assertEquals(79, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      Node node1 = new Node(74, node0, node0, 29, 2);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(79, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(118786, node1.getSourcePosition());
      assertEquals(29, node1.getLineno());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertEquals(74, node1.getType());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isVar());
      assertEquals(2, node1.getCharno());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node2 = Node.newNumber(199.0);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isIn());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isThrow());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWhile());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isComma());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertTrue(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isString());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isLabel());
      assertFalse(node2.isWith());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isDo());
      assertFalse(node2.isOr());
      assertFalse(node2.isHook());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isNew());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isThis());
      assertFalse(node2.isBlock());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCase());
      assertFalse(node2.isParamList());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isGetterDef());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      
      Node[] nodeArray0 = new Node[1];
      Node node3 = new Node(2369, node2);
      assertNotNull(node3);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isIn());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isThrow());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWhile());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isComma());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertTrue(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isString());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isLabel());
      assertFalse(node2.isWith());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isDo());
      assertFalse(node2.isOr());
      assertFalse(node2.isHook());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isNew());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isThis());
      assertFalse(node2.isBlock());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCase());
      assertFalse(node2.isParamList());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isGetterDef());
      assertFalse(node3.isDo());
      assertFalse(node3.isWhile());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isAdd());
      assertFalse(node3.isOr());
      assertEquals((-1), node3.getLineno());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isAssign());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isName());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCall());
      assertFalse(node3.isDec());
      assertFalse(node3.isReturn());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isWith());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertEquals(2369, node3.getType());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCast());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isFunction());
      assertFalse(node3.isThrow());
      assertFalse(node3.isString());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.isIn());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNE());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isFor());
      assertFalse(node3.isIf());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isTry());
      assertTrue(node3.hasChildren());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isComma());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isScript());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isParamList());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isVar());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      
      nodeArray0[0] = node3;
      Node node4 = new Node((-557), nodeArray0, 38, 48);
      assertNotNull(node4);
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isContinue());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isDo());
      assertFalse(node4.isNumber());
      assertFalse(node4.isOr());
      assertFalse(node4.isVar());
      assertFalse(node4.isCast());
      assertFalse(node4.isNew());
      assertFalse(node4.isAdd());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAnd());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isNull());
      assertEquals((-557), node4.getType());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isName());
      assertFalse(node4.isVoid());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isCall());
      assertFalse(node4.isBreak());
      assertFalse(node4.isDec());
      assertEquals(38, node4.getLineno());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isWhile());
      assertFalse(node4.isAssign());
      assertFalse(node4.isReturn());
      assertTrue(node4.hasOneChild());
      assertFalse(node4.isComma());
      assertFalse(node4.isIn());
      assertFalse(node4.isCase());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isNE());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isString());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isIf());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isInc());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isFalse());
      assertFalse(node4.isThrow());
      assertEquals(48, node4.getCharno());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isCatch());
      assertEquals(155696, node4.getSourcePosition());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isScript());
      assertFalse(node4.isParamList());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isHook());
      assertFalse(node4.isTry());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isWith());
      assertFalse(node4.isBlock());
      assertFalse(node4.isFor());
      assertEquals(1, node4.getChildCount());
      assertFalse(node4.isThis());
      assertEquals(1, nodeArray0.length);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean0 = node3.isSetterDef();
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node0));
      assertFalse(boolean0);
      assertNotSame(node3, node1);
      assertNotSame(node3, node4);
      assertNotSame(node3, node0);
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isIn());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isThrow());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWhile());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isComma());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertTrue(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isString());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isLabel());
      assertFalse(node2.isWith());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isDo());
      assertFalse(node2.isOr());
      assertFalse(node2.isHook());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isNew());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isThis());
      assertFalse(node2.isBlock());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCase());
      assertFalse(node2.isParamList());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isGetterDef());
      assertFalse(node3.isDo());
      assertFalse(node3.isWhile());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isAdd());
      assertFalse(node3.isOr());
      assertEquals((-1), node3.getLineno());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isAssign());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isName());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCall());
      assertFalse(node3.isDec());
      assertFalse(node3.isReturn());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isWith());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertEquals(2369, node3.getType());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCast());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isFunction());
      assertFalse(node3.isThrow());
      assertFalse(node3.isString());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.isIn());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNE());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isFor());
      assertFalse(node3.isIf());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isTry());
      assertTrue(node3.hasChildren());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isComma());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isScript());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isParamList());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isVar());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      
      boolean boolean1 = node3.isThrow();
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node3, node1);
      assertNotSame(node3, node4);
      assertNotSame(node3, node0);
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isIn());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isThrow());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWhile());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isComma());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertTrue(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isString());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isLabel());
      assertFalse(node2.isWith());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isDo());
      assertFalse(node2.isOr());
      assertFalse(node2.isHook());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isNew());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isThis());
      assertFalse(node2.isBlock());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCase());
      assertFalse(node2.isParamList());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isGetterDef());
      assertFalse(node3.isDo());
      assertFalse(node3.isWhile());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isAdd());
      assertFalse(node3.isOr());
      assertEquals((-1), node3.getLineno());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isAssign());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isName());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCall());
      assertFalse(node3.isDec());
      assertFalse(node3.isReturn());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isWith());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertEquals(2369, node3.getType());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCast());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isFunction());
      assertFalse(node3.isThrow());
      assertFalse(node3.isString());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.isIn());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNE());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isFor());
      assertFalse(node3.isIf());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isTry());
      assertTrue(node3.hasChildren());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isComma());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isScript());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isParamList());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isVar());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      
      int int0 = node0.getSourcePosition();
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertEquals((-1), int0);
      assertNotSame(node0, node3);
      assertNotSame(node0, node4);
      assertNotSame(node0, node1);
      assertEquals(79, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      assertNotNull(node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(51, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertNotNull(node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(51, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(51, node_SideEffectFlags1.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      assertNotNull(node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      assertNotNull(node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      assertNotNull(node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      
      int int1 = node_SideEffectFlags4.valueOf();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setAllFlags();
      assertNotNull(node_SideEffectFlags5);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      
      boolean boolean2 = node4.isLocalResultCall();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(boolean2);
      assertNotSame(node4, node0);
      assertNotSame(node4, node3);
      assertNotSame(node4, node1);
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isContinue());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isDo());
      assertFalse(node4.isNumber());
      assertFalse(node4.isOr());
      assertFalse(node4.isVar());
      assertFalse(node4.isCast());
      assertFalse(node4.isNew());
      assertFalse(node4.isAdd());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAnd());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isNull());
      assertEquals((-557), node4.getType());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isName());
      assertFalse(node4.isVoid());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isCall());
      assertFalse(node4.isBreak());
      assertFalse(node4.isDec());
      assertEquals(38, node4.getLineno());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isWhile());
      assertFalse(node4.isAssign());
      assertFalse(node4.isReturn());
      assertTrue(node4.hasOneChild());
      assertFalse(node4.isComma());
      assertFalse(node4.isIn());
      assertFalse(node4.isCase());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isNE());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isString());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isIf());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isInc());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isFalse());
      assertFalse(node4.isThrow());
      assertEquals(48, node4.getCharno());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isCatch());
      assertEquals(155696, node4.getSourcePosition());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isScript());
      assertFalse(node4.isParamList());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isHook());
      assertFalse(node4.isTry());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isWith());
      assertFalse(node4.isBlock());
      assertFalse(node4.isFor());
      assertEquals(1, node4.getChildCount());
      assertFalse(node4.isThis());
      assertEquals(1, nodeArray0.length);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean3 = node3.isUnscopedQualifiedName();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node0));
      assertFalse(boolean3);
      assertNotSame(node3, node1);
      assertNotSame(node3, node4);
      assertNotSame(node3, node0);
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isIn());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isThrow());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWhile());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isComma());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertTrue(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isString());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isLabel());
      assertFalse(node2.isWith());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isDo());
      assertFalse(node2.isOr());
      assertFalse(node2.isHook());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isNew());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isThis());
      assertFalse(node2.isBlock());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCase());
      assertFalse(node2.isParamList());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isGetterDef());
      assertFalse(node3.isDo());
      assertFalse(node3.isWhile());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isAdd());
      assertFalse(node3.isOr());
      assertEquals((-1), node3.getLineno());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isAssign());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isName());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCall());
      assertFalse(node3.isDec());
      assertFalse(node3.isReturn());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isWith());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertEquals(2369, node3.getType());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCast());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isFunction());
      assertFalse(node3.isThrow());
      assertFalse(node3.isString());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.isIn());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNE());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isFor());
      assertFalse(node3.isIf());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isTry());
      assertTrue(node3.hasChildren());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isComma());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isScript());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isParamList());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isVar());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      
      Node node5 = Node.newString("kRkLuPdUW%+&O;$", 57, 1628);
      assertNotNull(node5);
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isCast());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isScript());
      assertFalse(node5.isNot());
      assertFalse(node5.isOr());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isNumber());
      assertFalse(node5.isLabel());
      assertFalse(node5.isDo());
      assertFalse(node5.isAnd());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isContinue());
      assertFalse(node5.isFalse());
      assertFalse(node5.isHook());
      assertFalse(node5.isBlock());
      assertTrue(node5.isString());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isThrow());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isInc());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isCatch());
      assertFalse(node5.isInstanceOf());
      assertEquals(57, node5.getLineno());
      assertFalse(node5.isCase());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isThis());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isWith());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isFor());
      assertFalse(node5.isTry());
      assertFalse(node5.isVoid());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isIf());
      assertFalse(node5.isNE());
      assertFalse(node5.isTrue());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isIn());
      assertEquals(0, node5.getChildCount());
      assertEquals(40, node5.getType());
      assertFalse(node5.isParamList());
      assertFalse(node5.isDefaultCase());
      assertEquals(235100, node5.getSourcePosition());
      assertFalse(node5.isFunction());
      assertFalse(node5.isVar());
      assertFalse(node5.isCall());
      assertFalse(node5.isNew());
      assertFalse(node5.isName());
      assertFalse(node5.isNull());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isAdd());
      assertEquals(1628, node5.getCharno());
      assertFalse(node5.isReturn());
      assertFalse(node5.isWhile());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isDec());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isComma());
      assertFalse(node5.isBreak());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isAssign());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      node5.putIntProp(2, (-2960));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isCast());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isScript());
      assertFalse(node5.isNot());
      assertFalse(node5.isOr());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isNumber());
      assertFalse(node5.isLabel());
      assertFalse(node5.isDo());
      assertFalse(node5.isAnd());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isContinue());
      assertFalse(node5.isFalse());
      assertFalse(node5.isHook());
      assertFalse(node5.isBlock());
      assertTrue(node5.isString());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isThrow());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isInc());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isCatch());
      assertFalse(node5.isInstanceOf());
      assertEquals(57, node5.getLineno());
      assertFalse(node5.isCase());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isThis());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isWith());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isFor());
      assertFalse(node5.isTry());
      assertFalse(node5.isVoid());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isIf());
      assertFalse(node5.isNE());
      assertFalse(node5.isTrue());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isIn());
      assertEquals(0, node5.getChildCount());
      assertEquals(40, node5.getType());
      assertFalse(node5.isParamList());
      assertFalse(node5.isDefaultCase());
      assertEquals(235100, node5.getSourcePosition());
      assertFalse(node5.isFunction());
      assertFalse(node5.isVar());
      assertFalse(node5.isCall());
      assertFalse(node5.isNew());
      assertFalse(node5.isName());
      assertFalse(node5.isNull());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isAdd());
      assertEquals(1628, node5.getCharno());
      assertFalse(node5.isReturn());
      assertFalse(node5.isWhile());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isDec());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isComma());
      assertFalse(node5.isBreak());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isAssign());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node6 = node1.srcref(node3);
      assertNotNull(node6);
      assertFalse(node0.equals((Object)node5));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node2.equals((Object)node5));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node5));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node2));
      assertNotSame(node0, node6);
      assertNotSame(node0, node3);
      assertNotSame(node0, node4);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node4);
      assertSame(node1, node6);
      assertNotSame(node1, node3);
      assertNotSame(node3, node6);
      assertNotSame(node3, node1);
      assertNotSame(node3, node4);
      assertNotSame(node3, node0);
      assertNotSame(node6, node4);
      assertNotSame(node6, node0);
      assertNotSame(node6, node3);
      assertSame(node6, node1);
      assertEquals(79, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertEquals(74, node1.getType());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isIn());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isThrow());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWhile());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isComma());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertTrue(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isString());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isLabel());
      assertFalse(node2.isWith());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isDo());
      assertFalse(node2.isOr());
      assertFalse(node2.isHook());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isNew());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isThis());
      assertFalse(node2.isBlock());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCase());
      assertFalse(node2.isParamList());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isGetterDef());
      assertFalse(node3.isDo());
      assertFalse(node3.isWhile());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isAdd());
      assertFalse(node3.isOr());
      assertEquals((-1), node3.getLineno());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isAssign());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isName());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCall());
      assertFalse(node3.isDec());
      assertFalse(node3.isReturn());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isWith());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertEquals(2369, node3.getType());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCast());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isFunction());
      assertFalse(node3.isThrow());
      assertFalse(node3.isString());
      assertFalse(node3.isCase());
      assertFalse(node3.isInc());
      assertFalse(node3.isIn());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNE());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isFor());
      assertFalse(node3.isIf());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isTry());
      assertTrue(node3.hasChildren());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isComma());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isScript());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isParamList());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isVar());
      assertFalse(node6.isInstanceOf());
      assertFalse(node6.isGetProp());
      assertFalse(node6.isBreak());
      assertFalse(node6.isNot());
      assertFalse(node6.isAnd());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.isCast());
      assertFalse(node6.isInc());
      assertFalse(node6.isFalse());
      assertFalse(node6.isThrow());
      assertFalse(node6.isLabel());
      assertEquals(1, node6.getChildCount());
      assertEquals((-1), node6.getLineno());
      assertTrue(node6.hasChildren());
      assertFalse(node6.hasMoreThanOneChild());
      assertFalse(node6.isIn());
      assertFalse(node6.isCase());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isLabelName());
      assertFalse(node6.isNumber());
      assertFalse(node6.isIf());
      assertFalse(node6.isSwitch());
      assertEquals((-1), node6.getCharno());
      assertFalse(node6.isNE());
      assertFalse(node6.isTry());
      assertFalse(node6.isScript());
      assertFalse(node6.isRegExp());
      assertFalse(node6.isWith());
      assertFalse(node6.isBlock());
      assertFalse(node6.isFor());
      assertFalse(node6.isThis());
      assertFalse(node6.isHook());
      assertFalse(node6.isCatch());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isName());
      assertFalse(node6.isParamList());
      assertFalse(node6.isTrue());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isNull());
      assertFalse(node6.isAdd());
      assertFalse(node6.isNew());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isDo());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isFunction());
      assertFalse(node6.isVar());
      assertFalse(node6.isOr());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isContinue());
      assertFalse(node6.isString());
      assertFalse(node6.isDelProp());
      assertEquals((-1), node6.getSourcePosition());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isCall());
      assertFalse(node6.isVoid());
      assertFalse(node6.isGetElem());
      assertFalse(node6.isWhile());
      assertFalse(node6.isDec());
      assertFalse(node6.isAssign());
      assertFalse(node6.isTypeOf());
      assertEquals(74, node6.getType());
      assertFalse(node6.isComma());
      assertFalse(node6.isReturn());
      assertTrue(node6.hasOneChild());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = new Node((-518), (-31), 29);
      assertNotNull(node0);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-518), node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      boolean boolean0 = node0.isFromExterns();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-518), node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Node node1 = new Node(4, 119, (-234));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertEquals(4, node1.getType());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssign());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isIn());
      assertTrue(node1.isReturn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      Node node2 = new Node((-263));
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isThis());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isHook());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isThrow());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertFalse(node2.isInc());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isIn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isFunction());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNull());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isName());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertFalse(node2.isBlock());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isNE());
      assertFalse(node2.isNumber());
      assertFalse(node2.isIf());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isLabel());
      assertFalse(node2.isFor());
      assertFalse(node2.isScript());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isTry());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isStringKey());
      assertEquals((-263), node2.getType());
      assertFalse(node2.isGetterDef());
      assertEquals((-1), node2.getCharno());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node3 = null;
      try {
        node3 = new Node(2, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = Node.newString("{;{BTex)oG%{R");
      assertNotNull(node0);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      String string0 = node0.getQualifiedName();
      assertNull(string0);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      Node node1 = node0.cloneNode();
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertEquals(40, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertTrue(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node2 = node1.removeChildren();
      assertNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertEquals(40, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertTrue(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node3 = Node.newNumber((double) 2);
      assertNotNull(node3);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.isCatch());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isTry());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isCall());
      assertFalse(node3.isFor());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isNE());
      assertFalse(node3.isNull());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isName());
      assertFalse(node3.isIf());
      assertFalse(node3.isContinue());
      assertFalse(node3.isString());
      assertFalse(node3.isIn());
      assertFalse(node3.isInc());
      assertFalse(node3.isReturn());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isWhile());
      assertTrue(node3.isNumber());
      assertFalse(node3.isCast());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isDebugger());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isNot());
      assertFalse(node3.isWith());
      assertFalse(node3.isComma());
      assertFalse(node3.isScript());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isHook());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isBreak());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isCase());
      assertEquals(39, node3.getType());
      assertFalse(node3.isOr());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAdd());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNew());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isVar());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isParamList());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isSwitch());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        node3.appendStringTree(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = Node.newString("~_b7-c|<P", (-1594), (-1594));
      assertNotNull(node0);
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      
      Node node1 = new Node((-1594), node0, node0, node0, node0, 15, (-240));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1594), node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isHook());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isComma());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isDec());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      boolean boolean0 = node1.isFromExterns();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1594), node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isHook());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isComma());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isDec());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      Node node2 = null;
      try {
        node2 = new Node(52, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = Node.newString("");
      assertNotNull(node0);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      node0.setLength(2449);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean0 = node0.isStringKey();
      assertFalse(boolean0);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('{');
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("{", stringWriter0.toString());
      assertEquals("{", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertNotNull(stringBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("{", stringWriter0.toString());
      assertEquals("{", stringWriter1.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("{", stringBuffer0.toString());
      
      node0.appendStringTree(stringBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertEquals(79, stringBuffer0.length());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      int int0 = 2150;
      Node node0 = Node.newString("com.google.common.base.Predicates$1");
      assertNotNull(node0);
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node1 = new Node((-2507), node0, node0, node0, node0, 117, 38);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-2507), node1.getType());
      assertFalse(node1.isReturn());
      assertFalse(node1.isIn());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCast());
      assertEquals(38, node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWith());
      assertEquals(117, node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertEquals(479270, node1.getSourcePosition());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isTry());
      assertFalse(node1.isOr());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      Node node2 = null;
      try {
        node2 = new Node(2150, node1, node0, 47, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = new Node((-2447), 0, 0);
      assertNotNull(node0);
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      int int0 = node0.getIntProp(0);
      assertEquals(0, int0);
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      boolean boolean0 = node0.wasEmptyNode();
      assertFalse(boolean0);
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      Node node1 = new Node((-2447), node0, node0, node0, node0, 55, 32);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertEquals((-2447), node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWith());
      assertFalse(node1.isInc());
      assertEquals(225312, node1.getSourcePosition());
      assertFalse(node1.isIn());
      assertFalse(node1.isIf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isString());
      assertEquals(32, node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isBreak());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertEquals(55, node1.getLineno());
      assertFalse(node1.isOr());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      node1.setLineno(29);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertEquals((-2447), node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWith());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isIf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertEquals(1, node1.getChildCount());
      assertEquals(118816, node1.getSourcePosition());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isString());
      assertEquals(32, node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertEquals(29, node1.getLineno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isBreak());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      node1.setCharno((-962));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertEquals((-2447), node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWith());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isIf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isBreak());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      boolean boolean1 = node0.isEquivalentTo(node1, true, true, false);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertEquals((-2447), node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWith());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isIf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isBreak());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      boolean boolean2 = node1.isAssignAdd();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertEquals((-2447), node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWith());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isIf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isBreak());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals((-2447), node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertEquals((-2447), node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWith());
      assertFalse(node1.isInc());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isIn());
      assertFalse(node1.isIf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isBreak());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isReturn());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isDec());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isOr());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isThrow());
      assertFalse(node2.isWhile());
      assertFalse(node2.isGetProp());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isIn());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCall());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isParamList());
      assertEquals((-2447), node2.getType());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isSwitch());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      int int1 = 620;
      Node node3 = null;
      try {
        node3 = new Node(31, node0, node2, node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = new Node(79, 0, (-1532));
      assertNotNull(node0);
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(79, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node node1 = new Node(32);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertEquals(32, node1.getType());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node2 = node0.srcrefTree(node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertSame(node2, node0);
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(79, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertEquals(32, node1.getType());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isFalse());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isThrow());
      assertFalse(node2.isDefaultCase());
      assertEquals(79, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNot());
      assertFalse(node2.isNull());
      assertFalse(node2.isAnd());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isCall());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isNew());
      assertFalse(node2.isCast());
      assertFalse(node2.isDo());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isScript());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isThis());
      assertFalse(node2.isTry());
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      
      boolean boolean0 = node2.isDelProp();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(boolean0);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertSame(node2, node0);
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(79, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertEquals(32, node1.getType());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isFalse());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isThrow());
      assertFalse(node2.isDefaultCase());
      assertEquals(79, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNot());
      assertFalse(node2.isNull());
      assertFalse(node2.isAnd());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isCall());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isNew());
      assertFalse(node2.isCast());
      assertFalse(node2.isDo());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isScript());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isThis());
      assertFalse(node2.isTry());
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = "{;{BTex)oG%{R";
      Node node0 = Node.newString("{;{BTex)oG%{R");
      assertNotNull(node0);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      String string1 = node0.getQualifiedName();
      assertNull(string1);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      Node node1 = node0.cloneNode();
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertEquals(40, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertTrue(node1.isString());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node2 = node1.removeChildren();
      assertNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertEquals(40, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertTrue(node1.isString());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      node0.setVarArgs(false);
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      node0.setLineno(117);
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertEquals(117, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals(479232, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      try { 
        node0.setDouble((-1028.3804));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING {;{BTex)oG%{R 117 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      assertNotNull(node0);
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertEquals(65552, node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals(16, node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      node0.setDouble(16);
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertEquals(65552, node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals(16, node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      
      node0.setWasEmptyNode(true);
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertEquals(65552, node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals(16, node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      
      node0.setIsSyntheticBlock(true);
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertEquals(65552, node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals(16, node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      
      node0.setDouble(1.0);
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertEquals(65552, node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals(16, node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      
      Node node1 = Node.newNumber(0.5);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals(39, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals(39, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isThrow());
      assertFalse(node2.isComma());
      assertFalse(node2.isCall());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDebugger());
      assertTrue(node2.isNumber());
      assertFalse(node2.isString());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCast());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isVar());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertEquals(39, node2.getType());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isTry());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      
      Node node3 = node1.srcrefTree(node2);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node3);
      assertSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node3, node0);
      assertSame(node3, node1);
      assertNotSame(node3, node2);
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals(39, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isThrow());
      assertFalse(node2.isComma());
      assertFalse(node2.isCall());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDebugger());
      assertTrue(node2.isNumber());
      assertFalse(node2.isString());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCast());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isVar());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertEquals(39, node2.getType());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isTry());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node3.isString());
      assertFalse(node3.isInc());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCase());
      assertFalse(node3.isIn());
      assertFalse(node3.isNE());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isFor());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isBreak());
      assertTrue(node3.isNumber());
      assertFalse(node3.isTry());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isThis());
      assertFalse(node3.isComma());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isHook());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isScript());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isParamList());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isVar());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isLabel());
      assertFalse(node3.isDo());
      assertEquals(39, node3.getType());
      assertFalse(node3.isWhile());
      assertFalse(node3.isContinue());
      assertFalse(node3.isNew());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isOr());
      assertFalse(node3.isAdd());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isAssign());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isReturn());
      assertFalse(node3.isBlock());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isWith());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isCatch());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCast());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isFunction());
      
      boolean boolean0 = node2.isTry();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(boolean0);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node3);
      assertSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals(39, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isThrow());
      assertFalse(node2.isComma());
      assertFalse(node2.isCall());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDebugger());
      assertTrue(node2.isNumber());
      assertFalse(node2.isString());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCast());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isVar());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertEquals(39, node2.getType());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isTry());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      
      boolean boolean1 = node1.isFromExterns();
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals(39, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      
      boolean boolean2 = node0.isSwitch();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      
      boolean boolean3 = node2.isHook();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node3);
      assertSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals(39, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isThrow());
      assertFalse(node2.isComma());
      assertFalse(node2.isCall());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDebugger());
      assertTrue(node2.isNumber());
      assertFalse(node2.isString());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCast());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isVar());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertEquals(39, node2.getType());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isTry());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      
      boolean boolean4 = node2.isScript();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node3);
      assertSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals(39, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isThrow());
      assertFalse(node2.isComma());
      assertFalse(node2.isCall());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDebugger());
      assertTrue(node2.isNumber());
      assertFalse(node2.isString());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCast());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isVar());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertEquals(39, node2.getType());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isTry());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      
      boolean boolean5 = node3.isDebugger();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node3);
      assertSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node3, node0);
      assertSame(node3, node1);
      assertNotSame(node3, node2);
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals(39, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isThrow());
      assertFalse(node2.isComma());
      assertFalse(node2.isCall());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDebugger());
      assertTrue(node2.isNumber());
      assertFalse(node2.isString());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCast());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isVar());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertEquals(39, node2.getType());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isTry());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node3.isString());
      assertFalse(node3.isInc());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCase());
      assertFalse(node3.isIn());
      assertFalse(node3.isNE());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isFor());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isBreak());
      assertTrue(node3.isNumber());
      assertFalse(node3.isTry());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isThis());
      assertFalse(node3.isComma());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isHook());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isScript());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isParamList());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isVar());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isLabel());
      assertFalse(node3.isDo());
      assertEquals(39, node3.getType());
      assertFalse(node3.isWhile());
      assertFalse(node3.isContinue());
      assertFalse(node3.isNew());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isOr());
      assertFalse(node3.isAdd());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isAssign());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isReturn());
      assertFalse(node3.isBlock());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isWith());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isCatch());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCast());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isFunction());
      
      boolean boolean6 = node1.hasOneChild();
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6);
      assertSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals(39, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      assertNotNull(node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      assertNotNull(node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setThrows();
      assertNotNull(node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setAllFlags();
      assertNotNull(node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags1.setMutatesArguments();
      assertNotNull(node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags7.valueOf());
      assertTrue(node_SideEffectFlags7.areAllFlagsSet());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      assertNotNull(node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      node0.setType((-2528));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertEquals((-2528), node0.getType());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      String string0 = node0.getQualifiedName();
      assertNull(string0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertEquals((-2528), node0.getType());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      node0.setVarArgs(false);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertEquals((-2528), node0.getType());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      node0.setLineno((-2507));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertEquals((-2528), node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      // Undeclared exception!
      try { 
        node0.setDouble(1424.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2528
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 54, 0);
      assertNotNull(node0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertEquals(221184, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertEquals(54, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals(39, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node1 = new Node(57, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertEquals(221184, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertEquals(54, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals(39, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNull());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTrue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertEquals(57, node1.getType());
      assertFalse(node1.isAssign());
      assertFalse(node1.isIf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isTry());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      // Undeclared exception!
      try { 
        node1.checkTreeEquals((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = new Node((-503), 0, 0);
      assertNotNull(node0);
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertEquals((-503), node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = (NoType)modificationVisitor0.caseNoType();
      assertNotNull(noType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isTemplatizedType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = (JSType) noType0;
      jSTypeArray0[1] = (JSType) noType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, noType0);
      assertNotNull(enumType0);
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertEquals((-503), node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isTemplatizedType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isStringValueType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isConstructor());
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumType enumType1 = enumType0.toMaybeEnumType();
      assertNotNull(enumType1);
      assertSame(enumType0, enumType1);
      assertSame(enumType1, enumType0);
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertEquals((-503), node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isTemplatizedType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isStringValueType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType1.isFunctionPrototypeType());
      assertFalse(enumType1.isConstructor());
      assertFalse(enumType1.isRecordType());
      assertFalse(enumType1.isInterface());
      assertFalse(enumType1.isResolved());
      assertFalse(enumType1.isOrdinaryFunction());
      assertFalse(enumType1.isNumberValueType());
      assertFalse(enumType1.isUnionType());
      assertFalse(enumType1.isNoResolvedType());
      assertTrue(enumType1.matchesStringContext());
      assertFalse(enumType1.isBooleanValueType());
      assertFalse(enumType1.isStringValueType());
      assertFalse(enumType1.isVoidType());
      assertTrue(enumType1.isEnumType());
      assertFalse(enumType1.isNominalConstructor());
      assertFalse(enumType1.matchesNumberContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertFalse(enumType1.isNullType());
      assertFalse(enumType1.isCheckedUnknownType());
      assertTrue(enumType1.matchesObjectContext());
      assertTrue(enumType1.isObject());
      assertFalse(enumType1.isTemplateType());
      assertFalse(enumType1.isNoObjectType());
      assertFalse(enumType1.isNoType());
      assertFalse(enumType1.isNominalType());
      assertFalse(enumType1.isTemplatizedType());
      assertFalse(enumType1.isAllType());
      assertFalse(enumType1.isFunctionType());
      assertFalse(enumType1.isEnumElementType());
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSTypeArray0[2] = (JSType) enumType1;
      jSTypeArray0[3] = (JSType) noType0;
      jSTypeArray0[4] = (JSType) noType0;
      jSTypeArray0[5] = (JSType) noType0;
      jSTypeArray0[6] = (JSType) noType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertEquals(83, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertTrue(node1.isParamList());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertEquals(7, node1.getChildCount());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertEquals(7, jSTypeArray0.length);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      NoType noType1 = (NoType)modificationVisitor0.caseNoType();
      assertNotNull(noType1);
      assertSame(noType1, noType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType1.isEnumElementType());
      assertFalse(noType1.isTemplatizedType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertFalse(noType1.isEnumType());
      assertFalse(noType1.isNullType());
      assertFalse(noType1.isOrdinaryFunction());
      assertFalse(noType1.isAllType());
      assertFalse(noType1.isNominalType());
      assertFalse(noType1.isNominalConstructor());
      assertFalse(noType1.isVoidType());
      assertFalse(noType1.isStringValueType());
      assertFalse(noType1.isInterface());
      assertFalse(noType1.isTemplateType());
      assertFalse(noType1.isResolved());
      assertFalse(noType1.isReturnTypeInferred());
      assertFalse(noType1.isNoObjectType());
      assertFalse(noType1.isFunctionPrototypeType());
      assertTrue(noType1.hasInstanceType());
      assertTrue(noType1.isNoType());
      assertFalse(noType1.hasCachedValues());
      assertFalse(noType1.isRecordType());
      assertTrue(noType1.canBeCalled());
      assertNull(noType1.getReferenceName());
      assertTrue(noType1.matchesNumberContext());
      assertTrue(noType1.isConstructor());
      assertFalse(noType1.isFunctionType());
      assertFalse(noType1.isNumberValueType());
      assertFalse(noType1.isUnionType());
      assertFalse(noType1.isNoResolvedType());
      assertFalse(noType1.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertTrue(noType1.isObject());
      assertFalse(noType1.isBooleanValueType());
      assertTrue(noType1.matchesStringContext());
      assertTrue(noType1.isNullable());
      assertTrue(noType1.matchesObjectContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) noType0);
      assertNull(functionType0);
      assertSame(noType0, noType1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isTemplatizedType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      node0.setJSType((JSType) null);
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertEquals((-503), node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      node0.type = 0;
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node1;
      Node node2 = null;
      try {
        node2 = new Node(213, nodeArray0, 52, 4095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = new Node(79, (-1), (-1532));
      assertNotNull(node0);
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertEquals(79, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node node1 = new Node(32);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFunction());
      assertEquals(32, node1.getType());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      int int0 = node0.getSideEffectFlags();
      assertFalse(node0.equals((Object)node1));
      assertEquals(0, int0);
      assertNotSame(node0, node1);
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertEquals(79, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      node0.setVarArgs(true);
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertEquals(79, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      boolean boolean0 = node1.isGetterDef();
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertNotSame(node1, node0);
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFunction());
      assertEquals(32, node1.getType());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      boolean boolean1 = node1.isName();
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node1, node0);
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFunction());
      assertEquals(32, node1.getType());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newString("length");
      assertNotNull(node0);
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      Node node1 = Node.newString("$hQD45XbaZ>UOaU~)", 15, 0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertEquals(15, node1.getLineno());
      assertFalse(node1.isTry());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isIf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertTrue(node1.isString());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertEquals(61440, node1.getSourcePosition());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isVar());
      assertEquals(40, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAnd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node2 = node1.srcrefTree(node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertTrue(node1.isString());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isVar());
      assertEquals(40, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAnd());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAdd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isVar());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertTrue(node2.isString());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isVoid());
      assertFalse(node2.isInc());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isTrue());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertFalse(node2.isThrow());
      assertEquals(40, node2.getType());
      assertFalse(node2.isFunction());
      assertFalse(node2.isCast());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      Node node3 = Node.newString("$hQD45XbaZ>UOaU~)", 57, 39);
      assertNotNull(node3);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isFor());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTry());
      assertFalse(node3.isFunction());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isCatch());
      assertEquals(233511, node3.getSourcePosition());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isWith());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThis());
      assertEquals(40, node3.getType());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertFalse(node3.isInc());
      assertFalse(node3.isIf());
      assertEquals(57, node3.getLineno());
      assertFalse(node3.isNE());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isWhile());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssign());
      assertFalse(node3.isBlock());
      assertFalse(node3.hasOneChild());
      assertTrue(node3.isString());
      assertFalse(node3.isCast());
      assertFalse(node3.isScript());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isNot());
      assertFalse(node3.isParamList());
      assertFalse(node3.isAnd());
      assertFalse(node3.isStringKey());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetProp());
      assertEquals(39, node3.getCharno());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isComma());
      assertFalse(node3.isVar());
      assertFalse(node3.isNew());
      assertFalse(node3.isVoid());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAdd());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isBreak());
      assertFalse(node3.isName());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      InputId inputId0 = node3.getInputId();
      assertNull(inputId0);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isFor());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTry());
      assertFalse(node3.isFunction());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isCatch());
      assertEquals(233511, node3.getSourcePosition());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isWith());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThis());
      assertEquals(40, node3.getType());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertFalse(node3.isInc());
      assertFalse(node3.isIf());
      assertEquals(57, node3.getLineno());
      assertFalse(node3.isNE());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isWhile());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssign());
      assertFalse(node3.isBlock());
      assertFalse(node3.hasOneChild());
      assertTrue(node3.isString());
      assertFalse(node3.isCast());
      assertFalse(node3.isScript());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isNot());
      assertFalse(node3.isParamList());
      assertFalse(node3.isAnd());
      assertFalse(node3.isStringKey());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetProp());
      assertEquals(39, node3.getCharno());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isComma());
      assertFalse(node3.isVar());
      assertFalse(node3.isNew());
      assertFalse(node3.isVoid());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAdd());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isBreak());
      assertFalse(node3.isName());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      node3.setInputId((InputId) null);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isFor());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTry());
      assertFalse(node3.isFunction());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isCatch());
      assertEquals(233511, node3.getSourcePosition());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isWith());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThis());
      assertEquals(40, node3.getType());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertFalse(node3.isInc());
      assertFalse(node3.isIf());
      assertEquals(57, node3.getLineno());
      assertFalse(node3.isNE());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isWhile());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssign());
      assertFalse(node3.isBlock());
      assertFalse(node3.hasOneChild());
      assertTrue(node3.isString());
      assertFalse(node3.isCast());
      assertFalse(node3.isScript());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isNot());
      assertFalse(node3.isParamList());
      assertFalse(node3.isAnd());
      assertFalse(node3.isStringKey());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetProp());
      assertEquals(39, node3.getCharno());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isComma());
      assertFalse(node3.isVar());
      assertFalse(node3.isNew());
      assertFalse(node3.isVoid());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAdd());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isBreak());
      assertFalse(node3.isName());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      // Undeclared exception!
      try { 
        node0.addChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = new Node(0);
      assertNotNull(node0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node1 = new Node(32);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertEquals(32, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isCast());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertTrue(node1.isTypeOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      
      Node node2 = node0.srcrefTree(node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node0, node1);
      assertSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertSame(node2, node0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertEquals(32, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isCast());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertTrue(node1.isTypeOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isIf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertEquals(0, node2.getType());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isScript());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isName());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isBlock());
      assertFalse(node2.isExprResult());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCast());
      assertFalse(node2.isFunction());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      // Undeclared exception!
      try { 
        node1.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = Node.newString("length");
      assertNotNull(node0);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node node1 = Node.newString("$hQD45XbaZ>UOaU~)", 15, 0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertEquals(61440, node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertEquals(15, node1.getLineno());
      assertTrue(node1.isString());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNot());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCatch());
      assertFalse(node1.isObjectLit());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertEquals(40, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      node1.setSourceEncodedPositionForTree(48);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertTrue(node1.isString());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNot());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCatch());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCast());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertEquals(40, node1.getType());
      assertEquals(48, node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssignAdd());
      assertEquals(48, node1.getCharno());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      node1.setVarArgs(true);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertTrue(node1.isString());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNot());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCatch());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCast());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertEquals(40, node1.getType());
      assertEquals(48, node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssignAdd());
      assertEquals(48, node1.getCharno());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      boolean boolean0 = node0.isGetterDef();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      boolean boolean1 = node0.isName();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node0, node1);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      int int0 = 48;
      String string0 = ">*g=6dR\"";
      int int1 = 148;
      Node node0 = Node.newString(">*g=6dR\"", 148, 536870912);
      assertNotNull(node0);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertEquals(610303, node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals(148, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      int int2 = 15;
      int int3 = (-300);
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 16, 16);
      assertNotNull(node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(16, node0.getLineno());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals(65552, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      node0.setDouble(16);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(16, node0.getLineno());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals(65552, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      boolean boolean0 = false;
      node0.setWasEmptyNode(true);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(16, node0.getLineno());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals(65552, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      Node node1 = Node.newString(47, "2K<>H>H", 153, 4);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertEquals(153, node1.getLineno());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isWith());
      assertEquals(4, node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertEquals(626692, node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetElem());
      assertEquals(47, node1.getType());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isRegExp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      boolean boolean1 = node1.isStringKey();
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertEquals(153, node1.getLineno());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isWith());
      assertEquals(4, node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertEquals(626692, node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetElem());
      assertEquals(47, node1.getType());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isRegExp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      Node node2 = Node.newString(32, "", 154, 50);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node2, node1);
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThis());
      assertFalse(node2.isInc());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isInstanceOf());
      assertEquals(154, node2.getLineno());
      assertFalse(node2.isWith());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isIf());
      assertFalse(node2.isBreak());
      assertTrue(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isScript());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isCall());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAdd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isReturn());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isOr());
      assertFalse(node2.isTrue());
      assertEquals(630834, node2.getSourcePosition());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCast());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertEquals(50, node2.getCharno());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertEquals(32, node2.getType());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      node2.setVarArgs(false);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node2, node1);
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThis());
      assertFalse(node2.isInc());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isInstanceOf());
      assertEquals(154, node2.getLineno());
      assertFalse(node2.isWith());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isIf());
      assertFalse(node2.isBreak());
      assertTrue(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isScript());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isCall());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAdd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isReturn());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isOr());
      assertFalse(node2.isTrue());
      assertEquals(630834, node2.getSourcePosition());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCast());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertEquals(50, node2.getCharno());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertEquals(32, node2.getType());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      node2.removeProp(2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node2, node1);
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThis());
      assertFalse(node2.isInc());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isInstanceOf());
      assertEquals(154, node2.getLineno());
      assertFalse(node2.isWith());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isIf());
      assertFalse(node2.isBreak());
      assertTrue(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isScript());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isCall());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAdd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isReturn());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isOr());
      assertFalse(node2.isTrue());
      assertEquals(630834, node2.getSourcePosition());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCast());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertEquals(50, node2.getCharno());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertEquals(32, node2.getType());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter1);
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter2);
      assertFalse(simpleErrorReporter2.equals((Object)simpleErrorReporter0));
      assertFalse(simpleErrorReporter2.equals((Object)simpleErrorReporter1));
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter2, true);
      assertNotNull(jSTypeRegistry0);
      assertFalse(simpleErrorReporter2.equals((Object)simpleErrorReporter0));
      assertFalse(simpleErrorReporter2.equals((Object)simpleErrorReporter1));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
      
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("", node1, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = Node.newString("null", (-826), (-826));
      assertNotNull(node0);
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isVar());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      boolean boolean0 = node0.isWith();
      assertFalse(boolean0);
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isVar());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      String string0 = "\n\nTree2:\n";
      Node node1 = Node.newString("\n\nTree2:\n", 8, 16);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertEquals(16, node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isInc());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isCast());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertEquals(8, node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertEquals(32784, node1.getSourcePosition());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      node0.removeProp(1506);
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isVar());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean1 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
      
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("Not declared as a constructor", node1, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = new Node(0, 2076, 2076);
      assertNotNull(node0);
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(2076, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertEquals(8505372, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertEquals(2076, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isString());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node0.setType((-2528));
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(2076, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertEquals(8505372, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertEquals(2076, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals((-2528), node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isString());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean0 = node0.isString();
      assertFalse(boolean0);
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(2076, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertEquals(8505372, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertEquals(2076, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals((-2528), node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isString());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node1 = Node.newNumber((double) 16);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabelName());
      assertEquals(39, node1.getType());
      assertFalse(node1.isAssign());
      assertFalse(node1.isContinue());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNot());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertTrue(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isGetProp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      node0.putIntProp(473, 8);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(2076, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertEquals(8505372, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertEquals(2076, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals((-2528), node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isString());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node0.addChildToFront(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(2076, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertEquals(8505372, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertEquals(2076, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals((-2528), node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isString());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertTrue(node0.hasOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabelName());
      assertEquals(39, node1.getType());
      assertFalse(node1.isAssign());
      assertFalse(node1.isContinue());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNot());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertTrue(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isGetProp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node[] nodeArray0 = new Node[1];
      Node node2 = Node.newNumber((double) 55);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node2, node1);
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isContinue());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDebugger());
      assertFalse(node2.hasChildren());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isEmpty());
      assertTrue(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isReturn());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isThis());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCast());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isScript());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isIn());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertEquals(39, node2.getType());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getLineno());
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      Node node3 = null;
      try {
        node3 = new Node(55, nodeArray0, (-1537), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = Node.newString(41, "", 161, 1560);
      assertNotNull(node0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertTrue(node0.isNull());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertEquals(1560, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertEquals(661016, node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(161, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertEquals(41, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      node0.setVarArgs(true);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertTrue(node0.isNull());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertEquals(1560, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertEquals(661016, node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(161, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertEquals(41, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node1 = new Node(4095, node0, 15, 161);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertTrue(node0.isNull());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertEquals(1560, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertEquals(661016, node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(161, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertEquals(41, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertEquals(161, node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isInc());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertEquals(4095, node1.getType());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertEquals(61601, node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertEquals(15, node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      
      node0.addChildrenToFront(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertTrue(node0.isNull());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertEquals(1560, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertEquals(661016, node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(161, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertEquals(41, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertEquals(161, node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isInc());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertEquals(4095, node1.getType());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertEquals(61601, node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertEquals(15, node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(157);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 157
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = new Node(79, 0, (-1532));
      assertNotNull(node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertEquals(79, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node1 = new Node(74, node0, node0, 29, 2);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertEquals(79, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertEquals(29, node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertEquals(118786, node1.getSourcePosition());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertEquals(2, node1.getCharno());
      assertFalse(node1.isNull());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertEquals(74, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node node2 = Node.newNumber(199.0);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isIn());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isInc());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertEquals((-1), node2.getCharno());
      assertEquals(39, node2.getType());
      assertFalse(node2.isCase());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isCast());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getLineno());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDo());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isFalse());
      assertFalse(node2.isName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isNot());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isExprResult());
      assertTrue(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isComma());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node[] nodeArray0 = new Node[1];
      Node node3 = new Node(2369, node2);
      assertNotNull(node3);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isIn());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isInc());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertEquals((-1), node2.getCharno());
      assertEquals(39, node2.getType());
      assertFalse(node2.isCase());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isCast());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getLineno());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDo());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isFalse());
      assertFalse(node2.isName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isNot());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isExprResult());
      assertTrue(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isComma());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.isNull());
      assertFalse(node3.isOr());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isContinue());
      assertFalse(node3.isVar());
      assertFalse(node3.isCast());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertEquals(2369, node3.getType());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isVoid());
      assertFalse(node3.isAnd());
      assertFalse(node3.isEmpty());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isReturn());
      assertFalse(node3.isBreak());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isWhile());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isCall());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isComma());
      assertFalse(node3.isAssign());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isInc());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCase());
      assertFalse(node3.isString());
      assertFalse(node3.isIn());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isScript());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTry());
      assertFalse(node3.isNumber());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isThis());
      assertFalse(node3.isNE());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isIf());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isCatch());
      assertFalse(node3.isFor());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isHook());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isWith());
      assertFalse(node3.isRegExp());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      nodeArray0[0] = node3;
      Node node4 = new Node((-557), nodeArray0, 38, 48);
      assertNotNull(node4);
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.isThis());
      assertFalse(node4.isComma());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isBreak());
      assertFalse(node4.isFalse());
      assertEquals((-557), node4.getType());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isAnd());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isInc());
      assertFalse(node4.isThrow());
      assertFalse(node4.isNumber());
      assertFalse(node4.isNE());
      assertFalse(node4.isGetterDef());
      assertEquals(48, node4.getCharno());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isIn());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isIf());
      assertFalse(node4.isScript());
      assertFalse(node4.isRegExp());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isCatch());
      assertFalse(node4.isWith());
      assertFalse(node4.isHook());
      assertEquals(1, node4.getChildCount());
      assertFalse(node4.isBlock());
      assertFalse(node4.isCase());
      assertFalse(node4.isTry());
      assertFalse(node4.isFor());
      assertFalse(node4.isNull());
      assertFalse(node4.isSetterDef());
      assertEquals(155696, node4.getSourcePosition());
      assertFalse(node4.isCall());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isName());
      assertFalse(node4.isParamList());
      assertFalse(node4.isTrue());
      assertFalse(node4.isAdd());
      assertFalse(node4.isFunction());
      assertFalse(node4.isContinue());
      assertFalse(node4.isVar());
      assertFalse(node4.isLabel());
      assertFalse(node4.isNew());
      assertFalse(node4.isDo());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isDec());
      assertFalse(node4.isTypeOf());
      assertEquals(38, node4.getLineno());
      assertFalse(node4.isDelProp());
      assertTrue(node4.hasOneChild());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isAssign());
      assertFalse(node4.isOr());
      assertFalse(node4.isCast());
      assertFalse(node4.isVoid());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertFalse(node4.isString());
      assertFalse(node4.isReturn());
      assertFalse(node4.isWhile());
      assertEquals(1, nodeArray0.length);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean0 = node3.isSetterDef();
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node3, node0);
      assertNotSame(node3, node4);
      assertNotSame(node3, node1);
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isIn());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isInc());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertEquals((-1), node2.getCharno());
      assertEquals(39, node2.getType());
      assertFalse(node2.isCase());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isCast());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getLineno());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDo());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isFalse());
      assertFalse(node2.isName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isNot());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isExprResult());
      assertTrue(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isComma());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.isNull());
      assertFalse(node3.isOr());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isContinue());
      assertFalse(node3.isVar());
      assertFalse(node3.isCast());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertEquals(2369, node3.getType());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isVoid());
      assertFalse(node3.isAnd());
      assertFalse(node3.isEmpty());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isReturn());
      assertFalse(node3.isBreak());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isWhile());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isCall());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isComma());
      assertFalse(node3.isAssign());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isInc());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCase());
      assertFalse(node3.isString());
      assertFalse(node3.isIn());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isScript());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTry());
      assertFalse(node3.isNumber());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isThis());
      assertFalse(node3.isNE());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isIf());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isCatch());
      assertFalse(node3.isFor());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isHook());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isWith());
      assertFalse(node3.isRegExp());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Set<String> set0 = node3.getDirectives();
      assertNull(set0);
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node1));
      assertNotSame(node3, node0);
      assertNotSame(node3, node4);
      assertNotSame(node3, node1);
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isIn());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNE());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isInc());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertEquals((-1), node2.getCharno());
      assertEquals(39, node2.getType());
      assertFalse(node2.isCase());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isCast());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getLineno());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDo());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isFalse());
      assertFalse(node2.isName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isNot());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isExprResult());
      assertTrue(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isComma());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.isNull());
      assertFalse(node3.isOr());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isContinue());
      assertFalse(node3.isVar());
      assertFalse(node3.isCast());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertEquals(2369, node3.getType());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isVoid());
      assertFalse(node3.isAnd());
      assertFalse(node3.isEmpty());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isReturn());
      assertFalse(node3.isBreak());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isWhile());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isCall());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isComma());
      assertFalse(node3.isAssign());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isInc());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCase());
      assertFalse(node3.isString());
      assertFalse(node3.isIn());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isScript());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTry());
      assertFalse(node3.isNumber());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isThis());
      assertFalse(node3.isNE());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isIf());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isCatch());
      assertFalse(node3.isFor());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isHook());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isWith());
      assertFalse(node3.isRegExp());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node5 = new Node(57, 4, 2);
      assertNotNull(node5);
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.isCase());
      assertFalse(node5.isString());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isHook());
      assertFalse(node5.isFor());
      assertFalse(node5.isFalse());
      assertEquals(57, node5.getType());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isTry());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isWith());
      assertFalse(node5.isAnd());
      assertFalse(node5.isCatch());
      assertFalse(node5.isScript());
      assertFalse(node5.isThis());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isRegExp());
      assertEquals(4, node5.getLineno());
      assertFalse(node5.isFunction());
      assertFalse(node5.isThrow());
      assertFalse(node5.isIf());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isInc());
      assertEquals(16386, node5.getSourcePosition());
      assertFalse(node5.isNE());
      assertFalse(node5.isIn());
      assertFalse(node5.isWhile());
      assertFalse(node5.isContinue());
      assertFalse(node5.isDo());
      assertFalse(node5.isBlock());
      assertFalse(node5.isLabel());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isReturn());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isDec());
      assertFalse(node5.isAssign());
      assertFalse(node5.isCast());
      assertFalse(node5.isStringKey());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isParamList());
      assertFalse(node5.isNumber());
      assertFalse(node5.isNot());
      assertEquals(2, node5.getCharno());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isVoid());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isComma());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isName());
      assertFalse(node5.isCall());
      assertFalse(node5.isVar());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isBreak());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isAdd());
      assertFalse(node5.isNew());
      assertFalse(node5.isTrue());
      assertFalse(node5.isNull());
      assertFalse(node5.isOr());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      Node node6 = null;
      try {
        node6 = new Node(15, node4, node3, node2, 40, 46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      String string0 = "";
      Node node0 = Node.newString(1429, "");
      assertNotNull(node0);
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(1429, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      nodeArray0[0] = node0;
      Node node1 = new Node(57, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(1429, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isHook());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isIf());
      assertEquals(57, node1.getType());
      assertFalse(node1.isNE());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      nodeArray0[1] = node1;
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(50);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = new Node((-518), (-31), 29);
      assertNotNull(node0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertEquals((-518), node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      boolean boolean0 = node0.isFromExterns();
      assertFalse(boolean0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertEquals((-518), node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node node1 = new Node((-31), node0, (-914), 32);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertEquals((-518), node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertEquals((-31), node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isWith());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isNE());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isDefaultCase());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertEquals((-518), node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertEquals((-31), node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isWith());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isNE());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isDefaultCase());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIn());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isThrow());
      assertFalse(node2.isArrayLit());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNot());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isWhile());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabel());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isOr());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isAnd());
      assertFalse(node2.isVar());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThis());
      assertFalse(node2.isStringKey());
      assertEquals((-518), node2.getType());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTry());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isHook());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean1 = node1.isFromExterns();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertEquals((-518), node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertEquals((-31), node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isWith());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isNE());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isDefaultCase());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      
      Iterable<Node> iterable0 = node0.siblings();
      assertNotNull(iterable0);
      assertFalse(node0.equals((Object)node1));
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertEquals((-518), node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      int int0 = node0.getChangeTime();
      assertFalse(node0.equals((Object)node1));
      assertEquals(0, int0);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertEquals((-518), node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      boolean boolean2 = node1.isThrow();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertEquals((-518), node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertEquals((-31), node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isWith());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isNE());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isDefaultCase());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -518
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = new Node((-503), 0, 0);
      assertNotNull(node0);
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertEquals((-503), node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = (NoType)modificationVisitor0.caseNoType();
      assertNotNull(noType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isObject());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = (JSType) noType0;
      jSTypeArray0[1] = (JSType) noType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, noType0);
      assertNotNull(enumType0);
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertEquals((-503), node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isObject());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.isObject());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesStringContext());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumType enumType1 = enumType0.toMaybeEnumType();
      assertNotNull(enumType1);
      assertSame(enumType0, enumType1);
      assertSame(enumType1, enumType0);
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertEquals((-503), node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isObject());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.isObject());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesStringContext());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType1.isInterface());
      assertFalse(enumType1.isConstructor());
      assertFalse(enumType1.isNoType());
      assertFalse(enumType1.isNoObjectType());
      assertFalse(enumType1.isFunctionPrototypeType());
      assertFalse(enumType1.isRecordType());
      assertFalse(enumType1.isNoResolvedType());
      assertFalse(enumType1.isFunctionType());
      assertFalse(enumType1.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertFalse(enumType1.isUnionType());
      assertFalse(enumType1.isNumberValueType());
      assertFalse(enumType1.isNullType());
      assertTrue(enumType1.isObject());
      assertFalse(enumType1.isCheckedUnknownType());
      assertFalse(enumType1.isNominalConstructor());
      assertFalse(enumType1.isBooleanValueType());
      assertFalse(enumType1.isVoidType());
      assertFalse(enumType1.isEnumElementType());
      assertTrue(enumType1.isEnumType());
      assertFalse(enumType1.isTemplatizedType());
      assertFalse(enumType1.isAllType());
      assertFalse(enumType1.isOrdinaryFunction());
      assertTrue(enumType1.matchesObjectContext());
      assertFalse(enumType1.isTemplateType());
      assertFalse(enumType1.isStringValueType());
      assertFalse(enumType1.matchesNumberContext());
      assertTrue(enumType1.matchesStringContext());
      assertFalse(enumType1.isResolved());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      jSTypeArray0[2] = (JSType) enumType1;
      jSTypeArray0[3] = (JSType) noType0;
      jSTypeArray0[4] = (JSType) noType0;
      jSTypeArray0[5] = (JSType) noType0;
      jSTypeArray0[6] = (JSType) noType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertEquals(83, node1.getType());
      assertFalse(node1.isIn());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertEquals(7, node1.getChildCount());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isReturn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDec());
      assertFalse(node1.isCast());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isParamList());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertEquals(7, jSTypeArray0.length);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      
      NoType noType1 = (NoType)modificationVisitor0.caseNoType();
      assertNotNull(noType1);
      assertSame(noType1, noType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType1.isObject());
      assertFalse(noType1.isNoResolvedType());
      assertFalse(noType1.isStringValueType());
      assertFalse(noType1.isUnionType());
      assertFalse(noType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertTrue(noType1.isNullable());
      assertFalse(noType1.isCheckedUnknownType());
      assertFalse(noType1.hasCachedValues());
      assertFalse(noType1.isNoObjectType());
      assertFalse(noType1.isTemplatizedType());
      assertFalse(noType1.isNominalConstructor());
      assertTrue(noType1.isNoType());
      assertTrue(noType1.canBeCalled());
      assertNull(noType1.getReferenceName());
      assertFalse(noType1.isNominalType());
      assertTrue(noType1.isConstructor());
      assertFalse(noType1.isOrdinaryFunction());
      assertFalse(noType1.isFunctionType());
      assertFalse(noType1.isInterface());
      assertTrue(noType1.matchesNumberContext());
      assertFalse(noType1.isEnumElementType());
      assertFalse(noType1.isAllType());
      assertFalse(noType1.isTemplateType());
      assertFalse(noType1.isNullType());
      assertFalse(noType1.isBooleanValueType());
      assertFalse(noType1.isReturnTypeInferred());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertFalse(noType1.isResolved());
      assertTrue(noType1.matchesObjectContext());
      assertFalse(noType1.isEnumType());
      assertTrue(noType1.hasInstanceType());
      assertTrue(noType1.matchesStringContext());
      assertFalse(noType1.isFunctionPrototypeType());
      assertFalse(noType1.isRecordType());
      assertFalse(noType1.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) noType0);
      assertNull(functionType0);
      assertSame(noType0, noType1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isObject());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      node0.setJSType((JSType) null);
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertEquals((-503), node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      node0.type = 0;
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      
      boolean boolean0 = node0.isHook();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      boolean boolean1 = node0.isCall();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node0, node1);
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      boolean boolean2 = node0.isThrow();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(node0, node1);
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      node0.addSuppression("l128Q<K[");
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = new Node(8232, 3902, 3902);
      assertNotNull(node0);
      assertFalse(node0.isScript());
      assertEquals(3902, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(15986494, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertEquals(8232, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertEquals(3902, node0.getLineno());
      assertFalse(node0.isAnd());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      node0.putBooleanProp(8232, true);
      assertFalse(node0.isScript());
      assertEquals(3902, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(15986494, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertEquals(8232, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertEquals(3902, node0.getLineno());
      assertFalse(node0.isAnd());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      boolean boolean0 = node0.isDebugger();
      assertFalse(boolean0);
      assertFalse(node0.isScript());
      assertEquals(3902, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(15986494, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertEquals(8232, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertEquals(3902, node0.getLineno());
      assertFalse(node0.isAnd());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      JSType jSType0 = node0.getJSType();
      assertNull(jSType0);
      assertFalse(node0.isScript());
      assertEquals(3902, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(15986494, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertEquals(8232, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertEquals(3902, node0.getLineno());
      assertFalse(node0.isAnd());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      String string0 = node0.getSourceFileName();
      assertNull(string0);
      assertFalse(node0.isScript());
      assertEquals(3902, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(15986494, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertEquals(8232, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertEquals(3902, node0.getLineno());
      assertFalse(node0.isAnd());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = Node.newString("null", (-826), (-826));
      assertNotNull(node0);
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      boolean boolean0 = node0.isWith();
      assertFalse(boolean0);
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      Node node1 = Node.newString("\n\nTree2:\n", 8, 16);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNot());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNew());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertEquals(32784, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertTrue(node1.isString());
      assertEquals(16, node1.getCharno());
      assertFalse(node1.isHook());
      assertEquals(8, node1.getLineno());
      assertEquals(40, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      // Undeclared exception!
      try { 
        node1.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = null;
      try {
        node0 = new Node(0, (Node) null, (Node) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      assertNotNull(node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      assertNotNull(node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(29, node_SideEffectFlags2.valueOf());
      assertEquals(29, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      assertNotNull(node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
      assertNotNull(node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.clearAllFlags();
      assertNotNull(node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags6.valueOf());
      
      String string0 = "com.google.common.collect.RegularImmutableTable$Values";
      Node node0 = Node.newString("com.google.common.collect.RegularImmutableTable$Values", 36, 36);
      assertNotNull(node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals(147492, node0.getSourcePosition());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertEquals(36, node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(36, node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = null;
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface((ObjectType) null, "com.google.common.collect.RegularImmutableTable$Values");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = new Node(8232, 3902, 3902);
      assertNotNull(node0);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertEquals(3902, node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(15986494, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertEquals(8232, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertEquals(3902, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      node0.putBooleanProp(8232, true);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertEquals(3902, node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(15986494, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertEquals(8232, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertEquals(3902, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      boolean boolean0 = node0.isDebugger();
      assertFalse(boolean0);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertEquals(3902, node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(15986494, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertEquals(8232, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertEquals(3902, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      node0.setIsSyntheticBlock(true);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertEquals(3902, node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(15986494, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertEquals(8232, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertEquals(3902, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = Node.newString("", 93, 133);
      assertNotNull(node0);
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(381061, node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasChildren());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertEquals(133, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertEquals(93, node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean0 = node0.isComma();
      assertFalse(boolean0);
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(381061, node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasChildren());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertEquals(133, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertEquals(93, node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      int int0 = (-1123);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1123), nodeArray0, (-1123), 49);
      assertNotNull(node0);
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertEquals((-1123), node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertEquals(0, nodeArray0.length);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      Node node1 = new Node((-1123), node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertEquals((-1123), node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNot());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFalse());
      assertTrue(node1.hasChildren());
      assertEquals((-1123), node1.getType());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isScript());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals(0, nodeArray0.length);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node2 = null;
      try {
        node2 = new Node((-1123), node1, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = Node.newNumber(371.400751289);
      assertNotNull(node0);
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      boolean boolean0 = node0.isFromExterns();
      assertFalse(boolean0);
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      boolean boolean1 = node0.isOptionalArg();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      String string0 = "quoted";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[6];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = modificationVisitor0.caseAllType();
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isFunctionType());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.canBeCalled());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      jSTypeArray0[0] = jSType0;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray0[0], (List<JSType>) vector0);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(6, jSTypeArray0.length);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSTypeArray0[1] = (JSType) functionType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSTypeArray0[1]);
      assertNotNull(enumType0);
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.matchesNumberContext());
      assertEquals(6, jSTypeArray0.length);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = enumType0.getElementsType();
      assertNotNull(enumElementType0);
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isTemplatizedType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertEquals(6, jSTypeArray0.length);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      assertNotNull(enumElementType1);
      assertSame(enumElementType0, enumElementType1);
      assertSame(enumElementType1, enumElementType0);
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isTemplatizedType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertFalse(enumElementType1.isNoResolvedType());
      assertFalse(enumElementType1.isVoidType());
      assertFalse(enumElementType1.isNoType());
      assertTrue(enumElementType1.isEnumElementType());
      assertFalse(enumElementType1.isNominalConstructor());
      assertFalse(enumElementType1.isStringValueType());
      assertFalse(enumElementType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertEquals("Unknown class name", enumElementType1.getReferenceName());
      assertFalse(enumElementType1.isBooleanValueType());
      assertFalse(enumElementType1.isRecordType());
      assertTrue(enumElementType1.isNominalType());
      assertFalse(enumElementType1.isConstructor());
      assertFalse(enumElementType1.isNumberValueType());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertFalse(enumElementType1.isEnumType());
      assertFalse(enumElementType1.isUnionType());
      assertFalse(enumElementType1.isNativeObjectType());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertFalse(enumElementType1.hasCachedValues());
      assertFalse(enumElementType1.isFunctionType());
      assertFalse(enumElementType1.isInterface());
      assertFalse(enumElementType1.isResolved());
      assertFalse(enumElementType1.isNullType());
      assertFalse(enumElementType1.isAllType());
      assertFalse(enumElementType1.isTemplatizedType());
      assertFalse(enumElementType1.isTemplateType());
      assertTrue(enumElementType1.hasReferenceName());
      assertEquals(6, jSTypeArray0.length);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ObjectType objectType0 = enumElementType1.getParentScope();
      assertNull(objectType0);
      assertSame(enumElementType0, enumElementType1);
      assertSame(enumElementType1, enumElementType0);
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isTemplatizedType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertFalse(enumElementType1.isNoResolvedType());
      assertFalse(enumElementType1.isVoidType());
      assertFalse(enumElementType1.isNoType());
      assertTrue(enumElementType1.isEnumElementType());
      assertFalse(enumElementType1.isNominalConstructor());
      assertFalse(enumElementType1.isStringValueType());
      assertFalse(enumElementType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertEquals("Unknown class name", enumElementType1.getReferenceName());
      assertFalse(enumElementType1.isBooleanValueType());
      assertFalse(enumElementType1.isRecordType());
      assertTrue(enumElementType1.isNominalType());
      assertFalse(enumElementType1.isConstructor());
      assertFalse(enumElementType1.isNumberValueType());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertFalse(enumElementType1.isEnumType());
      assertFalse(enumElementType1.isUnionType());
      assertFalse(enumElementType1.isNativeObjectType());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertFalse(enumElementType1.hasCachedValues());
      assertFalse(enumElementType1.isFunctionType());
      assertFalse(enumElementType1.isInterface());
      assertFalse(enumElementType1.isResolved());
      assertFalse(enumElementType1.isNullType());
      assertFalse(enumElementType1.isAllType());
      assertFalse(enumElementType1.isTemplatizedType());
      assertFalse(enumElementType1.isTemplateType());
      assertTrue(enumElementType1.hasReferenceName());
      assertEquals(6, jSTypeArray0.length);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSTypeArray0[2] = (JSType) null;
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      assertNotNull(templateType0);
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isTemplateType());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0, templateType0, templateType0, templateType0);
      assertNotNull(immutableList0);
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isTemplateType());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(5, immutableList0.size());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(immutableList0.contains(templateType0));
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createInterfaceType((String) null, node0, immutableList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = Node.newString("~_b7-c|<P", (-1603), (-1603));
      assertNotNull(node0);
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      Node node1 = new Node((-1603), node0, node0, node0, node0, 15, (-240));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isFunction());
      assertEquals((-1603), node1.getType());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInc());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      boolean boolean0 = node1.isFromExterns();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isFunction());
      assertEquals((-1603), node1.getType());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInc());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node2 = node1.copyInformationFrom(node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isFunction());
      assertEquals((-1603), node1.getType());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInc());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isNE());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertEquals((-1603), node2.getType());
      assertFalse(node2.isArrayLit());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIn());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCatch());
      assertFalse(node2.isVar());
      assertFalse(node2.isHook());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isTry());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      int int0 = node2.getSourceOffset();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertEquals((-1), int0);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isFunction());
      assertEquals((-1603), node1.getType());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInc());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isNE());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertEquals((-1603), node2.getType());
      assertFalse(node2.isArrayLit());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIn());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCatch());
      assertFalse(node2.isVar());
      assertFalse(node2.isHook());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isTry());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      boolean boolean1 = node1.isOr();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(node1, node2);
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isFunction());
      assertEquals((-1603), node1.getType());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInc());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      node1.setIsSyntheticBlock(false);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertSame(node1, node2);
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isFunction());
      assertEquals((-1603), node1.getType());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInc());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      // Undeclared exception!
      try { 
        node1.setDouble(4095);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1603
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newNumber(0.5);
      assertNotNull(node0);
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      Node node1 = new Node(1929, node0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(1929, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      int int0 = node1.getIntProp(54);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, int0);
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(1929, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      boolean boolean0 = node1.isVoid();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(1929, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      boolean boolean1 = node0.isEquivalentToShallow(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(1929, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node2 = node1.useSourceInfoFrom(node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(1929, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals(1929, node2.getType());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isHook());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isThis());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTrue());
      assertFalse(node2.isName());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCall());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTry());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isIn());
      assertFalse(node2.isContinue());
      assertTrue(node2.hasChildren());
      assertEquals(1, node2.getChildCount());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCast());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      boolean boolean2 = node0.isWhile();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean3 = node1.isNot();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertSame(node1, node2);
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(1929, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      int int1 = node1.getSourceOffset();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertSame(node1, node2);
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(1929, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      int int2 = node0.getChangeTime();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean4 = node0.isEmpty();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      node0.addChildToFront(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(1929, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals(1929, node2.getType());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isHook());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isThis());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTrue());
      assertFalse(node2.isName());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCall());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTry());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isIn());
      assertFalse(node2.isContinue());
      assertTrue(node2.hasChildren());
      assertEquals(1, node2.getChildCount());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCast());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 0
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = Node.newNumber((-55.34420070904429));
      assertNotNull(node0);
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      
      Node node1 = new Node(51, node0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDo());
      assertTrue(node1.isIn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(51, node1.getType());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertTrue(node1.hasChildren());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDo());
      assertTrue(node1.isIn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(51, node1.getType());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertTrue(node1.hasChildren());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isIn());
      assertTrue(node2.isNumber());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFalse());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isNE());
      assertFalse(node2.isThis());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertEquals(39, node2.getType());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isParamList());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNot());
      assertFalse(node2.isTrue());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssign());
      assertFalse(node2.isOr());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      
      boolean boolean0 = node0.isAnd();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertSame(node0, node2);
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      
      node1.setVarArgs(true);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertSame(node0, node2);
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDo());
      assertTrue(node1.isIn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(51, node1.getType());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertTrue(node1.hasChildren());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$FileLevelJsDocBuilder", 841, 1931);
      assertNotNull(node0);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertEquals(841, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertEquals(1931, node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertEquals(3446667, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      node0.type = 1931;
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertEquals(841, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertEquals(1931, node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertEquals(1931, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertEquals(3446667, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(841);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = new Node(79, 0, (-1532));
      assertNotNull(node0);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isReturn());
      assertEquals(79, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node1 = new Node(32);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTry());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertEquals(32, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDo());
      assertFalse(node1.isString());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFor());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.isTypeOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node2 = node0.srcrefTree(node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isReturn());
      assertEquals(79, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTry());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertEquals(32, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDo());
      assertFalse(node1.isString());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFor());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.isTypeOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isTrue());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNull());
      assertFalse(node2.isDo());
      assertEquals(79, node2.getType());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isOr());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWith());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDec());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isFunction());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      boolean boolean0 = node0.isInc();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isReturn());
      assertEquals(79, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = new Node(2755);
      assertNotNull(node0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(2755, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node1 = new Node(0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(2755, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isHook());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      Object object0 = node0.getProp(49);
      assertNull(object0);
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(2755, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node2 = node0.srcrefTree(node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node0, node1);
      assertSame(node0, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertSame(node2, node0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(2755, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isHook());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isHook());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isString());
      assertFalse(node2.isThis());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAnd());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIn());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isCast());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWhile());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertEquals(2755, node2.getType());
      assertFalse(node2.isBreak());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVar());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      Node node3 = Node.newString((-1720), "PUBLIC");
      assertNotNull(node3);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.isParamList());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isNull());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isDo());
      assertFalse(node3.isContinue());
      assertFalse(node3.isVar());
      assertFalse(node3.isFunction());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isCase());
      assertFalse(node3.isNumber());
      assertFalse(node3.isIn());
      assertFalse(node3.isGetterDef());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isBlock());
      assertFalse(node3.isScript());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isTry());
      assertFalse(node3.isFor());
      assertFalse(node3.isWith());
      assertFalse(node3.isCatch());
      assertEquals((-1720), node3.getType());
      assertFalse(node3.isRegExp());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isHook());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isThis());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isBreak());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isInc());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCast());
      assertFalse(node3.isThrow());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isString());
      assertFalse(node3.isEmpty());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isOr());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isWhile());
      assertFalse(node3.isCall());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isComma());
      assertFalse(node3.isAssign());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      Node node0 = Node.newString("Object#Key");
      assertNotNull(node0);
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      Node node1 = new Node((-182), node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertTrue(node1.hasOneChild());
      assertEquals((-182), node1.getType());
      assertFalse(node1.isGetProp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      simpleErrorReporter0.warning("4q85v|t;SuX#", "4q85v|t;SuX#", 306654252, 147);
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
      
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface((ObjectType) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = new Node(1437);
      assertNotNull(node0);
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertEquals(1437, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage1("Object#Element", jSTypeRegistry0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property Object#Element
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = Node.newString(41, "", 161, 1560);
      assertNotNull(node0);
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals(161, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertEquals(661016, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isComma());
      assertEquals(41, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isHook());
      assertEquals(1560, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node node1 = new Node(0, 0, 83);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDec());
      assertEquals(83, node1.getCharno());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isScript());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFor());
      assertEquals(83, node1.getSourcePosition());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isNE());
      assertFalse(node1.isComma());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      node0.addChildrenToFront(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(161, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertEquals(661016, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isComma());
      assertEquals(41, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isScript());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isHook());
      assertEquals(1560, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDec());
      assertEquals(83, node1.getCharno());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isScript());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFor());
      assertEquals(83, node1.getSourcePosition());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isNE());
      assertFalse(node1.isComma());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(157);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 157
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = new Node(13, 13, 13);
      assertNotNull(node0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertEquals(13, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(53261, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertTrue(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertEquals(13, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(13, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      Node node1 = new Node(13, node0, node0, node0, node0, 124, 2);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertEquals(13, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(53261, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertTrue(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertEquals(13, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(13, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertTrue(node1.isNE());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isExprResult());
      assertEquals(507906, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals(13, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertEquals(2, node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(124, node1.getLineno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      boolean boolean0 = node1.isDo();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertEquals(13, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(53261, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertTrue(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertEquals(13, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(13, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertTrue(node1.isNE());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isExprResult());
      assertEquals(507906, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals(13, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertEquals(2, node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(124, node1.getLineno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      int int0 = Node.extractLineno(47);
      assertEquals(0, int0);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      assertNotNull(node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(1, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      assertNotNull(node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(1, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(1, node_SideEffectFlags1.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      assertNotNull(node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(1, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(1, node_SideEffectFlags1.valueOf());
      assertEquals(1, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      assertNotNull(node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      
      node_SideEffectFlags3.clearSideEffectFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags1.valueOf());
      assertEquals(15, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      
      boolean boolean1 = node1.isDebugger();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertEquals(13, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(53261, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertTrue(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertEquals(13, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(13, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertTrue(node1.isNE());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isExprResult());
      assertEquals(507906, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals(13, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertEquals(2, node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(124, node1.getLineno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      node1.setVarArgs(true);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertEquals(13, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(53261, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertTrue(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertEquals(13, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(13, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertTrue(node1.isNE());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isExprResult());
      assertEquals(507906, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals(13, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertEquals(2, node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(124, node1.getLineno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      boolean boolean2 = node0.isGetElem();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(node0, node1);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertEquals(13, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(53261, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertTrue(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertEquals(13, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(13, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = Node.newString("");
      assertNotNull(node0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      
      node0.setIsSyntheticBlock(true);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      
      Node node1 = Node.newString(50, "", 0, 11);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(50, node1.getType());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isThrow());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertEquals(11, node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertEquals(11, node1.getCharno());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isVoid());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isWith());
      assertFalse(node1.isIf());
      assertFalse(node1.isCatch());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      node1.putBooleanProp(29, false);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(50, node1.getType());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isThrow());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertEquals(11, node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertEquals(11, node1.getCharno());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isVoid());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isWith());
      assertFalse(node1.isIf());
      assertFalse(node1.isCatch());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("@{C[!n}|) }!u,{I5", true);
      assertNotNull(simpleSourceFile0);
      assertEquals("@{C[!n}|) }!u,{I5", simpleSourceFile0.toString());
      assertEquals("@{C[!n}|) }!u,{I5", simpleSourceFile0.getName());
      assertTrue(simpleSourceFile0.isExtern());
      
      // Undeclared exception!
      try { 
        simpleSourceFile0.getLineOffset((-2567));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Should not call getLineOffset with line number -2567
         //
         verifyException("com.google.javascript.rhino.jstype.SimpleSourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node((-2090), (Node) null, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      int int0 = (-723);
      Node[] nodeArray0 = new Node[2];
      int int1 = (-4503);
      int int2 = 0;
      Node node0 = null;
      try {
        node0 = new Node((-1543), nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = new Node((-518), (-31), 29);
      assertNotNull(node0);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertEquals((-518), node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      boolean boolean0 = node0.isFromExterns();
      assertFalse(boolean0);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertEquals((-518), node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      Node node1 = new Node((-31), node0, (-914), 32);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertEquals((-518), node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertEquals((-31), node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isName());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertEquals((-518), node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertEquals((-31), node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isName());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node2.isInc());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isIn());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isIf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isScript());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertFalse(node2.isFor());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isName());
      assertEquals((-518), node2.getType());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isFunction());
      assertFalse(node2.isReturn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      boolean boolean1 = node1.isFromExterns();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertEquals((-518), node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertEquals((-31), node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isName());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      Iterable<Node> iterable0 = node0.siblings();
      assertNotNull(iterable0);
      assertFalse(node0.equals((Object)node1));
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertEquals((-518), node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      int int0 = node0.getChangeTime();
      assertFalse(node0.equals((Object)node1));
      assertEquals(0, int0);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertEquals((-518), node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      Node node3 = Node.newNumber(897.3);
      assertNotNull(node3);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertTrue(node3.isNumber());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIn());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isInc());
      assertFalse(node3.isTrue());
      assertFalse(node3.isHook());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isNE());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isIf());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isThrow());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isCast());
      assertFalse(node3.isFunction());
      assertFalse(node3.isString());
      assertFalse(node3.isFalse());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isOr());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isReturn());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssign());
      assertEquals(39, node3.getType());
      assertFalse(node3.hasChildren());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isWhile());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isAdd());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNew());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isWith());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isNull());
      assertFalse(node3.isThis());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTry());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isScript());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSwitch());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      
      boolean boolean2 = node1.isThrow();
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertEquals((-518), node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThis());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertEquals((-31), node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isName());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      node3.setLength(16);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertTrue(node3.isNumber());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIn());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isInc());
      assertFalse(node3.isTrue());
      assertFalse(node3.isHook());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isNE());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isIf());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isThrow());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isCast());
      assertFalse(node3.isFunction());
      assertFalse(node3.isString());
      assertFalse(node3.isFalse());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isOr());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isReturn());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssign());
      assertEquals(39, node3.getType());
      assertFalse(node3.hasChildren());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isWhile());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isAdd());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNew());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isWith());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isNull());
      assertFalse(node3.isThis());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isTry());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isScript());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSwitch());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      
      try { 
        node3.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 897.3 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000005] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = Node.newNumber((-159.74853617220631), 54, 0);
      assertNotNull(node0);
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(54, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals(221184, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node node1 = new Node(57, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(54, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals(221184, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertEquals(57, node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCast());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = Node.newString(0, "side_effect_flags", (-1924), (-1924));
      assertNotNull(node0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node1 = Node.newString("side_effect_flags", 684, (-2584));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertTrue(node1.isString());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertEquals(40, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertTrue(node1.isString());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertEquals(40, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertEquals(0, node2.getType());
      assertFalse(node2.isCase());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFalse());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.isScript());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThis());
      assertFalse(node2.isFor());
      assertFalse(node2.isIf());
      assertFalse(node2.isSetterDef());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isCast());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isComma());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isDec());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isBreak());
      assertFalse(node2.isOr());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[8];
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      assertNotNull(templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("Object#Key", templateType0.getReferenceName());
      assertFalse(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      jSTypeArray0[0] = (JSType) templateType0;
      Node[] nodeArray0 = new Node[8];
      Node node0 = Node.newString("Object#Key", (-901), 1);
      assertNotNull(node0);
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node1 = new Node((-901), node0, node0, node0, 37, (-472));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node1.isIf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertEquals((-901), node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      nodeArray0[0] = node1;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray0[0], jSTypeArray0);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(8, jSTypeArray0.length);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getType((StaticScope<JSType>) functionType0, "first new child has existing parent", "SaW", 30, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      int int0 = (-1533);
      Node node0 = Node.newString("Z5S1UxwSE", 16, (-1533));
      assertNotNull(node0);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Node node1 = new Node(0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isScript());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertEquals(0, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      Node node2 = null;
      try {
        node2 = new Node(0, node1, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      int int0 = 16384;
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(0, 0, 16384);
      assertNotNull(node0);
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals(4095, node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      nodeArray0[0] = node0;
      node0.setType(153);
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertEquals(153, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals(4095, node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertTrue(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      int int1 = 0;
      boolean boolean0 = node0.isUnscopedQualifiedName();
      assertFalse(boolean0);
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertEquals(153, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals(4095, node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertTrue(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LABEL_NAME 0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = new Node(0, 0, 16384);
      assertNotNull(node0);
      assertFalse(node0.isSwitch());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals(4095, node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      int int0 = node0.getIntProp((-849));
      assertEquals(0, int0);
      assertFalse(node0.isSwitch());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertEquals(4095, node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      Node node1 = new Node(2863, 56, 148);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isIn());
      assertEquals(2863, node1.getType());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertEquals(148, node1.getCharno());
      assertEquals(56, node1.getLineno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(229524, node1.getSourcePosition());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isName());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      node1.setIsSyntheticBlock(true);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isIn());
      assertEquals(2863, node1.getType());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertEquals(148, node1.getCharno());
      assertEquals(56, node1.getLineno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(229524, node1.getSourcePosition());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isName());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node2 = new Node(38, node1, 53, 4);
      assertNotNull(node2);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isIn());
      assertEquals(2863, node1.getType());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertEquals(148, node1.getCharno());
      assertEquals(56, node1.getLineno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(229524, node1.getSourcePosition());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isName());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isString());
      assertFalse(node2.isNE());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIf());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetterDef());
      assertEquals(217092, node2.getSourcePosition());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isTry());
      assertEquals(38, node2.getType());
      assertFalse(node2.isVoid());
      assertFalse(node2.isParamList());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNew());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isOr());
      assertEquals(53, node2.getLineno());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isNumber());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertTrue(node2.isName());
      assertEquals(4, node2.getCharno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCast());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      // Undeclared exception!
      try { 
        node0.addChildAfter(node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      
      Node node0 = jSDocInfo0.getAssociatedNode();
      assertNull(node0);
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      
      Node node1 = null;
      try {
        node1 = new Node(1134, (Node) null, (Node) null, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      assertNotNull(node0);
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      int int0 = node0.getIntProp(0);
      assertEquals(0, int0);
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      boolean boolean0 = node0.wasEmptyNode();
      assertFalse(boolean0);
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node node1 = new Node((-2447), node0, node0, node0, node0, 55, 32);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertEquals(225312, node1.getSourcePosition());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertEquals((-2447), node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertEquals(32, node1.getCharno());
      assertEquals(55, node1.getLineno());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      
      node1.setLineno(29);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertEquals((-2447), node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertEquals(32, node1.getCharno());
      assertFalse(node1.isString());
      assertEquals(118816, node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals(29, node1.getLineno());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      
      node1.setCharno((-962));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertEquals((-2447), node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      
      boolean boolean1 = node0.isEquivalentTo(node1, true, true, false);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertEquals((-2447), node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      
      boolean boolean2 = node1.isAssignAdd();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertEquals((-2447), node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertEquals((-2447), node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isContinue());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNE());
      assertFalse(node2.isLabelName());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertEquals((-2447), node2.getType());
      assertTrue(node2.hasChildren());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssign());
      assertFalse(node2.isFunction());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isReturn());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      
      int int1 = 620;
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      
      node_SideEffectFlags0.clearSideEffectFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertEquals(15, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      assertNotNull(node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesThis();
      assertNotNull(node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setReturnsTainted();
      assertNotNull(node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags2.setMutatesArguments();
      assertNotNull(node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags3.setThrows();
      assertNotNull(node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertTrue(node_SideEffectFlags7.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags7.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags3.setAllFlags();
      assertNotNull(node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags8.valueOf());
      assertTrue(node_SideEffectFlags8.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags3.setThrows();
      assertNotNull(node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertTrue(node_SideEffectFlags9.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags9.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags9.setMutatesThis();
      assertNotNull(node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertTrue(node_SideEffectFlags9.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags9.valueOf());
      assertTrue(node_SideEffectFlags10.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags10.valueOf());
      
      node_SideEffectFlags2.clearSideEffectFlags();
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertEquals(15, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags1.valueOf());
      assertEquals(15, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags10.setAllFlags();
      assertNotNull(node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags11, node_SideEffectFlags8);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertTrue(node_SideEffectFlags9.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags9.valueOf());
      assertTrue(node_SideEffectFlags10.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags10.valueOf());
      assertEquals(0, node_SideEffectFlags11.valueOf());
      assertTrue(node_SideEffectFlags11.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags12 = node_SideEffectFlags0.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags12, node_SideEffectFlags9);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags12.valueOf());
      assertTrue(node_SideEffectFlags12.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags13 = node_SideEffectFlags2.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags13, node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags13.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags13.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags14 = node_SideEffectFlags1.setThrows();
      assertNotNull(node_SideEffectFlags14);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags14, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertEquals(0, node_SideEffectFlags14.valueOf());
      assertTrue(node_SideEffectFlags14.areAllFlagsSet());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags15 = node_SideEffectFlags10.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags15);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags15, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags15.valueOf());
      assertTrue(node_SideEffectFlags15.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertTrue(node_SideEffectFlags9.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags9.valueOf());
      assertTrue(node_SideEffectFlags10.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags10.valueOf());
      
      int int0 = 0;
      Node.SideEffectFlags node_SideEffectFlags16 = node_SideEffectFlags9.setAllFlags();
      assertNotNull(node_SideEffectFlags16);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags16, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags16);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags12);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags10);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags11);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags13);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags14);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags15);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertEquals(0, node_SideEffectFlags16.valueOf());
      assertTrue(node_SideEffectFlags16.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertTrue(node_SideEffectFlags9.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags9.valueOf());
      
      Node node0 = Node.newString("REGEXP_FUNCTION_TYPE", 52, 0);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertEquals(212992, node0.getSourcePosition());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertEquals(52, node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      Node node1 = Node.newNumber(0.0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      assertTrue(node1.isNumber());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isRegExp());
      assertEquals((-1), node1.getCharno());
      assertEquals(39, node1.getType());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(1429, "");
      nodeArray0[0] = node0;
      Node node1 = new Node(57, node0, node0, node0);
      nodeArray0[1] = node1;
      Node node2 = Node.newNumber(1.0, 1542, 0);
      nodeArray0[2] = node2;
      Node node3 = null;
      try {
        node3 = new Node(1429, nodeArray0, 0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = new Node((-503), 0, 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      jSTypeArray0[2] = (JSType) enumType1;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[6] = jSType0;
      jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      modificationVisitor0.caseNoType();
      JSType.toMaybeFunctionType(jSType0);
      node0.setJSType((JSType) null);
      node0.type = 0;
      node0.isHook();
      node0.isCall();
      node0.isThrow();
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = "{;{BTex)oG%{R";
      Node node0 = Node.newString("{;{BTex)oG%{R");
      node0.getQualifiedName();
      node0.setVarArgs(false);
      node0.setLineno(117);
      try { 
        node0.setDouble((-1028.3804));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING {;{BTex)oG%{R 117 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = Node.newString("length");
      Node node1 = Node.newString("$hQD45XbaZ>UOaU~)", 15, 0);
      node1.setVarArgs(true);
      assertEquals(61440, node1.getSourcePosition());
      assertEquals(40, node1.getType());
      
      boolean boolean0 = node0.isGetterDef();
      assertFalse(boolean0);
      
      node0.isName();
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = Node.newString(786, "jsdoc_info");
      Node node1 = new Node(0, node0, 12, (-948));
      node1.getJSDocInfo();
      // Undeclared exception!
      try { 
        node1.checkTreeEquals(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }
}
